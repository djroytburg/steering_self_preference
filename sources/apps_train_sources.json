{
  "1": "Problem: \nMikhail walks on a Cartesian plane. He starts at the point $(0, 0)$, and in one move he can go to any of eight adjacent points. For example, if Mikhail is currently at the point $(0, 0)$, he can go to any of the following points in one move:   $(1, 0)$;  $(1, 1)$;  $(0, 1)$;  $(-1, 1)$;  $(-1, 0)$;  $(-1, -1)$;  $(0, -1)$;  $(1, -1)$. \n\nIf Mikhail goes from the point $(x1, y1)$ to the point $(x2, y2)$ in one move, and $x1 \\ne x2$ and $y1 \\ne y2$, then such a move is called a diagonal move.\n\nMikhail has $q$ queries. For the $i$-th query Mikhail's target is to go to the point $(n_i, m_i)$ from the point $(0, 0)$ in exactly $k_i$ moves. Among all possible movements he want to choose one with the maximum number of diagonal moves. Your task is to find the maximum number of diagonal moves or find that it is impossible to go from the point $(0, 0)$ to the point $(n_i, m_i)$ in $k_i$ moves.\n\nNote that Mikhail can visit any point any number of times (even the destination point!).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries.\n\nThen $q$ lines follow. The $i$-th of these $q$ lines contains three integers $n_i$, $m_i$ and $k_i$ ($1 \\le n_i, m_i, k_i \\le 10^{18}$) \u2014 $x$-coordinate of the destination point of the query, $y$-coordinate of the destination point of the query and the number of moves in the query, correspondingly.\n\n\n-----Output-----\n\nPrint $q$ integers. The $i$-th integer should be equal to -1 if Mikhail cannot go from the point $(0, 0)$ to the point $(n_i, m_i)$ in exactly $k_i$ moves described above. Otherwise the $i$-th integer should be equal to the the maximum number of diagonal moves among all possible movements.\n\n\n-----Example-----\nInput\n3\n2 2 3\n4 3 7\n10 1 9\n\nOutput\n1\n6\n-1\n\n\n\n-----Note-----\n\nOne of the possible answers to the first test case: $(0, 0) \\to (1, 0) \\to (1, 1) \\to (2, 2)$.\n\nOne of the possible answers to the second test case: $(0, 0) \\to (0, 1) \\to (1, 2) \\to (0, 3) \\to (1, 4) \\to (2, 3) \\to (3, 2) \\to (4, 3)$.\n\nIn the third test case Mikhail cannot reach the point $(10, 1)$ in 9 moves.\n\n Examples: \nInput: \n3\n2 2 3\n4 3 7\n10 1 9\n\nOutput: \n 1\n6\n-1\n\n",
  "3": "Problem: \nYou have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\nSome examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$. \n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k < n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0\n\n Examples: \nInput: \n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput: \n 10\n0\n\n",
  "4": "Problem: \nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\n\n\n-----Note-----\n\nThe first test case is described in the problem statement.\n\nIn the second test case all numbers from $1$ to $5$ are beautiful:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 4$ we will have a permutation $[1, 2]$ for $m = 2$;  if $l = 2$ and $r = 4$ we will have a permutation $[3, 1, 2]$ for $m = 3$;  if $l = 2$ and $r = 5$ we will have a permutation $[3, 1, 2, 4]$ for $m = 4$;  if $l = 1$ and $r = 5$ we will have a permutation $[5, 3, 1, 2, 4]$ for $m = 5$.\n\n Examples: \nInput: \n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput: \n 101011\n11111\n1001\n\n",
  "5": "Problem: \nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.\n\n Examples: \nInput: \n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput: \n 2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n",
  "6": "Problem: \nArthur owns a ski resort on a mountain. There are $n$ landing spots on the mountain numbered from $1$ to $n$ from the top to the foot of the mountain. The spots are connected with one-directional ski tracks. All tracks go towards the foot of the mountain, so there are no directed cycles formed by the tracks. There are at most two tracks leaving each spot, but many tracks may enter the same spot.\n\nA skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks.\n\nArthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable. \n\nFormally, after closing some of the spots, there should not be a path that consists of two or more tracks.\n\nArthur doesn't want to close too many spots. He will be happy to find any way to close at most $\\frac{4}{7}n$ spots so that the remaining part is safe. Help him find any suitable way to do so.\n\n\n-----Input-----\n\nThe first line contains a single positive integer $T$\u00a0\u2014 the number of test cases. $T$ test case description follows.\n\nThe first line of each description contains two integers $n$ and $m$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the number of landing spots and tracks respectively.\n\nThe following $m$ lines describe the tracks. Each of these lines contains two integers $x$ and $y$ ($1 \\leq x < y \\leq n$)\u00a0\u2014 indices of the starting and finishing spots for the respective track. It is guaranteed that at most two tracks start at each spot. There may be tracks in which starting and finishing spots both coincide.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print a single integer $k$ ($0 \\leq k \\leq \\frac{4}{7}n$)\u00a0\u2014 the number of spots to be closed. In the next line, print $k$ distinct integers\u00a0\u2014 indices of all spots to be closed, in any order.\n\nIf there are several answers, you may output any of them. Note that you don't have to minimize $k$. It can be shown that a suitable answer always exists.\n\n\n-----Example-----\nInput\n2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\nOutput\n2\n3 4 \n4\n4 5 6 7 \n\n\n\n-----Note-----\n\nIn the first sample case, closing any two spots is suitable.\n\nIn the second sample case, closing only the spot $1$ is also suitable.\n\n Examples: \nInput: \n2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\nOutput: \n 2\n3 4 \n4\n4 5 6 7 \n\n",
  "8": "Problem: \nYou like playing chess tournaments online.\n\nIn your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a \"previous game\").\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 20,000$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\\le n\\le 100,000$, $0\\le k\\le n$) \u2013 the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\n\n\n-----Note-----\n\nExplanation of the first testcase. Before changing any outcome, the score is $2$. Indeed, you won the first game, so you got $1$ point, and you won also the third, so you got another $1$ point (and not $2$ because you lost the second game).\n\nAn optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games (the string of the outcomes becomes WWWWL). Hence, the new score is $7=1+2+2+2$: $1$ point for the first game and $2$ points for the second, third and fourth game.\n\nExplanation of the second testcase. Before changing any outcome, the score is $3$. Indeed, you won the fourth game, so you got $1$ point, and you won also the fifth game, so you got $2$ more points (since you won also the previous game).\n\nAn optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games (the string of the outcomes becomes WWWWWW). Hence, the new score is $11 = 1+2+2+2+2+2$: $1$ point for the first game and $2$ points for all the other games.\n\n Examples: \nInput: \n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput: \n 7\n11\n6\n26\n46\n0\n1\n6\n\n",
  "9": "Problem: \nAlice and Bob play a game. They have a binary string $s$ (a string such that each character in it is either $0$ or $1$). Alice moves first, then Bob, then Alice again, and so on.\n\nDuring their move, the player can choose any number (not less than one) of consecutive equal characters in $s$ and delete them.\n\nFor example, if the string is $10110$, there are $6$ possible moves (deleted characters are bold):  $\\textbf{1}0110 \\to 0110$;  $1\\textbf{0}110 \\to 1110$;  $10\\textbf{1}10 \\to 1010$;  $101\\textbf{1}0 \\to 1010$;  $10\\textbf{11}0 \\to 100$;  $1011\\textbf{0} \\to 1011$. \n\nAfter the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: $10\\textbf{11}0 \\to 1\\textbf{00} \\to 1$.\n\nThe game ends when the string becomes empty, and the score of each player is the number of $1$-characters deleted by them.\n\nEach player wants to maximize their score. Calculate the resulting score of Alice.\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 500$) \u2014 the number of test cases.\n\nEach test case contains exactly one line containing a binary string $s$ ($1 \\le |s| \\le 100$).\n\n\n-----Output-----\n\nFor each test case, print one integer \u2014 the resulting score of Alice (the number of $1$-characters deleted by her).\n\n\n-----Example-----\nInput\n5\n01111001\n0000\n111111\n101010101\n011011110111\n\nOutput\n4\n0\n6\n3\n6\n\n\n\n-----Note-----\n\nQuestions about the optimal strategy will be ignored.\n\n Examples: \nInput: \n5\n01111001\n0000\n111111\n101010101\n011011110111\n\nOutput: \n 4\n0\n6\n3\n6\n\n",
  "10": "Problem: \nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deleting some (possibly, zero or all) elements.\n\nA permutation of length $n$ is an array of length $n$ in which every element from $1$ to $n$ occurs exactly once.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\n\n\n-----Note-----\n\nIn the first test case, there are $4$ subsequences of length at least $2$:  $[3,2]$ which gives us $|3-2|=1$.  $[3,1]$ which gives us $|3-1|=2$.  $[2,1]$ which gives us $|2-1|=1$.  $[3,2,1]$ which gives us $|3-2|+|2-1|=2$. \n\nSo the answer is either $[3,1]$ or $[3,2,1]$. Since we want the subsequence to be as short as possible, the answer is $[3,1]$.\n\n Examples: \nInput: \n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput: \n 2\n3 1 \n3\n1 4 2 \n\n",
  "12": "Problem: \nOnce again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers $a$ and $b$ of length $n$. It turned out that array $a$ contains only elements from the set $\\{-1, 0, 1\\}$.\n\nAnton can perform the following sequence of operations any number of times:  Choose any pair of indexes $(i, j)$ such that $1 \\le i < j \\le n$. It is possible to choose the same pair $(i, j)$ more than once.   Add $a_i$ to $a_j$. In other words, $j$-th element of the array becomes equal to $a_i + a_j$. \n\nFor example, if you are given array $[1, -1, 0]$, you can transform it only to $[1, -1, -1]$, $[1, 0, 0]$ and $[1, -1, 1]$ by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array $a$ so that it becomes equal to array $b$. Can you help him?\n\n\n-----Input-----\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) \u00a0\u2014 the length of arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-1 \\le a_i \\le 1$) \u00a0\u2014 elements of array $a$. There can be duplicates among elements.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-10^9 \\le b_i \\le 10^9$) \u00a0\u2014 elements of array $b$. There can be duplicates among elements.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one line containing \"YES\" if it's possible to make arrays $a$ and $b$ equal by performing the described operations, or \"NO\" if it's impossible.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n\nOutput\nYES\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test-case we can choose $(i, j)=(2, 3)$ twice and after that choose $(i, j)=(1, 2)$ twice too. These operations will transform $[1, -1, 0] \\to [1, -1, -2] \\to [1, 1, -2]$\n\nIn the second test case we can't make equal numbers on the second position.\n\nIn the third test case we can choose $(i, j)=(1, 2)$ $41$ times. The same about the fourth test case.\n\nIn the last lest case, it is impossible to make array $a$ equal to the array $b$.\n\n Examples: \nInput: \n5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n\nOutput: \n YES\nNO\nYES\nYES\nNO\n\n",
  "13": "Problem: \nYour company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \\dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the $n = 5$ then at least $3$ units of the highway should have high quality; if $n = 4$ then at least $2$ units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \\le n, g, b \\le 10^9$) \u2014 the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\n\n\n-----Note-----\n\nIn the first test case, you can just lay new asphalt each day, since days $1, 3, 5$ are good.\n\nIn the second test case, you can also lay new asphalt each day, since days $1$-$8$ are good.\n\n Examples: \nInput: \n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput: \n 5\n8\n499999500000\n\n",
  "14": "Problem: \nVasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers $a_1$ and $b_1$ ($1 \\le a_1, b_1 \\le 100$) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers $a_2$ and $b_2$ ($1 \\le a_2, b_2 \\le 100$) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\n\n-----Output-----\n\nPrint $t$ answers, each of which is a string \"YES\" (in the case of a positive answer) or \"NO\" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput\nYes\nYes\nNo\n\n Examples: \nInput: \n3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput: \n Yes\nYes\nNo\n\n",
  "15": "Problem: \nScreen resolution of Polycarp's monitor is $a \\times b$ pixels. Unfortunately, there is one dead pixel at his screen. It has coordinates $(x, y)$ ($0 \\le x < a, 0 \\le y < b$). You can consider columns of pixels to be numbered from $0$ to $a-1$, and rows\u00a0\u2014 from $0$ to $b-1$.\n\nPolycarp wants to open a rectangular window of maximal size, which doesn't contain the dead pixel. The boundaries of the window should be parallel to the sides of the screen.\n\nPrint the maximal area (in pixels) of a window that doesn't contain the dead pixel inside itself.\n\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test. In the next lines you are given descriptions of $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$ and $y$ ($1 \\le a, b \\le 10^4$; $0 \\le x < a$; $0 \\le y < b$)\u00a0\u2014 the resolution of the screen and the coordinates of a dead pixel. It is guaranteed that $a+b>2$ (e.g. $a=b=1$ is impossible).\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 the answers for each test case. Each answer should contain an integer equal to the maximal possible area (in pixels) of a rectangular window, that doesn't contain the dead pixel.\n\n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\n\n-----Note-----\n\nIn the first test case, the screen resolution is $8 \\times 8$, and the upper left pixel is a dead pixel. Here you can see one of two possible layouts of the maximal window. [Image]\n\n Examples: \nInput: \n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput: \n 56\n6\n442\n1\n45\n80\n\n",
  "17": "Problem: \nYou are given an array $a_1, a_2 \\dots a_n$. Calculate the number of tuples $(i, j, k, l)$ such that:   $1 \\le i < j < k < l \\le n$;  $a_i = a_k$ and $a_j = a_l$; \n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 3000$)\u00a0\u2014 the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the array $a$.\n\nIt's guaranteed that the sum of $n$ in one test doesn't exceed $3000$.\n\n\n-----Output-----\n\nFor each test case, print the number of described tuples.\n\n\n-----Example-----\nInput\n2\n5\n2 2 2 2 2\n6\n1 3 3 1 2 3\n\nOutput\n5\n2\n\n\n\n-----Note-----\n\nIn the first test case, for any four indices $i < j < k < l$ are valid, so the answer is the number of tuples.\n\nIn the second test case, there are $2$ valid tuples:   $(1, 2, 4, 6)$: $a_1 = a_4$ and $a_2 = a_6$;  $(1, 3, 4, 6)$: $a_1 = a_4$ and $a_3 = a_6$.\n\n Examples: \nInput: \n2\n5\n2 2 2 2 2\n6\n1 3 3 1 2 3\n\nOutput: \n 5\n2\n\n",
  "18": "Problem: \nThe statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 200$)\u00a0\u2014 the number of test cases.\n\nNext $T$ lines contain descriptions of test cases\u00a0\u2014 one per line. Each line contains single even integer $n$ ($2 \\le n \\le 200$). Don't forget you need to embed $2n$-gon, not an $n$-gon.\n\n\n-----Output-----\n\nPrint $T$ real numbers\u00a0\u2014 one per test case. For each test case, print the minimum length of a side of the square $2n$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$.\n\n\n-----Example-----\nInput\n3\n2\n4\n200\n\nOutput\n1.000000000\n2.414213562\n127.321336469\n\n Examples: \nInput: \n3\n2\n4\n200\n\nOutput: \n 1.000000000\n2.414213562\n127.321336469\n\n",
  "19": "Problem: \nThe only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \\le d \\le n$) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of $d$ consecutive days in which all episodes belong to the purchased shows.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input. Then $t$ test case descriptions follow.\n\nThe first line of each test case contains three integers $n, k$ and $d$ ($1 \\le n \\le 2\\cdot10^5$, $1 \\le k \\le 10^6$, $1 \\le d \\le n$). The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show that is broadcasted on the $i$-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ integers \u2014 the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for $d$ consecutive days. Please note that it is permissible that you will be able to watch more than $d$ days in a row.\n\n\n-----Example-----\nInput\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\nOutput\n2\n1\n4\n5\n\n\n\n-----Note-----\n\nIn the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show $1$ and on show $2$. So the answer is two.\n\nIn the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.\n\nIn the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.\n\nIn the fourth test case, you can buy subscriptions to shows $3,5,7,8,9$, and you will be able to watch shows for the last eight days.\n\n Examples: \nInput: \n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\nOutput: \n 2\n1\n4\n5\n\n",
  "20": "Problem: \nGildong owns a bulgogi restaurant. The restaurant has a lot of customers, so many of them like to make a reservation before visiting it.\n\nGildong tries so hard to satisfy the customers that he even memorized all customers' preferred temperature ranges! Looking through the reservation list, he wants to satisfy all customers by controlling the temperature of the restaurant.\n\nThe restaurant has an air conditioner that has 3 states: off, heating, and cooling. When it's off, the restaurant's temperature remains the same. When it's heating, the temperature increases by 1 in one minute. Lastly, when it's cooling, the temperature decreases by 1 in one minute. Gildong can change the state as many times as he wants, at any integer minutes. The air conditioner is off initially.\n\nEach customer is characterized by three values: $t_i$ \u2014 the time (in minutes) when the $i$-th customer visits the restaurant, $l_i$ \u2014 the lower bound of their preferred temperature range, and $h_i$ \u2014 the upper bound of their preferred temperature range.\n\nA customer is satisfied if the temperature is within the preferred range at the instant they visit the restaurant. Formally, the $i$-th customer is satisfied if and only if the temperature is between $l_i$ and $h_i$ (inclusive) in the $t_i$-th minute.\n\nGiven the initial temperature, the list of reserved customers' visit times and their preferred temperature ranges, you're going to help him find if it's possible to satisfy all customers.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $q$ ($1 \\le q \\le 500$). Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $-10^9 \\le m \\le 10^9$), where $n$ is the number of reserved customers and $m$ is the initial temperature of the restaurant.\n\nNext, $n$ lines follow. The $i$-th line of them contains three integers $t_i$, $l_i$, and $h_i$ ($1 \\le t_i \\le 10^9$, $-10^9 \\le l_i \\le h_i \\le 10^9$), where $t_i$ is the time when the $i$-th customer visits, $l_i$ is the lower bound of their preferred temperature range, and $h_i$ is the upper bound of their preferred temperature range. The preferred temperature ranges are inclusive.\n\nThe customers are given in non-decreasing order of their visit time, and the current time is $0$.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if it is possible to satisfy all customers. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n\nOutput\nYES\nNO\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first case, Gildong can control the air conditioner to satisfy all customers in the following way:  At $0$-th minute, change the state to heating (the temperature is 0).  At $2$-nd minute, change the state to off (the temperature is 2).  At $5$-th minute, change the state to heating (the temperature is 2, the $1$-st customer is satisfied).  At $6$-th minute, change the state to off (the temperature is 3).  At $7$-th minute, change the state to cooling (the temperature is 3, the $2$-nd customer is satisfied).  At $10$-th minute, the temperature will be 0, which satisfies the last customer. \n\nIn the third case, Gildong can change the state to heating at $0$-th minute and leave it be. Then all customers will be satisfied. Note that the $1$-st customer's visit time equals the $2$-nd customer's visit time.\n\nIn the second and the fourth case, Gildong has to make at least one customer unsatisfied.\n\n Examples: \nInput: \n4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n\nOutput: \n YES\nNO\nYES\nNO\n\n",
  "21": "Problem: \nAmong Johnny's numerous hobbies, there are two seemingly harmless ones: applying bitwise operations and sneaking into his dad's office. As it is usually the case with small children, Johnny is unaware that combining these two activities can get him in a lot of trouble.\n\nThere is a set $S$ containing very important numbers on his dad's desk. The minute Johnny heard about it, he decided that it's a good idea to choose a positive integer $k$ and replace each element $s$ of the set $S$ with $s \\oplus k$ ($\\oplus$ denotes the exclusive or operation). \n\nHelp him choose such $k$ that Johnny's dad will not see any difference after his son is done playing (i.e. Johnny will get the same set as before playing). It is possible that no such number exists. It is also possible that there are many of them. In such a case, output the smallest one. Note that the order of elements in a set doesn't matter, i.e. set $\\{1, 2, 3\\}$ equals to set $\\{2, 1, 3\\}$.\n\nFormally, find the smallest positive integer $k$ such that $\\{s \\oplus k | s \\in S\\} = S$ or report that there is no such number.\n\nFor example, if $S = \\{1, 3, 4\\}$ and $k = 2$, new set will be equal to $\\{3, 1, 6\\}$. If $S = \\{0, 1, 2, 3\\}$ and $k = 1$, after playing set will stay the same.\n\n\n-----Input-----\n\nIn the first line of input, there is a single integer $t$ ($1 \\leq t \\leq 1024$), the number of test cases. In the next lines, $t$ test cases follow. Each of them consists of two lines. \n\nIn the first line there is a single integer $n$ ($1 \\leq n \\leq 1024$) denoting the number of elements in set $S$. Second line consists of $n$ distinct integers $s_i$ ($0 \\leq s_i < 1024$), elements of $S$.\n\nIt is guaranteed that the sum of $n$ over all test cases will not exceed $1024$.\n\n\n-----Output-----\n\nPrint $t$ lines; $i$-th line should contain the answer to the $i$-th test case, the minimal positive integer $k$ satisfying the conditions or $-1$ if no such $k$ exists.\n\n\n-----Example-----\nInput\n6\n4\n1 0 2 3\n6\n10 7 14 8 3 12\n2\n0 2\n3\n1 2 3\n6\n1 4 6 10 11 12\n2\n0 1023\n\nOutput\n1\n4\n2\n-1\n-1\n1023\n\n\n\n-----Note-----\n\nIn the first test case, the answer is $1$ because it is a minimum positive integer and it satisfies all the conditions.\n\n Examples: \nInput: \n6\n4\n1 0 2 3\n6\n10 7 14 8 3 12\n2\n0 2\n3\n1 2 3\n6\n1 4 6 10 11 12\n2\n0 1023\n\nOutput: \n 1\n4\n2\n-1\n-1\n1023\n\n",
  "22": "Problem: \nLet's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$, $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\n\n\n-----Note-----\n\n$a_{1} = 487$ \n\n $a_{2} = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519$ \n\n $a_{3} = a_{2} + minDigit(a_{2}) \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 + 1 \\cdot 9 = 528$ \n\n $a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3}) = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544$ \n\n $a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4) \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564$ \n\n $a_{6} = a_{5} + minDigit(a_{5}) \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 + 4 \\cdot 6 = 588$ \n\n $a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6}) = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628$\n\n Examples: \nInput: \n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput: \n 42\n487\n519\n528\n544\n564\n588\n628\n\n",
  "23": "Problem: \nThe only difference between easy and hard versions is constraints.\n\nNow elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$) \u2014 the number of voters.\n\nThe next $n$ lines contains the description of voters. $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\n\n\n-----Note-----\n\nIn the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: ${3} \\rightarrow {1, 3} \\rightarrow {1, 2, 3}$.\n\nIn the second example you don't need to buy votes. The set of people voting for you will change as follows: ${1} \\rightarrow {1, 3, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 5, 6, 7} \\rightarrow {1, 2, 3, 4, 5, 6, 7}$.\n\nIn the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: ${2, 5} \\rightarrow {1, 2, 3, 4, 5} \\rightarrow {1, 2, 3, 4, 5, 6}$.\n\n Examples: \nInput: \n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput: \n 8\n0\n7\n\n",
  "24": "Problem: \nTry guessing the statement from this picture:  $3$ \n\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\n Examples: \nInput: \n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput: \n Y 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\n",
  "26": "Problem: \nYou are given a special jigsaw puzzle consisting of $n\\cdot m$ identical pieces. Every piece has three tabs and one blank, as pictured below. $\\{3$ \n\nThe jigsaw puzzle is considered solved if the following conditions hold:  The pieces are arranged into a grid with $n$ rows and $m$ columns.  For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\n\n-----Input-----\n\nThe test consists of multiple test cases. The first line contains a single integer $t$ ($1\\le t\\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nEach test case contains two integers $n$ and $m$ ($1 \\le n,m \\le 10^5$).\n\n\n-----Output-----\n\nFor each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n1 3\n100000 100000\n2 2\n\nOutput\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nFor the first test case, this is an example solution:  [Image] \n\nFor the second test case, we can show that no solution exists.\n\nFor the third test case, this is an example solution: $\\left\\{\\begin{array}{l}{3} \\\\{3} \\end{array} \\right\\}$\n\n Examples: \nInput: \n3\n1 3\n100000 100000\n2 2\n\nOutput: \n YES\nNO\nYES\n\n",
  "27": "Problem: \nThere are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the one move you can choose any even value $c$ and divide by two all elements that equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the minimal number of moves for transforming $a$ to an array of only odd integers (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\n\n\n-----Note-----\n\nIn the first test case of the example, the optimal sequence of moves can be as follows:\n\n  before making moves $a=[40, 6, 40, 3, 20, 1]$;  choose $c=6$;  now $a=[40, 3, 40, 3, 20, 1]$;  choose $c=40$;  now $a=[20, 3, 20, 3, 20, 1]$;  choose $c=20$;  now $a=[10, 3, 10, 3, 10, 1]$;  choose $c=10$;  now $a=[5, 3, 5, 3, 5, 1]$ \u2014 all numbers are odd. \n\nThus, all numbers became odd after $4$ moves. In $3$ or fewer moves, you cannot make them all odd.\n\n Examples: \nInput: \n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput: \n 4\n10\n4\n0\n\n",
  "29": "Problem: \nYou are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.\n\n\n-----Example-----\nInput\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1\n\n Examples: \nInput: \n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput: \n -1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1 \n\n",
  "30": "Problem: \nYou are given a string $s$ of even length $n$. String $s$ is binary, in other words, consists only of 0's and 1's.\n\nString $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones ($n$ is even).\n\nIn one operation you can reverse any substring of $s$. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string $s$ alternating? A string is alternating if $s_i \\neq s_{i + 1}$ for all $i$. There are two types of alternating strings in general: 01010101... or 10101010...\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$; $n$ is even)\u00a0\u2014 the length of string $s$.\n\nThe second line of each test case contains a binary string $s$ of length $n$ ($s_i \\in$ {0, 1}). String $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of operations to make $s$ alternating.\n\n\n-----Example-----\nInput\n3\n2\n10\n4\n0110\n8\n11101000\n\nOutput\n0\n1\n2\n\n\n\n-----Note-----\n\nIn the first test case, string 10 is already alternating.\n\nIn the second test case, we can, for example, reverse the last two elements of $s$ and get: 0110 $\\rightarrow$ 0101.\n\nIn the third test case, we can, for example, make the following two operations:   11101000 $\\rightarrow$ 10101100;  10101100 $\\rightarrow$ 10101010.\n\n Examples: \nInput: \n3\n2\n10\n4\n0110\n8\n11101000\n\nOutput: \n 0\n1\n2\n\n",
  "31": "Problem: \nSkier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25\n\n Examples: \nInput: \n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput: \n 15\n6\n16\n12\n25\n\n",
  "32": "Problem: \nLately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game's goal is to find the greediest of them all, who will then be crowned king of Compfestnesia.\n\nThe game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nFor the first case, the game is as follows:   Mr. Chanek takes one coin.  The opponent takes two coins.  Mr. Chanek takes one coin.  The opponent takes one coin. \n\nFor the second case, the game is as follows:   Mr. Chanek takes three coins.  The opponent takes one coin.  Mr. Chanek takes one coin.  The opponent takes one coin.\n\n Examples: \nInput: \n2\n5\n6\n\nOutput: \n 2\n4\n\n",
  "33": "Problem: \nNumbers $1, 2, 3, \\dots n$ (each integer from $1$ to $n$ once) are written on a board. In one operation you can erase any two numbers $a$ and $b$ from the board and write one integer $\\frac{a + b}{2}$ rounded up instead.\n\nYou should perform the given operation $n - 1$ times and make the resulting number that will be left on the board as small as possible. \n\nFor example, if $n = 4$, the following course of action is optimal:  choose $a = 4$ and $b = 2$, so the new number is $3$, and the whiteboard contains $[1, 3, 3]$;  choose $a = 3$ and $b = 3$, so the new number is $3$, and the whiteboard contains $[1, 3]$;  choose $a = 1$ and $b = 3$, so the new number is $2$, and the whiteboard contains $[2]$. \n\nIt's easy to see that after $n - 1$ operations, there will be left only one number. Your goal is to minimize it.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe only line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of integers written on the board initially.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, in the first line, print the minimum possible number left on the board after $n - 1$ operations. Each of the next $n - 1$ lines should contain two integers\u00a0\u2014 numbers $a$ and $b$ chosen and erased in each operation.\n\n\n-----Example-----\nInput\n1\n4\n\nOutput\n2\n2 4\n3 3\n3 1\n\n Examples: \nInput: \n1\n4\n\nOutput: \n 2\n4 3\n4 2\n3 1\n\n",
  "34": "Problem: \nYou have a large electronic screen which can display up to $998244353$ decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of $7$ segments which can be turned on and off to compose different digits. The following picture describes how you can display all $10$ decimal digits:\n\n[Image]\n\nAs you can see, different digits may require different number of segments to be turned on. For example, if you want to display $1$, you have to turn on $2$ segments of the screen, and if you want to display $8$, all $7$ segments of some place to display a digit should be turned on.\n\nYou want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than $n$ segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than $n$ segments.\n\nYour program should be able to process $t$ different test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input.\n\nThen the test cases follow, each of them is represented by a separate line containing one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the maximum number of segments that can be turned on in the corresponding testcase.\n\nIt is guaranteed that the sum of $n$ over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the greatest integer that can be displayed by turning on no more than $n$ segments of the screen. Note that the answer may not fit in the standard $32$-bit or $64$-bit integral data type.\n\n\n-----Example-----\nInput\n2\n3\n4\n\nOutput\n7\n11\n\n Examples: \nInput: \n2\n3\n4\n\nOutput: \n 7\n11\n\n",
  "35": "Problem: \nYoung wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties...\n\nMost of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter $e_i$\u00a0\u2014 his inexperience. Russell decided that an explorer with inexperience $e$ can only join the group of $e$ or more people.\n\nNow Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.\n\n\n-----Input-----\n\nThe first line contains the number of independent test cases $T$($1 \\leq T \\leq 2 \\cdot 10^5$). Next $2T$ lines contain description of test cases.\n\nThe first line of description of each test case contains the number of young explorers $N$ ($1 \\leq N \\leq 2 \\cdot 10^5$).\n\nThe second line contains $N$ integers $e_1, e_2, \\ldots, e_N$ ($1 \\leq e_i \\leq N$), where $e_i$ is the inexperience of the $i$-th explorer.\n\nIt's guaranteed that sum of all $N$ doesn't exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $T$ numbers, each number on a separate line.\n\nIn $i$-th line print the maximum number of groups Russell can form in $i$-th test case.\n\n\n-----Example-----\nInput\n2\n3\n1 1 1\n5\n2 3 1 2 2\n\nOutput\n3\n2\n\n\n\n-----Note-----\n\nIn the first example we can organize three groups. There will be only one explorer in each group. It's correct because inexperience of each explorer equals to $1$, so it's not less than the size of his group.\n\nIn the second example we can organize two groups. Explorers with inexperience $1$, $2$ and $3$ will form the first group, and the other two explorers with inexperience equal to $2$ will form the second group.\n\nThis solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to $2$, and the second group using only one explorer with inexperience equal to $1$. In this case the young explorer with inexperience equal to $3$ will not be included in any group.\n\n Examples: \nInput: \n2\n3\n1 1 1\n5\n2 3 1 2 2\n\nOutput: \n 3\n2\n\n",
  "36": "Problem: \nIt is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.\n\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\nPoor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^3, a_1 + a_2 + ... + a_{n} \u2264 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 \u2264 m \u2264 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\n\n\n-----Note-----\n\nFor the sample input:\n\n  The worms with labels from [1, 2] are in the first pile.  The worms with labels from [3, 9] are in the second pile.  The worms with labels from [10, 12] are in the third pile.  The worms with labels from [13, 16] are in the fourth pile.  The worms with labels from [17, 25] are in the fifth pile.\n\n Examples: \nInput: \n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput: \n 1\n5\n3\n\n",
  "38": "Problem: \nTwo players decided to play one interesting card game.\n\nThere is a deck of $n$ cards, with values from $1$ to $n$. The values of cards are pairwise different (this means that no two different cards have equal values). At the beginning of the game, the deck is completely distributed between players such that each player has at least one card. \n\nThe game goes as follows: on each turn, each player chooses one of their cards (whichever they want) and puts on the table, so that the other player doesn't see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn't have any cards.\n\nFor example, suppose that $n = 5$, the first player has cards with values $2$ and $3$, and the second player has cards with values $1$, $4$, $5$. Then one possible flow of the game is:\n\nThe first player chooses the card $3$. The second player chooses the card $1$. As $3>1$, the first player gets both cards. Now the first player has cards $1$, $2$, $3$, the second player has cards $4$, $5$.\n\nThe first player chooses the card $3$. The second player chooses the card $4$. As $3<4$, the second player gets both cards. Now the first player has cards $1$, $2$. The second player has cards $3$, $4$, $5$.\n\nThe first player chooses the card $1$. The second player chooses the card $3$. As $1<3$, the second player gets both cards. Now the first player has only the card $2$. The second player has cards $1$, $3$, $4$, $5$.\n\nThe first player chooses the card $2$. The second player chooses the card $4$. As $2<4$, the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins.\n\nWho will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). The description of the test cases follows.\n\nThe first line of each test case contains three integers $n$, $k_1$, $k_2$ ($2 \\le n \\le 100, 1 \\le k_1 \\le n - 1, 1 \\le k_2 \\le n - 1, k_1 + k_2 = n$)\u00a0\u2014 the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains $k_1$ integers $a_1, \\dots, a_{k_1}$ ($1 \\le a_i \\le n$)\u00a0\u2014 the values of cards of the first player.\n\nThe third line of each test case contains $k_2$ integers $b_1, \\dots, b_{k_2}$ ($1 \\le b_i \\le n$)\u00a0\u2014 the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different.\n\n\n-----Output-----\n\nFor each test case, output \"YES\" in a separate line, if the first player wins. Otherwise, output \"NO\" in a separate line. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n2\n2 1 1\n2\n1\n5 2 3\n2 3\n1 4 5\n\nOutput\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case of the example, there is only one possible move for every player: the first player will put $2$, the second player will put $1$. $2>1$, so the first player will get both cards and will win.\n\nIn the second test case of the example, it can be shown that it is the second player who has a winning strategy. One possible flow of the game is illustrated in the statement.\n\n Examples: \nInput: \n2\n2 1 1\n2\n1\n5 2 3\n2 3\n1 4 5\n\nOutput: \n YES\nNO\n\n",
  "39": "Problem: \nAfter a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are $n$ crossroads in the line in the town, and there is either the bus or the tram station at each crossroad.\n\nThe crossroads are represented as a string $s$ of length $n$, where $s_i = \\texttt{A}$, if there is a bus station at $i$-th crossroad, and $s_i = \\texttt{B}$, if there is a tram station at $i$-th crossroad. Currently Petya is at the first crossroad (which corresponds to $s_1$) and his goal is to get to the last crossroad (which corresponds to $s_n$).\n\nIf for two crossroads $i$ and $j$ for all crossroads $i, i+1, \\ldots, j-1$ there is a bus station, one can pay $a$ roubles for the bus ticket, and go from $i$-th crossroad to the $j$-th crossroad by the bus (it is not necessary to have a bus station at the $j$-th crossroad). Formally, paying $a$ roubles Petya can go from $i$ to $j$ if $s_t = \\texttt{A}$ for all $i \\le t < j$. \n\nIf for two crossroads $i$ and $j$ for all crossroads $i, i+1, \\ldots, j-1$ there is a tram station, one can pay $b$ roubles for the tram ticket, and go from $i$-th crossroad to the $j$-th crossroad by the tram (it is not necessary to have a tram station at the $j$-th crossroad). Formally, paying $b$ roubles Petya can go from $i$ to $j$ if $s_t = \\texttt{B}$ for all $i \\le t < j$.\n\nFor example, if $s$=\"AABBBAB\", $a=4$ and $b=3$ then Petya needs:[Image]  buy one bus ticket to get from $1$ to $3$,  buy one tram ticket to get from $3$ to $6$,  buy one bus ticket to get from $6$ to $7$. \n\nThus, in total he needs to spend $4+3+4=11$ roubles. Please note that the type of the stop at the last crossroad (i.e. the character $s_n$) does not affect the final expense.\n\nNow Petya is at the first crossroad, and he wants to get to the $n$-th crossroad. After the party he has left with $p$ roubles. He's decided to go to some station on foot, and then go to home using only public transport.\n\nHelp him to choose the closest crossroad $i$ to go on foot the first, so he has enough money to get from the $i$-th crossroad to the $n$-th, using only tram and bus tickets.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nThe first line of each test case consists of three integers $a, b, p$ ($1 \\le a, b, p \\le 10^5$)\u00a0\u2014 the cost of bus ticket, the cost of tram ticket and the amount of money Petya has.\n\nThe second line of each test case consists of one string $s$, where $s_i = \\texttt{A}$, if there is a bus station at $i$-th crossroad, and $s_i = \\texttt{B}$, if there is a tram station at $i$-th crossroad ($2 \\le |s| \\le 10^5$).\n\nIt is guaranteed, that the sum of the length of strings $s$ by all test cases in one test doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one number\u00a0\u2014 the minimal index $i$ of a crossroad Petya should go on foot. The rest of the path (i.e. from $i$ to $n$ he should use public transport).\n\n\n-----Example-----\nInput\n5\n2 2 1\nBB\n1 1 1\nAB\n3 2 8\nAABBBBAABB\n5 3 4\nBBBBB\n2 1 1\nABABAB\n\nOutput\n2\n1\n3\n1\n6\n\n Examples: \nInput: \n5\n2 2 1\nBB\n1 1 1\nAB\n3 2 8\nAABBBBAABB\n5 3 4\nBBBBB\n2 1 1\nABABAB\n\nOutput: \n 2\n1\n3\n1\n6\n\n",
  "40": "Problem: \nYou are given a sequence $a_1, a_2, \\dots, a_n$, consisting of integers.\n\nYou can apply the following operation to this sequence: choose some integer $x$ and move all elements equal to $x$ either to the beginning, or to the end of $a$. Note that you have to move all these elements in one direction in one operation.\n\nFor example, if $a = [2, 1, 3, 1, 1, 3, 2]$, you can get the following sequences in one operation (for convenience, denote elements equal to $x$ as $x$-elements):   $[1, 1, 1, 2, 3, 3, 2]$ if you move all $1$-elements to the beginning;  $[2, 3, 3, 2, 1, 1, 1]$ if you move all $1$-elements to the end;  $[2, 2, 1, 3, 1, 1, 3]$ if you move all $2$-elements to the beginning;  $[1, 3, 1, 1, 3, 2, 2]$ if you move all $2$-elements to the end;  $[3, 3, 2, 1, 1, 1, 2]$ if you move all $3$-elements to the beginning;  $[2, 1, 1, 1, 2, 3, 3]$ if you move all $3$-elements to the end; \n\nYou have to determine the minimum number of such operations so that the sequence $a$ becomes sorted in non-descending order. Non-descending order means that for all $i$ from $2$ to $n$, the condition $a_{i-1} \\le a_i$ is satisfied.\n\nNote that you have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$)\u00a0\u2014 the number of the queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the number of elements.\n\nThe second line of each query contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the elements.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each query print one integer\u00a0\u2014 the minimum number of operation for sorting sequence $a$ in non-descending order.\n\n\n-----Example-----\nInput\n3\n7\n3 1 6 6 3 1 1\n8\n1 1 4 4 4 7 8 8\n7\n4 2 5 2 6 2 7\n\nOutput\n2\n0\n1\n\n\n\n-----Note-----\n\nIn the first query, you can move all $1$-elements to the beginning (after that sequence turn into $[1, 1, 1, 3, 6, 6, 3]$) and then move all $6$-elements to the end.\n\nIn the second query, the sequence is sorted initially, so the answer is zero.\n\nIn the third query, you have to move all $2$-elements to the beginning.\n\n Examples: \nInput: \n3\n7\n3 1 6 6 3 1 1\n8\n1 1 4 4 4 7 8 8\n7\n4 2 5 2 6 2 7\n\nOutput: \n 2\n0\n1\n\n",
  "42": "Problem: \nYou are given a binary string $s$ (recall that a string is binary if each character is either $0$ or $1$).\n\nLet $f(t)$ be the decimal representation of integer $t$ written in binary form (possibly with leading zeroes). For example $f(011) = 3, f(00101) = 5, f(00001) = 1, f(10) = 2, f(000) = 0$ and $f(000100) = 4$.\n\nThe substring $s_{l}, s_{l+1}, \\dots , s_{r}$ is good if $r - l + 1 = f(s_l \\dots s_r)$.\n\nFor example string $s = 1011$ has $5$ good substrings: $s_1 \\dots s_1 = 1$, $s_3 \\dots s_3 = 1$, $s_4 \\dots s_4 = 1$, $s_1 \\dots s_2 = 10$ and $s_2 \\dots s_4 = 011$. \n\nYour task is to calculate the number of good substrings of string $s$.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of queries.\n\nThe only line of each query contains string $s$ ($1 \\le |s| \\le 2 \\cdot 10^5$), consisting of only digits $0$ and $1$.\n\nIt is guaranteed that $\\sum\\limits_{i=1}^{t} |s_i| \\le 2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each query print one integer \u2014 the number of good substrings of string $s$.\n\n\n-----Example-----\nInput\n4\n0110\n0101\n00001000\n0001000\n\nOutput\n4\n3\n4\n3\n\n Examples: \nInput: \n4\n0110\n0101\n00001000\n0001000\n\nOutput: \n 4\n3\n4\n3\n\n",
  "43": "Problem: \nPetya is preparing for his birthday. He decided that there would be $n$ different dishes on the dinner table, numbered from $1$ to $n$. Since Petya doesn't like to cook, he wants to order these dishes in restaurants.\n\nUnfortunately, all dishes are prepared in different restaurants and therefore Petya needs to pick up his orders from $n$ different places. To speed up this process, he wants to order courier delivery at some restaurants. Thus, for each dish, there are two options for Petya how he can get it:  the dish will be delivered by a courier from the restaurant $i$, in this case the courier will arrive in $a_i$ minutes,  Petya goes to the restaurant $i$ on his own and picks up the dish, he will spend $b_i$ minutes on this. \n\nEach restaurant has its own couriers and they start delivering the order at the moment Petya leaves the house. In other words, all couriers work in parallel. Petya must visit all restaurants in which he has not chosen delivery, he does this consistently.\n\nFor example, if Petya wants to order $n = 4$ dishes and $a = [3, 7, 4, 5]$, and $b = [2, 1, 2, 4]$, then he can order delivery from the first and the fourth restaurant, and go to the second and third on your own. Then the courier of the first restaurant will bring the order in $3$ minutes, the courier of the fourth restaurant will bring the order in $5$ minutes, and Petya will pick up the remaining dishes in $1 + 2 = 3$ minutes. Thus, in $5$ minutes all the dishes will be at Petya's house.\n\nFind the minimum time after which all the dishes can be at Petya's home.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of dishes that Petya wants to order.\n\nThe second line of each test case contains $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the time of courier delivery of the dish with the number $i$.\n\nThe third line of each test case contains $n$ integers $b_1 \\ldots b_n$ ($1 \\le b_i \\le 10^9$)\u00a0\u2014 the time during which Petya will pick up the dish with the number $i$.\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case output one integer\u00a0\u2014 the minimum time after which all dishes can be at Petya's home.\n\n\n-----Example-----\nInput\n4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n\nOutput\n5\n3\n2\n3\n\n Examples: \nInput: \n4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n\nOutput: \n 5\n3\n2\n3\n\n",
  "44": "Problem: \nToday the kindergarten has a new group of $n$ kids who need to be seated at the dinner table. The chairs at the table are numbered from $1$ to $4n$. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers $a$ and $b$ ($a \\neq b$) will indulge if:   $gcd(a, b) = 1$ or,  $a$ divides $b$ or $b$ divides $a$. \n\n$gcd(a, b)$\u00a0\u2014 the maximum number $x$ such that $a$ is divisible by $x$ and $b$ is divisible by $x$.\n\nFor example, if $n=3$ and the kids sit on chairs with numbers $2$, $3$, $4$, then they will indulge since $4$ is divided by $2$ and $gcd(2, 3) = 1$. If kids sit on chairs with numbers $4$, $6$, $10$, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no $2$ of the kid that can indulge. More formally, she wants no pair of chairs $a$ and $b$ that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 100$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case consists of one line containing an integer $n$ ($1 \\leq n \\leq 100$)\u00a0\u2014 the number of kids.\n\n\n-----Output-----\n\nOutput $t$ lines, which contain $n$ distinct integers from $1$ to $4n$\u00a0\u2014 the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print $n$ numbers in any order.\n\n\n-----Example-----\nInput\n3\n2\n3\n4\n\nOutput\n6 4\n4 6 10\n14 10 12 8\n\n Examples: \nInput: \n3\n2\n3\n4\n\nOutput: \n 8 6 \n12 10 8 \n16 14 12 10 \n\n",
  "47": "Problem: \nThis is the easy version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\n\nPikachu is a cute and friendly pok\u00e9mon living in the wild pikachu herd.\n\nBut it has become known recently that infamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew decided to help Pikachu to build a pok\u00e9mon army to resist.\n\nFirst, Andrew counted all the pok\u00e9mon\u00a0\u2014 there were exactly $n$ pikachu. The strength of the $i$-th pok\u00e9mon is equal to $a_i$, and all these numbers are distinct.\n\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $b$ from $k$ indices such that $1 \\le b_1 < b_2 < \\dots < b_k \\le n$, and his army will consist of pok\u00e9mons with forces $a_{b_1}, a_{b_2}, \\dots, a_{b_k}$.\n\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\dots$.\n\nAndrew is experimenting with pok\u00e9mon order. He performs $q$ operations. In $i$-th operation Andrew swaps $l_i$-th and $r_i$-th pok\u00e9mon.\n\nNote: $q=0$ in this version of the task.\n\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pok\u00e9mon placement. He also needs to know the maximal strength after each operation.\n\nHelp Andrew and the pok\u00e9mon, or team R will realize their tricky plan!\n\n\n-----Input-----\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 10^3$) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n \\le 3 \\cdot 10^5, q = 0$) denoting the number of pok\u00e9mon and number of operations respectively.\n\nThe second line contains $n$ distinct positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) denoting the strengths of the pok\u00e9mon.\n\n$i$-th of the last $q$ lines contains two positive integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) denoting the indices of pok\u00e9mon that were swapped in the $i$-th operation.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$, and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$. \n\n\n-----Output-----\n\nFor each test case, print $q+1$ integers: the maximal strength of army before the swaps and after each swap.\n\n\n-----Example-----\nInput\n3\n3 0\n1 3 2\n2 0\n1 2\n7 0\n1 2 5 4 3 6 7\n\nOutput\n3\n2\n9\n\n\n\n-----Note-----\n\nIn third test case we can build an army in such way: [1 2 5 4 3 6 7], its strength will be $5\u22123+7=9$.\n\n Examples: \nInput: \n3\n3 0\n1 3 2\n2 0\n1 2\n7 0\n1 2 5 4 3 6 7\n\nOutput: \n 3\n2\n9\n\n",
  "48": "Problem: \nYou are playing a very popular game called Cubecraft. Initially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nHopefully, you've met a very handsome wandering trader who has two trade offers:  exchange $1$ stick for $x$ sticks (you lose $1$ stick and gain $x$ sticks).  exchange $y$ sticks for $1$ coal (you lose $y$ sticks and gain $1$ coal). \n\nDuring one trade, you can use only one of these two trade offers. You can use each trade offer any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \\le x \\le 10^9$; $1 \\le y, k \\le 10^9$) \u2014 the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999\n\n Examples: \nInput: \n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput: \n 14\n33\n25\n2000000003\n1000000001999999999\n\n",
  "49": "Problem: \nLet's call some positive integer classy if its decimal representation contains no more than $3$ non-zero digits. For example, numbers $4$, $200000$, $10203$ are classy and numbers $4231$, $102306$, $7277420000$ are not.\n\nYou are given a segment $[L; R]$. Count the number of classy integers $x$ such that $L \\le x \\le R$.\n\nEach testcase contains several segments, for each of them you are required to solve the problem separately.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of segments in a testcase.\n\nEach of the next $T$ lines contains two integers $L_i$ and $R_i$ ($1 \\le L_i \\le R_i \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint $T$ lines \u2014 the $i$-th line should contain the number of classy integers on a segment $[L_i; R_i]$.\n\n\n-----Example-----\nInput\n4\n1 1000\n1024 1024\n65536 65536\n999999 1000001\n\nOutput\n1000\n1\n0\n2\n\n Examples: \nInput: \n4\n1 1000\n1024 1024\n65536 65536\n999999 1000001\n\nOutput: \n 1000\n1\n0\n2\n\n",
  "50": "Problem: \nKarlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were $2n$ jars of strawberry and blueberry jam.\n\nAll the $2n$ jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly $n$ jars to his left and $n$ jars to his right.\n\nFor example, the basement might look like this: [Image] \n\nBeing the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non-empty jar to his left or the first non-empty jar to his right.\n\nFinally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same.\n\nFor example, this might be the result: [Image] He has eaten $1$ jar to his left and then $5$ jars to his right. There remained exactly $3$ full jars of both strawberry and blueberry jam. \n\nJars are numbered from $1$ to $2n$ from left to right, so Karlsson initially stands between jars $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left?\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le 2$) \u2014 $a_i=1$ means that the $i$-th jar from the left is a strawberry jam jar and $a_i=2$ means that it is a blueberry jam jar.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left.\n\n\n-----Example-----\nInput\n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\nOutput\n6\n0\n6\n2\n\n\n\n-----Note-----\n\nThe picture from the statement describes the first test case.\n\nIn the second test case the number of strawberry and blueberry jam jars is already equal.\n\nIn the third test case Karlsson is required to eat all $6$ jars so that there remain $0$ jars of both jams.\n\nIn the fourth test case Karlsson can empty either the second and the third jars or the third and the fourth one. The both scenarios will leave $1$ jar of both jams.\n\n Examples: \nInput: \n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\nOutput: \n 6\n0\n6\n2\n\n",
  "51": "Problem: \nThere are n games in a football tournament. Three teams are participating in it. Currently k games had already been played. \n\nYou are an avid football fan, but recently you missed the whole k games. Fortunately, you remember a guess of your friend for these k games. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be d_1 and that of between second and third team will be d_2.\n\nYou don't want any of team win the tournament, that is each team should have the same number of wins after n games. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\n\nNote that outcome of a match can not be a draw, it has to be either win or loss.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer corresponding to number of test cases t (1 \u2264 t \u2264 10^5).\n\nEach of the next t lines will contain four space-separated integers n, k, d_1, d_2 (1 \u2264 n \u2264 10^12;\u00a00 \u2264 k \u2264 n;\u00a00 \u2264 d_1, d_2 \u2264 k) \u2014 data for the current test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing either \"yes\" if it is possible to have no winner of tournament, or \"no\" otherwise (without quotes).\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno\n\n\n\n-----Note-----\n\nSample 1. There has not been any match up to now (k = 0, d_1 = 0, d_2 = 0). If there will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end each team will have 1 win.\n\nSample 2. You missed all the games (k = 3). As d_1 = 0 and d_2 = 0, and there is a way to play three games with no winner of tournament (described in the previous sample), the answer is \"yes\".\n\nSample 3. You missed 4 matches, and d_1 = 1, d_2 = 0. These four matches can be: 1-2 (win 2), 1-3 (win 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins).\n\n Examples: \nInput: \n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput: \n yes\nyes\nyes\nno\nno\n\n",
  "52": "Problem: \nHarry Water, Ronaldo, Her-my-oh-knee and their friends have started a new school year at their MDCS School of Speechcraft and Misery. At the time, they are very happy to have seen each other after a long time. The sun is shining, birds are singing, flowers are blooming, and their Potions class teacher, professor Snipe is sulky as usual. Due to his angst fueled by disappointment in his own life, he has given them a lot of homework in Potions class. \n\nEach of the n students has been assigned a single task. Some students do certain tasks faster than others. Thus, they want to redistribute the tasks so that each student still does exactly one task, and that all tasks are finished. Each student has their own laziness level, and each task has its own difficulty level. Professor Snipe is trying hard to improve their work ethics, so each student\u2019s laziness level is equal to their task\u2019s difficulty level. Both sets of values are given by the sequence a, where a_{i} represents both the laziness level of the i-th student and the difficulty of his task. \n\nThe time a student needs to finish a task is equal to the product of their laziness level and the task\u2019s difficulty. They are wondering, what is the minimum possible total time they must spend to finish all tasks if they distribute them in the optimal way. Each person should receive one task and each task should be given to one person. Print the answer modulo 10 007.\n\n\n-----Input-----\n\nThe first line of input contains integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of tasks. The next n lines contain exactly one integer number a_{i} (1 \u2264 a_{i} \u2264 100 000)\u00a0\u2014 both the difficulty of the initial task and the laziness of the i-th students.\n\n\n-----Output-----\n\nPrint the minimum total time to finish all tasks modulo 10 007.\n\n\n-----Example-----\nInput\n2\n1\n3\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample, if the students switch their tasks, they will be able to finish them in 3 + 3 = 6 time units.\n\n Examples: \nInput: \n2\n1\n3\n\nOutput: \n 6\n\n",
  "53": "Problem: \nGildong recently learned how to find the longest increasing subsequence (LIS) in $O(n\\log{n})$ time for a sequence of length $n$. He wants to test himself if he can implement it correctly, but he couldn't find any online judges that would do it (even though there are actually many of them). So instead he's going to make a quiz for you about making permutations of $n$ distinct integers between $1$ and $n$, inclusive, to test his code with your output.\n\nThe quiz is as follows.\n\nGildong provides a string of length $n-1$, consisting of characters '<' and '>' only. The $i$-th (1-indexed) character is the comparison result between the $i$-th element and the $i+1$-st element of the sequence. If the $i$-th character of the string is '<', then the $i$-th element of the sequence is less than the $i+1$-st element. If the $i$-th character of the string is '>', then the $i$-th element of the sequence is greater than the $i+1$-st element.\n\nHe wants you to find two possible sequences (not necessarily distinct) consisting of $n$ distinct integers between $1$ and $n$, inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print two lines with $n$ integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between $1$ and $n$, inclusive, and should satisfy the comparison results.\n\nIt can be shown that at least one answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\nIn the second case, the shortest length of the LIS is $2$, and the longest length of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$ '$5$' $2$ '$6$' can be one of the possible LIS.\n\n Examples: \nInput: \n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput: \n 1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n",
  "54": "Problem: \nYou are playing a variation of game 2048. Initially you have a multiset $s$ of $n$ integers. Every integer in this multiset is a power of two. \n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from $s$, remove them from $s$ and insert the number equal to their sum into $s$.\n\nFor example, if $s = \\{1, 2, 1, 1, 4, 2, 2\\}$ and you choose integers $2$ and $2$, then the multiset becomes $\\{1, 1, 1, 4, 4, 2\\}$.\n\nYou win if the number $2048$ belongs to your multiset. For example, if $s = \\{1024, 512, 512, 4\\}$ you can win as follows: choose $512$ and $512$, your multiset turns into $\\{1024, 1024, 4\\}$. Then choose $1024$ and $1024$, your multiset turns into $\\{2048, 4\\}$ and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 100$) \u2013 the number of queries.\n\nThe first line of each query contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in multiset.\n\nThe second line of each query contains $n$ integers $s_1, s_2, \\dots, s_n$ ($1 \\le s_i \\le 2^{29}$) \u2014 the description of the multiset. It is guaranteed that all elements of the multiset are powers of two. \n\n\n-----Output-----\n\nFor each query print YES if it is possible to obtain the number $2048$ in your multiset, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n\nOutput\nYES\nYES\nNO\nNO\nYES\nYES\n\n\n\n-----Note-----\n\nIn the first query you can win as follows: choose $512$ and $512$, and $s$ turns into $\\{1024, 64, 1024\\}$. Then choose $1024$ and $1024$, and $s$ turns into $\\{2048, 64\\}$ and you win.\n\nIn the second query $s$ contains $2048$ initially.\n\n Examples: \nInput: \n6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n\nOutput: \n YES\nYES\nNO\nNO\nYES\nYES\n\n",
  "55": "Problem: \nA penguin Rocher has $n$ sticks. He has exactly one stick with length $i$ for all $1 \\le i \\le n$.\n\nHe can connect some sticks. If he connects two sticks that have lengths $a$ and $b$, he gets one stick with length $a + b$. Two sticks, that were used in the operation disappear from his set and the new connected stick appears in his set and can be used for the next connections.\n\nHe wants to create the maximum number of sticks that have the same length. It is not necessary to make all sticks have the same length, some sticks can have the other length. How many sticks with the equal length he can create?\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nFor each test case, the only line contains a single integer $n$ ($1 \\le n \\le 10^{9}$).\n\n\n-----Output-----\n\nFor each test case, print a single integer \u00a0\u2014 the answer to the problem.\n\n\n-----Example-----\nInput\n4\n1\n2\n3\n4\n\nOutput\n1\n1\n2\n2\n\n\n\n-----Note-----\n\nIn the third case, he can connect two sticks with lengths $1$ and $2$ and he will get one stick with length $3$. So, he will have two sticks with lengths $3$.\n\nIn the fourth case, he can connect two sticks with lengths $1$ and $3$ and he will get one stick with length $4$. After that, he will have three sticks with lengths $\\{2, 4, 4\\}$, so two sticks have the same length, and one stick has the other length.\n\n Examples: \nInput: \n4\n1\n2\n3\n4\n\nOutput: \n 1\n1\n2\n2\n\n",
  "56": "Problem: \nA mad scientist Dr.Jubal has made a competitive programming task. Try to solve it!\n\nYou are given integers $n,k$. Construct a grid $A$ with size $n \\times n$ consisting of integers $0$ and $1$. The very important condition should be satisfied: the sum of all elements in the grid is exactly $k$. In other words, the number of $1$ in the grid is equal to $k$.\n\nLet's define:  $A_{i,j}$ as the integer in the $i$-th row and the $j$-th column.  $R_i = A_{i,1}+A_{i,2}+...+A_{i,n}$ (for all $1 \\le i \\le n$).  $C_j = A_{1,j}+A_{2,j}+...+A_{n,j}$ (for all $1 \\le j \\le n$).  In other words, $R_i$ are row sums and $C_j$ are column sums of the grid $A$.  For the grid $A$ let's define the value $f(A) = (\\max(R)-\\min(R))^2 + (\\max(C)-\\min(C))^2$ (here for an integer sequence $X$ we define $\\max(X)$ as the maximum value in $X$ and $\\min(X)$ as the minimum value in $X$). \n\nFind any grid $A$, which satisfies the following condition. Among such grids find any, for which the value $f(A)$ is the minimum possible. Among such tables, you can find any.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers $n$, $k$ $(1 \\le n \\le 300, 0 \\le k \\le n^2)$.\n\nIt is guaranteed that the sum of $n^2$ for all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, firstly print the minimum possible value of $f(A)$ among all tables, for which the condition is satisfied.\n\nAfter that, print $n$ lines contain $n$ characters each. The $j$-th character in the $i$-th line should be equal to $A_{i,j}$.\n\nIf there are multiple answers you can print any.\n\n\n-----Example-----\nInput\n4\n2 2\n3 8\n1 0\n4 16\n\nOutput\n0\n10\n01\n2\n111\n111\n101\n0\n0\n0\n1111\n1111\n1111\n1111\n\n\n\n-----Note-----\n\nIn the first test case, the sum of all elements in the grid is equal to $2$, so the condition is satisfied. $R_1 = 1, R_2 = 1$ and $C_1 = 1, C_2 = 1$. Then, $f(A) = (1-1)^2 + (1-1)^2 = 0$, which is the minimum possible value of $f(A)$.\n\nIn the second test case, the sum of all elements in the grid is equal to $8$, so the condition is satisfied. $R_1 = 3, R_2 = 3, R_3 = 2$ and $C_1 = 3, C_2 = 2, C_3 = 3$. Then, $f(A) = (3-2)^2 + (3-2)^2 = 2$. It can be proven, that it is the minimum possible value of $f(A)$.\n\n Examples: \nInput: \n4\n2 2\n3 8\n1 0\n4 16\n\nOutput: \n 0\n10\n01\n2\n111\n111\n101\n0\n0\n0\n1111\n1111\n1111\n1111\n\n",
  "57": "Problem: \nYou are given an array $a$ of length $n$, which initially is a permutation of numbers from $1$ to $n$. In one operation, you can choose an index $i$ ($1 \\leq i < n$) such that $a_i < a_{i + 1}$, and remove either $a_i$ or $a_{i + 1}$ from the array (after the removal, the remaining parts are concatenated). \n\nFor example, if you have the array $[1, 3, 2]$, you can choose $i = 1$ (since $a_1 = 1 < a_2 = 3$), then either remove $a_1$ which gives the new array $[3, 2]$, or remove $a_2$ which gives the new array $[1, 2]$.\n\nIs it possible to make the length of this array equal to $1$ with these operations?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 2 \\cdot 10^4$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$) \u00a0\u2014 the length of the array.\n\nThe second line of each test case contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$, $a_i$ are pairwise distinct)\u00a0\u2014 elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output on a single line the word \"YES\" if it is possible to reduce the array to a single element using the aforementioned operation, or \"NO\" if it is impossible to do so.\n\n\n-----Example-----\nInput\n4\n3\n1 2 3\n4\n3 1 2 4\n3\n2 3 1\n6\n2 4 6 1 3 5\n\nOutput\nYES\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nFor the first two test cases and the fourth test case, we can operate as follow (the bolded elements are the pair chosen for that operation):\n\n$[\\text{1}, \\textbf{2}, \\textbf{3}] \\rightarrow [\\textbf{1}, \\textbf{2}] \\rightarrow [\\text{1}]$\n\n$[\\text{3}, \\textbf{1}, \\textbf{2}, \\text{4}] \\rightarrow [\\text{3}, \\textbf{1}, \\textbf{4}] \\rightarrow [\\textbf{3}, \\textbf{4}] \\rightarrow [\\text{4}]$\n\n$[\\textbf{2}, \\textbf{4}, \\text{6}, \\text{1}, \\text{3}, \\text{5}] \\rightarrow [\\textbf{4}, \\textbf{6}, \\text{1}, \\text{3}, \\text{5}] \\rightarrow [\\text{4}, \\text{1}, \\textbf{3}, \\textbf{5}] \\rightarrow [\\text{4}, \\textbf{1}, \\textbf{5}] \\rightarrow [\\textbf{4}, \\textbf{5}] \\rightarrow [\\text{4}]$\n\n Examples: \nInput: \n4\n3\n1 2 3\n4\n3 1 2 4\n3\n2 3 1\n6\n2 4 6 1 3 5\n\nOutput: \n YES\nYES\nNO\nYES\n\n",
  "58": "Problem: \nYou have a rectangular chocolate bar consisting of n \u00d7 m single squares. You want to eat exactly k squares, so you may need to break the chocolate bar. \n\nIn one move you can break any single rectangular piece of chocolate in two rectangular pieces. You can break only by lines between squares: horizontally or vertically. The cost of breaking is equal to square of the break length.\n\nFor example, if you have a chocolate bar consisting of 2 \u00d7 3 unit squares then you can break it horizontally and get two 1 \u00d7 3 pieces (the cost of such breaking is 3^2 = 9), or you can break it vertically in two ways and get two pieces: 2 \u00d7 1 and 2 \u00d7 2 (the cost of such breaking is 2^2 = 4).\n\nFor several given values n, m and k find the minimum total cost of breaking. You can eat exactly k squares of chocolate if after all operations of breaking there is a set of rectangular pieces of chocolate with the total size equal to k squares. The remaining n\u00b7m - k squares are not necessarily form a single rectangular piece.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 40910)\u00a0\u2014 the number of values n, m and k to process.\n\nEach of the next t lines contains three integers n, m and k (1 \u2264 n, m \u2264 30, 1 \u2264 k \u2264 min(n\u00b7m, 50))\u00a0\u2014 the dimensions of the chocolate bar and the number of squares you want to eat respectively.\n\n\n-----Output-----\n\nFor each n, m and k print the minimum total cost needed to break the chocolate bar, in order to make it possible to eat exactly k squares.\n\n\n-----Examples-----\nInput\n4\n2 2 1\n2 2 3\n2 2 2\n2 2 4\n\nOutput\n5\n5\n4\n0\n\n\n\n-----Note-----\n\nIn the first query of the sample one needs to perform two breaks:  to split 2 \u00d7 2 bar into two pieces of 2 \u00d7 1 (cost is 2^2 = 4),  to split the resulting 2 \u00d7 1 into two 1 \u00d7 1 pieces (cost is 1^2 = 1). \n\nIn the second query of the sample one wants to eat 3 unit squares. One can use exactly the same strategy as in the first query of the sample.\n\n Examples: \nInput: \n4\n2 2 1\n2 2 3\n2 2 2\n2 2 4\n\nOutput: \n 5\n5\n4\n0\n\n",
  "59": "Problem: \nDark is going to attend Motarack's birthday. Dark decided that the gift he is going to give to Motarack is an array $a$ of $n$ non-negative integers.\n\nDark created that array $1000$ years ago, so some elements in that array disappeared. Dark knows that Motarack hates to see an array that has two adjacent elements with a high absolute difference between them. He doesn't have much time so he wants to choose an integer $k$ ($0 \\leq k \\leq 10^{9}$) and replaces all missing elements in the array $a$ with $k$.\n\nLet $m$ be the maximum absolute difference between all adjacent elements (i.e. the maximum value of $|a_i - a_{i+1}|$ for all $1 \\leq i \\leq n - 1$) in the array $a$ after Dark replaces all missing elements with $k$.\n\nDark should choose an integer $k$ so that $m$ is minimized. Can you help him?\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer $n$ ($2 \\leq n \\leq 10^{5}$)\u00a0\u2014 the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-1 \\leq a_i \\leq 10 ^ {9}$). If $a_i = -1$, then the $i$-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of $n$ for all test cases does not exceed $4 \\cdot 10 ^ {5}$.\n\n\n-----Output-----\n\nPrint the answers for each test case in the following format:\n\nYou should print two integers, the minimum possible value of $m$ and an integer $k$ ($0 \\leq k \\leq 10^{9}$) that makes the maximum absolute difference between adjacent elements in the array $a$ equal to $m$.\n\nMake sure that after replacing all the missing elements with $k$, the maximum absolute difference between adjacent elements becomes $m$.\n\nIf there is more than one possible $k$, you can print any of them.\n\n\n-----Example-----\nInput\n7\n5\n-1 10 -1 12 -1\n5\n-1 40 35 -1 35\n6\n-1 -1 9 -1 3 -1\n2\n-1 -1\n2\n0 -1\n4\n1 -1 3 -1\n7\n1 -1 7 5 2 -1 5\n\nOutput\n1 11\n5 35\n3 6\n0 42\n0 0\n1 2\n3 4\n\n\n\n-----Note-----\n\nIn the first test case after replacing all missing elements with $11$ the array becomes $[11, 10, 11, 12, 11]$. The absolute difference between any adjacent elements is $1$. It is impossible to choose a value of $k$, such that the absolute difference between any adjacent element will be $\\leq 0$. So, the answer is $1$.\n\nIn the third test case after replacing all missing elements with $6$ the array becomes $[6, 6, 9, 6, 3, 6]$.  $|a_1 - a_2| = |6 - 6| = 0$;  $|a_2 - a_3| = |6 - 9| = 3$;  $|a_3 - a_4| = |9 - 6| = 3$;  $|a_4 - a_5| = |6 - 3| = 3$;  $|a_5 - a_6| = |3 - 6| = 3$. \n\nSo, the maximum difference between any adjacent elements is $3$.\n\n Examples: \nInput: \n7\n5\n-1 10 -1 12 -1\n5\n-1 40 35 -1 35\n6\n-1 -1 9 -1 3 -1\n2\n-1 -1\n2\n0 -1\n4\n1 -1 3 -1\n7\n1 -1 7 5 2 -1 5\n\nOutput: \n 1 11\n5 37\n3 6\n0 0\n0 0\n1 2\n3 4\n\n",
  "60": "Problem: \nIn order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers $a$ and $b$ and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of ($a \\oplus x$) + ($b \\oplus x$) for any given $x$, where $\\oplus$ denotes the bitwise XOR operation. \n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^{4}$). Description of the test cases follows.\n\nThe only line of each test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^{9}$).\n\n\n-----Output-----\n\nFor each testcase, output the smallest possible value of the given expression.\n\n\n-----Example-----\nInput\n6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n\nOutput\n10\n13\n891\n18\n6237\n0\n\n\n\n-----Note-----\n\nFor the first test case Sana can choose $x=4$ and the value will be ($6 \\oplus 4$) + ($12 \\oplus 4$) = $2 + 8$ = $10$. It can be shown that this is the smallest possible value.\n\n Examples: \nInput: \n6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n\nOutput: \n 10\n13\n891\n18\n6237\n0\n\n",
  "61": "Problem: \nYou are given a permutation $p_1, p_2, \\dots, p_n$. Recall that sequence of $n$ integers is called a permutation if it contains all integers from $1$ to $n$ exactly once.\n\nFind three indices $i$, $j$ and $k$ such that:   $1 \\le i < j < k \\le n$;  $p_i < p_j$ and $p_j > p_k$.  Or say that there are no such indices.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 200$)\u00a0\u2014 the number of test cases.\n\nNext $2T$ lines contain test cases\u00a0\u2014 two lines per test case. The first line of each test case contains the single integer $n$ ($3 \\le n \\le 1000$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$; $p_i \\neq p_j$ if $i \\neq j$)\u00a0\u2014 the permutation $p$.\n\n\n-----Output-----\n\nFor each test case:   if there are such indices $i$, $j$ and $k$, print YES (case insensitive) and the indices themselves;  if there are no such indices, print NO (case insensitive). \n\nIf there are multiple valid triples of indices, print any of them.\n\n\n-----Example-----\nInput\n3\n4\n2 1 4 3\n6\n4 6 1 2 5 3\n5\n5 3 1 2 4\n\nOutput\nYES\n2 3 4\nYES\n3 5 6\nNO\n\n Examples: \nInput: \n3\n4\n2 1 4 3\n6\n4 6 1 2 5 3\n5\n5 3 1 2 4\n\nOutput: \n YES\n2 3 4\nYES\n1 2 3\nNO\n\n",
  "62": "Problem: \nPolycarp wants to assemble his own keyboard. Layouts with multiple rows are too complicated for him \u2014 his keyboard will consist of only one row, where all $26$ lowercase Latin letters will be arranged in some order.\n\nPolycarp uses the same password $s$ on all websites where he is registered (it is bad, but he doesn't care). He wants to assemble a keyboard that will allow to type this password very easily. He doesn't like to move his fingers while typing the password, so, for each pair of adjacent characters in $s$, they should be adjacent on the keyboard. For example, if the password is abacaba, then the layout cabdefghi... is perfect, since characters a and c are adjacent on the keyboard, and a and b are adjacent on the keyboard. It is guaranteed that there are no two adjacent equal characters in $s$, so, for example, the password cannot be password (two characters s are adjacent).\n\nCan you help Polycarp with choosing the perfect layout of the keyboard, if it is possible?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases.\n\nThen $T$ lines follow, each containing one string $s$ ($1 \\le |s| \\le 200$) representing the test case. $s$ consists of lowercase Latin letters only. There are no two adjacent equal characters in $s$.\n\n\n-----Output-----\n\nFor each test case, do the following:\n\n  if it is impossible to assemble a perfect keyboard, print NO (in upper case, it matters in this problem);  otherwise, print YES (in upper case), and then a string consisting of $26$ lowercase Latin letters \u2014 the perfect layout. Each Latin letter should appear in this string exactly once. If there are multiple answers, print any of them. \n\n\n-----Example-----\nInput\n5\nababa\ncodedoca\nabcda\nzxzytyz\nabcdefghijklmnopqrstuvwxyza\n\nOutput\nYES\nbacdefghijklmnopqrstuvwxyz\nYES\nedocabfghijklmnpqrstuvwxyz\nNO\nYES\nxzytabcdefghijklmnopqrsuvw\nNO\n\n Examples: \nInput: \n5\nababa\ncodedoca\nabcda\nzxzytyz\nabcdefghijklmnopqrstuvwxyza\n\nOutput: \n YES\nbacdefghijklmnopqrstuvwxyz\nYES\nedocabfghijklmnpqrstuvwxyz\nNO\nYES\nxzytabcdefghijklmnopqrsuvw\nNO\n\n",
  "63": "Problem: \nLee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought $n$ integers, now it's time to distribute them between his friends rationally...\n\nLee has $n$ integers $a_1, a_2, \\ldots, a_n$ in his backpack and he has $k$ friends. Lee would like to distribute all integers in his backpack between his friends, such that the $i$-th friend will get exactly $w_i$ integers and each integer will be handed over to exactly one friend.\n\nLet's define the happiness of a friend as the sum of the maximum and the minimum integer he'll get.\n\nLee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nNext $3t$ lines contain test cases\u00a0\u2014 one per three lines.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le n$)\u00a0\u2014 the number of integers Lee has and the number of Lee's friends.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$)\u00a0\u2014 the integers Lee has.\n\nThe third line contains $k$ integers $w_1, w_2, \\ldots, w_k$ ($1 \\le w_i \\le n$; $w_1 + w_2 + \\ldots + w_k = n$)\u00a0\u2014 the number of integers Lee wants to give to each friend. \n\nIt's guaranteed that the sum of $n$ over test cases is less than or equal to $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print a single integer\u00a0\u2014 the maximum sum of happiness Lee can achieve.\n\n\n-----Example-----\nInput\n3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n\nOutput\n48\n42\n8000000000\n\n\n\n-----Note-----\n\nIn the first test case, Lee should give the greatest integer to the first friend (his happiness will be $17 + 17$) and remaining integers to the second friend (his happiness will be $13 + 1$).\n\nIn the second test case, Lee should give $\\{10, 10, 11\\}$ to the first friend and to the second friend, so the total happiness will be equal to $(11 + 10) + (11 + 10)$\n\nIn the third test case, Lee has four friends and four integers, it doesn't matter how he distributes the integers between his friends.\n\n Examples: \nInput: \n3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n\nOutput: \n 48\n42\n8000000000\n\n",
  "66": "Problem: \nKuroni has $n$ daughters. As gifts for them, he bought $n$ necklaces and $n$ bracelets:  the $i$-th necklace has a brightness $a_i$, where all the $a_i$ are pairwise distinct (i.e. all $a_i$ are different),  the $i$-th bracelet has a brightness $b_i$, where all the $b_i$ are pairwise distinct (i.e. all $b_i$ are different). \n\nKuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the $i$-th daughter receives a necklace with brightness $x_i$ and a bracelet with brightness $y_i$, then the sums $x_i + y_i$ should be pairwise distinct. Help Kuroni to distribute the gifts.\n\nFor example, if the brightnesses are $a = [1, 7, 5]$ and $b = [6, 1, 2]$, then we may distribute the gifts as follows:  Give the third necklace and the first bracelet to the first daughter, for a total brightness of $a_3 + b_1 = 11$. Give the first necklace and the third bracelet to the second daughter, for a total brightness of $a_1 + b_3 = 3$. Give the second necklace and the second bracelet to the third daughter, for a total brightness of $a_2 + b_2 = 8$. \n\nHere is an example of an invalid distribution:   Give the first necklace and the first bracelet to the first daughter, for a total brightness of $a_1 + b_1 = 7$. Give the second necklace and the second bracelet to the second daughter, for a total brightness of $a_2 + b_2 = 8$. Give the third necklace and the third bracelet to the third daughter, for a total brightness of $a_3 + b_3 = 7$. \n\nThis distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don't make them this upset!\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 100$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u00a0\u2014 the number of daughters, necklaces and bracelets.\n\nThe second line of each test case contains $n$ distinct integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1000$) \u00a0\u2014 the brightnesses of the necklaces.\n\nThe third line of each test case contains $n$ distinct integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 1000$) \u00a0\u2014 the brightnesses of the bracelets.\n\n\n-----Output-----\n\nFor each test case, print a line containing $n$ integers $x_1, x_2, \\dots, x_n$, representing that the $i$-th daughter receives a necklace with brightness $x_i$. In the next line print $n$ integers $y_1, y_2, \\dots, y_n$, representing that the $i$-th daughter receives a bracelet with brightness $y_i$.\n\nThe sums $x_1 + y_1, x_2 + y_2, \\dots, x_n + y_n$ should all be distinct. The numbers $x_1, \\dots, x_n$ should be equal to the numbers $a_1, \\dots, a_n$ in some order, and the numbers $y_1, \\dots, y_n$ should be equal to the numbers $b_1, \\dots, b_n$ in some order. \n\nIt can be shown that an answer always exists. If there are multiple possible answers, you may print any of them.\n\n\n-----Example-----\nInput\n2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n\nOutput\n1 8 5\n8 4 5\n5 1 7\n6 2 1\n\n\n\n-----Note-----\n\nIn the first test case, it is enough to give the $i$-th necklace and the $i$-th bracelet to the $i$-th daughter. The corresponding sums are $1 + 8 = 9$, $8 + 4 = 12$, and $5 + 5 = 10$.\n\nThe second test case is described in the statement.\n\n Examples: \nInput: \n2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n\nOutput: \n 1 8 5\n8 4 5\n5 1 7\n6 2 1\n\n",
  "68": "Problem: \nYou have a string $s$ consisting of $n$ characters. Each character is either 0 or 1.\n\nYou can perform operations on the string. Each operation consists of two steps:  select an integer $i$ from $1$ to the length of the string $s$, then delete the character $s_i$ (the string length gets reduced by $1$, the indices of characters to the right of the deleted one also get reduced by $1$);  if the string $s$ is not empty, delete the maximum length prefix consisting of the same characters (the indices of the remaining characters and the string length get reduced by the length of the deleted prefix). \n\nNote that both steps are mandatory in each operation, and their order cannot be changed.\n\nFor example, if you have a string $s =$ 111010, the first operation can be one of the following:  select $i = 1$: we'll get 111010 $\\rightarrow$ 11010 $\\rightarrow$ 010;  select $i = 2$: we'll get 111010 $\\rightarrow$ 11010 $\\rightarrow$ 010;  select $i = 3$: we'll get 111010 $\\rightarrow$ 11010 $\\rightarrow$ 010;  select $i = 4$: we'll get 111010 $\\rightarrow$ 11110 $\\rightarrow$ 0;  select $i = 5$: we'll get 111010 $\\rightarrow$ 11100 $\\rightarrow$ 00;  select $i = 6$: we'll get 111010 $\\rightarrow$ 11101 $\\rightarrow$ 01. \n\nYou finish performing operations when the string $s$ becomes empty. What is the maximum number of operations you can perform?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the string $s$.\n\nThe second line contains string $s$ of $n$ characters. Each character is either 0 or 1.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print a single integer\u00a0\u2014 the maximum number of operations you can perform.\n\n\n-----Example-----\nInput\n5\n6\n111010\n1\n0\n1\n1\n2\n11\n6\n101010\n\nOutput\n3\n1\n1\n1\n3\n\n\n\n-----Note-----\n\nIn the first test case, you can, for example, select $i = 2$ and get string 010 after the first operation. After that, you can select $i = 3$ and get string 1. Finally, you can only select $i = 1$ and get empty string.\n\n Examples: \nInput: \n5\n6\n111010\n1\n0\n1\n1\n2\n11\n6\n101010\n\nOutput: \n 3\n1\n1\n1\n3\n\n",
  "69": "Problem: \nBertown is a city with $n$ buildings in a straight line.\n\nThe city's security service discovered that some buildings were mined. A map was compiled, which is a string of length $n$, where the $i$-th character is \"1\" if there is a mine under the building number $i$ and \"0\" otherwise.\n\nBertown's best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered $x$ is activated, it explodes and activates two adjacent mines under the buildings numbered $x-1$ and $x+1$ (if there were no mines under the building, then nothing happens). Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes $a$ coins. He can repeat this operation as many times as you want.\n\nAlso, a sapper can place a mine under a building if it wasn't there. For such an operation, he takes $b$ coins. He can also repeat this operation as many times as you want.\n\nThe sapper can carry out operations in any order.\n\nYou want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 10^5$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing two integers $a$ and $b$ ($1 \\le a, b \\le 1000$)\u00a0\u2014 the cost of activating and placing one mine, respectively.\n\nThe next line contains a map of mines in the city\u00a0\u2014 a string consisting of zeros and ones.\n\nThe sum of the string lengths for all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one integer\u00a0\u2014 the minimum number of coins that the sapper will have to pay.\n\n\n-----Example-----\nInput\n2\n1 1\n01000010\n5 1\n01101110\n\nOutput\n2\n6\n\n\n\n-----Note-----\n\nIn the second test case, if we place a mine under the fourth building and then activate it, then all mines on the field are activated. The cost of such operations is six, $b=1$ coin for placing a mine and $a=5$ coins for activating.\n\n Examples: \nInput: \n2\n1 1\n01000010\n5 1\n01101110\n\nOutput: \n 2\n6\n\n",
  "71": "Problem: \nYou're given an array $a$ of $n$ integers, such that $a_1 + a_2 + \\cdots + a_n = 0$.\n\nIn one operation, you can choose two different indices $i$ and $j$ ($1 \\le i, j \\le n$), decrement $a_i$ by one and increment $a_j$ by one. If $i < j$ this operation is free, otherwise it costs one coin.\n\nHow many coins do you have to spend in order to make all elements equal to $0$?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). Description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 10^5$) \u00a0\u2014 the number of elements.\n\nThe next line contains $n$ integers $a_1, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$). It is given that $\\sum_{i=1}^n a_i = 0$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of coins we have to spend in order to make all elements equal to $0$.\n\n\n-----Example-----\nInput\n7\n4\n-3 5 -3 1\n2\n1 -1\n4\n-3 2 -3 4\n4\n-1 1 1 -1\n7\n-5 7 -6 -4 17 -13 4\n6\n-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000\n1\n0\n\nOutput\n3\n0\n4\n1\n8\n3000000000\n0\n\n\n\n-----Note-----\n\nPossible strategy for the first test case:   Do $(i=2, j=3)$ three times (free), $a = [-3, 2, 0, 1]$.  Do $(i=2, j=1)$ two times (pay two coins), $a = [-1, 0, 0, 1]$.  Do $(i=4, j=1)$ one time (pay one coin), $a = [0, 0, 0, 0]$.\n\n Examples: \nInput: \n7\n4\n-3 5 -3 1\n2\n1 -1\n4\n-3 2 -3 4\n4\n-1 1 1 -1\n7\n-5 7 -6 -4 17 -13 4\n6\n-1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000\n1\n0\n\nOutput: \n 3\n0\n4\n1\n8\n3000000000\n0\n\n",
  "72": "Problem: \nPhoenix loves beautiful arrays. An array is beautiful if all its subarrays of length\u00a0$k$ have the same sum. A subarray of an array is any sequence of consecutive elements.\n\nPhoenix currently has an array $a$ of length $n$. He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between $1$ and $n$ inclusive. Integers may be inserted anywhere (even before the first or after the last element), and he is not trying to minimize the number of inserted integers.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 50$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 100$).\n\nThe second line of each test case contains $n$ space-separated integers ($1 \\le a_i \\le n$)\u00a0\u2014 the array that Phoenix currently has. This array may or may not be already beautiful.\n\n\n-----Output-----\n\nFor each test case, if it is impossible to create a beautiful array, print -1. Otherwise, print two lines.\n\nThe first line should contain the length of the beautiful array $m$ ($n \\le m \\le 10^4$). You don't need to minimize $m$.\n\nThe second line should contain $m$ space-separated integers ($1 \\le b_i \\le n$)\u00a0\u2014 a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array $a$. You may print integers that weren't originally in array $a$.\n\nIf there are multiple solutions, print any. It's guaranteed that if we can make array $a$ beautiful, we can always make it with resulting length no more than $10^4$.\n\n\n-----Example-----\nInput\n4\n4 2\n1 2 2 1\n4 3\n1 2 2 1\n3 2\n1 2 3\n4 4\n4 3 4 2\n\nOutput\n5\n1 2 1 2 1\n4\n1 2 2 1\n-1\n7\n4 3 2 1 4 3 2\n\n\n-----Note-----\n\nIn the first test case, we can make array $a$ beautiful by inserting the integer $1$ at index $3$ (in between the two existing $2$s). Now, all subarrays of length $k=2$ have the same sum $3$. There exists many other possible solutions, for example:   $2, 1, 2, 1, 2, 1$  $1, 2, 1, 2, 1, 2$ \n\nIn the second test case, the array is already beautiful: all subarrays of length $k=3$ have the same sum $5$.\n\nIn the third test case, it can be shown that we cannot insert numbers to make array $a$ beautiful.\n\nIn the fourth test case, the array $b$ shown is beautiful and all subarrays of length $k=4$ have the same sum $10$. There exist other solutions also.\n\n Examples: \nInput: \n4\n4 2\n1 2 2 1\n4 3\n1 2 2 1\n3 2\n1 2 3\n4 4\n4 3 4 2\n\nOutput: \n 8\n1 2 1 2 1 2 1 2 \n12\n1 2 1 1 2 1 1 2 1 1 2 1 \n-1\n16\n2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 \n\n",
  "73": "Problem: \nYou're given an array of $n$ integers between $0$ and $n$ inclusive.\n\nIn one operation, you can choose any element of the array and replace it by the MEX of the elements of the array (which may change after the operation).\n\nFor example, if the current array is $[0, 2, 2, 1, 4]$, you can choose the second element and replace it by the MEX of the present elements \u00a0\u2014 $3$. Array will become $[0, 3, 2, 1, 4]$.\n\nYou must make the array non-decreasing, using at most $2n$ operations.\n\nIt can be proven that it is always possible. Please note that you do not have to minimize the number of operations. If there are many solutions, you can print any of them.\n\n\u00a0\u2013\n\nAn array $b[1 \\ldots n]$ is non-decreasing if and only if $b_1 \\le b_2 \\le \\ldots \\le b_n$.\n\nThe MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:  The MEX of $[2, 2, 1]$ is $0$, because $0$ does not belong to the array.  The MEX of $[3, 1, 0, 1]$ is $2$, because $0$ and $1$ belong to the array, but $2$ does not.  The MEX of $[0, 3, 1, 2]$ is $4$ because $0$, $1$, $2$ and $3$ belong to the array, but $4$ does not. \n\nIt's worth mentioning that the MEX of an array of length $n$ is always between $0$ and $n$ inclusive.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 200$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($3 \\le n \\le 1000$)\u00a0\u2014 length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, \\ldots, a_n$ ($0 \\le a_i \\le n$)\u00a0\u2014 elements of the array. Note that they don't have to be distinct.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $1000$.\n\n\n-----Output-----\n\nFor each test case, you must output two lines:\n\nThe first line must contain a single integer $k$ ($0 \\le k \\le 2n$) \u00a0\u2014 the number of operations you perform.\n\nThe second line must contain $k$ integers $x_1, \\ldots, x_k$ ($1 \\le x_i \\le n$), where $x_i$ is the index chosen for the $i$-th operation.\n\nIf there are many solutions, you can find any of them. Please remember that it is not required to minimize $k$.\n\n\n-----Example-----\nInput\n5\n3\n2 2 3\n3\n2 1 0\n7\n0 7 3 1 3 7 7\n9\n2 0 1 1 2 4 4 2 0\n9\n8 4 7 6 1 2 3 0 5\n\nOutput\n0\n\n2\n3 1\n4\n2 5 5 4\n11\n3 8 9 7 8 5 9 6 4 1 2\n10\n1 8 1 9 5 2 4 6 3 7\n\n\n\n-----Note-----\n\nIn the first test case, the array is already non-decreasing ($2 \\le 2 \\le 3$).\n\nExplanation of the second test case (the element modified by each operation is colored in red):   $a = [2, 1, 0]$ ; the initial MEX is $3$.  $a = [2, 1, \\color{red}{3}]$ ; the new MEX is $0$.  $a = [\\color{red}{0}, 1, 3]$ ; the new MEX is $2$.  The final array is non-decreasing: $0 \\le 1 \\le 3$. \n\nExplanation of the third test case:   $a = [0, 7, 3, 1, 3, 7, 7]$ ; the initial MEX is $2$.  $a = [0, \\color{red}{2}, 3, 1, 3, 7, 7]$ ; the new MEX is $4$.  $a = [0, 2, 3, 1, \\color{red}{4}, 7, 7]$ ; the new MEX is $5$.  $a = [0, 2, 3, 1, \\color{red}{5}, 7, 7]$ ; the new MEX is $4$.  $a = [0, 2, 3, \\color{red}{4}, 5, 7, 7]$ ; the new MEX is $1$.  The final array is non-decreasing: $0 \\le 2 \\le 3 \\le 4 \\le 5 \\le 7 \\le 7$.\n\n Examples: \nInput: \n5\n3\n2 2 3\n3\n2 1 0\n7\n0 7 3 1 3 7 7\n9\n2 0 1 1 2 4 4 2 0\n9\n8 4 7 6 1 2 3 0 5\n\nOutput: \n 0\n\n2\n3 1\n4\n2 5 5 4\n11\n3 8 9 7 8 5 9 6 4 1 2\n10\n1 8 1 9 5 2 4 6 3 7\n\n",
  "75": "Problem: \nThe statement of this problem is the same as the statement of problem C1. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 200$)\u00a0\u2014 the number of test cases.\n\nNext $T$ lines contain descriptions of test cases\u00a0\u2014 one per line. Each line contains single odd integer $n$ ($3 \\le n \\le 199$). Don't forget you need to embed $2n$-gon, not an $n$-gon.\n\n\n-----Output-----\n\nPrint $T$ real numbers\u00a0\u2014 one per test case. For each test case, print the minimum length of a side of the square $2n$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$.\n\n\n-----Example-----\nInput\n3\n3\n5\n199\n\nOutput\n1.931851653\n3.196226611\n126.687663595\n\n Examples: \nInput: \n3\n3\n5\n199\n\nOutput: \n 1.931851653\n3.196226611\n126.687663595\n\n",
  "76": "Problem: \nLee is going to fashionably decorate his house for a party, using some regular convex polygons...\n\nLee thinks a regular $n$-sided (convex) polygon is beautiful if and only if he can rotate it in such a way that at least one of its edges is parallel to the $OX$-axis and at least one of its edges is parallel to the $OY$-axis at the same time.\n\nRecall that a regular $n$-sided polygon is a convex polygon with $n$ vertices such that all the edges and angles are equal.\n\nNow he is shopping: the market has $t$ regular polygons. For each of them print YES if it is beautiful and NO otherwise.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of polygons in the market. \n\nEach of the next $t$ lines contains a single integer $n_i$ ($3 \\le n_i \\le 10^9$): it means that the $i$-th polygon is a regular $n_i$-sided polygon. \n\n\n-----Output-----\n\nFor each polygon, print YES if it's beautiful or NO otherwise (case insensitive).\n\n\n-----Example-----\nInput\n4\n3\n4\n12\n1000000000\n\nOutput\nNO\nYES\nYES\nYES\n\n\n\n-----Note-----\n\nIn the example, there are $4$ polygons in the market. It's easy to see that an equilateral triangle (a regular $3$-sided polygon) is not beautiful, a square (a regular $4$-sided polygon) is beautiful and a regular $12$-sided polygon (is shown below) is beautiful as well. [Image]\n\n Examples: \nInput: \n4\n3\n4\n12\n1000000000\n\nOutput: \n NO\nYES\nYES\nYES\n\n",
  "78": "Problem: \nYou are given a picture consisting of $n$ rows and $m$ columns. Rows are numbered from $1$ to $n$ from the top to the bottom, columns are numbered from $1$ to $m$ from the left to the right. Each cell is painted either black or white. \n\nYou think that this picture is not interesting enough. You consider a picture to be interesting if there is at least one cross in it. A cross is represented by a pair of numbers $x$ and $y$, where $1 \\le x \\le n$ and $1 \\le y \\le m$, such that all cells in row $x$ and all cells in column $y$ are painted black.\n\nFor examples, each of these pictures contain crosses:\n\n [Image] \n\nThe fourth picture contains 4 crosses: at $(1, 3)$, $(1, 5)$, $(3, 3)$ and $(3, 5)$.\n\nFollowing images don't contain crosses:\n\n [Image] \n\nYou have a brush and a can of black paint, so you can make this picture interesting. Each minute you may choose a white cell and paint it black.\n\nWhat is the minimum number of minutes you have to spend so the resulting picture contains at least one cross?\n\nYou are also asked to answer multiple independent queries.\n\n\n-----Input-----\n\nThe first line contains an integer $q$ ($1 \\le q \\le 5 \\cdot 10^4$) \u2014 the number of queries.\n\nThe first line of each query contains two integers $n$ and $m$ ($1 \\le n, m \\le 5 \\cdot 10^4$, $n \\cdot m \\le 4 \\cdot 10^5$) \u2014 the number of rows and the number of columns in the picture.\n\nEach of the next $n$ lines contains $m$ characters \u2014 '.' if the cell is painted white and '*' if the cell is painted black.\n\nIt is guaranteed that $\\sum n \\le 5 \\cdot 10^4$ and $\\sum n \\cdot m \\le 4 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $q$ lines, the $i$-th line should contain a single integer \u2014 the answer to the $i$-th query, which is the minimum number of minutes you have to spend so the resulting picture contains at least one cross.\n\n\n-----Example-----\nInput\n9\n5 5\n..*..\n..*..\n*****\n..*..\n..*..\n3 4\n****\n.*..\n.*..\n4 3\n***\n*..\n*..\n*..\n5 5\n*****\n*.*.*\n*****\n..*.*\n..***\n1 4\n****\n5 5\n.....\n..*..\n.***.\n..*..\n.....\n5 3\n...\n.*.\n.*.\n***\n.*.\n3 3\n.*.\n*.*\n.*.\n4 4\n*.**\n....\n*.**\n*.**\n\nOutput\n0\n0\n0\n0\n0\n4\n1\n1\n2\n\n\n\n-----Note-----\n\nThe example contains all the pictures from above in the same order.\n\nThe first 5 pictures already contain a cross, thus you don't have to paint anything.\n\nYou can paint $(1, 3)$, $(3, 1)$, $(5, 3)$ and $(3, 5)$ on the $6$-th picture to get a cross in $(3, 3)$. That'll take you $4$ minutes.\n\nYou can paint $(1, 2)$ on the $7$-th picture to get a cross in $(4, 2)$.\n\nYou can paint $(2, 2)$ on the $8$-th picture to get a cross in $(2, 2)$. You can, for example, paint $(1, 3)$, $(3, 1)$ and $(3, 3)$ to get a cross in $(3, 3)$ but that will take you $3$ minutes instead of $1$.\n\nThere are 9 possible crosses you can get in minimum time on the $9$-th picture. One of them is in $(1, 1)$: paint $(1, 2)$ and $(2, 1)$.\n\n Examples: \nInput: \n9\n5 5\n..*..\n..*..\n*****\n..*..\n..*..\n3 4\n****\n.*..\n.*..\n4 3\n***\n*..\n*..\n*..\n5 5\n*****\n*.*.*\n*****\n..*.*\n..***\n1 4\n****\n5 5\n.....\n..*..\n.***.\n..*..\n.....\n5 3\n...\n.*.\n.*.\n***\n.*.\n3 3\n.*.\n*.*\n.*.\n4 4\n*.**\n....\n*.**\n*.**\n\nOutput: \n 0\n0\n0\n0\n0\n4\n1\n1\n2\n\n",
  "80": "Problem: \nWhile doing some spring cleaning, Daniel found an old calculator that he loves so much. However, it seems like it is broken. When he tries to compute $1 + 3$ using the calculator, he gets $2$ instead of $4$. But when he tries computing $1 + 4$, he gets the correct answer, $5$. Puzzled by this mystery, he opened up his calculator and found the answer to the riddle: the full adders became half adders! \n\nSo, when he tries to compute the sum $a + b$ using the calculator, he instead gets the xorsum $a \\oplus b$ (read the definition by the link: https://en.wikipedia.org/wiki/Exclusive_or).\n\nAs he saw earlier, the calculator sometimes gives the correct answer. And so, he wonders, given integers $l$ and $r$, how many pairs of integers $(a, b)$ satisfy the following conditions: $$a + b = a \\oplus b$$ $$l \\leq a \\leq r$$ $$l \\leq b \\leq r$$\n\nHowever, Daniel the Barman is going to the bar and will return in two hours. He tells you to solve the problem before he returns, or else you will have to enjoy being blocked.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$) \u2014 the number of testcases.\n\nThen, $t$ lines follow, each containing two space-separated integers $l$ and $r$ ($0 \\le l \\le r \\le 10^9$).\n\n\n-----Output-----\n\nPrint $t$ integers, the $i$-th integer should be the answer to the $i$-th testcase.\n\n\n-----Example-----\nInput\n3\n1 4\n323 323\n1 1000000\n\nOutput\n8\n0\n3439863766\n\n\n\n-----Note-----\n\n$a \\oplus b$ denotes the bitwise XOR of $a$ and $b$.\n\nFor the first testcase, the pairs are: $(1, 2)$, $(1, 4)$, $(2, 1)$, $(2, 4)$, $(3, 4)$, $(4, 1)$, $(4, 2)$, and $(4, 3)$.\n\n Examples: \nInput: \n3\n1 4\n323 323\n1 1000000\n\nOutput: \n 8\n0\n3439863766\n\n",
  "81": "Problem: \nYou are given three strings $a$, $b$ and $c$ of the same length $n$. The strings consist of lowercase English letters only. The $i$-th letter of $a$ is $a_i$, the $i$-th letter of $b$ is $b_i$, the $i$-th letter of $c$ is $c_i$.\n\nFor every $i$ ($1 \\leq i \\leq n$) you must swap (i.e. exchange) $c_i$ with either $a_i$ or $b_i$. So in total you'll perform exactly $n$ swap operations, each of them either $c_i \\leftrightarrow a_i$ or $c_i \\leftrightarrow b_i$ ($i$ iterates over all integers between $1$ and $n$, inclusive).\n\nFor example, if $a$ is \"code\", $b$ is \"true\", and $c$ is \"help\", you can make $c$ equal to \"crue\" taking the $1$-st and the $4$-th letters from $a$ and the others from $b$. In this way $a$ becomes \"hodp\" and $b$ becomes \"tele\".\n\nIs it possible that after these swaps the string $a$ becomes exactly the same as the string $b$?\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 100$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a string of lowercase English letters $a$.\n\nThe second line of each test case contains a string of lowercase English letters $b$.\n\nThe third line of each test case contains a string of lowercase English letters $c$.\n\nIt is guaranteed that in each test case these three strings are non-empty and have the same length, which is not exceeding $100$.\n\n\n-----Output-----\n\nPrint $t$ lines with answers for all test cases. For each test case:\n\nIf it is possible to make string $a$ equal to string $b$ print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print either lowercase or uppercase letters in the answers.\n\n\n-----Example-----\nInput\n4\naaa\nbbb\nccc\nabc\nbca\nbca\naabb\nbbaa\nbaba\nimi\nmii\niim\n\nOutput\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test case, it is impossible to do the swaps so that string $a$ becomes exactly the same as string $b$.\n\nIn the second test case, you should swap $c_i$ with $a_i$ for all possible $i$. After the swaps $a$ becomes \"bca\", $b$ becomes \"bca\" and $c$ becomes \"abc\". Here the strings $a$ and $b$ are equal.\n\nIn the third test case, you should swap $c_1$ with $a_1$, $c_2$ with $b_2$, $c_3$ with $b_3$ and $c_4$ with $a_4$. Then string $a$ becomes \"baba\", string $b$ becomes \"baba\" and string $c$ becomes \"abab\". Here the strings $a$ and $b$ are equal.\n\nIn the fourth test case, it is impossible to do the swaps so that string $a$ becomes exactly the same as string $b$.\n\n Examples: \nInput: \n4\naaa\nbbb\nccc\nabc\nbca\nbca\naabb\nbbaa\nbaba\nimi\nmii\niim\n\nOutput: \n NO\nYES\nYES\nNO\n\n",
  "82": "Problem: \nA permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\nLet $p$ be any permutation of length $n$. We define the fingerprint $F(p)$ of $p$ as the sorted array of sums of adjacent elements in $p$. More formally,\n\n$$F(p)=\\mathrm{sort}([p_1+p_2,p_2+p_3,\\ldots,p_{n-1}+p_n]).$$\n\nFor example, if $n=4$ and $p=[1,4,2,3],$ then the fingerprint is given by $F(p)=\\mathrm{sort}([1+4,4+2,2+3])=\\mathrm{sort}([5,6,5])=[5,5,6]$.\n\nYou are given a permutation $p$ of length $n$. Your task is to find a different permutation $p'$ with the same fingerprint. Two permutations $p$ and $p'$ are considered different if there is some index $i$ such that $p_i \\ne p'_i$.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 668$). Description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2\\le n\\le 100$) \u00a0\u2014 the length of the permutation.\n\nThe second line of each test case contains $n$ integers $p_1,\\ldots,p_n$ ($1\\le p_i\\le n$). It is guaranteed that $p$ is a permutation.\n\n\n-----Output-----\n\nFor each test case, output $n$ integers $p'_1,\\ldots, p'_n$ \u2014 a permutation such that $p'\\ne p$ and $F(p')=F(p)$.\n\nWe can prove that for every permutation satisfying the input constraints, a solution exists.\n\nIf there are multiple solutions, you may output any.\n\n\n-----Example-----\nInput\n3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n\nOutput\n2 1\n1 2 5 6 3 4\n3 1 5 2 4\n\n\n\n-----Note-----\n\nIn the first test case, $F(p)=\\mathrm{sort}([1+2])=[3]$.\n\nAnd $F(p')=\\mathrm{sort}([2+1])=[3]$.\n\nIn the second test case, $F(p)=\\mathrm{sort}([2+1,1+6,6+5,5+4,4+3])=\\mathrm{sort}([3,7,11,9,7])=[3,7,7,9,11]$.\n\nAnd $F(p')=\\mathrm{sort}([1+2,2+5,5+6,6+3,3+4])=\\mathrm{sort}([3,7,11,9,7])=[3,7,7,9,11]$.\n\nIn the third test case, $F(p)=\\mathrm{sort}([2+4,4+3,3+1,1+5])=\\mathrm{sort}([6,7,4,6])=[4,6,6,7]$.\n\nAnd $F(p')=\\mathrm{sort}([3+1,1+5,5+2,2+4])=\\mathrm{sort}([4,6,7,6])=[4,6,6,7]$.\n\n Examples: \nInput: \n3\n2\n1 2\n6\n2 1 6 5 4 3\n5\n2 4 3 1 5\n\nOutput: \n 2 1 \n3 4 5 6 1 2 \n5 1 3 4 2 \n\n",
  "83": "Problem: \nBeing tired of participating in too many Codeforces rounds, Gildong decided to take some rest in a park. He sat down on a bench, and soon he found two rabbits hopping around. One of the rabbits was taller than the other.\n\nHe noticed that the two rabbits were hopping towards each other. The positions of the two rabbits can be represented as integer coordinates on a horizontal line. The taller rabbit is currently on position $x$, and the shorter rabbit is currently on position $y$ ($x \\lt y$). Every second, each rabbit hops to another position. The taller rabbit hops to the positive direction by $a$, and the shorter rabbit hops to the negative direction by $b$.\n\n [Image] \n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, each rabbit will be at position $2$ and $7$. At the $2$-nd second, both rabbits will be at position $4$.\n\nGildong is now wondering: Will the two rabbits be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the rabbits will be at the same point.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \\le x \\lt y \\le 10^9$, $1 \\le a,b \\le 10^9$) \u2014 the current position of the taller rabbit, the current position of the shorter rabbit, the hopping distance of the taller rabbit, and the hopping distance of the shorter rabbit, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two rabbits will take to be at the same position.\n\nIf the two rabbits will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.\n\n Examples: \nInput: \n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput: \n 2\n-1\n10\n-1\n1\n\n",
  "84": "Problem: \nLet's look at the following process: initially you have an empty stack and an array $s$ of the length $l$. You are trying to push array elements to the stack in the order $s_1, s_2, s_3, \\dots s_{l}$. Moreover, if the stack is empty or the element at the top of this stack is not equal to the current element, then you just push the current element to the top of the stack. Otherwise, you don't push the current element to the stack and, moreover, pop the top element of the stack. \n\nIf after this process the stack remains empty, the array $s$ is considered stack exterminable.\n\nThere are samples of stack exterminable arrays:   $[1, 1]$;  $[2, 1, 1, 2]$;  $[1, 1, 2, 2]$;  $[1, 3, 3, 1, 2, 2]$;  $[3, 1, 3, 3, 1, 3]$;  $[3, 3, 3, 3, 3, 3]$;  $[5, 1, 2, 2, 1, 4, 4, 5]$; \n\nLet's consider the changing of stack more details if $s = [5, 1, 2, 2, 1, 4, 4, 5]$ (the top of stack is highlighted).   after pushing $s_1 = 5$ the stack turn into $[\\textbf{5}]$;  after pushing $s_2 = 1$ the stack turn into $[5, \\textbf{1}]$;  after pushing $s_3 = 2$ the stack turn into $[5, 1, \\textbf{2}]$;  after pushing $s_4 = 2$ the stack turn into $[5, \\textbf{1}]$;  after pushing $s_5 = 1$ the stack turn into $[\\textbf{5}]$;  after pushing $s_6 = 4$ the stack turn into $[5, \\textbf{4}]$;  after pushing $s_7 = 4$ the stack turn into $[\\textbf{5}]$;  after pushing $s_8 = 5$ the stack is empty. \n\nYou are given an array $a_1, a_2, \\ldots, a_n$. You have to calculate the number of its subarrays which are stack exterminable.\n\nNote, that you have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$)\u00a0\u2014 the number of queries.\n\nThe first line of each query contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the length of array $a$.\n\nThe second line of each query contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the elements.\n\nIt is guaranteed that the sum of all $n$ over all queries does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer in single line \u2014 the number of stack exterminable subarrays of the array $a$.\n\n\n-----Example-----\nInput\n3\n5\n2 1 1 2 2\n6\n1 2 1 1 3 2\n9\n3 1 2 2 1 6 6 3 3\n\nOutput\n4\n1\n8\n\n\n\n-----Note-----\n\nIn the first query there are four stack exterminable subarrays: $a_{1 \\ldots 4} = [2, 1, 1, 2], a_{2 \\ldots 3} = [1, 1], a_{2 \\ldots 5} = [1, 1, 2, 2], a_{4 \\ldots 5} = [2, 2]$.\n\nIn the second query, only one subarray is exterminable subarray\u00a0\u2014 $a_{3 \\ldots 4}$.\n\nIn the third query, there are eight stack exterminable subarrays: $a_{1 \\ldots 8}, a_{2 \\ldots 5}, a_{2 \\ldots 7}, a_{2 \\ldots 9}, a_{3 \\ldots 4}, a_{6 \\ldots 7}, a_{6 \\ldots 9}, a_{8 \\ldots 9}$.\n\n Examples: \nInput: \n3\n5\n2 1 1 2 2\n6\n1 2 1 1 3 2\n9\n3 1 2 2 1 6 6 3 3\n\nOutput: \n 4\n1\n8\n\n",
  "85": "Problem: \nConsider the following process. You have a binary string (a string where each character is either 0 or 1) $w$ of length $n$ and an integer $x$. You build a new binary string $s$ consisting of $n$ characters. The $i$-th character of $s$ is chosen as follows:\n\n  if the character $w_{i-x}$ exists and is equal to 1, then $s_i$ is 1 (formally, if $i > x$ and $w_{i-x} = $ 1, then $s_i = $ 1);  if the character $w_{i+x}$ exists and is equal to 1, then $s_i$ is 1 (formally, if $i + x \\le n$ and $w_{i+x} = $ 1, then $s_i = $ 1);  if both of the aforementioned conditions are false, then $s_i$ is 0. \n\nYou are given the integer $x$ and the resulting string $s$. Reconstruct the original string $w$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains the resulting string $s$ ($2 \\le |s| \\le 10^5$, each character of $s$ is either 0 or 1). The second line contains one integer $x$ ($1 \\le x \\le |s| - 1$).\n\nThe total length of all strings $s$ in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the answer on a separate line as follows:\n\n  if no string $w$ can produce the string $s$ at the end of the process, print $-1$;  otherwise, print the binary string $w$ consisting of $|s|$ characters. If there are multiple answers, print any of them. \n\n\n-----Example-----\nInput\n3\n101110\n2\n01\n1\n110\n1\n\nOutput\n111011\n10\n-1\n\n Examples: \nInput: \n3\n101110\n2\n01\n1\n110\n1\n\nOutput: \n 111011\n10\n-1\n\n",
  "86": "Problem: \nAlexandra has an even-length array $a$, consisting of $0$s and $1$s. The elements of the array are enumerated from $1$ to $n$. She wants to remove at most $\\frac{n}{2}$ elements (where $n$ \u2014 length of array) in the way that alternating sum of the array will be equal $0$ (i.e. $a_1 - a_2 + a_3 - a_4 + \\dotsc = 0$). In other words, Alexandra wants sum of all elements at the odd positions and sum of all elements at the even positions to become equal. The elements that you remove don't have to be consecutive.\n\nFor example, if she has $a = [1, 0, 1, 0, 0, 0]$ and she removes $2$nd and $4$th elements, $a$ will become equal $[1, 1, 0, 0]$ and its alternating sum is $1 - 1 + 0 - 0 = 0$.\n\nHelp her!\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^3$). Description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^3$, $n$ is even) \u00a0\u2014 length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$) \u00a0\u2014 elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^3$.\n\n\n-----Output-----\n\nFor each test case, firstly, print $k$ ($\\frac{n}{2} \\leq k \\leq n$) \u2014 number of elements that will remain after removing in the order they appear in $a$. Then, print this $k$ numbers. Note that you should print the numbers themselves, not their indices.\n\nWe can show that an answer always exists. If there are several answers, you can output any of them. \n\n\n-----Example-----\nInput\n4\n2\n1 0\n2\n0 0\n4\n0 1 1 1\n4\n1 1 0 0\n\nOutput\n1\n0\n1\n0\n2\n1 1\n4\n1 1 0 0\n\n\n\n-----Note-----\n\nIn the first and second cases, alternating sum of the array, obviously, equals $0$.\n\nIn the third case, alternating sum of the array equals $1 - 1 = 0$.\n\nIn the fourth case, alternating sum already equals $1 - 1 + 0 - 0 = 0$, so we don't have to remove anything.\n\n Examples: \nInput: \n4\n2\n1 0\n2\n0 0\n4\n0 1 1 1\n4\n1 1 0 0\n\nOutput: \n 1\n0 \n2\n0 0 \n2\n1 1 \n2\n0 0 \n\n",
  "87": "Problem: \nBerland year consists of $m$ months with $d$ days each. Months are numbered from $1$ to $m$. Berland week consists of $w$ days. The first day of the year is also the first day of the week. Note that the last week of the year might be shorter than $w$ days.\n\nA pair $(x, y)$ such that $x < y$ is ambiguous if day $x$ of month $y$ is the same day of the week as day $y$ of month $x$.\n\nCount the number of ambiguous pairs.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of testcases.\n\nEach of the next $t$ lines contains three integers $m$, $d$ and $w$ ($1 \\le m, d, w \\le 10^9$)\u00a0\u2014 the number of months in a year, the number of days in a month and the number of days in a week.\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 for each testcase output the number of pairs $(x, y)$ such that $x < y$ and day $x$ of month $y$ is the same day of the week as day $y$ of month $x$.\n\n\n-----Example-----\nInput\n5\n6 7 4\n10 7 12\n12 30 7\n1 1 1\n3247834 10298779 625324\n\nOutput\n6\n9\n5\n0\n116461800\n\n\n\n-----Note-----\n\nHere are the pairs for the first test case:  $$\n\n Examples: \nInput: \n5\n6 7 4\n10 7 12\n12 30 7\n1 1 1\n3247834 10298779 625324\n\nOutput: \n 6\n9\n5\n0\n116461800\n\n",
  "88": "Problem: \nBob is playing with $6$-sided dice. A net of such standard cube is shown below.\n\n[Image]\n\nHe has an unlimited supply of these dice and wants to build a tower by stacking multiple dice on top of each other, while choosing the orientation of each dice. Then he counts the number of visible pips on the faces of the dice.\n\nFor example, the number of visible pips on the tower below is $29$ \u2014 the number visible on the top is $1$, from the south $5$ and $3$, from the west $4$ and $2$, from the north $2$ and $4$ and from the east $3$ and $5$.\n\n[Image]\n\nThe one at the bottom and the two sixes by which the dice are touching are not visible, so they are not counted towards total.\n\nBob also has $t$ favourite integers $x_i$, and for every such integer his goal is to build such a tower that the number of visible pips is exactly $x_i$. For each of Bob's favourite integers determine whether it is possible to build a tower that has exactly that many visible pips.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of favourite integers of Bob. \n\nThe second line contains $t$ space-separated integers $x_i$ ($1 \\leq x_i \\leq 10^{18}$)\u00a0\u2014 Bob's favourite integers.\n\n\n-----Output-----\n\nFor each of Bob's favourite integers, output \"YES\" if it is possible to build the tower, or \"NO\" otherwise (quotes for clarity).\n\n\n-----Example-----\nInput\n4\n29 34 19 38\n\nOutput\nYES\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nThe first example is mentioned in the problem statement.\n\nIn the second example, one can build the tower by flipping the top dice from the previous tower.\n\nIn the third example, one can use a single die that has $5$ on top.\n\nThe fourth example is impossible.\n\n Examples: \nInput: \n4\n29 34 19 38\n\nOutput: \n YES\nYES\nYES\nNO\n\n",
  "89": "Problem: \nMonocarp had a tree which consisted of $n$ vertices and was rooted at vertex $1$. He decided to study BFS (Breadth-first search), so he ran BFS on his tree, starting from the root. BFS can be described by the following pseudocode:a = [] # the order in which vertices were processed\n\nq = Queue()\n\nq.put(1) # place the root at the end of the queue\n\nwhile not q.empty():\n\n    k = q.pop() # retrieve the first vertex from the queue\n\n    a.append(k) # append k to the end of the sequence in which vertices were visited\n\n    for y in g[k]: # g[k] is the list of all children of vertex k, sorted in ascending order\n\n        q.put(y)\n\n\n\nMonocarp was fascinated by BFS so much that, in the end, he lost his tree. Fortunately, he still has a sequence of vertices, in which order vertices were visited by the BFS algorithm (the array a from the pseudocode). Monocarp knows that each vertex was visited exactly once (since they were put and taken from the queue exactly once). Also, he knows that all children of each vertex were viewed in ascending order.\n\nMonocarp knows that there are many trees (in the general case) with the same visiting order $a$, so he doesn't hope to restore his tree. Monocarp is okay with any tree that has minimum height.\n\nThe height of a tree is the maximum depth of the tree's vertices, and the depth of a vertex is the number of edges in the path from the root to it. For example, the depth of vertex $1$ is $0$, since it's the root, and the depth of all root's children are $1$.\n\nHelp Monocarp to find any tree with given visiting order $a$ and minimum height.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of vertices in the tree.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$; $a_i \\neq a_j$; $a_1 = 1$)\u00a0\u2014 the order in which the vertices were visited by the BFS algorithm.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print the minimum possible height of a tree with the given visiting order $a$.\n\n\n-----Example-----\nInput\n3\n4\n1 4 3 2\n2\n1 2\n3\n1 2 3\n\nOutput\n3\n1\n1\n\n\n\n-----Note-----\n\nIn the first test case, there is only one tree with the given visiting order:  [Image] \n\nIn the second test case, there is only one tree with the given visiting order as well:  [Image] \n\nIn the third test case, an optimal tree with the given visiting order is shown below:  [Image]\n\n Examples: \nInput: \n3\n4\n1 4 3 2\n2\n1 2\n3\n1 2 3\n\nOutput: \n 3\n1\n1\n\n",
  "90": "Problem: \nYou are given an array $a$, consisting of $n$ integers.\n\nEach position $i$ ($1 \\le i \\le n$) of the array is either locked or unlocked. You can take the values on the unlocked positions, rearrange them in any order and place them back into the unlocked positions. You are not allowed to remove any values, add the new ones or rearrange the values on the locked positions. You are allowed to leave the values in the same order as they were.\n\nFor example, let $a = [-1, 1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}]$, the underlined positions are locked. You can obtain the following arrays:   $[-1, 1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}]$;  $[-4, -1, \\underline{3}, 2, \\underline{-2}, 1, 1, \\underline{0}]$;  $[1, -1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}]$;  $[1, 2, \\underline{3}, -1, \\underline{-2}, -4, 1, \\underline{0}]$;  and some others. \n\nLet $p$ be a sequence of prefix sums of the array $a$ after the rearrangement. So $p_1 = a_1$, $p_2 = a_1 + a_2$, $p_3 = a_1 + a_2 + a_3$, $\\dots$, $p_n = a_1 + a_2 + \\dots + a_n$.\n\nLet $k$ be the maximum $j$ ($1 \\le j \\le n$) such that $p_j < 0$. If there are no $j$ such that $p_j < 0$, then $k = 0$.\n\nYour goal is to rearrange the values in such a way that $k$ is minimum possible.\n\nOutput the array $a$ after the rearrangement such that the value $k$ for it is minimum possible. If there are multiple answers then print any of them.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of testcases.\n\nThen $t$ testcases follow.\n\nThe first line of each testcase contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array $a$.\n\nThe second line of each testcase contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^5 \\le a_i \\le 10^5$)\u00a0\u2014 the initial array $a$.\n\nThe third line of each testcase contains $n$ integers $l_1, l_2, \\dots, l_n$ ($0 \\le l_i \\le 1$), where $l_i = 0$ means that the position $i$ is unlocked and $l_i = 1$ means that the position $i$ is locked.\n\n\n-----Output-----\n\nPrint $n$ integers\u00a0\u2014 the array $a$ after the rearrangement. Value $k$ (the maximum $j$ such that $p_j < 0$ (or $0$ if there are no such $j$)) should be minimum possible. For each locked position the printed value should be equal to the initial one. The values on the unlocked positions should be an arrangement of the initial ones.\n\nIf there are multiple answers then print any of them.\n\n\n-----Example-----\nInput\n5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n\nOutput\n1 2 3\n2 -3 4 -1\n-8 -6 1 4 4 7 -2\n-4 0 1 6 3\n-1 4 7 -8 10 -1\n\n\n-----Note-----\n\nIn the first testcase you can rearrange all values however you want but any arrangement will result in $k = 0$. For example, for an arrangement $[1, 2, 3]$, $p=[1, 3, 6]$, so there are no $j$ such that $p_j < 0$. Thus, $k = 0$.\n\nIn the second testcase you are not allowed to rearrange any elements. Thus, the printed array should be exactly the same as the initial one.\n\nIn the third testcase the prefix sums for the printed array are $p = [-8, -14, -13, -9, -5, 2, 0]$. The maximum $j$ is $5$, thus $k = 5$. There are no arrangements such that $k < 5$.\n\nIn the fourth testcase $p = [-4, -4, -3, 3, 6]$.\n\nIn the fifth testcase $p = [-1, 3, 10, 2, 12, 11]$.\n\n Examples: \nInput: \n5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n\nOutput: \n 3 2 1 \n2 -3 4 -1 \n-8 4 1 -2 4 7 -6 \n1 0 -4 6 3 \n-1 10 7 4 -8 -1 \n\n",
  "91": "Problem: \nPermutation $p$ is a sequence of integers $p=[p_1, p_2, \\dots, p_n]$, consisting of $n$ distinct (unique) positive integers between $1$ and $n$, inclusive. For example, the following sequences are permutations: $[3, 4, 1, 2]$, $[1]$, $[1, 2]$. The following sequences are not permutations: $[0]$, $[1, 2, 1]$, $[2, 3]$, $[0, 1, 2]$.\n\nThe important key is in the locked box that you need to open. To open the box you need to enter secret code. Secret code is a permutation $p$ of length $n$. \n\nYou don't know this permutation, you only know the array $q$ of prefix maximums of this permutation. Formally:  $q_1=p_1$,  $q_2=\\max(p_1, p_2)$,  $q_3=\\max(p_1, p_2,p_3)$,  ...  $q_n=\\max(p_1, p_2,\\dots,p_n)$. \n\nYou want to construct any possible suitable permutation (i.e. any such permutation, that calculated $q$ for this permutation is equal to the given array).\n\n\n-----Input-----\n\nThe first line contains integer number $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ $(1 \\le n \\le 10^{5})$\u00a0\u2014 the number of elements in the secret code permutation $p$.\n\nThe second line of a test case contains $n$ integers $q_1, q_2, \\dots, q_n$ $(1 \\le q_i \\le n)$\u00a0\u2014 elements of the array $q$ for secret permutation. It is guaranteed that $q_i \\le q_{i+1}$ for all $i$ ($1 \\le i < n$).\n\nThe sum of all values $n$ over all the test cases in the input doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print:  If it's impossible to find such a permutation $p$, print \"-1\" (without quotes).  Otherwise, print $n$ distinct integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$). If there are multiple possible answers, you can print any of them. \n\n\n-----Example-----\nInput\n4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n\nOutput\n1 3 4 5 2 \n-1\n2 1 \n1 \n\n\n\n-----Note-----\n\nIn the first test case of the example answer $[1,3,4,5,2]$ is the only possible answer:  $q_{1} = p_{1} = 1$;  $q_{2} = \\max(p_{1}, p_{2}) = 3$;  $q_{3} = \\max(p_{1}, p_{2}, p_{3}) = 4$;  $q_{4} = \\max(p_{1}, p_{2}, p_{3}, p_{4}) = 5$;  $q_{5} = \\max(p_{1}, p_{2}, p_{3}, p_{4}, p_{5}) = 5$. \n\nIt can be proved that there are no answers for the second test case of the example.\n\n Examples: \nInput: \n4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n\nOutput: \n 1 3 4 5 2 \n-1\n2 1 \n1 \n\n",
  "92": "Problem: \nYou are given two strings of equal length $s$ and $t$ consisting of lowercase Latin letters. You may perform any number (possibly, zero) operations on these strings.\n\nDuring each operation you choose two adjacent characters in any string and assign the value of the first character to the value of the second or vice versa.\n\nFor example, if $s$ is \"acbc\" you can get the following strings in one operation:   \"aabc\" (if you perform $s_2 = s_1$);  \"ccbc\" (if you perform $s_1 = s_2$);  \"accc\" (if you perform $s_3 = s_2$ or $s_3 = s_4$);  \"abbc\" (if you perform $s_2 = s_3$);  \"acbb\" (if you perform $s_4 = s_3$); \n\nNote that you can also apply this operation to the string $t$.\n\nPlease determine whether it is possible to transform $s$ into $t$, applying the operation above any number of times.\n\nNote that you have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 100$)\u00a0\u2014 the number of queries. Each query is represented by two consecutive lines.\n\nThe first line of each query contains the string $s$ ($1 \\le |s| \\le 100$) consisting of lowercase Latin letters.\n\nThe second line of each query contains the string $t$ ($1 \\le |t| \\leq 100$, $|t| = |s|$) consisting of lowercase Latin letters.\n\n\n-----Output-----\n\nFor each query, print \"YES\" if it is possible to make $s$ equal to $t$, and \"NO\" otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n3\nxabb\naabx\ntechnocup\ntechnocup\na\nz\n\nOutput\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first query, you can perform two operations $s_1 = s_2$ (after it $s$ turns into \"aabb\") and $t_4 = t_3$ (after it $t$ turns into \"aabb\"). \n\nIn the second query, the strings are equal initially, so the answer is \"YES\".\n\nIn the third query, you can not make strings $s$ and $t$ equal. Therefore, the answer is \"NO\".\n\n Examples: \nInput: \n3\nxabb\naabx\ntechnocup\ntechnocup\na\nz\n\nOutput: \n YES\nYES\nNO\n\n",
  "93": "Problem: \nSanta has to send presents to the kids. He has a large stack of $n$ presents, numbered from $1$ to $n$; the topmost present has number $a_1$, the next present is $a_2$, and so on; the bottom present has number $a_n$. All numbers are distinct.\n\nSanta has a list of $m$ distinct presents he has to send: $b_1$, $b_2$, ..., $b_m$. He will send them in the order they appear in the list.\n\nTo send a present, Santa has to find it in the stack by removing all presents above it, taking this present and returning all removed presents on top of the stack. So, if there are $k$ presents above the present Santa wants to send, it takes him $2k + 1$ seconds to do it. Fortunately, Santa can speed the whole process up \u2014 when he returns the presents to the stack, he may reorder them as he wishes (only those which were above the present he wanted to take; the presents below cannot be affected in any way).\n\nWhat is the minimum time required to send all of the presents, provided that Santa knows the whole list of presents he has to send and reorders the presents optimally? Santa cannot change the order of presents or interact with the stack of presents in any other way.\n\nYour program has to answer $t$ different test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThen the test cases follow, each represented by three lines.\n\nThe first line contains two integers $n$ and $m$ ($1 \\le m \\le n \\le 10^5$) \u2014 the number of presents in the stack and the number of presents Santa wants to send, respectively.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\le a_i \\le n$, all $a_i$ are unique) \u2014 the order of presents in the stack.\n\nThe third line contains $m$ integers $b_1$, $b_2$, ..., $b_m$ ($1 \\le b_i \\le n$, all $b_i$ are unique) \u2014 the ordered list of presents Santa has to send.\n\nThe sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of seconds which Santa has to spend sending presents, if he reorders the presents optimally each time he returns them into the stack.\n\n\n-----Example-----\nInput\n2\n3 3\n3 1 2\n3 2 1\n7 2\n2 1 7 3 4 5 6\n3 1\n\nOutput\n5\n8\n\n Examples: \nInput: \n2\n3 3\n3 1 2\n3 2 1\n7 2\n2 1 7 3 4 5 6\n3 1\n\nOutput: \n 5\n8\n\n",
  "94": "Problem: \nRedDreamer has an array $a$ consisting of $n$ non-negative integers, and an unlucky integer $T$.\n\nLet's denote the misfortune of array $b$ having length $m$ as $f(b)$ \u2014 the number of pairs of integers $(i, j)$ such that $1 \\le i < j \\le m$ and $b_i + b_j = T$. RedDreamer has to paint each element of $a$ into one of two colors, white and black (for each element, the color is chosen independently), and then create two arrays $c$ and $d$ so that all white elements belong to $c$, and all black elements belong to $d$ (it is possible that one of these two arrays becomes empty). RedDreamer wants to paint the elements in such a way that $f(c) + f(d)$ is minimum possible.\n\nFor example:\n\n  if $n = 6$, $T = 7$ and $a = [1, 2, 3, 4, 5, 6]$, it is possible to paint the $1$-st, the $4$-th and the $5$-th elements white, and all other elements black. So $c = [1, 4, 5]$, $d = [2, 3, 6]$, and $f(c) + f(d) = 0 + 0 = 0$;  if $n = 3$, $T = 6$ and $a = [3, 3, 3]$, it is possible to paint the $1$-st element white, and all other elements black. So $c = [3]$, $d = [3, 3]$, and $f(c) + f(d) = 0 + 1 = 1$. \n\nHelp RedDreamer to paint the array optimally!\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains two integers $n$ and $T$ ($1 \\le n \\le 10^5$, $0 \\le T \\le 10^9$) \u2014 the number of elements in the array and the unlucky integer, respectively. \n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the elements of the array. \n\nThe sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers: $p_1$, $p_2$, ..., $p_n$ (each $p_i$ is either $0$ or $1$) denoting the colors. If $p_i$ is $0$, then $a_i$ is white and belongs to the array $c$, otherwise it is black and belongs to the array $d$.\n\nIf there are multiple answers that minimize the value of $f(c) + f(d)$, print any of them.\n\n\n-----Example-----\nInput\n2\n6 7\n1 2 3 4 5 6\n3 6\n3 3 3\n\nOutput\n1 0 0 1 1 0 \n1 0 0\n\n Examples: \nInput: \n2\n6 7\n1 2 3 4 5 6\n3 6\n3 3 3\n\nOutput: \n 0 0 0 1 1 1 \n1 0 1 \n\n",
  "95": "Problem: \nYou are given a integer $n$ ($n > 0$). Find any integer $s$ which satisfies these conditions, or report that there are no such numbers:\n\nIn the decimal representation of $s$:   $s > 0$,  $s$ consists of $n$ digits,  no digit in $s$ equals $0$,  $s$ is not divisible by any of it's digits. \n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line of the input contains a single integer $t$ ($1 \\leq t \\leq 400$), the number of test cases. The next $t$ lines each describe a test case.\n\nEach test case contains one positive integer $n$ ($1 \\leq n \\leq 10^5$).\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print an integer $s$ which satisfies the conditions described above, or \"-1\" (without quotes), if no such number exists. If there are multiple possible solutions for $s$, print any solution.\n\n\n-----Example-----\nInput\n4\n1\n2\n3\n4\n\nOutput\n-1\n57\n239\n6789\n\n\n\n-----Note-----\n\nIn the first test case, there are no possible solutions for $s$ consisting of one digit, because any such solution is divisible by itself.\n\nFor the second test case, the possible solutions are: $23$, $27$, $29$, $34$, $37$, $38$, $43$, $46$, $47$, $49$, $53$, $54$, $56$, $57$, $58$, $59$, $67$, $68$, $69$, $73$, $74$, $76$, $78$, $79$, $83$, $86$, $87$, $89$, $94$, $97$, and $98$.\n\nFor the third test case, one possible solution is $239$ because $239$ is not divisible by $2$, $3$ or $9$ and has three digits (none of which equals zero).\n\n Examples: \nInput: \n4\n1\n2\n3\n4\n\nOutput: \n -1\n23\n233\n2333\n\n",
  "97": "Problem: \nYour friend Jeff Zebos has been trying to run his new online company, but it's not going very well. He's not getting a lot of sales on his website which he decided to call Azamon. His big problem, you think, is that he's not ranking high enough on the search engines. If only he could rename his products to have better names than his competitors, then he'll be at the top of the search results and will be a millionaire.\n\nAfter doing some research, you find out that search engines only sort their results lexicographically. If your friend could rename his products to lexicographically smaller strings than his competitor's, then he'll be at the top of the rankings!\n\nTo make your strategy less obvious to his competitors, you decide to swap no more than two letters of the product names.\n\nPlease help Jeff to find improved names for his products that are lexicographically smaller than his competitor's!\n\nGiven the string $s$ representing Jeff's product name and the string $c$ representing his competitor's product name, find a way to swap at most one pair of characters in $s$ (that is, find two distinct indices $i$ and $j$ and swap $s_i$ and $s_j$) such that the resulting new name becomes strictly lexicographically smaller than $c$, or determine that it is impossible.\n\nNote: String $a$ is strictly lexicographically smaller than string $b$ if and only if one of the following holds:  $a$ is a proper prefix of $b$, that is, $a$ is a prefix of $b$ such that $a \\neq b$;  There exists an integer $1 \\le i \\le \\min{(|a|, |b|)}$ such that $a_i < b_i$ and $a_j = b_j$ for $1 \\le j < i$. \n\n\n-----Input-----\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 1500$) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nEach test case consists of a single line containing two space-separated strings $s$ and $c$ ($2 \\le |s| \\le 5000, 1 \\le |c| \\le 5000$). The strings $s$ and $c$ consists of uppercase English letters.\n\nIt is guaranteed that the sum of $|s|$ in the input is at most $5000$ and the sum of the $|c|$ in the input is at most $5000$.\n\n\n-----Output-----\n\nFor each test case, output a single line containing a single string, which is either  the new name which is obtained after swapping no more than one pair of characters that is strictly lexicographically smaller than $c$. In case there are many possible such strings, you can output any of them;  three dashes (the string \"---\" without quotes) if it is impossible. \n\n\n-----Example-----\nInput\n3\nAZAMON APPLE\nAZAMON AAAAAAAAAAALIBABA\nAPPLE BANANA\n\nOutput\nAMAZON\n---\nAPPLE\n\n\n\n-----Note-----\n\nIn the first test case, it is possible to swap the second and the fourth letters of the string and the resulting string \"AMAZON\" is lexicographically smaller than \"APPLE\".\n\nIt is impossible to improve the product's name in the second test case and satisfy all conditions.\n\nIn the third test case, it is possible not to swap a pair of characters. The name \"APPLE\" is lexicographically smaller than \"BANANA\". Note that there are other valid answers, e.g., \"APPEL\".\n\n Examples: \nInput: \n3\nAZAMON APPLE\nAZAMON AAAAAAAAAAALIBABA\nAPPLE BANANA\n\nOutput: \n AAZMON\n---\nAEPLP\n\n",
  "98": "Problem: \nYou may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 coder, 1 mathematician and 1 without specialization;  all three teams consist of 1 coder and 2 mathematicians;  no teams can be formed;  no teams can be formed;  one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians.\n\n Examples: \nInput: \n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput: \n 1\n3\n0\n0\n1\n3\n\n",
  "99": "Problem: \nLee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...\n\nThe string $s$ he found is a binary string of length $n$ (i. e. string consists only of 0-s and 1-s).\n\nIn one move he can choose two consecutive characters $s_i$ and $s_{i+1}$, and if $s_i$ is 1 and $s_{i + 1}$ is 0, he can erase exactly one of them (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.\n\nLee can make an arbitrary number of moves (possibly zero) and he'd like to make the string $s$ as clean as possible. He thinks for two different strings $x$ and $y$, the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner.\n\nNow you should answer $t$ test cases: for the $i$-th test case, print the cleanest possible string that Lee can get by doing some number of moves.\n\nSmall reminder: if we have two strings $x$ and $y$ of the same length then $x$ is lexicographically smaller than $y$ if there is a position $i$ such that $x_1 = y_1$, $x_2 = y_2$,..., $x_{i - 1} = y_{i - 1}$ and $x_i < y_i$.\n\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases. \n\nNext $2t$ lines contain test cases\u00a0\u2014 one per two lines.\n\nThe first line of each test case contains the integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of the string $s$.\n\nThe second line contains the binary string $s$. The string $s$ is a string of length $n$ which consists only of zeroes and ones.\n\nIt's guaranteed that sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nPrint $t$ answers\u00a0\u2014 one per test case.\n\nThe answer to the $i$-th test case is the cleanest string Lee can get after doing some number of moves (possibly zero).\n\n\n-----Example-----\nInput\n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n\nOutput\n0001111111\n001\n01\n0\n1\n\n\n\n-----Note-----\n\nIn the first test case, Lee can't perform any moves.\n\nIn the second test case, Lee should erase $s_2$.\n\nIn the third test case, Lee can make moves, for example, in the following order: 11001101\u00a0$\\rightarrow$ 1100101\u00a0$\\rightarrow$ 110101\u00a0$\\rightarrow$ 10101\u00a0$\\rightarrow$ 1101\u00a0$\\rightarrow$ 101\u00a0$\\rightarrow$ 01.\n\n Examples: \nInput: \n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n\nOutput: \n 0001111111\n001\n01\n0\n1\n\n",
  "100": "Problem: \nYou have three piles of candies: red, green and blue candies:  the first pile contains only red candies and there are $r$ candies in it,  the second pile contains only green candies and there are $g$ candies in it,  the third pile contains only blue candies and there are $b$ candies in it. \n\nEach day Tanya eats exactly two candies of different colors. She is free to choose the colors of eaten candies: the only restriction that she can't eat two candies of the same color in a day.\n\nFind the maximal number of days Tanya can eat candies? Each day she needs to eat exactly two candies.\n\n\n-----Input-----\n\nThe first line contains integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is given as a separate line of the input. It contains three integers $r$, $g$ and $b$ ($1 \\le r, g, b \\le 10^8$) \u2014 the number of red, green and blue candies, respectively.\n\n\n-----Output-----\n\nPrint $t$ integers: the $i$-th printed integer is the answer on the $i$-th test case in the input.\n\n\n-----Example-----\nInput\n6\n1 1 1\n1 2 1\n4 1 1\n7 4 10\n8 1 4\n8 2 8\n\nOutput\n1\n2\n2\n10\n5\n9\n\n\n\n-----Note-----\n\nIn the first example, Tanya can eat candies for one day only. She can eat any pair of candies this day because all of them have different colors.\n\nIn the second example, Tanya can eat candies for two days. For example, she can eat red and green candies on the first day, and green and blue candies on the second day.\n\nIn the third example, Tanya can eat candies for two days. For example, she can eat red and green candies on the first day, and red and blue candies on the second day. Note, that two red candies will remain uneaten.\n\n Examples: \nInput: \n6\n1 1 1\n1 2 1\n4 1 1\n7 4 10\n8 1 4\n8 2 8\n\nOutput: \n 1\n2\n2\n10\n5\n9\n\n",
  "101": "Problem: \nPolycarp lives on the coordinate axis $Ox$ and travels from the point $x=a$ to $x=b$. It moves uniformly rectilinearly at a speed of one unit of distance per minute.\n\nOn the axis $Ox$ at the point $x=c$ the base station of the mobile operator is placed. It is known that the radius of its coverage is $r$. Thus, if Polycarp is at a distance less than or equal to $r$ from the point $x=c$, then he is in the network coverage area, otherwise\u00a0\u2014 no. The base station can be located both on the route of Polycarp and outside it.\n\nPrint the time in minutes during which Polycarp will not be in the coverage area of the network, with a rectilinear uniform movement from $x=a$ to $x=b$. His speed\u00a0\u2014 one unit of distance per minute.\n\n\n-----Input-----\n\nThe first line contains a positive integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. In the following lines are written $t$ test cases.\n\nThe description of each test case is one line, which contains four integers $a$, $b$, $c$ and $r$ ($-10^8 \\le a,b,c \\le 10^8$, $0 \\le r \\le 10^8$)\u00a0\u2014 the coordinates of the starting and ending points of the path, the base station, and its coverage radius, respectively.\n\nAny of the numbers $a$, $b$ and $c$ can be equal (either any pair or all three numbers). The base station can be located both on the route of Polycarp and outside it.\n\n\n-----Output-----\n\nPrint $t$ numbers\u00a0\u2014 answers to given test cases in the order they are written in the test. Each answer is an integer\u00a0\u2014 the number of minutes during which Polycarp will be unavailable during his movement.\n\n\n-----Example-----\nInput\n9\n1 10 7 1\n3 3 3 0\n8 2 10 4\n8 2 10 100\n-10 20 -17 2\n-3 2 2 0\n-3 1 2 0\n2 3 2 3\n-1 3 -2 2\n\nOutput\n7\n0\n4\n0\n30\n5\n4\n0\n3\n\n\n\n-----Note-----\n\nThe following picture illustrates the first test case.  [Image] Polycarp goes from $1$ to $10$. The yellow area shows the coverage area of the station with a radius of coverage of $1$, which is located at the point of $7$. The green area shows a part of the path when Polycarp is out of coverage area.\n\n Examples: \nInput: \n9\n1 10 7 1\n3 3 3 0\n8 2 10 4\n8 2 10 100\n-10 20 -17 2\n-3 2 2 0\n-3 1 2 0\n2 3 2 3\n-1 3 -2 2\n\nOutput: \n 7\n0\n4\n0\n30\n5\n4\n0\n3\n\n",
  "102": "Problem: \nHooray! Polycarp turned $n$ years old! The Technocup Team sincerely congratulates Polycarp!\n\nPolycarp celebrated all of his $n$ birthdays: from the $1$-th to the $n$-th. At the moment, he is wondering: how many times he turned beautiful number of years?\n\nAccording to Polycarp, a positive integer is beautiful if it consists of only one digit repeated one or more times. For example, the following numbers are beautiful: $1$, $77$, $777$, $44$ and $999999$. The following numbers are not beautiful: $12$, $11110$, $6969$ and $987654321$.\n\nOf course, Polycarpus uses the decimal numeral system (i.e. radix is 10).\n\nHelp Polycarpus to find the number of numbers from $1$ to $n$ (inclusive) that are beautiful.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case consists of one line, which contains a positive integer $n$ ($1 \\le n \\le 10^9$) \u2014 how many years Polycarp has turned.\n\n\n-----Output-----\n\nPrint $t$ integers \u2014 the answers to the given test cases in the order they are written in the test. Each answer is an integer: the number of beautiful years between $1$ and $n$, inclusive.\n\n\n-----Example-----\nInput\n6\n18\n1\n9\n100500\n33\n1000000000\n\nOutput\n10\n1\n9\n45\n12\n81\n\n\n\n-----Note-----\n\nIn the first test case of the example beautiful years are $1$, $2$, $3$, $4$, $5$, $6$, $7$, $8$, $9$ and $11$.\n\n Examples: \nInput: \n6\n18\n1\n9\n100500\n33\n1000000000\n\nOutput: \n 10\n1\n9\n45\n12\n81\n\n",
  "103": "Problem: \nAshish and Vivek play a game on a matrix consisting of $n$ rows and $m$ columns, where they take turns claiming cells. Unclaimed cells are represented by $0$, while claimed cells are represented by $1$. The initial state of the matrix is given. There can be some claimed cells in the initial state.\n\nIn each turn, a player must claim a cell. A cell may be claimed if it is unclaimed and does not share a row or column with any other already claimed cells. When a player is unable to make a move, he loses and the game ends.\n\nIf Ashish and Vivek take turns to move and Ashish goes first, determine the winner of the game if both of them are playing optimally.\n\nOptimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves.\n\n\n-----Input-----\n\nThe first line consists of a single integer $t$ $(1 \\le t \\le 50)$\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case consists of two space-separated integers $n$, $m$ $(1 \\le n, m \\le 50)$\u00a0\u2014 the number of rows and columns in the matrix.\n\nThe following $n$ lines consist of $m$ integers each, the $j$-th integer on the $i$-th line denoting $a_{i,j}$ $(a_{i,j} \\in \\{0, 1\\})$.\n\n\n-----Output-----\n\nFor each test case if Ashish wins the game print \"Ashish\" otherwise print \"Vivek\" (without quotes).\n\n\n-----Example-----\nInput\n4\n2 2\n0 0\n0 0\n2 2\n0 0\n0 1\n2 3\n1 0 1\n1 1 0\n3 3\n1 0 0\n0 0 0\n1 0 0\n\nOutput\nVivek\nAshish\nVivek\nAshish\n\n\n\n-----Note-----\n\nFor the first case: One possible scenario could be: Ashish claims cell $(1, 1)$, Vivek then claims cell $(2, 2)$. Ashish can neither claim cell $(1, 2)$, nor cell $(2, 1)$ as cells $(1, 1)$ and $(2, 2)$ are already claimed. Thus Ashish loses. It can be shown that no matter what Ashish plays in this case, Vivek will win. \n\nFor the second case: Ashish claims cell $(1, 1)$, the only cell that can be claimed in the first move. After that Vivek has no moves left.\n\nFor the third case: Ashish cannot make a move, so Vivek wins.\n\nFor the fourth case: If Ashish claims cell $(2, 3)$, Vivek will have no moves left.\n\n Examples: \nInput: \n4\n2 2\n0 0\n0 0\n2 2\n0 0\n0 1\n2 3\n1 0 1\n1 1 0\n3 3\n1 0 0\n0 0 0\n1 0 0\n\nOutput: \n Vivek\nAshish\nVivek\nAshish\n\n",
  "105": "Problem: \n\u2014 Hey folks, how do you like this problem?\n\n\u2014 That'll do it. \n\nBThero is a powerful magician. He has got $n$ piles of candies, the $i$-th pile initially contains $a_i$ candies. BThero can cast a copy-paste spell as follows:   He chooses two piles $(i, j)$ such that $1 \\le i, j \\le n$ and $i \\ne j$.  All candies from pile $i$ are copied into pile $j$. Formally, the operation $a_j := a_j + a_i$ is performed. \n\nBThero can cast this spell any number of times he wants to \u2014 but unfortunately, if some pile contains strictly more than $k$ candies, he loses his magic power. What is the maximum number of times BThero can cast the spell without losing his power?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 500$) \u2014 the number of test cases.\n\nEach test case consists of two lines:   the first line contains two integers $n$ and $k$ ($2 \\le n \\le 1000$, $2 \\le k \\le 10^4$);  the second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\le a_i \\le k$). \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $1000$, and the sum of $k$ over all test cases does not exceed $10^4$.\n\n\n-----Output-----\n\nFor each test case, print one integer \u2014 the maximum number of times BThero can cast the spell without losing his magic power.\n\n\n-----Example-----\nInput\n3\n2 2\n1 1\n3 5\n1 2 3\n3 7\n3 2 2\n\nOutput\n1\n5\n4\n\n\n\n-----Note-----\n\nIn the first test case we get either $a = [1, 2]$ or $a = [2, 1]$ after casting the spell for the first time, and it is impossible to cast it again.\n\n Examples: \nInput: \n3\n2 2\n1 1\n3 5\n1 2 3\n3 7\n3 2 2\n\nOutput: \n 1\n5\n4\n\n",
  "106": "Problem: \nThere are $n$ segments $[l_i, r_i]$ for $1 \\le i \\le n$. You should divide all segments into two non-empty groups in such way that there is no pair of segments from different groups which have at least one common point, or say that it's impossible to do it. Each segment should belong to exactly one group.\n\nTo optimize testing process you will be given multitest.\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 50000$) \u2014 the number of queries. Each query contains description of the set of segments. Queries are independent.\n\nFirst line of each query contains single integer $n$ ($2 \\le n \\le 10^5$) \u2014 number of segments. It is guaranteed that $\\sum{n}$ over all queries does not exceed $10^5$.\n\nThe next $n$ lines contains two integers $l_i$, $r_i$ per line ($1 \\le l_i \\le r_i \\le 2 \\cdot 10^5$) \u2014 the $i$-th segment.\n\n\n-----Output-----\n\nFor each query print $n$ integers $t_1, t_2, \\dots, t_n$ ($t_i \\in \\{1, 2\\}$) \u2014 for each segment (in the same order as in the input) $t_i$ equals $1$ if the $i$-th segment will belongs to the first group and $2$ otherwise.\n\nIf there are multiple answers, you can print any of them. If there is no answer, print $-1$.\n\n\n-----Example-----\nInput\n3\n2\n5 5\n2 3\n3\n3 5\n2 3\n2 3\n3\n3 3\n4 4\n5 5\n\nOutput\n2 1 \n-1\n1 1 2 \n\n\n\n-----Note-----\n\nIn the first query the first and the second segments should be in different groups, but exact numbers don't matter.\n\nIn the second query the third segment intersects with the first and the second segments, so they should be in the same group, but then the other group becomes empty, so answer is $-1$.\n\nIn the third query we can distribute segments in any way that makes groups non-empty, so any answer of $6$ possible is correct.\n\n Examples: \nInput: \n3\n2\n5 5\n2 3\n3\n3 5\n2 3\n2 3\n3\n3 3\n4 4\n5 5\n\nOutput: \n 2 1 \n-1\n1 1 2 \n\n",
  "107": "Problem: \nChaneka has a hobby of playing with animal toys. Every toy has a different fun value, a real number. Chaneka has four boxes to store the toys with specification:   The first box stores toys with fun values in range of $(-\\infty,-1]$.  The second box stores toys with fun values in range of $(-1, 0)$.  The third box stores toys with fun values in range of $(0, 1)$.  The fourth box stores toys with fun value in range of $[1, \\infty)$. \n\nChaneka has $A$, $B$, $C$, $D$ toys in the first, second, third, and fourth box, respectively. One day she decides that she only wants one toy, a super toy. So she begins to create this super toy by sewing all the toys she has.\n\nWhile the number of toys Chaneka has is more than 1, she takes two different toys randomly and then sews them together, creating a new toy. The fun value of this new toy is equal to the multiplication of fun values of the sewn toys. She then puts this new toy in the appropriate box. She repeats this process until she only has one toy. This last toy is the super toy, and the box that stores this toy is the special box.\n\nAs an observer, you only know the number of toys in each box initially but do not know their fun values. You also don't see the sequence of Chaneka's sewing. Determine which boxes can be the special box after Chaneka found her super toy.\n\n\n-----Input-----\n\nThe first line has an integer $T$ $(1 \\le T \\le 5 \\cdot 10^4)$, the number of test cases.\n\nEvery case contains a line with four space-separated integers $A$ $B$ $C$ $D$ $(0 \\le A, B, C, D \\le 10^6, A + B + C + D > 0)$, which denotes the number of toys in the first, second, third, and fourth box, respectively.\n\n\n-----Output-----\n\nFor each case, print four space-separated strings. Each string represents the possibility that the first, second, third, and fourth box can be the special box from left to right.\n\nFor each box, print \"Ya\" (Without quotes, Indonesian for yes) if that box can be the special box. Print \"Tidak\" (Without quotes, Indonesian for No) otherwise.\n\n\n-----Example-----\nInput\n2\n1 2 0 1\n0 1 0 0\n\nOutput\nYa Ya Tidak Tidak\nTidak Ya Tidak Tidak\n\n\n\n-----Note-----\n\nFor the first case, here is a scenario where the first box is the special box:   The first box had toys with fun values $\\{-3\\}$.  The second box had toys with fun values $\\{ -0.5, -0.5 \\}$  The fourth box had toys with fun values $\\{ 3 \\}$ \n\nThe sewing sequence:   Chaneka sews the toy with fun $-0.5$ and $-0.5$ to a toy with fun $0.25$ and then put it in the third box.  Chaneka sews the toy with fun $-3$ and $0.25$ to a toy with fun $-0.75$ and then put it in the second box.  Chaneka sews the toy with fun $-0.75$ and $3$ to a toy with fun $-1.25$ and then put it in the first box, which then became the special box. \n\nHere is a scenario where the second box ends up being the special box:   The first box had toys with fun values $\\{-3\\}$  The second box had toys with fun values $\\{ -0.33, -0.25 \\}$.  The fourth box had toys with fun values $\\{ 3 \\}$. \n\nThe sewing sequence:   Chaneka sews the toy with fun $-3$ and $-0.33$ to a toy with fun $0.99$ and then put it in the third box.  Chaneka sews the toy with fun $0.99$ and $3$ to a toy with fun $2.97$ and then put in it the fourth box.  Chaneka sews the toy with fun $2.97$ and $-0.25$ to a toy with fun $-0.7425$ and then put it in the second box, which then became the special box.  There is only one toy for the second case, so Chaneka does not have to sew anything because that toy, by definition, is the super toy.\n\n Examples: \nInput: \n2\n1 2 0 1\n0 1 0 0\n\nOutput: \n Ya Ya Tidak Tidak\nTidak Ya Tidak Tidak\n\n",
  "108": "Problem: \nYou're given an array $a_1, \\ldots, a_n$ of $n$ non-negative integers.\n\nLet's call it sharpened if and only if there exists an integer $1 \\le k \\le n$ such that $a_1 < a_2 < \\ldots < a_k$ and $a_k > a_{k+1} > \\ldots > a_n$. In particular, any strictly increasing or strictly decreasing array is sharpened. For example:  The arrays $[4]$, $[0, 1]$, $[12, 10, 8]$ and $[3, 11, 15, 9, 7, 4]$ are sharpened;  The arrays $[2, 8, 2, 8, 6, 5]$, $[0, 1, 1, 0]$ and $[2, 5, 6, 9, 8, 8]$ are not sharpened. \n\nYou can do the following operation as many times as you want: choose any strictly positive element of the array, and decrease it by one. Formally, you can choose any $i$ ($1 \\le i \\le n$) such that $a_i>0$ and assign $a_i := a_i - 1$.\n\nTell if it's possible to make the given array sharpened using some number (possibly zero) of these operations.\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 15\\ 000$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\n\nThe second line of each test case contains a sequence of $n$ non-negative integers $a_1, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output a single line containing \"Yes\" (without quotes) if it's possible to make the given array sharpened using the described operations, or \"No\" (without quotes) otherwise.\n\n\n-----Example-----\nInput\n10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n\nOutput\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n\n\n\n-----Note-----\n\nIn the first and the second test case of the first test, the given array is already sharpened.\n\nIn the third test case of the first test, we can transform the array into $[3, 11, 15, 9, 7, 4]$ (decrease the first element $97$ times and decrease the last element $4$ times). It is sharpened because $3 < 11 < 15$ and $15 > 9 > 7 > 4$.\n\nIn the fourth test case of the first test, it's impossible to make the given array sharpened.\n\n Examples: \nInput: \n10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n\nOutput: \n Yes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n\n",
  "110": "Problem: \nOn February 14 Denis decided to give Valentine to Nastya and did not come up with anything better than to draw a huge red heart on the door of the length $k$ ($k \\ge 3$). Nastya was very confused by this present, so she decided to break the door, throwing it on the mountains.\n\nMountains are described by a sequence of heights $a_1, a_2, \\dots, a_n$ in order from left to right ($k \\le n$). It is guaranteed that neighboring heights are not equal to each other (that is, $a_i \\ne a_{i+1}$ for all $i$ from $1$ to $n-1$).\n\nPeaks of mountains on the segment $[l,r]$ (from $l$ to $r$) are called indexes $i$ such that $l < i < r$, $a_{i - 1} < a_i$ and $a_i > a_{i + 1}$. It is worth noting that the boundary indexes $l$ and $r$ for the segment are not peaks. For example, if $n=8$ and $a=[3,1,4,1,5,9,2,6]$, then the segment $[1,8]$ has only two peaks (with indexes $3$ and $6$), and there are no peaks on the segment $[3, 6]$.\n\nTo break the door, Nastya throws it to a segment $[l,l+k-1]$ of consecutive mountains of length $k$ ($1 \\le l \\le n-k+1$). When the door touches the peaks of the mountains, it breaks into two parts, after that these parts will continue to fall in different halves and also break into pieces when touching the peaks of the mountains, and so on. Formally, the number of parts that the door will break into will be equal to $p+1$, where $p$ is the number of peaks on the segment $[l,l+k-1]$.\n\nNastya wants to break it into as many pieces as possible. Help her choose such a segment of mountains $[l, l+k-1]$ that the number of peaks on it is maximum. If there are several optimal segments, Nastya wants to find one for which the value $l$ is minimal.\n\nFormally, you need to choose a segment of mountains $[l, l+k-1]$ that has the maximum number of peaks. Among all such segments, you need to find the segment that has the minimum possible value $l$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 10^4$) \u00a0\u2014 the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of each test case contains two integers $n$ and $k$ ($3 \\leq k \\leq n \\leq 2 \\cdot 10^5$) \u00a0\u2014 the number of mountains and the length of the door.\n\nThe second line of the input data set contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\leq a_i \\leq 10 ^ 9$, $a_i \\neq a_{i + 1}$) \u00a0\u2014 the heights of mountains.\n\nIt is guaranteed that the sum of $n$ over all the test cases will not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, output two integers $t$ and $l$ \u00a0\u2014 the maximum number of parts that the door can split into, and the left border of the segment of length $k$ that the door should be reset to.\n\n\n-----Example-----\nInput\n5\n8 6\n1 2 4 1 2 4 1 2\n5 3\n3 2 3 2 1\n10 4\n4 3 4 3 2 3 2 1 0 1\n15 7\n3 7 4 8 2 3 4 5 21 2 3 4 2 1 3\n7 5\n1 2 3 4 5 6 1\n\nOutput\n3 2\n2 2\n2 1\n3 1\n2 3\n\n\n\n-----Note-----\n\nIn the first example, you need to select a segment of mountains from $2$ to $7$. In this segment, the indexes $3$ and $6$ are peaks, so the answer is $3$ (only $2$ peaks, so the door will break into $3$ parts). It is not difficult to notice that the mountain segments $[1, 6]$ and $[3, 8]$ are not suitable since they only have a $1$ peak (for the first segment, the $6$ index is not a peak, and for the second segment, the $3$ index is not a peak).\n\nIn the second example, you need to select a segment of mountains from $2$ to $4$. In this segment, the index $3$ is a peak, so the answer is $2$ (only $1$ peak, so the door will break into $2$ parts).\n\nIn the third example, you need to select a segment of mountains from $1$ to $4$. In this segment, the index $3$ is a peak, so the answer is $2$ (only $1$ peak, so the door will break into $2$ parts). You can see that on the segments $[2, 5]$, $[4, 7]$ and $[5, 8]$ the number of peaks is also $1$, but these segments have a left border greater than the segment $[1, 4]$, so they are not the correct answer.\n\n Examples: \nInput: \n5\n8 6\n1 2 4 1 2 4 1 2\n5 3\n3 2 3 2 1\n10 4\n4 3 4 3 2 3 2 1 0 1\n15 7\n3 7 4 8 2 3 4 5 21 2 3 4 2 1 3\n7 5\n1 2 3 4 5 6 1\n\nOutput: \n 3 2\n2 2\n2 1\n3 1\n2 3\n\n",
  "114": "Problem: \nYou play a computer game. In this game, you lead a party of $m$ heroes, and you have to clear a dungeon with $n$ monsters. Each monster is characterized by its power $a_i$. Each hero is characterized by his power $p_i$ and endurance $s_i$.\n\nThe heroes clear the dungeon day by day. In the beginning of each day, you choose a hero (exactly one) who is going to enter the dungeon this day.\n\nWhen the hero enters the dungeon, he is challenged by the first monster which was not defeated during the previous days (so, if the heroes have already defeated $k$ monsters, the hero fights with the monster $k + 1$). When the hero fights the monster, there are two possible outcomes:\n\n  if the monster's power is strictly greater than the hero's power, the hero retreats from the dungeon. The current day ends;  otherwise, the monster is defeated. \n\nAfter defeating a monster, the hero either continues fighting with the next monster or leaves the dungeon. He leaves the dungeon either if he has already defeated the number of monsters equal to his endurance during this day (so, the $i$-th hero cannot defeat more than $s_i$ monsters during each day), or if all monsters are defeated \u2014 otherwise, he fights with the next monster. When the hero leaves the dungeon, the current day ends.\n\nYour goal is to defeat the last monster. What is the minimum number of days that you need to achieve your goal? Each day you have to use exactly one hero; it is possible that some heroes don't fight the monsters at all. Each hero can be used arbitrary number of times.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^5$) \u2014 the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of monsters in the dungeon.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the power of the $i$-th monster.\n\nThe third line contains one integer $m$ ($1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of heroes in your party.\n\nThen $m$ lines follow, each describing a hero. Each line contains two integers $p_i$ and $s_i$ ($1 \\le p_i \\le 10^9$, $1 \\le s_i \\le n$) \u2014 the power and the endurance of the $i$-th hero.\n\nIt is guaranteed that the sum of $n + m$ over all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of days you have to spend to defeat all of the monsters (or $-1$ if it is impossible).\n\n\n-----Example-----\nInput\n2\n6\n2 3 11 14 1 8\n2\n3 2\n100 1\n5\n3 5 100 2 3\n2\n30 5\n90 1\n\nOutput\n5\n-1\n\n Examples: \nInput: \n2\n6\n2 3 11 14 1 8\n2\n3 2\n100 1\n5\n3 5 100 2 3\n2\n30 5\n90 1\n\nOutput: \n 5\n-1\n\n",
  "116": "Problem: \nLet's call an array $a_1, a_2, \\dots, a_m$ of nonnegative integer numbers good if $a_1 + a_2 + \\dots + a_m = 2\\cdot(a_1 \\oplus a_2 \\oplus \\dots \\oplus a_m)$, where $\\oplus$ denotes the bitwise XOR operation.\n\nFor example, array $[1, 2, 3, 6]$ is good, as $1 + 2 + 3 + 6 = 12 = 2\\cdot 6 = 2\\cdot (1\\oplus 2 \\oplus 3 \\oplus 6)$. At the same time, array $[1, 2, 1, 3]$ isn't good, as $1 + 2 + 1 + 3 = 7 \\neq 2\\cdot 1 = 2\\cdot(1\\oplus 2 \\oplus 1 \\oplus 3)$.\n\nYou are given an array of length $n$: $a_1, a_2, \\dots, a_n$. Append at most $3$ elements to it to make it good. Appended elements don't have to be different. It can be shown that the solution always exists under the given constraints. If there are different solutions, you are allowed to output any of them. Note that you don't have to minimize the number of added elements!. So, if an array is good already you are allowed to not append elements.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10\\,000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ $(1\\le n \\le 10^5)$\u00a0\u2014 the size of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output two lines.\n\nIn the first line, output a single integer $s$ ($0\\le s\\le 3$)\u00a0\u2014 the number of elements you want to append.\n\nIn the second line, output $s$ integers $b_1, \\dots, b_s$ ($0\\le b_i \\le 10^{18}$)\u00a0\u2014 the elements you want to append to the array.\n\nIf there are different solutions, you are allowed to output any of them.\n\n\n-----Example-----\nInput\n3\n4\n1 2 3 6\n1\n8\n2\n1 1\n\nOutput\n0\n\n2\n4 4\n3\n2 6 2\n\n\n\n-----Note-----\n\nIn the first test case of the example, the sum of all numbers is $12$, and their $\\oplus$ is $6$, so the condition is already satisfied.\n\nIn the second test case of the example, after adding $4, 4$, the array becomes $[8, 4, 4]$. The sum of numbers in it is $16$, $\\oplus$ of numbers in it is $8$.\n\n Examples: \nInput: \n3\n4\n1 2 3 6\n1\n8\n2\n1 1\n\nOutput: \n 0\n\n2\n4 4\n3\n2 2 6\n\n",
  "117": "Problem: \nAll techniques in the ninja world consist of hand seals. At the moment Naruto is learning a new technique, which consists of $n\\cdot m$ different seals, denoted by distinct numbers. All of them were written in an $n\\times m$ table.\n\nThe table is lost now. Naruto managed to remember elements of each row from left to right, and elements of each column from top to bottom, but he doesn't remember the order of rows and columns. Please restore the table consistent with this data so that Naruto will be able to learn the new technique.\n\n\n-----Input-----\n\nThe first line of the input contains the only integer $t$ ($1\\leq t\\leq 100\\,000$) denoting the number of test cases. Their descriptions follow.\n\nThe first line of each test case description consists of two space-separated integers $n$ and $m$ ($1 \\leq n, m \\leq 500$) standing for the number of rows and columns in the table, respectively. All hand seals are encoded by the positive integers from $1$ to $n\\cdot m$.\n\nThe following $n$ lines contain $m$ space separated integers each, denoting elements of an arbitrary row in the table left to right.\n\nThe following $m$ lines contain $n$ space separated integers each, denoting elements of an arbitrary column in the table top to bottom.\n\nSum of $nm$ over all test cases does not exceed $250\\,000$. It is guaranteed that each row occurs in the input exactly once, as well as each column. It is also guaranteed that each number from $1$ to $nm$ occurs exactly once in all rows, as well as in all columns. Finally, it is guaranteed that a table consistent with the input exists.\n\n\n-----Output-----\n\nFor each test case, output $n$ lines with $m$ space-separated integers each, denoting the restored table. One can show that the answer is always unique.\n\n\n-----Example-----\nInput\n2\n2 3\n6 5 4\n1 2 3\n1 6\n2 5\n3 4\n3 1\n2\n3\n1\n3 1 2\n\nOutput\n1 2 3 \n6 5 4 \n3 \n1 \n2 \n\n\n\n-----Note-----\n\nConsider the first test case. The matrix is $2 \\times 3$. You are given the rows and columns in arbitrary order.\n\nOne of the rows is $[6, 5, 4]$. One of the rows is $[1, 2, 3]$.\n\nOne of the columns is $[1, 6]$. One of the columns is $[2, 5]$. One of the columns is $[3, 4]$.\n\nYou are to reconstruct the matrix. The answer is given in the output.\n\n Examples: \nInput: \n2\n2 3\n6 5 4\n1 2 3\n1 6\n2 5\n3 4\n3 1\n2\n3\n1\n3 1 2\n\nOutput: \n 1 2 3 \n6 5 4 \n3 \n1 \n2 \n\n",
  "118": "Problem: \nThere are $n$ programmers that you want to split into several non-empty teams. The skill of the $i$-th programmer is $a_i$. You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least $x$.\n\nEach programmer should belong to at most one team. Some programmers may be left without a team.\n\nCalculate the maximum number of teams that you can assemble.\n\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 10^5; 1 \\le x \\le 10^9$)\u00a0\u2014 the number of programmers and the restriction of team skill respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the skill of the $i$-th programmer.\n\nThe sum of $n$ over all inputs does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the maximum number of teams that you can assemble. \n\n\n-----Example-----\nInput\n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput\n2\n1\n0\n\n Examples: \nInput: \n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput: \n 2\n1\n0\n\n",
  "119": "Problem: \nAssume that you have $k$ one-dimensional segments $s_1, s_2, \\dots s_k$ (each segment is denoted by two integers \u2014 its endpoints). Then you can build the following graph on these segments. The graph consists of $k$ vertexes, and there is an edge between the $i$-th and the $j$-th vertexes ($i \\neq j$) if and only if the segments $s_i$ and $s_j$ intersect (there exists at least one point that belongs to both of them).\n\nFor example, if $s_1 = [1, 6], s_2 = [8, 20], s_3 = [4, 10], s_4 = [2, 13], s_5 = [17, 18]$, then the resulting graph is the following: [Image] \n\nA tree of size $m$ is good if it is possible to choose $m$ one-dimensional segments so that the graph built on these segments coincides with this tree.\n\nYou are given a tree, you have to find its good subtree with maximum possible size. Recall that a subtree is a connected subgraph of a tree.\n\nNote that you have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 15 \\cdot 10^4$) \u2014 the number of the queries. \n\nThe first line of each query contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of vertices in the tree.\n\nEach of the next $n - 1$ lines contains two integers $x$ and $y$ ($1 \\le x, y \\le n$) denoting an edge between vertices $x$ and $y$. It is guaranteed that the given graph is a tree.\n\nIt is guaranteed that the sum of all $n$ does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each query print one integer \u2014 the maximum size of a good subtree of the given tree.\n\n\n-----Example-----\nInput\n1\n10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first query there is a good subtree of size $8$. The vertices belonging to this subtree are ${9, 4, 10, 2, 5, 1, 6, 3}$.\n\n Examples: \nInput: \n1\n10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n\nOutput: \n 8\n\n",
  "120": "Problem: \nAyoub thinks that he is a very smart person, so he created a function $f(s)$, where $s$ is a binary string (a string which contains only symbols \"0\" and \"1\"). The function $f(s)$ is equal to the number of substrings in the string $s$ that contains at least one symbol, that is equal to \"1\".\n\nMore formally, $f(s)$ is equal to the number of pairs of integers $(l, r)$, such that $1 \\leq l \\leq r \\leq |s|$ (where $|s|$ is equal to the length of string $s$), such that at least one of the symbols $s_l, s_{l+1}, \\ldots, s_r$ is equal to \"1\". \n\nFor example, if $s = $\"01010\" then $f(s) = 12$, because there are $12$ such pairs $(l, r)$: $(1, 2), (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 4), (4, 5)$.\n\nAyoub also thinks that he is smarter than Mahmoud so he gave him two integers $n$ and $m$ and asked him this problem. For all binary strings $s$ of length $n$ which contains exactly $m$ symbols equal to \"1\", find the maximum value of $f(s)$.\n\nMahmoud couldn't solve the problem so he asked you for help. Can you help him? \n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe only line for each test case contains two integers $n$, $m$ ($1 \\leq n \\leq 10^{9}$, $0 \\leq m \\leq n$)\u00a0\u2014 the length of the string and the number of symbols equal to \"1\" in it.\n\n\n-----Output-----\n\nFor every test case print one integer number\u00a0\u2014 the maximum value of $f(s)$ over all strings $s$ of length $n$, which has exactly $m$ symbols, equal to \"1\".\n\n\n-----Example-----\nInput\n5\n3 1\n3 2\n3 3\n4 0\n5 2\n\nOutput\n4\n5\n6\n0\n12\n\n\n\n-----Note-----\n\nIn the first test case, there exists only $3$ strings of length $3$, which has exactly $1$ symbol, equal to \"1\". These strings are: $s_1 = $\"100\", $s_2 = $\"010\", $s_3 = $\"001\". The values of $f$ for them are: $f(s_1) = 3, f(s_2) = 4, f(s_3) = 3$, so the maximum value is $4$ and the answer is $4$.\n\nIn the second test case, the string $s$ with the maximum value is \"101\".\n\nIn the third test case, the string $s$ with the maximum value is \"111\".\n\nIn the fourth test case, the only string $s$ of length $4$, which has exactly $0$ symbols, equal to \"1\" is \"0000\" and the value of $f$ for that string is $0$, so the answer is $0$.\n\nIn the fifth test case, the string $s$ with the maximum value is \"01010\" and it is described as an example in the problem statement.\n\n Examples: \nInput: \n5\n3 1\n3 2\n3 3\n4 0\n5 2\n\nOutput: \n 4\n5\n6\n0\n12\n\n",
  "121": "Problem: \nReminder: the median of the array $[a_1, a_2, \\dots, a_{2k+1}]$ of odd number of elements is defined as follows: let $[b_1, b_2, \\dots, b_{2k+1}]$ be the elements of the array in the sorted order. Then median of this array is equal to $b_{k+1}$.\n\nThere are $2n$ students, the $i$-th student has skill level $a_i$. It's not guaranteed that all skill levels are distinct.\n\nLet's define skill level of a class as the median of skill levels of students of the class.\n\nAs a principal of the school, you would like to assign each student to one of the $2$ classes such that each class has odd number of students (not divisible by $2$). The number of students in the classes may be equal or different, by your choice. Every student has to be assigned to exactly one class. Among such partitions, you want to choose one in which the absolute difference between skill levels of the classes is minimized.\n\nWhat is the minimum possible absolute difference you can achieve?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of students halved.\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\dots, a_{2 n}$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 skill levels of students.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output a single integer, the minimum possible absolute difference between skill levels of two classes of odd sizes.\n\n\n-----Example-----\nInput\n3\n1\n1 1\n3\n6 5 4 1 2 3\n5\n13 4 20 13 2 5 8 3 17 16\n\nOutput\n0\n1\n5\n\n\n\n-----Note-----\n\nIn the first test, there is only one way to partition students\u00a0\u2014 one in each class. The absolute difference of the skill levels will be $|1 - 1| = 0$.\n\nIn the second test, one of the possible partitions is to make the first class of students with skill levels $[6, 4, 2]$, so that the skill level of the first class will be $4$, and second with $[5, 1, 3]$, so that the skill level of the second class will be $3$. Absolute difference will be $|4 - 3| = 1$.\n\nNote that you can't assign like $[2, 3]$, $[6, 5, 4, 1]$ or $[]$, $[6, 5, 4, 1, 2, 3]$ because classes have even number of students.\n\n$[2]$, $[1, 3, 4]$ is also not possible because students with skills $5$ and $6$ aren't assigned to a class.\n\nIn the third test you can assign the students in the following way: $[3, 4, 13, 13, 20], [2, 5, 8, 16, 17]$ or $[3, 8, 17], [2, 4, 5, 13, 13, 16, 20]$. Both divisions give minimal possible absolute difference.\n\n Examples: \nInput: \n3\n1\n1 1\n3\n6 5 4 1 2 3\n5\n13 4 20 13 2 5 8 3 17 16\n\nOutput: \n 0\n1\n5\n\n",
  "122": "Problem: \nThere are several cards\u00a0arranged in a row, and each card has an associated number of points\u00a0The points are given in the integer array\u00a0cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\n\u00a0\nExample 1:\nInput: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n\nExample 2:\nInput: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.\n\nExample 3:\nInput: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.\n\nExample 4:\nInput: cardPoints = [1,1000,1], k = 1\nOutput: 1\nExplanation: You cannot take the card in the middle. Your best score is 1. \n\nExample 5:\nInput: cardPoints = [1,79,80,1,1,1,200,1], k = 3\nOutput: 202\n\n\u00a0\nConstraints:\n\n1 <= cardPoints.length <= 10^5\n1 <= cardPoints[i] <= 10^4\n1 <= k <= cardPoints.length\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5, 6, 1], 3]\nOutput: \n 12\n",
  "123": "Problem: \nYour music player contains N\u00a0different songs and she wants to listen to L (not necessarily different) songs during your trip. \u00a0You\u00a0create\u00a0a playlist so\u00a0that:\n\nEvery song is played at least once\nA song can only be played again only if\u00a0K\u00a0other songs have been played\n\nReturn the number of possible playlists.\u00a0 As the answer can be very large, return it modulo 10^9 + 7.\n\u00a0\n\n\n\nExample 1:\nInput: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\n\nExample 2:\nInput: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n\n\nExample 3:\nInput: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\n\n\n\n\u00a0\nNote:\n\n0 <= K < N <= L <= 100\n\n Examples: \nInput: \n[3, 3, 1]\nOutput: \n 6\n",
  "124": "Problem: \nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\n\nYou are given a target value to search. If found in the array return true, otherwise return false.\n\nExample 1:\n\n\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\n\nExample 2:\n\n\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\nFollow up:\n\n\n       This is a follow up problem to\u00a0Search in Rotated Sorted Array, where nums may contain duplicates.\n       Would this affect the run-time complexity? How and why?\n\n Examples: \nInput: \n[[2, 5, 6, 0, 0, 1, 2], 0]\nOutput: \n True\n",
  "125": "Problem: \nYour task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\n\n\nExample1:\n\na = 2\nb = [3]\n\nResult: 8\n\n\n\nExample2:\n\na = 2\nb = [1,0]\n\nResult: 1024\n\n\n\nCredits:Special thanks to @Stomach_ache for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[2, [3]]\nOutput: \n 8\n",
  "126": "Problem: \nGiven a string s, return the maximum number of ocurrences of any substring\u00a0under the following rules:\n\nThe number of unique characters in the substring must be less than or equal to maxLetters.\nThe substring size must be between minSize and maxSize\u00a0inclusive.\n\n\u00a0\nExample 1:\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\n\nExample 2:\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.\n\nExample 3:\nInput: s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\nOutput: 3\n\nExample 4:\nInput: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\n1 <= maxLetters <= 26\n1 <= minSize <= maxSize <= min(26, s.length)\ns only contains lowercase English letters.\n\n Examples: \nInput: \n['\"aababcaab\"', 2, 3, 4]\nOutput: \n 2\n",
  "127": "Problem: \nThere is a group of\u00a0G members, and a list of various crimes they could commit.\nThe ith\u00a0crime generates a profit[i] and requires group[i]\u00a0members to participate in it.\nIf a\u00a0member participates in one crime, that member can't participate in another crime.\nLet's call a profitable\u00a0scheme\u00a0any subset of these crimes that generates at least P profit, and the total number of\u00a0members participating in that subset of crimes is at most G.\nHow many schemes can be chosen?\u00a0 Since the answer may be very\u00a0large, return it modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: G = 5, P = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: \nTo make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.\n\n\nExample 2:\nInput: G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: \nTo make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\n\u00a0\n\nNote:\n\n1 <= G <= 100\n0 <= P <= 100\n1 <= group[i] <= 100\n0 <= profit[i] <= 100\n1 <= group.length = profit.length <= 100\n\n Examples: \nInput: \n[5, 3, [2, 2], [2, 3]]\nOutput: \n 2\n",
  "128": "Problem: \nImplement a basic calculator to evaluate a simple expression string.\n\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces  .\n\nExample 1:\n\n\nInput: \"1 + 1\"\nOutput: 2\n\n\nExample 2:\n\n\nInput: \" 2-1 + 2 \"\nOutput: 3\n\nExample 3:\n\n\nInput: \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\nNote:\n\n\n       You may assume that the given expression is always valid.\n       Do not use the eval built-in library function.\n\n Examples: \nInput: \n['\"1 + 1\"']\nOutput: \n 2\n",
  "129": "Problem: \nGiven an array A of positive integers, A[i] represents the value of the i-th sightseeing spot, and two\u00a0sightseeing spots i and j\u00a0have distance j - i\u00a0between them.\nThe score\u00a0of a pair (i < j) of sightseeing spots is (A[i] + A[j] + i\u00a0- j) : the sum of the values of the sightseeing spots, minus the distance between them.\nReturn the maximum score of a pair of sightseeing spots.\n\u00a0\nExample 1:\nInput: [8,1,5,2,6]\nOutput: 11\nExplanation: i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n\u00a0\nNote:\n\n2 <= A.length <= 50000\n1 <= A[i] <= 1000\n\n Examples: \nInput: \n[[8, 1, 5, 2, 6]]\nOutput: \n 11\n",
  "130": "Problem: \nA program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range\u00a0[1, k]\u00a0and there are no leading zeros in the array.\nGiven the string s and the integer k. There can be multiple ways to restore the array.\nReturn the number of possible array that can be printed as a string s\u00a0using the mentioned program.\nThe number of ways could be very large so return it modulo 10^9 + 7\n\u00a0\nExample 1:\nInput: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]\n\nExample 2:\nInput: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.\n\nExample 3:\nInput: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\n\nExample 4:\nInput: s = \"2020\", k = 30\nOutput: 1\nExplanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.\n\nExample 5:\nInput: s = \"1234567890\", k = 90\nOutput: 34\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5.\ns consists of only digits and doesn't contain leading zeros.\n1 <= k <= 10^9.\n\n Examples: \nInput: \n['\"1000\"', 10000]\nOutput: \n 4\n",
  "132": "Problem: \nIn a country popular for train travel, you\u00a0have planned some train travelling one year in advance.\u00a0 The days of the year that you will travel is given as an array days.\u00a0 Each day is an integer from 1 to 365.\nTrain tickets are sold in 3 different ways:\n\na 1-day pass is sold for costs[0] dollars;\na 7-day pass is sold for costs[1] dollars;\na 30-day pass is sold for costs[2] dollars.\n\nThe passes allow that many days of consecutive travel.\u00a0 For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.\nReturn the minimum number of dollars you need to travel every day in the given list of days.\n\u00a0\nExample 1:\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total you spent $11 and covered all the days of your travel.\n\n\nExample 2:\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: \nFor example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total you spent $17 and covered all the days of your travel.\n\n\u00a0\n\nNote:\n\n1 <= days.length <= 365\n1 <= days[i] <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i] <= 1000\n\n Examples: \nInput: \n[[1, 4, 6, 7, 8, 20], [2, 7, 15]]\nOutput: \n 11\n",
  "133": "Problem: \nYou are given a string containing only 4\u00a0kinds of characters 'Q', 'W', 'E' and\u00a0'R'.\nA string is said to be\u00a0balanced\u00a0if each of its characters appears\u00a0n/4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make the original string s\u00a0balanced.\nReturn 0 if the string is already balanced.\n\u00a0\nExample 1:\nInput: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.\nExample 2:\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n\nExample 3:\nInput: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\". \n\nExample 4:\nInput: s = \"QQQQ\"\nOutput: 3\nExplanation: We can replace the last 3 'Q' to make s = \"QWER\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\ns.length is a multiple of 4\ns\u00a0contains only 'Q', 'W', 'E' and\u00a0'R'.\n\n Examples: \nInput: \n['\"QWER\"']\nOutput: \n -1\n",
  "135": "Problem: \nGiven two sequences pushed and popped\u00a0with distinct values,\u00a0return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.\n\u00a0\n\nExample 1:\nInput: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\nOutput: true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n\n\nExample 2:\nInput: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\nOutput: false\nExplanation: 1 cannot be popped before 2.\n\n\n\n\u00a0\nConstraints:\n\n0 <= pushed.length == popped.length <= 1000\n0 <= pushed[i], popped[i] < 1000\npushed is a permutation of popped.\npushed and popped have distinct values.\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5], [4, 5, 3, 2, 1]]\nOutput: \n True\n",
  "136": "Problem: \nIn a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts\u00a0can be different for different buildings). Height\u00a00 is considered to be a\u00a0building\u00a0as well.\u00a0\nAt the end, the \"skyline\" when viewed from all four directions\u00a0of the grid, i.e.\u00a0top, bottom, left, and right,\u00a0must be the same as the\u00a0skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See\u00a0the following example.\nWhat is the maximum total sum that the height of the buildings can be increased?\nExample:\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from left or right is: [8, 7, 9, 3]\n\nThe grid after increasing the height of buildings without affecting skylines is:\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n\nNotes: \n\n1 < grid.length = grid[0].length <= 50.\nAll heights grid[i][j] are in the range [0, 100].\nAll buildings in grid[i][j] occupy the entire grid cell: that is, they are a 1 x 1 x grid[i][j] rectangular prism.\n\n Examples: \nInput: \n[[[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0], [], []]]\nOutput: \n 0\n",
  "137": "Problem: \nGiven an integer n, you must transform it into 0 using the following operations any number of times:\n\nChange the rightmost (0th) bit in the binary representation of n.\nChange the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.\n\nReturn the minimum number of operations to transform n into 0.\n\u00a0\nExample 1:\nInput: n = 0\nOutput: 0\n\nExample 2:\nInput: n = 3\nOutput: 2\nExplanation: The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2nd operation since the 0th bit is 1.\n\"01\" -> \"00\" with the 1st operation.\n\nExample 3:\nInput: n = 6\nOutput: 4\nExplanation: The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n\"010\" -> \"011\" with the 1st operation.\n\"011\" -> \"001\" with the 2nd operation since the 0th bit is 1.\n\"001\" -> \"000\" with the 1st operation.\n\nExample 4:\nInput: n = 9\nOutput: 14\n\nExample 5:\nInput: n = 333\nOutput: 393\n\n\u00a0\nConstraints:\n\n0 <= n <= 109\n\n Examples: \nInput: \n[0]\nOutput: \n 0\n",
  "138": "Problem: \nGiven an array of integers\u00a0nums, find\u00a0the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn\u00a0the maximum length of a subarray with positive product.\n\u00a0\nExample 1:\nInput: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.\n\nExample 2:\nInput: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\nExample 3:\nInput: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].\n\nExample 4:\nInput: nums = [-1,2]\nOutput: 1\n\nExample 5:\nInput: nums = [1,2,3,5,-6,4,0,10]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i]\u00a0<= 10^9\n\n Examples: \nInput: \n[[1, -2, -3, 4]]\nOutput: \n 4\n",
  "139": "Problem: \nWe are given an array\u00a0A of N lowercase letter strings, all of the same length.\nNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\nFor example, if we have an array A = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\",\"vyz\"].\nSuppose we chose a set of deletion indices D such that after deletions, the final array has its elements in lexicographic order (A[0] <= A[1] <= A[2] ... <= A[A.length - 1]).\nReturn the minimum possible value of D.length.\n\u00a0\n\n\n\n\n\n\n\nExample 1:\nInput: [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation: \nAfter deleting the first column, A = [\"a\", \"b\", \"c\"].\nNow A is in lexicographic order (ie. A[0] <= A[1] <= A[2]).\nWe require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.\n\n\nExample 2:\nInput: [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation: \nA is already in lexicographic order, so we don't need to delete anything.\nNote that the rows of A are not necessarily in lexicographic order:\nie. it is NOT necessarily true that (A[0][0] <= A[0][1] <= ...)\n\n\nExample 3:\nInput: [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: \nWe have to delete every column.\n\n\u00a0\n\n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\n\n Examples: \nInput: \n[['\"ca\"', '\"bb\"', '\"ac\"']]\nOutput: \n 1\n",
  "140": "Problem: \nGiven a non-empty array of numbers, a0, a1, a2, \u2026 , an-1, where 0 \u2264 ai < 231.\n\nFind the maximum result of ai XOR aj, where 0 \u2264 i, j < n.\n\nCould you do this in O(n) runtime?\n\nExample:\n\nInput: [3, 10, 5, 25, 2, 8]\n\nOutput: 28\n\nExplanation: The maximum result is 5 ^ 25 = 28.\n\n Examples: \nInput: \n[[3, 10, 5, 25, 2, 8]]\nOutput: \n 28\n",
  "141": "Problem: \nThe i-th person has weight people[i], and each boat can carry a maximum weight of limit.\nEach boat carries at most 2 people at the same time, provided the sum of the\u00a0weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.\u00a0 (It is guaranteed each person can be carried by a boat.)\n\u00a0\n\nExample 1:\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n\n\nExample 2:\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n\n\nExample 3:\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\nNote:\n\n1 <=\u00a0people.length <= 50000\n1 <= people[i] <=\u00a0limit <= 30000\n\n Examples: \nInput: \n[[1, 2], 3]\nOutput: \n 1\n",
  "142": "Problem: \nGiven a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n\n\n\nA subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n\n\n\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n\n\nExample 1:\n\nInput: \"aba\", \"cdc\", \"eae\"\nOutput: 3\n\n\n\nNote:\n\nAll the given strings' lengths will not exceed 10.\nThe length of the given list will be in the range of [2, 50].\n\n Examples: \nInput: \n[['\"aba\"', '\"cdc\"', '\"eae\"']]\nOutput: \n 5\n",
  "143": "Problem: \nIn a row of trees, the i-th tree\u00a0produces\u00a0fruit with type\u00a0tree[i].\nYou start at any tree\u00a0of your choice, then repeatedly perform the following steps:\n\nAdd one piece of fruit from this tree to your baskets.\u00a0 If you cannot, stop.\nMove to the next tree to the right of the current tree.\u00a0 If there is no tree to the right, stop.\n\nNote that you do not have any choice after the initial choice of starting tree:\u00a0you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.\nYou have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.\nWhat is the total amount of fruit you can collect with this procedure?\n\u00a0\nExample 1:\nInput: [1,2,1]\nOutput: 3\nExplanation: We can collect [1,2,1].\n\n\nExample 2:\nInput: [0,1,2,2]\nOutput: 3\nExplanation: We can collect [1,2,2].\nIf we started at the first tree, we would only collect [0, 1].\n\n\nExample 3:\nInput: [1,2,3,2,2]\nOutput: 4\nExplanation: We can collect [2,3,2,2].\nIf we started at the first tree, we would only collect [1, 2].\n\n\nExample 4:\nInput: [3,3,3,1,2,1,1,2,3,3,4]\nOutput: 5\nExplanation: We can collect [1,2,1,1,2].\nIf we started at the first tree or the eighth tree, we would only collect 4 fruits.\n\n\u00a0\n\n\n\nNote:\n\n1 <= tree.length <= 40000\n0 <= tree[i] < tree.length\n\n Examples: \nInput: \n[[1, 2, 1]]\nOutput: \n 3\n",
  "144": "Problem: \nInitially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step: \n\nCopy All: You can copy all the characters present on the notepad (partial copy is not allowed).\nPaste: You can paste the characters which are copied last time.\n\n\n\n\nGiven a number n. You have to get exactly n 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get n 'A'. \n\n\nExample 1:\n\nInput: 3\nOutput: 3\nExplanation:\nIntitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n\n\n\n\nNote:\n\nThe n will be in the range [1, 1000].\n\n Examples: \nInput: \n[3]\nOutput: \n 3\n",
  "145": "Problem: \nYou have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.\n\n\nExample 1:\n\nInput: [4, 1, 8, 7]\nOutput: True\nExplanation: (8-4) * (7-1) = 24\n\n\n\nExample 2:\n\nInput: [1, 2, 1, 2]\nOutput: False\n\n\n\nNote:\n\nThe division operator / represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.\nEvery operation done is between two numbers.  In particular, we cannot use - as a unary operator.  For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.\nYou cannot concatenate numbers together.  For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.\n\n Examples: \nInput: \n[[4, 1, 8, 7]]\nOutput: \n True\n",
  "146": "Problem: \nGiven an encoded string, return it's decoded string.\n\n\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n\n\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\n\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].\n\n\nExamples:\n\ns = \"3[a]2[bc]\", return \"aaabcbc\".\ns = \"3[a2[c]]\", return \"accaccacc\".\ns = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n\n Examples: \nInput: \n['\"3[a]2[bc]\"']\nOutput: \n \"aaabcbc\"\n",
  "147": "Problem: \nThere are n engineers numbered from 1 to n\u00a0and\u00a0two arrays: speed\u00a0and efficiency, where speed[i] and efficiency[i] represent the speed and efficiency for the i-th engineer respectively. Return the maximum performance of a team composed of\u00a0at most\u00a0k\u00a0engineers, since the answer can be a huge number, return this modulo\u00a010^9 + 7.\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among\u00a0their engineers.\u00a0\n\u00a0\nExample 1:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n\nExample 2:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n\nExample 3:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\nspeed.length == n\nefficiency.length == n\n1 <= speed[i] <= 10^5\n1 <= efficiency[i] <= 10^8\n1 <= k <= n\n\n Examples: \nInput: \n[6, [2, 10, 3, 1, 5, 8], [5, 4, 3, 9, 7, 2], 2]\nOutput: \n 60\n",
  "148": "Problem: \nWe have jobs: difficulty[i]\u00a0is the difficulty of the\u00a0ith job, and\u00a0profit[i]\u00a0is the profit of the\u00a0ith job.\u00a0\nNow we have some workers.\u00a0worker[i]\u00a0is the ability of the\u00a0ith worker, which means that this worker can only complete a job with difficulty at most\u00a0worker[i].\u00a0\nEvery worker can be assigned at most one job, but one job\u00a0can be completed multiple times.\nFor example, if 3 people attempt the same job that pays $1, then the total profit will be $3.\u00a0 If a worker cannot complete any job, his profit is $0.\nWhat is the most profit we can make?\nExample 1:\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100 \nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.\nNotes:\n\n1 <= difficulty.length = profit.length <= 10000\n1 <= worker.length <= 10000\ndifficulty[i], profit[i], worker[i]\u00a0 are in range\u00a0[1, 10^5]\n\n Examples: \nInput: \n[[2, 4, 6, 8, 10], [10, 20, 30, 40, 50], [4, 5, 6, 7]]\nOutput: \n 100\n",
  "149": "Problem: \nGiven a string\u00a0s, a k\u00a0duplicate removal\u00a0consists of choosing k\u00a0adjacent and equal letters from\u00a0s and removing\u00a0them causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made.\nIt is guaranteed that the answer is unique.\n\u00a0\nExample 1:\nInput: s = \"abcd\", k = 2\nOutput: \"abcd\"\nExplanation: There's nothing to delete.\nExample 2:\nInput: s = \"deeedbbcccbdaa\", k = 3\nOutput: \"aa\"\nExplanation: \nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\"\nExample 3:\nInput: s = \"pbbcggttciiippooaais\", k = 2\nOutput: \"ps\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\n2 <= k <= 10^4\ns only contains lower case English letters.\n\n Examples: \nInput: \n['\"abcd\"', 2]\nOutput: \n \"abcd\"\n",
  "150": "Problem: \nGiven an array A, partition it\u00a0into two (contiguous) subarrays\u00a0left\u00a0and right\u00a0so that:\n\nEvery element in left\u00a0is less than or equal to every element in right.\nleft and right are non-empty.\nleft\u00a0has the smallest possible size.\n\nReturn the length of left after such a partitioning.\u00a0 It is guaranteed that such a partitioning exists.\n\u00a0\nExample 1:\nInput: [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]\n\n\nExample 2:\nInput: [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]\n\n\u00a0\n\nNote:\n\n2 <= A.length\u00a0<= 30000\n0 <= A[i] <= 10^6\nIt is guaranteed there is at least one way to partition A as described.\n\n Examples: \nInput: \n[[5, 0, 3, 8, 6]]\nOutput: \n 3\n",
  "152": "Problem: \nIn universe Earth\u00a0C-137, Rick discovered a special form of magnetic force between\u00a0two balls if they are put in his new invented basket. Rick has\u00a0n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum\u00a0magnetic force\u00a0between any two balls is maximum.\nRick stated that\u00a0magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position\u00a0and the integer m. Return the required force.\n\u00a0\nExample 1:\n\nInput: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n\nExample 2:\nInput: position = [5,4,3,2,1,1000000000], m = 2\nOutput: 999999999\nExplanation: We can use baskets 1 and 1000000000.\n\n\u00a0\nConstraints:\n\nn == position.length\n2 <= n <= 10^5\n1 <= position[i] <= 10^9\nAll integers in position are distinct.\n2 <= m <= position.length\n\n Examples: \nInput: \n[[1, 2, 3, 4, 7], 3]\nOutput: \n 3\n",
  "154": "Problem: \nGiven a rectangular cake with height h and width w, and two arrays of integers horizontalCuts and verticalCuts where horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut\u00a0and similarly, verticalCuts[j] is the distance from the\u00a0left of the rectangular cake to the jth\u00a0vertical cut.\nReturn the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts.\u00a0Since the answer can be a huge number, return this modulo 10^9 + 7.\n\u00a0\nExample 1:\n\nInput: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\nOutput: 4 \nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n\nExample 2:\n\nInput: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\nOutput: 6\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n\nExample 3:\nInput: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\nOutput: 9\n\n\u00a0\nConstraints:\n\n2 <= h,\u00a0w <= 10^9\n1 <=\u00a0horizontalCuts.length <\u00a0min(h, 10^5)\n1 <=\u00a0verticalCuts.length < min(w, 10^5)\n1 <=\u00a0horizontalCuts[i] < h\n1 <=\u00a0verticalCuts[i] < w\nIt is guaranteed that all elements in\u00a0horizontalCuts\u00a0are distinct.\nIt is guaranteed that all elements in verticalCuts\u00a0are distinct.\n\n Examples: \nInput: \n[5, 4, [1, 2, 4], [1, 3]]\nOutput: \n 4\n",
  "155": "Problem: \nGiven an array of\u00a0integers arr and an integer d. In one step you can jump from index i to index:\n\ni + x where:\u00a0i + x < arr.length and  0 <\u00a0x <= d.\ni - x where:\u00a0i - x >= 0 and  0 <\u00a0x <= d.\n\nIn addition, you can only jump from index i to index j\u00a0if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i,\u00a0j) < k < max(i, j)).\nYou can choose any index of the array and start jumping. Return the maximum number of indices\u00a0you can visit.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nExample 1:\n\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n\nExample 2:\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index. You always cannot jump to any index.\n\nExample 3:\nInput: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0. You can visit all the indicies. \n\nExample 4:\nInput: arr = [7,1,7,1,7,1], d = 2\nOutput: 2\n\nExample 5:\nInput: arr = [66], d = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 1000\n1 <= arr[i] <= 10^5\n1 <= d <= arr.length\n\n Examples: \nInput: \n[[6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12], 2]\nOutput: \n 4\n",
  "157": "Problem: \nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\n\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\n\nThe matching should cover the entire input string (not partial).\n\nNote:\n\n\n       s\u00a0could be empty and contains only lowercase letters a-z.\n       p could be empty and contains only lowercase letters a-z, and characters like ?\u00a0or\u00a0*.\n\n\nExample 1:\n\n\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\n\nInput:\ns = \"aa\"\np = \"*\"\nOutput: true\nExplanation:\u00a0'*' matches any sequence.\n\n\nExample 3:\n\n\nInput:\ns = \"cb\"\np = \"?a\"\nOutput: false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\nExample 4:\n\n\nInput:\ns = \"adceb\"\np = \"*a*b\"\nOutput: true\nExplanation:\u00a0The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\n\n\nExample 5:\n\n\nInput:\ns = \"acdcb\"\np = \"a*c?b\"\nOutput: false\n\n Examples: \nInput: \n['\"aa\"', '\"a\"']\nOutput: \n False\n",
  "158": "Problem: \nStrings\u00a0A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K\u00a0times so that the resulting string equals B.\nGiven two anagrams A and B, return the smallest K\u00a0for which A and B are K-similar.\nExample 1:\nInput: A = \"ab\", B = \"ba\"\nOutput: 1\n\n\nExample 2:\nInput: A = \"abc\", B = \"bca\"\nOutput: 2\n\n\nExample 3:\nInput: A = \"abac\", B = \"baca\"\nOutput: 2\n\n\nExample 4:\nInput: A = \"aabc\", B = \"abca\"\nOutput: 2\n\n\n\nNote:\n\n1 <= A.length == B.length <= 20\nA and B contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}\n\n Examples: \nInput: \n['\"ab\"', '\"ba\"']\nOutput: \n 1\n",
  "159": "Problem: \nGiven an integer array\u00a0nums\u00a0and an integer k, return the maximum sum of a non-empty subsequence\u00a0of that array such that for every\u00a0two consecutive integers in the subsequence,\u00a0nums[i]\u00a0and\u00a0nums[j], where\u00a0i < j, the condition\u00a0j - i <= k\u00a0is satisfied.\nA\u00a0subsequence\u00a0of an array is\u00a0obtained by deleting some number of elements (can be\u00a0zero) from the array, leaving the remaining elements in their original order.\n\u00a0\nExample 1:\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].\n\nExample 2:\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.\n\nExample 3:\nInput: nums = [10,-2,-10,-5,20], k = 2\nOutput: 23\nExplanation: The subsequence is [10, -2, -5, 20].\n\n\u00a0\nConstraints:\n\n1 <= k <= nums.length <= 10^5\n-10^4\u00a0<= nums[i] <= 10^4\n\n Examples: \nInput: \n[[10, 2, -10, 5, 20], 2]\nOutput: \n 37\n",
  "160": "Problem: \nAlex and Lee play a game with piles of stones.\u00a0 There are an even number of\u00a0piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most\u00a0stones.\u00a0 The total number of stones is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first.\u00a0 Each turn, a player\u00a0takes the entire pile of stones from either the beginning or the end of the row.\u00a0 This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\u00a0\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\n Examples: \nInput: \n[[5, 3, 4, 5]]\nOutput: \n True\n",
  "161": "Problem: \nOne way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.\n\n\n     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n\n\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where # represents a null node.\n\nGiven a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.\n\nEach comma separated value in the string must be either an integer or a character '#' representing null pointer.\n\nYou may assume that the input format is always valid, for example it could never contain two consecutive commas such as \"1,,3\".\n\nExample 1:\n\n\nInput: \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\n\nExample 2:\n\n\nInput: \"1,#\"\nOutput: false\n\n\nExample 3:\n\n\nInput: \"9,#,#,1\"\nOutput: false\n\n Examples: \nInput: \n['\"9,3,4,#,#,1,#,#,2,#,6,#,#\"']\nOutput: \n False\n",
  "162": "Problem: \nGiven two strings text1 and text2, return the length of their longest common subsequence.\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\u00a0A common subsequence\u00a0of two strings is a subsequence that is common to both strings.\n\u00a0\nIf there is no common subsequence, return 0.\n\u00a0\nExample 1:\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n\nExample 2:\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n\nExample 3:\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n\n\u00a0\nConstraints:\n\n1 <= text1.length <= 1000\n1 <= text2.length <= 1000\nThe input strings consist of lowercase English characters only.\n\n Examples: \nInput: \n['\"abcde\"', '\"ace\"']\nOutput: \n 5\n",
  "163": "Problem: \nGiven a string s and a string t, check if s is subsequence of t.\n\n\n\nYou may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (\n\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\n\nExample 1:\ns = \"abc\", t = \"ahbgdc\"\n\n\nReturn true.\n\n\nExample 2:\ns = \"axc\", t = \"ahbgdc\"\n\n\nReturn false.\n\n\nFollow up:\nIf there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?\n\nCredits:Special thanks to @pbrother for adding this problem and creating all test cases.\n\n Examples: \nInput: \n['\"abc\"', '\"ahbgdc\"']\nOutput: \n True\n",
  "164": "Problem: \nGiven a string num representing the digits of\u00a0a very large integer and an integer k.\nYou are allowed to swap any two adjacent digits of the integer at most k times.\nReturn the minimum integer you can obtain also as a string.\n\u00a0\nExample 1:\n\nInput: num = \"4321\", k = 4\nOutput: \"1342\"\nExplanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n\nExample 2:\nInput: num = \"100\", k = 1\nOutput: \"010\"\nExplanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n\nExample 3:\nInput: num = \"36789\", k = 1000\nOutput: \"36789\"\nExplanation: We can keep the number without any swaps.\n\nExample 4:\nInput: num = \"22\", k = 22\nOutput: \"22\"\n\nExample 5:\nInput: num = \"9438957234785635408\", k = 23\nOutput: \"0345989723478563548\"\n\n\u00a0\nConstraints:\n\n1 <= num.length <= 30000\nnum contains digits only and doesn't have leading zeros.\n1 <= k <= 10^9\n\n Examples: \nInput: \n['\"4321\"', 4]\nOutput: \n 1\"432\"\n",
  "165": "Problem: \nGiven a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\nExample 1:\n\nInput:\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n\nOutput: \n\"apple\"\n\n\n\n\nExample 2:\n\nInput:\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\n\nOutput: \n\"a\"\n\n\n\nNote:\n\nAll the strings in the input will only contain lower-case letters.\nThe size of the dictionary won't exceed 1,000.\nThe length of all the strings in the input won't exceed 1,000.\n\n Examples: \nInput: \n['\"abpcplea\"', ['\"ale\"', '\"apple\"', '\"monkey\"', '\"plea\"']]\nOutput: \n \"apple\"\n",
  "166": "Problem: \nGiven 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make (\u00a0a OR b == c\u00a0). (bitwise OR operation).\nFlip operation\u00a0consists of change\u00a0any\u00a0single bit 1 to 0 or change the bit 0 to 1\u00a0in their binary representation.\n\u00a0\nExample 1:\n\nInput: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)\nExample 2:\nInput: a = 4, b = 2, c = 7\nOutput: 1\n\nExample 3:\nInput: a = 1, b = 2, c = 3\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= a <= 10^9\n1 <= b\u00a0<= 10^9\n1 <= c\u00a0<= 10^9\n\n Examples: \nInput: \n[2, 6, 5]\nOutput: \n 3\n",
  "167": "Problem: \nYou are given K eggs, and you have access to a building with N floors from 1 to N.\u00a0\nEach egg is identical in function, and if an egg breaks, you cannot drop it\u00a0again.\nYou know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.\nEach move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with\u00a01 <= X <= N).\u00a0\nYour goal is to know\u00a0with certainty\u00a0what the value of F is.\nWhat is the minimum number of moves that you need to know with certainty\u00a0what F is, regardless of the initial value of F?\n\u00a0\n\n\n\nExample 1:\nInput: K = 1, N = 2\nOutput: 2\nExplanation: \nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\nIf it didn't break, then we know with certainty F = 2.\nHence, we needed 2 moves in the worst case to know what F is with certainty.\n\n\nExample 2:\nInput: K = 2, N = 6\nOutput: 3\n\n\nExample 3:\nInput: K = 3, N = 14\nOutput: 4\n\n\u00a0\nNote:\n\n1 <= K <= 100\n1 <= N <= 10000\n\n Examples: \nInput: \n[1, 2]\nOutput: \n 2\n",
  "168": "Problem: \nGiven a string s and an integer k. You should construct k non-empty palindrome strings using all the characters in s.\nReturn True if you can use all the characters in s to construct k palindrome strings or False otherwise.\n\u00a0\nExample 1:\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n\nExample 2:\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n\nExample 3:\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.\n\nExample 4:\nInput: s = \"yzyzyzyzyzyzyzy\", k = 2\nOutput: true\nExplanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.\n\nExample 5:\nInput: s = \"cr\", k = 7\nOutput: false\nExplanation: We don't have enough characters in s to construct 7 palindromes.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\nAll characters in s are lower-case English letters.\n1 <= k <= 10^5\n\n Examples: \nInput: \n['\"annabelle\"', 2]\nOutput: \n True\n",
  "169": "Problem: \nGiven a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n\n\n\nFor example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).\n\n\n\nNote: You may assume that n is not less than 2 and not larger than 58.\n\n\nCredits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[2]\nOutput: \n 1\n",
  "170": "Problem: \nGiven an integer array\u00a0arr, remove a\u00a0subarray (can be empty) from\u00a0arr\u00a0such that the remaining elements in arr\u00a0are non-decreasing.\nA subarray is a contiguous\u00a0subsequence of the array.\nReturn\u00a0the length of the shortest subarray to remove.\n\u00a0\nExample 1:\nInput: arr = [1,2,3,10,4,2,3,5]\nOutput: 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].\nExample 2:\nInput: arr = [5,4,3,2,1]\nOutput: 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].\n\nExample 3:\nInput: arr = [1,2,3]\nOutput: 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements.\n\nExample 4:\nInput: arr = [1]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n0 <= arr[i] <= 10^9\n\n Examples: \nInput: \n[[1, 2, 3, 10, 4, 2, 3, 5]]\nOutput: \n 3\n",
  "172": "Problem: \nYou are given an integer num. You will apply the following steps exactly two times:\n\nPick a digit x (0\u00a0<= x <= 9).\nPick another digit y (0\u00a0<= y <= 9). The digit y can be equal to x.\nReplace all the occurrences of x in the decimal representation of num by y.\nThe new integer cannot have any leading zeros, also the new integer cannot be 0.\n\nLet a\u00a0and b\u00a0be the results of applying the operations to num the first and second times, respectively.\nReturn the max difference between a and b.\n\u00a0\nExample 1:\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n\nExample 2:\nInput: num = 9\nOutput: 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n\nExample 3:\nInput: num = 123456\nOutput: 820000\n\nExample 4:\nInput: num = 10000\nOutput: 80000\n\nExample 5:\nInput: num = 9288\nOutput: 8700\n\n\u00a0\nConstraints:\n\n1 <= num <= 10^8\n\n Examples: \nInput: \n[555]\nOutput: \n 888\n",
  "173": "Problem: \nGiven an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n /\u00a02 pairs such that the sum of each pair is divisible by k.\nReturn True If you can find a way to do that or False otherwise.\n\u00a0\nExample 1:\nInput: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\nOutput: true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).\n\nExample 2:\nInput: arr = [1,2,3,4,5,6], k = 7\nOutput: true\nExplanation: Pairs are (1,6),(2,5) and(3,4).\n\nExample 3:\nInput: arr = [1,2,3,4,5,6], k = 10\nOutput: false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.\n\nExample 4:\nInput: arr = [-10,10], k = 2\nOutput: true\n\nExample 5:\nInput: arr = [-1,1,-2,2,-3,3,-4,4], k = 3\nOutput: true\n\n\u00a0\nConstraints:\n\narr.length == n\n1 <= n <= 10^5\nn is even.\n-10^9 <= arr[i] <= 10^9\n1 <= k <= 10^5\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5, 10, 6, 7, 8, 9], 5]\nOutput: \n True\n",
  "174": "Problem: \nSuppose we abstract our file system by a string in the following manner:\n\nThe string \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\" represents:\n\ndir\n    subdir1\n    subdir2\n        file.ext\n\n\nThe directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.\n\nThe string \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\" represents:\n\ndir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n\n\nThe directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.\n\nWe are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is \"dir/subdir2/subsubdir2/file2.ext\", and its length is 32 (not including the double quotes).\n\nGiven a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.\n\nNote:\n\nThe name of a file contains at least a . and an extension.\nThe name of a directory or sub-directory will not contain a ..\n\n\n\nTime complexity required: O(n) where n is the size of the input string.\n\nNotice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.\n\n Examples: \nInput: \n['\"dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext\"']\nOutput: \n 41\n",
  "175": "Problem: \nGiven a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.\n\nExample 1:\n\nInput: 5\nOutput: 5\nExplanation: \nHere are the non-negative integers \n\n\nNote:\n1 9\n\n Examples: \nInput: \n[1]\nOutput: \n 2\n",
  "176": "Problem: \nGiven a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\n\nBelow is one possible representation of s1 = \"great\":\n\n\n    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n\n\nTo scramble the string, we may choose any non-leaf node and swap its two children.\n\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\n\n\n    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n\n\nWe say that \"rgeat\" is a scrambled string of \"great\".\n\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\n\n\n    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n\n\nWe say that \"rgtae\" is a scrambled string of \"great\".\n\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\n\nExample 1:\n\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\n\n\nExample 2:\n\n\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n\n Examples: \nInput: \n['\"great\"', '\"rgeat\"']\nOutput: \n True\n",
  "177": "Problem: \nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\n\nExample:\n\n\nInput: S = \"ADOBECODEBANC\", T = \"ABC\"\nOutput: \"BANC\"\n\n\nNote:\n\n\n       If there is no such window in S that covers all characters in T, return the empty string \"\".\n       If there is such window, you are guaranteed that there will always be only one unique minimum window in S.\n\n Examples: \nInput: \n['\"ADOBECODEBANC\"', '\"ABC\"']\nOutput: \n \"ADOBECODEBANC\"\n",
  "178": "Problem: \nGiven an unsorted array of integers, find the length of longest increasing subsequence.\n\nExample:\n\n\nInput: [10,9,2,5,3,7,101,18]\nOutput: 4 \nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. \n\nNote: \n\n\n       There may be more than one LIS combination, it is only necessary for you to return the length.\n       Your algorithm should run in O(n2) complexity.\n\n\nFollow up: Could you improve it to O(n log n) time complexity?\n\n Examples: \nInput: \n[[10, 9, 2, 5, 3, 7, 101, 18]]\nOutput: \n 4\n",
  "179": "Problem: \nRun-length encoding is a string compression method that works by\u00a0replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string\u00a0\"aabccc\"\u00a0we replace \"aa\"\u00a0by\u00a0\"a2\"\u00a0and replace \"ccc\"\u00a0by\u00a0\"c3\". Thus the compressed string becomes \"a2bc3\".\nNotice that in this problem, we are not adding\u00a0'1'\u00a0after single characters.\nGiven a\u00a0string s\u00a0and an integer k. You need to delete at most\u00a0k characters from\u00a0s\u00a0such that the run-length encoded version of s\u00a0has minimum length.\nFind the minimum length of the run-length encoded\u00a0version of s after deleting at most k characters.\n\u00a0\nExample 1:\nInput: s = \"aaabcccd\", k = 2\nOutput: 4\nExplanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.\nExample 2:\nInput: s = \"aabbaa\", k = 2\nOutput: 2\nExplanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.\n\nExample 3:\nInput: s = \"aaaaaaaaaaa\", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\n0 <= k <= s.length\ns contains only lowercase English letters.\n\n Examples: \nInput: \n['\"aaabcccd\"', 2]\nOutput: \n 6\n",
  "180": "Problem: \nA car travels from a starting position to a destination which is target miles east of the starting position.\nAlong the way, there are gas stations.\u00a0 Each station[i]\u00a0represents a gas station that is station[i][0] miles east of the starting position, and has station[i][1] liters of gas.\nThe car starts with an infinite tank of gas, which initially has\u00a0startFuel\u00a0liters of fuel in it.\u00a0 It uses 1 liter of gas per 1 mile that it drives.\nWhen the car\u00a0reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nWhat is the least number of refueling stops the car must make in order to reach its destination?\u00a0 If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there.\u00a0 If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\n\u00a0\n\nExample 1:\nInput: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.\n\n\nExample 2:\nInput: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can't reach the target (or even the first gas station).\n\n\nExample 3:\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: \nWe start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n\n\u00a0\nNote:\n\n1 <= target, startFuel, stations[i][1] <= 10^9\n0 <= stations.length <= 500\n0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target\n\n Examples: \nInput: \n[1, 1, [[], []]]\nOutput: \n 0\n",
  "181": "Problem: \nSay you have an array for which the ith element is the price of a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:\n\n\n       You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n       After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)\n\n\nExample:\n\n\nInput: [1,2,3,0,2]\nOutput: 3 \nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n\n Examples: \nInput: \n[[1, 2, 3, 0, 2]]\nOutput: \n 3\n",
  "182": "Problem: \nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.\n\n\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!\n\nExample:\n\n\nInput: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\n\n Examples: \nInput: \n[[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]]\nOutput: \n 6\n",
  "183": "Problem: \nGiven two arrays nums1\u00a0and nums2.\nReturn the maximum dot product\u00a0between\u00a0non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0[2,3,5]\u00a0is a subsequence of\u00a0[1,2,3,4,5]\u00a0while [1,5,3]\u00a0is not).\n\u00a0\nExample 1:\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\nExample 2:\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\nExample 3:\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 500\n-1000 <= nums1[i], nums2[i] <= 1000\n\n Examples: \nInput: \n[[2, 1, -2, 5], [3, 0, -6]]\nOutput: \n 18\n",
  "185": "Problem: \nGiven a binary string s and an integer k.\nReturn True if every\u00a0binary code\u00a0of length k is a substring of s. Otherwise, return False.\n\u00a0\nExample 1:\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.\n\nExample 2:\nInput: s = \"00110\", k = 2\nOutput: true\n\nExample 3:\nInput: s = \"0110\", k = 1\nOutput: true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n\nExample 4:\nInput: s = \"0110\", k = 2\nOutput: false\nExplanation: The binary code \"00\" is of length 2 and doesn't exist in the array.\n\nExample 5:\nInput: s = \"0000000001011100\", k = 4\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 5 * 10^5\ns consists of 0's and 1's only.\n1 <= k <= 20\n\n Examples: \nInput: \n['\"00110110\"', 2]\nOutput: \n True\n",
  "186": "Problem: \nGiven an array of integers cost and an integer target. Return the maximum integer you can paint\u00a0under the following rules:\n\nThe cost of painting a\u00a0digit (i+1) is given by\u00a0cost[i]\u00a0(0 indexed).\nThe total cost used must\u00a0be equal to target.\nInteger does not have digits 0.\n\nSince the answer may be too large, return it as string.\nIf there is no way to paint any integer given the condition, return \"0\".\n\u00a0\nExample 1:\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n\nExample 2:\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n\nExample 3:\nInput: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It's not possible to paint any integer with total cost equal to target.\n\nExample 4:\nInput: cost = [6,10,15,40,40,40,40,40,40], target = 47\nOutput: \"32211\"\n\n\u00a0\nConstraints:\n\ncost.length == 9\n1 <= cost[i] <= 5000\n1 <= target <= 5000\n\n Examples: \nInput: \n[[4, 3, 2, 5, 6, 7, 2, 5, 5], 9]\nOutput: \n 7772\n",
  "187": "Problem: \nYou are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.\n\u00a0\nExample 1:\n\nInput: customers = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.\nExample 2:\nInput: customers = [10,9,6], boardingCost = 6, runningCost = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.\n\n\nExample 3:\nInput: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1.\n\nExample 4:\nInput: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8\nOutput: 9\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.\n3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.\n4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.\n6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.\n7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.\n8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.\n9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.\n10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.\nThe highest profit was $36 after rotating the wheel 9 times.\n\n\u00a0\nConstraints:\n\nn == customers.length\n1 <= n <= 105\n0 <= customers[i] <= 50\n1 <= boardingCost, runningCost <= 100\n\n Examples: \nInput: \n[[8, 3], 5, 6]\nOutput: \n 3\n",
  "189": "Problem: \nYou are given a list of\u00a0preferences\u00a0for\u00a0n\u00a0friends, where n is always even.\nFor each person i,\u00a0preferences[i]\u00a0contains\u00a0a list of friends\u00a0sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list.\u00a0Friends in\u00a0each list are\u00a0denoted by integers from 0 to n-1.\nAll the friends are divided into pairs.\u00a0The pairings are\u00a0given in a list\u00a0pairs,\u00a0where pairs[i] = [xi, yi] denotes xi\u00a0is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy.\u00a0A friend x\u00a0is unhappy if x\u00a0is paired with y\u00a0and there exists a friend u\u00a0who\u00a0is paired with v\u00a0but:\n\nx\u00a0prefers u\u00a0over y,\u00a0and\nu\u00a0prefers x\u00a0over v.\n\nReturn the number of unhappy friends.\n\u00a0\nExample 1:\nInput: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n\nExample 2:\nInput: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.\n\nExample 3:\nInput: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4\n\n\u00a0\nConstraints:\n\n2 <= n <= 500\nn\u00a0is even.\npreferences.length\u00a0== n\npreferences[i].length\u00a0== n - 1\n0 <= preferences[i][j] <= n - 1\npreferences[i]\u00a0does not contain i.\nAll values in\u00a0preferences[i]\u00a0are unique.\npairs.length\u00a0== n/2\npairs[i].length\u00a0== 2\nxi != yi\n0 <= xi, yi\u00a0<= n - 1\nEach person is contained in exactly one pair.\n\n Examples: \nInput: \n[4, [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0], [], []], [[0, 1], [2, 3], [], []]]\nOutput: \n 2\n",
  "190": "Problem: \nGiven two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.\n\nExample 1:\n\nInput:\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\nOutput: 3\nExplanation: \nThe repeated subarray with maximum length is [3, 2, 1].\n\n\n\nNote:\n\n1 \n0\n\n Examples: \nInput: \n[[1, 2, 3, 2, 1], [3, 2, 1, 4, 7]]\nOutput: \n 3\n",
  "191": "Problem: \nGiven an array of digits, you can\u00a0write numbers using each digits[i] as many times as we want.\u00a0 For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated\u00a0that are less than or equal to a given integer n.\n\u00a0\nExample 1:\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\nExample 2:\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\nExample 3:\nInput: digits = [\"7\"], n = 8\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 9\ndigits[i].length == 1\ndigits[i] is a digit from\u00a0'1'\u00a0to '9'.\nAll the values in\u00a0digits are unique.\n1 <= n <= 109\n\n Examples: \nInput: \n[['\"1\"', '\"3\"', '\"5\"', '\"7\"'], 100]\nOutput: \n 84\n",
  "192": "Problem: \nThere are 3n\u00a0piles of coins of\u00a0varying size, you and your friends will take piles of coins as follows:\n\nIn each step, you will choose any\u00a03 piles of coins (not necessarily consecutive).\nOf your choice,\u00a0Alice\u00a0will pick\u00a0the pile with the maximum number of coins.\nYou will pick the next pile with maximum number of coins.\nYour friend Bob will pick the last pile.\nRepeat\u00a0until\u00a0there are no more piles of coins.\n\nGiven an array of integers piles\u00a0where piles[i] is the number of coins in the ith pile.\nReturn the maximum number of coins which you can have.\n\u00a0\nExample 1:\nInput: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.\n\nExample 2:\nInput: piles = [2,4,5]\nOutput: 4\n\nExample 3:\nInput: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18\n\n\u00a0\nConstraints:\n\n3 <= piles.length <= 10^5\npiles.length % 3 == 0\n1 <= piles[i] <= 10^4\n\n Examples: \nInput: \n[[1, 2, 2, 4, 7, 8]]\nOutput: \n 9\n",
  "193": "Problem: \nGiven an array arr.\u00a0 You can choose a set of integers and remove all the occurrences of these integers in the array.\nReturn the minimum size of the set so that at least half of the integers of the array are removed.\n\u00a0\nExample 1:\nInput: arr = [3,3,3,3,5,5,5,2,2,7]\nOutput: 2\nExplanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.\n\nExample 2:\nInput: arr = [7,7,7,7,7,7]\nOutput: 1\nExplanation: The only possible set you can choose is {7}. This will make the new array empty.\n\nExample 3:\nInput: arr = [1,9]\nOutput: 1\n\nExample 4:\nInput: arr = [1000,1000,3,7]\nOutput: 1\n\nExample 5:\nInput: arr = [1,2,3,4,5,6,7,8,9,10]\nOutput: 5\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\narr.length is even.\n1 <= arr[i] <= 10^5\n\n Examples: \nInput: \n[[3, 3, 3, 3, 5, 5, 5, 2, 2, 7]]\nOutput: \n 2\n",
  "194": "Problem: \nGiven an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.\n\nExample 1:\n\nInput: nums = [4, 3, 2, 3, 5, 2, 1], k = 4\nOutput: True\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n\n\nNote:\n1 .\n0 < nums[i] < 10000.\n\n Examples: \nInput: \n[[5, 4, 3, 3, 2, 2, 1], 4]\nOutput: \n True\n",
  "195": "Problem: \nGiven an array of integers A, find the number of\u00a0triples of indices (i, j, k)\u00a0such that:\n\n0 <= i < A.length\n0 <= j < A.length\n0 <= k < A.length\nA[i]\u00a0& A[j]\u00a0& A[k] == 0, where &\u00a0represents the bitwise-AND operator.\n\n\u00a0\nExample 1:\nInput: [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2\n\n\u00a0\nNote:\n\n1 <= A.length <= 1000\n0 <= A[i] < 2^16\n\n Examples: \nInput: \n[[2, 1, 3]]\nOutput: \n 12\n",
  "196": "Problem: \nGiven a circular\u00a0array\u00a0C of integers represented by\u00a0A, find the maximum possible sum of a non-empty subarray of C.\nHere, a\u00a0circular\u00a0array means the end of the array connects to the beginning of the array.\u00a0 (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i]\u00a0when\u00a0i >= 0.)\nAlso, a subarray may only include each element of the fixed buffer A at most once.\u00a0 (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length\u00a0= k2 % A.length.)\n\u00a0\n\nExample 1:\nInput: [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3\n\n\nExample 2:\nInput: [5,-3,5]\nOutput: 10\nExplanation:\u00a0Subarray [5,5] has maximum sum 5 + 5 = 10\n\n\nExample 3:\nInput: [3,-1,2,-1]\nOutput: 4\nExplanation:\u00a0Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\n\n\nExample 4:\nInput: [3,-2,2,-3]\nOutput: 3\nExplanation:\u00a0Subarray [3] and [3,-2,2] both have maximum sum 3\n\nExample 5:\nInput: [-2,-3,-1]\nOutput: -1\nExplanation:\u00a0Subarray [-1] has maximum sum -1\n\n\u00a0\nNote: \n\n-30000 <= A[i] <= 30000\n1 <= A.length <= 30000\n\n Examples: \nInput: \n[[-2, 3, -2, 1]]\nOutput: \n 3\n",
  "197": "Problem: \nGiven a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\n\nInsert string \"abc\" into any position in t. More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright. Note that tleft and tright may be empty.\n\nReturn true if s is a valid string, otherwise, return false.\n\u00a0\nExample 1:\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.\nExample 2:\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\n\nExample 3:\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.\n\nExample 4:\nInput: s = \"cababc\"\nOutput: false\nExplanation: It is impossible to get \"cababc\" using the operation.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2 * 104\ns consists of letters 'a', 'b', and 'c'\n\n Examples: \nInput: \n['\"aabcbc\"']\nOutput: \n False\n",
  "198": "Problem: \nYou are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.\nYou are also given an integer maxCost.\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.\nIf there is no substring from\u00a0s that can be changed to its corresponding substring from t, return 0.\n\u00a0\nExample 1:\nInput: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3.\nExample 2:\nInput: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.\n\nExample 3:\nInput: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You can't make any change, so the maximum length is 1.\n\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 10^5\n0 <= maxCost <= 10^6\ns and\u00a0t only contain lower case English letters.\n\n Examples: \nInput: \n['\"abcd\"', '\"bcdf\"', 3]\nOutput: \n 4\n",
  "199": "Problem: \nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\n\nYour algorithm should run in O(n) complexity.\n\nExample:\n\n\nInput:\u00a0[100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\n Examples: \nInput: \n[[100, 4, 200, 1, 3, 2]]\nOutput: \n 4\n",
  "200": "Problem: \nGiven an integer\u00a0k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.\nThe Fibonacci numbers are defined as:\n\nF1 = 1\nF2 = 1\nFn = Fn-1 + Fn-2 for n > 2.\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.\n\u00a0\nExample 1:\nInput: k = 7\nOutput: 2 \nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.\nExample 2:\nInput: k = 10\nOutput: 2 \nExplanation: For k = 10 we can use 2 + 8 = 10.\n\nExample 3:\nInput: k = 19\nOutput: 3 \nExplanation: For k = 19 we can use 1 + 5 + 13 = 19.\n\n\u00a0\nConstraints:\n\n1 <= k <= 10^9\n\n Examples: \nInput: \n[7]\nOutput: \n 2\n",
  "201": "Problem: \nGiven n, how many structurally unique BST's (binary search trees) that store values 1 ...\u00a0n?\n\nExample:\n\n\nInput: 3\nOutput: 5\nExplanation:\nGiven n = 3, there are a total of 5 unique BST's:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\n Examples: \nInput: \n[3]\nOutput: \n 5\n",
  "202": "Problem: \nLet's call any (contiguous) subarray B (of A)\u00a0a mountain if the following properties hold:\n\nB.length >= 3\nThere exists some 0 < i\u00a0< B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]\n\n(Note that B could be any subarray of A, including the entire array A.)\nGiven an array A\u00a0of integers,\u00a0return the length of the longest\u00a0mountain.\u00a0\nReturn 0 if there is no mountain.\nExample 1:\nInput: [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\nExample 2:\nInput: [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\nNote:\n\n0 <= A.length <= 10000\n0 <= A[i] <= 10000\n\nFollow up:\n\nCan you solve it using only one pass?\nCan you solve it in O(1) space?\n\n Examples: \nInput: \n[[2, 1, 4, 7, 3, 2, 5]]\nOutput: \n 5\n",
  "203": "Problem: \nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\nAbove is a 7 x 3 grid. How many possible unique paths are there?\n\nNote: m and n will be at most 100.\n\nExample 1:\n\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n\n\nExample 2:\n\n\nInput: m = 7, n = 3\nOutput: 28\n\n Examples: \nInput: \n[3, 7]\nOutput: \n 28\n",
  "205": "Problem: \nIn the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\nFor now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n\n\nNow your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n\n\n\nNote:\n\nThe given numbers of 0s and 1s will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\n Examples: \nInput: \n[['\"10\"', '\"0001\"', '\"111001\"', '\"1\"', '\"0\"'], 5, 3]\nOutput: \n 4\n",
  "206": "Problem: \nGiven an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins. \n\nGiven an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score. \n\nExample 1:\n\nInput: [1, 5, 2]\nOutput: False\nExplanation: Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return False.\n\n\n\nExample 2:\n\nInput: [1, 5, 233, 7]\nOutput: True\nExplanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n\n\n\nNote:\n\n1 \nAny scores in the given array are non-negative integers and will not exceed 10,000,000.\nIf the scores of both players are equal, then player 1 is still the winner.\n\n Examples: \nInput: \n[[1, 5, 2]]\nOutput: \n False\n",
  "207": "Problem: \nGiven a list of non negative integers, arrange them such that they form the largest number.\n\nExample 1:\n\n\nInput: [10,2]\nOutput: \"210\"\n\nExample 2:\n\n\nInput: [3,30,34,5,9]\nOutput: \"9534330\"\n\n\nNote: The result may be very large, so you need to return a string instead of an integer.\n\n Examples: \nInput: \n[[10, 2]]\nOutput: \n 210\n",
  "208": "Problem: \nIn the world of Dota2, there are two parties: the Radiant and the Dire.\n\n\n\nThe Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\n\nBan one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\nAnnounce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.\n\n\n\n\nGiven a string representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party respectively. Then if there are n senators, the size of the given string will be n.\n\n\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\n\n\nSuppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be Radiant or Dire.\n\n\nExample 1:\n\nInput: \"RD\"\nOutput: \"Radiant\"\nExplanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. And the second senator can't exercise any rights any more since his right has been banned. And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\n\n\n\nExample 2:\n\nInput: \"RDD\"\nOutput: \"Dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in the round 1. And the second senator can't exercise any rights anymore since his right has been banned. And the third senator comes from Dire and he can ban the first senator's right in the round 1. And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\n\n\nNote:\n\nThe length of the given string will in the range [1, 10,000].\n\n Examples: \nInput: \n['\"RD\"']\nOutput: \n Dire\n",
  "209": "Problem: \nThere are N piles of stones arranged in a row.\u00a0 The i-th pile has stones[i] stones.\nA move consists of merging exactly\u00a0K\u00a0consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these K piles.\nFind the minimum cost to merge all piles of stones into one pile.\u00a0 If it is impossible, return -1.\n\u00a0\n\nExample 1:\nInput: stones = [3,2,4,1], K = 2\nOutput: 20\nExplanation: \nWe start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.\n\n\nExample 2:\nInput: stones = [3,2,4,1], K = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n\n\nExample 3:\nInput: stones = [3,5,1,2,6], K = 3\nOutput: 25\nExplanation: \nWe start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.\n\n\u00a0\nNote:\n\n1 <= stones.length <= 30\n2 <= K <= 30\n1 <= stones[i] <= 100\n\n Examples: \nInput: \n[[3, 2, 4, 1], 2]\nOutput: \n 20\n",
  "210": "Problem: \nGiven an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.\n\n\nExample 1:\n\n\nInput: nums = [1,2,3,1], k = 3, t = 0\nOutput: true\n\n\n\nExample 2:\n\n\nInput: nums = [1,0,1,1], k = 1, t = 2\nOutput: true\n\n\n\nExample 3:\n\n\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false\n\n Examples: \nInput: \n[[1, 2, 3, 1], 3, 0]\nOutput: \n True\n",
  "211": "Problem: \nGiven a string\u00a0s,\u00a0return the maximum\u00a0number of unique substrings that the given string can be split into.\nYou can split string\u00a0s into any list of\u00a0non-empty substrings, where the concatenation of the substrings forms the original string.\u00a0However, you must split the substrings such that all of them are unique.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\nInput: s = \"ababccc\"\nOutput: 5\nExplanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.\n\nExample 2:\nInput: s = \"aba\"\nOutput: 2\nExplanation: One way to split maximally is ['a', 'ba'].\n\nExample 3:\nInput: s = \"aa\"\nOutput: 1\nExplanation: It is impossible to split the string any further.\n\n\u00a0\nConstraints:\n\n\n1 <= s.length\u00a0<= 16\n\n\ns contains\u00a0only lower case English letters.\n\n Examples: \nInput: \n['\"ababccc\"']\nOutput: \n 6\n",
  "212": "Problem: \nGiven an array of unique integers, each integer is strictly greater than 1.\nWe make a binary tree using these integers\u00a0and each number may be used for any number of times.\nEach non-leaf node's\u00a0value should be equal to the product of the values of it's children.\nHow many binary trees can we make?\u00a0 Return the answer modulo 10 ** 9 + 7.\nExample 1:\nInput: A = [2, 4]\nOutput: 3\nExplanation: We can make these trees: [2], [4], [4, 2, 2]\nExample 2:\nInput: A = [2, 4, 5, 10]\nOutput: 7\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n\u00a0\nNote:\n\n1 <= A.length <=\u00a01000.\n2 <=\u00a0A[i]\u00a0<=\u00a010 ^ 9.\n\n Examples: \nInput: \n[[2, 4]]\nOutput: \n 3\n",
  "213": "Problem: \nImplement pow(x, n), which calculates\u00a0x raised to the power n (xn).\n\nExample 1:\n\n\nInput: 2.00000, 10\nOutput: 1024.00000\n\n\nExample 2:\n\n\nInput: 2.10000, 3\nOutput: 9.26100\n\n\nExample 3:\n\n\nInput: 2.00000, -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\n\nNote:\n\n\n       -100.0 < x < 100.0\n       n is a 32-bit signed integer, within the range\u00a0[\u2212231,\u00a0231\u00a0\u2212 1]\n\n Examples: \nInput: \n[2.0, 10]\nOutput: \n 1024.0\n",
  "214": "Problem: \nGiven an array nums of integers, a move\u00a0consists of choosing any element and decreasing it by 1.\nAn array A is a\u00a0zigzag array\u00a0if either:\n\nEvery even-indexed element is greater than adjacent elements, ie.\u00a0A[0] > A[1] < A[2] > A[3] < A[4] > ...\nOR, every odd-indexed element is greater than adjacent elements, ie.\u00a0A[0] < A[1] > A[2] < A[3] > A[4] < ...\n\nReturn the minimum number of moves to transform the given array nums into a zigzag array.\n\u00a0\nExample 1:\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: We can decrease 2 to 0 or 3 to 1.\n\nExample 2:\nInput: nums = [9,6,1,6,2]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\n\n Examples: \nInput: \n[[1, 2, 3]]\nOutput: \n 2\n",
  "215": "Problem: \nGiven an array nums of\u00a0positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers.\u00a0The array is said to be\u00a0good\u00a0if you can obtain a sum of\u00a01\u00a0from the array by any possible subset and multiplicand.\nReturn\u00a0True\u00a0if the array is good\u00a0otherwise\u00a0return\u00a0False.\n\u00a0\nExample 1:\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1\n\nExample 2:\nInput: nums = [29,6,10]\nOutput: true\nExplanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1\n\nExample 3:\nInput: nums = [3,6]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n\n Examples: \nInput: \n[[12, 5, 7, 23]]\nOutput: \n True\n",
  "216": "Problem: \nGiven the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \u201ccroak\u201d are mixed.\u00a0Return the minimum number of different frogs to finish all the croak in the given string.\nA valid \"croak\"\u00a0means a frog is printing 5 letters \u2018c\u2019, \u2019r\u2019, \u2019o\u2019, \u2019a\u2019, \u2019k\u2019\u00a0sequentially.\u00a0The frogs have to print all five letters to finish a croak.\u00a0If the given string is not a combination of valid\u00a0\"croak\"\u00a0return -1.\n\u00a0\nExample 1:\nInput: croakOfFrogs = \"croakcroak\"\nOutput: 1 \nExplanation: One frog yelling \"croak\" twice.\n\nExample 2:\nInput: croakOfFrogs = \"crcoakroak\"\nOutput: 2 \nExplanation: The minimum number of frogs is two.\u00a0\nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".\n\nExample 3:\nInput: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.\n\nExample 4:\nInput: croakOfFrogs = \"croakcroa\"\nOutput: -1\n\n\u00a0\nConstraints:\n\n1 <=\u00a0croakOfFrogs.length <= 10^5\nAll characters in the string are: 'c', 'r', 'o', 'a' or 'k'.\n\n Examples: \nInput: \n['\"croakcroak\"']\nOutput: \n -1\n",
  "217": "Problem: \nWe have an array A of non-negative integers.\nFor every (contiguous) subarray B =\u00a0[A[i], A[i+1], ..., A[j]] (with i <= j), we take the bitwise OR of all the elements in B, obtaining a result A[i] | A[i+1] | ... | A[j].\nReturn the number of possible\u00a0results.\u00a0 (Results that occur more than once are only counted once in the final answer.)\n\u00a0\n\nExample 1:\nInput: [0]\nOutput: 1\nExplanation: \nThere is only one possible result: 0.\n\n\nExample 2:\nInput: [1,1,2]\nOutput: 3\nExplanation: \nThe possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n\n\nExample 3:\nInput: [1,2,4]\nOutput: 6\nExplanation: \nThe possible results are 1, 2, 3, 4, 6, and 7.\n\n\n\n\n\u00a0\nNote:\n\n1 <= A.length <= 50000\n0 <= A[i] <= 10^9\n\n Examples: \nInput: \n[[0]]\nOutput: \n 1\n",
  "218": "Problem: \nA string S of lowercase letters is given.\u00a0 Then, we may make any number of moves.\nIn each move, we\u00a0choose one\u00a0of the first K letters (starting from the left), remove it,\u00a0and place it at the end of the string.\nReturn the lexicographically smallest string we could have after any number of moves.\n\u00a0\n\nExample 1:\nInput: S = \"cba\", K = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1st character (\"c\") to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character (\"b\") to the end, obtaining the final result \"acb\".\n\n\nExample 2:\nInput: S = \"baaca\", K = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character (\"b\") to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character (\"c\") to the end, obtaining the final result \"aaabc\".\n\n\u00a0\nNote:\n\n1 <= K <= S.length\u00a0<= 1000\nS\u00a0consists of lowercase letters only.\n\n Examples: \nInput: \n['\"cba\"', 1]\nOutput: \n \"\"cba\n",
  "219": "Problem: \nWe are given hours, a list of the number of hours\u00a0worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.\n\u00a0\nExample 1:\nInput: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].\n\n\u00a0\nConstraints:\n\n1 <= hours.length <= 10000\n0 <= hours[i] <= 16\n\n Examples: \nInput: \n[[9, 9, 6, 0, 6, 6, 9]]\nOutput: \n 3\n",
  "220": "Problem: \nToday, the bookstore owner has a store open for customers.length minutes.\u00a0 Every minute, some number of customers (customers[i]) enter the store, and all those customers leave after the end of that minute.\nOn some minutes, the bookstore owner is grumpy.\u00a0 If the bookstore owner is grumpy on the i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0.\u00a0 When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.\nThe bookstore owner knows a secret technique to keep themselves\u00a0not grumpy for X\u00a0minutes straight, but can only use it once.\nReturn the maximum number of customers that can be satisfied throughout the day.\n\u00a0\nExample 1:\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\nOutput: 16\nExplanation:\u00a0The bookstore owner keeps themselves\u00a0not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\n\u00a0\nNote:\n\n1 <= X <=\u00a0customers.length ==\u00a0grumpy.length <= 20000\n0 <=\u00a0customers[i] <= 1000\n0 <=\u00a0grumpy[i] <= 1\n\n Examples: \nInput: \n[[1, 0, 1, 2, 1, 1, 7, 5], [0, 1, 0, 1, 0, 1, 0, 1], 3]\nOutput: \n 16\n",
  "221": "Problem: \nGiven a string S, consider all duplicated substrings: (contiguous) substrings of S that occur 2 or more times.\u00a0 (The occurrences\u00a0may overlap.)\nReturn any duplicated\u00a0substring that has the longest possible length.\u00a0 (If S does not have a duplicated substring, the answer is \"\".)\n\u00a0\nExample 1:\nInput: \"banana\"\nOutput: \"ana\"\n\nExample 2:\nInput: \"abcd\"\nOutput: \"\"\n\n\u00a0\nNote:\n\n2 <= S.length <= 10^5\nS consists of lowercase English letters.\n\n Examples: \nInput: \n['\"banana\"']\nOutput: \n ana\n",
  "223": "Problem: \nGiven an array of citations sorted\u00a0in ascending order (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.\n\nAccording to the\u00a0definition of h-index on Wikipedia: \"A scientist has index\u00a0h\u00a0if\u00a0h\u00a0of his/her\u00a0N\u00a0papers have\u00a0at least\u00a0h\u00a0citations each, and the other\u00a0N \u2212 h\u00a0papers have\u00a0no more than\u00a0h\u00a0citations each.\"\n\nExample:\n\n\nInput: citations = [0,1,3,5,6]\nOutput: 3 \nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had \n             received 0, 1, 3, 5, 6 citations respectively. \n\u00a0            Since the researcher has 3 papers with at least 3 citations each and the remaining \n\u00a0            two with no more than 3 citations each, her h-index is 3.\n\nNote:\n\nIf there are several possible values for\u00a0h, the maximum one is taken as the h-index.\n\nFollow up:\n\n\n       This is a follow up problem to\u00a0H-Index, where citations is now guaranteed to be sorted in ascending order.\n       Could you solve it in logarithmic time complexity?\n\n Examples: \nInput: \n[[0, 1, 3, 5, 6]]\nOutput: \n 3\n",
  "224": "Problem: \nGiven a string S and a string T, count the number of distinct subsequences of S which equals T.\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\n\nExample 1:\n\n\nInput: S = \"rabbbit\", T = \"rabbit\"\nOutput:\u00a03\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n\n\nExample 2:\n\n\nInput: S = \"babgbag\", T = \"bag\"\nOutput:\u00a05\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n\n Examples: \nInput: \n['\"rabbbit\"', '\"rabbit\"']\nOutput: \n 3\n",
  "225": "Problem: \nThere are\u00a0N dominoes in a line, and we place each domino vertically upright.\nIn the beginning, we simultaneously push\u00a0some of the dominoes either to the left or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left.\nSimilarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\nFor the purposes of this question, we will consider that a falling domino\u00a0expends no additional force to a falling or already fallen domino.\nGiven a string \"S\" representing the initial state.\u00a0S[i] = 'L', if the i-th domino has been pushed to the left; S[i] = 'R', if the i-th domino has been pushed to the right; S[i] = '.',\u00a0if the i-th domino has not been pushed.\nReturn a string representing the final state.\u00a0\nExample 1:\nInput: \".L.R...LR..L..\"\nOutput: \"LL.RR.LLRRLL..\"\n\nExample 2:\nInput: \"RR.L\"\nOutput: \"RR.L\"\nExplanation: The first domino expends no additional force on the second domino.\n\nNote:\n\n0 <= N\u00a0<= 10^5\nString\u00a0dominoes contains only\u00a0'L', 'R' and '.'\n\n Examples: \nInput: \n['\".L.R...LR..L..\"']\nOutput: \n LLL.RR.LLRRLL...\n",
  "226": "Problem: \nGiven an array A of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.\nReturn the number of permutations of A that are squareful.\u00a0 Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].\n\u00a0\nExample 1:\nInput: [1,17,8]\nOutput: 2\nExplanation: \n[1,8,17] and [17,8,1] are the valid permutations.\n\nExample 2:\nInput: [2,2,2]\nOutput: 1\n\n\u00a0\nNote:\n\n1 <= A.length <= 12\n0 <= A[i] <= 1e9\n\n Examples: \nInput: \n[[1, 17, 8]]\nOutput: \n 2\n",
  "228": "Problem: \nGiven a string s and an integer k.\nReturn the maximum number of vowel letters in any substring of s\u00a0with\u00a0length k.\nVowel letters in\u00a0English are\u00a0(a, e, i, o, u).\n\u00a0\nExample 1:\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.\n\nExample 2:\nInput: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.\n\nExample 3:\nInput: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\n\nExample 4:\nInput: s = \"rhythms\", k = 4\nOutput: 0\nExplanation: We can see that s doesn't have any vowel letters.\n\nExample 5:\nInput: s = \"tryhard\", k = 4\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\ns\u00a0consists of lowercase English letters.\n1 <= k <= s.length\n\n Examples: \nInput: \n['\"abciiidef\"', 3]\nOutput: \n 3\n",
  "229": "Problem: \nGiven an array of integers A\u00a0with even length, return true if and only if it is possible to reorder it such that A[2 * i + 1] = 2 * A[2 * i] for every 0 <=\u00a0i < len(A) / 2.\n\n\n\n\n\n\n\n\n\u00a0\nExample 1:\nInput: A = [3,1,3,6]\nOutput: false\n\nExample 2:\nInput: A = [2,1,2,6]\nOutput: false\n\nExample 3:\nInput: A = [4,-2,2,-4]\nOutput: true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n\nExample 4:\nInput: A = [1,2,4,16,8,4]\nOutput: false\n\n\u00a0\nConstraints:\n\n0 <= A.length <= 3 *\u00a0104\nA.length is even.\n-105 <= A[i] <= 105\n\n Examples: \nInput: \n[[3, 1, 3, 6]]\nOutput: \n False\n",
  "230": "Problem: \nGiven a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\n\n\nNote:\n\nThe length of num is less than 10002 and will be \u2265 k.\nThe given num does not contain any leading zero.\n\n\n\n\nExample 1:\n\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\n\n\nExample 2:\n\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\n\n\nExample 3:\n\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n\n Examples: \nInput: \n['\"1432219\"', 3]\nOutput: \n \"1219\"\n",
  "231": "Problem: \nGiven an unsorted integer array, find the smallest missing\u00a0positive integer.\n\nExample 1:\n\n\nInput: [1,2,0]\nOutput: 3\n\n\nExample 2:\n\n\nInput: [3,4,-1,1]\nOutput: 2\n\n\nExample 3:\n\n\nInput: [7,8,9,11,12]\nOutput: 1\n\n\nNote:\n\nYour algorithm should run in O(n) time and uses constant extra space.\n\n Examples: \nInput: \n[[0, 1, 2, 0]]\nOutput: \n 3\n",
  "232": "Problem: \nIn LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\n\n\nYou may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.\n\nExample 1:\n\nInput: [1,4], 2\nOutput: 4\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.\n\n\n\n\nExample 2:\n\nInput: [1,2], 2\nOutput: 3\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.\n\n\n\n\nNote:\n\nYou may assume the length of given time series array won't exceed 10000.\nYou may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.\n\n Examples: \nInput: \n[[1, 4], 2]\nOutput: \n 4\n",
  "234": "Problem: \nGiven a string\u00a0S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid.\nFormally, a parentheses string is valid if and only if:\n\nIt is the empty string, or\nIt can be written as AB\u00a0(A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\n\nGiven a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.\n\u00a0\nExample 1:\nInput: \"())\"\nOutput: 1\n\n\nExample 2:\nInput: \"(((\"\nOutput: 3\n\n\nExample 3:\nInput: \"()\"\nOutput: 0\n\n\nExample 4:\nInput: \"()))((\"\nOutput: 4\n\u00a0\n\n\n\nNote:\n\nS.length <= 1000\nS only consists of '(' and ')' characters.\n\n Examples: \nInput: \n['\"())\"']\nOutput: \n 1\n",
  "236": "Problem: \nA string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)\nWe are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.\nReturn the minimum number of flips to make S\u00a0monotone increasing.\n\u00a0\n\nExample 1:\nInput: \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.\n\n\nExample 2:\nInput: \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.\n\n\nExample 3:\nInput: \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.\n\n\u00a0\nNote:\n\n1 <= S.length <= 20000\nS only consists of '0' and '1' characters.\n\n Examples: \nInput: \n['\"00110\"']\nOutput: \n 2\n",
  "237": "Problem: \nIn an array A of 0s and 1s, how many non-empty subarrays have sum S?\n\u00a0\nExample 1:\nInput: A = [1,0,1,0,1], S = 2\nOutput: 4\nExplanation: \nThe 4 subarrays are bolded below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n\n\u00a0\nNote:\n\nA.length <= 30000\n0 <= S <= A.length\nA[i]\u00a0is either 0\u00a0or 1.\n\n Examples: \nInput: \n[[1, 0, 1, 0, 1], 2]\nOutput: \n 4\n",
  "239": "Problem: \nWe have a set of items: the i-th item has value values[i] and label labels[i].\nThen, we choose\u00a0a subset S of these items, such that:\n\n|S| <= num_wanted\nFor every label L, the number of items in S with\u00a0label L is <= use_limit.\n\nReturn the largest possible sum of the subset S.\n\u00a0\n\nExample 1:\nInput: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\nOutput: 9\nExplanation: The subset chosen is the first, third, and fifth item.\n\n\nExample 2:\nInput: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\nOutput: 12\nExplanation: The subset chosen is the first, second, and third item.\n\n\nExample 3:\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1\nOutput:\u00a016\nExplanation: The subset chosen is the first and fourth item.\n\n\nExample 4:\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2\nOutput: 24\nExplanation: The subset chosen is the first, second, and fourth item.\n\n\u00a0\nNote:\n\n1 <= values.length == labels.length <= 20000\n0 <= values[i], labels[i]\u00a0<= 20000\n1 <= num_wanted, use_limit\u00a0<= values.length\n\n Examples: \nInput: \n[[5, 4, 3, 2, 1], [1, 1, 2, 2, 3], 3, 1]\nOutput: \n 9\n",
  "240": "Problem: \nGiven a string, sort it in decreasing order based on the frequency of characters.\n\nExample 1:\n\nInput:\n\"tree\"\n\nOutput:\n\"eert\"\n\nExplanation:\n'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n\n\n\nExample 2:\n\nInput:\n\"cccaaa\"\n\nOutput:\n\"cccaaa\"\n\nExplanation:\nBoth 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n\n\n\nExample 3:\n\nInput:\n\"Aabb\"\n\nOutput:\n\"bbAa\"\n\nExplanation:\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n\n Examples: \nInput: \n['\"tree\"']\nOutput: \n \"\"eetr\n",
  "241": "Problem: \nOn an infinite plane, a\u00a0robot initially stands at (0, 0) and faces north.\u00a0\u00a0The robot can receive one of three instructions:\n\n\"G\": go straight 1 unit;\n\"L\": turn 90 degrees to the left;\n\"R\": turn 90 degress to the right.\n\nThe robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\u00a0\nExample 1:\nInput: \"GGLLGG\"\nOutput: true\nExplanation: \nThe robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).\nWhen repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.\n\nExample 2:\nInput: \"GG\"\nOutput: false\nExplanation: \nThe robot moves north indefinitely.\n\nExample 3:\nInput: \"GL\"\nOutput: true\nExplanation: \nThe robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...\n\n\u00a0\nNote:\n\n1 <= instructions.length <= 100\ninstructions[i] is in {'G', 'L', 'R'}\n\n Examples: \nInput: \n['\"GGLLGG\"']\nOutput: \n True\n",
  "243": "Problem: \nOn a table are N cards, with a positive integer printed on the front and back of each card (possibly different).\nWe flip any number of cards, and after we choose one\u00a0card.\u00a0\nIf the number X on the back of the chosen\u00a0card is not on the front of any card, then this number X is good.\nWhat is the smallest number that is good?\u00a0 If no number is good, output 0.\nHere, fronts[i] and backs[i] represent the number on the front and back of card i.\u00a0\nA\u00a0flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.\nExample:\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: 2\nExplanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\nWe choose the second card, which has number 2 on the back, and it isn't on the front of any card, so 2 is good.\n\u00a0\nNote:\n\n1 <= fronts.length == backs.length\u00a0<=\u00a01000.\n1 <=\u00a0fronts[i]\u00a0<= 2000.\n1 <= backs[i]\u00a0<= 2000.\n\n Examples: \nInput: \n[[1, 2, 4, 4, 7], [1, 3, 4, 1, 3]]\nOutput: \n 2\n",
  "244": "Problem: \nGiven a number\u00a0s in their binary representation. Return the number of steps to reduce it to 1 under the following rules:\n\n\nIf the current number is even, you have to divide it by 2.\n\n\nIf the current number is odd, you have to add 1 to it.\n\n\nIt's guaranteed that you can always reach to one for all testcases.\n\u00a0\nExample 1:\nInput: s = \"1101\"\nOutput: 6\nExplanation: \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\u00a0\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\u00a0 \nStep 5) 4 is even, divide by 2 and obtain 2.\u00a0\nStep 6) 2 is even, divide by 2 and obtain 1.\u00a0 \n\nExample 2:\nInput: s = \"10\"\nOutput: 1\nExplanation: \"10\" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.\u00a0 \n\nExample 3:\nInput: s = \"1\"\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= s.length\u00a0<= 500\ns consists of characters '0' or '1'\ns[0] == '1'\n\n Examples: \nInput: \n['\"1101\"']\nOutput: \n 8\n",
  "245": "Problem: \nGiven a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.\n\nExample:\n\nInput: [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation:\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \n\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n\n\n\nNote:\n\nThe length of the input array is [1, 10].\nElements in the given array will be in range [2, 1000].\nThere is only one optimal division for each test case.\n\n Examples: \nInput: \n[[1000, 100, 10, 2]]\nOutput: \n 1000/(100/10/2)\n",
  "248": "Problem: \nGiven a 2D array of characters\u00a0grid\u00a0of size m x n, you need to find if there exists any cycle consisting of the same value\u00a0in\u00a0grid.\nA cycle is a path of length 4\u00a0or more\u00a0in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle\u00a0(1, 1) -> (1, 2) -> (1, 1)\u00a0is invalid because from\u00a0(1, 2)\u00a0we visited\u00a0(1, 1)\u00a0which was the last visited cell.\nReturn\u00a0true\u00a0if any cycle of the same value exists in\u00a0grid, otherwise, return\u00a0false.\n\u00a0\nExample 1:\n\nInput: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:\n\n\nExample 2:\n\nInput: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:\n\n\nExample 3:\n\nInput: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m <= 500\n1 <= n <= 500\ngrid\u00a0consists only of lowercase\u00a0English letters.\n\n Examples: \nInput: \n[[['\"a\"', '\"a\"', '\"a\"', '\"a\"'], ['\"a\"', '\"b\"', '\"b\"', '\"a\"'], ['\"a\"', '\"b\"', '\"b\"', '\"a\"'], ['\"a\"', '\"a\"', '\"a\"', '\"a\"'], [], []]]\nOutput: \n True\n",
  "250": "Problem: \nThere are N workers.\u00a0 The i-th worker has a quality[i] and a minimum wage expectation wage[i].\nNow we want to hire exactly K\u00a0workers to form a paid group.\u00a0 When hiring a group of K workers, we must pay them according to the following rules:\n\nEvery worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\nEvery worker in the paid group must be paid at least their minimum wage expectation.\n\nReturn the least amount of money needed to form a paid group satisfying the above conditions.\n\u00a0\n\n\n\nExample 1:\nInput: quality = [10,20,5], wage = [70,50,30], K = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0-th worker and 35 to 2-th worker.\n\n\nExample 2:\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. \n\n\u00a0\nNote:\n\n1 <= K <= N <= 10000, where N = quality.length = wage.length\n1 <= quality[i] <= 10000\n1 <= wage[i] <= 10000\nAnswers within 10^-5 of the correct answer will be considered correct.\n\n Examples: \nInput: \n[[10, 20, 5], [70, 50, 30], 2]\nOutput: \n 105.0\n",
  "251": "Problem: \nNormally, the factorial of a positive integer n\u00a0is the product of all positive integers less than or equal to n.\u00a0 For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.\nWe instead make a clumsy factorial:\u00a0using the integers in decreasing order, we\u00a0swap out the multiply operations for a fixed rotation of operations:\u00a0multiply (*), divide (/), add (+) and subtract (-) in this order.\nFor example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.\u00a0 However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\nAdditionally, the division that we use is floor division\u00a0such that\u00a010 * 9 / 8\u00a0equals\u00a011.\u00a0 This guarantees the result is\u00a0an integer.\nImplement the\u00a0clumsy\u00a0function\u00a0as defined above: given an integer N, it returns the clumsy factorial of N.\n\u00a0\nExample 1:\nInput: 4\nOutput:\u00a07\nExplanation: 7 = 4 * 3 / 2 + 1\n\nExample 2:\nInput: 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n\n\u00a0\nNote:\n\n1 <= N <= 10000\n-2^31 <= answer <= 2^31 - 1\u00a0 (The answer is guaranteed to fit within a 32-bit integer.)\n\n Examples: \nInput: \n[4]\nOutput: \n 7\n",
  "252": "Problem: \nThere is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).\nThere are\u00a0n + 1 taps located\u00a0at points [0, 1, ..., n] in the garden.\nGiven an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.\n\u00a0\nExample 1:\n\nInput: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n\nExample 2:\nInput: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.\n\nExample 3:\nInput: n = 7, ranges = [1,2,1,0,2,1,0,1]\nOutput: 3\n\nExample 4:\nInput: n = 8, ranges = [4,0,0,0,0,0,0,0,4]\nOutput: 2\n\nExample 5:\nInput: n = 8, ranges = [4,0,0,0,4,0,0,0,4]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^4\nranges.length == n + 1\n0 <= ranges[i] <= 100\n\n Examples: \nInput: \n[5, [3, 4, 1, 1, 0, 0]]\nOutput: \n 1\n",
  "253": "Problem: \nYou have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. \n\n\nFor each move, you could choose any m (1 \u2264 m \u2264 n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  \n\nGiven an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\n\nExample1\n\nInput: [1,0,5]\n\nOutput: 3\n\nExplanation: \n1st move:    1     0     1     1     4\n2nd move:    1     2     1     3    \n3rd move:    2     1     2     2     2   \n\n\nExample2\n\nInput: [0,3,0]\n\nOutput: 2\n\nExplanation: \n1st move:    0     1     2     0    \n2nd move:    1     2 --> 0    =>    1     1     1     \n\n\nExample3\n\nInput: [0,2,0]\n\nOutput: -1\n\nExplanation: \nIt's impossible to make all the three washing machines have the same number of dresses. \n\n\n\n\nNote:\n\nThe range of n is [1, 10000].\nThe range of dresses number in a super washing machine is [0, 1e5].\n\n Examples: \nInput: \n[[1, 0, 5]]\nOutput: \n 3\n",
  "254": "Problem: \nGiven a non-negative integer n, count all numbers with unique digits, x, where 0 \u2264 x < 10n.\n\n\n    Example:\nGiven n = 2, return 91. (The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding [11,22,33,44,55,66,77,88,99])\n\n\nCredits:Special thanks to @memoryless for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[2]\nOutput: \n 91\n",
  "255": "Problem: \nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nExample:\n\n\nInput: [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2.\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nNote:\n\nYou can assume that you can always reach the last index.\n\n Examples: \nInput: \n[[2, 3, 1, 1, 4]]\nOutput: \n 2\n",
  "256": "Problem: \nKoko loves to eat bananas.\u00a0 There are N\u00a0piles of bananas, the i-th\u00a0pile has piles[i] bananas.\u00a0 The guards have gone and will come back in H hours.\nKoko can decide her bananas-per-hour eating speed of K.\u00a0 Each hour, she chooses some pile of bananas, and eats K bananas from that pile.\u00a0 If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.\nKoko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.\nReturn the minimum integer K such that she can eat all the bananas within H hours.\n\u00a0\nExample 1:\nInput: piles = [3,6,7,11], H = 8\nOutput: 4\nExample 2:\nInput: piles = [30,11,23,4,20], H = 5\nOutput: 30\nExample 3:\nInput: piles = [30,11,23,4,20], H = 6\nOutput: 23\n\n\u00a0\nConstraints:\n\n1 <= piles.length <= 10^4\npiles.length <= H <= 10^9\n1 <= piles[i] <= 10^9\n\n Examples: \nInput: \n[[3, 6, 7, 11], 8]\nOutput: \n 4\n",
  "257": "Problem: \nYou are given an undirected weighted graph of\u00a0n\u00a0nodes (0-indexed), represented by an edge list where\u00a0edges[i] = [a, b]\u00a0is an undirected edge connecting the nodes\u00a0a\u00a0and\u00a0b\u00a0with a probability of success of traversing that edge\u00a0succProb[i].\nGiven two nodes\u00a0start\u00a0and\u00a0end, find the path with the maximum probability of success to go from\u00a0start\u00a0to\u00a0end\u00a0and return its success probability.\nIf there is no path from\u00a0start\u00a0to\u00a0end, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n\u00a0\nExample 1:\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n\nExample 2:\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000\n\nExample 3:\n\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\u00a0There is no path between 0 and 2.\n\n\u00a0\nConstraints:\n\n2 <= n <= 10^4\n0 <= start, end < n\nstart != end\n0 <= a, b < n\na != b\n0 <= succProb.length == edges.length <= 2*10^4\n0 <= succProb[i] <= 1\nThere is at most one edge between every two nodes.\n\n Examples: \nInput: \n[3, [[0, 1], [1, 2], [0, 2], [], []], [0.5, 0.5, 0.2], 0, 2]\nOutput: \n 0.25\n",
  "259": "Problem: \nGiven an array of integers nums and an integer threshold, we will choose a positive integer divisor and\u00a0divide\u00a0all the array by it and sum the result of the division. Find the smallest divisor such that the result mentioned above is less than\u00a0or equal to threshold.\nEach\u00a0result of\u00a0division is rounded\u00a0to the nearest integer greater than or equal to that element.\u00a0(For example: 7/3 = 3 and 10/2 = 5).\nIt is guaranteed that there will be an answer.\n\u00a0\nExample 1:\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n\nExample 2:\nInput: nums = [2,3,5,7,11], threshold = 11\nOutput: 3\n\nExample 3:\nInput: nums = [19], threshold = 5\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5 * 10^4\n1 <= nums[i] <= 10^6\nnums.length <=\u00a0threshold <= 10^6\n\n Examples: \nInput: \n[[1, 2, 5, 9], 6]\nOutput: \n 5\n",
  "260": "Problem: \nA sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence. \n\nFor example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.\n\nGiven a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.\n\nExamples:\n\nInput: [1,7,4,9,2,5]\nOutput: 6\nThe entire sequence is a wiggle sequence.\n\nInput: [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nThere are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].\n\nInput: [1,2,3,4,5,6,7,8,9]\nOutput: 2\n\n\n\nFollow up:\nCan you do it in O(n) time?\n\n\nCredits:Special thanks to @agave and @StefanPochmann for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[[1, 7, 4, 9, 2, 5]]\nOutput: \n 6\n",
  "261": "Problem: \nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\nExample 1:\n\n\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\n\n\nExample 2:\n\n\nInput: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\n\nNote: \nYou may assume k is always valid, 1 \u2264 k \u2264 array's length.\n\n Examples: \nInput: \n[[2, 1, 3, 4, 5, 6], 2]\nOutput: \n 5\n",
  "263": "Problem: \nThe chess knight has a unique movement,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\u00a0(i.e. blue cell).\n\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 109 + 7.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\nExample 2:\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n\nExample 3:\nInput: n = 3\nOutput: 46\n\nExample 4:\nInput: n = 4\nOutput: 104\n\nExample 5:\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n\n\u00a0\nConstraints:\n\n1 <= n <= 5000\n\n Examples: \nInput: \n[1]\nOutput: \n 10\n",
  "264": "Problem: \nGiven an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.\nReturn the maximum possible length of s.\n\u00a0\nExample 1:\nInput: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".\nMaximum length is 4.\n\nExample 2:\nInput: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible solutions are \"chaers\" and \"acters\".\n\nExample 3:\nInput: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 16\n1 <= arr[i].length <= 26\narr[i] contains only lower case English letters.\n\n Examples: \nInput: \n[['\"un\"', '\"iq\"', '\"ue\"']]\nOutput: \n 0\n",
  "265": "Problem: \nGiven an array nums and an integer target.\nReturn the maximum number of non-empty\u00a0non-overlapping subarrays such that the sum of values in each subarray is equal to target.\n\u00a0\nExample 1:\nInput: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n\nExample 2:\nInput: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\nExample 3:\nInput: nums = [-2,6,6,3,5,4,1,2,8], target = 10\nOutput: 3\n\nExample 4:\nInput: nums = [0,0,0], target = 0\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= nums.length <=\u00a010^5\n-10^4 <= nums[i] <=\u00a010^4\n0 <= target <= 10^6\n\n Examples: \nInput: \n[[1, 1, 1, 1, 1], 2]\nOutput: \n 2\n",
  "266": "Problem: \nYou are given a string s, a\u00a0split is called good\u00a0if you can split\u00a0s into 2\u00a0non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.\nReturn the number of good splits you can make in s.\n\u00a0\nExample 1:\nInput: s = \"aacaba\"\nOutput: 2\nExplanation: There are 5 ways to split \"aacaba\" and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.\n\nExample 2:\nInput: s = \"abcd\"\nOutput: 1\nExplanation: Split the string as follows (\"ab\", \"cd\").\n\nExample 3:\nInput: s = \"aaaaa\"\nOutput: 4\nExplanation: All possible splits are good.\nExample 4:\nInput: s = \"acbadbaada\"\nOutput: 2\n\n\u00a0\nConstraints:\n\ns contains only lowercase English letters.\n1 <= s.length <= 10^5\n\n Examples: \nInput: \n['\"aacaba\"']\nOutput: \n 2\n",
  "267": "Problem: \nEvaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\n\nNote:\n\n\n       Division between two integers should truncate toward zero.\n       The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't\u00a0be any\u00a0divide\u00a0by zero operation.\n\n\nExample 1:\n\n\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\n\nExample 2:\n\n\nInput: [\"4\", \"13\", \"5\", \"/\", \"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\n\nExample 3:\n\n\nInput: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\nOutput: 22\nExplanation: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n Examples: \nInput: \n[['\"2\"', '\"1\"']]\nOutput: \n 0\n",
  "268": "Problem: \nGiven a number N, return a string consisting of \"0\"s and \"1\"s\u00a0that represents its value in base -2\u00a0(negative two).\nThe returned string must have no leading zeroes, unless the string is \"0\".\n\u00a0\n\nExample 1:\nInput: 2\nOutput: \"110\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 = 2\n\n\nExample 2:\nInput: 3\nOutput: \"111\"\nExplantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3\n\n\nExample 3:\nInput: 4\nOutput: \"100\"\nExplantion: (-2) ^ 2 = 4\n\n\u00a0\nNote:\n\n0 <= N <= 10^9\n\n Examples: \nInput: \n[2]\nOutput: \n 110\n",
  "269": "Problem: \nGiven an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.\n\u00a0\nExample 1:\n\nInput: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.\n\nExample 2:\n\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.\nExample 3:\nInput: nums = [1,1,1,1,1], k = 0\nOutput: true\n\nExample 4:\nInput: nums = [0,1,0,1], k = 1\nOutput: true\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n0 <= k <= nums.length\nnums[i]\u00a0is\u00a00\u00a0or\u00a01\n\n Examples: \nInput: \n[[1, 0, 0, 0, 1, 0, 0, 1], 2]\nOutput: \n True\n",
  "271": "Problem: \nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\n\nEach element in the array represents your maximum jump length at that position.\n\nDetermine if you are able to reach the last index.\n\nExample 1:\n\n\nInput: [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n\nExample 2:\n\n\nInput: [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum\n\u00a0            jump length is 0, which makes it impossible to reach the last index.\n\n Examples: \nInput: \n[[2, 3, 1, 1, 4]]\nOutput: \n True\n",
  "272": "Problem: \nGiven n boxes, each box is given in the format [status, candies, keys, containedBoxes] where:\n\nstatus[i]: an integer which is 1 if\u00a0box[i] is open and 0 if\u00a0box[i] is closed.\ncandies[i]:\u00a0an integer representing the number of candies in box[i].\nkeys[i]: an array contains the indices of the boxes you can open with the key in box[i].\ncontainedBoxes[i]: an array contains the indices of the boxes found in box[i].\n\nYou will start with some boxes given in initialBoxes array. You can take all the candies in any open\u00a0box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\nReturn the maximum number of candies you can get following the rules above.\n\u00a0\nExample 1:\nInput: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n\nExample 2:\nInput: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\nOutput: 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.\n\nExample 3:\nInput: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]\nOutput: 1\n\nExample 4:\nInput: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []\nOutput: 0\n\nExample 5:\nInput: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]\nOutput: 7\n\n\u00a0\nConstraints:\n\n1 <= status.length <= 1000\nstatus.length == candies.length == keys.length == containedBoxes.length == n\nstatus[i] is 0 or 1.\n1 <= candies[i] <= 1000\n0 <= keys[i].length <= status.length\n0 <= keys[i][j] < status.length\nAll values in keys[i] are unique.\n0 <= containedBoxes[i].length <= status.length\n0 <= containedBoxes[i][j] < status.length\nAll values in containedBoxes[i] are unique.\nEach box is contained in one box at most.\n0 <= initialBoxes.length\u00a0<= status.length\n0 <= initialBoxes[i] < status.length\n\n Examples: \nInput: \n[[1, 1, 1, 0], [7, 5, 4, 100], [[], [], [1], [], [], []], [[1, 2], [3], [], [], [], []], [0]]\nOutput: \n 16\n",
  "273": "Problem: \nYour car starts at position 0 and speed +1 on an infinite number line.\u00a0 (Your car can go into negative positions.)\nYour car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).\nWhen you get an instruction \"A\", your car does the following:\u00a0position += speed, speed *= 2.\nWhen you get an instruction \"R\", your car does the following: if your speed is positive then\u00a0speed = -1\u00a0, otherwise\u00a0speed = 1.\u00a0 (Your position stays the same.)\nFor example, after commands \"AAR\", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.\nNow for some target position, say the length of the shortest sequence of instructions to get there.\nExample 1:\nInput: \ntarget = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0->1->3.\n\nExample 2:\nInput: \ntarget = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0->1->3->7->7->6.\n\n\u00a0\nNote: \n\n1 <= target <= 10000.\n\n Examples: \nInput: \n[3]\nOutput: \n 2\n",
  "275": "Problem: \nGiven a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:\n\nAny left parenthesis '(' must have a corresponding right parenthesis ')'.\nAny right parenthesis ')' must have a corresponding left parenthesis '('.\nLeft parenthesis '(' must go before the corresponding right parenthesis ')'.\n'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.\nAn empty string is also valid.\n\n\n\nExample 1:\n\nInput: \"()\"\nOutput: True\n\n\n\nExample 2:\n\nInput: \"(*)\"\nOutput: True\n\n\n\nExample 3:\n\nInput: \"(*))\"\nOutput: True\n\n\n\nNote:\n\nThe string size will be in the range [1, 100].\n\n Examples: \nInput: \n['\"()\"']\nOutput: \n True\n",
  "277": "Problem: \nThere is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\nAt moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change\u00a0color to blue only if it is on and all the previous bulbs (to the left)\u00a0are turned on too.\nReturn the number of moments in\u00a0which all\u00a0turned on bulbs\u00a0are blue.\n\u00a0\nExample 1:\n\nInput: light = [2,1,3,5,4]\nOutput: 3\nExplanation: All bulbs turned on, are blue at the moment 1, 2 and 4.\n\nExample 2:\nInput: light = [3,2,4,1,5]\nOutput: 2\nExplanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).\n\nExample 3:\nInput: light = [4,1,2,3]\nOutput: 1\nExplanation: All bulbs turned on, are blue at the moment 3 (index-0).\nBulb 4th changes to blue at the moment 3.\n\nExample 4:\nInput: light = [2,1,4,3,6,5]\nOutput: 3\n\nExample 5:\nInput: light = [1,2,3,4,5,6]\nOutput: 6\n\n\u00a0\nConstraints:\n\nn ==\u00a0light.length\n1 <= n <= 5 * 10^4\nlight is a permutation of\u00a0\u00a0[1, 2, ..., n]\n\n Examples: \nInput: \n[[2, 1, 3, 5, 4]]\nOutput: \n 3\n",
  "278": "Problem: \nGiven an integer array of digits,\u00a0return the largest multiple of three that can be formed by concatenating some of the given digits in any order.\nSince the answer may not fit in an integer data type, return the answer as a string.\nIf there is no answer return an empty string.\n\u00a0\nExample 1:\nInput: digits = [8,1,9]\nOutput: \"981\"\n\nExample 2:\nInput: digits = [8,6,7,1,0]\nOutput: \"8760\"\n\nExample 3:\nInput: digits = [1]\nOutput: \"\"\n\nExample 4:\nInput: digits = [0,0,0,0,0,0]\nOutput: \"0\"\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 10^4\n0 <= digits[i] <= 9\nThe returning answer must not contain unnecessary leading zeros.\n\n Examples: \nInput: \n[[9, 8, 1]]\nOutput: \n 981\n",
  "279": "Problem: \nThe set [1,2,3,...,n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\n       \"123\"\n       \"132\"\n       \"213\"\n       \"231\"\n       \"312\"\n       \"321\"\n\n\nGiven n and k, return the kth permutation sequence.\n\nNote:\n\n\n       Given n will be between 1 and 9 inclusive.\n       Given\u00a0k\u00a0will be between 1 and n! inclusive.\n\n\nExample 1:\n\n\nInput: n = 3, k = 3\nOutput: \"213\"\n\n\nExample 2:\n\n\nInput: n = 4, k = 9\nOutput: \"2314\"\n\n Examples: \nInput: \n[3, 3]\nOutput: \n 213\n",
  "280": "Problem: \nYou are given a string\u00a0s containing lowercase letters and an integer k. You need to :\n\nFirst, change some characters of s\u00a0to other lowercase English letters.\nThen divide s\u00a0into k non-empty disjoint substrings such that each substring is palindrome.\n\nReturn the minimal number of characters that you need to change\u00a0to divide the string.\n\u00a0\nExample 1:\nInput: s = \"abc\", k = 2\nOutput: 1\nExplanation:\u00a0You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.\n\nExample 2:\nInput: s = \"aabbc\", k = 3\nOutput: 0\nExplanation:\u00a0You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.\nExample 3:\nInput: s = \"leetcode\", k = 8\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= k <= s.length <= 100.\ns\u00a0only contains lowercase English letters.\n\n Examples: \nInput: \n['\"abc\"', 2]\nOutput: \n 2\n",
  "281": "Problem: \nGiven two strings\u00a0s\u00a0and\u00a0t, your goal is to convert\u00a0s\u00a0into\u00a0t\u00a0in\u00a0k\u00a0moves or less.\nDuring the\u00a0ith\u00a0(1 <= i <= k)\u00a0move you can:\n\nChoose any index\u00a0j\u00a0(1-indexed) from\u00a0s, such that\u00a01 <= j <= s.length\u00a0and j\u00a0has not been chosen in any previous move,\u00a0and shift the character at that index\u00a0i\u00a0times.\nDo nothing.\n\nShifting a character means replacing it by the next letter in the alphabet\u00a0(wrapping around so that\u00a0'z'\u00a0becomes\u00a0'a'). Shifting a character by\u00a0i\u00a0means applying the shift operations\u00a0i\u00a0times.\nRemember that any index\u00a0j\u00a0can be picked at most once.\nReturn\u00a0true\u00a0if it's possible to convert\u00a0s\u00a0into\u00a0t\u00a0in no more than\u00a0k\u00a0moves, otherwise return\u00a0false.\n\u00a0\nExample 1:\nInput: s = \"input\", t = \"ouput\", k = 9\nOutput: true\nExplanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.\n\nExample 2:\nInput: s = \"abc\", t = \"bcd\", k = 10\nOutput: false\nExplanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n\nExample 3:\nInput: s = \"aab\", t = \"bbb\", k = 27\nOutput: true\nExplanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.\n\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 10^5\n0 <= k <= 10^9\ns, t contain\u00a0only lowercase English letters.\n\n Examples: \nInput: \n['\"input\"', '\"ouput\"', 9]\nOutput: \n True\n",
  "283": "Problem: \nGiven an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. \n\nExample 1:\n\nInput:\nnums = [1,3,1]\nk = 1\nOutput: 0 \nExplanation:\nHere are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\n\n\n\nNote:\n\n2 .\n0 .\n1 .\n\n Examples: \nInput: \n[[1, 1, 3], 1]\nOutput: \n 0\n",
  "284": "Problem: \nYou have an initial power P, an initial score of 0 points, and a bag of tokens.\nEach token can be used at most once, has a value token[i], and has potentially two ways to use it.\n\nIf we have at least token[i] power, we may play the token face up, losing token[i] power, and gaining 1 point.\nIf we have at least 1 point, we may play the token face down, gaining token[i] power, and losing 1 point.\n\nReturn the largest number of points we can have after playing any number of tokens.\n\u00a0\n\n\n\nExample 1:\nInput: tokens = [100], P = 50\nOutput: 0\n\n\nExample 2:\nInput: tokens = [100,200], P = 150\nOutput: 1\n\n\nExample 3:\nInput: tokens = [100,200,300,400], P = 200\nOutput: 2\n\n\u00a0\nNote:\n\ntokens.length <= 1000\n0 <= tokens[i] < 10000\n0 <= P < 10000\n\n Examples: \nInput: \n[[100], 50]\nOutput: \n 0\n",
  "285": "Problem: \nGiven an array A of integers, for each integer A[i] we need to choose either\u00a0x = -K\u00a0or x = K, and add x to A[i] (only once).\nAfter this process, we have some array B.\nReturn the smallest possible difference between the maximum value of B\u00a0and the minimum value of B.\n\u00a0\n\n\n\nExample 1:\nInput: A = [1], K = 0\nOutput: 0\nExplanation: B = [1]\n\n\nExample 2:\nInput: A = [0,10], K = 2\nOutput: 6\nExplanation: B = [2,8]\n\n\nExample 3:\nInput: A = [1,3,6], K = 3\nOutput: 3\nExplanation: B = [4,6,3]\n\n\u00a0\nNote:\n\n1 <= A.length <= 10000\n0 <= A[i] <= 10000\n0 <= K <= 10000\n\n Examples: \nInput: \n[[1], 0]\nOutput: \n 0\n",
  "286": "Problem: \nGiven 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\u00a0\nAll the balls will be shuffled uniformly at random,\u00a0then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a)\u00a0(Please read the explanation of the first\u00a0example carefully).\nWe want to calculate the probability that the two boxes have the same number of distinct balls.\n\u00a0\nExample 1:\nInput: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n\nExample 2:\nInput: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n\nExample 3:\nInput: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n\nExample 4:\nInput: balls = [3,2,1]\nOutput: 0.30000\nExplanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.\nProbability = 18 / 60 = 0.3\n\nExample 5:\nInput: balls = [6,6,6,6,6,6]\nOutput: 0.90327\n\n\u00a0\nConstraints:\n\n1 <= balls.length <= 8\n1 <= balls[i] <= 6\nsum(balls) is even.\nAnswers within 10^-5 of the actual value will be accepted as correct.\n\n Examples: \nInput: \n[[1, 1]]\nOutput: \n 1.0\n",
  "287": "Problem: \nSuppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 \nThe number at the ith position is divisible by i.\ni is divisible by the number at the ith position.\n\n\n\n\nNow given N, how many beautiful arrangements can you construct?\n\n\nExample 1:\n\nInput: 2\nOutput: 2\nExplanation: \nThe first beautiful arrangement is [1, 2]:\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\nThe second beautiful arrangement is [2, 1]:\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\n\n\n\nNote:\n\nN is a positive integer and will not exceed 15.\n\n Examples: \nInput: \n[2]\nOutput: \n 2\n",
  "288": "Problem: \nThere is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations towards buttons, you need to return how many different kinds of status of the n lights could be.\n\n\n\nSuppose n lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:\n\n\nFlip all the lights.\nFlip lights with even numbers.\nFlip lights with odd numbers.\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\n\n\n\n\nExample 1:\n\nInput: n = 1, m = 1.\nOutput: 2\nExplanation: Status can be: [on], [off]\n\n\n\n\nExample 2:\n\nInput: n = 2, m = 1.\nOutput: 3\nExplanation: Status can be: [on, off], [off, on], [off, off]\n\n\n\n\nExample 3:\n\nInput: n = 3, m = 1.\nOutput: 4\nExplanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\n\n\n\nNote:\nn and m both fit in range [0, 1000].\n\n Examples: \nInput: \n[1, 1]\nOutput: \n 2\n",
  "290": "Problem: \nGiven a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\n\nGiven an integer array cuts\u00a0where cuts[i]\u00a0denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the\u00a0cuts.\n\u00a0\nExample 1:\n\nInput: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).\nExample 2:\nInput: n = 9, cuts = [5,6,1,4,2]\nOutput: 22\nExplanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n\n\u00a0\nConstraints:\n\n2 <= n <= 10^6\n1 <= cuts.length <= min(n - 1, 100)\n1 <= cuts[i] <= n - 1\nAll the integers in cuts\u00a0array are distinct.\n\n Examples: \nInput: \n[7, [1, 3, 4, 5, 0, 7]]\nOutput: \n 16\n",
  "291": "Problem: \nGiven an array of integers arr. Return the number of sub-arrays with odd sum.\nAs the answer may grow large, the answer\u00a0must be\u00a0computed modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n\nExample 2:\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n\nExample 3:\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16\n\nExample 4:\nInput: arr = [100,100,99,99]\nOutput: 4\n\nExample 5:\nInput: arr = [7]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 100\n\n Examples: \nInput: \n[[1, 3, 5]]\nOutput: \n 4\n",
  "292": "Problem: \nGiven two arrays of integers with equal lengths, return the maximum value of:\n|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\nwhere the maximum is taken over all 0 <= i, j < arr1.length.\n\u00a0\nExample 1:\nInput: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\nOutput: 13\n\nExample 2:\nInput: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\nOutput: 20\n\n\u00a0\nConstraints:\n\n2 <= arr1.length == arr2.length <= 40000\n-10^6 <= arr1[i], arr2[i] <= 10^6\n\n Examples: \nInput: \n[[1, 2, 3, 4], [-1, 4, 5, 6]]\nOutput: \n 13\n",
  "293": "Problem: \nGiven a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.\n\nHowever, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle. \n\nYou need to return the least number of intervals the CPU will take to finish all the given tasks.\n\nExample 1:\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\n\n\n\nNote:\n\nThe number of tasks is in the range [1, 10000].\nThe integer n is in the range [0, 100].\n\n Examples: \nInput: \n[['\"A\"', '\"A\"', '\"A\"', '\"B\"', '\"B\"', '\"B\"'], 2]\nOutput: \n 8\n",
  "294": "Problem: \nThe n-queens puzzle is the problem of placing n queens on an n\u00d7n chessboard such that no two queens attack each other.\n\n\n\nGiven an integer\u00a0n, return the number of\u00a0distinct solutions to the\u00a0n-queens puzzle.\n\nExample:\n\n\nInput: 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown below.\n[\n\u00a0[\".Q..\", \u00a0// Solution 1\n\u00a0 \"...Q\",\n\u00a0 \"Q...\",\n\u00a0 \"..Q.\"],\n\n\u00a0[\"..Q.\", \u00a0// Solution 2\n\u00a0 \"Q...\",\n\u00a0 \"...Q\",\n\u00a0 \".Q..\"]\n]\n\n Examples: \nInput: \n[4]\nOutput: \n 2\n",
  "295": "Problem: \nYou are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west,\n    x[2] metres to the south,\n    x[3] metres to the east and so on. In other words, after each move your direction changes\n    counter-clockwise.\n\n\n    Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.\n\n\n\nExample 1:\n\nGiven x = [2, 1, 1, 2],\n?????\n?   ?\n???????>\n    ?\n\nReturn true (self crossing)\n\n\n\n\nExample 2:\n\nGiven x = [1, 2, 3, 4],\n????????\n?      ?\n?\n?\n?????????????>\n\nReturn false (not self crossing)\n\n\n\n\nExample 3:\n\nGiven x = [1, 1, 1, 1],\n?????\n?   ?\n?????>\n\nReturn true (self crossing)\n\n\n\nCredits:Special thanks to @dietpepsi for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[[2, 1, 1, 2]]\nOutput: \n True\n",
  "296": "Problem: \nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., \u00a0[0,1,2,4,5,6,7]\u00a0might become \u00a0[4,5,6,7,0,1,2]).\n\nFind the minimum element.\n\nThe array may contain duplicates.\n\nExample 1:\n\n\nInput: [1,3,5]\nOutput: 1\n\nExample 2:\n\n\nInput: [2,2,2,0,1]\nOutput: 0\n\nNote:\n\n\n       This is a follow up problem to\u00a0Find Minimum in Rotated Sorted Array.\n       Would allow duplicates affect the run-time complexity? How and why?\n\n Examples: \nInput: \n[[1, 3, 5]]\nOutput: \n 1\n",
  "297": "Problem: \nYou have n\u00a0\u00a0tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.\n\u00a0\nExample 1:\nInput: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n\nExample 2:\nInput: tiles = \"AAABBC\"\nOutput: 188\n\nExample 3:\nInput: tiles = \"V\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= tiles.length <= 7\ntiles consists of uppercase English letters.\n\n Examples: \nInput: \n['\"AAB\"']\nOutput: \n 89\n",
  "298": "Problem: \nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nExample 1:\n\n\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\n\nExample 2:\n\n\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n\nNote:\n\n\n       The length of both num1 and num2 is < 110.\n       Both num1 and num2 contain\u00a0only digits 0-9.\n       Both num1 and num2\u00a0do not contain any leading zero, except the number 0 itself.\n       You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n Examples: \nInput: \n['\"2\"', '\"3\"']\nOutput: \n 600\n",
  "300": "Problem: \nGiven a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ...\u00a0where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /).\u00a0 For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3\u00a0which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\n\nThe division operator (/) returns rational numbers.\nThere are no parentheses placed anywhere.\nWe use the usual order of operations: multiplication and division happens before addition and subtraction.\nIt's not allowed to use the unary negation\u00a0operator (-).\u00a0 For example, \"x\u00a0- x\"\u00a0is a valid expression as it only uses subtraction, but \"-x +\u00a0x\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given target.\u00a0 Return the least number of operators used.\n\u00a0\n\nExample 1:\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.\n\nExample 2:\n\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.\n\n\nExample 3:\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.  The expression contains 3 operations.\n\u00a0\n\n\n\nNote:\n\n2 <= x <= 100\n1 <= target <= 2 * 10^8\n\n Examples: \nInput: \n[3, 19]\nOutput: \n 5\n",
  "302": "Problem: \nGiven the coordinates of four points in 2D space, return whether the four points could construct a square.\n\nThe coordinate (x,y) of a point is represented by an integer array with two integers.\n\nExample:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: True\n\n\n\n Note: \n\nAll the input integers are in the range [-10000, 10000].\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\nInput points have no order.\n\n Examples: \nInput: \n[[0, 0], [1, 1], [1, 0], [0, 1]]\nOutput: \n True\n",
  "303": "Problem: \nGiven an integer array arr, you should partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning.\n\u00a0\nExample 1:\nInput: arr = [1,15,7,9,2,5,10], k = 3\nOutput: 84\nExplanation: arr becomes [15,15,15,9,10,10,10]\n\nExample 2:\nInput: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\nOutput: 83\n\nExample 3:\nInput: arr = [1], k = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 500\n0 <= arr[i] <= 109\n1 <= k <= arr.length\n\n Examples: \nInput: \n[[1, 15, 7, 9, 2, 5, 10], 3]\nOutput: \n 84\n",
  "304": "Problem: \nSome people will make friend requests. The\u00a0list of their ages is given and\u00a0ages[i]\u00a0is the age of the\u00a0ith person.\u00a0\nPerson A will NOT friend request person B (B != A) if any of the following conditions are true:\n\nage[B]\u00a0<= 0.5 * age[A]\u00a0+ 7\nage[B]\u00a0> age[A]\nage[B]\u00a0> 100 &&\u00a0age[A]\u00a0< 100\n\nOtherwise, A will friend request B.\nNote that if\u00a0A requests B, B does not necessarily request A.\u00a0 Also, people will not friend request themselves.\nHow many total friend requests are made?\nExample 1:\nInput: [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n\nExample 2:\nInput: [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\nExample 3:\nInput: [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n\u00a0\nNotes:\n\n1 <= ages.length\u00a0<= 20000.\n1 <= ages[i] <= 120.\n\n Examples: \nInput: \n[[16, 16]]\nOutput: \n 2\n",
  "305": "Problem: \nReturn the number of distinct non-empty substrings of text\u00a0that can be written as the concatenation of some string with itself (i.e. it can be written as a + a\u00a0where a is some string).\n\u00a0\nExample 1:\nInput: text = \"abcabcabc\"\nOutput: 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".\n\nExample 2:\nInput: text = \"leetcodeleetcode\"\nOutput: 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 2000\ntext\u00a0has only lowercase English letters.\n\n Examples: \nInput: \n['\"abcabcabc\"']\nOutput: \n 3\n",
  "306": "Problem: \nGiven an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n\nExample:\n\nnums = [1, 2, 3]\ntarget = 4\n\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\nNote that different sequences are counted as different combinations.\n\nTherefore the output is 7.\n\n\n\nFollow up:\nWhat if negative numbers are allowed in the given array?\nHow does it change the problem?\nWhat limitation we need to add to the question to allow negative numbers? \n\nCredits:Special thanks to @pbrother for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[[1, 2, 3], 4]\nOutput: \n 7\n",
  "307": "Problem: \nThere are two types of soup: type A and type B. Initially we have N ml of each type of soup. There are four kinds of operations:\n\nServe\u00a0100 ml of soup A and 0 ml of soup B\nServe\u00a075 ml of soup A and 25\u00a0ml of soup B\nServe 50 ml of soup A and 50 ml of soup B\nServe 25\u00a0ml of soup A and 75\u00a0ml of soup B\n\nWhen we serve some soup, we give it to someone and we no longer have it.\u00a0 Each turn,\u00a0we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve\u00a0as much as we can.\u00a0 We stop once we no longer have some quantity of both types of soup.\nNote that we do not have the operation where all 100 ml's of soup B are used first.\u00a0\u00a0\nReturn the probability that soup A will be empty\u00a0first, plus half the probability that A and B become empty at the same time.\n\u00a0\nExample:\nInput: N = 50\nOutput: 0.625\nExplanation: \nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n\n\nNotes: \n\n0 <= N <= 10^9.\u00a0\nAnswers within\u00a010^-6\u00a0of the true value will be accepted as correct.\n\n Examples: \nInput: \n[50]\nOutput: \n 0.625\n",
  "309": "Problem: \nGiven an array A of integers, return the length of the longest arithmetic subsequence in A.\nRecall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B\u00a0is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).\n\u00a0\nExample 1:\nInput: A = [3,6,9,12]\nOutput: 4\nExplanation: \nThe whole array is an arithmetic sequence with steps of length = 3.\n\nExample 2:\nInput: A = [9,4,7,2,10]\nOutput: 3\nExplanation: \nThe longest arithmetic subsequence is [4,7,10].\n\nExample 3:\nInput: A = [20,1,15,3,10,5,8]\nOutput: 4\nExplanation: \nThe longest arithmetic subsequence is [20,15,10,5].\n\n\u00a0\nConstraints:\n\n2 <= A.length <= 1000\n0 <= A[i] <= 500\n\n Examples: \nInput: \n[[3, 6, 9, 12]]\nOutput: \n 4\n",
  "311": "Problem: \nThere are N children standing in a line. Each child is assigned a rating value.\n\nYou are giving candies to these children subjected to the following requirements:\n\n\n       Each child must have at least one candy.\n       Children with a higher rating get more candies than their neighbors.\n\n\nWhat is the minimum candies you must give?\n\nExample 1:\n\n\nInput: [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\n\nExample 2:\n\n\nInput: [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n             The third child gets 1 candy because it satisfies the above two conditions.\n\n Examples: \nInput: \n[[1, 0, 2]]\nOutput: \n 5\n",
  "312": "Problem: \nReturn the length of the shortest, non-empty, contiguous\u00a0subarray of A with sum at least K.\nIf there is no non-empty subarray with sum at least K, return -1.\n\u00a0\n\n\n\nExample 1:\nInput: A = [1], K = 1\nOutput: 1\n\n\nExample 2:\nInput: A = [1,2], K = 4\nOutput: -1\n\n\nExample 3:\nInput: A = [2,-1,2], K = 3\nOutput: 3\n\n\u00a0\nNote:\n\n1 <= A.length <= 50000\n-10 ^ 5\u00a0<= A[i] <= 10 ^ 5\n1 <= K <= 10 ^ 9\n\n Examples: \nInput: \n[[1], 1]\nOutput: \n 1\n",
  "313": "Problem: \nGiven an integer array bloomDay, an integer m and an integer k.\nWe need to make m\u00a0bouquets. To make a bouquet,\u00a0you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i]\u00a0and then can be used in\u00a0exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.\n\u00a0\nExample 1:\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 1\nOutput: 3\nExplanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\n\nExample 2:\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 2\nOutput: -1\nExplanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\n\nExample 3:\nInput: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\nOutput: 12\nExplanation: We need 2 bouquets each should have 3 flowers.\nHere's the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.\n\nExample 4:\nInput: bloomDay = [1000000000,1000000000], m = 1, k = 1\nOutput: 1000000000\nExplanation: You need to wait 1000000000 days to have a flower ready for a bouquet.\n\nExample 5:\nInput: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2\nOutput: 9\n\n\u00a0\nConstraints:\n\nbloomDay.length == n\n1 <= n <= 10^5\n1 <= bloomDay[i] <= 10^9\n1 <= m <= 10^6\n1 <= k <= n\n\n Examples: \nInput: \n[[1, 10, 3, 10, 2], 3, 1]\nOutput: \n 3\n",
  "314": "Problem: \nGiven a binary string\u00a0s\u00a0(a string consisting only of '0' and '1's).\nReturn the number of substrings with all characters 1's.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: s = \"0110111\"\nOutput: 9\nExplanation: There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time.\nExample 2:\nInput: s = \"101\"\nOutput: 2\nExplanation: Substring \"1\" is shown 2 times in s.\n\nExample 3:\nInput: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only 1's characters.\n\nExample 4:\nInput: s = \"000\"\nOutput: 0\n\n\u00a0\nConstraints:\n\ns[i] == '0' or s[i] == '1'\n1 <= s.length <= 10^5\n\n Examples: \nInput: \n['\"0110111\"']\nOutput: \n 9\n",
  "315": "Problem: \nYou are given two strings\u00a0s1\u00a0and\u00a0s2\u00a0of equal length\u00a0consisting of letters \"x\" and \"y\" only. Your task is to\u00a0make these two strings equal to each other. You can swap any two characters that belong to different strings,\u00a0which means: swap s1[i] and s2[j].\nReturn\u00a0the minimum number of swaps required\u00a0to make\u00a0s1\u00a0and s2 equal, or return\u00a0-1\u00a0if it is\u00a0impossible to do so.\n\u00a0\nExample 1:\nInput: s1 = \"xx\", s2 = \"yy\"\nOutput: 1\nExplanation: \nSwap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\nExample 2:\u00a0\nInput: s1 = \"xy\", s2 = \"yx\"\nOutput: 2\nExplanation: \nSwap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you can't swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.\nExample 3:\nInput: s1 = \"xx\", s2 = \"xy\"\nOutput: -1\n\nExample 4:\nInput: s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= s1.length, s2.length <= 1000\ns1, s2\u00a0only contain 'x' or 'y'.\n\n Examples: \nInput: \n['\"xx\"', '\"yy\"']\nOutput: \n 1\n",
  "316": "Problem: \nA string is called a\u00a0happy prefix\u00a0if is a non-empty prefix which is also a suffix (excluding itself).\nGiven a string s. Return the longest happy prefix\u00a0of s\u00a0.\nReturn an empty string if no such prefix exists.\n\u00a0\nExample 1:\nInput: s = \"level\"\nOutput: \"l\"\nExplanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".\n\nExample 2:\nInput: s = \"ababab\"\nOutput: \"abab\"\nExplanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.\n\nExample 3:\nInput: s = \"leetcodeleet\"\nOutput: \"leet\"\n\nExample 4:\nInput: s = \"a\"\nOutput: \"\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\ns contains only lowercase English letters.\n\n Examples: \nInput: \n['\"level\"']\nOutput: \n \"\n",
  "317": "Problem: \nWe are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for \"decreasing\" and \"increasing\".)\nA\u00a0valid permutation\u00a0is a permutation P[0], P[1], ..., P[n] of integers\u00a0{0, 1, ..., n}, such that for all i:\n\nIf S[i] == 'D', then P[i] > P[i+1], and;\nIf S[i] == 'I', then P[i] < P[i+1].\n\nHow many valid permutations are there?\u00a0 Since the answer may be large, return your answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: \"DID\"\nOutput: 5\nExplanation: \nThe 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\n\u00a0\nNote:\n\n1 <= S.length <= 200\nS consists only of characters from the set {'D', 'I'}.\n\n Examples: \nInput: \n['\"DID\"']\nOutput: \n 61\n",
  "318": "Problem: \nThere is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\n\nYou will pick any pizza slice.\nYour friend Alice\u00a0will pick\u00a0next slice in anti clockwise direction of your pick.\u00a0\nYour friend Bob\u00a0will\u00a0pick\u00a0next slice in clockwise direction of your pick.\nRepeat\u00a0until\u00a0there are no more slices of pizzas.\n\nSizes of Pizza slices is represented by circular array slices in clockwise direction.\nReturn the maximum possible sum of slice sizes which you can have.\n\u00a0\nExample 1:\n\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n\nExample 2:\n\nInput: slices = [8,9,8,6,1,1]\nOutput: 16\nOutput: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n\nExample 3:\nInput: slices = [4,1,2,5,8,3,1,9,7]\nOutput: 21\n\nExample 4:\nInput: slices = [3,1,2]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= slices.length <= 500\nslices.length % 3 == 0\n1 <= slices[i] <= 1000\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5, 6]]\nOutput: \n 10\n",
  "319": "Problem: \nAlice and Bob continue their\u00a0games with piles of stones. There are several stones\u00a0arranged in a row, and each stone has an associated\u00a0value which is an integer given in the array\u00a0stoneValue.\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player\u00a0can take 1, 2 or 3 stones\u00a0from\u00a0the first remaining stones in the row.\nThe score of each player is the sum of values of the stones taken. The score of each player is 0\u00a0initially.\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\nAssume\u00a0Alice\u00a0and Bob\u00a0play optimally.\nReturn \"Alice\" if\u00a0Alice will win, \"Bob\" if Bob will win or \"Tie\" if they end the game with the same score.\n\u00a0\nExample 1:\nInput: values = [1,2,3,7]\nOutput: \"Bob\"\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n\nExample 2:\nInput: values = [1,2,3,-9]\nOutput: \"Alice\"\nExplanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n\nExample 3:\nInput: values = [1,2,3,6]\nOutput: \"Tie\"\nExplanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n\nExample 4:\nInput: values = [1,2,3,-1,-2,-3,7]\nOutput: \"Alice\"\n\nExample 5:\nInput: values = [-1,-2,-3]\nOutput: \"Tie\"\n\n\u00a0\nConstraints:\n\n1 <= values.length <= 50000\n-1000\u00a0<= values[i] <= 1000\n\n Examples: \nInput: \n[[1, 2, 3, 7]]\nOutput: \n Bob\n",
  "320": "Problem: \nYour task is to form\u00a0an integer array nums from an initial array of zeros\u00a0arr that is the\u00a0same size\u00a0as nums.\nReturn the minimum number of\u00a0function calls to make nums from arr.\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\u00a0\nExample 1:\nInput: nums = [1,5]\nOutput: 5\nExplanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.\n\nExample 2:\nInput: nums = [2,2]\nOutput: 3\nExplanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> [2, 2] (1 operation).\nTotal of operations: 2 + 1 = 3.\n\nExample 3:\nInput: nums = [4,2,5]\nOutput: 6\nExplanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).\n\nExample 4:\nInput: nums = [3,2,2,4]\nOutput: 7\n\nExample 5:\nInput: nums = [2,4,8,16]\nOutput: 8\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9\n\n Examples: \nInput: \n[[1, 5]]\nOutput: \n 5\n",
  "321": "Problem: \nGiven two strings: s1 and s2 with the same\u00a0size, check if some\u00a0permutation of string s1 can break\u00a0some\u00a0permutation of string s2 or vice-versa (in other words s2 can break s1).\nA string x\u00a0can break\u00a0string y\u00a0(both of size n) if x[i] >= y[i]\u00a0(in alphabetical order)\u00a0for all i\u00a0between 0 and n-1.\n\u00a0\nExample 1:\nInput: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".\n\nExample 2:\nInput: s1 = \"abe\", s2 = \"acd\"\nOutput: false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n\nExample 3:\nInput: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true\n\n\u00a0\nConstraints:\n\ns1.length == n\ns2.length == n\n1 <= n <= 10^5\nAll strings consist of lowercase English letters.\n\n Examples: \nInput: \n['\"abc\"', '\"xya\"']\nOutput: \n True\n",
  "322": "Problem: \nGiven a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.\n\nExample 1:\n\n\nInput: nums = [1,3], n = 6\nOutput: 1 \nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n\nExample 2:\n\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\n\nExample 3:\n\n\nInput: nums = [1,2,2], n = 5\nOutput: 0\n\n Examples: \nInput: \n[[1, 3], 6]\nOutput: \n 1\n",
  "323": "Problem: \nGiven s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.\n\nExample 1:\n\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\n\n\nExample 2:\n\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\n\n Examples: \nInput: \n['\"aabcc\"', '\"dbbca\"', '\"aadbbcbcac\"']\nOutput: \n False\n",
  "324": "Problem: \nGiven a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.\n\nExample 1:\n\n\nInput: 12\nOutput: 21\n\n\n\u00a0\n\nExample 2:\n\n\nInput: 21\nOutput: -1\n\n Examples: \nInput: \n[12]\nOutput: \n 21\n",
  "325": "Problem: \nGiven an N x N grid\u00a0containing only values 0 and 1, where\u00a00 represents water\u00a0and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance.\nThe distance used in this problem is the Manhattan distance:\u00a0the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.\nIf no land or water exists in the grid, return -1.\n\u00a0\nExample 1:\n\nInput: [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: \nThe cell (1, 1) is as far as possible from all the land with distance 2.\n\nExample 2:\n\nInput: [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: \nThe cell (2, 2) is as far as possible from all the land with distance 4.\n\n\u00a0\nNote:\n\n1 <= grid.length == grid[0].length\u00a0<= 100\ngrid[i][j]\u00a0is 0 or 1\n\n Examples: \nInput: \n[[[1, 0, 1], [0, 0, 0], [1, 0, 1], [], []]]\nOutput: \n 3\n",
  "326": "Problem: \nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\n\nstring convert(string s, int numRows);\n\nExample 1:\n\n\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n\n\nExample 2:\n\n\nInput: s = \"PAYPALISHIRING\", numRows =\u00a04\nOutput:\u00a0\"PINALSIGYAHRPI\"\nExplanation:\n\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\n Examples: \nInput: \n['\"PAYPALISHIRING\"', 3]\nOutput: \n \"PSIPYAIHRN\"ALIG\n",
  "327": "Problem: \nGiven a string, find the length of the longest substring without repeating characters.\n\nExamples:\n\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\n\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\n\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n Examples: \nInput: \n['\"abcabcbb\"']\nOutput: \n 4\n",
  "328": "Problem: \nGiven a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such\nthat i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\n\nNote: n will be less than 15,000.\n\nExample 1:\n\nInput: [1, 2, 3, 4]\n\nOutput: False\n\nExplanation: There is no 132 pattern in the sequence.\n\n\n\nExample 2:\n\nInput: [3, 1, 4, 2]\n\nOutput: True\n\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\n\n\n\nExample 3:\n\nInput: [-1, 3, 2, 0]\n\nOutput: True\n\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n Examples: \nInput: \n[[1, 2, 3, 4]]\nOutput: \n False\n",
  "331": "Problem: \nGiven two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.\n\u00a0\nExample 1:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExample 2:\n\nInput: hour = 3, minutes = 30\nOutput: 75\n\nExample 3:\n\nInput: hour = 3, minutes = 15\nOutput: 7.5\n\nExample 4:\nInput: hour = 4, minutes = 50\nOutput: 155\n\nExample 5:\nInput: hour = 12, minutes = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= hour <= 12\n0 <= minutes <= 59\nAnswers within\u00a010^-5\u00a0of the actual value will be accepted as correct.\n\n Examples: \nInput: \n[12, 30]\nOutput: \n 165.0\n",
  "332": "Problem: \nGiven a string, your task is to count how many palindromic substrings in this string.\n\n\n\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. \n\n\nExample 1:\n\nInput: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n\n\n\nExample 2:\n\nInput: \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\n\n\nNote:\n\nThe input string length won't exceed 1000.\n\n Examples: \nInput: \n['\"abc\"']\nOutput: \n 5\n",
  "333": "Problem: \nGiven an array of\u00a0integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\n\ni + 1 where:\u00a0i + 1 < arr.length.\ni - 1 where:\u00a0i - 1 >= 0.\nj where: arr[i] == arr[j] and i != j.\n\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nExample 1:\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\nExample 2:\nInput: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You don't need to jump.\n\nExample 3:\nInput: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.\n\nExample 4:\nInput: arr = [6,1,9]\nOutput: 2\n\nExample 5:\nInput: arr = [11,22,7,7,7,7,7,7,7,22,13]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 5 * 10^4\n-10^8 <= arr[i] <= 10^8\n\n Examples: \nInput: \n[[100, -23, -23, 404, 100, 23, 23, 23, 3, 404]]\nOutput: \n 3\n",
  "334": "Problem: \nGiven a\u00a0string s and an array of integers cost where cost[i]\u00a0is the cost of deleting the ith character in s.\nReturn the minimum cost of deletions such that there are no two identical letters next to each other.\nNotice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.\n\u00a0\nExample 1:\nInput: s = \"abaac\", cost = [1,2,3,4,5]\nOutput: 3\nExplanation: Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other).\n\nExample 2:\nInput: s = \"abc\", cost = [1,2,3]\nOutput: 0\nExplanation: You don't need to delete any character because there are no identical letters next to each other.\n\nExample 3:\nInput: s = \"aabaa\", cost = [1,2,3,4,1]\nOutput: 2\nExplanation: Delete the first and the last character, getting the string (\"aba\").\n\n\u00a0\nConstraints:\n\ns.length == cost.length\n1 <= s.length, cost.length <= 10^5\n1 <= cost[i] <=\u00a010^4\ns contains only lowercase English letters.\n\n Examples: \nInput: \n['\"abaac\"', [1, 2, 3, 4, 5]]\nOutput: \n 4\n",
  "335": "Problem: \nYou are installing a billboard and want it to have the largest height.\u00a0 The billboard will have two steel supports, one on each side.\u00a0 Each steel support must be an equal height.\nYou have a collection of rods which can be welded together.\u00a0 For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation.\u00a0 If you cannot support the billboard, return 0.\n\u00a0\nExample 1:\nInput: [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n\nExample 2:\nInput: [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n\n\nExample 3:\nInput: [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n\n\n\u00a0\nNote:\n\n0 <= rods.length <= 20\n1 <= rods[i] <= 1000\nThe sum of rods is at most 5000.\n\n Examples: \nInput: \n[[1, 2, 3, 6]]\nOutput: \n 6\n",
  "336": "Problem: \nGiven two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t\u00a0an anagram of s.\nAn\u00a0Anagram\u00a0of a\u00a0string\u00a0is a string that contains the same characters with a different (or the same) ordering.\n\u00a0\nExample 1:\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.\n\nExample 2:\nInput: s = \"leetcode\", t = \"practice\"\nOutput: 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n\nExample 3:\nInput: s = \"anagram\", t = \"mangaar\"\nOutput: 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams. \n\nExample 4:\nInput: s = \"xxyyzz\", t = \"xxyyzz\"\nOutput: 0\n\nExample 5:\nInput: s = \"friend\", t = \"family\"\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 50000\ns.length == t.length\ns and t contain lower-case English letters only.\n\n Examples: \nInput: \n['\"bab\"', '\"aba\"']\nOutput: \n 1\n",
  "337": "Problem: \nThere are N gas stations along a circular route, where the amount of gas at station i is gas[i].\n\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\n\nReturn the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.\n\nNote:\n\n\n       If there exists a\u00a0solution, it is guaranteed to be unique.\n       Both input arrays are non-empty and have the same length.\n       Each element in the input arrays is a non-negative integer.\n\n\nExample 1:\n\n\nInput: \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\nOutput: 3\n\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\n\nExample 2:\n\n\nInput: \ngas  = [2,3,4]\ncost = [3,4,3]\n\nOutput: -1\n\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5], [3, 4, 5, 1, 2]]\nOutput: \n 3\n",
  "339": "Problem: \nGiven two arrays of integers\u00a0nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:\n\nType 1: Triplet (i, j, k)\u00a0if nums1[i]2\u00a0== nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.\nType 2:\u00a0Triplet (i, j, k) if nums2[i]2\u00a0== nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.\n\n\u00a0\nExample 1:\nInput: nums1 = [7,4], nums2 = [5,2,8,9]\nOutput: 1\nExplanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). \n\nExample 2:\nInput: nums1 = [1,1], nums2 = [1,1,1]\nOutput: 9\nExplanation: All Triplets are valid, because 1^2 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].\n\nExample 3:\nInput: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\nOutput: 2\nExplanation: There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].\n\nExample 4:\nInput: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]\nOutput: 0\nExplanation: There are no valid triplets.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n1 <= nums1[i], nums2[i] <= 10^5\n\n Examples: \nInput: \n[[7, 4], [5, 2, 8, 9]]\nOutput: \n 1\n",
  "340": "Problem: \nGiven an absolute path for a file (Unix-style), simplify it.\n\nFor example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\nCorner Cases:\n\n\n       Did you consider the case where path = \"/../\"?\n       In this case, you should return \"/\".\n       Another corner case is the path might contain multiple slashes '/' together, such as \"/home//foo/\".\n       In this case, you should ignore redundant slashes and return \"/home/foo\".\n\n Examples: \nInput: \n['\"/home/\"']\nOutput: \n /\"/home/\"\n",
  "341": "Problem: \nWrite a program to find the n-th ugly number.\n\nUgly numbers are positive numbers whose prime factors only include 2, 3, 5.\u00a0\n\nExample:\n\n\nInput: n = 10\nOutput: 12\nExplanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.\n\nNote: \u00a0\n\n\n       1 is typically treated as an ugly number.\n       n does not exceed 1690.\n\n Examples: \nInput: \n[10]\nOutput: \n 12\n",
  "342": "Problem: \nGiven an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n\n\nYou receive a valid board, made of only battleships or empty slots.\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above board there are 2 battleships.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n Examples: \nInput: \n[[['\"X\"', '\".\"', '\".\"', '\"X\"'], ['\".\"', '\".\"', '\".\"', '\"X\"'], ['\".\"', '\".\"', '\".\"', '\"X\"'], [], []]]\nOutput: \n 0\n",
  "343": "Problem: \nGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\nExample 1:\n\n\nInput: n = 12\nOutput: 3 \nExplanation: 12 = 4 + 4 + 4.\n\nExample 2:\n\n\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n\n Examples: \nInput: \n[12]\nOutput: \n 3\n",
  "344": "Problem: \nWe are given an array\u00a0A of N lowercase letter strings, all of the same length.\nNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\nFor example, if we have an array A = [\"babca\",\"bbazb\"] and deletion indices {0, 1, 4}, then the final array after deletions is [\"bc\",\"az\"].\nSuppose we chose a set of deletion indices D such that after deletions, the final array has every element (row) in\u00a0lexicographic order.\nFor clarity, A[0] is in lexicographic order (ie. A[0][0] <= A[0][1] <= ... <= A[0][A[0].length - 1]), A[1] is in lexicographic order (ie. A[1][0] <= A[1][1] <= ... <= A[1][A[1].length - 1]), and so on.\nReturn the minimum possible value of D.length.\n\u00a0\n\nExample 1:\nInput: [\"babca\",\"bbazb\"]\nOutput: 3\nExplanation: After deleting columns 0, 1, and 4, the final array is A = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. A[0][0] <= A[0][1] and A[1][0] <= A[1][1]).\nNote that A[0] > A[1] - the array A isn't necessarily in lexicographic order.\n\n\nExample 2:\nInput: [\"edcba\"]\nOutput: 4\nExplanation: If we delete less than 4 columns, the only row won't be lexicographically sorted.\n\n\nExample 3:\nInput: [\"ghi\",\"def\",\"abc\"]\nOutput: 0\nExplanation: All rows are already lexicographically sorted.\n\n\u00a0\n\n\n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\n\n Examples: \nInput: \n[['\"babca\"', '\"bbazb\"']]\nOutput: \n 4\n",
  "346": "Problem: \nGiven an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.\n\u00a0\nExample 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\nExample 2:\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.\n\nExample 3:\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 50000\n1 <= nums[i] <= 10^5\n1 <= k <= nums.length\n\n Examples: \nInput: \n[[1, 1, 2, 1, 1], 3]\nOutput: \n 2\n",
  "347": "Problem: \nGiven two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.\n\nExample 1:\n\nInput:s1 = \"ab\" s2 = \"eidbaooo\"\nOutput:True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n\n\n\nExample 2:\n\nInput:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False\n\n\n\nNote:\n\nThe input strings only contain lower case letters.\nThe length of both given strings is in range [1, 10,000].\n\n Examples: \nInput: \n['\"ab\"', '\"eidbaooo\"']\nOutput: \n False\n",
  "348": "Problem: \nGiven an array of integers, return the maximum sum for a non-empty\u00a0subarray (contiguous elements) with at most one element deletion.\u00a0In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the\u00a0sum of the remaining elements is maximum possible.\nNote that the subarray needs to be non-empty after deleting one element.\n\u00a0\nExample 1:\nInput: arr = [1,-2,0,3]\nOutput: 4\nExplanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.\nExample 2:\nInput: arr = [1,-2,-2,3]\nOutput: 3\nExplanation: We just choose [3] and it's the maximum sum.\n\nExample 3:\nInput: arr = [-1,-1,-1,-1]\nOutput: -1\nExplanation:\u00a0The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n-10^4 <= arr[i] <= 10^4\n\n Examples: \nInput: \n[[1, -2, 0, 3]]\nOutput: \n 4\n",
  "349": "Problem: \nGiven an array nums of integers, you can perform operations on the array.\n\nIn each operation, you pick any nums[i] and delete it to earn nums[i] points.  After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.\n\nYou start with 0 points.  Return the maximum number of points you can earn by applying such operations.\n\n\nExample 1:\n\nInput: nums = [3, 4, 2]\nOutput: 6\nExplanation: \nDelete 4 to earn 4 points, consequently 3 is also deleted.\nThen, delete 2 to earn 2 points. 6 total points are earned.\n\n\n\nExample 2:\n\nInput: nums = [2, 2, 3, 3, 3, 4]\nOutput: 9\nExplanation: \nDelete 3 to earn 3 points, deleting both 2's and the 4.\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\n9 total points are earned.\n\n\n\nNote:\nThe length of nums is at most 20000.\nEach element nums[i] is an integer in the range [1, 10000].\n\n Examples: \nInput: \n[[2, 3, 4]]\nOutput: \n 6\n",
  "350": "Problem: \nGiven an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.\n(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)\nReturn the number of good subarrays of A.\n\u00a0\nExample 1:\nInput: A = [1,2,1,2,3], K = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n\nExample 2:\nInput: A = [1,2,1,3,4], K = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n\u00a0\nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= A.length\n1 <= K <= A.length\n\n Examples: \nInput: \n[[1, 2, 1, 2, 3], 2]\nOutput: \n 7\n",
  "351": "Problem: \nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\n Examples: \nInput: \n[2, 3]\nOutput: \n 2\n",
  "352": "Problem: \nGiven a list of words, each word consists of English lowercase letters.\nLet's say word1 is a predecessor of word2\u00a0if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.\u00a0 For example,\u00a0\"abc\"\u00a0is a predecessor of \"abac\".\nA word chain\u00a0is a sequence of words [word_1, word_2, ..., word_k]\u00a0with k >= 1,\u00a0where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.\nReturn the longest possible length of a word chain with words chosen from the given list of words.\n\u00a0\nExample 1:\nInput: [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\nOutput: 4\nExplanation: one of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\".\n\n\u00a0\nNote:\n\n1 <= words.length <= 1000\n1 <= words[i].length <= 16\nwords[i] only consists of English lowercase letters.\n\n Examples: \nInput: \n[['\"a\"', '\"b\"', '\"ba\"', '\"bca\"', '\"bda\"', '\"bdca\"']]\nOutput: \n 4\n",
  "353": "Problem: \nGiven an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal than target.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)\n\nExample 2:\nInput: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\nExample 3:\nInput: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n\nExample 4:\nInput: nums = [5,2,4,1,7,6,8], target = 16\nOutput: 127\nExplanation: All non-empty subset satisfy the condition (2^7 - 1) = 127\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^6\n1 <= target <= 10^6\n\n Examples: \nInput: \n[[3, 5, 6, 7], 9]\nOutput: \n 4\n",
  "354": "Problem: \nA die simulator generates a random number from 1 to 6 for each roll.\u00a0You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.\u00a0\nGiven an array of integers\u00a0rollMax\u00a0and an integer\u00a0n, return the number of distinct sequences that can be obtained with exact n rolls.\nTwo sequences are considered different if at least one element differs from each other. Since the answer\u00a0may be too large,\u00a0return it modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n\nExample 2:\nInput: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30\n\nExample 3:\nInput: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181\n\n\u00a0\nConstraints:\n\n1 <= n <= 5000\nrollMax.length == 6\n1 <= rollMax[i] <= 15\n\n Examples: \nInput: \n[2, [1, 1, 2, 2, 2, 3]]\nOutput: \n 34\n",
  "355": "Problem: \nGiven integers n and k, find the lexicographically k-th smallest integer in the range from 1 to n.\n\nNote: 1 \u2264 k \u2264 n \u2264 109.\n\nExample:\n\nInput:\nn: 13   k: 2\n\nOutput:\n10\n\nExplanation:\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n\n Examples: \nInput: \n[13, 2]\nOutput: \n 10\n",
  "356": "Problem: \nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n\n\n       Integers in each row are sorted from left to right.\n       The first integer of each row is greater than the last integer of the previous row.\n\n\nExample 1:\n\n\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\nOutput: true\n\n\nExample 2:\n\n\nInput:\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\nOutput: false\n\n Examples: \nInput: \n[[[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50], [], []], 3]\nOutput: \n True\n",
  "357": "Problem: \nYou are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0\nReturn that maximum distance to the closest person.\n\u00a0\nExample 1:\n\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n\nExample 2:\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n\nExample 3:\nInput: seats = [0,1]\nOutput: 1\n\n\u00a0\nConstraints:\n\n2 <= seats.length <= 2 * 104\nseats[i]\u00a0is 0 or\u00a01.\nAt least one seat is empty.\nAt least one seat is occupied.\n\n Examples: \nInput: \n[[1, 0, 0, 0, 1, 0, 1]]\nOutput: \n 2\n",
  "358": "Problem: \nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\n Examples: \nInput: \n['\"abcd\"', [0, 2], ['\"a\"', ' \"cd\"'], ['\"eee\"', ' \"ffff\"']]\nOutput: \n \"abcd\"\n",
  "359": "Problem: \nGiven a square array of integers A, we want the minimum sum of a falling path through A.\nA falling path starts at any element in the first row, and chooses one element from each row.\u00a0 The next row's choice must be in a column that is different from the previous row's column by at most one.\n\u00a0\nExample 1:\nInput: [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 12\nExplanation: \nThe possible falling paths are:\n\n\n[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]\n[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]\n[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]\n\nThe falling path with the smallest sum is [1,4,7], so the answer is 12.\n\u00a0\nConstraints:\n\n1 <= A.length == A[0].length <= 100\n-100 <= A[i][j] <= 100\n\n Examples: \nInput: \n[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [], []]]\nOutput: \n 12\n",
  "360": "Problem: \nA conveyor belt has packages that must be shipped from one port to another within D days.\nThe i-th package on the conveyor belt has a weight of weights[i].\u00a0 Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.\n\u00a0\nExample 1:\nInput: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: \nA ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. \n\nExample 2:\nInput: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: \nA ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\nExample 3:\nInput: weights = [1,2,3,1,1], D = 4\nOutput: 3\nExplanation: \n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n\u00a0\nConstraints:\n\n1 <= D <= weights.length <= 50000\n1 <= weights[i] <= 500\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5]\nOutput: \n 15\n",
  "361": "Problem: \nGiven a rectangle of size\u00a0n\u00a0x m, find the minimum number of integer-sided squares that tile the rectangle.\n\u00a0\nExample 1:\n\nInput: n = 2, m = 3\nOutput: 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)\nExample 2:\n\nInput: n = 5, m = 8\nOutput: 5\n\nExample 3:\n\nInput: n = 11, m = 13\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= n <= 13\n1 <= m\u00a0<=\u00a013\n\n Examples: \nInput: \n[2, 3]\nOutput: \n 3\n",
  "362": "Problem: \nThere are\u00a0n people\u00a0and 40 types of hats labeled from 1 to 40.\nGiven a list of list of integers hats, where hats[i]\u00a0is a list of all hats preferred\u00a0by the i-th person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\nExample 2:\nInput: hats = [[3,5,1],[3,5]]\nOutput: 4\nExplanation: There are 4 ways to choose hats\n(3,5), (5,3), (1,3) and (1,5)\n\nExample 3:\nInput: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nOutput: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n\nExample 4:\nInput: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\nOutput: 111\n\n\u00a0\nConstraints:\n\nn == hats.length\n1 <= n <= 10\n1 <= hats[i].length <= 40\n1 <= hats[i][j] <= 40\nhats[i] contains a list of unique integers.\n\n Examples: \nInput: \n[[[3, 4], [4, 5], [5], [], []]]\nOutput: \n 0\n",
  "363": "Problem: \nGiven a 2D array A, each cell is 0 (representing sea) or 1 (representing land)\nA move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.\nReturn the number of land squares in the grid for which we cannot walk off the boundary of the grid in any number of moves.\n\u00a0\nExample 1:\nInput: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 3\nExplanation: \nThere are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.\nExample 2:\nInput: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\nOutput: 0\nExplanation: \nAll 1s are either on the boundary or can reach the boundary.\n\n\u00a0\nNote:\n\n1 <= A.length <= 500\n1 <= A[i].length <= 500\n0 <= A[i][j] <= 1\nAll rows have the same size.\n\n Examples: \nInput: \n[[[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0], [], []]]\nOutput: \n 3\n",
  "364": "Problem: \nYou are given two jugs with capacities x and y litres. There is an infinite amount of water supply available.\nYou need to determine whether it is possible to measure exactly z litres using these two jugs.\n\nIf z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.\n\n\nOperations allowed:\n\nFill any of the jugs completely with water.\nEmpty any of the jugs.\nPour water from one jug into another till the other jug is completely full or the first jug itself is empty.\n\n\n\nExample 1: (From the famous \"Die Hard\" example)\n\nInput: x = 3, y = 5, z = 4\nOutput: True\n\n\n\nExample 2:\n\nInput: x = 2, y = 6, z = 5\nOutput: False\n\n\n\nCredits:Special thanks to @vinod23 for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[3, 5, 4]\nOutput: \n True\n",
  "365": "Problem: \nLet's define a function countUniqueChars(s)\u00a0that returns the number of unique characters on s, for example if s = \"LEETCODE\"\u00a0then \"L\", \"T\",\"C\",\"O\",\"D\" are the unique characters since they appear only once in s, therefore\u00a0countUniqueChars(s) = 5.\n\nOn this problem given a string s we need to return the sum of\u00a0countUniqueChars(t)\u00a0where t is a substring of s. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.\nSince the answer can be very large, return\u00a0the answer\u00a0modulo\u00a010 ^ 9 + 7.\n\u00a0\nExample 1:\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\nExample 2:\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n\nExample 3:\nInput: s = \"LEETCODE\"\nOutput: 92\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 10^4\ns\u00a0contain upper-case English letters only.\n\n Examples: \nInput: \n['\"ABC\"']\nOutput: \n 33\n",
  "366": "Problem: \nFind the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.\n\n\nExample 1:\n\nInput:\ns = \"aaabb\", k = 3\n\nOutput:\n3\n\nThe longest substring is \"aaa\", as 'a' is repeated 3 times.\n\n\n\nExample 2:\n\nInput:\ns = \"ababbc\", k = 2\n\nOutput:\n5\n\nThe longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n Examples: \nInput: \n['\"aaabb\"', 3]\nOutput: \n 3\n",
  "367": "Problem: \nGiven an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n\nExample 1:\n\n\nInput: [1,3,4,2,2]\nOutput: 2\n\n\nExample 2:\n\n\nInput: [3,1,3,4,2]\nOutput: 3\n\nNote:\n\n\n       You must not modify the array (assume the array is read only).\n       You must use only constant, O(1) extra space.\n       Your runtime complexity should be less than O(n2).\n       There is only one duplicate number in the array, but it could be repeated more than once.\n\n Examples: \nInput: \n[[1, 3, 4, 2, 2]]\nOutput: \n 2\n",
  "368": "Problem: \nA chef\u00a0has collected data on the satisfaction level of his\u00a0n dishes.\u00a0Chef can cook any dish in 1 unit of time.\nLike-time coefficient\u00a0of a dish is defined as\u00a0the time taken to cook that dish including previous dishes multiplied by its satisfaction level \u00a0i.e.\u00a0 time[i]*satisfaction[i]\nReturn\u00a0the maximum sum of\u00a0Like-time coefficient that the chef can obtain after dishes preparation.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.\n\u00a0\nExample 1:\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.\nExample 2:\nInput: satisfaction = [4,3,2]\nOutput: 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n\nExample 3:\nInput: satisfaction = [-1,-4,-5]\nOutput: 0\nExplanation: People don't like the dishes. No dish is prepared.\n\nExample 4:\nInput: satisfaction = [-2,5,-1,0,3,-3]\nOutput: 35\n\n\u00a0\nConstraints:\n\nn == satisfaction.length\n1 <= n <= 500\n-10^3 <=\u00a0satisfaction[i] <= 10^3\n\n Examples: \nInput: \n[[-8, -7, -1, 0, 5]]\nOutput: \n 14\n",
  "372": "Problem: \nGiven an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.\n\n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.\n\n\nThe matching should cover the entire input string (not partial).\n\nNote:\n\n\n       s\u00a0could be empty and contains only lowercase letters a-z.\n       p could be empty and contains only lowercase letters a-z, and characters like\u00a0.\u00a0or\u00a0*.\n\n\nExample 1:\n\n\nInput:\ns = \"aa\"\np = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\n\nExample 2:\n\n\nInput:\ns = \"aa\"\np = \"a*\"\nOutput: true\nExplanation:\u00a0'*' means zero or more of the precedeng\u00a0element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\n\nExample 3:\n\n\nInput:\ns = \"ab\"\np = \".*\"\nOutput: true\nExplanation:\u00a0\".*\" means \"zero or more (*) of any character (.)\".\n\n\nExample 4:\n\n\nInput:\ns = \"aab\"\np = \"c*a*b\"\nOutput: true\nExplanation:\u00a0c can be repeated 0 times, a can be repeated 1 time. Therefore it matches \"aab\".\n\n\nExample 5:\n\n\nInput:\ns = \"mississippi\"\np = \"mis*is*p*.\"\nOutput: false\n\n Examples: \nInput: \n['\"aa\"', '\"a\"']\nOutput: \n False\n",
  "374": "Problem: \nGiven an array A of strings, find any\u00a0smallest string that contains each string in A as a\u00a0substring.\nWe may assume that no string in A is substring of another string in A.\n\u00a0\n\nExample 1:\nInput: [\"alex\",\"loves\",\"leetcode\"]\nOutput: \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n\n\nExample 2:\nInput: [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\nOutput: \"gctaagttcatgcatc\"\n\u00a0\n\n\nNote:\n\n1 <= A.length <= 12\n1 <= A[i].length <= 20\n\n Examples: \nInput: \n[['\"alex\"', '\"loves\"', '\"leetcode\"']]\nOutput: \n \"leetcode\"loves\"alex\"\n",
  "375": "Problem: \nGiven an unsorted array, find the maximum difference between the successive elements in its sorted form.\n\nReturn 0 if the array contains less than 2 elements.\n\nExample 1:\n\n\nInput: [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either\n\u00a0            (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\n\n\nInput: [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\nNote:\n\n\n       You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.\n       Try to solve it in linear time/space.\n\n Examples: \nInput: \n[[3, 6, 9, 1]]\nOutput: \n 3\n",
  "376": "Problem: \nGiven N, consider a convex N-sided polygon with vertices labelled A[0], A[i], ..., A[N-1]\u00a0in clockwise order.\nSuppose you triangulate the polygon into N-2 triangles.\u00a0 For each triangle, the value of that triangle is the product\u00a0of the labels of the vertices, and the total score of the triangulation is the sum of these values over all N-2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.\n\u00a0\n\n\n\nExample 1:\nInput: [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.\n\n\nExample 2:\n\nInput: [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.  The minimum score is 144.\n\n\nExample 3:\nInput: [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n\n\u00a0\nNote:\n\n3 <= A.length <= 50\n1 <= A[i] <= 100\n\n Examples: \nInput: \n[[1, 2, 3]]\nOutput: \n 6\n",
  "378": "Problem: \nGiven a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n\n\nNote:\n\nEach of the array element will not exceed 100.\nThe array size will not exceed 200.\n\n\n\nExample 1:\n\nInput: [1, 5, 11, 5]\n\nOutput: true\n\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n\n\n\nExample 2:\n\nInput: [1, 2, 3, 5]\n\nOutput: false\n\nExplanation: The array cannot be partitioned into equal sum subsets.\n\n Examples: \nInput: \n[[1, 5, 5, 11]]\nOutput: \n True\n",
  "379": "Problem: \nYou are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\n\nChoose\u00a0array nums1 or nums2 to traverse (from index-0).\nTraverse the current array from left to right.\nIf you are reading any value that is present in nums1 and nums2\u00a0you are allowed to change your path to the other array. (Only one repeated value is considered in the\u00a0valid path).\n\nScore is defined as the sum of uniques values in a valid path.\nReturn the maximum score you can obtain of all possible\u00a0valid\u00a0paths.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\n\nInput: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation:\u00a0Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].\n\nExample 2:\nInput: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation:\u00a0Maximum sum is obtained with the path [1,3,5,100].\n\nExample 3:\nInput: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation:\u00a0There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].\n\nExample 4:\nInput: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]\nOutput: 61\n\n\u00a0\nConstraints:\n\n1 <= nums1.length <= 10^5\n1 <= nums2.length <= 10^5\n1 <= nums1[i], nums2[i] <= 10^7\nnums1 and nums2 are strictly increasing.\n\n Examples: \nInput: \n[[2, 4, 5, 8, 10], [4, 6, 8, 9]]\nOutput: \n 30\n",
  "381": "Problem: \nGiven an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum \u2265 s. If there isn't one, return 0 instead.\n\nExample:\u00a0\n\n\nInput: s = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: the subarray [4,3] has the minimal length under the problem constraint.\n\nFollow up:\n\nIf you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).\n\n Examples: \nInput: \n[7, [2, 3, 1, 2, 4, 3]]\nOutput: \n 2\n",
  "382": "Problem: \nA peak element is an element that is greater than its neighbors.\n\nGiven an input array nums, where nums[i] \u2260 nums[i+1], find a peak element and return its index.\n\nThe array may contain multiple peaks, in that case return the index to any one of the peaks is fine.\n\nYou may imagine that nums[-1] = nums[n] = -\u221e.\n\nExample 1:\n\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\n\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 1 or 5 \nExplanation: Your function can return either index number 1 where the peak element is 2, \n\u00a0            or index number 5 where the peak element is 6.\n\n\nNote:\n\nYour solution should be in logarithmic complexity.\n\n Examples: \nInput: \n[[1, 2, 3, 1]]\nOutput: \n 2\n",
  "383": "Problem: \n(This problem is the same as Minimize Malware Spread, with the differences bolded.)\nIn a network of nodes, each node i is directly connected to another node j if and only if\u00a0graph[i][j] = 1.\nSome nodes initial are initially infected by malware.\u00a0 Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.\u00a0 This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial)\u00a0is the final number of nodes infected with malware in the entire network, after the spread of malware stops.\nWe will\u00a0remove one node from the initial list, completely removing it and any connections from this node to any other node.\u00a0 Return the node that if removed, would minimize\u00a0M(initial).\u00a0 If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\u00a0\n\n\n\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\n\nExample 2:\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1\n\n\nExample 3:\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1\n\n\u00a0\nNote:\n\n1 < graph.length = graph[0].length <= 300\n0 <= graph[i][j] == graph[j][i] <= 1\ngraph[i][i] = 1\n1 <= initial.length < graph.length\n0 <= initial[i] < graph.length\n\n Examples: \nInput: \n[[[1, 1, 0], [1, 1, 0], [0, 0, 1], [], []], [0, 1]]\nOutput: \n 0\n",
  "384": "Problem: \nGiven an array of integers A, consider all non-empty subsequences of A.\nFor any sequence S, let the\u00a0width\u00a0of S be the difference between the maximum and minimum element of S.\nReturn the sum of the widths of all subsequences of A.\u00a0\nAs the answer may be very large, return the answer modulo 10^9 + 7.\n\n\u00a0\nExample 1:\nInput: [2,1,3]\nOutput: 6\nExplanation:\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n\u00a0\nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= 20000\n\n Examples: \nInput: \n[[1, 2, 3]]\nOutput: \n 6\n",
  "385": "Problem: \nGiven two positive integers n and k.\nA factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n\u00a0sorted in ascending order, return the kth factor in this list or return -1 if n has less than\u00a0k factors.\n\u00a0\nExample 1:\nInput: n = 12, k = 3\nOutput: 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.\n\nExample 2:\nInput: n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2nd factor is 7.\n\nExample 3:\nInput: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.\n\nExample 4:\nInput: n = 1, k = 1\nOutput: 1\nExplanation: Factors list is [1], the 1st factor is 1.\n\nExample 5:\nInput: n = 1000, k = 3\nOutput: 4\nExplanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].\n\n\u00a0\nConstraints:\n\n1 <= k <= n <= 1000\n\n Examples: \nInput: \n[12, 3]\nOutput: \n 3\n",
  "386": "Problem: \nGiven an integer n, your task is to count how many strings of length n can be formed under the following rules:\n\nEach character is a lower case vowel\u00a0('a', 'e', 'i', 'o', 'u')\nEach vowel\u00a0'a' may only be followed by an 'e'.\nEach vowel\u00a0'e' may only be followed by an 'a'\u00a0or an 'i'.\nEach vowel\u00a0'i' may not be followed by another 'i'.\nEach vowel\u00a0'o' may only be followed by an 'i' or a\u00a0'u'.\nEach vowel\u00a0'u' may only be followed by an 'a'.\n\nSince the answer\u00a0may be too large,\u00a0return it modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n\nExample 2:\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n\nExample 3:\u00a0\nInput: n = 5\nOutput: 68\n\u00a0\nConstraints:\n\n1 <= n <= 2 * 10^4\n\n Examples: \nInput: \n[1]\nOutput: \n 5\n",
  "387": "Problem: \nIn a special ranking system,\u00a0each voter gives a rank from highest to lowest to all teams participated in the competition.\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\nGiven an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\nReturn a string of all teams sorted by the ranking system.\n\u00a0\nExample 1:\nInput: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nOutput: \"ACB\"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\nTeam B was ranked second by 2 voters and was ranked third by 3 voters.\nTeam C was ranked second by 3 voters and was ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team and team B is the third.\n\nExample 2:\nInput: votes = [\"WXYZ\",\"XYZW\"]\nOutput: \"XWYZ\"\nExplanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. \n\nExample 3:\nInput: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\nOutput: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\nExplanation: Only one voter so his votes are used for the ranking.\n\nExample 4:\nInput: votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]\nOutput: \"ABC\"\nExplanation: \nTeam A was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nTeam B was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nTeam C was ranked first by 2 voters, second by 2 voters and third by 2 voters.\nThere is a tie and we rank teams ascending by their IDs.\n\nExample 5:\nInput: votes = [\"M\",\"M\",\"M\",\"M\"]\nOutput: \"M\"\nExplanation: Only team M in the competition so it has the first rank.\n\n\u00a0\nConstraints:\n\n1 <= votes.length <= 1000\n1 <= votes[i].length <= 26\nvotes[i].length ==\u00a0votes[j].length for\u00a00 <= i, j < votes.length.\nvotes[i][j] is an English upper-case letter.\nAll characters of votes[i] are unique.\nAll the characters\u00a0that occur\u00a0in votes[0] also\u00a0occur\u00a0in votes[j] where 1 <= j < votes.length.\n\n Examples: \nInput: \n[['\"ABC\"', '\"ACB\"', '\"ABC\"', '\"ACB\"', '\"ACB\"']]\nOutput: \n \"ACB\n",
  "388": "Problem: \nGiven an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.\n\nAccording to the definition of h-index on Wikipedia: \"A scientist has index h if h of his/her N papers have at least h citations each, and the other N \u2212 h papers have no more than h citations each.\"\n\nExample:\n\n\nInput: citations = [3,0,6,1,5]\nOutput: 3 \nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had \n             received 3, 0, 6, 1, 5 citations respectively. \n\u00a0            Since the researcher has 3 papers with at least 3 citations each and the remaining \n\u00a0            two with no more than 3 citations each, her h-index is 3.\n\nNote:\u00a0If there are several possible values for h, the maximum one is taken as the h-index.\n\n Examples: \nInput: \n[[0, 1, 3, 5, 6]]\nOutput: \n 3\n",
  "389": "Problem: \nIn a given integer array A, we must move every element of A to either list B or list C. (B and C initially start empty.)\nReturn true if and only if after such a move, it is possible that the average value of B is equal to the average value of C, and B and C are both non-empty.\nExample :\nInput: \n[1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have the average of 4.5.\n\nNote:\n\nThe length of A will be in the range\u00a0[1, 30].\nA[i] will be in the range of [0, 10000].\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5, 6, 7, 8]]\nOutput: \n True\n",
  "390": "Problem: \nAlice and Bob take turns playing a game, with Alice starting first.\nInitially, there are n stones in a pile.\u00a0 On each player's turn, that player makes a\u00a0move\u00a0consisting of removing any non-zero square number of stones in the pile.\nAlso, if a player cannot make a move, he/she loses the game.\nGiven a positive\u00a0integer n.\u00a0Return\u00a0True\u00a0if and only if Alice wins the game otherwise return False, assuming both players play optimally.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.\nExample 2:\nInput: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\nExample 3:\nInput: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n\nExample 4:\nInput: n = 7\nOutput: false\nExplanation: Alice can't win the game if Bob plays optimally.\nIf Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). \nIf Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).\nExample 5:\nInput: n = 17\nOutput: false\nExplanation: Alice can't win the game if Bob plays optimally.\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\n\n Examples: \nInput: \n[1]\nOutput: \n True\n",
  "391": "Problem: \nDefine S = [s,n] as the string S which consists of n connected strings s. For example, [\"abc\", 3] =\"abcabcabc\". \nOn the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, \u201cabc\u201d  can be obtained from \u201cabdbec\u201d based on our definition, but it can not be obtained from \u201cacbbe\u201d.\nYou are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 \u2264 n1 \u2264 106 and 1 \u2264 n2 \u2264 106. Now consider the strings S1 and S2, where S1=[s1,n1] and S2=[s2,n2]. Find the maximum integer M such that [S2,M] can be obtained from S1.\n\nExample:\n\nInput:\ns1=\"acb\", n1=4\ns2=\"ab\", n2=2\n\nReturn:\n2\n\n Examples: \nInput: \n['\"acb\"', 4, '\"ab\"', 2]\nOutput: \n 2\n",
  "392": "Problem: \nGiven a binary string s (a string consisting only of '0's and '1's),\u00a0we can split s\u00a0into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).\nReturn the number of ways s can be split such that the number of\u00a0characters '1' is the same in s1, s2, and s3.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"\n\nExample 2:\nInput: s = \"1001\"\nOutput: 0\n\nExample 3:\nInput: s = \"0000\"\nOutput: 3\nExplanation: There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"\n\nExample 4:\nInput: s = \"100100010100110\"\nOutput: 12\n\n\u00a0\nConstraints:\n\n3 <= s.length <= 10^5\ns[i] is '0'\u00a0or\u00a0'1'.\n\n Examples: \nInput: \n['\"10101\"']\nOutput: \n 4\n",
  "393": "Problem: \nWrite a program to find the\u00a0n-th ugly number.\nUgly numbers are\u00a0positive integers\u00a0which are divisible by\u00a0a\u00a0or\u00a0b\u00a0or c.\n\u00a0\nExample 1:\nInput: n = 3, a = 2, b = 3, c = 5\nOutput: 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\nExample 2:\nInput: n = 4, a = 2, b = 3, c = 4\nOutput: 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n\nExample 3:\nInput: n = 5, a = 2, b = 11, c = 13\nOutput: 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n\nExample 4:\nInput: n = 1000000000, a = 2, b = 217983653, c = 336916467\nOutput: 1999999984\n\n\u00a0\nConstraints:\n\n1 <= n, a, b, c <= 10^9\n1 <= a * b * c <= 10^18\nIt's guaranteed that the result will be in range\u00a0[1,\u00a02 * 10^9]\n\n Examples: \nInput: \n[3, 2, 3, 5]\nOutput: \n 4\n",
  "394": "Problem: \nGiven a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.\n\nYou may assume the array's length is at most 10,000.\n\nExample:\n\nInput:\n[1,2,3]\n\nOutput:\n2\n\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n\n Examples: \nInput: \n[[1, 2, 3]]\nOutput: \n 2\n",
  "395": "Problem: \nYou are given an integer array A.\u00a0 From\u00a0some starting index, you can make a series of jumps.\u00a0 The (1st, 3rd, 5th, ...)\u00a0jumps in the series are called odd numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even numbered jumps.\nYou may from index i\u00a0jump forward to index j\u00a0(with i\u00a0< j) in the following way:\n\nDuring odd numbered jumps (ie. jumps 1, 3, 5, ...), you jump to the index j\u00a0such that A[i] <= A[j] and A[j] is the smallest possible value.\u00a0 If there are multiple such indexes j, you can only jump to the smallest such index j.\nDuring even numbered jumps (ie. jumps 2, 4, 6, ...), you jump to the index j\u00a0such that A[i] >= A[j] and A[j] is the largest\u00a0possible value.\u00a0 If there are multiple such indexes j, you can only jump to the smallest such index j.\n(It may be the case that for some index i, there are no legal jumps.)\n\nA starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping some number of times (possibly 0 or more than once.)\nReturn the number of good starting indexes.\n\u00a0\nExample 1:\nInput: [10,13,12,14,15]\nOutput: 2\nExplanation: \nFrom starting index i = 0, we can jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or equal to A[0]), then we can't jump any more.\nFrom starting index i = 1 and i = 2, we can jump to i = 3, then we can't jump any more.\nFrom starting index i = 3, we can jump to i = 4, so we've reached the end.\nFrom starting index i = 4, we've reached the end already.\nIn total, there are 2 different starting indexes (i = 3, i = 4) where we can reach the end with some number of jumps.\n\n\nExample 2:\nInput: [2,3,1,1,4]\nOutput: 3\nExplanation: \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\n\nDuring our 1st jump (odd numbered), we first jump to i = 1 because A[1] is the smallest value in (A[1], A[2], A[3], A[4]) that is greater than or equal to A[0].\n\nDuring our 2nd jump (even numbered), we jump from i = 1 to i = 2 because A[2] is the largest value in (A[2], A[3], A[4]) that is less than or equal to A[1].  A[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3.\n\nDuring our 3rd jump (odd numbered), we jump from i = 2 to i = 3 because A[3] is the smallest value in (A[3], A[4]) that is greater than or equal to A[2].\n\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\n\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indexes (i = 1, i = 3, i = 4) where we can reach the end with some number of jumps.\n\n\nExample 3:\nInput: [5,1,3,4,2]\nOutput: 3\nExplanation: \nWe can reach the end from starting indexes 1, 2, and 4.\n\n\n\n\u00a0\nNote:\n\n1 <= A.length <= 20000\n0 <= A[i] < 100000\n\n Examples: \nInput: \n[[10, 13, 12, 14, 15]]\nOutput: \n 2\n",
  "396": "Problem: \nGiven a positive integer K, you need find the smallest\u00a0positive integer N such that N is divisible by K, and N only contains the digit 1.\nReturn the\u00a0length of N.\u00a0 If there is no such N,\u00a0return -1.\n\u00a0\nExample 1:\nInput: 1\nOutput: 1\nExplanation: The smallest answer is N = 1, which has length 1.\nExample 2:\nInput: 2\nOutput: -1\nExplanation: There is no such positive integer N divisible by 2.\nExample 3:\nInput: 3\nOutput: 3\nExplanation: The smallest answer is N = 111, which has length 3.\n\u00a0\nNote:\n\n1 <= K <= 10^5\n\n Examples: \nInput: \n[1]\nOutput: \n 1\n",
  "397": "Problem: \nGiven an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n\nExample:\n\n\nInput: 13\nOutput: 6 \nExplanation: Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.\n\n Examples: \nInput: \n[13]\nOutput: \n 6\n",
  "398": "Problem: \nGiven an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n\nExample 1:\n\nInput:nums = [1,1,1], k = 2\nOutput: 2\n\n\n\nNote:\n\nThe length of the array is in range [1, 20,000].\nThe range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].\n\n Examples: \nInput: \n[[1, 1, 1], 2]\nOutput: \n 2\n",
  "399": "Problem: \nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\n\nGiven a non-empty string containing only digits, determine the total number of ways to decode it.\n\nExample 1:\n\n\nInput: \"12\"\nOutput: 2\nExplanation:\u00a0It could be decoded as \"AB\" (1 2) or \"L\" (12).\n\n\nExample 2:\n\n\nInput: \"226\"\nOutput: 3\nExplanation:\u00a0It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\n Examples: \nInput: \n['\"12\"']\nOutput: \n 0\n",
  "400": "Problem: \nGiven n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\n\n\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\n\n\u00a0\n\n\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\n\n\u00a0\n\nExample:\n\n\nInput: [2,1,5,6,2,3]\nOutput: 10\n\n Examples: \nInput: \n[[2, 1, 5, 6, 2, 3, -1]]\nOutput: \n 10\n",
  "403": "Problem: \nGiven an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n\n\nFormally the function should:\nReturn true if there exists i, j, k  \nsuch that arr[i] < arr[j] < arr[k] given 0 \u2264 i < j < k \u2264 n-1 \nelse return false.\n\n\n\nYour algorithm should run in O(n) time complexity and O(1) space complexity.\n\n\nExamples:\nGiven [1, 2, 3, 4, 5],\nreturn true.\n\n\nGiven [5, 4, 3, 2, 1],\nreturn false.\n\n\nCredits:Special thanks to @DjangoUnchained for adding this problem and creating all test cases.\n\n Examples: \nInput: \n[[1, 2, 3, 4, 5]]\nOutput: \n True\n",
  "404": "Problem: \nWe partition a row of numbers A\u00a0into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?\nNote that our partition must use every number in A, and that scores are not necessarily integers.\nExample:\nInput: \nA = [9,1,2,3,9]\nK = 3\nOutput: 20\nExplanation: \nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\n\u00a0\nNote: \n\n1 <= A.length <= 100.\n1 <= A[i] <= 10000.\n1 <= K <= A.length.\nAnswers within 10^-6 of the correct answer will be accepted as correct.\n\n Examples: \nInput: \n[[9, 1, 2, 3, 9], 3]\nOutput: \n 20.0\n",
  "405": "Problem: \nAlice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points, and draws numbers while she has less than K points.\u00a0 During each draw, she gains an integer number of points randomly from the range [1, W], where W is an integer.\u00a0 Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets K or more points.\u00a0 What is the probability\u00a0that she has N or less points?\nExample 1:\nInput: N = 10, K = 1, W = 10\nOutput: 1.00000\nExplanation:  Alice gets a single card, then stops.\n\nExample 2:\nInput: N = 6, K = 1, W = 10\nOutput: 0.60000\nExplanation:  Alice gets a single card, then stops.\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.\n\nExample 3:\nInput: N = 21, K = 17, W = 10\nOutput: 0.73278\nNote:\n\n0 <= K <= N <= 10000\n1 <= W <= 10000\nAnswers will be accepted as correct if they are within 10^-5 of the correct answer.\nThe judging time limit has been reduced for this question.\n\n Examples: \nInput: \n[10, 1, 10]\nOutput: \n 1.0\n",
  "406": "Problem: \nGiven two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\n\n\n       Only one letter can be changed at a time.\n       Each transformed word must exist in the word list. Note that beginWord is not a transformed word.\n\n\nNote:\n\n\n       Return 0 if there is no such transformation sequence.\n       All words have the same length.\n       All words contain only lowercase alphabetic characters.\n       You may assume no duplicates in the word list.\n       You may assume beginWord and endWord are non-empty and are not the same.\n\n\nExample 1:\n\n\nInput:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n\n\nExample 2:\n\n\nInput:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput:\u00a00\n\nExplanation:\u00a0The endWord \"cog\" is not in wordList, therefore no possible\u00a0transformation.\n\n Examples: \nInput: \n['\"hit\"', '\"cog\"', ['\"hot\"', '\"dot\"', '\"dog\"', '\"lot\"', '\"log\"', '\"cog\"']]\nOutput: \n 5\n",
  "407": "Problem: \nGiven a balanced parentheses string S, compute the score of the string based on the following rule:\n\n() has score 1\nAB has score A + B, where A and B are balanced parentheses strings.\n(A) has score 2 * A, where A is a balanced parentheses string.\n\n\u00a0\n\nExample 1:\nInput: \"()\"\nOutput: 1\n\n\nExample 2:\nInput: \"(())\"\nOutput: 2\n\n\nExample 3:\nInput: \"()()\"\nOutput: 2\n\n\nExample 4:\nInput: \"(()(()))\"\nOutput: 6\n\n\u00a0\nNote:\n\nS is a balanced parentheses string, containing only ( and ).\n2 <= S.length <= 50\n\n Examples: \nInput: \n['\"()\"']\nOutput: \n 1\n",
  "408": "Problem: \nGiven an integer array\u00a0arr and a target value target, return\u00a0the integer\u00a0value\u00a0such that when we change all the integers\u00a0larger than value\u00a0in the given array to be equal to\u00a0value,\u00a0the sum of the array gets\u00a0as close as possible (in absolute difference) to\u00a0target.\nIn case of a tie, return the minimum such integer.\nNotice that the answer is not neccesarilly a number from arr.\n\u00a0\nExample 1:\nInput: arr = [4,9,3], target = 10\nOutput: 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\n\nExample 2:\nInput: arr = [2,3,5], target = 10\nOutput: 5\n\nExample 3:\nInput: arr = [60864,25176,27249,21296,20204], target = 56803\nOutput: 11361\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^4\n1 <= arr[i], target <= 10^5\n\n Examples: \nInput: \n[[4, 9, 3], 10]\nOutput: \n 3\n",
  "409": "Problem: \nGiven an integer array arr\u00a0and an integer k, modify the array by repeating it k times.\nFor example, if arr\u00a0= [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0\u00a0and its sum in that case is 0.\nAs the answer can be very large, return the answer\u00a0modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: arr = [1,2], k = 3\nOutput: 9\n\nExample 2:\nInput: arr = [1,-2,1], k = 5\nOutput: 2\n\nExample 3:\nInput: arr = [-1,-2], k = 7\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= k <= 10^5\n-10^4 <= arr[i] <= 10^4\n\n Examples: \nInput: \n[[1, 2], 3]\nOutput: \n 9\n",
  "411": "Problem: \nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote:\n\n\n       The same word in the dictionary may be reused multiple times in the segmentation.\n       You may assume the dictionary does not contain duplicate words.\n\n\nExample 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\nExample 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n\u00a0            Note that you are allowed to reuse a dictionary word.\n\n\nExample 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\n Examples: \nInput: \n['\"leetcode\"', ['\"leet\"', '\"code\"']]\nOutput: \n False\n",
  "412": "Problem: \nYou have d dice, and each die has f faces numbered 1, 2, ..., f.\nReturn the number of possible ways (out of fd\u00a0total ways) modulo 10^9 + 7 to roll the dice so the sum of the face up numbers equals target.\n\u00a0\nExample 1:\nInput: d = 1, f = 6, target = 3\nOutput: 1\nExplanation: \nYou throw one die with 6 faces.  There is only one way to get a sum of 3.\n\nExample 2:\nInput: d = 2, f = 6, target = 7\nOutput: 6\nExplanation: \nYou throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:\n1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n\nExample 3:\nInput: d = 2, f = 5, target = 10\nOutput: 1\nExplanation: \nYou throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.\n\nExample 4:\nInput: d = 1, f = 2, target = 3\nOutput: 0\nExplanation: \nYou throw one die with 2 faces.  There is no way to get a sum of 3.\n\nExample 5:\nInput: d = 30, f = 30, target = 500\nOutput: 222616187\nExplanation: \nThe answer must be returned modulo 10^9 + 7.\n\n\u00a0\nConstraints:\n\n1 <= d, f <= 30\n1 <= target <= 1000\n\n Examples: \nInput: \n[1, 6, 3]\nOutput: \n 1\n",
  "413": "Problem: \nGiven a palindromic string palindrome, replace exactly one character by any lowercase English letter so that the string becomes the lexicographically smallest possible string that isn't a palindrome.\nAfter doing so, return the final string.\u00a0 If there is no way to do so, return the empty string.\n\u00a0\nExample 1:\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\n\nExample 2:\nInput: palindrome = \"a\"\nOutput: \"\"\n\n\u00a0\nConstraints:\n\n1 <= palindrome.length <= 1000\npalindrome\u00a0consists of only lowercase English letters.\n\n Examples: \nInput: \n['\"abccba\"']\nOutput: \n aabccba\"\n",
  "414": "Problem: \nGiven an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer\u00a0wins and remains at position 0 and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.\n\u00a0\nExample 1:\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n\nExample 2:\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.\n\nExample 3:\nInput: arr = [1,9,8,2,3,7,6,4,5], k = 7\nOutput: 9\n\nExample 4:\nInput: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\nOutput: 99\n\n\u00a0\nConstraints:\n\n2 <= arr.length <= 10^5\n1 <= arr[i] <= 10^6\narr contains distinct\u00a0integers.\n1 <= k <= 10^9\n\n Examples: \nInput: \n[[5, 1, 2, 3, 4, 6, 7], 2]\nOutput: \n 5\n",
  "415": "Problem: \nWe have two integer sequences A and B of the same non-zero length.\nWe are allowed to swap elements A[i] and B[i].\u00a0 Note that both elements are in the same index position in their respective sequences.\nAt the end of some number of swaps, A and B are both strictly increasing.\u00a0 (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)\nGiven A and B, return the minimum number of swaps to make both sequences strictly increasing.\u00a0 It is guaranteed that the given input always makes it possible.\nExample:\nInput: A = [1,3,5,4], B = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap A[3] and B[3].  Then the sequences are:\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\nNote:\n\nA, B are arrays with the same length, and that length will be in the range [1, 1000].\nA[i], B[i] are integer values in the range [0, 2000].\n\n Examples: \nInput: \n[[1, 3, 5, 4], [1, 2, 3, 7]]\nOutput: \n 1\n",
  "417": "Problem: \nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n\n\n\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\n Examples: \nInput: \n[[1, 3], [2]]\nOutput: \n 2.0\n",
  "418": "Problem: \nGiven a positive integer n and you can do operations as follow:\n\n\n\n\nIf n is even, replace n with n/2.\nIf n is odd, you can replace n with either n + 1 or n - 1.\n\n\n\n\nWhat is the minimum number of replacements needed for n to become 1?\n\n\n\n\nExample 1:\n\nInput:\n8\n\nOutput:\n3\n\nExplanation:\n8 -> 4 -> 2 -> 1\n\n\n\nExample 2:\n\nInput:\n7\n\nOutput:\n4\n\nExplanation:\n7 -> 8 -> 4 -> 2 -> 1\nor\n7 -> 6 -> 3 -> 2 -> 1\n\n Examples: \nInput: \n[8]\nOutput: \n 3\n",
  "419": "Problem: \nThere are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the i-th round, you toggle every i bulb. For the n-th round, you only toggle the last bulb. Find how many bulbs are on after n rounds.\n\nExample:\n\n\nInput: 3\nOutput: 1 \nExplanation: \nAt first, the three bulbs are [off, off, off].\nAfter first round, the three bulbs are [on, on, on].\nAfter second round, the three bulbs are [on, off, on].\nAfter third round, the three bulbs are [on, off, off]. \n\nSo you should return 1, because there is only one bulb is on.\n\n Examples: \nInput: \n[3]\nOutput: \n 1\n",
  "420": "Problem: \nGiven the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\n\u00a0\nExample 1:\nInput: s = \"eleetminicoworoep\"\nOutput: 13\nExplanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.\n\nExample 2:\nInput: s = \"leetcodeisgreat\"\nOutput: 5\nExplanation: The longest substring is \"leetc\" which contains two e's.\n\nExample 3:\nInput: s = \"bcbcbc\"\nOutput: 6\nExplanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 5 x 10^5\ns\u00a0contains only lowercase English letters.\n\n Examples: \nInput: \n['\"eleetminicoworoep\"']\nOutput: \n 13\n",
  "421": "Problem: \nGiven a string s, return the last substring of s in lexicographical order.\n\u00a0\nExample 1:\nInput: \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n\nExample 2:\nInput: \"leetcode\"\nOutput: \"tcode\"\n\n\u00a0\nNote:\n\n1 <= s.length <= 4\u00a0* 10^5\ns contains only lowercase English letters.\n\n Examples: \nInput: \n['\"abab\"']\nOutput: \n bab\"\n",
  "422": "Problem: \nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\n\n\nExample 2:\n\n\nInput: \"cbbd\"\nOutput: \"bb\"\n\n Examples: \nInput: \n['\"babad\"']\nOutput: \n bab\n",
  "423": "Problem: \nGiven an integer array arr\u00a0and an integer difference, return the length of the longest subsequence in arr\u00a0which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals\u00a0difference.\n\u00a0\nExample 1:\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\nExample 2:\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n\nExample 3:\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n-10^4 <= arr[i], difference <= 10^4\n\n Examples: \nInput: \n[[1, 2, 3, 4], 1]\nOutput: \n 4\n",
  "425": "Problem: \nGiven two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\n\nReturn the quotient after dividing dividend by divisor.\n\nThe integer division should truncate toward zero.\n\nExample 1:\n\n\nInput: dividend = 10, divisor = 3\nOutput: 3\n\nExample 2:\n\n\nInput: dividend = 7, divisor = -3\nOutput: -2\n\nNote:\n\n\n       Both dividend and divisor\u00a0will be\u00a032-bit\u00a0signed integers.\n       The divisor will never be 0.\n       Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u2212231, \u00a0231 \u2212 1]. For the purpose of this problem, assume that your function returns 231 \u2212 1 when the division result\u00a0overflows.\n\n Examples: \nInput: \n[10, 3]\nOutput: \n 3\n",
  "426": "Problem: \nStarting with a positive integer N, we reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true\u00a0if and only if we can do this in a way such that the resulting number is a power of 2.\n\u00a0\n\n\n\nExample 1:\nInput: 1\nOutput: true\n\n\nExample 2:\nInput: 10\nOutput: false\n\n\nExample 3:\nInput: 16\nOutput: true\n\n\nExample 4:\nInput: 24\nOutput: false\n\n\nExample 5:\nInput: 46\nOutput: true\n\n\u00a0\nNote:\n\n1 <= N <= 10^9\n\n Examples: \nInput: \n[1]\nOutput: \n True\n",
  "427": "Problem: \nGiven n orders, each order consist in pickup and delivery services.\u00a0\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of\u00a0pickup(i).\u00a0\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n\nExample 2:\nInput: n = 2\nOutput: 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n\nExample 3:\nInput: n = 3\nOutput: 90\n\n\u00a0\nConstraints:\n\n1 <= n <= 500\n\n Examples: \nInput: \n[1]\nOutput: \n 1\n",
  "429": "Problem: \nYou are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called \"bulls\") and how many digits match the secret number but locate in the wrong position (called \"cows\"). Your friend will use successive guesses and hints to eventually derive the secret number.\n\nWrite a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows.\u00a0\n\nPlease note that both secret number and friend's guess may contain duplicate digits.\n\nExample 1:\n\n\nInput: secret = \"1807\", guess = \"7810\"\n\nOutput: \"1A3B\"\n\nExplanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.\n\nExample 2:\n\n\nInput: secret = \"1123\", guess = \"0111\"\n\nOutput: \"1A1B\"\n\nExplanation: The 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow.\n\nNote: You may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.\n\n Examples: \nInput: \n['\"1807\"', '\"7810\"']\nOutput: \n 3A3B\n",
  "430": "Problem: \nGiven a string S, count the number of distinct, non-empty subsequences of S .\nSince the result may be large, return the answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n\n\nExample 2:\nInput: \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".\n\n\nExample 3:\nInput: \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\n\n\n\u00a0\n\u00a0\nNote:\n\nS contains only lowercase letters.\n1 <= S.length <= 2000\n\n Examples: \nInput: \n['\"abc\"']\nOutput: \n 30\n",
  "431": "Problem: \nGiven an array of integers A, find the sum of min(B), where B ranges over\u00a0every (contiguous) subarray of A.\nSince the answer may be large, return the answer modulo 10^9 + 7.\n\u00a0\nExample 1:\nInput: [3,1,2,4]\nOutput: 17\nExplanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\u00a0 Sum is 17.\n\u00a0\nNote:\n\n1 <= A.length <= 30000\n1 <= A[i] <= 30000\n\n Examples: \nInput: \n[[3, 1, 2, 4, 0]]\nOutput: \n 17\n",
  "432": "Problem: \nGiven an array of integers\u00a0nums\u00a0and a positive integer\u00a0k, find whether it's possible to divide this array into\u00a0sets of k consecutive numbers\nReturn\u00a0True\u00a0if its possible\u00a0otherwise\u00a0return\u00a0False.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].\n\nExample 2:\nInput: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].\n\nExample 3:\nInput: nums = [3,3,2,2,1,1], k = 3\nOutput: true\n\nExample 4:\nInput: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation: Each array should be divided in subarrays of size 3.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n1 <= k <= nums.length\n\n Examples: \nInput: \n[[1, 2, 3, 3, 4, 4, 5, 6], 4]\nOutput: \n True\n",
  "433": "Problem: \nGiven an array of integers arr and two integers k and threshold.\nReturn the number of sub-arrays of size k and average greater than or equal to threshold.\n\u00a0\nExample 1:\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\nExample 2:\nInput: arr = [1,1,1,1,1], k = 1, threshold = 0\nOutput: 5\n\nExample 3:\nInput: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\nOutput: 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\nExample 4:\nInput: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\nOutput: 1\n\nExample 5:\nInput: arr = [4,4,4,4], k = 4, threshold = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^4\n1 <= k <= arr.length\n0 <= threshold <= 10^4\n\n Examples: \nInput: \n[[2, 2, 2, 2, 5, 5, 5, 8], 3, 4]\nOutput: \n 3\n",
  "434": "Problem: \nGiven a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's\u00a0in the resulting array.\nReturn 0 if there is no such subarray.\n\u00a0\nExample 1:\nInput: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\nExample 2:\nInput: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\nExample 3:\nInput: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.\nExample 4:\nInput: nums = [1,1,0,0,1,1,1,0,1]\nOutput: 4\n\nExample 5:\nInput: nums = [0,0,0]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\nnums[i]\u00a0is either\u00a00\u00a0or\u00a01.\n\n Examples: \nInput: \n[[1, 1, 0, 1]]\nOutput: \n 3\n",
  "436": "Problem: \nThere are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:\n\nEat one orange.\nIf the number of remaining oranges (n) is divisible by 2 then you can eat\u00a0 n/2 oranges.\nIf the number of remaining oranges (n) is divisible by 3\u00a0then you can eat\u00a0 2*(n/3)\u00a0oranges.\n\nYou can only choose one of the actions per day.\nReturn the minimum number of days to eat n oranges.\n\u00a0\nExample 1:\nInput: n = 10\nOutput: 4\nExplanation: You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.\n\nExample 2:\nInput: n = 6\nOutput: 3\nExplanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.\n\nExample 3:\nInput: n = 1\nOutput: 1\n\nExample 4:\nInput: n = 56\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= n <= 2*10^9\n\n Examples: \nInput: \n[10]\nOutput: \n 4\n",
  "437": "Problem: \nAn encoded string S is given.\u00a0 To find and write the decoded string to a tape, the encoded string is read one character at a time\u00a0and the following steps are taken:\n\nIf the character read is a letter, that letter is written onto the tape.\nIf the character read is a digit (say d), the entire current tape is repeatedly written\u00a0d-1\u00a0more times in total.\n\nNow for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.\n\u00a0\n\nExample 1:\nInput: S = \"leet2code3\", K = 10\nOutput: \"o\"\nExplanation: \nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\".\n\n\nExample 2:\nInput: S = \"ha22\", K = 5\nOutput: \"h\"\nExplanation: \nThe decoded string is \"hahahaha\".  The 5th letter is \"h\".\n\n\nExample 3:\nInput: S = \"a2345678999999999999999\", K = 1\nOutput: \"a\"\nExplanation: \nThe decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\".\n\n\n\n\n\u00a0\nConstraints:\n\n2 <= S.length <= 100\nS\u00a0will only contain lowercase letters and digits 2 through 9.\nS\u00a0starts with a letter.\n1 <= K <= 10^9\nIt's guaranteed that K\u00a0is less than or equal to the length of the decoded string.\nThe decoded string is guaranteed to have less than 2^63 letters.\n\n Examples: \nInput: \n['\"leet2code3\"', 10]\nOutput: \n t\n",
  "438": "Problem: \nGiven an array arr\u00a0that represents a permutation of numbers from 1\u00a0to n. You have a binary string of size\u00a0n\u00a0that initially has all its bits set to zero.\nAt each step i\u00a0(assuming both the binary string and arr are 1-indexed) from 1 to\u00a0n, the bit at position\u00a0arr[i]\u00a0is set to\u00a01. You are given an integer\u00a0m\u00a0and you need to find the latest step at which there exists a group of ones of length\u00a0m. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly\u00a0m. If no such group exists, return\u00a0-1.\n\u00a0\nExample 1:\nInput: arr = [3,5,1,2,4], m = 1\nOutput: 4\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.\nExample 2:\nInput: arr = [3,1,5,4,2], m = 2\nOutput: -1\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.\n\nExample 3:\nInput: arr = [1], m = 1\nOutput: 1\n\nExample 4:\nInput: arr = [2,1], m = 2\nOutput: 2\n\n\u00a0\nConstraints:\n\nn == arr.length\n1 <= n <= 10^5\n1 <= arr[i] <= n\nAll integers in\u00a0arr\u00a0are\u00a0distinct.\n1 <= m\u00a0<= arr.length\n\n Examples: \nInput: \n[[3, 5, 1, 2, 4], 1]\nOutput: \n 4\n",
  "439": "Problem: \nA subarray A[i], A[i+1], ..., A[j]\u00a0of A is said to be turbulent if and only if:\n\nFor i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;\nOR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.\n\nThat is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nReturn the length of a\u00a0maximum size turbulent subarray of A.\n\u00a0\n\nExample 1:\nInput: [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: (A[1] > A[2] < A[3] > A[4] < A[5])\n\n\nExample 2:\nInput: [4,8,12,16]\nOutput: 2\n\n\nExample 3:\nInput: [100]\nOutput: 1\n\n\n\n\n\u00a0\nNote:\n\n1 <= A.length <= 40000\n0 <= A[i] <= 10^9\n\n Examples: \nInput: \n[[9, 4, 2, 10, 7, 8, 8, 1, 9]]\nOutput: \n 5\n",
  "440": "Problem: \nThere is\u00a0a special square room with mirrors on each of the four\u00a0walls.\u00a0 Except for the southwest\u00a0corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p, and a laser ray from the southwest corner\u00a0first meets the east wall at a distance q\u00a0from the 0th receptor.\nReturn the number of the receptor that the ray meets first.\u00a0 (It is guaranteed that the ray will meet\u00a0a receptor eventually.)\n\u00a0\n\nExample 1:\nInput: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n\n\nNote:\n\n1 <= p <= 1000\n0 <= q <= p\n\n Examples: \nInput: \n[2, 1]\nOutput: \n 2\n",
  "441": "Problem: \nGiven a positive integer\u00a0N, how many ways can we write it as a sum of\u00a0consecutive positive integers?\nExample 1:\nInput: 5\nOutput: 2\nExplanation: 5 = 5 = 2 + 3\nExample 2:\nInput: 9\nOutput: 3\nExplanation: 9 = 9 = 4 + 5 = 2 + 3 + 4\nExample 3:\nInput: 15\nOutput: 4\nExplanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\nNote:\u00a01 <= N <= 10 ^ 9.\n\n Examples: \nInput: \n[5]\nOutput: \n 2\n",
  "442": "Problem: \nGiven an n\u00a0x n\u00a0binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).\n\u00a0\nExample 1:\n\nInput: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3\n\nExample 2:\n\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.\n\nExample 3:\n\nInput: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0\n\n\u00a0\nConstraints:\n\nn == grid.length\nn == grid[i].length\n1 <= n\u00a0<= 200\ngrid[i][j] is 0 or 1\n\n Examples: \nInput: \n[[[0, 0, 1], [1, 1, 0], [1, 0, 0], [], []]]\nOutput: \n 3\n",
  "444": "Problem: \nn\u00a0passengers board an airplane with exactly\u00a0n\u00a0seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:\n\nTake their own seat if it is still available,\u00a0\nPick other seats randomly when they find their seat occupied\u00a0\n\nWhat is the probability that the n-th person can get his own seat?\n\u00a0\nExample 1:\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.\nExample 2:\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\n\n Examples: \nInput: \n[1]\nOutput: \n 1.0\n",
  "445": "Problem: \nGiven an array nums, you are allowed to choose one element of nums and change it by any\u00a0value in one move.\nReturn the minimum difference between the largest and smallest value of nums\u00a0after perfoming at most 3 moves.\n\u00a0\nExample 1:\nInput: nums = [5,3,2,4]\nOutput: 0\nExplanation: Change the array [5,3,2,4] to [2,2,2,2].\nThe difference between the maximum and minimum is 2-2 = 0.\nExample 2:\nInput: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. \nThe difference between the maximum and minimum is 1-0 = 1.\n\nExample 3:\nInput: nums = [6,6,0,1,1,4,6]\nOutput: 2\n\nExample 4:\nInput: nums = [1,5,6,14,15]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\n\n Examples: \nInput: \n[[2, 3, 4, 5]]\nOutput: \n 0\n",
  "446": "Problem: \nGiven an array of integers\u00a0arr\u00a0and an integer k.\u00a0Find the least number of unique integers\u00a0after removing exactly k elements.\n\n\n\u00a0\nExample 1:\nInput: arr = [5,5,4], k = 1\nOutput: 1\nExplanation: Remove the single 4, only 5 is left.\n\nExample 2:\nInput: arr = [4,3,1,1,3,3,2], k = 3\nOutput: 2\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n\u00a0\nConstraints:\n\n1 <= arr.length\u00a0<= 10^5\n1 <= arr[i] <= 10^9\n0 <= k\u00a0<= arr.length\n\n Examples: \nInput: \n[[5, 5, 4], 1]\nOutput: \n 1\n",
  "447": "Problem: \nGiven a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n \nExample 1:\n \n \nInput: \"bcabc\"\nOutput: \"abc\"\n \n \nExample 2:\n \n \nInput: \"cbacdcbc\"\nOutput: \"acdb\"\n\n Examples: \nInput: \n['\"bcabc\"']\nOutput: \n \"abc\n",
  "448": "Problem: \nGiven a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\n\n\n\nExample 1:\n\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n\n\n\n\nExample 2:\n\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n\n\n\nNote:\n\nThe length of the array won't exceed 10,000.\nYou may assume the sum of all the numbers is in the range of a signed 32-bit integer.\n\n Examples: \nInput: \n[[23, 2, 4, 6, 7], 6]\nOutput: \n True\n",
  "449": "Problem: \nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., \u00a0[0,1,2,4,5,6,7]\u00a0might become \u00a0[4,5,6,7,0,1,2]).\n\nFind the minimum element.\n\nYou may assume no duplicate exists in the array.\n\nExample 1:\n\n\nInput: [3,4,5,1,2] \nOutput: 1\n\n\nExample 2:\n\n\nInput: [4,5,6,7,0,1,2]\nOutput: 0\n\n Examples: \nInput: \n[[3, 4, 5, 1, 2]]\nOutput: \n 1\n",
  "452": "Problem: \nYou want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the i-th job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done in that day.\nGiven an array of integers jobDifficulty and an integer d. The difficulty of the i-th\u00a0job is\u00a0jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.\n\u00a0\nExample 1:\n\nInput: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n\nExample 2:\nInput: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n\nExample 3:\nInput: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.\n\nExample 4:\nInput: jobDifficulty = [7,1,7,1,7,1], d = 3\nOutput: 15\n\nExample 5:\nInput: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6\nOutput: 843\n\n\u00a0\nConstraints:\n\n1 <= jobDifficulty.length <= 300\n0 <=\u00a0jobDifficulty[i] <= 1000\n1 <= d <= 10\n\n Examples: \nInput: \n[[6, 5, 4, 3, 2, 1], 2]\nOutput: \n 7\n",
  "453": "Problem: \nThere is\u00a0a row of\u00a0m\u00a0houses in a small city, each house must be painted with one of the\u00a0n\u00a0colors (labeled from 1 to n), some houses that has been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color. (For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods\u00a0 [{1}, {2,2}, {3,3}, {2}, {1,1}]).\nGiven an array houses, an\u00a0m * n\u00a0matrix cost and\u00a0an integer target\u00a0where:\n\nhouses[i]:\u00a0is the color of the house i, 0 if the house is not painted yet.\ncost[i][j]: is the cost of paint the house i with the color j+1.\n\nReturn the minimum cost of painting all the\u00a0remaining houses in such a way that there are exactly target neighborhoods, if\u00a0not possible return -1.\n\u00a0\nExample 1:\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n\nExample 2:\nInput: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.\n\nExample 3:\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\nOutput: 5\n\nExample 4:\nInput: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.\n\n\u00a0\nConstraints:\n\nm == houses.length == cost.length\nn == cost[i].length\n1 <= m <= 100\n1 <= n <= 20\n1 <= target\u00a0<= m\n0 <= houses[i]\u00a0<= n\n1 <= cost[i][j] <= 10^4\n\n Examples: \nInput: \n[[0, 0, 0, 0, 0], [[1, 10], [10, 1], [10, 1], [1, 10], [5, 1], [], []], 5, 2, 3]\nOutput: \n 9\n",
  "454": "Problem: \nGiven a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.\n\n\nExample 1:\n\nInput: 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.\n\n\n\nExample 2:\n\nInput: 9973\nOutput: 9973\nExplanation: No swap.\n\n\n\n\nNote:\n\nThe given number is in the range [0, 108]\n\n Examples: \nInput: \n[2736]\nOutput: \n 7236\n",
  "456": "Problem: \nA frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\n\n\nIf the frog's last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.\n\nNote:\n\nThe number of stones is \u2265 2 and is < 1,100.\nEach stone's position will be a non-negative integer < 231.\nThe first stone's position is always 0.\n\n\n\nExample 1:\n\n[0,1,3,5,6,8,12,17]\n\nThere are a total of 8 stones.\nThe first stone at the 0th unit, second stone at the 1st unit,\nthird stone at the 3rd unit, and so on...\nThe last stone at the 17th unit.\n\nReturn true. The frog can jump to the last stone by jumping \n1 unit to the 2nd stone, then 2 units to the 3rd stone, then \n2 units to the 4th stone, then 3 units to the 6th stone, \n4 units to the 7th stone, and 5 units to the 8th stone.\n\n\n\nExample 2:\n\n[0,1,2,3,4,8,9,11]\n\nReturn false. There is no way to jump to the last stone as \nthe gap between the 5th and 6th stone is too large.\n\n Examples: \nInput: \n[[0, 1, 3, 4, 5, 7, 9, 10, 12]]\nOutput: \n True\n",
  "457": "Problem: \nYou are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n\u00a0\nExample 1:\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\nExample 2:\nInput: coins = [2], amount = 3\nOutput: -1\n\nExample 3:\nInput: coins = [1], amount = 0\nOutput: 0\n\nExample 4:\nInput: coins = [1], amount = 1\nOutput: 1\n\nExample 5:\nInput: coins = [1], amount = 2\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= coins.length <= 12\n1 <= coins[i] <= 231 - 1\n0 <= amount <= 104\n\n Examples: \nInput: \n[[1, 2, 5], 11]\nOutput: \n 3\n",
  "458": "Problem: \nGiven an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.\n\u00a0\nExample 1:\nInput: nums = [3,1,4,2], p = 6\nOutput: 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n\nExample 2:\nInput: nums = [6,3,5,2], p = 9\nOutput: 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n\nExample 3:\nInput: nums = [1,2,3], p = 3\nOutput: 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n\nExample 4:\nInput: nums = [1,2,3], p = 7\nOutput: -1\nExplanation: There is no way to remove a subarray in order to get a sum divisible by 7.\n\nExample 5:\nInput: nums = [1000000000,1000000000,1000000000], p = 3\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n1 <= p <= 109\n\n Examples: \nInput: \n[[3, 1, 4, 2], 6]\nOutput: \n 1\n",
  "459": "Problem: \nGiven a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.\n\nNote:\nBoth the string's length and k will not exceed 104.\n\n\n\nExample 1:\n\nInput:\ns = \"ABAB\", k = 2\n\nOutput:\n4\n\nExplanation:\nReplace the two 'A's with two 'B's or vice versa.\n\n\n\n\nExample 2:\n\nInput:\ns = \"AABABBA\", k = 1\n\nOutput:\n4\n\nExplanation:\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\n\n Examples: \nInput: \n['\"ABAB\"', 2]\nOutput: \n 4\n",
  "460": "Problem: \nA zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\n\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]\u2026 By that analogy, we stop adding right before a duplicate element occurs in S.\n\nExample 1:\n\nInput: A = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\nOne of the longest S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n\n\nNote:\n\nN is an integer within the range [1, 20,000].\nThe elements of A are all distinct.\nEach element of A is an integer within the range [0, N-1].\n\n Examples: \nInput: \n[[5, 4, 0, 3, 1, 6, 2]]\nOutput: \n 4\n",
  "461": "Problem: \nA company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company has is the one with headID.\nEach employee has one\u00a0direct manager given in the manager array where manager[i] is the direct manager of the i-th employee,\u00a0manager[headID] = -1. Also it's guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the employees of the company of an urgent piece of news. He will inform his direct subordinates and they will inform their subordinates and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.\n\u00a0\nExample 1:\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.\n\nExample 2:\n\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\n\nExample 3:\n\nInput: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]\nOutput: 21\nExplanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.\nThe employee with id = 5 will inform the employee with id = 4 in 2 minutes.\nThe employee with id = 4 will inform the employee with id = 3 in 3 minutes.\nThe employee with id = 3 will inform the employee with id = 2 in 4 minutes.\nThe employee with id = 2 will inform the employee with id = 1 in 5 minutes.\nThe employee with id = 1 will inform the employee with id = 0 in 6 minutes.\nNeeded time = 1 + 2 + 3 + 4 + 5 + 6 = 21.\n\nExample 4:\nInput: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\nOutput: 3\nExplanation: The first minute the head will inform employees 1 and 2.\nThe second minute they will inform employees 3, 4, 5 and 6.\nThe third minute they will inform the rest of employees.\n\nExample 5:\nInput: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]\nOutput: 1076\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^5\n0 <= headID < n\nmanager.length == n\n0 <= manager[i] < n\nmanager[headID] == -1\ninformTime.length\u00a0== n\n0 <= informTime[i] <= 1000\ninformTime[i] == 0 if employee i has\u00a0no subordinates.\nIt is guaranteed that all the employees can be informed.\n\n Examples: \nInput: \n[1, 0, [-1], [0]]\nOutput: \n 0\n",
  "462": "Problem: \nYou are given a map of a server center, represented as a m * n integer matrix\u00a0grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n\nReturn the number of servers\u00a0that communicate with any other server.\n\u00a0\nExample 1:\n\nInput: grid = [[1,0],[0,1]]\nOutput: 0\nExplanation:\u00a0No servers can communicate with others.\nExample 2:\n\nInput: grid = [[1,0],[1,1]]\nOutput: 3\nExplanation:\u00a0All three servers can communicate with at least one other server.\n\nExample 3:\n\nInput: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\nOutput: 4\nExplanation:\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m <= 250\n1 <= n <= 250\ngrid[i][j] == 0 or 1\n\n Examples: \nInput: \n[[[1, 0], [0, 1], [], []]]\nOutput: \n 0\n",
  "464": "Problem: \nYou have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e. 0 <= i < n).\nIn one operation, you can select two indices x\u00a0and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y]\u00a0(i.e. perform arr[x] -=1\u00a0and arr[y] += 1).\u00a0The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array. Return the minimum number of operations needed to make\u00a0all the elements of arr equal.\n\u00a0\nExample 1:\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n\nExample 2:\nInput: n = 6\nOutput: 9\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^4\n\n Examples: \nInput: \n[3]\nOutput: \n 2\n",
  "465": "Problem: \nGiven a string s, partition s such that every substring of the partition is a palindrome.\n\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\nExample:\n\n\nInput:\u00a0\"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\n Examples: \nInput: \n['\"aab\"']\nOutput: \n 3\n",
  "466": "Problem: \nWe are given a\u00a0personal information string S, which may represent\u00a0either an email address or a phone number.\nWe would like to mask this\u00a0personal information according to the\u00a0following rules:\n\n1. Email address:\nWe define a\u00a0name to be a string of length \u2265 2 consisting\u00a0of only lowercase letters\u00a0a-z or uppercase\u00a0letters\u00a0A-Z.\nAn email address starts with a name, followed by the\u00a0symbol '@', followed by a name, followed by the\u00a0dot\u00a0'.'\u00a0and\u00a0followed by a name.\u00a0\nAll email addresses are\u00a0guaranteed to be valid and in the format of\u00a0\"name1@name2.name3\".\nTo mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks '*'.\n\n2. Phone number:\nA phone number is a string consisting of\u00a0only the digits 0-9 or the characters from the set {'+', '-', '(', ')', '\u00a0'}.\u00a0You may assume a phone\u00a0number contains\u00a010 to 13 digits.\nThe last 10 digits make up the local\u00a0number, while the digits before those make up the country code. Note that\u00a0the country code is optional. We want to expose only the last 4 digits\u00a0and mask all other\u00a0digits.\nThe local\u00a0number\u00a0should be formatted and masked as \"***-***-1111\",\u00a0where 1 represents the exposed digits.\nTo mask a phone number with country code like \"+111 111 111 1111\", we write it in the form \"+***-***-***-1111\".\u00a0 The '+'\u00a0sign and the first '-'\u00a0sign before the local number should only exist if there is a country code.\u00a0 For example, a 12 digit phone number mask\u00a0should start\u00a0with \"+**-\".\nNote that extraneous characters like \"(\", \")\", \" \", as well as\u00a0extra dashes or plus signs not part of the above formatting scheme should be removed.\n\u00a0\nReturn the correct \"mask\" of the information provided.\n\u00a0\nExample 1:\nInput: \"LeetCode@LeetCode.com\"\nOutput: \"l*****e@leetcode.com\"\nExplanation:\u00a0All names are converted to lowercase, and the letters between the\n\u00a0            first and last letter of the first name is replaced by 5 asterisks.\n\u00a0            Therefore, \"leetcode\" -> \"l*****e\".\n\nExample 2:\nInput: \"AB@qq.com\"\nOutput: \"a*****b@qq.com\"\nExplanation:\u00a0There must be 5 asterisks between the first and last letter \n\u00a0            of the first name \"ab\". Therefore, \"ab\" -> \"a*****b\".\n\nExample 3:\nInput: \"1(234)567-890\"\nOutput: \"***-***-7890\"\nExplanation:\u00a010 digits in the phone number, which means all digits make up the local number.\n\nExample 4:\nInput: \"86-(10)12345678\"\nOutput: \"+**-***-***-5678\"\nExplanation:\u00a012 digits, 2 digits for country code and 10 digits for local number. \n\nNotes:\n\nS.length\u00a0<=\u00a040.\nEmails have length at least 8.\nPhone numbers have length at least 10.\n\n Examples: \nInput: \n['\"LeetCode@LeetCode.com\"']\nOutput: \n \"*****e@leetcode.com\"\n",
  "469": "Problem: \nYou have\u00a0n binary tree nodes\u00a0numbered from 0\u00a0to n - 1 where node\u00a0i\u00a0has two children\u00a0leftChild[i]\u00a0and\u00a0rightChild[i], return\u00a0true\u00a0if and only if all the given nodes form exactly one valid binary tree.\nIf node\u00a0i\u00a0has no left child then\u00a0leftChild[i]\u00a0will equal\u00a0-1, similarly for the right child.\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\u00a0\nExample 1:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true\n\nExample 2:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false\n\nExample 3:\n\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false\n\nExample 4:\n\nInput: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= n <= 10^4\nleftChild.length == rightChild.length == n\n-1 <= leftChild[i], rightChild[i] <= n - 1\n\n Examples: \nInput: \n[4, [1, -1, 3, -1], [2, -1, -1, -1]]\nOutput: \n True\n",
  "471": "Problem: \nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n\n\nInput:\n11110\n11010\n11000\n00000\n\nOutput:\u00a01\n\n\nExample 2:\n\n\nInput:\n11000\n11000\n00100\n00011\n\nOutput: 3\n\n Examples: \nInput: \n[[['\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"0\"'], ['\"1\"', '\"1\"', '\"0\"', '\"1\"', '\"0\"'], ['\"1\"', '\"1\"', '\"0\"', '\"0\"', '\"0\"'], ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"0\"'], [], []]]\nOutput: \n 0\n",
  "472": "Problem: \nGiven an array of non-negative integers arr, you are initially positioned at start\u00a0index of the array. When you are at index i, you can jump\u00a0to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\nNotice that you can not jump outside of the array at any time.\n\u00a0\nExample 1:\nInput: arr = [4,2,3,0,3,1,2], start = 5\nOutput: true\nExplanation: \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -> index 4 -> index 1 -> index 3 \nindex 5 -> index 6 -> index 4 -> index 1 -> index 3 \n\nExample 2:\nInput: arr = [4,2,3,0,3,1,2], start = 0\nOutput: true \nExplanation: \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -> index 4 -> index 1 -> index 3\n\nExample 3:\nInput: arr = [3,0,2,1,2], start = 2\nOutput: false\nExplanation: There is no way to reach at index 1 with value 0.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 5 * 10^4\n0 <= arr[i] <\u00a0arr.length\n0 <= start < arr.length\n\n Examples: \nInput: \n[[4, 2, 3, 0, 3, 1, 2], 5]\nOutput: \n True\n",
  "473": "Problem: \nGiven an array of\u00a0integers arr.\nWe want to select three indices i, j and k where (0 <= i < j <= k < arr.length).\nLet's define a and b as follows:\n\na = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]\nb = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]\n\nNote that ^ denotes the bitwise-xor operation.\nReturn the number of triplets (i, j and k) Where a == b.\n\u00a0\nExample 1:\nInput: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n\nExample 2:\nInput: arr = [1,1,1,1,1]\nOutput: 10\n\nExample 3:\nInput: arr = [2,3]\nOutput: 0\n\nExample 4:\nInput: arr = [1,3,5,7,9]\nOutput: 3\n\nExample 5:\nInput: arr = [7,11,12,9,5,2,7,17,22]\nOutput: 8\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 300\n1 <= arr[i] <= 10^8\n\n Examples: \nInput: \n[[2, 3, 1, 6, 7]]\nOutput: \n 4\n",
  "474": "Problem: \nGiven a list of words, list of\u00a0 single\u00a0letters (might be repeating)\u00a0and score\u00a0of every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two\u00a0or more times).\nIt is not necessary to use all characters in letters and each letter can only be used once. Score of letters\u00a0'a', 'b', 'c', ... ,'z' is given by\u00a0score[0], score[1], ... , score[25] respectively.\n\u00a0\nExample 1:\nInput: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\nOutput: 23\nExplanation:\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21.\nExample 2:\nInput: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\nOutput: 27\nExplanation:\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25.\nExample 3:\nInput: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\nOutput: 0\nExplanation:\nLetter \"e\" can only be used once.\n\u00a0\nConstraints:\n\n1 <= words.length <= 14\n1 <= words[i].length <= 15\n1 <= letters.length <= 100\nletters[i].length == 1\nscore.length ==\u00a026\n0 <= score[i] <= 10\nwords[i], letters[i]\u00a0contains only lower case English letters.\n\n Examples: \nInput: \n[['\"dog\"', '\"cat\"', '\"dad\"', '\"good\"'], ['\"a\"', '\"a\"', '\"c\"', '\"d\"', '\"d\"', '\"d\"', '\"g\"', '\"o\"', '\"o\"'], [1, 0, 9, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\nOutput: \n 0\n",
  "476": "Problem: \nN cars are going to the same destination along a one lane road.\u00a0 The destination is target\u00a0miles away.\nEach car i\u00a0has a constant speed speed[i]\u00a0(in miles per hour), and initial position position[i]\u00a0miles towards the target along the road.\nA car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.\nThe distance between these two cars is ignored - they are assumed to have the same position.\nA car fleet is some non-empty set of cars driving\u00a0at the same position and same speed.\u00a0 Note that a single car is also a car fleet.\nIf a car catches up to a car fleet right at the destination point, it will\u00a0still be\u00a0considered as one car fleet.\n\nHow many car fleets will arrive at the destination?\n\u00a0\nExample 1:\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\nThe cars starting at 10 and 8 become a fleet, meeting each other at 12.\nThe car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 and 3 become a fleet, meeting each other at 6.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n\n\nNote:\n\n0 <= N <= 10 ^ 4\n0 < target\u00a0<= 10 ^ 6\n0 <\u00a0speed[i] <= 10 ^ 6\n0 <= position[i] < target\nAll initial positions are different.\n\n Examples: \nInput: \n[12, [10, 8, 0, 5, 3], [2, 4, 1, 1, 3]]\nOutput: \n 3\n",
  "477": "Problem: \nGiven two positive integers\u00a0n\u00a0and k,\u00a0the binary string\u00a0\u00a0Sn\u00a0is formed as follows:\n\nS1\u00a0= \"0\"\nSi\u00a0=\u00a0Si-1\u00a0+ \"1\" + reverse(invert(Si-1))\u00a0for\u00a0i > 1\n\nWhere\u00a0+\u00a0denotes the concatenation operation,\u00a0reverse(x)\u00a0returns the reversed string x,\u00a0and\u00a0invert(x)\u00a0inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first 4 strings in the above sequence are:\n\nS1\u00a0= \"0\"\nS2\u00a0= \"011\"\nS3\u00a0= \"0111001\"\nS4 = \"011100110110001\"\n\nReturn the kth bit in\u00a0Sn. It is guaranteed that\u00a0k\u00a0is valid for the given\u00a0n.\n\u00a0\nExample 1:\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3\u00a0is \"0111001\". The first bit is \"0\".\n\nExample 2:\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4\u00a0is \"011100110110001\". The 11th bit is \"1\".\n\nExample 3:\nInput: n = 1, k = 1\nOutput: \"0\"\n\nExample 4:\nInput: n = 2, k = 3\nOutput: \"1\"\n\n\u00a0\nConstraints:\n\n1 <= n <= 20\n1 <= k <= 2n - 1\n\n Examples: \nInput: \n[3, 1]\nOutput: \n 0\n",
  "478": "Problem: \nGiven a non-empty\u00a0array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\n\nInput: [2,2,3,2]\nOutput: 3\n\n\nExample 2:\n\n\nInput: [0,1,0,1,0,1,99]\nOutput: 99\n\n Examples: \nInput: \n[[2, 2, 3, 2]]\nOutput: \n 3\n",
  "479": "Problem: \nThere is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks. \n\n\nThe brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right. \n\n\nIf your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks. \n\nYou cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. \n\nExample:\n\nInput: \n[[1,2,2,1],\n [3,1,2],\n [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\nOutput: 2\nExplanation: \n\n\n\n\nNote:\n\nThe width sum of bricks in different rows are the same and won't exceed INT_MAX.\nThe number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.\n\n Examples: \nInput: \n[[[1, 2, 2, 1], [3, 1, 2], [1, 3, 2], [2, 4], [3, 1, 2], [1, 3, 1, 1], [], []]]\nOutput: \n 4\n",
  "480": "Problem: \nYou have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right\u00a0in the array or stay in the same place\u00a0 (The pointer should not be placed outside the array at any time).\nGiven two integers\u00a0steps and arrLen, return the number of\u00a0ways such that your pointer still at index 0 after exactly steps\u00a0steps.\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\u00a0\nExample 1:\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n\nExample 2:\nInput: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n\nExample 3:\nInput: steps = 4, arrLen = 2\nOutput: 8\n\n\u00a0\nConstraints:\n\n1 <= steps <= 500\n1 <= arrLen\u00a0<= 10^6\n\n Examples: \nInput: \n[3, 2]\nOutput: \n 4\n",
  "482": "Problem: \nGiven an array arr of positive integers, consider all binary trees such that:\n\nEach node has either 0 or 2 children;\nThe values of arr correspond to the values of each\u00a0leaf in an in-order traversal of the tree.\u00a0 (Recall that a node is a leaf if and only if it has 0 children.)\nThe value\u00a0of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.\n\nAmong all possible binary trees considered,\u00a0return the smallest possible sum of the values of each non-leaf node.\u00a0 It is guaranteed this sum fits into a 32-bit integer.\n\u00a0\nExample 1:\nInput: arr = [6,2,4]\nOutput: 32\nExplanation:\nThere are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.\n\n    24            24\n   /  \\          /  \\\n  12   4        6    8\n /  \\               / \\\n6    2             2   4\n\n\u00a0\nConstraints:\n\n2 <= arr.length <= 40\n1 <= arr[i] <= 15\nIt is guaranteed that the answer fits into a 32-bit signed integer (ie.\u00a0it is less than 2^31).\n\n Examples: \nInput: \n[[6, 2, 4]]\nOutput: \n 32\n",
  "485": "Problem: \nIn an array A containing only 0s and 1s, a K-bit flip\u00a0consists of choosing a (contiguous) subarray of length K and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of K-bit flips required so that there is no 0 in the array.\u00a0 If it is not possible, return -1.\n\u00a0\nExample 1:\nInput: A = [0,1,0], K = 1\nOutput: 2\nExplanation: Flip A[0], then flip A[2].\n\n\nExample 2:\nInput: A = [1,1,0], K = 2\nOutput: -1\nExplanation:\u00a0No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].\n\n\nExample 3:\nInput: A = [0,0,0,1,0,1,1,0], K = 3\nOutput: 3\nExplanation:\nFlip A[0],A[1],A[2]:\u00a0A becomes [1,1,1,1,0,1,1,0]\nFlip A[4],A[5],A[6]:\u00a0A becomes [1,1,1,1,1,0,0,0]\nFlip A[5],A[6],A[7]:\u00a0A becomes [1,1,1,1,1,1,1,1]\n\n\u00a0\n\n\nNote:\n\n1 <= A.length <=\u00a030000\n1 <= K <= A.length\n\n Examples: \nInput: \n[[0, 1, 0], 1]\nOutput: \n 2\n",
  "486": "Problem: \nGiven a binary string S (a string consisting only of '0' and '1's) and a positive integer N, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.\n\u00a0\nExample 1:\nInput: S = \"0110\", N = 3\nOutput: true\n\nExample 2:\nInput: S = \"0110\", N = 4\nOutput: false\n\n\u00a0\nNote:\n\n1 <= S.length <= 1000\n1 <= N <= 10^9\n\n Examples: \nInput: \n['\"0110\"', 3]\nOutput: \n True\n",
  "487": "Problem: \nA string is called happy if it does\u00a0not have any of the strings 'aaa', 'bbb'\u00a0or 'ccc'\u00a0as a substring.\nGiven three integers a, b and c, return any string s,\u00a0which satisfies following conditions:\n\ns is happy\u00a0and longest possible.\ns contains at most a\u00a0occurrences of the letter\u00a0'a', at most b\u00a0occurrences of the letter 'b' and at most c occurrences of the letter 'c'.\ns\u00a0will only contain 'a', 'b' and 'c'\u00a0letters.\n\nIf there is no such string s\u00a0return the empty string \"\".\n\u00a0\nExample 1:\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\n\nExample 2:\nInput: a = 2, b = 2, c = 1\nOutput: \"aabbc\"\n\nExample 3:\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It's the only correct answer in this case.\n\n\u00a0\nConstraints:\n\n0 <= a, b, c <= 100\na + b + c > 0\n\n Examples: \nInput: \n[1, 1, 7]\nOutput: \n ccaccbcc\n",
  "488": "Problem: \nGiven a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\n\n\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n\n\nExample:\n\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n\n\n\nNote: \nYou may assume k is always valid, 1 \u2264 k \u2264 n2.\n\n Examples: \nInput: \n[[[1, 5, 9], [10, 11, 13], [12, 13, 15], [], []], 8]\nOutput: \n 13\n",
  "489": "Problem: \nGiven an array A of integers, a ramp\u00a0is a tuple (i, j) for which i < j\u00a0and\u00a0A[i] <= A[j].\u00a0 The width of such a\u00a0ramp is j - i.\nFind the maximum width of a ramp in A.\u00a0 If one doesn't exist, return 0.\n\u00a0\nExample 1:\nInput: [6,0,8,2,1,5]\nOutput: 4\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.\n\n\nExample 2:\nInput: [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: \nThe maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.\n\n\n\n\n\u00a0\nNote:\n\n2 <= A.length <= 50000\n0 <= A[i] <= 50000\n\n Examples: \nInput: \n[[6, 0, 8, 2, 1, 5]]\nOutput: \n 4\n",
  "490": "Problem: \nThere are N rooms and you start in room 0.\u00a0 Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have\u00a0some keys to access the next room.\u00a0\nFormally, each room i\u00a0has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.\u00a0 A key rooms[i][j] = v\u00a0opens the room with number v.\nInitially, all the rooms start locked (except for room 0).\u00a0\nYou can walk back and forth between rooms freely.\nReturn true\u00a0if and only if you can enter\u00a0every room.\n\n\nExample 1:\nInput: [[1],[2],[3],[]]\nOutput: true\nExplanation:  \nWe start in room 0, and pick up key 1.\nWe then go to room 1, and pick up key 2.\nWe then go to room 2, and pick up key 3.\nWe then go to room 3.  Since we were able to go to every room, we return true.\n\nExample 2:\nInput: [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can't enter the room with number 2.\n\nNote:\n\n1 <= rooms.length <=\u00a01000\n0 <= rooms[i].length <= 1000\nThe number of keys in all rooms combined is at most\u00a03000.\n\n Examples: \nInput: \n[[[1], [2], [3], [], [], []]]\nOutput: \n False\n",
  "492": "Problem: \nGiven two integers A and B, return any string S such that:\n\nS has length A + B and contains exactly A 'a' letters, and exactly B 'b' letters;\nThe substring\u00a0'aaa'\u00a0does not occur in S;\nThe substring 'bbb' does not occur in S.\n\n\u00a0\nExample 1:\nInput: A = 1, B = 2\nOutput: \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.\n\n\nExample 2:\nInput: A = 4, B = 1\nOutput: \"aabaa\"\n\u00a0\n\nNote:\n\n0 <= A <= 100\n0 <= B <= 100\nIt is guaranteed such an S exists for the given A and B.\n\n Examples: \nInput: \n[1, 2]\nOutput: \n bba\n",
  "493": "Problem: \nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n \n\nFind out how many ways to assign symbols to make sum of integers equal to target S.  \n\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n\n\n\nNote:\n\nThe length of the given array is positive and will not exceed 20. \nThe sum of elements in the given array will not exceed 1000.\nYour output answer is guaranteed to be fitted in a 32-bit integer.\n\n Examples: \nInput: \n[[1, 1, 1, 1, 1], 3]\nOutput: \n 5\n",
  "494": "Problem: \nReturn the largest possible k\u00a0such that there exists\u00a0a_1, a_2, ..., a_k\u00a0such that:\n\nEach a_i is a non-empty string;\nTheir concatenation a_1 + a_2 + ... + a_k is equal to text;\nFor all 1 <= i <= k,\u00a0\u00a0a_i = a_{k+1 - i}.\n\n\u00a0\nExample 1:\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n\nExample 2:\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n\nExample 3:\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n\nExample 4:\nInput: text = \"aaa\"\nOutput: 3\nExplanation: We can split the string on \"(a)(a)(a)\".\n\n\u00a0\nConstraints:\n\ntext consists only of lowercase English characters.\n1 <= text.length <= 1000\n\n Examples: \nInput: \n['\"ghiabcdefhelloadamhelloabcdefghi\"']\nOutput: \n 9\n",
  "495": "Problem: \nWe have a collection of rocks, each rock has a positive integer weight.\nEach turn, we choose any two rocks\u00a0and smash them together.\u00a0 Suppose the stones have weights x and y with x <= y.\u00a0 The result of this smash is:\n\nIf x == y, both stones are totally destroyed;\nIf x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.\n\nAt the end, there is at most 1 stone left.\u00a0 Return the smallest possible weight of this stone (the weight is\u00a00 if there are no stones left.)\n\u00a0\nExample 1:\nInput: [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0 so the array converts to [1] then that's the optimal value.\n\n\u00a0\nNote:\n\n1 <= stones.length <= 30\n1 <= stones[i] <= 100\n\n Examples: \nInput: \n[[2, 7, 4, 1, 8, 1]]\nOutput: \n 1\n",
  "496": "Problem: \nGiven an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.\nReturn the least number of moves to make every value in A unique.\n\u00a0\nExample 1:\nInput: [1,2,2]\nOutput: 1\nExplanation:  After 1 move, the array could be [1, 2, 3].\n\n\nExample 2:\nInput: [3,2,1,2,1,7]\nOutput: 6\nExplanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n\n\u00a0\n\nNote:\n\n0 <= A.length <= 40000\n0 <= A[i] < 40000\n\n Examples: \nInput: \n[[1, 2, 2]]\nOutput: \n 1\n",
  "497": "Problem: \nWe have n jobs, where every job\u00a0is scheduled to be done from startTime[i] to endTime[i], obtaining a profit\u00a0of profit[i].\nYou're given the\u00a0startTime\u00a0,\u00a0endTime\u00a0and profit\u00a0arrays,\u00a0you need to output the maximum profit you can take such that there are no 2 jobs in the subset\u00a0with overlapping time range.\nIf you choose a job that ends at time X\u00a0you\u00a0will be able to start another job that starts at time X.\n\u00a0\nExample 1:\n\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\nExample 2:\n \n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\nExample 3:\n\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= startTime.length == endTime.length ==\u00a0profit.length\u00a0<= 5 * 10^4\n1 <=\u00a0startTime[i] <\u00a0endTime[i] <= 10^9\n1 <=\u00a0profit[i] <= 10^4\n\n Examples: \nInput: \n[[1, 2, 3, 3], [3, 4, 5, 6], [50, 10, 40, 70]]\nOutput: \n 120\n",
  "498": "Problem: \nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and\u00a0it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\nExample 1:\n\n\nInput: [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),\n\u00a0            because they are adjacent houses.\n\n\nExample 2:\n\n\nInput: [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\u00a0            Total amount you can rob = 1 + 3 = 4.\n\n Examples: \nInput: \n[[2, 3, 2]]\nOutput: \n 3\n",
  "499": "Problem: \nGiven an array of positive integers target and an array initial of same size with all zeros.\nReturn the minimum number of operations to form a target array from initial\u00a0if you are allowed to do the following operation:\n\nChoose any subarray from initial\u00a0and increment each value by one.\n\nThe answer is guaranteed to fit within the range of a 32-bit signed integer.\n\u00a0\nExample 1:\nInput: target = [1,2,3,2,1]\nOutput: 3\nExplanation: We need at least 3 operations to form the target array from the initial array.\n[0,0,0,0,0] increment 1 from index 0 to 4\u00a0(inclusive).\n[1,1,1,1,1] increment 1 from index 1 to 3\u00a0(inclusive).\n[1,2,2,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed.\n\nExample 2:\nInput: target = [3,1,1,2]\nOutput: 4\nExplanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).\n\nExample 3:\nInput: target = [3,1,5,4,2]\nOutput: 7\nExplanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] \n                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).\n\nExample 4:\nInput: target = [1,1,1,1]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= target.length <= 10^5\n1 <= target[i] <= 10^5\n\n Examples: \nInput: \n[[1, 2, 3, 2, 1]]\nOutput: \n 3\n",
  "500": "Problem: \nImplement a basic calculator to evaluate a simple expression string.\n\nThe expression string contains only non-negative integers, +, -, *, / operators and empty spaces  . The integer division should truncate toward zero.\n\nExample 1:\n\n\nInput: \"3+2*2\"\nOutput: 7\n\n\nExample 2:\n\n\nInput: \" 3/2 \"\nOutput: 1\n\nExample 3:\n\n\nInput: \" 3+5 / 2 \"\nOutput: 5\n\n\nNote:\n\n\n       You may assume that the given expression is always valid.\n       Do not use the eval built-in library function.\n\n Examples: \nInput: \n['\"3+2*2\"']\nOutput: \n 7\n",
  "501": "Problem: \nGiven a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\n\nExample 1:\n\n\nInput: \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\n\nExample 2:\n\n\nInput: \"abcd\"\nOutput: \"dcbabcd\"\n\n Examples: \nInput: \n['\"aacecaaa\"']\nOutput: \n \"aaacecaa\"aacecaaa\"\n",
  "502": "Problem: \nIn a network of nodes, each node i is directly connected to another node j if and only if\u00a0graph[i][j] = 1.\nSome nodes initial are initially infected by malware.\u00a0 Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.\u00a0 This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial)\u00a0is the final number of nodes infected with malware in the entire network, after the spread of malware stops.\nWe will\u00a0remove one node from the initial list.\u00a0 Return the node that if removed, would minimize\u00a0M(initial).\u00a0 If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial\u00a0list of infected nodes, it may still be infected later as a result of the malware spread.\n\u00a0\n\n\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n\nExample 2:\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0\n\nExample 3:\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1\n\n\u00a0\nNote:\n\n1 < graph.length = graph[0].length <= 300\n0 <= graph[i][j] == graph[j][i] <= 1\ngraph[i][i] == 1\n1 <= initial.length <= graph.length\n0 <= initial[i] < graph.length\n\n Examples: \nInput: \n[[[1, 1, 0], [1, 1, 0], [0, 0, 1], [], []], [0, 1]]\nOutput: \n 0\n",
  "503": "Problem: \nGiven a sentence\u00a0text (A\u00a0sentence\u00a0is a string of space-separated words) in the following format:\n\nFirst letter is in upper case.\nEach word in text are separated by a single space.\n\nYour task is to rearrange the words in text such that\u00a0all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\nReturn the new text\u00a0following the format shown above.\n\u00a0\nExample 1:\nInput: text = \"Leetcode is cool\"\nOutput: \"Is cool leetcode\"\nExplanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter.\n\nExample 2:\nInput: text = \"Keep calm and code on\"\nOutput: \"On and keep calm code\"\nExplanation: Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters.\n\nExample 3:\nInput: text = \"To be or not to be\"\nOutput: \"To be or to be not\"\n\n\u00a0\nConstraints:\n\ntext begins with a capital letter and then contains lowercase letters and single space between words.\n1 <= text.length <= 10^5\n\n Examples: \nInput: \n['\"Leetcode is cool\"']\nOutput: \n Is cool\" \"leetcode\n",
  "504": "Problem: \nYou are given a string s that consists of lower case English letters and brackets.\u00a0\nReverse the strings\u00a0in each\u00a0pair of matching parentheses, starting\u00a0from the innermost one.\nYour result should not contain any brackets.\n\u00a0\nExample 1:\nInput: s = \"(abcd)\"\nOutput: \"dcba\"\n\nExample 2:\nInput: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation:\u00a0The substring \"love\" is reversed first, then the whole string is reversed.\n\nExample 3:\nInput: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation:\u00a0First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n\nExample 4:\nInput: s = \"a(bcdefghijkl(mno)p)q\"\nOutput: \"apmnolkjihgfedcbq\"\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 2000\ns only contains lower case English characters and parentheses.\nIt's guaranteed that all parentheses are balanced.\n\n Examples: \nInput: \n['\"(abcd)\"']\nOutput: \n \"dcba\"\n",
  "505": "Problem: \nGiven a string s\u00a0of\u00a0'('\u00a0,\u00a0')'\u00a0and lowercase English characters.\u00a0\nYour task is to remove the minimum number of parentheses (\u00a0'('\u00a0or\u00a0')',\u00a0in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\n\nIt is the empty string, contains only lowercase characters, or\nIt can be written as\u00a0AB\u00a0(A\u00a0concatenated with\u00a0B), where\u00a0A\u00a0and\u00a0B\u00a0are valid strings, or\nIt can be written as\u00a0(A), where\u00a0A\u00a0is a valid string.\n\n\u00a0\nExample 1:\nInput: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.\n\nExample 2:\nInput: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"\n\nExample 3:\nInput: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.\n\nExample 4:\nInput: s = \"(a(b(c)d)\"\nOutput: \"a(b(c)d)\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 10^5\ns[i]\u00a0is one\u00a0of\u00a0\u00a0'(' , ')' and\u00a0lowercase English letters.\n\n Examples: \nInput: \n['\"lee(t(c)o)de)\"']\nOutput: \n \"lee(t(c)o)de\"\n",
  "506": "Problem: \nImplement atoi which\u00a0converts a string to an integer.\n\nThe function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.\n\nThe string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.\n\nIf the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.\n\nIf no valid conversion could be performed, a zero value is returned.\n\nNote:\n\n\n       Only the space character ' ' is considered as whitespace character.\n       Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\u2212231,\u00a0 231\u00a0\u2212 1]. If the numerical value is out of the range of representable values, INT_MAX (231\u00a0\u2212 1) or INT_MIN (\u2212231) is returned.\n\n\nExample 1:\n\n\nInput: \"42\"\nOutput: 42\n\n\nExample 2:\n\n\nInput: \"   -42\"\nOutput: -42\nExplanation: The first non-whitespace character is '-', which is the minus sign.\n\u00a0            Then take as many numerical digits as possible, which gets 42.\n\n\nExample 3:\n\n\nInput: \"4193 with words\"\nOutput: 4193\nExplanation: Conversion stops at digit '3' as the next character is not a numerical digit.\n\n\nExample 4:\n\n\nInput: \"words and 987\"\nOutput: 0\nExplanation: The first non-whitespace character is 'w', which is not a numerical \n\u00a0            digit or a +/- sign. Therefore no valid conversion could be performed.\n\nExample 5:\n\n\nInput: \"-91283472332\"\nOutput: -2147483648\nExplanation: The number \"-91283472332\" is out of the range of a 32-bit signed integer.\n\u00a0            Thefore INT_MIN (\u2212231) is returned.\n\n Examples: \nInput: \n['\"42\"']\nOutput: \n 0\n",
  "507": "Problem: \nGiven a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once. \n\n\nExample 1:\n\nInput: [1,1,2,3,3,4,4,8,8]\nOutput: 2\n\n\n\nExample 2:\n\nInput: [3,3,7,7,10,11,11]\nOutput: 10\n\n\n\nNote:\nYour solution should run in O(log n) time and O(1) space.\n\n Examples: \nInput: \n[[1, 1, 2, 3, 3, 4, 4, 8, 8]]\nOutput: \n 2\n",
  "508": "Problem: \nThere is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, Q \\leq 2 \\times 10^5\n - 0 \\leq S_i < T_i \\leq 10^9\n - 1 \\leq X_i \\leq 10^9\n - 0 \\leq D_1 < D_2 < ... < D_Q \\leq 10^9\n - If i \\neq j and X_i = X_j, the intervals [S_i, T_i) and [S_j, T_j) do not overlap.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\nS_1 T_1 X_1\n:\nS_N T_N X_N\nD_1\n:\nD_Q\n\n-----Output-----\nPrint Q lines. The i-th line should contain the distance the i-th person will walk or -1 if that person walks forever.\n\n-----Sample Input-----\n4 6\n1 3 2\n7 13 10\n18 20 13\n3 4 2\n0\n1\n2\n3\n5\n8\n\n-----Sample Output-----\n2\n2\n10\n-1\n13\n-1\n\nThe first person starts coordinate 0 at time 0 and stops walking at coordinate 2 when reaching a point blocked by the first roadwork at time 2.\nThe second person starts coordinate 0 at time 1 and reaches coordinate 2 at time 3. The first roadwork has ended, but the fourth roadwork has begun, so this person also stops walking at coordinate 2.\nThe fourth and sixth persons encounter no roadworks while walking, so they walk forever. The output for these cases is -1.\n\n Examples: \nInput: \n4 6\n1 3 2\n7 13 10\n18 20 13\n3 4 2\n0\n1\n2\n3\n5\n8\n\nOutput: \n 2\n2\n10\n-1\n13\n-1\n\n",
  "510": "Problem: \nYou are given a string S of length N consisting of lowercase English letters.\nProcess Q queries of the following two types:\n - Type 1: change the i_q-th character of S to c_q. (Do nothing if the i_q-th character is already c_q.)\n - Type 2: answer the number of different characters occurring in the substring of S between the l_q-th and r_q-th characters (inclusive).\n\n-----Constraints-----\n - N, Q, i_q, l_q, and r_q are integers.\n - S is a string consisting of lowercase English letters.\n - c_q is a lowercase English letter.\n - 1 \\leq N \\leq 500000\n - 1 \\leq Q \\leq 20000\n - |S| = N\n - 1 \\leq i_q \\leq N\n - 1 \\leq l_q \\leq r_q \\leq N\n - There is at least one query of type 2 in each testcase.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\nQ\nQuery_1\n\\vdots\nQuery_Q\n\nHere, Query_i in the 4-th through (Q+3)-th lines is one of the following:\n1 i_q c_q\n\n2 l_q r_q\n\n-----Output-----\nFor each query of type 2, print a line containing the answer.\n\n-----Sample Input-----\n7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7\n\n-----Sample Output-----\n3\n1\n5\n\nIn the first query, cdbb contains three kinds of letters: b , c , and d, so we print 3.\nIn the second query, S is modified to abcdzbd.\nIn the third query, a contains one kind of letter: a, so we print 1.\nIn the fourth query, S is modified to abcazbd.\nIn the fifth query, S does not change and is still abcazbd.\nIn the sixth query, abcazbd contains five kinds of letters: a, b, c, d, and z, so we print 5.\n\n Examples: \nInput: \n7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7\n\nOutput: \n 3\n1\n5\n\n",
  "511": "Problem: \nThere are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\nRecently, they learned the operation called xor (exclusive OR).What is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n -  When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. \nFor example, 3~\\textrm{xor}~5 = 6.\n\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i.\nUsing this information, restore the integer written on the scarf of each Snuke Cat.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 200000\n - N is even.\n - 0 \\leq a_i \\leq 10^9\n - There exists a combination of integers on the scarfs that is consistent with the given information.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 \\ldots a_N\n\n-----Output-----\nPrint a line containing N integers separated with space.\nThe i-th of the integers from the left should represent the integer written on the scarf of Snuke Cat i.\nIf there are multiple possible solutions, you may print any of them.\n\n-----Sample Input-----\n4\n20 11 9 24\n\n-----Sample Output-----\n26 5 7 22\n\n - 5~\\textrm{xor}~7~\\textrm{xor}~22 = 20\n - 26~\\textrm{xor}~7~\\textrm{xor}~22 = 11\n - 26~\\textrm{xor}~5~\\textrm{xor}~22 = 9\n - 26~\\textrm{xor}~5~\\textrm{xor}~7 = 24\nThus, this output is consistent with the given information.\n\n Examples: \nInput: \n4\n20 11 9 24\n\nOutput: \n 26 5 7 22\n\n",
  "513": "Problem: \nWe have a tree with N vertices, whose i-th edge connects Vertex u_i and Vertex v_i.\nVertex i has an integer a_i written on it.\nFor every integer k from 1 through N, solve the following problem:\n - We will make a sequence by lining up the integers written on the vertices along the shortest path from Vertex 1 to Vertex k, in the order they appear. Find the length of the longest increasing subsequence of this sequence.\nHere, the longest increasing subsequence of a sequence A of length L is the subsequence A_{i_1} , A_{i_2} , ... , A_{i_M} with the greatest possible value of M such that 1 \\leq i_1 < i_2 < ... < i_M \\leq L and A_{i_1} < A_{i_2} < ... < A_{i_M}.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq a_i \\leq 10^9\n - 1 \\leq u_i , v_i \\leq N\n - u_i \\neq v_i\n - The given graph is a tree.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\nu_1 v_1\nu_2 v_2\n:\nu_{N-1} v_{N-1}\n\n-----Output-----\nPrint N lines. The k-th line, print the length of the longest increasing subsequence of the sequence obtained from the shortest path from Vertex 1 to Vertex k.\n\n-----Sample Input-----\n10\n1 2 5 3 4 6 7 3 2 4\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n1 8\n8 9\n9 10\n\n-----Sample Output-----\n1\n2\n3\n3\n4\n4\n5\n2\n2\n3\n\nFor example, the sequence A obtained from the shortest path from Vertex 1 to Vertex 5 is 1,2,5,3,4. Its longest increasing subsequence is A_1, A_2, A_4, A_5, with the length of 4.\n\n Examples: \nInput: \n10\n1 2 5 3 4 6 7 3 2 4\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n1 8\n8 9\n9 10\n\nOutput: \n 1\n2\n3\n3\n4\n4\n5\n2\n2\n3\n\n",
  "514": "Problem: \nWrite a program to take two numbers as input and print their difference if the first number is greater than the second number otherwise$otherwise$ print their sum.\n\n-----Input:-----\n- First line will contain the first number (N1$N1$)\n- Second line will contain the second number (N2$N2$)\n\n-----Output:-----\nOutput a single line containing the difference of 2 numbers (N1\u2212N2)$(N1 - N2)$ if the first number is greater than the second number otherwise output their sum (N1+N2)$(N1 + N2)$.\n\n-----Constraints-----\n- \u22121000\u2264N1\u22641000$-1000 \\leq N1 \\leq 1000$\n- \u22121000\u2264N2\u22641000$-1000 \\leq N2 \\leq 1000$\n\n-----Sample Input:-----\n82\n28\n\n-----Sample Output:-----\n54\n\n Examples: \nInput: \n['82', '28']\nOutput: \n ['54']\n",
  "516": "Problem: \nAlmir had a small sequence $A_1, A_2, \\ldots, A_N$. He decided to make $K$ copies of this sequence and concatenate them, forming a sequence $X_1, X_2, \\ldots, X_{NK}$; for each valid $i$ and $j$ ($0 \\le j < K$), $X_{j \\cdot N + i} = A_i$.\nFor example, if $A = (1, 2, 3)$ and $K = 4$, the final sequence is $X = (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)$.\nA pair $(i, j)$, where $1 \\le i < j \\le N$, is an inversion if $X_i > X_j$. Find the number of inversions in the final sequence $X$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of inversions in the sequence $X$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 100$\n- $1 \\le K \\le 10^6$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n3 3\n2 1 3\n4 100\n99 2 1000 24\n\n-----Example Output-----\n12\n30000\n\n Examples: \nInput: \n['2', '3 3', '2 1 3', '4 100', '99 2 1000 24', '']\nOutput: \n ['12', '30000']\n",
  "518": "Problem: \nFinally, the pandemic is over in ChefLand, and the chef is visiting the school again. Chef likes to climb the stairs of his school's floor by skipping one step, sometimes chef climbs the stairs one by one. Simply, the chef can take one or 2 steps in one upward movement. There are N stairs between ground and next floor. The chef is on the ground floor and he wants to go to the next floor with Cheffina but, Cheffina asks chef in how many ways, the chef can reach the next floor normally or any combination of skipping one step, where order doesn't matter. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer as the number of ways.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n1\n3\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\nways: [1,1,1], here chef climb to the next floor, one by one stair.\n[1,2], here chef climb to the next floor, one step first and after that 2 stairs at once.\nNote, [2,1] consider the same as that of [1,2] hence ignored.\n\n Examples: \nInput: \n['1', '3']\nOutput: \n ['2']\n",
  "520": "Problem: \nWrite a program that takes in a letterclass ID of a ship and display the equivalent string class description of the given ID. Use the table below.\n\nClass ID Ship ClassB or bBattleShipC or cCruiserD or dDestroyerF or fFrigate\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains a character. \n\n-----Output-----\nFor each test case, display the Ship Class depending on ID, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n\n-----Example-----\nInput\n\n3 \nB\nc\nD\n\nOutput\nBattleShip\nCruiser\nDestroyer\n\n Examples: \nInput: \n['3', 'B', 'c', 'D']\nOutput: \n ['BattleShip', 'Cruiser', 'Destroyer']\n",
  "521": "Problem: \nNature photographing may be fun for tourists, but it is one of the most complicated things for photographers. To capture all the facets of a bird, you might need more than one cameras. You recently encountered such a situation.\nThere are $n$ photographers, so there are $n$ cameras in a line on the x-axis. All the cameras are at distinct coordinates. \nYou want to pair up these cameras ($n$ is even) in such a way that the sum of angles subtended on the bird by the pair of cameras is maximized. Formally, let A, B be two cameras, and let P be the bird to be captured by these two cameras. The angle will APB. \nNote: All angles are in radians.\n\n-----Input-----\n- The first line of the input contains an integer $T$ denoting the number of test cases. The description of the test cases follows.\n- The first line of each test case contains an integer $n$.\n- The second line of each test case contains $n$ space-separated integers denoting the $x_i$ coordinates of the cameras.\n- The third line of each test case contains two space-separated integers $P, Q$ denoting the x and y coordinates of the bird respectively.\n\n-----Output-----\nFor each test case, output your answer in a single line. Your answer would be considered correct if its absolute error is less than or equal to 1e-6 of the actual answer. \n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le n \\leq  100$\n- $1 \\le x_i \\leq 300$\n- $0 \\le P \\leq 300$\n- $1 \\le Q \\leq 300$\n\n-----Example Input-----\n2\n2\n0 1\n0 1\n2\n0 1\n100 1\n\n-----Example Output-----\n0.785398163397\n0.000100999899\n\n-----Explanation-----\nNote: $1 \\leq x_i$ is not being satisfied by the sample input, but will be satisfied in the actual test data.\nTestcase 1: There are only 2 cameras, so they have to paired up with each other. And the angle subtended by then is 45 degrees. Converting this to radians gives the output.\n\n Examples: \nInput: \n['2', '2', '0 1', '0 1', '2', '0 1', '100 1', '']\nOutput: \n ['0.785398163397', '0.000100999899']\n",
  "522": "Problem: \nThree Best Friends $AMAN$ , $AKBAR$ , $ANTHONY$ are planning to go to \u201cGOA\u201d  , but just like every other goa trip plan there is a problem to their plan too.\nTheir parents will only give permission if they can solve this problem for them\nThey are a given a number N and they have to calculate the total number of triplets (x ,y ,z)\nSatisfying the given condition  y * x +z=n.\nFor ex if N=3\nThen there exist 3 triplets( x ,y ,z):   (1,1,2) , (1,2,1) , (2,1,1) which satisfy the condition\nHelp the group to get permission for the trip\n\n-----Input:-----\n- First line will contain the number  $N$.\n\n-----Output:-----\nthe possible number of triplets satisfying the given condition\n\n-----Constraints-----\n- $2 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nthere exist 3 triplets ( x ,y ,z):   (1,1,2) , (1,2,1) , (2,1,1)  which satisfy the condition\n\n Examples: \nInput: \n['3']\nOutput: \n ['3']\n",
  "524": "Problem: \nThere are total $N$ cars in a sequence with $ith$ car being assigned with an alphabet equivalent to the $ith$ alphabet of string $S$ . Chef has been assigned a task to calculate the total number of cars with alphabet having a unique even value in the given range X to Y (both inclusive)\n. The value of an alphabet is simply its position in alphabetical order e.g.: a=1, b=2, c=3\u2026\nThe chef will be given $Q$\nsuch tasks having varying values of $X$ and $Y$\nNote: string $S$ contains only lowercase alphabets\n\n-----Input-----\nFirst line of input contains a string $S$ of length $N$.\nSecond line contains an integer denoting no. of queries $Q$.\nNext q lines contain two integers denoting values of $X$ and $Y$.\n\n-----Output-----\nFor each query print a single integer denoting total number of cars with alphabet having a unique even value in the given range $X$ to $Y$.\n\n-----Constraints-----\n- $1 \\leq n \\leq 10^5$\n- $1 \\leq q \\leq 10^5$\n\n-----Example Input-----\nbbccdd\n5\n1 2\n3 4\n5 6\n1 6\n2 5\n\n-----Example Output-----\n1\n0\n1\n2\n2\n\n-----Explanation:-----\nExample case 1: \nQuery 1: range 1 to 2 contains the substring $\"bb\"$ where each character has a value of 2. Since we will only be considering unique even values, the output will be 1\n\n Examples: \nInput: \n['bbccdd', '5', '1 2', '3 4', '5 6', '1 6', '2 5']\nOutput: \n ['1', '0', '1', '2', '2']\n",
  "525": "Problem: \nYou are given three numbers $a$, $b$, $c$ . Write a program to determine the largest number that is less than or equal to $c$ and leaves a remainder $b$ when divided by $a$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow.\n- Each testcase contains a single line of input, having three integers $a$, $b$, $c$.\n\n-----Output:-----\n- For each testcase, output in a single line the largest number less than or equal to $c$.\n\n-----Constraints:-----\n- $1 \\leq T  \\leq 100000$\n- $0 \\leq b < a < c \\leq$ $10$^18\n\n-----Sample Input:-----\n1\n7 2 10\n\n-----Sample Output:-----\n9\n\n Examples: \nInput: \n['1', '7 2 10']\nOutput: \n ['9']\n",
  "526": "Problem: \nAureole the Techno-cultural fest of JEC thought of conducting a workshop on big data, as the topic is hot everyone wants to take part but due to limited seats in the Jashan Auditorium there is a selection criteria, a problem is given.\nthe problem states a string is to be compressed when two or more consecutive characters are same they are to be compressed into one character and the original number count is to be written after it ex. aaabb -> a3b2\nwhere every character is of 8bits and every integer is of 32bits\nyou are asked to find the difference in size between original string and compressed string\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input $S$ the string to be compressed. \n\n-----Output:-----\nFor each testcase, output in a single line The difference in size.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq |S| \\leq 10^5$\n\n-----Subtasks-----\n- 40 points : S will contain only a-z\n- 60 points : S will contain 0-9 characters also\n\n-----Sample Input:-----\n1\naaabb\n\n-----Sample Output:-----\n-40\n\n-----EXPLANATION:-----\nthe resulting string will be a3b2 its size will be 80, original string size will be 40 so ans= 40-80\n\n Examples: \nInput: \n['1', 'aaabb']\nOutput: \n ['-40']\n",
  "528": "Problem: \nRecently in JEC ants have become huge, the Principal is on a journey to snipe them !!\nPrincipal has limited $N$ practice Bullets to practice so that he can be sure to kill ants.\n- The Practice ground has max length $L$.\n- There is a Limit X such that if the bullet is fired beyond this, it will destroy and it wont be of any further use.\n- Bullet can be reused if fired in a range strictly less than X.\nHe wants to find minimum number of shots taken to find  the distance X by using $N$ bullets.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $N, L$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the minimum number of shots to find the distance X.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq N,L \\leq 100$\n*N is always less than  equal to square root of L\n\n-----Subtasks-----\n- 10 points : $ N = 1$\n- 40 points : $ N = 2$\n- 50 points : Original Constraints.\n\n-----Sample Input:-----\n2\n1 10\n2 10\n\n-----Sample Output:-----\n10\n4\n\n-----EXPLANATION:-----\n- \nThere is only single bullet which is to be fired from distance 1 to 10 to get the distance X so in the worst case it can take up to 10 shots to find the distance X.\n- \nthere are 2 bullets and distance 10 meters suppose if distance X is 10 we can get to that by firing first bullet at 4 then 7 then 9 then  at 10 it will break  it took only 4 turns, and if the distance X was 3, we can get that by firing first bullet at 4 it will get destroyed than we use 2nd bullet at 1 , 2, 3  and 2nd bullet will also break it also took 4 turns. You can check for any position minimum number of turns will be at most 4.\n\n Examples: \nInput: \n['2', '1 10', '2 10']\nOutput: \n ['10', '4']\n",
  "529": "Problem: \nGiven an integer N. Integers A and B are chosen randomly in the range [1..N]. Calculate the probability that the Greatest Common Divisor(GCD) of A and B equals to B.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single integer N on a separate line.\n\n-----Output-----\nFor each test case, output a single line containing probability as an irreducible fraction. \n\n-----Example-----\nInput:\n3\n1\n2\n3\n\nOutput:\n1/1\n3/4\n5/9\n\n-----Constraints-----\n\n1<=T<=103\n\n1<=N<=109\n\n Examples: \nInput: \n['3', '1', '2', '3']\nOutput: \n ['1/1', '3/4', '5/9']\n",
  "532": "Problem: \nTo help Lavanya learn all about binary numbers and binary sequences, her father has bought her a collection of square tiles, each of which has either a 0 or a 1 written on it. Her brother Nikhil has played a rather nasty prank. He has glued together pairs of tiles with 0 written on them. Lavanya now has square tiles with 1 on them and rectangular tiles with two 0's on them, made up of two square tiles with 0 stuck together). Thus, she can no longer make all possible binary sequences using these tiles.\nTo amuse herself, Lavanya has decided to pick a number $N$ and try and construct as many binary sequences of length $N$ as possible using her collection of tiles. For example if $N$ = 1, she can only make the sequence 1. For $N$=2, she can make 11 and 00. For $N$=4, there are 5 possibilities: 0011, 0000, 1001, 1100 and 1111.\nLavanya would like you to write a program to compute the number of arrangements possible with $N$ tiles so that she can verify that she has generated all of them. Since she cannot count beyond 15746, it is sufficient to report this number modulo 15746.\n\n-----Input:-----\nA single line with a single integer $N$.\n\n-----Output:-----\nA single integer indicating the number of binary sequences of length $N$, modulo 15746, that Lavanya can make using her tiles.\n\n-----Constraints:-----\nYou may assume that $N \\leq$ 1000000.\n\n-----Sample Input:-----\n4\n\n-----Sample Output:-----\n5\n\n-----Explanation:-----\nThis corresponds to the example discussed above.\n\n Examples: \nInput: \n['4']\nOutput: \n ['5']\n",
  "533": "Problem: \nThe chef is playing a game of long distance. Chef has a number K and he wants to find the longest distance between the index of the first and the last occurrence of K in a given array of N numbers.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input.\n- Next line with Two integers in one line $K, N$.\n- Next line with $N$ space-separated integers.\n\n-----Output:-----\nFor each test case, output in a single line answer as the index of first and last occurrence of K in the given array.\nNote: Here Indexing is from 1 not  0 based.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq k \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n2\n2 6\n2 3 4 2 1 6\n4 6\n2 3 4 2 1 6\n\n-----Sample Output:-----\n3\n0\n\n-----EXPLANATION:-----\nFor 1) Index of First and last occurrence of 2 in the given array is at 1 and 4, i.e. distance is 3. \nFor 2) 4 occurs only once in the given array hence print 0.\n\n Examples: \nInput: \n['2', '2 6', '2 3 4 2 1 6', '4 6', '2 3 4 2 1 6']\nOutput: \n ['3', '0']\n",
  "534": "Problem: \nVasya's older brother, Petya, attends an algorithm course in his school. Today he learned about matchings in graphs. Formally, a set of edges in a graph is called a matching if no pair of distinct edges in the set shares a common endpoint.\nPetya instantly came up with an inverse concept, an antimatching. In an antimatching, any pair of distinct edges should have a common endpoint.\nPetya knows that finding a largest matching in a graph is a somewhat formidable task. He wonders if finding the largest antimatching is any easier. Help him find the number of edges in a largest antimatching in a given graph.\n\n-----Input:-----\nThe first line contains T$T$, number of test cases per file.\nThe first line of each test case contains two integers n$n$ and m\u2212$m-$ the number of vertices and edges of the graph respectively (1\u2264n\u2264104$1 \\leq n \\leq 10^4$, 0\u2264m\u2264104$0 \\leq m \\leq 10^4$).\nThe next m$m$ lines describe the edges. The i$i$-th of these lines contains two integers ui$u_i$ and vi\u2212$v_i-$ the indices of endpoints of the i$i$-th edge (1\u2264ui,vi\u2264n$1 \\leq u_i, v_i \\leq n$, ui\u2260vi$u_i \\neq v_i$).\nIt is guaranteed that the graph does not contain self-loops nor multiple edges. It is not guaranteed that the graph is connected.\n\n-----Output:-----\nPrint a single number per test case \u2212$-$ the maximum size of an antichain in the graph.\n\n-----Constraints-----\n- 1\u2264T\u226410$1 \\leq T \\leq 10$\n- 1\u2264n\u2264104$1 \\leq n \\leq 10^4$\n- 0\u2264m\u2264104$0 \\leq m \\leq 10^4$\n- 1\u2264ui,vi\u2264n$1 \\leq u_i, v_i \\leq n$\n- ui\u2260vi$u_i \\neq v_i$\n\n-----Sample Input:-----\n3\n3 3\n1 2\n1 3\n2 3\n4 2\n1 2\n3 4\n5 0\n\n-----Sample Output:-----\n3\n1\n0\n\n-----EXPLANATION:-----\nIn the first sample all three edges form an antimatching.\nIn the second sample at most one of the two edges can be included in an antimatching since they do not share common endpoints.\nIn the third sample there are no edges, hence the answer is 0$0$.\n\n Examples: \nInput: \n['3', '3 3', '1 2', '1 3', '2 3', '4 2', '1 2', '3 4', '5 0']\nOutput: \n ['3', '1', '0']\n",
  "536": "Problem: \n2021 was approaching and the world was about to end. So 2 gods Saurabhx and Saurabhy (from Celesta) created the Cyberverse. But this time disappointed with humans both the gods decided not to have humans in this world. So they created a world of cyborgs. A world without humans. Isn\u2019t it interesting? So let us dive into the cyberverse and have a look at their problems.\nThere are $N$ kid cyborgs with Chief Cyborg '100gods' and he has $K$ weapons with him. He wants to distribute those $K$ weapons among $N$ kid cyborgs. Since all the kid cyborgs are very good friends, so they set a rule among themselves for taking those weapons. The rule states that the difference between kid cyborg having the maximum weapons and the kid cyborg having minimum weapons should be less than or equal to $1$.\n\nFind the value of the minimum number of weapons a kid cyborg can have when all the $K$ weapons are distributed among them.\n\n-----Input:-----\n- The first line contains an integer $T$, denoting the number of test cases.\n- Each of the next $T$ lines will contain two space-separated integers denoting $N$ and $K$ respectively.\n\n-----Output:-----\n- For each test case ,output a single line containing an integer $X$ denoting the minimum number of weapons a kid cyborg can have in that test case.  \n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq 10^9$\n\n-----Sample Input:-----\n1\n5 8\n\n-----Expected Output:-----\n1\n\n-----Explanation-----\n- There are $5$ kids and $8$ weapons.  \n- Hence we will distribute the weapons such that $3$ kids have $2$ weapons each and the remaining $2$ kids have $1$ weapon each.  \n- Hence the minimum number of weapons a kid cyborg has is $1$. (  That is, $min(1,2)$ = $1$ )\n\n Examples: \nInput: \n['1', '5 8']\nOutput: \n ['1']\n",
  "537": "Problem: \nZonal Computing Olympiad 2015, 29 Nov 2014\n\nWe say that two integers x and y have a variation of at least K, if |x \u2212 y| \u2265 K (the absolute value of their difference is at least K). Given a sequence of N integers a1,a2,...,aN and K, the total variation count is the number of pairs of elements in the sequence with variation at least K, i.e. it is the size of the set of pairs\n\n{(i,j)|1\u2264i<j\u2264N and|ai\u2212aj|\u2265K} \n\nFor example if K = 1 and the sequence is 3,2,4 the answer is 3. If K = 1 and the sequence is 3, 1, 3 then the answer is 2.\n\nYour task is to write a program that takes a sequence and the value K as input and computes the total variation count.\n\n-----Input format-----\nThe first line contains two positive integers N and K, separated by a space.\n\nThis is followed by a line containing N integers separated by space giving the values\nof the sequence.\n\n-----Output format-----\nA single integer in a single line giving the total variation count.\n\n-----Test data-----\nYou may assume that all integers in the input are in the range 0 to 10^8 inclusive.\n\nSubtask 1 (40 marks) : 1 \u2264 N \u2264 4000, 1 \u2264 K \u2264 10^8 \nSubtask 2 (60 marks) : 1 \u2264 N \u2264 65000, 1 \u2264 K \u2264 10^8 \n\n-----Sample Input-----\n3 1 \n3 1 3\n\n-----Sample Output-----\n2\n\n Examples: \nInput: \n['3 1', '3 1 3']\nOutput: \n ['2']\n",
  "538": "Problem: \nSebi goes to school daily with his father. They cross a big highway in the car to reach to the school. Sebi sits in front seat beside his father at driving seat. To kill boredom, they play a game of guessing speed of other cars on the highway. Sebi makes a guess of other car's speed being SG kph, his father FG kph. \n\nThe highway is usually empty, so the drivers use cruise control, i.e. vehicles run at a constant speed. There are markers on the highway at a gap of 50 meters. Both father-son duo wants to check the accuracy of their guesses. For that, they start a timer at the instant at which their car and the other car (which speed they are guessing) are parallel to each other (they need not to be against some marker, they can be in between the markers too). After some T seconds, they observe that both the cars are next to some markers and the number of markers in between the markers of their car and the other car is D - 1 (excluding the markers next to both the cars). Also, they can observe these markers easily because the other car is faster than their. Speed of Sebi's father's car is S. Using this information, one can find the speed of the other car accurately.\n\nAn example situation when Sebi's father starts the timer. Notice that both the car's are parallel to each other.\n\nExample situation after T seconds. The cars are next to the markers. Here the value of D is 1. The green car is Sebi's and the other car is of blue color.\n\nSebi's a child, he does not know how to find the check whose guess is close to the real speed of the car. He does not trust his father as he thinks that he might cheat. Can you help to resolve this issue between them by telling whose guess is closer. If Sebi's guess is better, output \"SEBI\". If his father's guess is better, output \"FATHER\". If both the guess are equally close, then output \"DRAW\".\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. \nEach of the next T lines contain five space separated integers S, SG, FG, D, T corresponding to the Sebi's car speed, Sebi's guess, his father's guess, D as defined in the statement and the time at which both the cars at against the markers (in seconds), respectively.\n\n-----Output-----\nOutput description.\nFor each test case, output a single line containing \"SEBI\", \"FATHER\" or \"DRAW\" (without quotes) denoting whose guess is better.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10000\n- 0 \u2264 S \u2264 130\n- 0 \u2264 SG, FG \u2264 300\n- 1 \u2264 D \u2264 30\n- 1 \u2264 T \u2264 300\n-  The other car speed doesn't exceed 300 kph.\n\n-----Example-----\nInput:\n2\n100 180 200 20 60\n130 131 132 1 72\n\nOutput:\nSEBI\nFATHER\n\n-----Explanation-----\nExample case 1.\nThere are total 20 - 1 = 19 markers in between the Sebi's car and the other car. So, the distance between those cars at time T is 20 * 50 = 1000 meters = 1 km.\nAs T = 60 seconds, i.e. 1 minutes. So, the other car goes 1 km more than Sebi's car in 1 minute. So, the other car will go 60 km more than Sebi's car in 1 hour. So, its speed is 60 kmph more than Sebi's car, i.e. 160 kmph.\nSebi had made a guess of 180 kmph, while his father of 200 kmph. Other car's real speed is 160 kmph. So, Sebi's guess is better than his father. Hence he wins the game.\nExample case 2.\n\nThe situation of this example is depicted in the image provided in the statement. You can find the speed of other car and see that Father's guess is more accurate.\n\n Examples: \nInput: \n['2', '100 180 200 20 60', '130 131 132 1 72', '', '']\nOutput: \n ['SEBI', 'FATHER']\n",
  "539": "Problem: \nBob has got some injury in his leg and due to this he can take exactly M steps in one move. \nBob enters a square field of size NxN. The field is only having one gate(for both entrance and exit) at its one of the corners. Bob started walking along the perimeter of square field.(remember Bob can only take exactly M steps in one move and cannot reverse his direction of motion).\nBob wants to know how many minimum number of moves he needs to come out(i.e. he reaches the same gate from where he entered into the field) from the square field. Tell the answer to Bob ASAP.\nLuckily, you came to know M=N+1.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases.\n-  Each test case contains a single integer N denoting the sides of the square.\n\n-----Output-----\n- For each test case, output a single line containing minimum number of moves Bob required to come out from the field.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10000\n- 1 \u2264 N \u2264 1000000000\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n2\n8\n\n-----Explanation-----\nExample case 1.Let four corners of square be (0,0), (0,1), (1,1), (1,0). Let gate be at (0,0). Bob takes 2 steps in one move. Let movement of Bob be as follows (0,0) -> (1,1) -> (0,0). Thus minimum moves needed were 2. \nExample case 2.Let four corners of square be (0,0), (0,2), (2,2), (2,0). Let gate be at (0,0). Bob takes 3 steps in one move. Let movement of Bob be as follows (0,0) -> (2,1) -> (0,2) -> (1,0) -> (2,2) -> (0,1) -> (2,0) -> (1,2) -> (0,0). Thus minimum number of moves needed are 8.\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['2', '8']\n",
  "540": "Problem: \nChef has a sequence of positive integers $A_1, A_2, \\ldots, A_N$. He wants to choose some elements of this sequence (possibly none or all of them) and compute their MEX, i.e. the smallest positive integer which does not occur among the chosen elements. For example, the MEX of $[1, 2, 4]$ is $3$.\nHelp Chef find the largest number of elements of the sequence $A$ which he can choose such that their MEX is equal to $M$, or determine that it is impossible.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum number of elements Chef can choose, or $-1$ if he cannot choose elements in such a way that their MEX is $M$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le M \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n1\n3 3\n1 2 4\n\n-----Example Output-----\n3\n\n-----Explanation-----\nExample case 1: The MEX of whole array is 3. Hence, we can choose all the elements.\n\n Examples: \nInput: \n['1', '3 3', '1 2 4', '']\nOutput: \n ['3']\n",
  "541": "Problem: \n\"Humankind cannot gain anything without first giving something in return. To obtain, something of equal value must be lost. That is alchemy's first law of Equivalent Exchange. In those days, we really believed that to be the world's one, and only truth.\"\n-- Alphonse Elric\nNow, here we have an equivalent exchange law for triangles which states that two right-angled isosceles triangles of the same color can be made into a square of the same color using Alchemy.\nYou are given N$N$ right-angled isosceles colored triangles numbered from 1$1$ to N$N$. For each triangle, the two equal sides have a length of 1$1$ unit. The Color of i$i$-th triangle is given by Ci$C_i$.\nTo create a tower, we choose some consecutive (2\u00d7k)+1$2 \\times k)+1$ triangles for any k\u22650$k \\geq 0$. We then pick some 2\u00d7k$2 \\times k$ of them (these need not be consecutive), and form k$k$ pairs of triangles such that both triangles in pair have the same color. Also, each of the 2\u00d7k$2 \\times k$ should be in exactly one pair. Then the two triangles in each pair are joined using Alchemy (following the law of equivalent exchange for triangles) to form squares and these k$k$ squares are placed one upon other. The one remaining triangle is placed as a roof to the tower. This results in a tower of the height of k$k$.\nFind the maximum height of the tower that can be formed. \nIn other words, you should select the largest consecutive segment of triangles, such that you can form a tower using every single one of those triangles. In particular, you leave out one triangle, which will form the roof, and the other triangles should all be paired up such that both triangles in a pair have the same colour.\n\n-----Input:-----\n- The first line contains T$T$, the number of test cases. Then the test cases follow. \n- For every test case, the first line contains N$N$ denoting the number of triangles.\n- For every test case, the second line contains N$N$ space-separated integers Ci$C_{i}$ denoting the color of the triangles. ( 1\u2264i\u2264N$1 \\leq i \\leq N$).\n\n-----Output:-----\nFor every test case, output a single integer denoting the maximum height of the tower that can be formed.\n\n-----Constraints-----\n- 1\u2264T\u2264100$1 \\leq T \\leq 100$ \n- 1\u2264N\u2264105$1 \\leq N \\leq 10^{5}$ \n- 1\u2264Ci\u226430$1 \\leq C_{i} \\leq 30$ \n- Sum of N$N$ over all test cases doesn't exceed 5\u00d7105$5\\times 10^{5}$ \n\n-----Sample Input:-----\n4\n14\n5 4 2 2 3 2 1 3 2 7 4 9 9 9\n3\n1 2 1\n3\n1 1 1\n5\n1 2 3 4 1\n\n-----Sample Output:-----\n3\n1\n1\n0\n\n-----EXPLANATION:-----\n- #1$1$: The subarray [2,2,3,2,1,3,2]$[2, 2, 3, 2, 1, 3, 2]$ results in a tower of height 3$3$.\n- #2$2$: The subarray [1,2,1]$[ 1, 2, 1 ]$ results in a tower of height 1$1$.\n- #3$3$: The subarray [1,1,1]$[ 1, 1, 1 ]$ results in a tower of height 1$1$. \n- #4$4$: The subarrays [1]$[ 1 ]$, [2]$[ 2 ]$ , [3]$[ 3 ]$, [4]$[ 4 ]$ and [1]$[ 1 ]$ all results in a tower of height 0$0$.\n\nThe above tower is possible by subarray [2,2,3,2,1,3,2]$[2, 2, 3, 2, 1, 3, 2]$ resulting in a height of 3$3$ in test case 1$1$.\n\n Examples: \nInput: \n['4', '14', '5 4 2 2 3 2 1 3 2 7 4 9 9 9', '3', '1 2 1', '3', '1 1 1', '5', '1 2 3 4 1']\nOutput: \n ['3', '1', '1', '0']\n",
  "542": "Problem: \nChef has just finished the construction of his new garden. He has sown the garden with patches of the most beautiful carpet grass he could find. He has filled it with patches of different color and now he wants to evaluate how elegant his garden is.\nChef's garden looks like a rectangular grid of cells with N rows and M columns. So there are N x M cells in total.\tIn each cell Chef planted grass of some color.\nThe elegance of the garden is defined by the number of squares, composed of at least four  garden cells, with edges parallel to the sides of the garden, that have four corner cells of the same color.\nGiven the description of Chef's garden, calculate how many such squares exist.\nInput format\nThe first line contains the number T, the number of test cases. In the following lines,\tT test cases follow (without any newlines between them.)\nThe first line of each test case contains N and M, separated by a single space.\nEach of the next N lines contains M characters without any spaces between them, and without any leading or trailing spaces.\nEach character describes the color of the corresponding cell in the garden and belongs to the set of lowercase and uppercase lettes of the English alphabet.\nOne letter in lowercase and uppercase describes different colors.\nOutput format\nFor each test case, print the number of squares that conform to the definition in the\tproblem statement.\nConstraints\n1 \u2264 T \u2264 50\n\n1 \u2264 N, M \u2264 50\n\nSample input\n3\n2 2\naa\naA\n3 3\naba\nbab\naba\n4 4\naabb\naabb\nbbaa\nbbaa\n\nSample output\n0\n1\n4\n\nExplanation\nIn the first case the only avaliable square does not conform to the definition in the problem statement because 'a' and 'A' describes different colors.\nIn the second case, you can select the 4 a's at the corners of the garden.\nIn the third case, you can only make four squares, from the four 2x2 segments\tthat are of the same color.\n\n Examples: \nInput: \n['3', '2 2', 'aa', 'aA', '3 3', 'aba', 'bab', 'aba', '4 4', 'aabb', 'aabb', 'bbaa', 'bbaa', '', '']\nOutput: \n ['0', '1', '4']\n",
  "543": "Problem: \nRam and Shyam are playing a game of Truth and Dare. In this game, Shyam will ask Ram to perform tasks of two types:\n- Truth task: Ram has to truthfully answer a question.\n- Dare task: Ram has to perform a given task.\nEach task is described by an integer. (If a truth task and a dare task are described by the same integer, they are still different tasks.) You are given four lists of tasks:\n- $T_{r, 1}, T_{r, 2}, \\dots, T_{r, t_r}$: the truth tasks Ram can perform.\n- $D_{r, 1}, D_{r, 2}, \\dots, D_{r, d_r}$: the dare tasks Ram can perform.\n- $T_{s, 1}, T_{s, 2}, \\dots, T_{s, t_s}$: the truth tasks Shyam can ask Ram to perform.\n- $D_{s, 1}, D_{s, 2}, \\dots, D_{s, d_s}$: the dare tasks Shyam can ask Ram to perform.\nNote that the elements of these lists are not necessarily distinct, each task may be repeated any number of times in each list.\nShyam wins the game if he can find a task Ram cannot perform. Ram wins if he performs all tasks Shyam asks him to. Find the winner of the game.\nLet's take an example where Ram can perform truth tasks $3$, $2$ and $5$ and dare tasks $2$ and $100$, and Shyam can give him truth tasks $2$ and $3$ and a dare task $100$. We can see that whichever truth or dare tasks Shyam asks Ram to perform, Ram can easily perform them, so he wins. However, if Shyam can give him dare tasks $3$ and $100$, then Ram will not be able to perform dare task $3$, so Shyam wins.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $t_r$.\n- The second line contains $t_r$ space-separated integers $T_{r, 1}, T_{r, 2}, \\dots, T_{r, t_r}$.\n- The third line contains a single integer $d_r$.\n- The fourth line contains $d_r$ space-separated integers $D_{r, 1}, D_{r, 2}, \\dots, D_{r, d_r}$.\n- The fifth line contains a single integer $t_s$.\n- The sixth line contains $t_s$ space-separated integers $T_{s, 1}, T_{s, 2}, \\dots, T_{s, t_s}$.\n- The seventh line contains a single integer $d_s$.\n- The eighth line contains $d_s$ space-separated integers $D_{s, 1}, D_{s, 2}, \\dots, D_{s, d_s}$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"yes\" if Ram wins the game or \"no\" otherwise.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le t_r, d_r, t_s, d_s \\le 100$\n- $1 \\le T_{r, i} \\le 100$ for each valid $i$\n- $1 \\le D_{r, i} \\le 100$ for each valid $i$\n- $1 \\le T_{s, i} \\le 100$ for each valid $i$\n- $1 \\le D_{s, i} \\le 100$ for each valid $i$\n\n-----Example Input-----\n4\n2\n1 2\n3\n1 3 2\n1\n2\n2\n3 2\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 4\n3\n3 2 5\n2\n2 100\n1\n2\n1\n100\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 2\n\n-----Example Output-----\nyes\nno\nyes\nyes\n\n-----Explanation-----\nExample case 1: Ram's truth tasks are $[1, 2]$ and his dare tasks are $[1, 3, 2]$. Shyam's truth tasks are $[2]$ and his dare tasks are $[3, 2]$. Ram can perform all tasks Shyam gives him.\nExample case 2: Ram's truth tasks are $[1, 2]$ and his dare tasks are $[1, 3, 2]$. Shyam's truth tasks are $[2]$ and his dare tasks are $[3, 2, 4]$. If Shyam asks Ram to perform dare task $4$, Ram will not be able to do it.\n\n Examples: \nInput: \n['4', '2', '1 2', '3', '1 3 2', '1', '2', '2', '3 2', '2', '1 2', '3', '1 3 2', '1', '2', '3', '3 2 4', '3', '3 2 5', '2', '2 100', '1', '2', '1', '100', '2', '1 2', '3', '1 3 2', '1', '2', '3', '3 2 2', '']\nOutput: \n ['yes', 'no', 'yes', 'yes']\n",
  "544": "Problem: \nAn encoder encodes the first $16$ lowercase English letters using $4$ bits each. The first bit (from the left) of the code is $0$ if the letter lies among the first $8$ letters, else it is $1$, signifying that it lies among the last $8$ letters. The second bit of the code is $0$ if the letter lies among the first $4$ letters of those $8$ letters found in the previous step, else it's $1$, signifying that it lies among the last $4$ letters of those $8$ letters. Similarly, the third and the fourth bit each signify the half in which the letter lies. \nFor example, the letter $j$ would be encoded as :\n- Among $(a,b,c,d,e,f,g,h$ $|$ $i,j,k,l,m,n,o,p)$, $j$ appears in the second half. So the first bit of its encoding is $1$.\n- Now, among $(i,j,k,l$ $|$ $m,n,o,p)$, $j$ appears in the first half. So the second bit of its encoding is $0$.\n- Now, among $(i,j$ $|$ $k,l)$, $j$ appears in the first half. So the third bit of its encoding is $0$.\n- Now, among $(i$ $|$ $j)$, $j$ appears in the second half. So the fourth and last bit of its encoding is $1$.\nSo $j$'s encoding is $1001$,\nGiven a binary encoded string $S$, of length at most $10^5$, decode the string. That is, the first 4 bits are the encoding of the first letter of the secret message, the next 4 bits encode the second letter, and so on. It is guaranteed that the string's length is a multiple of 4.\n\n-----Input:-----\n- The first line of the input contains an integer $T$, denoting the number of test cases.\n- The first line of each test case contains an integer $N$, the length of the encoded string.\n- The second line of each test case contains the encoded string $S$.\n\n-----Output:-----\nFor each test case, print the decoded string, in a separate line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $4 \\leq N \\leq 10^5$\n- The length of the encoded string is a multiple of $4$.\n- $0 \\le S_i \\le 1$\n\n-----Subtasks-----\n- $100$ points : Original constraints. \n\n-----Sample Input:-----\n3\n4\n0000\n8\n00001111\n4\n1001\n\n-----Sample Output:-----\na\nap\nj\n\n-----Explanation:-----\n- Sample Case $1$ : \nThe first bit is $0$, so the letter lies among the first $8$ letters, i.e., among $a,b,c,d,e,f,g,h$. The second bit is $0$, so it lies among the first four of these, i.e., among $a,b,c,d$. \nThe third bit is $0$, so it again lies in the first half, i.e., it's either $a$ or $b$. Finally, the fourth bit is also $0$, so we know that the letter is $a$.\n- Sample Case $2$ : \nEach four bits correspond to a character. Just like in sample case $1$, $0000$ is equivalent to $a$. Similarly, $1111$ is equivalent to $p$. So, the decoded string is $ap$.\n- Sample Case $3$ : \nThe first bit is $1$, so the letter lies among the last $8$ letters, i.e., among $i,j,k,l,m,n,o,p$. The second bit is $0$, so it lies among the first four of these, i.e., among $i,j,k,l$. \nThe third bit is $0$, so it again lies in the first half, i.e., it's either $i$ or $j$. Finally, the fourth bit is $1$, so we know that the letter is $j$.\n\n Examples: \nInput: \n['3', '4', '0000', '8', '00001111', '4', '1001']\nOutput: \n ['a', 'ap', 'j']\n",
  "545": "Problem: \nChef wants to serve mankind by making people immortal by preparing a dish, a dish of life - a dish with the best taste in the universe, one with the smell and splash of fresh water flowing down the springs of the mountain, one with the smell of the best lily flowers of the garden, one that has contained the very essence of life in a real sense. \nThis dish will contain K ingredients that are found only in remote islands amid mountains. For sake of convenience, we enumerate the ingredients by the integers from 1 to K, both inclusive. There are N islands and each of them offers some ingredients. Chef being a little child did not know how to collect the ingredients for the recipe. He went to all the islands and bought all the ingredients offered in each island. Could he possibly have saved some time by skipping some island? If it was not possible for Chef to collect the required ingredients (i.e. all the K ingredients), output \"sad\". If it was possible for him to skip some islands, output \"some\", otherwise output \"all\".\n\n-----Input-----\nFirst line of the input contains an integer T denoting number of test cases. The description of T test cases follow.\nThe first line of each test case contains two space separated integers N, K.\nThe i-th of the next lines will contain first an integer Pi, denoting the number of ingredients grown in the i-th island, followed by Pi distinct integers in the range [1, K]. All the integers are space separated. \n\n-----Output-----\nFor each test case, output a single line containing one of the strings \"sad\", \"all\" or \"some\" (without quotes) according to the situation. \n\n-----Constraints-----\n- 1 \u2264 T  \u2264 10\n- 1 \u2264 N, K \u2264 105\n- 1 \u2264 Pi \u2264 K\n- Sum of Pi over all test cases \u2264 106\n\n-----Subtasks-----\nSubtask #1 (30 points)\n- 1 \u2264 N, K \u2264 50\n\nSubtask #2 (30 points)\n- 1 \u2264 K \u2264 50\n\nSubtask #3 (40 points)\n- original constraints\n\n-----Example-----\nInput\n3\n3 4\n3 1 2 3\n2 1 3\n2 1 2\n2 3\n3 1 2 3\n2 1 3\n2 3\n2 1 2\n2 1 3\n\nOutput\nsad\nsome\nall\n\n-----Explanation-----\nExample 1. The ingredient 4 is not available in any island, so Chef can't make the dish of life. Hence, the answer is \"sad\".\nExample 2. Chef can just go to the first island and collect all the three ingredients required. He does not need to visit the second island. So, the answer is \"some\".\nExample 3. Chef has to visit both the islands in order to obtain all the three ingredients. So, the answer is \"all\".\n\n Examples: \nInput: \n['3', '3 4', '3 1 2 3', '2 1 3', '2 1 2', '2 3', '3 1 2 3', '2 1 3', '2 3', '2 1 2', '2 1 3']\nOutput: \n ['sad', 'some', 'all']\n",
  "546": "Problem: \nMotu and Patlu are playing with a Magical Ball. Patlu find some interesting pattern in the motion of the ball that ball always bounce back from the ground after travelling a linear distance whose value is some power of $2$. Patlu gave Motu total distance $D$ travelled by the ball and ask him to calculate the minimum number of bounces that the ball makes before coming to rest.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, single integers $D$.\n- Note : Power of $2$ must be a non-negative integer. \n\n-----Output:-----\nFor each testcase, output in a single line answer, the minimum number of bounces the ball makes before coming to rest.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1$ $\\leq$ $M$< $10$^18\n\n-----Sample Input:-----\n1\n13 \n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\n\n Examples: \nInput: \n['1', '13']\nOutput: \n ['2']\n",
  "548": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n*\n*\n*\n*\n***\n***\n*\n*\n***\n***\n*****\n*****\n*\n*\n***\n***\n*****\n*****\n*******\n*******\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['*', '*', '*', '*', '***', '***', '*', '*', '***', '***', '*****', '*****', '*', '*', '***', '***', '*****', '*****', '*******', '*******']\n",
  "549": "Problem: \nIn a fictitious city of CODASLAM there were many skyscrapers. The mayor of the city decided to make the city beautiful and for this he decided to arrange the skyscrapers in descending order of their height, and the order must be strictly decreasing but he also didn\u2019t want to waste much money so he decided to get the minimum cuts possible. Your job is to output the minimum value of cut that is possible to arrange the skyscrapers in descending order.\n\n-----Input-----\n\n*First line of input is the number of sky-scrappers in the city\n*Second line of input is the height of the respective sky-scrappers\n\n\n-----Output-----\n\n* Your output should be the minimum value of cut required to arrange these sky-scrappers in descending order.\n\n-----Example-----\nInput:\n5\n1 2 3 4 5\n\nOutput:\n8\n\nBy:\nChintan,Asad,Ashayam,Akanksha\n\n Examples: \nInput: \n['5', '1 2 3 4 5']\nOutput: \n ['8', 'By:', 'Chintan,Asad,Ashayam,Akanksha']\n",
  "550": "Problem: \nThere is Chef and Chef\u2019s Crush who are playing a game of numbers.\n\nChef\u2019s crush has a number $A$ and Chef has a number $B$.\n\nNow, Chef wants Chef\u2019s crush to win the game always, since she is his crush. The game ends when the greatest value of A^B is reached after performing some number of operations (possibly zero), Where ^ is Bitwise XOR.\n\nBefore performing any operation you have to ensure that both $A$ and $B$ have the same number of bits without any change in the values. It is not guaranteed that $A$ and $B$ should have same number of bits in the input.\nFor example, if $A$ is $2$ and $B$ is $15$, then the binary representation of both the numbers will have to be $0010$ and $1111$ respectively, before performing any operation.  \nThe operation is defined as  : \n- Right circular shift of the bits of only $B$ from MSB$_B$ to LSB$_B$ i.e. if we consider $B_1 B_2 B_3 B_4$ as binary number, then after one circular right shift, it would be $B_4 B_1 B_2 B_3$\nThey both are busy with themselves, can you find the number of operations to end the game?\n\n-----Input :-----\n- The first line of input contains $T$, (number of test cases)  \n- Then each of the next $T$ lines contain : two integers $A$ and $B$ respectively.\n\n-----Output :-----\nFor each test case print two space-separated integers, The number of operations to end the game and value of A^B when the game ends.\n\n-----Constraints :-----\n- $1 \\leq T \\leq100$ \n- $1\\leq A,B \\leq 10^{18}$\n\n-----Subtasks  :-----\n- 30 Points: $1\\leq A,B \\leq 10^5$\n- 70 Points: Original Constraints\n\n-----Sample Input :-----\n1\n4 5\n\n-----Sample Output :-----\n2 7\n\n-----Explanation  :-----\nBinary  representation of  $4$ is $100$ and binary  representation  $5$ is $101$.   \n- After operation $1$ : $B$ $=$ $110$, so A^B $=$ $2$ \n- After operation $2$ : $B$ $=$ $011$, so A^B $=$ $7$ \nSo, the value of A^B will be $7$. Which is the greatest possible value for A^B and the number of operations are $2$.\n\n Examples: \nInput: \n['1', '4 5']\nOutput: \n ['2 7']\n",
  "551": "Problem: \nChef Tobby is playing a rapid fire with Bhuvan. He gives Bhuvan a string S and each time, Bhuvan has to guess whether there exists 2 equal subsequences in the string or not.\nBhuvan got a perfect score in the game with Chef Tobby. However, Chef Tobby has now asked Bhuvan to write a program that will do this automatically given a string S. Bhuvan is an intelligent man but he does not know how to write a code. Can you help him?\nFind two different subsequences such that they are equal in their value, more formally, find two sequences of indices (a1, a2, ..., ak-1, ak) and (b1, b2, ..., bk-1, bk) such that:\n\n- 1\u2264 ai, bi \u2264 |S|\n- ai < ai+1 for all valid i\n- bi < bi+1 for all valid i\n- Sai = Sbi for all valid i\n- there exist at least one i such that ai is not equal to bi\n\n-----Input section-----\nThe first line contains T, the number of test cases.\nEach of the next T lines contain one string S each.\nInput will only consist of lowercase english characters\n\n-----Output section-----\nFor each test case, output \"yes\" or \"no\" (without quotes) as the solution to the problem.\n\n-----Input constraints-----\n1 \u2264 T \u2264 1000\n1 \u2264 length of S \u2264 100\n\n-----Sample Input-----\n4\nlikecs\nvenivedivici\nbhuvan\ncodechef\n\n-----Sample Output-----\nno\nyes\nno\nyes\n\n-----Explanation-----\nIn test case 2, one of the possible equal subsequence is \"vi\" and \"vi\". (one at position {0, 3} and other at {4, 7}, assuming 0-based indexing).\nIn test case 4, one of the possible equal subsequence is \"ce\" and \"ce\". (one at position {0, 3} and other at {4, 6}, assuming 0-based indexing).\n\n Examples: \nInput: \n['4', 'likecs', 'venivedivici', 'bhuvan', 'codechef']\nOutput: \n ['no', 'yes', 'no', 'yes']\n",
  "552": "Problem: \nChef has gone shopping with his 5-year old son. They have bought N items so far. The items are numbered from 1 to N, and the item i weighs Wi grams.\n\nChef's son insists on helping his father in carrying the items. He wants his dad to give him a few items. Chef does not want to burden his son. But he won't stop bothering him unless he is given a few items to carry. So Chef decides to give him some items. Obviously, Chef wants to give the kid less weight to carry.\n\nHowever, his son is a smart kid. To avoid being given the bare minimum weight to carry, he suggests that the items are split into two groups, and one group contains exactly K items. Then Chef will carry the heavier group, and his son will carry the other group.\n\nHelp the Chef in deciding which items should the son take. Your task will be simple. Tell the Chef the maximum possible difference between the weight carried by him and the weight carried by the kid.\n\n-----Input:-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. The first line of each test contains two space-separated integers N and K. The next line contains N space-separated integers W1, W2, ..., WN.\n\n-----Output:-----\nFor each test case, output the maximum possible difference between the weights carried by both in grams.\n\n-----Constraints:-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 K < N \u2264 100\n- 1 \u2264 Wi \u2264 100000 (105)\n\n-----Example:-----\nInput:\n2\n5 2\n8 4 5 2 10\n8 3\n1 1 1 1 1 1 1 1\n\nOutput:\n17\n2\n\n-----Explanation:-----\nCase #1: The optimal way is that Chef gives his son K=2 items with weights 2 and 4. Chef carries the rest of the items himself. Thus the difference is: (8+5+10) \u2212 (4+2) = 23 \u2212 6 = 17.\n\nCase #2: Chef gives his son 3 items and he carries 5 items himself.\n\n Examples: \nInput: \n['2', '5 2', '8 4 5 2 10', '8 3', '1 1 1 1 1 1 1 1']\nOutput: \n ['17', '2']\n",
  "554": "Problem: \nJohnny was asked by his math teacher to compute nn (n to the power of n, where n is an integer), and has to read his answer out loud. This is a bit of a tiring task, since the result is probably an extremely large number, and would certainly keep Johnny occupied for a while if he were to do it honestly. But Johnny knows that the teacher will certainly get bored when listening to his answer, and will sleep through most of it! So, Johnny feels he will get away with reading only the first k digits of the result before the teacher falls asleep, and then the last k digits when the teacher wakes up.\n\nWrite a program to help Johnny to compute the digits he will need to read out.\n\n-----Input-----\nThe first line contains t, the number of test cases (about 30000). Then t test cases follow.\nEach test case consists of one line containing two numbers n and k (1 \u2264 n \u2264 109, 1 \u2264 k \u2264 9). It is guaranteed that k is not more than the number of digits of nn.\n\n-----Output-----\nFor each test case, print out one line containing two numbers, separated by a space, which are the first and the last k digits of nn.\n\n-----Example-----\nInput\n2\n4 2\n9 3\n\nOutput\n25 56\n387 489\n\n Examples: \nInput: \n['2', '4 2', '9 3']\nOutput: \n ['25 56', '387 489']\n",
  "555": "Problem: \nSherlock Holmes has decided to start a new academy to some of the young lads. He has conducted several tests and finally selected N equally brilliant\n\nstudents.Now he don't know whether to train all the N students or not. Now since Holmes was in a confusion, Watson came up with an idea. He wanted to\n\ntest the obedience of the students. So during the camp, the students were given some Swiss Chocolates as gifts each time when they passed a level.Now some of them have\n\nfinished eating all the chocolates, some of them had some remaining. Now to test their team chemistry and IQ skills, Watson told the lads to arrange themselves in such \na way that,  number of chocolates of the ith kid should be equal to the sum of   (i-1)th kid and (i-2)th kid. Now they have arranged themselves in an order.\nNow Sherlock announced that he will select the students who have formed the line according to this order. But since there can be many such small groups among the\n\nentire N kids, he will select a sequence of kids such that the length of the sequence is maximized, meanwhile satisfying the above condition \n\n-----Input-----\nFirst line is an integer T which denotes the total number of test cases. Each of the next T lines contains an integer N which denotes, N students. The next \nline contains N spaced integers.where it denotes the order in which the kids arranged themselves. \n\n-----Output-----\nEach line contains an integer which denotes the maximum number of students among the N students who have arranged themselves according the rule said by Watson.It is guaranteed that Holmes will select atleast 1 or 2 students\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 10^5\n- 1 \u2264 Each of next N integers \u2264 10^9\n\n-----Subtasks-----\nSubtask #1 : (20 points)\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N\u2264 100\n- 1 \u2264 Each element\u2264 10^3\n\nSubtask 2 : (80 points) \n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N\u2264 100000\n- 1 \u2264 Each element\u2264 10^9\n\n-----Example-----\nInput:\n2\n5\n2 3 5 1 2\n3\n1 2 3\n\nOutput:\n3\n3\n\n-----Explanation-----\nExample case 1. Here the first kid has 2 chocolates, second has 3 chocolates, third kid has 5 chocolates, which is the sum of first kid's total chocolates \nand second kid's chocolate. Forth student has only 1 chocolate where he did not follow the rule. So the maximum number of kids who arranged themselves in the order was \n3. That is students at index 1 to index 3.\n\n Examples: \nInput: \n['2', '5', '2 3 5 1 2', '3', '1 2 3']\nOutput: \n ['3', '3']\n",
  "557": "Problem: \nProf. Sergio Marquina is a mathematics teacher at the University of Spain. Whenever he comes across any good question(with complexity k), he gives that question to students within roll number range i and j.\nAt the start of the semester he assigns a score of 10 to every student in his class if a student submits a question of complexity k, his score gets multiplied by k.\nThis month he gave M questions and he is wondering what will be mean of maximum scores of all the students. He is busy planning a tour of the Bank of Spain for his students, can you help him?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains the first line of input, two integers N, M i.e. Number of students in the class and number of questions given in this month.\n- Next M lines contain 3 integers -i,j,k i.e. starting roll number, end roll number, and complexity of the question\n\n-----Output:-----\n- For each test case, output in a single line answer - floor value of Mean of the maximum possible score for all students.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, M \\leq 105$\n- $1 \\leq i \\leq j \\leq N$\n- $1 \\leq k \\leq 100$\n\n-----Sample Input:-----\n1\n5 3\n1 3 5\n2 5 2\n3 4 7\n\n-----Sample Output:-----\n202\n\n-----EXPLANATION:-----\nInitial score of students will be : [10,10,10,10,10]\nafter solving question 1 scores will be: [50,50,50,10,10]\nafter solving question 2 scores will be: [50,100,100,20,20]\nafter solving question 1 scores will be: [50,100,700,140,20]\nHence after all questions mean of maximum scores will (50+100+700+140+20)/5=202\n\n Examples: \nInput: \n['1', '5 3', '1 3 5', '2 5 2', '3 4 7']\nOutput: \n ['202']\n",
  "560": "Problem: \nChef is the judge of a competition. There are two players participating in this competition \u2014 Alice and Bob.\nThe competition consists of N races. For each i (1 \u2264 i \u2264 N), Alice finished the i-th race in Ai minutes, while Bob finished it in Bi minutes. The player with the smallest sum of finish times wins. If this total time is the same for Alice and for Bob, a draw is declared.\nThe rules of the competition allow each player to choose a race which will not be counted towards their total time. That is, Alice may choose an index x and her finish time in the race with this index will be considered zero; similarly, Bob may choose an index y and his finish time in the race with this index will be considered zero. Note that x can be different from y; the index chosen by Alice does not affect Bob's total time or vice versa.\nChef, as the judge, needs to announce the result of the competition. He knows that both Alice and Bob play optimally and will always choose the best option. Please help Chef determine the result!\n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N.\n- The second line contains N space-separated integers A1, A2, ..., AN.\n- The third line contains N space-separated integers B1, B2, ..., BN.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Alice\" if Alice wins, \"Bob\" if Bob wins or \"Draw\" if the result is a draw (without quotes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 2 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 1000 for each valid i\n- 1 \u2264 Bi \u2264 1000 for each valid i\n\n-----Example-----\nInput:\n\n3\n5\n3 1 3 3 4\n1 6 2 5 3\n5\n1 6 2 5 3\n3 1 3 3 4\n3\n4 1 3\n2 2 7\n\nOutput:\n\nAlice\nBob\nDraw\n\n-----Explanation-----\nExample case 1: Alice will choose the finish time in the last race to be considered zero, which means her sum of finish times is 3 + 1 + 3 + 3 + 0 = 10, while Bob will choose the finish time of his second race to be considered zero, so his total sum of finish times is 1 + 0 + 2 + 5 + 3 = 11. Since Alice's sum is smaller, she is considered the winner.\nExample case 2: We're dealing with the same situation as in the previous case, but finish times for the players are swapped, so Bob wins this time.\nExample case 3: Alice will choose the finish time of the first race to be considered zero, which means her total time is 0 + 1 + 3 = 4. Bob will choose the finish time of his last race to be considered zero, which makes his total time 2 + 2 + 0 = 4. The competition is considered a draw because both players have equal sums of finish times.\n\n Examples: \nInput: \n['3', '5', '3 1 3 3 4', '1 6 2 5 3', '5', '1 6 2 5 3', '3 1 3 3 4', '3', '4 1 3', '2 2 7']\nOutput: \n ['Alice', 'Bob', 'Draw']\n",
  "561": "Problem: \nThis time minions are celebrating Diwali Festival. There are N minions in total. Each of them owns a house. On this Festival, Each of them wants to decorate their house. But none of them have enough money to do that. One of the minion, Kevin, requested Gru for money. Gru agreed for money distribution but he will be giving money to a minion if and only if demanded money is less than or equal to the money Gru have. Now Gru wonders if he can spend all the money or not.\n\n-----Input-----\nFirst line have number of test cases T. Each test case consist of Two Lines. First line contains two space separated integers N and K i.e. Number of minions and Amount of Money Gru have. Next line contains N space separated integers A1,A2,A3,.....,AN representing amount of money demanded by ith minion.\n\n-----Output-----\nOutput YES if Gru can spend his all of the money on minions i.e. after distribution Gru have zero amount of money else NO.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 N \u2264 102\n- 1 \u2264 K,Ai \u2264 109\n\n-----Example-----\nInput:\n2 \n4 9\n5 2 2 4\n4 9\n5 2 18 3\n\nOutput:\nYES\nNO\n\n\n-----Explanation-----\nExample case 1.At first Gru is having 9 Rs. If he gives 5 Rs. to first minion then remaining 4 Rs. can be given to 2nd and 3rd minion or to the 4th minion. Which will leave zero amount of money in the hands of Gru.\nExample case 2.At first Gru is having 9 Rs. If he gives 5 Rs. to the first minion then from remaining 4 Rs. either he can give 2 Rs. to the 2nd minion or 3 Rs. to the fourth minion. Which will leave either 2 Rs. or 1 Rs. in the hands of Gru.\n\n Examples: \nInput: \n['2', '4 9', '5 2 2 4', '4 9', '5 2 18 3']\nOutput: \n ['YES', 'NO']\n",
  "563": "Problem: \nThe land of Programmers Army is surrounded by many islands. A unique number is associated with each island. The king of the islands is a very generous person, he donates a certain amount of gold coins to travelers for visiting each island that they visited to.\nNow, you are appointed as a traveler, who will travel to all these(or some) islands as many times as the Army wants, and you will collect gold coins from the king of the island.\nIn each trip, you will be asked to give the total sum of gold coins you have collected.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$. $T$ denoting the number of test cases. The description of $T$ test cases is as follows.\n- The next line of the input contains a single integer $N$. $N$ denotes the total number of Islands.\n- The next line of the input contains $N$ space-separated integers $A1, A2, A3...An$ where $ith$ number denotes the maximum number of coins that the king of $ith$ island can donate.\n- Next line contains a single integer $Q$. $Q$ denotes the total number of times traveler have to go for the trip.\n- Next $Q$ lines contains, two space-separated integers $Q1,Q2$ denoting the start and end number of islands, i.e. traveler will start the trip from $Q1th$ island and will go till $Q2th$ island, in each trip.\nNote: islands are numbered from $1$ to $N$.\n\n-----Output:-----\n- For each trip print the total number of gold coins, traveler will collect(each on a new line).\n\n-----Constraints:-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^4$\n- $1 \\leq A1, A2, A3...An \\leq 10^5$\n- $1 \\leq Q \\leq 10^3$\n- $1 \\leq Q1,Q2 \\leq N$\n\n-----Sample Input:-----\n1\n4\n10 2 5 50\n2\n1 3\n2 4\n\n-----Sample Output:-----\n17\n57\n\n-----Explanation:-----\n- \nIn 1st Trip, traveler will go from 1st Island to 3rd Island, hence the total number of coins traveler can collect is 10+2+5 = 17\n- \nIn 2 d Trip, traveler will go from 2nd Island to 4th Island, hence the total number of coins traveler can collect is 2+5+50 = 57\n\n Examples: \nInput: \n['1', '4', '10 2 5 50', '2', '1 3', '2 4']\nOutput: \n ['17', '57']\n",
  "564": "Problem: \n-----Coal Company -----\n\nThe Tunisian Coal Mining company uses a train to ferry out coal blocks from its coal mines. The train has N containers numbered from 1 to N which need to\n\nbe filled with blocks of coal. Assume there are infinite coal blocks. The containers are arranged in increasing order of capacity, and the ith container\n\nhas capacity i. Every container has a specific loading cost ci. The workers fill the containers in rounds. In every round, they choose a subset of\n\ncontainers and load them with coal blocks. This subset should be such that each subsequent container chosen in a round should be more spacious than the\n\nprevious one. Also, the difference in loading cost of consecutive containers should be at least K.\n\n\n\nWhat is the least number of rounds in which all containers can be filled?\n\n\n\n-----\nInput\n-----\n\nThe first line contains the number of test cases T. T test cases follow.\n\nEach case contains an integer N and K on the first line, followed by integers c1,...,cn on the second line.\n\n\n\n1 <= T <= 100\n\n1 <= N <= 300\n\n1 <= ci <= 1000\n\n1 <= K <= 1000\n\n\n\n-----\nOutput\n-----\n\nOutput T lines, one for each test case, containing the minimum number of rounds in which all containers could be filled.\n\n-----\nExample\n-----\n\nInput:\n\n2\n\n3 2\n\n5 4 7\n\n5 1\n\n5 3 4 5 6\n\n\n\nOutput:\n\n2\n\n1\n\n\n\n\n\n\n\nExplanation:\n\nFor the first example, workers can fill the containers of cost 5 and 7 in the first round and the container with cost 4 in the next round. Note that the\n\ncontainers with cost 5 and 4 cannot be filled consecutively because the loading costs should differ by at least K (which is 2). Also, the containers cannot\n\nbe filled in order 5, 7, 4 in one round because the containers filled in a round should be in increasing capacity.\n\n Examples: \nInput: \n['2', '3 2', '5 4 7', '5 1', '5 3 4 5 6']\nOutput: \n ['2', '1']\n",
  "566": "Problem: \nChef likes strings a lot but he likes palindromic strings more. Today, Chef has two strings A and B, each consisting of lower case alphabets.\n\nChef is eager to know whether it is possible to choose some non empty strings s1 and s2 where s1 is a substring of A, s2 is a substring of B such that s1 + s2 is a palindromic string. Here '+' denotes the concatenation between the strings.\nNote:\nA string is a palindromic string if it can be read same both forward as well as backward. To know more about palindromes click here.\n\n-----Input-----\n- First line of input contains a single integer T denoting the number of test cases.\n- For each test case:\n\t\n- First line contains the string A\n- Second line contains the string B.\n\n-----Output-----\nFor each test case, Print \"Yes\" (without quotes) if it possible to choose such strings s1 & s2. Print \"No\" (without quotes) otherwise.\n\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10 \n- 1 \u2264 |A|, |B| \u2264 1000 \n\n-----Subtasks-----\n-  Subtask 1: 1 \u2264 |A|, |B| \u2264 10 : ( 40 pts )\n-  Subtask 2: 1 \u2264 |A|, |B| \u2264 1000 : ( 60 pts )\n\n-----Example-----Input\n3\nabc\nabc\na\nb\nabba\nbaab\n\nOutput\nYes\nNo\nYes\n\n-----Explanation-----\n- Test 1: One possible way of choosing s1 & s2 is s1 = \"ab\", s2 = \"a\" such that s1 + s2 i.e \"aba\" is a palindrome.\n- Test 2: There is no possible way to choose s1 & s2 such that s1 + s2 is a palindrome.\n- Test 3: You can figure it out yourself.\n\n Examples: \nInput: \n['3', 'abc', 'abc', 'a', 'b', 'abba', 'baab']\nOutput: \n ['Yes', 'No', 'Yes']\n",
  "567": "Problem: \nChef's new hobby is painting, but he learned the fact that it's not easy to paint 2D pictures in a hard way, after wasting a lot of canvas paper, paint and of course time. From now on, he decided to paint 1D pictures only.\nChef's canvas is N millimeters long and is initially all white. For simplicity, colors will be represented by an integer between 0 and 105. 0 indicates white. The picture he is envisioning is also N millimeters long and the ith millimeter consists purely of the color Ci. Unfortunately, his brush isn't fine enough to paint every millimeter one by one. The brush is 3 millimeters wide and so it can only paint three millimeters at a time with the same color. Painting over the same place completely replaces the color by the new one. Also, Chef has lots of bottles of paints of each color, so he will never run out of paint of any color.\nChef also doesn't want to ruin the edges of the canvas, so he doesn't want to paint any part beyond the painting. This means, for example, Chef cannot paint just the first millimeter of the canvas, or just the last two millimeters, etc.\nHelp Chef by telling him whether he can finish the painting or not with these restrictions.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N. The second line contains N space-separated integers C1, C2, ..., CN denoting the colors of Chef's painting.\n\n-----Output-----\nFor each test case, output a single line containing either \u201cYes\u201d or \u201cNo\u201d (without quotes), denoting whether Chef can finish the painting or not.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 3 \u2264 N \u2264 105\n- The sum of the Ns over all the test cases in a single test file is \u2264 5\u00d7105\n- 1 \u2264 Ci \u2264 105\n\n-----Example-----\nInput:3\n4\n1 5 5 5\n4\n1 1 1 5\n3\n5 5 2\nOutput:Yes\nYes\nNo\n\n-----Explanation-----\nExample case 1. Chef's canvas initially contains the colors [0,0,0,0]. Chef can finish the painting by first painting the first three millimeters with color 1, so the colors become [1,1,1,0], and then the last three millimeters with color 5 so that it becomes [1,5,5,5].\nExample case 2. Chef's canvas initially contains the colors [0,0,0,0]. Chef can finish the painting by first painting the last three millimeters by color 5 so the colors become [0,5,5,5], and then the first three millimeters by color 1 so it becomes [1,1,1,5].\nExample case 3. In this test case, Chef can only paint the painting as a whole, so all parts must have the same color, and the task is impossible.\n\n Examples: \nInput: \n['3', '4', '1 5 5 5', '4', '1 1 1 5', '3', '5 5 2', '']\nOutput: \n ['Yes', 'Yes', 'No']\n",
  "568": "Problem: \nKefaa has developed a novel decomposition of a tree. He claims that this decomposition solves many difficult problems related to trees. However, he doesn't know how to find it quickly, so he asks you to help him.\nYou are given a tree with $N$ vertices numbered $1$ through $N$. Let's denote an edge between vertices $u$ and $v$ by $(u, v)$. The triple-tree decomposition is a partition of edges of the tree into unordered triples of edges $(a, b), (a, c), (a, d)$ such that $a \\neq b \\neq c \\neq d$. Each edge must belong to exactly one triple.\nHelp Kefaa with this problem \u2014 find a triple-tree decomposition of the given tree or determine that no such decomposition exists.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- Each of the following $N-1$ lines contains two space-separated integers $u$ and $v$ describing an edge between vertices $u$ and $v$ of the tree.\n\n-----Output-----\n- For each test case, print a line containing the string \"YES\" if a triple-tree decomposition of the given tree exists or \"NO\" otherwise.\n- If it exists, print $\\frac{N-1}{3}$ more lines describing a decomposition.\n- Each of these lines should contain four space-separated integers $a$, $b$, $c$ and $d$ describing a triple of edges $(a, b), (a, c), (a, d)$.\nIf more than one triple-tree decomposition exists, you may output any one.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 2 \\cdot 10^5$\n- $1 \\le u, v \\le N$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (20 points): $2 \\le N \\le 10$\nSubtask #2 (30 points):$2 \\le N \\le 5000$ and the sum of $N$ overall testcases doesn't exceed $5000$\nSubtask #3 (50 points): original constraints\n\n-----Example Input-----\n2\n4\n1 2\n1 3\n1 4\n7\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n\n-----Example Output-----\nYES\n1 2 3 4\nNO\n\n Examples: \nInput: \n['2', '4', '1 2', '1 3', '1 4', '7', '1 2', '2 3', '1 4', '4 5', '1 6', '6 7']\nOutput: \n ['YES', '1 2 3 4', 'NO']\n",
  "569": "Problem: \nSandu, a teacher in Chefland introduced his students to a new sequence i.e.\n0,1,0,1,2,0,1,2,3,0,1,2,3,4........\nThe Sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$\nStudents being curious about the sequence asks the Nth element of the sequence. Help Sandu to answer the Students\n\n-----Input:-----\n- The first-line will contain $T$, the number of test cases. Then the test case follows. \n- Each test case contains a single numbers N.\n\n-----Output:-----\nPrint the Nth element of the sequence\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N  \\leq 10^{18}$\n\n-----Sample Input:-----\n5\n8\n9\n20\n32\n109\n\n-----Sample Output:-----\n2\n3\n5\n4\n4\n\n Examples: \nInput: \n['5', '8', '9', '20', '32', '109']\nOutput: \n ['2', '3', '5', '4', '4']\n",
  "571": "Problem: \nThe chef has a recipe he wishes to use for his guests,\nbut the recipe will make far more food than he can serve to the guests.\nThe chef therefore would like to make a reduced version of the recipe which has the same ratios of ingredients, but makes less food.\nThe chef, however, does not like fractions.\nThe original recipe contains only whole numbers of ingredients,\nand the chef wants the reduced recipe to only contain whole numbers of ingredients as well.\nHelp the chef determine how much of each ingredient to use in order to make as little food as possible.\n\n-----Input-----\nInput will begin with an integer T, the number of test cases.\nEach test case consists of a single line.\nThe line begins with a positive integer N, the number of ingredients.\nN integers follow, each indicating the quantity of a particular ingredient that is used.\n\n-----Output-----\nFor each test case, output exactly N space-separated integers on a line,\ngiving the quantity of each ingredient that the chef should use in order to make as little food as possible.\n\n-----Sample Input-----\n3\n2 4 4\n3 2 3 4\n4 3 15 9 6\n\n-----Sample Output-----\n1 1\n2 3 4\n1 5 3 2\n\n-----Constraints-----\nT\u2264100\n\n2\u2264N\u226450\n\nAll ingredient quantities are between 1 and 1000, inclusive.\n\n Examples: \nInput: \n['3', '2 4 4', '3 2 3 4', '4 3 15 9 6', '']\nOutput: \n ['1 1', '2 3 4', '1 5 3 2']\n",
  "572": "Problem: \nToday is Chef's birthday. His mom has surprised him with truly fruity gifts: 2 fruit baskets. The first basket contains N apples, and the second one contains M oranges. Chef likes apples and oranges very much but he likes them equally, and therefore, wants to have the minimum possible difference between the number of apples and oranges he has. To do so, he can purchase 1 apple or 1 orange by paying exactly 1 gold coin (that's some expensive fruit, eh?). Chef can purchase fruits at most K times (as he has only K gold coins in his pocket) to make the difference the minimum possible.\nOur little Chef is busy in celebrating his birthday to the fullest, and therefore, he has handed this job to his best friend \u2014 you. Can you help him by finding the minimum possible difference he can achieve between the number of apples and orange he owns?\n\n-----Input-----\nThe first line of input contains a single integer T denoting the number of test cases. The first and only line of each test case contains 3 space separated integers \u2014 N, M and K \u2014 denoting the number of apples, number of oranges, and number of gold coins our little Chef has.\n\n-----Output-----\nFor each test case, output the minimum possible difference between the number of apples and oranges that Chef can achieve.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M, K \u2264 100\n\n-----Example-----Input\n3\n3 4 1\n5 2 1\n3 4 3\n\nOutput\n0\n2\n0\n\n-----Explanation-----\n- Test 1: Chef will buy 1 apple by paying 1 gold coin and will have equal number of apples and oranges. \n- Test 2: Chef will buy 1 orange by paying 1 gold coin and will have 5 apples and 3 oranges.\n\n Examples: \nInput: \n['3', '3 4 1', '5 2 1', '3 4 3']\nOutput: \n ['0', '2', '0']\n",
  "573": "Problem: \nAfter acquiring an extraordinary amount of knowledge through programming contests, Malvika decided to harness her expertise to train the next generation of Indian programmers. So, she decided to hold a programming camp. In the camp, she held a discussion session for n members (n-1 students, and herself). They are sitting in a line from left to right numbered through 1 to n.\n\nMalvika is sitting in the nth spot. She wants to teach m topics of competitive programming to the students. As the people taking part in the camp are all newbies, they know none of the topics being taught, i.e., initially, the first n - 1 people in the line know none of the topics, while the nth knows all of them.\n\nIt takes one hour for a person to learn a topic from his neighbour. Obviously, one person cannot both teach a topic as well as learn one during the same hour. That is, in any particular hour, a person can either teach a topic that he knows to one of his neighbors, or he can learn a topic from one of his neighbors, or he can sit idly. It is also obvious that if person x is learning from person y at a particular hour, then person y must be teaching person x at that hour.\n\nAlso, note that people can work parallely too, i.e., in the same hour when the 4th person is teaching the 3rd person, the 1st person can also teach the 2nd or learn from 2nd.\n\nFind out the minimum number of hours needed so that each person learns all the m topics.\n\n-----Input-----\n- The first line of input contains a single integer T denoting number of test cases.\n- The only line of each test case contains two space separated integers n, m as defined in the statement.\n\n-----Output-----\n- For each test case, output a single integer in a line corresponding to the answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T, n, m \u2264 100\n\n-----Example-----\nInput:\n2\n2 1\n3 2\n\nOutput:\n1\n4\n\n-----Explanation-----\nIn the first example, there are two people. Second person is Malvika and she has to teach only one topic to the first person. It will take only one hour to do so.\n\nIn the second example, there are three people. The 3rd person is Malvika and she has to teach only two topics to 1st and 2nd person. In the 1st hour, she teaches the 1st topic to the 2nd person. Now, in the 2nd hour, the 2nd person will teach the 1st topic to the 1st person. In the 3rd hour, Malvika will teach the 2nd topic to the 2nd person. Now the 2nd person will teach that topic to the 1st in the 4th hour. So, it takes a total of 4 hours for all the people to know all the topics.\n\n Examples: \nInput: \n['2', '2 1', '3 2']\nOutput: \n ['1', '4']\n",
  "574": "Problem: \nFind out the maximum sub-array of non negative numbers from an array. \n\nThe sub-array should be continuous. That is, a sub-array created by choosing the second and fourth element and skipping the third element is invalid.\n\nMaximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).\n\nNOTE 1 :If there is a tie, then compare with segment's length and return segment which has maximum length \n\nNOTE 2: If there is still a tie, then return the segment with minimum starting index.\n\n-----Input-----\n\nThe first line contains the number of test cases. Each test cases contains an integer N. next line consists of N integers, the elements of the array.\n\n-----Output-----\n\nPrint out the maximum sub-array as stated above.\n\n-----Constraints-----\n-  1  \u2264  T  \u2264  100 \n-  1  \u2264  N  \u2264  105 \n-  1  \u2264  Ai  \u2264  105 \n\n-----Example-----\nInput:\n\n1\n6\n1 2 5 -7 2 3\n\nOutput:\n\n1 2 5\n\n Examples: \nInput: \n['1', '6', '1 2 5 -7 2 3']\nOutput: \n ['1 2 5']\n",
  "575": "Problem: \nChef found a strange string yesterday - a string of signs s, where each sign is either a '<', '=' or a '>'. Let N be the length of this string. Chef wants to insert N + 1 positive integers into this sequence and make it valid. A valid sequence is a sequence where every sign is preceded and followed by an integer, and the signs are correct. That is, if a sign '<' is preceded by the integer a and followed by an integer b, then a should be less than b. Likewise for the other two signs as well. \nChef can take some positive integers in the range [1, P] and use a number in the range as many times as he wants.\nHelp Chef find the minimum possible P with which he can create a valid sequence.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains the string of signs s, where each sign is either '<', '=' or a '>'. \n\n-----Output-----\nFor each test case, output a single line containing an integer corresponding to the minimum possible P. \n\n-----Constraints-----\n- 1 \u2264 T, |s| \u2264 105\n- 1 \u2264 Sum of |s| over all test cases in a single test file \u2264 106\n\n-----Subtasks-----\nSubtask #1 (30 points)\n- 1 \u2264 T, |s| \u2264 103\n- 1 \u2264 Sum of |s| over all test cases in a single test file \u2264 104\n\nSubtask #2 (70 points)\n- Original constraints\n\n-----Example-----\nInput:\n4\n<<<\n<><\n<=>\n<=<\n\nOutput:\n4\n2\n2\n3\n\n-----Explanation-----\nHere are some possible valid sequences which can be formed with the minimum P for each of the test cases:\n1 < 2 < 3 < 4\n1 < 2 > 1 < 2\n1 < 2 = 2 > 1\n1 < 2 = 2 < 3\n\n Examples: \nInput: \n['4', '<<<', '<><', '<=>', '<=<']\nOutput: \n ['4', '2', '2', '3']\n",
  "576": "Problem: \nYou came across this story while reading a book. Long a ago when the modern entertainment systems did not exist people used to go to watch plays in theaters, where people would perform live in front of an audience. There was a beautiful actress who had a disability she could not pronounce the character $'r'$. To win her favours which many have been denied in past, you decide to write a whole play without the character $'r'$. Now you have to get the script reviewed by the editor before presenting it to her.\nThe editor was flattered by the script and agreed to you to proceed. The editor will edit the script in this way to suit her style. For each word replace it with a sub-sequence of itself such that it contains the character 'a'. \nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements Wikipedia \nNow given a script with $N$ words, for each word in the script you wish to know the number of subsequences with which it can be replaced. \n\n-----Input:-----\n- First-line will contain $N$, the number of words in the script. Then next $N$ line with one test case each. \n- Each test case contains a single word $W_i$\n\n-----Output:-----\nFor each test case, output in a single line number of subsequences with which it can be replaced. \n\n-----Constraints-----\n- $1 \\leq N \\leq 1000$\n- $1 \\leq$ length of $W_i$  $\\leq 20$\n- $W_i$  on contains lowercase english alphabets and does not have the character 'r'\n\n-----Sample Input 1:-----\n2\nabc\naba\n\n-----Sample Output 1:-----\n4\n6\n\n-----EXPLANATION:-----\nThis subsequences with which $abc$ can be replaed : ${a,ab,ac,abc}$. \nThis subsequences with which $aba$ can be replaed : ${a,ab,aba,a,ba,a}$. \n\n-----Sample Input 2:-----\n3\nabcde\nabcdea\nxyz\n\n-----Sample Output 2:-----\n16\n48\n0\n\n Examples: \nInput: \n['2', 'abc', 'aba']\nOutput: \n ['4', '6']\n",
  "577": "Problem: \nNot everyone probably knows that Chef has younder brother Jeff. Currently Jeff learns to read.\nHe knows some subset of the letter of Latin alphabet. In order to help Jeff to study, Chef gave him a book with the text consisting of N words. Jeff can read a word iff it consists only of the letters he knows.\nNow Chef is curious about which words his brother will be able to read, and which are not. Please help him!\n\n-----Input-----\nThe first line of the input contains a lowercase Latin letter string S, consisting of the letters Jeff can read. Every letter will appear in S no more than once.\nThe second line of the input contains an integer N denoting the number of words in the book.\nEach of the following N lines contains a single lowecase Latin letter string Wi, denoting the ith word in the book.\n\n-----Output-----\nFor each of the words, output \"Yes\" (without quotes) in case Jeff can read it, and \"No\" (without quotes) otherwise.\n\n-----Constraints-----\n- 1 \u2264 |S| \u2264 26\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 |Wi| \u2264 12\n- Each letter will appear in S no more than once.\n- S, Wi consist only of lowercase Latin letters.\n\n-----Subtasks-----\n- Subtask #1 (31 point): |S| = 1, i.e. Jeff knows only one letter.\n- Subtask #2 (69 point)\t: no additional constraints\n\n-----Example-----\nInput:act\n2\ncat\ndog\n\nOutput:Yes\nNo\n\n-----Explanation-----\nThe first word can be read.\nThe second word contains the letters d, o and g that aren't known by Jeff.\n\n Examples: \nInput: \n['act', '2', 'cat', 'dog']\nOutput: \n ['Yes', 'No']\n",
  "578": "Problem: \nChef has a calculator which has two screens and two buttons. Initially, each screen shows the number zero. Pressing the first button increments the number on the first screen by 1, and each click of the first button consumes 1 unit of energy.\nPressing the second button increases the number on the second screen by the number which is currently appearing on the first screen. Each click of the second button consumes B units of energy.\nInitially the calculator has N units of energy.\nNow chef wonders what the maximum possible number is, that he gets on the second screen of the calculator, with the limited energy.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nEach test case is described using a single line containing two integers, N and B.\n\n-----Output-----\nFor each test case, output a single line containing the answer to this test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10,000\n- 1 \u2264 N, B \u2264 1,000,000,000\n\n-----Subtasks-----\n- Subtask 1 (20 points): 1 \u2264 N, B \u2264 1,000\n- Subtask 2 (80 points): Original constraints\n\n-----Example-----\nInput:\n3\n10 2\n8 5\n6 1\n\nOutput:\n12\n3\n9\n\n-----Explanation-----\nExample case 1. There are 10 units of energy available. Pressing second button takes 2 units of energy. Chef can achieve 12 on the second screen as follows.\n\n- Press first button to get scores (1, 0). 9 units of energey is left.\n- Press first button to get scores (2, 0). 8 units of energy remaining.\n- Press first button to get scores (3, 0). 7 units of energy remaining.\n- Press first button to get scores (4, 0). 6 units of energy remaining.\n- Press second button to get scores (4, 4). 4 units of energy remaining.\n- Press second button to get scores (4, 8). 2 units of energy remaining.\n- Press second button to get scores (4, 12). 0 units of energy remaining.\n\n Examples: \nInput: \n['3', '10 2', '8 5', '6 1']\nOutput: \n ['12', '3', '9']\n",
  "581": "Problem: \nHumpy, the little elephant, has his birthday coming up. He invited all his cousins but doesn\u2019t know how many of them are really coming as some of them are having exams coming up. He will only get to know how many of them are coming on the day of his birthday.\n\nHe ordered sugarcane for his party, of length L.\n\nHumpy\u2019s mom decided that she will be dividing the sugarcane among Humty and his friends in a way such that they get the sugarcane in ratio of their ages.\n\nYour task is to determine whether it is possible to serve sugarcane to everyone as integral multiples of their ages.\n\n-----INPUT-----\nFirst line of input contains an integer N, denoting the number of test cases.\n\nThen N test cases follow.\n\nThe first line of each test case contains three integers K, L and E. K denoting the number of friends coming; L denoting the length of the sugarcane and E denoting the age of the little elephant. Next line has  K  space separated integers denoting the age of friends who came to the party.\n\n-----OUTPUT-----\n\nFor each test case, output \u201cYES\u201d (without quotes) if everyone gets their part as integral multiples of their ages; otherwise output \u201cNO\u201d(without quotes).\n\n-----CONSTRAINTS-----\n\n- 1 <= T<=30\n- 1 <= K<=1000\n- 1 <= L<=1000000\n- 1 <= E<=100000\n- 1 <= Age of Cousins<=100000\n\n-----Example-----\nInput:\n2\n4 10 2\n2 2 3 1\n4 12 3\n6 5 7 3\n\nOutput:\nYES \nNO\n\n Examples: \nInput: \n['2', '4 10 2', '2 2 3 1', '4 12 3', '6 5 7 3']\nOutput: \n ['YES', 'NO']\n",
  "583": "Problem: \nLet's call a sequence good if the sum of all its elements is $0$.\nYou have a sequence of integers $A_1, A_2, \\ldots, A_N$. You may perform any number of operations on this sequence (including zero). In one operation, you should choose a valid index $i$ and decrease $A_i$ by $i$. Can you make the sequence good using these operations?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if it is possible to make the given sequence good or \"NO\" if it is impossible.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10$\n- $|A_i| \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (10 points): $N = 1$\nSubtask #2 (30 points): $N \\le 2$\nSubtask #3 (60 points): original constraints\n\n-----Example Input-----\n2\n1\n-1\n2\n1 2\n\n-----Example Output-----\nNO\nYES\n\n-----Explanation-----\nExample case 2: We can perform two operations \u2015 subtract $1$ from $A_1$ and $2$ from $A_2$.\n\n Examples: \nInput: \n['2', '1', '-1', '2', '1 2']\nOutput: \n ['NO', 'YES']\n",
  "584": "Problem: \nGiven a binary string $S$ consisting of only 1\u2019s and 0\u2019s where 1 represents a Square and 0 represents a Circle. The diameter of the circle and the side of the square must be any integer (obviously > 0) . You will have to perfectly inscribe (as shown in the example below) the respective geometric figure at $S$$i+1$ inside of $S$$i$ where $i$ $\\epsilon$ $[0,N-2]$, if it is possible. Note that, it will not be possible to inscribe if the dimension of the geometric figure you are perfectly inscribing is not an integer and you will discard the rest of the string. Find the maximum number of circles we can inscribe in a square according to the given string.  \nFor a given binary string there can be only one geometric figure and this figure is concentric.  \nFor example : the string 1100 can be represented as the figure below, the first two squares have the same side length and the next two circles have the same diameter.  \n\nAnother example : the string 0001 can be represented as the one given below\nAgain here, we have 3 circles of the same diameter and one square inscribed in them.  \n\n-----Input:-----\nThe first line contains $N$, the number of strings\n\nThen each of the next $N$ lines contains a binary string $S$.  \n\n-----Output:-----\nThe $N$ lines of output should have $N$ integers in separate lines, the maximum number of circles we can inscribe in a square according to the given string $S$ .  \n\n-----Constraints-----\n- 1 $\\leq$ $N$ $\\leq$ 103\n- 1 $\\leq$ length of string $S$ $\\leq$ 104\n\n-----Sample Input:-----\n3\n\n1110\n\n0010\n\n1001000  \n\n-----Sample Output:-----\n1\n\n0\n\n2  \n\n-----Explanation:-----\nIn  the first case, we can inscribe the string 1110 as :  three squares of side length 4 units (on top of each other) and then  we can inscribe one circle of diameter 4 units.\nThe answer is 1 since, there is 1 circle inscribed in a square.\n\nIn the second case 0010, Let the first two circles be of some diameter 10, we can see that we cannot inscribe another square of any integer dimension inside them.\n\nSo, the answer is 0.\n\nIn the third case 1001000, we can take the first square of size 10, then inscribe two circles of diameter 5, then we cannot inscribe another square in this since, it will not be of any possible integer dimension and we discard the rest of the string.\n\n Examples: \nInput: \n['3', '1110', '0010', '1001000']\nOutput: \n ['1', '0', '2']\n",
  "585": "Problem: \nYou are an evil sorcerer at a round table with $N$ sorcerers (including yourself). You can cast $M$ spells which have distinct powers $p_1, p_2, \\ldots, p_M$.\nYou may perform the following operation any number of times (possibly zero):\n- Assign a living sorcerer to each positive integer cyclically to your left starting from yourself \u2015 the closest living sorcerer to your left is assigned to $1$, the next living sorcerer to the left is assigned to $2$ and so on. Note that each living sorcerer (including yourself) is assigned to an infinite number of integers.\n- Choose a spell $j$ (possibly a spell you have chosen before) and kill the living sorcerer assigned to $p_j$. You may not cast a spell to kill yourself. \n\nWhat is the maximum number of sorcerers you can kill using zero or more operations?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- The second line contains $M$ space-separated integers $p_1, p_2, \\ldots, p_M$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum number of sorcerers you can kill.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^9$\n- $1 \\le M \\le 3 \\cdot 10^5$\n- $1 \\le p_i \\le 10^9$ for each valid $i$\n- $p_1, p_2, \\ldots, p_N$ are pairwise distinct\n- the sum of $M$ over all test cases does not exceed $3 \\cdot 10^5$\n\n-----Example Input-----\n5\n4 1\n5\n6 2\n2 4\n1 4\n7 16 8 29\n1000000000 1\n998244353\n1 1\n20201220\n\n-----Example Output-----\n3\n4\n0\n1755647\n0\n\n-----Explanation-----\nExample case 1: The initial state is shown in the figure from the statement. We can first use spell $1$ and kill the $5$-th sorcerer to our left, i.e. sorcerer $2$. Now there are $3$ living sorcerers and the state is as shown in the following figure:\n\nWe can use spell $1$ again and kill the current $5$-th living sorcerer to our left, i.e. sorcerer $4$. Now there are $2$ living sorcerers and the state is:\n\nFinally, we can use spell $1$ again and kill the only other living sorcerer, i.e. sorcerer $3$. Now, none of the other sorcerers are alive. As we cannot cast a spell to kill ourselves, we cannot improve the answer any further.\nExample case 2: We can perform $4$ operations using the spell $p_1 = 2$ each time. We can also instead use $p_2 = 4$ in the first two operations and $p_1 = 2$ in the last two operations. Note that there may be multiple valid sequences of operations that lead to the best answer.\nExample case 3: We cannot perform any operations using any of the given spells, so we are unable to kill any sorcerers.\nExample case 4: We can perform $1,755,647$ operations, each of them using the spell $p_1 = 998,244,353$.\n\n Examples: \nInput: \n['5', '4 1', '5', '6 2', '2 4', '1 4', '7 16 8 29', '1000000000 1', '998244353', '1 1', '20201220']\nOutput: \n ['3', '4', '0', '1755647', '0']\n",
  "586": "Problem: \nTeacher Sungjae wanted to hold a programming competition for his students where every participant need to be included into  team. The participants submitted their team names before the deadline. After the competition ran for half an hour, (It is assured that each registered team will submit absolutely once within half an hour) Sungjae mistakenly pressed a button that changed the order of the registered team names. Now in the submission list, order of the characters in the team's name doesn't matter. That means $abc$, $acb$, $bac$, $bca$, $cab$, $cba$ refers to the same team. The competition ran for two hours and then ended. Sungjae now counting each of the team's score and wants to print the registered team names and score. The scoreboard should be ordered based on scores in decreasing order and if two teams have same score, Sangjae would follow lexicographical order.\n$N$.$B$. frequency of each character's in a registered team's name will not match with another team. \nThat means two teams named $xoxo$ and $oxox$ is not possible. Because both of them have the same frequency of each of the characters (two 'o' and two 'x'). Similarly $abb$ and $bab$ is not possible (because both of them have one 'a' and two 'b').\nIt is ensured that only possible test cases will be given.\n\n-----Input:-----Input:\n- \nFirst line will contain $T$, number of testcases. Then the testcases follow. \n- \nThe first line of each test case contains two integers , $N$ and $R$ - total number of submissions and the number of submissions within first half an hour. \n- \nThen $R$  lines follow: the i'th line contains a string $ti$, registered names of the teams and an integer $pi$, points they got on that submission.\n- \nThen $N-R$  lines follow: the i-th line contains a string $ti$- the i-th team's name (in any order) in lowercase letter only and $pi$ -points they got on that submission.\n\n-----Output:-----Output:\nFor each testcase,print the scoreboard.\nThat means print the teams name and their point according to their score in decreasing order and if some of them have same score,print the teams name in lexicographical order\n\n-----Constraints-----Constraints\n- $1 \\leq T \\leq 10$\n- $1 \\leq R \\leq N \\leq 1000$\n- $1 \\leq ti \\leq 1000$\n- $1 \\leq pi \\leq 10^6$\nSum of points ($pi$) of a team will not cross $10^9$.\n\n-----Sample Input:-----Sample Input:\n1\n10 5\namigoes  1\nbannermen 1\nmonarchy 4\noutliers 5\niniciador 10\naegimos 2\niiiacdnor 1\neilorstu 1\ngimosae 3\nmnachroy 7\n\n-----Sample Output:-----Sample Output:\niniciador 11\nmonarchy 11\namigoes 6\noutliers 6\nbannermen 1\n\n-----Explanation:-----Explanation:\n\n$It$ $is$ $assured$ $that$ $each$ $team$ $will$ $submit$ $once$ $within$ $first$ $half$ $an$ $hour$.That means -                                          \n\nthat kind of submissions isn't possible within first half an hour.\nDataset can be huge. Use faster I/O method.\n\n Examples: \nInput: \n['1', '10 5', 'amigoes  1', 'bannermen 1', 'monarchy 4', 'outliers 5', 'iniciador 10', 'aegimos 2', 'iiiacdnor 1', 'eilorstu 1', 'gimosae 3', 'mnachroy 7']\nOutput: \n ['iniciador 11', 'monarchy 11', 'amigoes 6', 'outliers 6', 'bannermen 1']\n",
  "587": "Problem: \nOn a planet called RUIZ LAND, which is ruled by the queen, Erika Ruiz. Each person on that planet has a strength value (strength value >0).\nThat planet has a special rule made by the queen that a boy and a girl will form a couple if their Hate value is a prime number where $Hate$ is given by the formula:-\nHate = (boy's strength value)  XOR (girl's strength value )\nYou are given $N$ numbers denoting the strength value of $N$ girls, and each of the $N$ girls has to form a couple with a boy such that sum of $Hate$ value of all the $N$ couples will be minimum.\nYou need to print the strength value of each boy, Where the boy at index $i$ will form a couple with the girl at index $i$, where $1 \\leq i \\leq N$.\nAssume that you can always find at least one boy having that strength for each girl.\n\n-----Input:-----\n- First line will contain $N$, the number of Girls. \n- Next line contains $N$ numbers separated by space denoting strength value for each girl.\n\n-----Output:-----\nPrint the required $N$ numbers denoting strength of boys.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100000$\n- $1 \\leq A_i \\leq 10^9$ , (where $1 \\leq i \\leq N$) and $A_i$ denotes strength of i'th girl.\n\n-----Sample Input:-----\n2\n10 16\n\n-----Sample Output:-----\n8 18\n\n Examples: \nInput: \n['2', '10 16']\nOutput: \n ['8 18']\n",
  "588": "Problem: \nVasya has ordered a pizza delivery. The pizza can be considered a perfect circle. There were $n$ premade cuts in the pizza when it was delivered. Each cut is a straight segment connecting the center of the pizza with its boundary.\nLet $O$ be the center of the pizza, $P_i$ be the endpoint of the $i$-th cut lying on the boundary, and $R$ be the point of the boundary straight to the right of $O$. Then the counterclockwise-measured angle $\\angle ROP_i$ is equal to $a_i$ degrees, where $a_i$ is an integer between $0$ and $359$. Note that angles between $0$ and $180$ angles correspond to $P_i$ in the top half of the pizza, while angles between $180$ and $360$ angles correspond to the bottom half.\nVasya may cut his pizza a few more times, and the new cuts still have to be straight segments starting at the center. He wants to make the pizza separated into several equal slices, with each slice being a circular sector with no cuts inside of it. How many new cuts Vasya will have to make?\n\n-----Input:-----\nThe first line of input contains $T$ , i.e number of test cases per file.\nThe first line of each test case contains a single integer $n-$  the numbers of premade cuts ($2 \\leq n \\leq 360$).\nThe second lines contains $n$ integers $a_1, \\ldots, a_n-$ angles of the cuts $1, \\ldots, n$ respectively ($0 \\leq a_1 < \\ldots, a_{n - 1} < 360$).\n\n-----Output:-----\nPrint a single integer$-$ the smallest number of additional cuts Vasya has to make so that the pizza is divided into several equal slices.\n\n-----Constraints-----\n- $1  \\leq T  \\leq 36$\n- $2 \\leq n \\leq 360$\n- $0 \\leq a_1 < \\ldots, a_{n - 1} < 360$\n\n-----Sample Input:-----\n3\n4 \n0 90 180 270\n2\n90 210\n2\n0 1\n\n-----Sample Output:-----\n0\n1\n358\n\n-----EXPLANATION:-----\nIn the first sample the pizza is already cut into four equal slices.\nIn the second sample the pizza will be cut into three equal slices after making one extra cut at $330$ degrees.\nIn the third sample Vasya will have to cut his pizza into $360$ pieces of $1$ degree angle each.\n\n Examples: \nInput: \n['3', '4', '0 90 180 270', '2', '90 210', '2', '0 1']\nOutput: \n ['0', '1', '358']\n",
  "589": "Problem: \nDigory Kirke and Polly Plummer are two kids living next door to each other. The attics of the two houses are connected to each other through a passage. Digory's Uncle Andrew has been secretly doing strange things in the attic of his house, and he always ensures that the room is locked. Being curious, Digory suspects that there is another route into the attic through Polly's house, and being curious as kids always are, they wish to find out what it is that Uncle Andrew is secretly up to.\n\nSo they start from Polly's house, and walk along the passageway to Digory's. Unfortunately, along the way, they suddenly find that some of the floorboards are missing, and that taking a step forward would have them plummet to their deaths below.\n\nDejected, but determined, they return to Polly's house, and decide to practice long-jumping in the yard before they re-attempt the crossing of the passage. It takes them exactly one day to master long-jumping a certain length. Also, once they have mastered jumping a particular length L, they are able to jump any amount less than equal to L as well.\n\nThe next day they return to their mission, but somehow find that there is another place further up the passage, that requires them to jump even more than they had practiced for. So they go back and repeat the process.\n\nNote the following:\n\n-  At each point, they are able to sense only how much they need to jump at that point, and have no idea of the further reaches of the passage till they reach there. That is, they are able to only see how far ahead is the next floorboard. \n-  The amount they choose to practice for their jump is exactly the amount they need to get across that particular part of the passage. That is, if they can currently jump upto a length L0, and they require to jump a length L1(> L0) at that point, they will practice jumping length L1 that day. \n-  They start by being able to \"jump\" a length of 1. \n\nFind how many days it will take them to cross the passageway. In the input, the passageway is described as a string P of '#'s and '.'s. A '#' represents a floorboard, while a '.' represents the absence of a floorboard. The string, when read from left to right, describes the passage from Polly's house to Digory's, and not vice-versa.\n\n-----Input-----\n\nThe first line consists of a single integer T, the number of testcases.\nEach of the next T lines consist of the string P for that case.\n\n-----Output-----\n\nFor each case, output the number of days it takes them to cross the passage.\n\n-----Constraints-----\n-  1  \u2264 T  \u2264 1,000,000  (106)\n-  1  \u2264 |P|  \u2264 1,000,000 (106)\n-  The total length of P will be \u2264 5,000,000 (5 * 106)across all test-cases of a test-file \n-  P will consist of only the characters # and . \n-  The first and the last characters of P will be #. \n\n-----Example-----\nInput:\n4\n####\n##.#..#\n##..#.#\n##.#....#\n\nOutput:\n0\n2\n1\n2\n\n-----Explanation-----\n\nFor the first example, they do not need to learn any jump size. They are able to cross the entire passage by \"jumping\" lengths 1-1-1.\n\nFor the second example case, they get stuck at the first '.', and take one day learning to jump length 2. When they come back the next day, they get stuck at '..' and take one day to learn to jump length 3.\n\nFor the third example case, they get stuck first at '..', and they take one day to learn to jump length 3. On the second day, they are able to jump both length 3 as well as length 2 required to cross the passage.\n\nFor the last test case they need to stop and learn jumping two times. At first they need to jump a length 2 and then a length 5.\n\n-----Appendix-----\n\nIrrelevant to the problem description, if you're curious about what Uncle Andrew was up to, he was experimenting on Magic Rings that could facilitate travel between worlds. One such world, as some of you might have heard of, was Narnia.\n\n Examples: \nInput: \n['4', '####', '##.#..#', '##..#.#', '##.#....#']\nOutput: \n ['0', '2', '1', '2']\n",
  "590": "Problem: \nChef has an array A consisting of N integers (1-based indexing). He asks you to perform the following operation M times:\n\n\tfor i = 2 to N:\n\t\tAi = Ai + Ai-1\n\nYour task is to find the xth element of the array (i.e., Ax) after performing the above operation M times. As the answer could be large, please output it modulo 109 + 7.\n\n-----Input-----\n- The first line of input contains an integer T denoting the number of test cases.\n- The first line of each test case contains three space-separated integers \u2014 N, x, and M \u2014 denoting the size of the array, index of the element you need to find, and the amount of times you need to repeat operation before finding the element, respectively. The second line contains N space-separated integers A1, A2, \u2026, AN.\n\n-----Output-----\nFor each test case, output a single line containing one integer: Ax modulo 109 + 7. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 x \u2264 N \u2264 105\n- 1 \u2264 M \u2264 1018 \n- 1 \u2264 Ai  \u2264 1018\n\n-----Subtasks-----Subtask 1 (8 points):\n- 1 \u2264 x \u2264 min{2, N}Subtask 2 (24 points):\n- 1 \u2264 N * M \u2264 106Subtask 3 (68 points):  No additional constraints\n\n-----Example-----\nInput:\n2\n3 2 3\n1 2 3\n3 3 3 \n1 2 3\n\nOutput:\n5\n15\n\n-----Explanation-----\nValues in the array A:\n- Before the operations: [1, 2, 3]\n- After the first operation: [1, 3, 6]\n- After the second operation: [1, 4, 10]\n- After the third operation: [1, 5, 15]\n\nSince input file can be fairly large (about 8 MB), it's recommended to use fast I/O (for example, in C++, use scanf/printf instead of cin/cout).\n\n Examples: \nInput: \n['2', '3 2 3', '1 2 3', '3 3 3', '1 2 3']\nOutput: \n ['5', '15']\n",
  "591": "Problem: \nGanesh lives in Gopalmath. He is looking for Jojo. So he decides to collect Aadhar Card Information of all the citizens of India from UIDAI.\nSomeone told Ganesh that the sum of all the digits of Jojo\u2019s Aadhar number is divisible by 10 and it is greater than zero. After finding all Aadhar numbers which are divisible by 10, Jojo\u2019s Aadhar number is $N$th smallest Aadhar number. Hence, Ganesh wants to find Jojo\u2019s  Aadhar number which satisfies all of the above conditions. (In this chaotic world, Aadhar numbers can be any natural number.)\nHowever, Guruji refused Ganesh to carry out this task, because he is weak in Maths. Therefore, Ganesh assigns this task to Paritoshbhai who possesses excellent Mathematical skills. Since Paritoshbhai is busy in his jewellery business, help him in this task.\n\n-----Input:-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first and only line of each test case contains a single integer N.\n\n-----Output:-----\nFor each test case, print a single line containing Aadhar number of Jojo.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^{100,000}$\n\n-----Sample Input:-----\n1\n3\n\n-----Sample Output:-----\n37\n\n Examples: \nInput: \n['1', '3']\nOutput: \n ['37']\n",
  "592": "Problem: \nTeddy and Tracy like to play a game based on strings. The game is as follows. Initially, Tracy writes a long random string on a whiteboard. Then, each player starting with Teddy makes turn alternately. Each turn, the player must erase a contiguous substring that exists in the dictionary. The dictionary consists of N words.\nOf course, the player that can't erase any substring in his turn loses the game, and the other player is declared the winner.\nNote that after a substring R is erased, the remaining substring becomes separated, i.e. they cannot erase a word that occurs partially to the left of R and partially to the right of R.\n\nDetermine the winner of the game, assuming that both players play optimally.\n\n-----Input-----\nThe first line contains a single integer T, the number of test cases. T test cases follow. The first line of each testcase contains a string S, the string Tracy writes on the whiteboard. The next line contains a single integer N. N lines follow. The i-th line contains a single string wi, the i-th word in the dictionary.\n\n-----Output-----\nFor each test case, output a single line containing the name of the winner of the game.\n\n-----Example-----\nInput:\n3\ncodechef\n2\ncode\nchef\nfoo\n1\nbar\nmississippi\n4\nssissi\nmippi\nmi\nppi\n\nOutput:\nTracy\nTracy\nTeddy\n\n-----Constraints-----\n- 1 <= T <= 5\n- 1 <= N <= 30\n- 1 <= |S| <= 30\n- 1 <= |wi| <= 30\n- S and wi contain only characters 'a'-'z'\n\n Examples: \nInput: \n['3', 'codechef', '2', 'code', 'chef', 'foo', '1', 'bar', 'mississippi', '4', 'ssissi', 'mippi', 'mi', 'ppi', '', '']\nOutput: \n ['Tracy', 'Tracy', 'Teddy']\n",
  "593": "Problem: \nMathison recently inherited an ancient papyrus that contained some text. Unfortunately, the text was not a\npangram. Now, Mathison has a particular liking for holoalphabetic strings and the text bothers him. The good news is that Mathison can buy letters from the local store in order to turn his text into a pangram.\n\nHowever, each letter has a price and Mathison is not very rich. Can you help Mathison find the cheapest way to obtain a pangram?\n\n-----Input-----\nThe first line of the input file will contain one integer, T, representing the number of tests.\nEach test will be formed from two lines. The first one contains 26 space-separated integers, representing the prices of all letters.\nThe second will contain Mathison's initial text (a string of N lowercase letters).\n\n-----Output-----\nThe output file will contain T lines, one for each test. Each line will contain the answer for the corresponding test.\n\n-----Constraints and notes-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 50,000\n- All prices are natural numbers between 1 and 1,000,000 (i.e. 106).\n- A pangram is a string that contains every letter of the Latin alphabet at least once.\n- All purchased letters are added to the end of the string.\n\n-----Subtaks-----\nSubtask #1 (30 points):\n\n- N = 1\n\nSubtask #2 (70 points):\n\n- Original constraints\n\n-----Example-----\nInput:\n2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nabcdefghijklmopqrstuvwz\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nthequickbrownfoxjumpsoverthelazydog\n\nOutput:\n63\n0\n\n-----Explanation-----\nFirst test\nThere are three letters missing from the original string: n (price 14), x (price 24), and y (price 25).\nTherefore the answer is 14 + 24 + 25 = 63.\n\nSecond test\nNo letter is missing so there is no point in buying something. The answer is 0.\n\n Examples: \nInput: \n['2', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26', 'abcdefghijklmopqrstuvwz', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26', 'thequickbrownfoxjumpsoverthelazydog']\nOutput: \n ['63', '0']\n",
  "594": "Problem: \nYou are given a sequence of integers $A_1,A_2,\u2026,A_N$ and a magical non-zero integer $x$\nYou have to select a subsegment of sequence A (possibly empty), and replace the elements in that subsegment after dividing them by x.\nFormally, replace any one subsegment $A_l, A_{l+1}, ..., A_r$ with $A_l/x, A_{l+1}/x, ..., A_r/x$ where $l \\leq r$\nWhat is the minimum possible sum you can obtain?\nNote: The given operation can only be performed once\n\n-----Input -----\n- The first line of the input contains two positive integer n denoting the size of array, and x\ndenoting the magical integer\n- Next line contains $N$ space separated integers\n\n-----Output-----\nSingle line containing one real number, denoting the minimum possible sum you can obtain. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-2}$\n\n-----Constraints-----\n- $1 \\leq n \\leq 10^3$\n- $1 \\leq |x| \\leq 10^3$\n- $ |A_i| \\leq 10^3$\n\n-----Sample Input-----\n3 2\n1 -2 3\n\n-----Sample Output-----\n0.5\n\n-----Explanation-----\nArray 1 -2 3, selecting subsegment {3}, you get 1 -2 1.5, which gives $sum=0.5$\n\n Examples: \nInput: \n['3 2', '1 -2 3']\nOutput: \n ['0.5']\n",
  "597": "Problem: \nChef Ada is building a new restaurant in the following way:\n- First, $N$ points $X_1, X_2, \\ldots, X_N$ are chosen on the $x$-axis.\n- Then, $N$ columns (numbered $1$ through $N$) are made. For simplicity, the columns are represented as vertical segments; for each valid $i$, the height of the $i$-th segment is $H_i$.\n- Ada assigns a column to each of the points $X_1, X_2, \\ldots, X_N$ in an arbitrary way (each column must be assigned to exactly one point).\n- Finally, Ada constructs the roof of the restaurant, represented by a polyline with $N$ vertices. Let's denote the column assigned to the $i$-th point by $P_i$. For each valid $i$, the $i$-th of these vertices is $(X_i, H_{P_i})$, i.e. the polyline joins the tops of the columns from left to right.\nAda wants the biggest restaurant. Help her choose the positions of the columns in such a way that the area below the roof is the biggest possible. Formally, she wants to maximise the area of the polygon whose perimeter is formed by the roof and the segments $(X_N, H_{P_N}) - (X_N, 0) - (X_1, 0) - (X_1, H_{P_1})$. Let $S$ be this maximum area; you should compute $2 \\cdot S$ (it is guaranteed that $2 \\cdot S$ is an integer).\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $X_i$ and $H_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer $2 \\cdot S$.\n\n-----Constraints-----\n- $1 \\le T \\le 3 \\cdot 10^5$\n- $2 \\le N \\le 10^5$\n- $0 \\le X_1 < X_2 < \\ldots < X_N \\le 2 \\cdot 10^9$\n- $1 \\le H_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n1\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n-----Example Output-----\n27\n\n-----Explanation-----\n\n Examples: \nInput: \n['1', '5', '1 1', '2 2', '3 3', '4 4', '5 5']\nOutput: \n ['27']\n",
  "598": "Problem: \nRoman has no idea, why this problem is called Stone. He also has no idea on how to solve the followong problem: given array of N integers A and a number K. During a turn the maximal value over all Ai is chosen, let's call it MAX. Then Ai = \nMAX - Ai is done for every 1 <= i <= N. Help Roman to find out how will the array look like after K turns.\n\n-----Input-----\nThe numbers N and K are given in the first line of an input. Then N integers are given in the second line which denote the array A. \n\n-----Output-----\nOutput N numbers on a single line. It should be the array A after K turns.\n\n-----Constraints-----\n\n- 1 <= N <= 105\n- 0 <= K <= 109\n- Ai does not exceed 2 * 109 by it's absolute value.\n\n-----Example-----\nInput:\n4 1\n5 -1 7 0\n\nOutput:\n2 8 0 7\n\n Examples: \nInput: \n['4 1', '5 -1 7 0']\nOutput: \n ['2 8 0 7']\n",
  "599": "Problem: \nChef just got a box of chocolates as his birthday gift. The box contains $N$ chocolates in a row (numbered $1$ through $N$), where $N$ is even. For each valid $i$, the $i$-th chocolate has a sweetness value $W_i$.\nChef wants to eat all the chocolates in the first half of the box and leave all chocolates in the second half uneaten. Since he does not like chocolates that are too sweet, he will be unhappy if at least one of the chocolates he eats has the maximum sweetness among all the chocolates in the box.\nA right cyclic shift by $k$ chocolates ($0 \\le k < N$) consists of moving the last $k$ chocolates in the row to the beginning in the same order and moving each of the remaining $N-k$ chocolates $k$ places to the right. Before eating the first half of the chocolates, Chef wants to perform some right cyclic shift in such a way that he will not be unhappy after eating them. Find the number of ways to do this, i.e. the number of valid integers $k$ such that if Chef performs the right cyclic shift by $k$ chocolates and then eats the first half of the chocolates in the box, he does not become unhappy.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $W_1, W_2, \\ldots, W_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of shifts for which Chef does not become unhappy.\n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 10^5$\n- $N$ is even\n- $1 \\le W_i \\le 10^5$ for each valid $i$\n\n-----Example Input-----\n2\n6\n1 1 2 1 1 1\n6\n1 1 2 1 1 2\n\n-----Example Output-----\n3\n0\n\n-----Explanation-----\nExample case 1: The three valid right shifts and the contents of the box for these shifts are:\n- shift by $k = 1$: $(1, 1, 1, 2, 1, 1)$\n- shift by $k = 2$: $(1, 1, 1, 1, 2, 1)$\n- shift by $k = 3$: $(1, 1, 1, 1, 1, 2)$\n\n Examples: \nInput: \n['2', '6', '1 1 2 1 1 1', '6', '1 1 2 1 1 2']\nOutput: \n ['3', '0']\n",
  "600": "Problem: \nThe Fibonacci sequence $F_0, F_1, \\ldots$ is a special infinite sequence of non-negative integers, where $F_0 = 0$, $F_1 = 1$ and for each integer $n \\ge 2$, $F_n = F_{n-1} + F_{n-2}$.\nConsider the sequence $D$ of the last decimal digits of the first $N$ Fibonacci numbers, i.e. $D = (F_0 \\% 10, F_1 \\% 10, \\ldots, F_{N-1} \\% 10)$. Now, you should perform the following process:\n- Let $D = (D_1, D_2, \\ldots, D_l)$.\n- If $l = 1$, the process ends.\n- Create a new sequence $E = (D_2, D_4, \\ldots, D_{2 \\lfloor l/2 \\rfloor})$. In other words, $E$ is the sequence created by removing all odd-indexed elements from $D$.\n- Change $D$ to $E$.\nWhen this process terminates, the sequence $D$ contains only one number. You have to find this number.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the last remaining number.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le N \\le 10^{18}$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $1 \\le T \\le 10^5$\n- $1 \\le N \\le 10^7$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n9\n\n-----Example Output-----\n3\n\n-----Explanation-----\nExample case 1: The first $N$ Fibonacci numbers are $(0, 1, 1, 2, 3, 5, 8, 13, 21)$. The sequence $D$ is $(0, 1, 1, 2, 3, 5, 8, 3, 1) \\rightarrow (1, 2, 5, 3) \\rightarrow (2, 3) \\rightarrow (3)$.\n\n Examples: \nInput: \n['1', '9']\nOutput: \n ['3']\n",
  "601": "Problem: \nThe bustling town of Siruseri has just one sports stadium. There are a number of schools, colleges, sports associations, etc. that use this stadium as the venue for their sports events.\nAnyone interested in using the stadium has to apply to the Manager of the stadium indicating both the starting date (a positive integer $S$) and the length of the sporting event in days (a positive integer $D$) they plan to organise. Since these requests could overlap it may not be possible to satisfy everyone. Also, there should be at least one gap day between any two approved events, so that the stadium can be cleaned.\nIt is the job of the Manager to decide who gets to use the stadium and who does not. The Manager, being a genial man, would like to keep as many organisations happy as possible and hence would like to allocate the stadium so that maximum number of events are held.\nSuppose, for example, the Manager receives the following 4 requests:\n$ $\nEvent No.   Starting Date        Length \n\n1                   2                    5\n2                   9                    7\n3                  15                    6\n4                   9                    3\n\n$ $ \nHe would allot the stadium to events $1$, $4$ and $3$. Event $1$ begins on day $2$ and ends on day $6$, event $4$ begins on day $9$ and ends on day $11$ and event $3$ begins on day $15$ and ends on day $20$. You can verify that it is not possible to schedule all the $4$ events (since events $2$ and $3$ overlap and only one of them can get to use the stadium).\nYour task is to help the manager find the best possible allotment (i.e., the maximum number of events that can use the stadium).\n\n-----Input:-----\nThe first line of the input will contain a single integer $N$ indicating the number of events for which the Manager has received a request. Lines $2,3,...,N+1$ describe the requirements of the $N$ events. Line $i+1$ contains two integer $S_i$ and $D_i$ indicating the starting date and the duration of event $i$.\n\n-----Output:-----\nYour output must consist of a single line containing a single integer $M$, indicating the maximum possible number of events that can use the stadium.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 100000$.\n- $1 \\leq S_i \\leq 1000000$.\n- $1 \\leq D_i \\leq 1000$.\n- $50 \\%$ of test cases will also satisfy $1 \\leq N \\leq 10000$.\n\n-----Sample input:-----\n4\n2 5\n9 7\n15 6\n9 3\n\n-----Sample output:-----\n3\n\n Examples: \nInput: \n['4', '2 5', '9 7', '15 6', '9 3', 'Sample output:', '3']\nOutput: \n []\n",
  "602": "Problem: \nChef Loves to listen to remix songs, but currently he had already finished the entire playlist of remix songs.\nAs Chef is smart, so he thought let's make my own remix songs of the original songs.\nChef is not having much knowledge of making remix songs, so he came up with the simple technique in which he will pick the word which contains the smallest number of characters from the lyrics of the song, and then he will append that word to the start and end of the lyrics, also Chef will insert this word between every two words of the lyrics.\nNote: While inserting a new word Chef will also insert extra white-spaces, so that every word in the final remixed lyrics is separated by space.\nIt is Recommended to use fast Input/Ouput techniques.\n\n-----Input:-----\n- The input contains the text $S$, which denotes the lyrics of the song.\n\n-----Output:-----\n- Print the Remixed, lyrics as done by Chef.\n\n-----Constraints:-----\n- $1 \\leq Length of text $S$ \\leq 10^7$\n\n-----Sample Input:-----\nMai Hu Jiyaan\n\n-----Sample Output:-----\nHu Mai Hu Hu Hu Jiyaan Hu\n\n Examples: \nInput: \n['Mai Hu Jiyaan']\nOutput: \n ['Hu Mai Hu Hu Hu Jiyaan Hu']\n",
  "603": "Problem: \n----- Statement -----\n\nYou need to find a string which has exactly K positions in it such that the character at that position comes alphabetically later than the character immediately after it. If there are many such strings, print the one which has the shortest length. If there is still a tie, print the string which comes the lexicographically earliest (would occur earlier in a dictionary).\n\n-----Input-----\nThe first line contains the number of test cases T. Each test case contains an integer K (\u2264 100).\n\n-----Output-----\nOutput T lines, one for each test case, containing the required string.  Use only lower-case letters a-z.\n\n-----Sample Input -----\n2\n1\n2\n\n-----Sample Output-----\nba\ncba\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['ba', 'cba']\n",
  "604": "Problem: \nYou are given a grid with $R$ rows (numbered $1$ through $R$) and $C$ columns (numbered $1$ through $C$). A cell in row $r$ and column $c$ is denoted by $(r, c)$. Two cells in the grid are adjacent if they have a common side. For each valid $i$ and $j$, there is a value $a_{i, j}$ written in cell $a_{i, j}$.\nA cell in the grid is stable if the number of cells in the grid which are adjacent to this cell is strictly greater than the value written in this cell. The whole grid is stable if all cells in the grid are stable.\nCan you determine whether the grid is stable?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $R$ and $C$.\n- $R$ lines follow. For each $i$ ($1 \\le i \\le R$), the $i$-th of these lines contains $C$ space-separated integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, C}$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Stable\" if the grid is stable or \"Unstable\" if it is unstable (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 3,000$\n- $3 \\le R, C \\le 10$\n- $0 \\le a_{i, j} \\le 4$ for each valid $i, j$\n\n-----Example Input-----\n2\n3 3\n1 2 1\n2 3 2\n1 2 1\n3 4\n0 0 0 0\n0 0 0 0\n0 0 4 0\n\n-----Example Output-----\nStable\nUnstable\n\n-----Explanation-----\nExample case 1: Each cell of the grid is stable, so the grid is stable.\nExample case 2: The cell in row $3$ and column $3$ is unstable since the number of cells adjacent to this cell is $3$.\n\n Examples: \nInput: \n['2', '3 3', '1 2 1', '2 3 2', '1 2 1', '3 4', '0 0 0 0', '0 0 0 0', '0 0 4 0']\nOutput: \n ['Stable', 'Unstable']\n",
  "605": "Problem: \nThere is a rectangular grid of cells consisting of n rows and m columns.\nYou will place a robot on one of the grid cells and provide it with a command string s, consisting of characters \u2018L\u2019, \u2018R\u2019, \u2018U\u2019, \u2018D\u2019.\nAfter being placed, the robot will follow the instructions of the command string, where 'L' corresponds moving to the left, 'R' towards the right, 'U' for moving up, and 'D' means down.\n\nYou have already selected the command string s, and are wondering if it is possible to place the robot in one of the grid cells initially and have it always stay entirely within the grid upon execution of the command string s.\nOutput \u201csafe\u201d if there is a starting cell for which the robot doesn\u2019t fall off the grid on following command s, otherwise, output \"unsafe\".\n\n-----Input-----\n\nThe first line of input will contain an integer T, the number of test cases.\n\nEach test case will be on two lines. \n\nThe first line will have two space separated integers n,m. \n\nThe second line will have the command string s.\n\n-----Output-----\n\nFor each test case, output \"safe\" (without quotes) or \"unsafe\" (without quotes) in a new line.\n\n-----Constraints-----\n-  1 \u2264 T \u2264 1,000\n-  1 \u2264 n,m \u2264 10\n-  1 \u2264 |s| \u2264 10\n\n-----Example-----\nInput:\n5\n1 1\nR\n2 3\nLLRU\n3 2\nLLRU\n4 3\nULURUDRDLD\n3 6\nRURUR\n\nOutput:\nunsafe\nsafe\nunsafe\nsafe\nsafe\n\n-----Explanation-----\n\nFor the first case, there is only one grid square, so we must place our robot there. When the robot follows the command, it'll fall off, so it is unsafe.\n\nFor the second case, we can place the robot on the bottom right grid square. Here is an image denoting the moves that the robot will make.\n\n Examples: \nInput: \n['5', '1 1', 'R', '2 3', 'LLRU', '3 2', 'LLRU', '4 3', 'ULURUDRDLD', '3 6', 'RURUR']\nOutput: \n ['unsafe', 'safe', 'unsafe', 'safe', 'safe']\n",
  "607": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. You have to split the array into maximum number of non-empty subarrays such that the gcd of elements of each subarray is equal to 1.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the maximum number of subarrays formed, or $-1$ if the array cannot be split while satisfying the above condition.\n\n-----Constraints-----\n- $1 \\le T \\le 3$\n- $1 \\le N \\le 5 \\cdot 10^5$\n- $1 \\le A_i \\le 10^6$ for each valid $i$\n\n-----Sample Input:-----\n2\n3\n2 2 3\n4\n2 3 3 2\n\n-----Sample Output:-----\n1\n2\n\n Examples: \nInput: \n['2', '3', '2 2 3', '4', '2 3 3 2']\nOutput: \n ['1', '2']\n",
  "609": "Problem: \nChef published a blog post, and is now receiving many queries about it. On day $i$, he receives $Q_i$ queries. But Chef can answer at most $k$ queries in a single day. \nChef always answers the maximum number of questions that he can on any given day (note however that this cannot be more than $k$). The remaining questions (if any) will be carried over to the next day.\nFortunately, after $n$ days, the queries have stopped. Chef would like to know the first day during which he has some free time, i.e. the first day when he answered less than $k$ questions. \n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow.\n- The first line of each testcase contains two space separated integers $n$ and $k$.\n- The second line of each testcase contains $n$ space separated integers, namely $Q_1, Q_2, ... Q_n$.\n\n-----Output:-----\nFor each testcase, output in a single line the first day during which chef answers less than $k$ questions. \n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq $ sum of $n$ over all testcases $ \\leq 10^5$\n- $1 \\leq k \\leq 10^8$\n- $0 \\leq Q_i \\leq 10^8$\n\n-----Subtasks-----\n- Subtask 1 - 20% points - Sum of $Q_i$ over all testcases and days $\\leq 3 . 10^6$\n- Subtask 2 - 80% points - Original constraints\n\n-----Sample Input:-----\n2 \n6 5 \n10 5 5 3 2 1 \n1 1\n100\n\n-----Sample Output:-----\n6\n101\n\n-----Explanation:-----\nTest Case 1\nOn the first day, chef answers 5 questions and leaves the remaining 5 (out of the 10) for the future days.\nOn the second day, chef has 10 questions waiting to be answered (5 received on the second day and 5 unanswered questions from day 1). Chef answers 5 of these questions and leaves the remaining 5 for the future.\nOn the third day, chef has 10 questions waiting to be answered (5 received on the third day and 5 unanswered questions from earlier). Chef answers 5 of these questions and leaves the remaining 5 for later.\nOn the fourth day, chef has 8 questions waiting to be answered (3 received on the fourth day and 5 unanswered questions from earlier). Chef answers 5 of these questions and leaves the remaining 3 for later.\nOn the fifth day, chef has 5 questions waiting to be answered (2 received on the fifth day and 3 unanswered questions from earlier). Chef answers all 5 of these questions.\nOn the sixth day, chef has 1 question, which he answers. This is the first day he answers less than 5 questions, and so the answer is 6.\nTest Case 2\nChef answers 1 question a day for the first 100 days. On day 101, he is free.\n\n Examples: \nInput: \n['2', '6 5', '10 5 5 3 2 1', '1 1', '100']\nOutput: \n ['6', '101']\n",
  "610": "Problem: \nDue to the COVID pandemic, people have been advised to stay at least $6$ feet away from any other person. Now, people are lining up in a queue at the local shop and it is your duty to check whether they are all following this advice.\nThere are a total of $N$ spots (numbered $1$ through $N$) where people can stand in front of the local shop. The distance between each pair of adjacent spots is $1$ foot. Each spot may be either empty or occupied; you are given a sequence $A_1, A_2, \\ldots, A_N$, where for each valid $i$, $A_i = 0$ means that the $i$-th spot is empty, while $A_i = 1$ means that there is a person standing at this spot. It is guaranteed that the queue is not completely empty.\nFor example, if $N = 11$ and the sequence $A$ is $(0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1)$, then this is a queue in which people are not following the advice because there are two people at a distance of just $3$ feet from each other.\nYou need to determine whether the people outside the local shop are following the social distancing advice or not. As long as some two people are standing at a distance smaller than 6 feet from each other, it is bad and you should report it, since social distancing is not being followed.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The next line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if social distancing is being followed or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $0 \\le A_i \\le 1$ for each valid $i$\n- at least one spot is occupied\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n3\n1 0 1\n7\n1 0 0 0 0 0 1\n11\n0 1 0 0 0 0 0 1 0 0 1\n\n-----Example Output-----\nNO\nYES\nNO\n\n-----Explanation-----\nExample case 1: The first and third spots are occupied and the distance between them is $2$ feet.\nExample case 2: The first and seventh spots are occupied and the distance between them is $6$ feet.\n\n Examples: \nInput: \n['3', '3', '1 0 1', '7', '1 0 0 0 0 0 1', '11', '0 1 0 0 0 0 0 1 0 0 1', '']\nOutput: \n ['NO', 'YES', 'NO']\n",
  "611": "Problem: \n\"What do you know about happiness?\" \u2014 Yoda \nChef is happy only if three conditions hold:\n- Chef finished cooking a delicious meal\n- Chef got AC for a programming problem with an almost correct code\n- Chef got a new problem with a sequence of integers\nToday, all three conditions are satisfied. Chef would like you to feel his happiness and provide him with a solution for this new problem with a sequence of integers. The problem is as follows.\nYou are given a sequence $A_1, A_2, \\dots, A_N$. You need to determine if it is possible to choose two indices $i$ and $j$ such that $A_i \\neq A_j$, but $A_{A_i}$ = $A_{A_j}$. (If it was possible, Chef would be truly happy.)\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Truly Happy\" if it is possible to choose required indices or \"Poor Chef\" otherwise.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le N$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (27 points): $1 \\le N \\le 1,000$\nSubtask #2 (73 points): original constraints\n\n-----Example Input-----\n4\n4\n1 1 2 3\n4\n2 1 3 3\n5\n5 4 4 3 1\n5\n3 2 1 1 4\n\n-----Example Output-----\nTruly Happy\nPoor Chef\nPoor Chef\nTruly Happy\n\n-----Explanation-----\nExample case 1: Chef is truly happy because $A_{A_3} = A_{A_1}$ and $A_3 \\neq A_1$.\nExample case 2: There is no pair of indices which would make Chef truly happy. For instance, $A_{A_3} = A_{A_4}$, but $A_3 = A_4$,\n\n Examples: \nInput: \n['4', '4', '1 1 2 3', '4', '2 1 3 3', '5', '5 4 4 3 1', '5', '3 2 1 1 4']\nOutput: \n ['Truly Happy', 'Poor Chef', 'Poor Chef', 'Truly Happy']\n",
  "612": "Problem: \nLots of geeky customers visit our chef's restaurant everyday. So, when asked to fill the feedback form, these customers represent the feedback using a binary string (i.e a string that contains only characters '0' and '1'. \n\nNow since chef is not that great in deciphering binary strings, he has decided the following criteria to classify the feedback as Good or Bad : \n\nIf the string contains the substring \"010\" or \"101\", then the feedback is Good, else it is Bad. Note that, to be Good it is not necessary to have both of them as substring.\n\nSo given some binary strings, you need to output whether according to the chef, the strings are Good or Bad. \n\n-----Input-----\nThe first line contains an integer T denoting the number of feedbacks. Each of the next T lines contains a string composed of only '0'  and '1'.\n\n-----Output-----\nFor every test case, print in a single line Good or Bad as per the Chef's method of classification.\n\n-----Constraints-----\n-  1 \u2264  T \u2264   100 \n-  1  \u2264  |S|   \u2264  105 \n\nSum of length of all strings in one test file will not exceed 6*106.\n\n-----Example-----\nInput:\n2\n11111110\n10101010101010\n\nOutput:\nBad\nGood\n\n-----Explanation-----\nExample case 1.\n\nThe string doesn't contain 010 or 101 as substrings.\n\nExample case 2.\n\nThe string contains both 010 and 101 as substrings.\n\n Examples: \nInput: \n['2', '11111110', '10101010101010']\nOutput: \n ['Bad', 'Good']\n",
  "613": "Problem: \n-----Problem-----\n\n\t\t\tNikki's latest work is writing a story of letters. However, she finds writing story so boring that, after working for three hours, she realized that all she has written are M long words consisting entirely of letters A and B. Having accepted that she will never finish the story in time, Nikki has decided to at least have some fun with it by counting bubbly words.\n\n\n\t\t\tNow Nikki is connecting pairs of identical letters (A with A, B with B) by drawing lines above the word. A given word is bubbly if each letter can be connected to exactly one other letter in such a way that no two lines intersect. So here is your task. Help Nikki count how many words are bubbly.\n\n-----Input-----\n- \n\t\t\tThe first line of input contains the positive integer M, the number of words written down by Nikki.\n\t\t\t\t\n- \n\t\t\tEach of the following M lines contains a single word consisting of letters A and B, with length\n\n\t\t\tbetween 2 and 10^5, inclusive. The sum of lengths of all words doesn't exceed 10^6.\n\t\t\t\t\n\n-----Output-----\n\n\t\t\tThe first and only line of output must contain the number of bubbly words.\n\t\t\n\n-----Constraints-----\n- \n\t\t\t1 \u2264 M \u2264 100\n\t\t\t\t\n\n-----Sample Input-----\n\n3\n\nABAB\n\nAABB\n\nABBA\n\n-----Sample Output-----\n2\n\n-----Explanation-----\n- \n\t\t\t\t\t ABAB - It is not bubbly as A(indexed 1) will connect to A(indexed 3) by a line and when we try to connect B(indexed 2) with B(indexed 4) by a line then it will intersect with the line b/w A and A.\n\t\t\t\t\n- \n\t\t\t\t\tAABB - It is bubbly as line b/w A and A will not intersect with the line b/w B and B.\n\t\t\t\n- \nABBA -It is also bubbly as lines will not intersect. We can draw line b/w A and A above the line b/w B and B.\n\t\t\t\t p { text-align:justify }\n\n Examples: \nInput: \n['3', 'ABAB', 'AABB', 'ABBA']\nOutput: \n ['2']\n",
  "615": "Problem: \nNexus 4.O is going to be organized by ASME, GLA University. Shubhanshu, Head of Finance Team is working for it. He has $N$ number of bills of different values as $a$$1$,$ a$$2$, $a$$3$\u2026$a$$n$.\nHe is interested in a game in which one has to do the addition of the bills. But due to privacy concerns, he cannot share the details with others. \nHe can only trust his best friend Avani with such a confidential thing. So, he asked her to play this game.\nRules of the game :\n- Avani needs to answer $Q$ queries.\n- Every $Q$$i$ query has 2 values $X$$i$ and $Y$$i$.\n- Avani needs to find the sum of the values between $X$$i$ and $Y$$i$ (inclusive).\nSo, you need to help Avani in answering the $Q$ queries\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each test case contains the value $N$ and $Q$.\n- The second line of each test case contains the $N$ space-separated values as $a$$1$,$ a$$2$, $a$$3$\u2026$a$$n$.\n- The next line of each test case containing $Q$ query with $X$$i$ and $Y$$i$.\n\n-----Output:-----\nFor each test case, Print the total amount between $X$$i$ and $Y$$i$ for $Q$ number of queries.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n- $1 \\leq a$$i$$ \\leq 10^9$\n\n-----Subtasks (25 points) :-----\n- $1 \\leq N \\leq 10^2$.\n- $1 \\leq Q \\leq 10^2$.\n- $1 \\leq a$$i$$ \\leq 10^5$.\n\n-----Subtasks (25 points) :-----\n- $1 \\leq N \\leq 10^3$.\n- $1 \\leq Q \\leq 10^3$.\n- $1 \\leq a$$i$$ \\leq 10^5$.\n\n-----Subtasks (50 points) :-----\n- $Original  Constraints$.\n\n-----Sample Input:-----\n1\n8 3\n1 2 3 4 5 6 7 8\n2 3\n1 6\n5 8\n\n-----Sample Output:-----\n5\n21\n26\n\n-----EXPLANATION:-----\n$Q$$1$ : (2,3) 2+3=5\n$Q$$2$ : (1,6) 1+2+3+4+5+6=21\n$Q$$3$ : (5,8) 5+6+7+8=26\n\n Examples: \nInput: \n['1', '8 3', '1 2 3 4 5 6 7 8', '2 3', '1 6', '5 8']\nOutput: \n ['5', '21', '26']\n",
  "618": "Problem: \nDexter, being irritated by DD, gave her a lucrative game to play to keep her busy.\nThere are $N$ bags numbered $1$ to $N$. The $i_{th}$ bag contains $A_i$ coins. The bags are placed in a circular order such that the $N_{th}$ bag is adjacent to the $1^{st}$ bag. \nDD can select $K$ consecutive adjacent bags and take all the coins in them.   Help her find the maximum number of coins she can take by making the ideal choice.\nNote that the selected bags must be consecutive. Since they are placed in circular order, bag number $1$ and $N$ are considered to be consecutive.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- First-line contains $N$ and $K$.\n- Second-line contains $N$ numbers $A_1, A_2,...,A_N$,  \n\n-----Output:-----\nFor each test case, output in a single line, the maximum money that can be collected by DD.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $5 \\leq N \\leq 10^5$\n- $1 \\leq K < N$\n- $1 \\leq A_i \\leq 10^5$\nSum of $N$ over all test cases is less than $10^6$\n\n-----Sample Input:-----\n1\n5 3\n8 6 9 4 10\n\n-----Sample Output:-----\n24\n\n-----EXPLANATION:-----\nThe ideal choice would be to take the last bag with $10$ coins and the first $2$ bags with $8$ and $6$ coins.\n\n Examples: \nInput: \n['1', '5 3', '8 6 9 4 10']\nOutput: \n ['24']\n",
  "619": "Problem: \nIn a regular table tennis match, the player who serves changes every time after 2 points are scored, regardless of which players scored them.\nChef and Cook are playing a different match \u2014 they decided that the player who serves would change every time after $K$ points are scored instead (again regardless of which players scored them). When the game starts, it's Chef's turn to serve.\nYou are given the current number of points scored by Chef and Cook ($P_1$ and $P_2$ respectively). Find out whether Chef or Cook has to serve next.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains three space-separated integers $P_1$, $P_2$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"CHEF\" if it is Chef's turn or \"COOK\" if it is Cook's turn.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le K \\le 10^{9}$\n- $0 \\le P_1, P_2 \\le 10^{9}$ \n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n1 3 2\n0 3 2\n34 55 2\n\n-----Example Output-----\nCHEF\nCOOK\nCHEF\n\n-----Explanation-----\nExample case 1: Chef serves for the first two points, Cook serves for the next two, so Chef has to serve again now.\n\n Examples: \nInput: \n['3', '1 3 2', '0 3 2', '34 55 2']\nOutput: \n ['CHEF', 'COOK', 'CHEF']\n",
  "620": "Problem: \nFind the length of the longest contiguous segment in an array, in which if a given element $K$ is inserted, $K$ becomes the second largest element of that subarray.\n\n-----Input:-----\n- The first line will contain $T$, number of test cases. Then the test cases follow. \n- The first line of each test case contains two integers $N$ and $K$.\n- The next line contains N space-separated integers Ai denoting the elements of the array.\n\n-----Output:-----\nPrint a single line corresponding to each test case \u2014 the length of the largest segment.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^6$\n- $1 \\leq Ai, K \\leq 10^9$\n- Sum of N across all test cases doesn't exceed $10^6$\n\n-----Sample Input:-----\n2\n5 3\n2 4 2 4 2\n8 5\n9 3 5 7 8 11 17 2\n\n-----Sample Output:-----\n5\n3\n\n-----EXPLANATION:-----\nIf 3 is inserted at anywhere in the array, it is the second largest element. Hence the maximum length is 5.\nIf 5 is inserted anywhere between 1st and 4th element, it is the second largest element. The length of such subarray is 3.\n\n Examples: \nInput: \n['2', '5 3', '2 4 2 4 2', '8 5', '9 3 5 7 8 11 17 2']\nOutput: \n ['5', '3']\n",
  "621": "Problem: \nGiven n words w[1..n], which originate from the same stem (e.g. grace, graceful, disgraceful, gracefully), we are interested in the original stem. To simplify the problem, we define the stem as the longest consecutive substring that occurs in all the n words. If there are ties, we will choose the smallest one in the alphabetical (lexicographic) order.\n\n-----Input-----\nThe first line contains an integer T denoting the total number of test cases.\nIn each test cases, the first line contains an integer n denoting the number of words. In the second line, n words w[1..n] consisting of lower case characters are given as a single space-spearated list.\n\n-----Output-----\nFor each test case, output the stem in a new line.\n\n-----Constraints-----\n- 1 <= T <= 10\n- 1 <= n <= 10\n- 1 <= |w[i]| <= 20\n\n-----Example-----\nInput:\n1\n4\ngrace graceful disgraceful gracefully\nOutput:\ngrace\n\n-----Explanation-----\nThe stem is grace.\n\n Examples: \nInput: \n['1', '4', 'grace graceful disgraceful gracefully']\nOutput: \n ['grace']\n",
  "622": "Problem: \nChef has a rectangular piece of paper. He puts it on a big board in such a way that two sides of the paper are horizontal and two are vertical, and then he performs a sequence of $N$ operations. You are given a string $S$ with length $N$; for each valid $i$, the $i$-th character of $S$ determines the type of the $i$-th operation:\n- 'R': Pick up the paper from the right side and fold it onto the left side.\n- 'L': Pick up the paper from the left side and fold it onto the right side.\n- 'U': Pick up the paper from the upper side and fold it onto the bottom side.\n- 'D': Pick up the paper from the bottom side and fold it onto the upper side.\nThe paper is folded in such a way that there is still a flat rectangular sheet of paper lying on the table after each operation, but it consists of multiple layers of the original sheet. The lengths of the horizontal and vertical sides of the resulting sheet (after performing these $N$ operations) are $W$ and $H$ respectively. Let's build an Euclidean coordinate system on the paper, where the point $(0, 0)$ corresponds to the bottom left corner and $(W, H)$ to the upper right corner.\nChef then draws $M$ points on this folded sheet of paper. The ink used to draw them soaks deep into the paper, so each point is drawn on all layers of the paper (and also on both faces of each layer). \nFinally, Chef completely unfolds the paper. He's asking you to compute the distance between the nearest pair of points.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains four space-separated integers $N$, $M$, $W$ and $H$.\n- The second line contains a single string $S$.\n- Each of the following $M$ lines contains two space-separated integers $X$ and $Y$ denoting the coordinates of one point.\n\n-----Output-----\nFor each test case, print a single line containing one real number \u2015 the minimum distance. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $2 \\le M \\le 1,000$\n- $1 \\le N \\le 1,000$\n- $3 \\le W, H \\le 10^9$\n- $1 \\le X \\le W-1$\n- $1 \\le Y \\le H-1$\n- the points are pairwise distinct\n\n-----Subtasks-----\nSubtask #1 (50 points): all characters of $S$ are 'U'\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n6 2 10 10\nULRDDL\n4 4\n5 5\n4 2 10 10\nRUDL\n1 1\n9 9\n\n-----Example Output-----\n1.41421356237\n2.00000000000\n\n Examples: \nInput: \n['2', '6 2 10 10', 'ULRDDL', '4 4', '5 5', '4 2 10 10', 'RUDL', '1 1', '9 9']\nOutput: \n ['1.41421356237', '2.00000000000']\n",
  "623": "Problem: \nGiven the list of numbers, you are to sort them in non decreasing order.\n\n-----Input-----\nt \u2013 the number of numbers in list, then t lines follow [t <= 10^6]. \n\nEach line contains one integer: N [0 <= N <= 10^6]\n\n-----Output-----\nOutput given numbers in non decreasing order.\n\n-----Example-----\nInput:\n5\n5\n3\n6\n7\n1\n\nOutput:\n1\n3\n5\n6\n7\n\n Examples: \nInput: \n['5', '5', '3', '6', '7', '1']\nOutput: \n ['1', '3', '5', '6', '7']\n",
  "624": "Problem: \nOnce, a genius guy Cristo visited NASA where he met many scientists. A young intern Mark at NASA asked Cristo to observe the strange behaviour of two\n\nindependent particles (say Alpha and Beta) moving in the free space.Cristo was astonished to see the movement of Alpha and Beta. However, he formulated a procedure\n\nto evaluate the distance covered by the particles in given time.\nThe procedure calculates the distance covered by Alpha and Beta for a given time. Mark, however struggles\n\nto evaluate the procedure manually and asks you to help him. \nCristo's Procedure :- \nalpha = 0\nbeta = 0\nProcedure CristoSutra( Ti ) :\nif Ti <= 0 :\nalpha = alpha + 1 \nelse if Ti == 1 :\n\tbeta = beta + 1\nelse :\nCristoSutra(Ti-1)\n\t         CristoSutra(Ti-2)\n\t         CristoSutra(Ti-3)\nend procedure\nNote: Print the answer by taking mod from 109+7 .\n\n-----Constraints:-----\n- 1<=T<=105\n- 1<=Ti<=105\n\n-----Input Format:-----\nFirst line consists an integer t, number of Test cases.For each test case, there is an integer denoting time Ti.\n\n-----Output Format:-----\nFor each test case, a single output line contains two space seperated numbers ,distance covered by alpha and beta in the given time.\n\n-----Subtasks:-----\nSubtask 1 (30 points)\n- 1<=T<=10\n- 1<=Ti<=1000\nSubtask 2 (70 points)\noriginal contraints\nSample Input:\n2\n1\n2\nSample Output:\n0 1\n2 1\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['0 1', '2 1']\n",
  "625": "Problem: \nShaun is very much interested in Subarrays. Shaun wants to count the number of subarrays in his chosen array with sum being a multiple of $10^9$. Since, Shaun is interested in huge numbers.He chose his array such that it contains only $10^8$ and $9*10^8$ as its elements.\nHelp shaun to count the number of required subarrays.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains one integer $N$,size of array $A$. \n- Second line of each testcase contains $N$ space separated array elements\n\n-----Output:-----\nFor each testcase, output in a single line number of subarrays with sum being multiple of $10^9$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $A[i]$=$10^8$ , $9*10^8$\n\n-----Sample Input:-----\n2\n3\n100000000 900000000 100000000\n1\n900000000\n\n-----Sample Output:-----\n2\n0\n\n Examples: \nInput: \n['2', '3', '100000000 900000000 100000000', '1', '900000000']\nOutput: \n ['2', '0']\n",
  "626": "Problem: \nThe Chef has prepared the appetizers in the shapes of letters to spell a special message for the guests. There are n appetizers numbered from 0 to n-1 such that if the appetizers are arrayed in this order, they will display the message. The Chef plans to display them in this order on a table that can be viewed by all guests as they enter. The appetizers will only be served once all guests are seated.\n\nThe appetizers are not necessarily finished in the same order as they are numbered. So, when an appetizer is finished the Chef will write the number on a piece of paper and place it beside the appetizer on a counter between the kitchen and the restaurant. A server will retrieve this appetizer and place it in the proper location according to the number written beside it.\n\nThe Chef has a penchant for binary numbers. The number of appetizers created is a power of 2, say n = 2k. Furthermore, he has written the number of the appetizer in binary with exactly k bits. That is, binary numbers with fewer than k bits are padded on the left with zeros so they are written with exactly k bits.\n\nUnfortunately, this has unforseen complications. A binary number still \"looks\" binary when it is written upside down. For example, the binary number \"0101\" looks like \"1010\" when read upside down and the binary number \"110\" looks like \"011\" (the Chef uses simple vertical lines to denote a 1 bit). The Chef didn't realize that the servers would read the numbers upside down so he doesn't rotate the paper when he places it on the counter. Thus, when the server picks up an appetizer they place it the location indexed by the binary number when it is read upside down.\n\nYou are given the message the chef intended to display and you are to display the message that will be displayed after the servers move all appetizers to their locations based on the binary numbers they read.\n\n-----Input-----\n\nThe first line consists of a single integer T \u2264 25 indicating the number of test cases to follow. Each test case consists of a single line beginning with an integer 1 \u2264 k \u2264 16 followed by a string of precisely 2k characters. The integer and the string are separated by a single space. The string has no spaces and is composed only of lower case letters from `a` to `z`.\n\n\n-----Output-----\n\nFor each test case you are to output the scrambled message on a single line.\n\n\n-----Example-----\nInput:\n2\n2 chef\n4 enjoyourapplepie\n\nOutput:\ncehf\neayejpuinpopolre\n\n Examples: \nInput: \n['2', '2 chef', '4 enjoyourapplepie', '', '']\nOutput: \n ['cehf', 'eayejpuinpopolre']\n",
  "627": "Problem: \nBharat was given a problem to solve, by his brother, Lord Ram. The problem was like, given integers, $N$ and $K$, Bharat has to find the number (possibilities) of non-increasing arrays of length $K$, where each element of the array is between $1$ and $N$ (both inclusive). He was confused, regarding this problem. So, help him solve the problem, so that, he can give the answer of the problem, to his brother, Lord Rama. Since, the number of possible sub-arrays can be large, Bharat has to answer the problem as \"number of possible non-increasing arrays\", modulo  $10^9$ $+$ $7$.\n\n-----Input:-----\n- Two space-seperated integers, $N$ and $K$.\n\n-----Output:-----\n- Output in a single line, the number of possible non-increasing arrays, modulo $10^9$ $+$ $7$.\n\n-----Constraints:-----\n- $1 \\leq N, K \\leq 2000$\n\n-----Sample Input:-----\n2 5\n\n-----Sample Output:-----\n6\n\n-----Explanation:-----\n- Possible Arrays, for the \"Sample Case\" are as follows: \n- {1, 1, 1, 1, 1}\n- {2, 1, 1, 1, 1}\n- {2, 2, 1, 1, 1} \n- {2, 2, 2, 1, 1}\n- {2, 2, 2, 2, 1}\n- {2, 2, 2, 2, 2}\n- Hence, the answer to the \"Sample Case\" is $6$ ($6$ % ($10^9$ $+$ $7$)).\n\n Examples: \nInput: \n['2 5']\nOutput: \n ['6']\n",
  "628": "Problem: \nChef and his best friend Aleksa are into mathematical games these days. Today, they have some ( \u2265 0 ) black cells represented as B, and a white cell represented as W, lying randomly in a straight line.\nThey have decided to play with these cells. In a move, a player chooses some ( > 0 ) black cells lying on any one side of the white cell and remove them. It should be noted that a player is not allowed to choose black cells from both side of the given white cell. Both the players alternate their moves, and play optimally. The player who is unable to move in his respective turn will lose the game.\nAleksa, being a girl, has a habit of playing first. But Chef is fairly smart himself, and will not play the game if he is going to lose it. Therefore, he wants to know the winner beforehand. Can you tell him who is going to win the game for the given configuration of cells?\n\n-----Input-----\nFirst line of input contains a single integer T denoting the number of test cases. First and the only line of each test case contains a string S consisting of the characters 'B' and 'W', denoting black and white cells, respectively.\n\n-----Output-----\nFor each test case, output \"Chef\" if chef wins the game for the given configuration. Else print \"Aleksa\". (quotes for clarity only).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 |S| \u2264 10000\n- S contains exactly 1 white cell.\n\n-----Scoring-----\n-  Subtask 1:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 10 : ( 30 pts )\n-  Subtask 2:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 100 : ( 30 pts )\n-  Subtask 3:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 10000 : ( 40 pts )\n\n-----Example-----\nInput\n3\nW\nBW\nBWBB\n\nOutput\nChef\nAleksa\nAleksa\n\n----- Explanation-----\n-  Test 1 : Aleksa cannot make a move in her first turn as there is no black cell in the given configuration.\n-  Test 2 : Aleksa can remove 1 black cell lying on the left of white cell in her turn. But then, Chef cannot make a move in his turn as there will be no black cells left.\n-  Test 3 : Figure out yourself.\n\n Examples: \nInput: \n['3', 'W', 'BW', 'BWBB']\nOutput: \n ['Chef', 'Aleksa', 'Aleksa']\n",
  "629": "Problem: \nNaturally, the magical girl is very good at performing magic. She recently met her master wizard Devu, who gifted her R potions of red liquid, \nB potions of blue liquid, and G potions of green liquid.\n\n- \nThe red liquid potions have liquid amounts given by r[1], ..., r[R] liters. \n\n- \nThe green liquid potions have liquid amounts given by g[1], ..., g[G] liters. \n\n- \nThe blue liquid potions have liquid amounts given by b[1], ..., b[B] liters. \n\nShe want to play with the potions by applying magic tricks on them. In a single magic trick, she will choose a particular color. Then she will pick all the potions of the chosen color and decrease the amount of liquid in them to half (i.e. if initial amount \nof liquid is x, then the amount after decrement will be x / 2  where division is integer division, e.g. 3 / 2 = 1 and 4 / 2 = 2). \n\nBecause she has to go out of station to meet her uncle Churu, a wannabe wizard, only M minutes are left for her. In a single minute, she can perform at most one magic trick. Hence, she can perform at most M magic tricks.\n\nShe would like to minimize the maximum amount of liquid among all of Red, Green and Blue colored potions. Formally Let v be the maximum value of amount of liquid in any potion. We want to minimize the value of v.\nPlease help her.\n\n-----Input-----\n\nFirst line of the input contains an integer T denoting the number of test cases.\nThen for each test case, we have four lines.\n\nThe first line contains four space separated integers R, G, B, M. The next 3 lines will describe the amount of different color liquids (r, g, b), which are separated by space.\n\n-----Output-----\nFor each test case, print a single integer denoting the answer of the problem.\n\n-----Constraints-----\n-  1 \u2264 T \u2264 1000 \n-  1 \u2264 R, G, B, M \u2264 100 \n-  1 \u2264 r[i], g[i], b[i] \u2264 10^9 \n\n-----Example-----\nInput:\n3\n1 1 1 1\n1\n2\n3\n1 1 1 1\n2\n4\n6\n3 2 2 2\n1 2 3\n2 4\n6 8\nOutput:\n2\n4\n4\n\n-----Explanation-----\nExample case 1. Magical girl can pick the blue potion and make its liquid amount half. So the potions will now have amounts 1 2 1. Maximum of these values is 2. Hence answer is 2.\n\n Examples: \nInput: \n['3', '1 1 1 1', '1', '2', '3', '1 1 1 1', '2', '4', '6', '3 2 2 2', '1 2 3', '2 4', '6 8']\nOutput: \n ['2', '4', '4']\n",
  "631": "Problem: \nIn Ciel's restaurant, a waiter is training.\nSince the waiter isn't good at arithmetic, sometimes he gives guests wrong change.\nCiel gives him a simple problem.\nWhat is A-B (A minus B) ?\n\nSurprisingly, his answer is wrong.\nTo be more precise, his answer has exactly one wrong digit.\nCan you imagine this?\nCan you make the same mistake in this problem?\n\n-----Input-----\n\nAn input contains 2 integers A and B.\n\n-----Output-----\n\nPrint a wrong answer of A-B.\nYour answer must be a positive integer containing the same number of digits as the correct answer, and exactly one digit must differ from the correct answer.\nLeading zeros are not allowed.\nIf there are multiple answers satisfying the above conditions, anyone will do.\n\n-----Constraints-----\n\n1 \u2264 B < A \u2264 10000\n\n-----Sample Input-----\n5858 1234\n\n-----Sample Output-----\n1624\n\n-----Output details-----\n\nThe correct answer of 5858-1234 is 4624.\nSo, for instance, 2624, 4324, 4623, 4604 and 4629 will be accepted, but 0624, 624, 5858, 4624 and 04624 will be rejected.\n\n-----Notes-----\n\nThe problem setter is also not good at arithmetic.\n\n Examples: \nInput: \n['5858 1234']\nOutput: \n ['1624', 'Output details', 'The correct answer of 5858-1234 is 4624.', 'So, for instance, 2624, 4324, 4623, 4604 and 4629 will be accepted, but 0624, 624, 5858, 4624 and 04624 will be rejected.', 'Notes', 'The problem setter is also not good at arithmetic.']\n",
  "632": "Problem: \nSheldon is a little geek living in Texas. While his friends like to play outside, little Sheldon likes to play around with ICs and lasers in his house. He decides to build N clap activated toggle machines each with one power inlet and one outlet. Each machine works when its power source inlet is receiving power. When the machine is in 'ON' state and is receiving power at its inlet, it makes power available at its power outlet to which a bulb or another ToGgLe machine could be attached.\n\nSuppose Sheldon attached 2 such machines to one another with the power inlet of the first machine attached to a power source at his house and the outlet of the second machine to a bulb. Initially both machines are in 'OFF' state and power source to first machine is off too. Now the power source is switched on. The first machine receives power but being in the 'OFF' state it does not transmit any power. Now on clapping the first ToGgLe machine toggles to 'ON' and the second machine receives power. On clapping once more the first toggles to 'OFF' and the second toggles to 'ON'. But since the second ToGgLe machine receives no power the bulb does not light up yet. On clapping once more, the first machine which is still receiving power from the source toggles to 'ON' and the second which was already 'ON' does not toggle since it was not receiving power. So both the machine are in 'ON' state and the bulb lights up and little Sheldon is happy.\n\nBut when Sheldon goes out for a while, his evil twin sister attaches N such ToGgLe machines (after making sure they were all in 'OFF' state) and attaches the first to a power source (the power source is initially switched off) and the last ToGgLe machine to a bulb. Sheldon is horrified to find that his careful arrangement has been disturbed.\n\nCoders, help the poor boy by finding out if clapping k times for the N ToGgLe machines (all in 'OFF' state with the first one connected to a switched off power source and last one to a bulb) would light the bulb. Hurry before Sheldon has a nervous breakdown!\n\n-----Input-----\nFirst line has number of test cases, T.\n\nFollowing T lines have N, k separated by a single space where N is the number of \nToGgLe machines and k is the number of times Sheldon clapped.\n\n-----Output-----\nT lines with cach line of the form: \"ON\" (just the word on without the double quotes) if the bulb is 'ON' for the \ntest case numbered n and \"OFF\" (just the word off without the double quotes) if the bulb is 'OFF' for the test case numbered n.\n\n\n-----Example-----\nInput:\n4\n4 0\n4 47\n1 0\n1 1\n\nOutput:\nOFF\nON\nOFF\nON\n\n Examples: \nInput: \n['4', '4 0', '4 47', '1 0', '1 1']\nOutput: \n ['OFF', 'ON', 'OFF', 'ON']\n",
  "633": "Problem: \nWell known investigative reporter Kim \"Sherlock'' Bumjun needs your help! Today, his mission is to sabotage the operations of the evil JSA. If the JSA is allowed to succeed, they will use the combined power of the WQS binary search and the UFDS to take over the world!\nBut Kim doesn't know where the base is located. He knows that the base is on the highest peak of the Himalayan Mountains. He also knows the heights of each of the $N$ mountains. Can you help Kim find the height of the mountain where the base is located? \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow.    \n- The first line in each testcase contains one integer, $N$.    \n- The following $N$ lines of each test case each contain one integer: the height of a new mountain.\n\n-----Output:-----\nFor each testcase, output one line with one integer: the height of the tallest mountain for that test case.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 100000$\n- $0 \\leq$ height of each mountain $\\leq 10^9$\n\n-----Subtasks:-----\n- 100 points: No additional constraints.\n\n-----Sample Input:-----\n1\n5\n4\n7\n6\n3\n1\n\n-----Sample Output:-----\n7\n\n Examples: \nInput: \n['1', '5', '4', '7', '6', '3', '1']\nOutput: \n ['7']\n",
  "634": "Problem: \nLyra Belacqua is a very gifted girl. She is one of a very small set of people capable of reading an alethiometer, more commonly known as The Golden Compass. It has one specific use: to tell the truth. The name in fact, is derived from \"Aletheia\" meaning truth, and \"-ometer\", meaning \"measuring device\".\n\nThe alethiometer had four needles, out of which the user would direct three of them to lie over symbols on the face of the device to ask a question. The fourth needle then swung into action and pointed to various symbols one after another, thus telling the answer.\n\nFor this problem, consider the alethiometer consisting of symbols : digits '0'-'9' and letters 'A'-'Z'. Learned scholars were debating the age of the Universe, and they requested Lyra to find out the age from the alethiometer. Having asked the question, the fourth needle started spouting out symbols, which Lyra quickly recorded. In that long string of characters, she knows that some substring corresponds to the age of the Universe. She also knows that the alethiometer could have wrongly pointed out atmost one digit (0-9) as a letter (A-Z). She then wonders what is the maximum possible age of the Universe.\n\nGiven the set of symbols the alethiometer pointed out, help her find the maximum age of the Universe, which could correspond to a substring of the original string with atmost one letter changed.\n\nNote: We consider a substring to be a contiguous part of the string S \n\nAlso, the alethiometer wrongly reports only a letter. All the digits remain as they are.\n\n-----Input-----\n\nEach input consists of a single string S which is what Lyra recorded from the fourth needle's pointing.\n\n-----Output-----\n\nOutput one number, the maximum possible answer.\n\n-----Constraints-----\n-  1  \u2264 |S|  \u2264 1,000\n-  S will only contain digits 0-9 and uppercase Latin letters. \n\n-----Example-----\nInput1:\n06454\n\nInput2:\nC0D3C43F\n\nOutput1:\n6454\n\nOutput2:\n3943\n\n-----Explanation-----\n\nIn the first example, there is no choice as to what the number can be. It has to be 6,454.\n\nIn the second example, there are a total of 41 possible strings (one for the original, and 10 for changing each letter). You can verify that the maximum number as a substring is got by making the string \"C0D3943F\".\n\n Examples: \nInput: \n['06454', 'Input2:', 'C0D3C43F']\nOutput: \n ['6454', 'Output2:', '3943']\n",
  "635": "Problem: \nChef is given a sequence of prime numbers $A_1, A_2, \\ldots, A_N$. This sequence has exactly $2^N$ subsequences. A subsequence of $A$ is good if it does not contain any two identical numbers; in particular, the empty sequence is good.\nChef has to find the number of good subsequences which contain at most $K$ numbers. Since he does not know much about subsequences, help him find the answer. This number could be very large, so compute it modulo $1,000,000,007$.\n\n-----Input-----\n- The first line of the input contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nPrint a single line containing one integer \u2015 the number of good subsequences with size at most $K$, modulo $1,000,000,007$.\n\n-----Constraints-----\n- $1 \\le K \\le N \\le 10^5$\n- $2 \\le A_i \\le 8,000$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $A_1, A_2, \\ldots, A_N$ are pairwise distinct\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n5 3\n2 2 3 3 5\n\n-----Example Output-----\n18\n\n-----Explanation-----\nThere is $1$ good subsequence with length $0$, $5$ good subsequences with length $1$, $8$ good subsequences with length $2$ and $4$ good subsequences with length $3$.\n\n Examples: \nInput: \n['5 3', '2 2 3 3 5']\nOutput: \n ['18']\n",
  "636": "Problem: \nIn this problem you are given a sequence of $N$ positive integers $S[1],S[2],\\dots,S[N]$. In addition you are given an integer $T$, and your aim  is to find the number of quadruples $(i,j,k,l)$, such that $1 \\le i < j < k < l \\le N$, and $S[i] + S[j] + S[k] + S[l] = T$.  That is, the number of ways of picking four numbers from the sequence summing up to $T$.\n\n-----Constraints:-----\nFor all test cases,\n- $1 \\le N \\le 5000$\n- $1 \\le T \\le 10^6$\n- $1 \\le S[i] \\le 10^9$, for all $i$.\nSubtask $1:10\\%$\nIt is guaranteed that $N \\le 50$.\nSubtask $2:50\\%$\nIt is guaranteed that $N \\le 300$.\nSubtask $3:40\\%$\nNo additional guarantees.\n\n-----Input Format:-----\nThere is only one line of input with $N+2$ space separated integers. The first two integers are $N$ and $T$. The next $N$ integers are $S[1],S[2],\\dots,S[N]$.\n\n-----Output Format:-----\nA single integer which is the number of valid quadruples.\n\n-----Sample Input 1:-----\n6 20 3 1 1 2 5 10\n\n-----Sample Output 1:-----\n1\n\n-----Explanation 1:-----\nThe quadruple $(1,4,5,6)$ is valid  because $S[1]+S[4]+S[5]+S[6]=3+2+5+10=20$. You can check that no other quadruple is valid and hence the answer is $1$.\n\n-----Sample Input 2:-----\n6 13 1 2 3 4 5 4 \n\n-----Sample Output 2:-----\n3\n\n-----Explanation 2:-----\nYou can verify that the only quadruples that are valid are $(2,3,4,6),(1,3,4,5)$  and $(1,3,5,6)$. Thus, the answer is $3$.\n\n-----Note:-----\nAs the answer might be large, please use 64 bit integers (long long int in\nC/C++ and long in Java) instead of 32 bit int.\n\n Examples: \nInput: \n['6 20 3 1 1 2 5 10']\nOutput: \n ['1']\n",
  "638": "Problem: \nYou will be given m strings. For each of those strings, you need to count the total number of appearances of that string as substrings in all possible strings of length n containing only lower case English letters. \n\nA string may appear in a string multiple times. Also, these appearances may overlap. All these must be counted separately. For example, aa appears thrice in the string aaacaa: aaacaa, aaacaa and aaacaa.\n\n-----Input-----\n- The first line contains one integer, T, the number of test cases. The description of each test case follows:\n- The first line of each test case will contain two integers n and m.\n- The ith of the next m lines will have one string in each line. All the strings will consist only of lower case English letters.\n\n-----Output-----\n- For each test case, print \"Case x:\" (without quotes. x is the test case number, 1-indexed) in the first line.\n- Then print m lines. The ith line should contain the number of appearances of the ith string in all possible strings of length n. As the numbers can be very large, print the answers modulo 109+7.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 n \u2264 100000\n- 1 \u2264 m \u2264 1000 \n- 1 \u2264 Length of every string in input\n- 1 \u2264 Total length of all strings in one test case \u2264 5 * 105\n- 1 \u2264 Total length of all strings in one test file \u2264 5 * 106\n\n-----Example-----\nInput:\n3\n2 1\naa\n2 1\nd\n12 3\ncdmn\nqweewef\nqs\n\nOutput:\nCase 1:\n1\nCase 2:\n52\nCase 3:\n443568031\n71288256\n41317270\n\n-----Explanation:-----\nTestcase 1: aa is the only string of length 2 which contains aa as a substring. And it occurs only once. Hence the answer is 1.\n\n Examples: \nInput: \n['3', '2 1', 'aa', '2 1', 'd', '12 3', 'cdmn', 'qweewef', 'qs', '', '']\nOutput: \n ['Case 1:', '1', 'Case 2:', '52', 'Case 3:', '443568031', '71288256', '41317270']\n",
  "639": "Problem: \nFor a string $S$ let the unique set of characters that occur in it one or more times be $C$. Consider a permutation of the elements of $C$ as $(c_1, c_2, c_3 ... )$. Let $f(c)$ be the number of times $c$ occurs in $S$.\nIf any such permutation of the elements of $C$ satisfies $f(c_i) = f(c_{i-1}) + f(c_{i-2})$ for all $i \\ge 3$, the string is said to be a dynamic string.\nMr Bancroft is given the task to check if the string is dynamic, but he is busy playing with sandpaper. Would you help him in such a state?\nNote that if the number of distinct characters in the string is less than 3, i.e. if $|C| < 3$, then the string is always dynamic.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, a string $S$.\n\n-----Output:-----\nFor each testcase, output in a single line \"Dynamic\" if the given string is dynamic, otherwise print \"Not\". (Note that the judge is case sensitive)\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq |S| \\leq 10^5$\n- $S$ contains only lower case alphabets: $a$, $b$, \u2026, $z$\n\n-----Sample Input:-----\n3\naaaabccc\naabbcc\nppppmmnnoooopp\n\n-----Sample Output:-----\nDynamic\nNot\nDynamic\n\n-----Explanation:-----\n- Testase 1: For the given string, $C = \\{a, b, c\\}$ and $f(a)=4, f(b)=1, f(c)=3$. $f(a) = f(c) + f(b)$ so the permutation $(b, c, a)$ satisfies the requirement.\n- Testcase 2: Here too $C = \\{a, b, c\\}$ but no permutation satisfies the requirement of a dynamic string.\n- Testcase 3: Here $C = \\{m, n, o, p\\}$ and $(m, n, o, p)$ is a permutation that makes it a dynamic string.\n\n Examples: \nInput: \n['3', 'aaaabccc', 'aabbcc', 'ppppmmnnoooopp']\nOutput: \n ['Dynamic', 'Not', 'Dynamic']\n",
  "640": "Problem: \nChef made two laddus with sweetness X and Y respectively. Cheffina comes and sees the chef created two laddus with different sweetness (might be same). Cheffina has the magical power to make the sweetness of laddus equal. Cheffina requires 1 unit of power to increase the sweetness of laddu by its original value i.e. 1 unit to convert Z to 2Z and 2 unit to convert Z to 3Z and so on\u2026 How many units of power does cheffina want to make the sweetness equal?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $X, Y$. \n\n-----Output:-----\nFor each test case, output in a single line answer as power required.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq X,Y \\leq 10^5$\n\n-----Sample Input:-----\n2\n2 2\n4 6\n\n-----Sample Output:-----\n0\n3\n\n-----EXPLANATION:-----\nFor 1) Sweetness are same so no need to use power.\nFor 2) \n1st laddu\n2 Unit power = 4 -> 12\n2nd Laddu\n1 Unit power = 6 -> 12\nAfter using total 3 unit power sweetness of both laddus are same.\n\n Examples: \nInput: \n['2', '2 2', '4 6']\nOutput: \n ['0', '3']\n",
  "641": "Problem: \nA key feature of the Siruseri railway network is that it has exactly one route between any pair of stations.\nThe government has chosen three contractors to run the canteens at the stations on the railway network. To ensure that there are no disputes between the contractors it has been decided that if two stations, say $A$ and $B$, are assigned to a particular contractor then all the stations that lie on the route from $A$ to $B$ will also be awarded to the same contractor.\nThe government would like the assignment of stations to the contractors to be as equitable as possible. The government has data on the number of passengers who pass through each station each year. They would like to assign stations so that the maximum number of passengers passing through any contractor's collection of stations is minimized.\nFor instance, suppose the railway network is as follows, where the volume of passenger traffic is indicated by the side of each station.\n\nOne possible assignment would to award stations $1$ and $3$ to one contractor (there by giving him a traffic of $35$ passengers), station $2$ to the second contractor (traffic of $20$) and stations $4, 5$ and $6$ to the third contractor (traffic of $100$). In this assignment, the maximum traffic for any one contractor is 100. On the other hand if we assigned stations $1, 2$ and $3$ to one contractor, station $4$ and $6$ to the second contractor and station $5$ to the third contractor the maximum traffic for any one contractor is $70$. You can check that you cannot do better. (The assignment $1$, $2$ and $3$ to one contractor, $4$ to the second contractor, and $5$ and $6$ to the third contractor has a lower value for the maximum traffic ($55$) but it is not a valid assignment as the route from $5$ to $6$ passes through $4$.)\n\n-----Input:-----\nThe first line of the input contains one integer $N$ indicating the number of railways stations in the network. The stations are numbered $1,2,..., N$. This is followed by $N$ lines of input, lines $2,3,...,N+1$, indicating the volume of traffic at each station. The volume of traffic at station $i$, $1 \\leq i \\leq N$, is given by a single integer in line $i+1$. The next $N-1$ lines of input, lines $N+2, N+3, ..., 2 \\cdot N$, describe the railway network. Each of these lines contains two integers, denoting a pair of stations that are neighbours.\n\n-----Output:-----\nThe output should be a single integer, corresponding to the minimum possible value of the maximum traffic of any contractor among all valid assignment of the stations to the three contractors.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 3000$.\n\n-----Sample Input-----\n6\n10\n20\n25\n40\n30\n30\n4 5\n1 3\n3 4\n2 3\n6 4\n\n-----Sample Output-----\n70\n\n Examples: \nInput: \n['6', '10', '20', '25', '40', '30', '30', '4 5', '1 3', '3 4', '2 3', '6 4']\nOutput: \n ['70']\n",
  "642": "Problem: \nChef is the leader of Chef's Earth Defense Organization, and his mission is to counter aliens which are threatening the earth. According to information gathered by the organization, there are $N$ alien spaceships (numbered $1$ through $N$) planning to invade the earth. The $i$-th spaceship will appear on the radar at time $C_i$. Each spaceship needs $D$ time to reach earth once it appears on the radar. \nChef's organization owns a huge laser cannon which can destroy one spaceship in one shot. However, once the cannon is used once it needs some amount of cool-down time in order to be used again (first shot doesn't require cool-down time before it is used). This cool-down time, however, is configurable. It has to be set before the first shot, and cannot be changed after that. If Chef sets a lower cool-down time, that would increase the energy consumed by the cannon, and vice-versa - the higher the cool-down time, the lower the energy consumed.\nThis might be a long battle, and Chef wants to use as little energy as possible. So Chef wants to maximize the cool-down time while still being able to destroy all spaceships before any of them arrive on earth. In particular, the $i$-th spaceship should be shot between the times $C_i$ and $C_i + D$ (both end points inclusive).\n\n-----Input:-----\n- The first line of input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two integers $N$ and $D$. \n- The second line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one real number\u2015 the maximum cool-down time possible. Your answer will be considered correct if the absolute or relative error of the answer does not exceed $10^{-6}$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N \\leq 10^5$\n- $1 \\leq C_i \\leq 10^9$ for each valid $i$\n- $1 \\leq D \\leq 10^9$\n- The sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points): \n- $N \\le 1,000$\n- the sum of $N$ over all test cases does not exceed $10,000$\nSubtask #2 (50 points): Original constraints\n\n-----Sample Input:-----\n2\n3 2\n3 2 3\n2 1\n5 6\n\n-----Sample Output:-----\n1.5000000000\n2.0000000000\n\n Examples: \nInput: \n['2', '3 2', '3 2 3', '2 1', '5 6']\nOutput: \n ['1.5000000000', '2.0000000000']\n",
  "643": "Problem: \nTed$Ted$ loves prime numbers. One day he is playing a game called legendary$legendary$ with his girlfriend Robin$Robin$. Ted$Ted$ writes a number N$N$ on a table and the number is in the form of :\nN = P1A1 *  P2A2 * \u2026\u2026\u2026.. * PnAn\nTed$Ted$ asks Robin$Robin$ to find the sum of all the numbers which are less than or equal to N$N$ and also contains all the primes whose minimum power in the number is given by an array B$B$.  \nAs Robin$Robin$ is bad with maths she asks your help to answer this question.\n\n-----Input:-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.  \n- The first line of each test case contains a single integer n$n$, represents a number of distinct prime numbers.\n- The second line of each test case contains n$n$ space separated distinct prime numbers which represents an array P$P$.\n- The third line of each test case contains n$n$ space separated integers which represents an array A$A$.\n- The fourth line of each test case contains n$n$ space separated integers which represents an array B$B$ \n\n-----Output:-----\nFor each test case, output the Answer Modulo 109 + 7 in a single line.\n\n-----Constraints-----\n- 1\u2264T\u22643$1 \\leq T \\leq 3$\n- 1\u2264n\u2264105$1 \\leq n \\leq 10^5$\n- 2\u2264Pi\u2264106$2 \\leq P_{i} \\leq 10^6$\n- 1\u2264Ai\u2264109$1 \\leq A_{i} \\leq 10^9$\n- 0\u2264Bi\u2264Ai$0 \\leq B_{i} \\leq Ai$\n\n-----Sample Input:-----\n1\n3\n2 3 5\n2 1 2\n1 1 1\n\n-----Sample Output:-----\n540\n\n-----EXPLANATION:-----\n22 * 31 * 52= 300 which is N over here. \nThe four numbers less than or equal to 300 are 30, 60, 150 and 300.\n\n30 = 21 * 31 * 51 , 60 =  22 * 31 * 51, 150 =  21 * 31 * 52 and 300 =  22 * 31 * 52. \nIn the 4 numbers, the minimum powers for 2, 3 and 5 are 1, 1 and 1 or more than them in every case.\n\n Examples: \nInput: \n['1', '3', '2 3 5', '2 1 2', '1 1 1']\nOutput: \n ['540']\n",
  "644": "Problem: \nThere are $N$ friends in a group. Each of them have $A_{i}$ candies.\nCan they share all of these candies among themselves such that each one of them have equal no. of candies.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains of a single line of input, an integer $N$ denoting no. of friends in the group. \n- Next line contains $N$ space separated integers $A_{i}$  denoting the no. candies  $i^{th}$ friend has.\n\n-----Output:-----\nFor each testcase, output $\"Yes\"$ if it is possible to share equally else $\"No\"$ (without \" \").\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 100$\n- $0 \\leq A_{i} \\leq 1000$\n\n-----Sample Input:-----\n1\n\n3\n\n1 2 3\n\n-----Sample Output:-----\nYes\n\n-----EXPLANATION:-----\nEach of them have $2$ candies after sharing.\n\n Examples: \nInput: \n['1', '3', '1 2 3']\nOutput: \n ['Yes']\n",
  "645": "Problem: \nChef has $K$ chocolates and he wants to distribute them to $N$ people (numbered $1$ through $N$). These people are standing in a line in such a way that for each $i$ ($1 \\le i \\le N-1$), person $i$ and person $i+1$ are adjacent.\nFirst, consider some way to distribute chocolates such that for each valid $i$, the number of chocolates the $i$-th person would receive from Chef is $A_i$ and the sum $S_1 = \\sum_{i=1}^{N-1} \\left|A_i - A_{i+1}\\right|$ is minimum possible. Of course, each person must receive a non-negative integer number of chocolates.\nThen, Chef wants to create a new sequence $B_1, B_2, \\ldots, B_N$ by rearranging (permuting) the elements of the sequence $A_1, A_2, \\ldots, A_N$. For each valid $i$, the number of chocolates the $i$-th person actually receives from Chef is $B_i$. Chef wants to distribute the chocolates (choose $B_1, B_2, \\ldots, B_N$ by permuting the sequence $A$ and give $B_i$ chocolates to the $i$-th person for each valid $i$) in such a way that $S_2 = \\sum_{i=1}^{N-1} \\left|B_i \u2013 B_{i+1}\\right|$ is maximum possible. You need to find the maximum value of $S_2$.\nIt is guaranteed that $S_2$ does not depend on the exact choice of the sequence $A_1, A_2, \\ldots, A_N$, as long as it is a sequence that minimises $S_1$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains a single integer $K$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum value of the sum $S_2$.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 10^5$\n- $2 \\le K \\le 10^{100,000}$\n\n-----Subtasks-----\nSubtask #1 (30 points): $2 \\le N, K \\le 1,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n3\n2\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: To minimise $S_1$, Chef could give $1$ chocolate to person $1$ and $1$ chocolate to person $2$, so $S_1 = |1-1| + |1-0| = 1$.\nTo maximise $S_2$, Chef can give $1$ chocolate to person $1$ and $1$ chocolate to person $3$, since the sequence $B = (1, 0, 1)$ is a permutation of $A = (1, 1, 0)$. Then, $S_2 = |1-0| + |0-1| = 2$.\n\n Examples: \nInput: \n['1', '3', '2']\nOutput: \n ['2']\n",
  "646": "Problem: \nGiven a string $s$.\nYou can perform the following operation on given string any number of time.\nDelete two successive elements of the string if they are same.\nAfter performing the above operation you have to return the least possible length of the string.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, a string $s$. \n\n-----Output:-----\nFor each testcase, output in a single line answer- minimum length of string possible after performing given operations.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq length of string \\leq 10^5$\n$s$ contains only lowercase letters.\n\n-----Sample Input:-----\n3\nabccd\nabbac\naaaa\n\n-----Sample Output:-----\n3\n1\n0\n\n-----EXPLANATION:-----\n- In first case, $\"abd\"$ will be final string.\n- in second case, $\"c\"$ will be final string\n\n Examples: \nInput: \n['3', 'abccd', 'abbac', 'aaaa']\nOutput: \n ['3', '1', '0']\n",
  "647": "Problem: \nAshley wrote a random number generator code.\nDue to some reasons, the code only generates random positive integers which are not evenly divisible by 10. She gives $N$ and $S$ as input to the random number generator. The code generates a random number with number of digits equal to $N$ and sum of digits equal to $S$. The code returns -1 if no number can be generated. Print \"-1\" in such cases (without quotes). Else print the minimum possible product of digits of the random number generated.\n\n-----Input:-----\n- First line will contain a single integer $T$, the number of testcases. \n- Each testcase consists of two space separated integers, $N$ and $S$. \n\n-----Output:-----\nFor each testcase, output the answer on a new line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 18$\n- $1 \\leq S \\leq 5 * N$\n\n-----Sample Input:-----\n2\n1 5\n\n2 2\n\n-----Sample Output:-----\n5\n\n1\n\n-----EXPLANATION:-----\nIn first testcase, the only possible number of length 1 having digit sum 5 is 5. And it's product of digits is 5. \nIn second testcase,  only possible two digit number as a generator output is 11(as 20 is divisible by 10, it is never generated) and product of it's digits is 1.\n\n Examples: \nInput: \n['2', '1 5', '2 2']\nOutput: \n ['5', '1']\n",
  "648": "Problem: \nChef is going to organize a hill jumping competition and he is going to be one of the judges in it. In this competition there are N hills in a row, and the initial height of i-th hill is Ai. Participants are required to demonstrate their jumping skills by doing what the judges tell them.\nJudges will give each participant a card which has two numbers, i and k, which means that the participant should start at the i-th hill and jump k times, where one jump should be from the current hill to the nearest hill to the right which is strictly higher (in height) than the current one. If there is no such hill or its distance (i.e. difference between their indices)  is more than 100 then the participant should remain in his current hill.\nPlease help Chef by creating a program to use it during the competitions. It should read the initial heights of the hill and should support two kinds of operations:\nType 1: Given a two numbers: i and k, your program should output the index of the hill the participant is expected to finish if he starts from the i-th hill (as explained above).\nType 2: Given three numbers: L, R, X, the heights of all the hills between L and R, both end points inclusive, should be increased by X (if X is negative then their height is decreased).\n\n-----Input-----\n- First line contains two integers N and Q, denoting the number of hills and number of operations respectively.\n- Second line contains N space-separated integers A1, A2, ..., AN denoting the initial heights of the hills.\n- Each of the next Q lines describes an operation. If the first integer is equal to 1, it means that the operation is of Type 1, and it will be followed by two integers i and k. Otherwise the first number will be equal to 2, and it means that the operation is of Type 2, and so it will be followed by three integers L, R and X.\n\n-----Output-----\nFor each operation of Type 1, output the index of the hill in which the participant will finish.\n\n-----Constraints-----\n- 1 \u2264 N, Q \u2264 100,000\n- 1 \u2264 Ai \u2264 1,000,000\n- 1 \u2264 L \u2264 R \u2264 N\n- -1,000,000 \u2264 X \u2264 1,000,000\n- 1 \u2264 i, k \u2264 N\n\n-----Subtasks-----\n- Subtask 1 (20 points) : 1 \u2264 N, Q \u2264 1,000 \n- Subtask 2 (80 points) : Original constraints\n\n-----Example-----\nInput:\n5 3\n1 2 3 4 5\n1 1 2\n2 3 4 -1\n1 1 2\n\nOutput:\n3\n4\n\n-----Explanation-----\nThe initial heights are (1, 2, 3, 4, 5). The first operation is of Type 1 and starts from Hill 1 and wants to jump twice. The first jump will be to Hill 2, and the second jump will be to Hill 3. Hence the output for this is 3.\nThe second operation changes the heights to (1, 2, 2, 3, 5).\nThe last operation starts from Hill 1. The first jump is to Hill 2. But the next jump will skip Hill 3 (because it's height is not strictly greater than the current hill's height), and will go to Hill 4. Hence the output is 4.\n\n Examples: \nInput: \n['5 3', '1 2 3 4 5', '1 1 2', '2 3 4 -1', '1 1 2']\nOutput: \n ['3', '4']\n",
  "651": "Problem: \nIn these quarantine days, Chef and Chefina are getting bored. So, Chef came up with a game for her. He gets a pack of cards with numbers written on them. Chef then asks her to remove cards from the pack in the following manner: Chefina can choose any 3 cards at a time, having unique values, and remove the smallest and largest of them, and put back the middle one. For example, say Chefina chooses 3 cards that have numbers $x$, $y$, $z$ on them, such that $x <= y <= z$. Then she can throw away cards with number $x$ and $z$, but has to put the card with number $y$ on it back into the pack. Chefina can repeat this process any number of times. As soon as the pack contains cards with unique numbers, the game ends. If Chefina can determine the count of cards that will remain in the end, and tell it to Chef beforehand, she wins the game. Chefina asks for your help to win this game. Given the number written on the cards, help her find the count of cards in the pack when she wins.\n$Note:$ You need to maximize the array length or the number of unique elements\n\n-----Input:-----\n- The first line of the input consists of a single integer $T$, denoting the number of test cases. Description of $T$ test cases follow.\n- The first line of each test case consists of a single integer $N$, denoting the number of cards in the pack\n- The next line consists of $N$ space separated numbers $A1$, $A2$ \u2026 $An$. For each valid $i (1 <= i <= N)$, the $i$-th card has the number $Ai$ written on it.\n\n-----Output:-----\n- For each test case, print the count of the cards that remain in the end.\n\n-----Constraints-----\n- $1 \\leq T \\leq 500$\n- $1 \\leq N \\leq 10^6$\n- $1 \\leq Ai \\leq N$\n\n-----Subtasks-----\n- 30 points : $1 \\leq T \\leq 20$; $ 1 \\leq N \\leq 5*10^5$\n- 70 points : Original constraints\n\n-----Sample Input:-----\n2\n5\n1 2 2 3 5\n9\n1 2 2 3 3 5 8 8 9\n\n-----Sample Output:-----\n3\n5\n\n-----EXPLANATION:-----\nTest case 1:\nChefina chooses the cards with number: 2, 3, 5, throws away 2 & 5, and puts back 3. So, the pack now contains cards with numbers: 1, 2, 3. Since the pack contains cards with unique numbers only, these are the 3 final cards. \nTest case 2:\nChefina chooses the cards with number: 2, 3, 8, throws away 2 & 8,  and puts back 3. Now the pack contains cards with numbers: 1, 2, 3, 3, 5, 8, 9. Next, she chooses cards with number: 3, 5, 8 throws away 3 & 8, and puts back 5. Now the pack contains cards with number: 1, 2, 3, 5, 9. Since the pack contains cards with unique numbers only, these are the 5 final cards.\nNote: There might be multiple options to choose the 3 cards from the pack in any turn\n\n Examples: \nInput: \n['2', '5', '1 2 2 3 5', '9', '1 2 2 3 3 5 8 8 9']\nOutput: \n ['3', '5']\n",
  "652": "Problem: \nShubham recently learned the lexicographical order in strings.\n\nNow, he has two strings s1  and  s2  of the equal size and Shubham wants to compare those two strings lexicographically.\n\nHelp Shubham with the strings comparison.\n\nNote:\n\nLetters are case insensitive. \n\n\n-----Input-----\n\nFirst line contains a integer T denoting the number of test cases. Each test case contains two strings of equal size in two separate lines.\n\n-----Output-----\n\nFor each test case,\n\nIf s1 < s2, print \"first\".\n\nIf s1 > s2, print \"second\".\n\nIf s1=s2, print \"equal\".\n\n\nin separate lines.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10^2\n- 1 \u2264 Length of the string \u2264 500\n\n-----Example-----\nInput:\n2\nabc\nacb\nAB\nba\n\nOutput:\nfirst\nfirst\n\n Examples: \nInput: \n['2', 'abc', 'acb', 'AB', 'ba']\nOutput: \n ['first', 'first']\n",
  "653": "Problem: \nYou have a laser with P amount of energy in it. You are playing a game where you have to use the laser to destroy some crystals, each with some health of their own. Initially, you have 0 points.\nEach crystal has an associated health. The health of the ith crystal is given by health[i]. You can perform one of the two actions:\n- \nAt the cost of health[i] energy, you can destroy the ith crystal and gain 1 point. You can only perform this action if your laser has atleast health[i] energy in it.\n- \nAt the cost of 1 point, you can destroy the ith crystal and refuel the laser's energy by an amount equal to health[i]. This action can only be performed if you have atleast one point.\nNote: Each crystal can only be destroyed once.\nDetermine the maximum number of points you can obtain by destroying any number of crystals and performing either action as you wish.\n\n-----Input:-----\n- First line will contain n, number of crystals. \n- Second line will contain space separated integers, health of each crystal.\n- Third line will contain an integer P, initial energy of the laser.\n\n-----Output:-----\nPrint the largest number of points we can have after destroying any number of crystals.\n\n-----Constraints-----\n- health.length <= 1000\n- 0 <= health[i] < 10000\n- 0 <= P < 10000\n\n-----Subtasks-----\n- 40 points : 1 <= health.length <= 100\n- 60 points : health.length > 100\n\n-----Sample Input 1:-----\n1\n200\n100\n\n-----Sample Output 1:-----\n0\n\n-----Explanation:-----\nThe laser initially has only 100 energy. Since the only crystal requires 200 energy to destroy, we cannot perform any action here, and the game ends. The number of points is zero.\n\n-----Sample Input 2:-----\n2\n100 200\n150\n\n-----Sample Output 2:-----\n1\n\n-----Explanation:-----\nThe laser has 150 energy. We can consume 100 energy and destroy the first crystal and gain 1 point. The remaining energy is 50, which is not enough to destroy the other crystal. We end the game here as we have the maximum possible points attainable.\n\n Examples: \nInput: \n['1', '200', '100']\nOutput: \n ['0']\n",
  "654": "Problem: \n\tThree numbers A, B and C are the inputs. Write a program to find second largest among them.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three integers A, B and C. \n\n-----Output-----\nFor each test case, display the second largest among A, B and C, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 11 400\n10213 312 10\n10 3 450\n\nOutput\n\n120\n312\n10\n\n Examples: \nInput: \n['3', '120 11 400', '10213 312 10', '10 3 450']\nOutput: \n ['120', '312', '10']\n",
  "655": "Problem: \nChef had a sequence of positive integers with length $N + K$. He managed to calculate the arithmetic average of all elements of this sequence (let's denote it by $V$), but then, his little brother deleted $K$ elements from it. All deleted elements had the same value.\nChef still knows the remaining $N$ elements \u2014 a sequence $A_1, A_2, \\ldots, A_N$. Help him with restoring the original sequence by finding the value of the deleted elements or deciding that there is some mistake and the described scenario is impossible.\nNote that the if it is possible for the deleted elements to have the same value, then it can be proven that it is unique. Also note that this value must be a positive integer.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains three space-separated integers $N$, $K$ and $V$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the value of the deleted elements, or $-1$ if there is a mistake.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N, K \\le 100$\n- $1 \\le V \\le 10^5$\n- $1 \\le A_i \\le 10^5$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n3 3 4\n2 7 3\n3 1 4\n7 6 5\n3 3 4\n2 8 3\n\n-----Example Output-----\n4\n-1\n-1\n\n Examples: \nInput: \n['3', '3 3 4', '2 7 3', '3 1 4', '7 6 5', '3 3 4', '2 8 3']\nOutput: \n ['4', '-1', '-1']\n",
  "656": "Problem: \nWrite a program to obtain a number $N$ and increment its value by 1 if the number is divisible by 4 $otherwise$ decrement its value by 1.\n\n-----Input:-----\n- First line will contain a number $N$.\n\n-----Output:-----\nOutput a single line, the new value of the number.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n5\n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----\nSince 5 is not divisible by 4 hence, its value is decreased by 1.\n\n Examples: \nInput: \n['5']\nOutput: \n ['4']\n",
  "657": "Problem: \nYou will be given a two-dimensional array with row consisting values 0 or 1.  \nA move consists of choosing any column or row, and toggling all the 0\u2019s as 1\u2019s and 1\u2019s as 0\u2019s.  \nAfter making the required moves, every row represents a binary number and the score of the matrix will be sum of all the numbers represented as binary numbers in each row.  \nFind the highest possible score.  \n$Example:$ \nInput:\n\n0 0 1 1\n\n1 0 1 0\n\n1 1 0 0  \nOutput:\n\n39\nExplanation:\n\nToggled to\n\n1 1 1 1\n\n1 0 0 1\n\n1 1 1 1  \n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n\n-----Input:-----\n- First line will contains $m$, $n$ for the size of the 2-D array. \n- Contains $m$ lines of $n$ space-separated values each. \n\n-----Output:-----\nSingle integer which is the maximum score obtained by the sum of binary numbers.\n\n-----Constraints-----\n- $1 \\leq m, n \\leq 20$\n- $A[i][j] = 1$ or $0$ \n\n-----Sample Input:-----\n3 4  \n0 0 1 1  \n1 0 1 0  \n1 1 0 0  \n\n-----Sample Output:-----\n39\n\n Examples: \nInput: \n['3 4', '0 0 1 1', '1 0 1 0', '1 1 0 0']\nOutput: \n ['39']\n",
  "658": "Problem: \nA sequence of integers ($a_1, a_2, \\ldots, a_k$) is said to be UpDown, if these inequalities hold true:\n- $a_1 \\le a_2$\n- $a_2 \\ge a_3$\n- $a_3 \\le a_4$\nand so on.\nThat is, every even-indexed element should be at least as large as its adjacent elements. And every odd-indexed element should be at most as large as its adjacent elements. Formally, $a_{2i} \\ge a_{2i+1}$ and $a_{2i+1} \\le a_{2i+2}$, for all valid positions.\nA subsegment is a consecutive portion of a sequence. That is, a subsegment of ($b_1, b_2, \\ldots, b_k$)  will be of the form ($b_i, b_{i+1}, \\ldots, b_j$), for some $i$ and $j$.\nYou are given a sequence ($s_1, s_2, \\ldots, s_n$). You can insert at most one integer anywhere in this sequence. It could be any integer. After inserting an integer (or choosing not to), suppose you have the new sequence ($t_1, t_2, \\ldots, t_m$). Note that $m$ will either be $n$+1 or $n$. You want to maximize the length of the longest subsegment of ($t_1, t_2, \\ldots, t_m$) which is UpDown, and output the length of that.\n\n-----Input-----\n- The first line contains a single integer, $T$, which is the number of testcases. The description of each testcase follows.\n- The first line of every testcase contains a single integer, $n$, which is the number of integers in the original sequence.\n- The second line contains $n$ integers: $s_1, s_2, \\ldots, s_n$, which forms the original sequence.\n\n-----Output-----\nFor each testcase output a single line containing one integer, which should be the length of the longest UpDown subsegment that you can get after inserting at most one integer.\n\n-----Constraints-----\n- $1 \\le T \\le 2$\n- $1 \\le n \\le 10^6$\n- $1 \\le s_i \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le n \\le 100$\nSubtask #2 (10 points): $1 \\le n \\le 10000$\nSubtask #3 (70 points): Original constraints\n\n-----Sample Input-----\n2\n7\n100 1 10 3 20 25 24\n5\n3 3 2 4 1\n\n-----Sample Output-----\n7\n6\n\n-----Explanation-----\nTestcase 1: The original sequence is (100, 1, 10, 3, 20, 25, 24). Suppose you insert the element 5 between the elements 20 and 25, you will get the new sequence (100, 1, 10, 3, 20, 5, 25, 24). The longest UpDown subsegment of this sequence is (1, 10, 3, 20, 5, 25, 24), whose length is 7. You can check that you cannot do any better, and hence the answer is 7.\nTestcase 2: The original sequence is (3, 3, 2, 4, 1). Suppose you insert the element 4 at the end, you will get the new sequence (3, 3, 2, 4, 1, 4). This entire sequence is UpDown, and so the longest UpDown subsegment of this sequence is (3, 3, 2, 4, 1, 4), whose length is 6. You can check that you cannot do any better, and hence the answer is 6.\n\n Examples: \nInput: \n['2', '7', '100 1 10 3 20 25 24', '5', '3 3 2 4 1']\nOutput: \n ['7', '6']\n",
  "659": "Problem: \nBinod is a youtuber and he is busy in the fame of social media so he asked you to help him solve a problem.\nYou have been given an array of $positive$ $integers$ $a_{1},a_{2},a_{3},...,a_{i},...,a_{n}$ of size n.You have to find the smallest length of the subarray such that the length of the subarray must be $strictly$ greater than k and it's sum also must be $strictly$ greater than s. \n\n-----Input Format :------\n- The first line of input contains three space-separated integers n, k and s\n- The second line contains n space-separated integers,describing the array a \n\n-----Output Format:-----\n- Print a single integer :- The smallest length of subarray if exists, Otherwise print \"-1\" (without quotes) \n\n-----Constraints:------\n- $1 \\leq n, k \\leq 10^{6}$\n- $1 \\leq  a_{1},a_{2},a_{3},...,a_{i},...,a_{n}\\leq 10^{9}$ \n- $1 \\leq s \\leq 10^{15}$ Subtask #1 (30 points):\n- $1 \\leq n, k \\leq 10^{3}$ Subtask #2 (70 points):\n$Original$ $Constraints$ \n\n-----Sample Test Cases:------\n\n-----Example 1:-----\n5 1 5\n\n1 2 3 4 5 \n\n-----Output :-----\n2 \n\n-----Explanation-----\n$\\textbf{There are two possibles answers} :$ \n- Index starts at 3 and ends at 4 have a sum of 7 which is strictly greater than 5 and has a length of subarray greater than 1.  \n- Index starts at 4 and ends at 5 have a sum of 9 which is strictly greater than 5 and has a length of subarray greater than 1.\nAny of the possible scenarios gives the same answer.\n\n-----Example 2:-----\n3 2 1\n\n9 9 1 \n\n-----Output :-----\n3\n\n-----Explanation :-----\n- Each value in array index satisfies the condition sum greater than 1 but to satisfy the condition of length greater than 2 choose the subarray of length 3\n\n Examples: \nInput: \n['1:', '5 1 5', '1 2 3 4 5']\nOutput: \n ['2']\n",
  "660": "Problem: \nThe chef was busy in solving algebra, he found some interesting results, that there are many numbers which can be formed by the sum of the factorial of the digits, he wrote all those interesting numbers in the diary(in increasing order) and went to sleep. Cheffina came and stole his diary, in morning chef found that his diary is missing. Now the chef wants your help to find those numbers, Chef asks you whether N is that interesting number or not. If N is an interesting number then print 1. Else print 0. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $0 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n2\n2\n10\n\n-----Sample Output:-----\n1\n0\n\n-----EXPLANATION:-----\nFor 1) Factorial of 2 is 2, hence it is an interesting number.\nFor 2) conversion for 10 is 1! + 0! = 2, which is not equal to 10, hence not an interesting number.\n\n Examples: \nInput: \n['2', '2', '10']\nOutput: \n ['1', '0']\n",
  "661": "Problem: \nRaju has created a program to find the square root of a number. But his program can store only integers. Being a newbie, he didn't know about rounding the numbers. Hence his program returns the absolute value of the result if possible. For example, sqrt(3) = 1.73205080757\u2026\u2026. His program will return 1\nGiven a number $N$, and it's integral square root $S$, His instructor will consider the answer correct if Difference between $N$ and the square of $S$ is within less than or equal to $X$% of $N$.\n\n-----Input:-----\n- First line contains $T$ no. of test cases and $X$ separated by space\n- For every test case, a line contains an integer $N$\n\n-----Output:-----\nFor every test case, print yes  if his programs return square root and (N-(S^2)) <= 0.01XN . For everything else, print no on a new line\n\n-----Constraints-----\n10 points:\n- $1 \\leq T \\leq 10$\n- $0\\leq N \\leq 10$\n20 points:\n- $1 \\leq T \\leq 30000$\n- $-10^9 \\leq N \\leq 10^9$\n70 points:\n- $1 \\leq T \\leq 10^6$\n- $-10^9 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n2 20\n5\n3\n\n-----Sample Output:-----\nyes\nno\n\n-----EXPLANATION:-----\nIn #1, sqrt(5) = 2.2360679775. Taking integral value, S = 2.\n\nS2 = 4. Difference=1 which is within 20% of 5\nIn #1, sqrt(3) = 1.73205080757. Taking integral value, S = 1.\n\nS2 = 1. Difference=2  which is not within 20% of 3\n\n Examples: \nInput: \n['2 20', '5', '3']\nOutput: \n ['yes', 'no']\n",
  "662": "Problem: \nKabir wants to impress Tara by showing her his problem solving skills. He has decided to give the correct answer to the next question which will be asked by his Algorithms teacher.\nThe question asked is:\nFind the sum of alternate consecutive d$d$ odd numbers from the range L$L$ to R$R$ inclusive.\nif d$d$ is 3 and L$L$ is 10 and R$R$ is 34, then the odd numbers between 10 and 34 are 11,13,15,17,19,21,23,25,27,29,31,33$11,13,15,17,19,21,23,25,27,29,31,33$, and the d$d$ alternate odd numbers are 11,13,15,23,25,27$11,13,15,23,25,27$.\nYou are a friend of Kabir, help him solve the question.\nNote:$Note:$ Number of odd number between L$L$ and R$R$ (both inclusive) is a multiple of d$d$.\n\n-----Input:-----\n- First line will contain T$T$, number of test cases.  \n- First line of each test case contains one integer d$d$ . \n- Second line of each test case contains two space separated integer L$L$ and R$R$.\n\n-----Output:-----\nFor each test case, print the sum modulo 1000000007.\n\n-----Constraints:-----\n- 1\u2264T\u2264106$1 \\leq T \\leq 10^6$\n- 1\u2264d\u2264103$1 \\leq d \\leq 10^3$\n- 1\u2264L<R\u2264106$1 \\leq L < R \\leq 10^6$\n\n-----Sample Input:-----\n1\n3 \n\n10 33\n\n-----Sample Output:-----\n114\n\n-----EXPLANATION:-----\nSum of alternate odd numbers i.e, 11,13,15,23,25,27 is 114\n\n Examples: \nInput: \n['1', '3', '10 33']\nOutput: \n ['114']\n",
  "663": "Problem: \nYou are given a string $S$ and an integer $L$. A operation is described as :- \"You are allowed to pick any substring from first $L$ charcaters of $S$, and place it at the end of the string $S$. \nA string $A$ is a substring of an string $B$ if $A$ can be obtained from $B$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) elements from the end.\nFind the lexographically smallest string after performing this opertaion any number of times (possibly zero).\nFor example $S$ = \"codechef\" and $L=4$. Then, we can take substring \"ode\" from S[0-3] and place it at end of the string $S$ = \"cchefode\".\n\n-----Input:-----\n- First line will contain $T$, number of testcases. \n- Then each of the N lines contain an integer $L$ and a string $S$. \n\n-----Output:-----\nFor each testcase, output in a single line answer lexographically smallest string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^4$\n- $2 \\leq |S| \\leq 10^3$\n- $1 \\leq L \\leq N $\n\n-----Sample Input:-----\n2\n1 rga\n2 cab\n\n-----Sample Output:-----\narg\nabc\n\n-----EXPLANATION:-----\nIn the first testcase:\nsubstring 'r' is picked and placed at the end of the string. rga -> gar\nThen performing same operation gives :- gar -> arg\n\n Examples: \nInput: \n['2', '1 rga', '2 cab']\nOutput: \n ['arg', 'abc']\n",
  "665": "Problem: \nChef organised a chess tournament, which spanned over $M$ months. There were $N$ players, and player $i$ was rated $R_i$ before the start of the tournament. To see the progress of the players, he noted their rating changes at the end of each month.\nAfter the tournament, FIDE asked Chef to find the number of players whose peak rating and peak ranking did not occur in the same month. In other words, Chef was asked to find the ratings and ranking of each player after each of the $M$ months. Then, using this data, he should find the number of players, such that the month in which they achieved their highest rating over all the months, was different from the month in which they achieved their best rank (based on ratings), over all the months. Note that we do not consider the initial rating/ranking, but only the rating and rankings after each of the $M$ months. \nFor a particular player, if there are multiple peak rating or peak ranking months, Chef was to consider the earliest of them. If multiple players had the same rating at the end of some month, they were to be given the same rank. For example, if there were $5$ players, and their ratings at the end of some month were $(2600$, $2590$, $2600$, $2600$ and $2590)$, players $1$, $3$ and $4$ were to be given the first rank, while players $2$ and $5$ should be given the fourth rank.\nAs Chef hates statistics, he asks you, his friend, to help him find this. Can you help Chef?\n\n-----Input:-----\n- The first line contains an integer $T$, the number of test cases.\n- The first line of each test case contains two space-separated integers $N$ and $M$, the number of players and the number of months that the tournament spanned over.\n- The second line of each test case contains $N$ space-separated integers, $R_1, R_2, \\ldots, R_N$ denoting the initial ratings of the players, i.e., their ratings before the start of the tournament.\n- The next $N$ lines each contain $M$ space-separated integers. The $j^{th}$ integer of the $i^{th}$ line, $C_{i,j}$ denotes the rating change of the $i^{th}$ player after the $j^{th}$ month.\n\n-----Output:-----\nFor each test case, print the number of players whose peak ratings did not occur in the same month as their peak ranking, in a new line.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N,M \\le 500$\n- $1800 \\le R_i \\le 2800$\n- $-20 \\le C_{i,j} \\le 20$\n\n-----Subtasks-----\n- 30 points : $1 \\leq N,M \\leq 50$\n- 70 points : Original constraints.\n\n-----Sample Input:-----\n2\n3 3\n2500 2500 2520\n10 -5 -20\n10 15 20\n-15 17 13\n2 3\n2125 2098\n-20 10 -10\n10 10 -20\n\n-----Sample Output:-----\n2\n2\n\n-----Explanation:-----\nTest case 1:\n- \nThe ratings for player $1$ after each month are: $(2510$, $2505$ and $2485)$, while his rankings are first, third and third, respectively. Thus, his best rating and best ranking occur after the same month, i.e., after the first month.\n- \nThe ratings for player $2$ after each month are: $(2510$, $2525$ and $2545)$, while his rankings are first, first and first, respectively. His best rating occurs after the third month, while his best ranking occurs after the first month (we consider the first month even though his peak ranking is over all the months, because we consider only the earliest month where he attains the peak ranking).\n- \nThe ratings for player $3$ after each month are: $(2505$, $2522$ and $2535)$, while his rankings are third, second and second, respectively. His best rating occurs after the third month, while his best ranking occurs after the second month.\nSo there are two players ($2$ and $3$), whose peak ratings did not occur in the same month as their peak ranking, and hence the answer is 2.\nTest case 2:\n- \nThe ratings for player $1$ after each month are: $(2105$, $2115$ and $2105)$, while his rankings are second, second and first, respectively. Best rating is after second month, but best ranking is after third month.\n- \nThe ratings for player $2$ after each month are: $(2108$, $2118$ and $2098)$, while his rankings are first, first and second, respectively. Best rating is after second month, but best ranking is after first month.\nSo there are two players ($1$ and $2$), whose peak ratings did not occur in the same month as their peak ranking, and hence the answer is 2.\n\n Examples: \nInput: \n['2', '3 3', '2500 2500 2520', '10 -5 -20', '10 15 20', '-15 17 13', '2 3', '2125 2098', '-20 10 -10', '10 10 -20']\nOutput: \n ['2', '2']\n",
  "666": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n34\n123\n456\n789\n1234\n5678\n9101112\n13141516\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '12', '34', '123', '456', '789', '1234', '5678', '9101112', '13141516']\n",
  "667": "Problem: \nDiana is planning to make a very long journey. Her journey consists of $N$ bus routes, numbered from $1 to N$ in the order she must take them. The buses themselves are very fast but do not run often. The $i-th$ bus route only runs every $Xi$ days.\n\nMore specifically, she can only take the $i-th$ bus on day $Xi, 2Xi, 3Xi$, and so on. Since the buses are very fast, she can take multiple buses on the same day.\n\nDiana must finish her journey by day D, but she would like to start the journey as late as possible. What is the latest day she could take the first bus, and still finish her journey by day $D$?\nIt is guaranteed that it is possible for Diana to finish her journey by day $D$.  \n\n-----Input:-----\nThe first line of the input gives the number of test cases, $T$. $T$ test cases follow. Each test case begins with a line containing the two integers N and D. Then, another line follows containing $N$ integers, the $i-th$ one is $Xi$.\n\n-----Output:-----\nFor each test case, output one line containing an integer $Y$, where $Y$ is the latest day she could take the first bus, and still finish her journey by day $D$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq Xi \\leq D.$\n- $1 \\leq N \\leq 1000.$\nIt is guaranteed that it is possible for Diana to finish her journey by day $D$.\n\n-----Sample Input:-----\n3\n\n3 10\n\n3 7 2\n\n4 100\n\n11 10 5 50\n\n1 1\n\n1  \n\n-----Sample Output:-----\n6  \n\n99\n\n1  \n\n-----EXPLANATION:-----\nIn Sample $Case 1$, there are $N = 3$ bus routes and Bucket must arrive by day $D = 10$. She could:\n- Take the 1st bus on day 6 $(X1 = 3)$,\n- Take the 2nd bus on day 7 $(X2 = 7)$ and\n- Take the 3rd bus on day 8 $(X3 = 2)$.  \nIn Sample $Case 2$, there are $N = 4$ bus routes and Bucket must arrive by day $D = 100$. She could:\n- Take the 1st bus on day 99 $(X1 = 11)$,\n- Take the 2nd bus on day 100$ (X2 = 10)$,\n- Take the 3rd bus on day 100 $(X3 = 5)$ and\n- Take the 4th bus on day 100 $(X4 = 50)$,  \nIn Sample Case 3, there is $N = 1$ bus route, and Bucket must arrive by day $D = 1$. She could:\n- Take the 1st bus on day 1 $(X1 = 1)$.\n\n Examples: \nInput: \n['3', '3 10', '3 7 2', '4 100', '11 10 5 50', '1 1', '1']\nOutput: \n ['6', '99', '1']\n",
  "669": "Problem: \nNadaca is a country with N$N$ cities. These cities are numbered 1$1$ through N$N$ and connected by M$M$ bidirectional roads. Each city can be reached from every other city using these roads.\nInitially, Ryan is in city 1$1$. At each of the following K$K$ seconds, he may move from his current city to an adjacent city (a city connected by a road to his current city) or stay at his current city. Ryan also has Q$Q$ conditions (a1,b1),(a2,b2),\u2026,(aQ,bQ)$(a_1, b_1), (a_2, b_2), \\ldots, (a_Q, b_Q)$ meaning that during this K$K$-second trip, for each valid i$i$, he wants to be in city ai$a_i$ after exactly bi$b_i$ seconds.\nSince you are very good with directions, Ryan asked you to tell him how many different trips he could make while satisfying all conditions. Compute this number modulo 109+7$10^9 + 7$. A trip is a sequence of Ryan's current cities after 1,2,\u2026,K$1, 2, \\ldots, K$ seconds.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains three space-separated integers N$N$, M$M$ and K$K$.\n- Each of the next M$M$ lines contains two space-separated integers u$u$ and v$v$ denoting a road between cities u$u$ and v$v$.\n- The next line contains a single integer Q$Q$.\n- Q$Q$ lines follow. For each i$i$ (1\u2264i\u2264Q$1 \\le i \\le Q$), the i$i$-th of these lines contains two space-separated integers ai$a_i$ and bi$b_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of trips Ryan can make, modulo 109+7$10^9+7$.\n\n-----Constraints-----\n- 1\u2264T\u226450$1 \\le T \\le 50$\n- 1\u2264N,M,K,Q\u22649,000$1 \\le N, M, K, Q \\le 9,000$\n- 1\u2264ui,vi\u2264N$1 \\le u_i, v_i \\le N$ for each valid i$i$\n- ui\u2260vi$u_i \\neq v_i$ for each valid i$i$\n- there is at most one road between each pair of cities\n- each city is reachable from every other city\n- 1\u2264ai\u2264N$1 \\le a_i \\le N$ for each valid i$i$\n- 0\u2264bi\u2264K$0 \\le b_i \\le K$ for each valid i$i$\n- the sum of N$N$ over all test cases does not exceed 9,000$9,000$\n- the sum of K$K$ over all test cases does not exceed 9,000$9,000$\n- the sum of M$M$ over all test cases does not exceed 9,000$9,000$\n- the sum of Q$Q$ over all test cases does not exceed 9,000$9,000$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- the sum of N$N$ over all test cases does not exceed 400$400$\n- the sum of K$K$ over all test cases does not exceed 400$400$\n- the sum of M$M$ over all test cases does not exceed 400$400$\n- the sum of Q$Q$ over all test cases does not exceed 400$400$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n3\n4 3 3\n1 2\n1 3\n1 4\n0\n4 3 3\n1 2\n1 3\n1 4\n1\n2 2\n4 3 3\n1 2\n1 3\n1 4\n1\n2 1\n\n-----Example Output-----\n28\n4\n6\n\n Examples: \nInput: \n['3', '4 3 3', '1 2', '1 3', '1 4', '0', '4 3 3', '1 2', '1 3', '1 4', '1', '2 2', '4 3 3', '1 2', '1 3', '1 4', '1', '2 1']\nOutput: \n ['28', '4', '6']\n",
  "670": "Problem: \nSereja has an array A of N positive integers : A[1], A[2], A[3], ... , A[N]. \n\nIn a single operation on the array, he performs the following two steps :  \n\n- Pick two indices i, j s.t. A[i] > A[j]\n- A[i] -= A[j]\n\nSereja can apply these operations any number of times (possibly zero), such that the sum of resulting elements of the array is as small as possible.\n\nHelp Sereja find this minimum sum.\n\n-----Input-----\n\nFirst line of input contains an integer T - the number of test cases. T test cases follow.\n\nFirst line of each test case contains the integer N. The next line contains N integers \u2014 A[1], A[2], A[3], ... , A[N].\n\n-----Output-----\nFor each test case, output a single line with the answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 A[i] \u2264 109\n\n-----Example-----\nInput:\n2\n1\n1\n3\n2 4 6\n\nOutput:\n1\n6\n\n-----Explanation-----\nExample case 2. In this case, one possible way in which Sereja can perform the operations could be as follows. \n\n-  Pick i = 2, j = 1. A[2] -= A[1]. Now the resulting array would be [2, 2, 6].\n-  Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 4].\n-  Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 2]. \n\nAs the resulting array is [2 2 2], so the sum is 6.\n\n Examples: \nInput: \n['2', '1', '1', '3', '2 4 6']\nOutput: \n ['1', '6']\n",
  "671": "Problem: \nChef is going to start playing Fantasy Football League (FFL) this season. In FFL, each team consists of exactly $15$ players: $2$ goalkeepers, $5$ defenders, $5$ midfielders and $3$ forwards. Chef has already bought $13$ players; he is only missing one defender and one forward.\nThere are $N$ available players (numbered $1$ through $N$). For each valid $i$, the $i$-th player is either a defender or a forward and has a price $P_i$. The sum of prices of all players in a team must not exceed $100$ dollars and the players Chef bought already cost him $S$ dollars.\nCan you help Chef determine if he can complete the team by buying one defender and one forward in such a way that he does not exceed the total price limit?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $S$.\n- The second line contains $N$ space-separated integers $P_1, P_2, \\ldots, P_N$.\n- The last line contains $N$ space-separated integers. For each valid $i$, the $i$-th of these integers is $0$ if the $i$-th player is a defender or $1$ if the $i$-th player is a forward.\n\n-----Output-----\nFor each test case, print a single line containing the string \"yes\" if it is possible to build a complete team or \"no\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $13 \\le S \\le 100$\n- $1 \\le P_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n4 90\n3 8 6 5\n0 1 1 0\n4 90\n5 7 6 5\n0 1 1 0\n\n-----Example Output-----\nyes\nno\n\n-----Explanation-----\nExample case 1: If Chef buys the $1$-st and $3$-rd player, the total price of his team is $90 + 9 = 99$, which is perfectly fine. There is no other valid way to pick two players.\nExample case 2: Chef cannot buy two players in such a way that all conditions are satisfied.\n\n Examples: \nInput: \n['2', '4 90', '3 8 6 5', '0 1 1 0', '4 90', '5 7 6 5', '0 1 1 0']\nOutput: \n ['yes', 'no']\n",
  "672": "Problem: \nIn my town ,there live a coder named Chef . He is a cool programmer . One day , he participate in a programming contest ,the contest give him only one problem . If he can\u2019t solve the problem ,the problem setter will kill him . But the round allow you to help Chef. Can you save the life of Chef from problem setter ? :p\nYou are given two point of a straightline in X and Y axis and they are A(x1 , y1) and B(x2 ,y2) . Problem setter will give you another point C(x3 , y3) . If C exist in AB straightline ,then print \u201cYES\u201d . Otherwise ,print \u201cNO\u201d in first line and print the minimum distance from C to AB straightline in second line .\nPlease , save the life of Chef .\nNote : It is not possible that A and B point is similar .\n\n-----Input:-----\nThe first line of the input contains a single integer t (1\u2264t\u2264100) \u2014 the number of test cases .\nEach test case starts with four integers( x1, y1 , x2 , y2 ) in first line .\nNext line contains a single number q ,the number of queries . Each query contains two integers ( x3 ,y3 )\n\n-----Output:-----\nPrint , q number of \u201cYES\u201d or \u201cNO\u201d (as it mentioned above) in each test case .For every test case , print \u201cTest case : i \u201d ( 1<= i <=T )\n\n-----Constraints-----\n-1000 <=  x1 , y1 , x2 , y2 , x3 , y3 <= 1000\n\n-----Sample Input:-----\n2\n3  5  6  5\n2\n4  5\n6  8\n3  4  7  10\n1\n7  4\n\n-----Sample Output:-----\nTest case : 1\nYES\nNO\n3.000000\nTest case : 2\nNO\n3.328201\n\n Examples: \nInput: \n['2', '3  5  6  5', '2', '4  5', '6  8', '3  4  7  10', '1', '7  4']\nOutput: \n ['Test case : 1', 'YES', 'NO', '3.000000', 'Test case : 2', 'NO', '3.328201']\n",
  "673": "Problem: \nIts Christmas time and Santa has started his ride to deliver gifts to children waiting for him in a 1-dimentional city. All houses in this city are on a number line numbered as 1, 2, 3\u2026 and so on. Santa wants to deliver to houses from n to m, but he found that all the kids living at positions that are divisible by a, a+d, a+2d, a+3d or a+4d are naughty and he does not want to deliver them any gifts. Santa wants to know how many gifts he has to carry before leaving to the city given that there is only one kid in a house. Help him out!\nFormally, Given $m, n, a, d \\in \\mathbb{N}$ where $n < m$, find the number of $x \\in \\{n, n+1, ..., m-1, m\\}$ such that $x$ is not divisible by $a$, $a+d$, $a+2d$, $a+3d$ or $a+4d$\n\n-----Input-----\nThe first line is the number $t$, corresponding to number of test cases\\\nThis is followed by $t$ lines of the format: $n$ $m$ $a$ $d$\n\n-----Output-----\nFor each test case, print a single number that is the number of gifts Santa should pack.\n\n-----Constraints-----\n- $1 < m, n, a \\leq 2^{32}$\n- $1 < d \\leq 2^{10}$\n\n-----Sample Input:-----\n1\n2 20 2 1\n\n-----Sample Output:-----\n5\n\n-----Explanation:-----\nIn the range {2, 3, 4, \u2026, 19, 20}, only {7, 11, 13, 17, 19} are not divisible by 2, 3, 4, 5, or 6\n\n Examples: \nInput: \n['1', '2 20 2 1']\nOutput: \n ['5']\n",
  "674": "Problem: \nChef bought an electronic board and pen. He wants to use them to record his clients' signatures.\nThe board is a grid with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$) of pixels. Initially, all pixels are white. A client uses the electronic pen to sign on the board; whenever the pen touches a pixel, this pixel becomes black. Note that a signature may be non-continuous (a client may lift the pen while signing).\nChef stores a typical signature of his current client as a matrix of characters $A_{i, j}$, where for each valid $i$ and $j$, $A_{i, j}$ is either '1' (if the cell in the $i$-th row and $j$-th column is black) or '0' (if this cell is white). The client just signed on the board; this signature is stored in the same form as a matrix $B_{i, j}$. Chef wants to know how close this signature is to this client's typical signature.\nTwo signatures are considered the same if it is possible to choose (possibly negative) integers $dr$ and $dc$ such that for each $1 \\le i \\le N$ and $1 \\le j \\le M$, $A_{i, j} = B_{i + dr, j + dc}$. Here, if $B_{i + dr, j + dc}$ does not correspond to a valid cell, it is considered to be '0'.\nTo compare the signatures, the colours of zero or more cells must be flipped in such a way that the signatures become the same (each flipped cell may be in any matrix). The error in the client's current signature is the minimum number of cells whose colours must be flipped. Find the error in the signature.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains a string with length $M$ describing the $i$-th row of the matrix $A$.\n- $N$ more lines follow. For each valid $i$, the $i$-th of these lines contains a string with length $M$ describing the $i$-th row of the matrix $B$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the error in the current signature.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $2 \\le N, M \\le 25$\n\n-----Example Input-----\n5\n3 3\n100\n010\n000\n000\n010\n001\n4 4\n0000\n0110\n0000\n0011\n1100\n0000\n1100\n0000\n3 3\n100\n000\n001\n000\n010\n000\n3 3\n000\n010\n000\n100\n000\n001\n3 3\n111\n000\n000\n001\n001\n001\n\n-----Example Output-----\n0\n2\n1\n0\n2\n\n Examples: \nInput: \n['5', '3 3', '100', '010', '000', '000', '010', '001', '4 4', '0000', '0110', '0000', '0011', '1100', '0000', '1100', '0000', '3 3', '100', '000', '001', '000', '010', '000', '3 3', '000', '010', '000', '100', '000', '001', '3 3', '111', '000', '000', '001', '001', '001']\nOutput: \n ['0', '2', '1', '0', '2']\n",
  "675": "Problem: \nA permutation $p_1,p_2...p_N$ of $\\{1, 2, ..., N\\}$ is beautiful if $p_i \\& p_{i+1}$ is greater than 0 for every $1 \\leq i < N$ . You are given an integer $N$, and your task is toconstruct a beautiful permutation of length $N$ or determine that it's impossible.\nNote that $a \\& b$ denotes the bitwise AND of $a$ and $b$.\n\n-----Input:-----\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains a single line of input, an integer $N$.\n\n-----Output:-----\nFor each test case output $-1$ if there is no suitable permutation of length $N$, otherwise output $N$ integers in a single line which form a beautiful permutation. If there are multiple answers output any of them.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10^5$\n- The sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\n- 50 points : $1 \\leq N,T \\leq 9$\n- 50 points : Original constraints\n\n-----Sample Input:-----\n3\n4\n3\n5\n\n-----Sample Output:-----\n-1\n1 3 2\n2 3 1 5 4\n\n Examples: \nInput: \n['3', '4', '3', '5']\nOutput: \n ['-1', '1 3 2', '2 3 1 5 4']\n",
  "676": "Problem: \nThere is an event in DUCS where boys get a chance to show off their skills to impress girls. The boy who impresses the maximum number of girls will be honoured with the title \u201cCharming Boy of the year\u201d.\nThere are $N$ girls in the department. Each girl gives the name of a boy who impressed her the most. You need to find the name of a boy who will be honoured with the title. \nIf there are more than one possible winners, then the one with the lexicographically smallest name is given the title. \nIt is guaranteed that each boy participating in the event has a unique name.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. \n- The first line of each test case contains an integer $N$ denoting the number of girls.\n- The second line contains $N$ space-separated strings $S_1, S_2, \\ldots, S_N$, denoting the respective names given by the girls.\n\n-----Output-----\nFor each test case, print a single line containing a string \u2014 the name of the boy who impressed the maximum number of girls. In case of a tie, print the lexicographically smallest name.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq |S_i| \\leq 10$, for each valid $i$\n$(|S_i|$ is the length of the string $S_i)$\n- For each valid $i$, $S_i$ contains only lowercase English alphabets\n- Sum of $N$ over all the test cases is $\\leq 10^6$\n\n-----Subtasks-----\n- 30 points: $1 \\leq N \\leq 100$\n- 70 points: original constraints\n\n-----Sample Input-----\n2\n\n10\n\njohn berry berry thomas thomas john john berry thomas john\n\n4\n\nramesh suresh suresh ramesh   \n\n-----Sample Output-----\njohn\n\nramesh\n\n Examples: \nInput: \n['2', '10', 'john berry berry thomas thomas john john berry thomas john', '4', 'ramesh suresh suresh ramesh']\nOutput: \n ['john', 'ramesh']\n",
  "677": "Problem: \nComputation of the date either previous or forthcoming dates is quiet easy. But it is quiet difficult to calculate the day from a particular given date. \nYou are required to find a day from a particular date given to you.\n\n-----Input-----\nIt consists of a single line entry consisting of date in format dd mm yyyy.\ni.e. the input line consists of the three numbers written in order followed by spaces.\nEg. Input for 18-12-1990 is be written as 18 12 1990\n\n-----Output-----\nIt consists of single line output showing the day for that particular date.\n\n-----Example-----\nInput:\n14 3 2012\n\nOutput:\nWednesday\n\n Examples: \nInput: \n['14 3 2012']\nOutput: \n ['Wednesday']\n",
  "678": "Problem: \nSnackdown 2019 is coming! People have started to spread the word and tell other people about the contest.\nThere are $N$ people numbered $1$ through $N$. Initially, only person $1$ knows about Snackdown. On each day, everyone who already knows about Snackdown tells other people about it. For each valid $i$, person $i$ can tell up to $A_i$ people per day. People spread the information among the people who don't know about Snackdown in the ascending order of their indices; you may assume that no two people try to tell someone about Snackdown at the same moment. Each person is only allowed to start telling other people about Snackdown since the day after he/she gets to know about it (person $1$ can start telling other people already on day $1$). How many days does it take for all people to know about Snackdown?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of days.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\le N \\le 10^5$\n- the sum of $N$ for all test cases does not exceed $10^6$\n- $0 \\le A_i \\le N$ for each valid $i$\n- $1 \\le A_1$\n\n-----Example Input-----\n2\n7\n2 1 1 5 5 5 5\n5\n5 1 3 2 1\n\n-----Example Output-----\n2\n1\n\n-----Explanation-----\nExample case 1: On day $1$, person $1$ tells people $2$ and $3$ about Snackdown. On day $2$, the first three people know about Snackdown, so they can tell $2+1+1 = 4$ people about it in a single day. That means the last four people get to know about Snackdown on day $2$, so the total number of days is $2$.\nExample case 2: On each day, person $1$ can tell up to $5$ people about Snackdown, so on the first day, he simply tells all people about it and the total number of days is $1$.\n\n Examples: \nInput: \n['2', '7', '2 1 1 5 5 5 5', '5', '5 1 3 2 1']\nOutput: \n ['2', '1']\n",
  "679": "Problem: \nHarry is a bright student. To prepare thoroughly for exams, he completes all the exercises in his book! Now that the exams are approaching fast, he is doing book exercises day and night. He writes down and keeps updating the remaining number of exercises on the back cover of each book.\nHarry has a lot of books messed on the floor. Therefore, he wants to pile up the books that still have some remaining exercises into a single pile. He will grab the books one-by-one and add the books that still have remaining exercises to the top of the pile.\nWhenever he wants to do a book exercise, he will pick the book with the minimum number of remaining exercises from the pile. In order to pick the book, he has to remove all the books above it. Therefore, if there are more than one books with the minimum number of remaining exercises, he will take the one which requires the least number of books to remove. The removed books are returned to the messy floor. After he picks the book, he will do all the remaining exercises and trash the book.\nSince number of books is rather large, he needs your help to tell him the number of books he must remove, for picking the book with the minimum number of exercises.\n\nNote that more than one book can have the same name.\n\n-----Input-----\nThe first line contains a single integer N denoting the number of actions. Then N lines follow. Each line starts with an integer. If the integer is -1, that means Harry wants to do a book exercise. Otherwise, the integer is number of the remaining exercises in the book he grabs next. This is followed by a string denoting the name of the book.\n\n-----Output-----\nFor each -1 in the input, output a single line containing the number of books Harry must remove, followed by the name of the book that Harry must pick.\n\n-----Constraints-----\n\n1 < N \u2264 1,000,000\n0 \u2264 (the number of remaining exercises of each book) < 100,000\nThe name of each book consists of between 1 and 15 characters 'a' - 'z'.\nWhenever he wants to do a book exercise, there is at least one book in the pile.\n\n-----Example-----\nInput:\n6\n9 english\n6 mathematics\n8 geography\n-1\n3 graphics\n-1\n\nOutput:\n1 mathematics\n0 graphics\n\n Examples: \nInput: \n['6', '9 english', '6 mathematics', '8 geography', '-1', '3 graphics', '-1']\nOutput: \n ['1 mathematics', '0 graphics']\n",
  "680": "Problem: \nYou are given two integer sequences $A_1, A_2, \\ldots, A_N$ and $B_1, B_2, \\ldots, B_M$. For any two sequences $U_1, U_2, \\ldots, U_p$ and $V_1, V_2, \\ldots, V_q$, we define\nScore(U,V)=\u2211i=1p\u2211j=1qUi\u22c5Vj.Score(U,V)=\u2211i=1p\u2211j=1qUi\u22c5Vj.Score(U, V) = \\sum_{i=1}^p \\sum_{j=1}^q  U_i \\cdot V_j \\,.\nYou should process $Q$ queries of three types:\n- $1$ $L$ $R$ $X$: Add $X$ to each of the elements $A_L, A_{L+1}, \\ldots, A_R$.\n- $2$ $L$ $R$ $X$: Add $X$ to each of the elements $B_L, B_{L+1}, \\ldots, B_R$.\n- $3$: Print $Score(A, B)$ modulo $998,244,353$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two integers, $N$ and $M$, denoting the length of $A$ and $B$ respectively.\n- The second line contains $N$ integers, elements of $A$.\n- The third line contains $M$ integers, elements of $B$.\n- The next line will contain an integer, $Q$, number of queries.\n- Each of the next $Q$ lines will contain one of $3$ kinds of updates as mentioned in the statement\nIt\u2019s guaranteed that each update is a valid update operation.\n\n-----Output-----\nFor each query of the third type, print a single line containing one integer - the answer to that query.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N, M, Q \\le 10^5$\n- $0 \\le |A_i|, |B_i|, |X| \\le 10^5$\n\n-----Example Input-----\n1\n3 4\n2 -1 5\n3 3 2 4\n6\n3\n1 2 3 -2\n3\n1 1 3 1\n2 2 4 2\n3\n\n-----Example Output-----\n72\n24\n90\n\n-----Explanation-----\nBefore the first operation, $A = [2, -1, 5],\\ B = [3, 3, 2, 4]$\nSo, for the first operation,\n$Score(A,\\ B) = 2*3 + 2*3 + 2*2 + 2*4$ $+ (-1)*3$ $+ (-1)*3$ $+ (-1)*2$ $+$ $(-1)*4$ $+  5*3$ $+ 5*3$ $+ 5*2$ $+ 5*4$ $= 72.$\nAfter the second query $A = [2, -3, 3]$, $B = [3, 3, 2, 4]$\nSo, for the third query, $Score(A, B) = 2*3 + 2*3 + 2*2$ $+ 2*4$ $+ (-3)*3$ $+ (-3)*3$ $+ (-3)*2$ $+ (-3)*4$ $+  3*3$ $+ 3*3$ $+ 3*2$ $+ 3*4$ $= 24$.\n\n Examples: \nInput: \n['1', '3 4', '2 -1 5', '3 3 2 4', '6', '3', '1 2 3 -2', '3', '1 1 3 1', '2 2 4 2', '3']\nOutput: \n ['72', '24', '90']\n",
  "681": "Problem: \nYou are playing following game: given an array A of N natural numbers. All numbers in the array A are at most M. On every turn you may pick any two different elements Ai and Aj (i\u2260j), such that Ai, Aj \u2264 M, and add K to both. The game ends when you are not able to continue. That is, when there is no pair (i,j) left such that both of them are less than equal to M.\n\nLet's call two arrays different if the sum of all their elements is different. When the game ends, you note down the final array A. How many different final arrays can you have.\n\n-----Input-----\n\nThe first line contains three integers N, M and K. N elements of the array follow in the next line.\n\n-----Output-----\n\nOutput single integer - answer for the given problem modulo 109+7.\n\n\n-----Constraints-----\n-  1 \u2264 N \u2264 105\n-  1 \u2264 M,K \u2264 1012\n-  1 \u2264 Ai \u2264 M\n\n-----Example-----\nInput:\n3 3 2\n1 2 3\nOutput:\n2\n\n-----Explanation-----\n\nAll possible sums are 14 and 10. You can get them by, for example, these arrays:\nA=(5, 4, 5),\nA=(1, 4, 5)\n\nThe above arrays are different because their sums are different.\n\n Examples: \nInput: \n['3 3 2', '1 2 3']\nOutput: \n ['2']\n",
  "682": "Problem: \nRohit collects coins: he has exactly one coin for every year from 1 to n. Naturally, Rohit keeps all the coins in his collection in the order in which they were released. Once Rohit's younger brother made a change \u2014 he took all the coins whose release year dated from l to r inclusively and put them in the reverse order. That is, he took a certain segment [l,\u2009r] and reversed it. At that, the segment's endpoints did not coincide. For example, if n\u2009=\u20098, then initially Rohit's coins were kept in the order 1 2 3 4 5 6 7 8. If Rohit's younger brother chose the segment [2,\u20096], then after the reversal the coin order will change to 1 6 5 4 3 2 7 8. Rohit suspects that someone else could have spoilt the permutation after his brother. Help him to find that out. Check if the given permutation can be obtained from the permutation 1 2 \u2026 n using exactly one segment reversal. If it is possible, find the segment itself.\n\n-----Input:-----\n- The first line contains an integer N which is the number of coins in Rohit's collection. \n- The second line contains space-separated n integers which are the spoilt sequence of coins. It is guaranteed that the given sequence is a permutation, i.e. it contains only integers from 1 to n, and every number is used exactly 1 time.\n\n-----Output:-----\nIf it is impossible to obtain the given permutation from the original one in exactly one action, print 0 0. Otherwise, print two numbers l, r (1\u2009\u2264\u2009l\u2009<\u2009r\u2009\u2264\u2009n) which are the endpoints of the segment that needs to be reversed to obtain from permutation 1 2 \u2026 n the given one.\n\n-----Constraints-----\n- $1 \\leq N \\leq 1000$\n- $1 \\leq A[N] \\leq 10^9$\n\n-----Sample Input:-----\n8\n1 6 5 4 3 2 7 8\n\n-----Sample Output:-----\n2 6\n\n Examples: \nInput: \n['8', '1 6 5 4 3 2 7 8']\nOutput: \n ['2 6']\n",
  "683": "Problem: \n-----Problem Statement-----\nWrite a program that accepts a number, n, and outputs the same.\n\n-----Input-----\nThe only line contains a single integer. \n\n-----Output-----\nOutput the answer in a single line.\n\n-----Constraints-----\n- 0 \u2264 n \u2264 105\n\n-----Sample Input-----\n123\n\n-----Sample Output-----\n123\n\n Examples: \nInput: \n['123']\nOutput: \n ['123']\n",
  "686": "Problem: \nChef has been working in a restaurant which has  N  floors. He wants to minimize the time it takes him to go from the N-th floor to ground floor. He can either take the elevator or the stairs. \nThe stairs are at an angle of 45 degrees and Chef's velocity is V1 m/s when taking the stairs down. The elevator on the other hand moves with a velocity V2 m/s. Whenever an elevator is called, it always starts from ground floor and goes to N-th floor where it collects Chef (collecting takes no time), it then makes its way down to the ground floor with Chef in it.  \n\nThe elevator cross a total distance equal to N meters when going from N-th floor to ground floor or vice versa, while the length of the stairs is sqrt(2) * N because the stairs is at angle 45 degrees.\n\nChef has enlisted your help to decide whether he should use stairs or the elevator to minimize his travel time. Can you help him out?\n\n-----Input-----\nThe first line contains a single integer T, the number of test cases. Each test case is described by a single line containing three space-separated integers N, V1, V2. \n\n-----Output-----\nFor each test case, output a single line with string Elevator or Stairs, denoting the answer to the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264  1000 \n- 1 \u2264 N, V1, V2 \u2264  100 \n\n-----Example-----\nInput:\n3\n5 10 15\n2 10 14\n7 14 10\n\nOutput:\nElevator\nStairs\nStairs\n\n Examples: \nInput: \n['3', '5 10 15', '2 10 14', '7 14 10']\nOutput: \n ['Elevator', 'Stairs', 'Stairs']\n",
  "687": "Problem: \nThe Little Elephant likes permutations. This time he has a permutation A[1], A[2], ..., A[N] of numbers 1, 2, ..., N.\n\nHe calls a permutation A good, if the number of its inversions is equal to the number of its local inversions. The number of inversions is equal to the number of pairs of integers (i; j) such that 1 \u2264 i < j \u2264 N and A[i] > A[j], and the number of local inversions is the number of integers i such that 1 \u2264 i < N and A[i] > A[i+1].\n\nThe Little Elephant has several such permutations. Help him to find for each permutation whether it is good or not. Print YES for a corresponding test case if it is good and NO otherwise.\n\n-----Input-----\n\nThe first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the size of a permutation. The next line contains N space separated integers A[1], A[2], ..., A[N].\n\n-----Output-----\n\nFor each test case output a single line containing the answer for the corresponding test case. It should be YES if the corresponding permutation is good and NO otherwise.\n\n-----Constraints-----\n1 \u2264 T \u2264 474 \n\n1 \u2264 N \u2264 100 \n\nIt is guaranteed that the sequence A[1], A[2], ..., A[N] is a permutation of numbers 1, 2, ..., N.\n\n-----Example-----\nInput:\n4\n1\n1\n2\n2 1\n3\n3 2 1\n4\n1 3 2 4\n\nOutput:\nYES\nYES\nNO\nYES\n\n-----Explanation-----\nCase 1. Here N = 1, so we have no pairs (i; j) with 1 \u2264 i < j \u2264 N. So the number of inversions is equal to zero. The number of local inversion is also equal to zero. Hence this permutation is good.\n\nCase 2. Here N = 2, and we have one pair (i; j) with 1 \u2264 i < j \u2264 N, the pair (1; 2). Since A[1] = 2 and A[2] = 1 then A[1] > A[2] and the number of inversions is equal to 1. The number of local inversion is also equal to 1 since we have one value of i for which 1 \u2264 i < N (the value i = 1) and A[i] > A[i+1] for this value of i since A[1] > A[2]. Hence this permutation is also good.\n\nCase 3. Here N = 3, and we have three pairs (i; j) with 1 \u2264 i < j \u2264 N. We have A[1] = 3, A[2] = 2, A[3] = 1. Hence A[1] > A[2], A[1] > A[3] and A[2] > A[3]. So the number of inversions is equal to 3. To count the number of local inversion we should examine inequalities A[1] > A[2] and A[2] > A[3]. They both are satisfied in our case, so we have 2 local inversions. Since 2 \u2260 3 this permutations is not good.\n\nCase 4. Here we have only one inversion and it comes from the pair (2; 3) since A[2] = 3 > 2 = A[3]. This pair gives also the only local inversion in this permutation. Hence the number of inversions equals to the number of local inversions and equals to one. So this permutation is good.\n\n Examples: \nInput: \n['4', '1', '1', '2', '2 1', '3', '3 2 1', '4', '1 3 2 4']\nOutput: \n ['YES', 'YES', 'NO', 'YES']\n",
  "688": "Problem: \nYou are given a string s of length 8 consisting solely of '0's and '1's. Assume that the characters of the string are written in a circular fashion. You need to find the number of 0-1 or 1-0 transitions that one has to make while making a single traversal over the string. ie. start from any character and go circularly until you get back to the same character, and find the number of transitions that you made. The string is said to be said to be uniform if there are at most two such transitions. Otherwise, it is called non-uniform.\nGiven the string s, tell whether the string is uniform or not.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of input contains the string s.\n\n-----Output-----\nFor each test case, output \"uniform\" if the given string is uniform and \"non-uniform\" otherwise.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 256\n- Length of s is 8\n\n-----Example-----\nInput\n4\n00000000\n10101010\n10000001\n10010011\n\nOutput\nuniform\nnon-uniform\nuniform\nnon-uniform\n\n-----Explanation-----\nThe number of transitions are 0, 8, 2 and 4 for the respective cases. So, the first and third one are uniform while the second and fourth one are non-uniform.\n\n Examples: \nInput: \n['4', '00000000', '10101010', '10000001', '10010011']\nOutput: \n ['uniform', 'non-uniform', 'uniform', 'non-uniform']\n",
  "689": "Problem: \nIn africa jungle , there were zebra's who liked to spit.\nThere owner watched them for whole day and noted in his sheet where each zebra spitted.\nNow he's in a confusion and wants to know if in the jungle there are two zebra's which spitted at each other.\nHelp him solve this task.\nIf the zebra is present in position a spits b metres right , he can hit only zebra in position a+b , if such a zebra exists.\n\n-----Input:-----\n- The first line contains integer t(1<=t<100)- amount of zebras in jungle.\n- Each of following t lines contains two integers a(i) and b(i)(-10^4<=x(i)<=10^4,1<|d(i)|<=2.10^4) - records in owner sheet.\n- a(i) is the position of i-th zebra and b(i) is distance at which the i-th camel spitted.\nPositive values of d(i) correspond to spits right, negative values correspond to spit left.No two zebras may stand in the same position.\n\n-----Output:-----\nIf there are two zebras , which spitted at each other , output YES, otherwise , output NO.\n\n-----Sample Input:-----\n2\n0 1\n1 -1\n\n-----Sample Output:-----\nYES\n\n Examples: \nInput: \n['2', '0 1', '1 -1']\nOutput: \n ['YES']\n",
  "690": "Problem: \nYou are a king and you are at war. If the enemy breaks through your frontline you lose.\nEnemy can break the line only if the sum of morale of any $K$ continuous soldiers is strictly less than $M$. So, you being a motivational orator decides to boost their morale by giving a speech. On hearing it morale of a soldier multiplies by $X$ which depends on you and your speech (i.e. $X$ can be any positive value) but atmost only $K$ continuous speakers can hear your speech.\nN soldiers are standing on the frontline with $A[i]$ morale. \nDetermine the minimum number of speeches you need to give.\n\n-----Input:-----\nThe first line contains three space seperated integers $N,K,M$.\nThe next line contains $N$ space integers, ith of which denotes the morale of $ith$ soldier.\n\n-----Output:-----\nOutput the minimum number of speeches required. In case if it is impossible to achieve, print $-1$.\n\n-----Constraints:-----\n$1 \\leq N,M \\leq 10^5$\n$1 \\leq k \\leq N$\n$0 \\leq Ai \\leq 10^5$ \n\n-----Sample Input:-----\n6 2 5\n1 1 1 1 1 1\n\n-----Sample Output:-----\n2\n\n-----Explanation:-----\nWe multiply 2nd ,3rd  and 5th,6th by 5. Resulting array will be 1 5 5 1 5 5.\n\n Examples: \nInput: \n['6 2 5', '1 1 1 1 1 1']\nOutput: \n ['2']\n",
  "691": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. For each valid $i$, the star value of the element $A_i$ is the number of valid indices $j < i$ such that $A_j$ is divisible by $A_i$.\nChef is a curious person, so he wants to know the maximum star value in the given sequence. Help him find it.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ which denotes the number of test cases.\n- The first line of each test case contains a single integer $N$ .\n- The second line of each test case contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum star value.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^6$ for each valid $i$ \n- Sum of $N$ over all test cases does not exceed $100,000$.\n\n-----Subtasks-----\nSubtask #1 (20 points): sum  of $N$ over all test cases does not exceed $5,000$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n7\n8 1 28 4 2 6 7\n\n-----Example Output-----\n3\n\n-----Explanation-----\n$A_5 = 2$ divides $4$, $28$ and $8$, so its star value is $3$. There is no element with a higher star value.\n\n Examples: \nInput: \n['1', '7', '8 1 28 4 2 6 7']\nOutput: \n ['3']\n",
  "692": "Problem: \nThere is crazy man named P29892P. He always tries to do crazy things as he thinks. One day he invented a machine and named it as ANGEN. The ANGEN is used to perform range operations. The range operation means performing operations on range values from {L..R}. At any time it performs operations on values in between L to R.\nANGEN can perform following operations\nU I V - Update the value present at I  with value V\nA L R - Find the sum between range L and R\nM L R - Find the maximum number between L and R\nm L R - Find the minimum number between L and R\nS L R - Find second maximum value in between L and R\ns L R - Find second mimimum value in between L and R\nIf it is not possible perform operation ANGEN returns \u201cNA\u201d with out quotes.\nFor Invalid operations ANGEN returns \u201c!!!\u201d with out quotes.\nNow P29892P challenging his friends and you too, to build his invention with yourown code. So it's your time to defeat P29892P by implementing his invention with your own ability. Let's go and solve the problem.\n\n-----Input-----\nInput description.\n- The first line of the input contains an integer N denoting the number of integers. \n- The next line contains N space separated integers.\"\n- The next line contains a single integer Q denoting the number of Questions.\n-  The next Q lines contains T Question type , L and R.\n\n-----Output-----\nPrint output for each question in separate line.\n\n-----Constraints-----\nShould contain all the constraints on the input data that you may have. Format it like:\n- 1 \u2264 N \u2264 100000\n- 1 \u2264 values[i] \u2264 1000000000\n- 1 \u2264 Q \u2264 10000\n- T in { A..Z, a..z }\n- 1 \u2264 L \u2264 R \u2264 N\n\n-----Example-----\nInput:\n6\n1 2 5 3 10 6\n6\nA 1 5\nM 1 3\nm 5 6\ns 3 6\nU 1 7\nS 1 2\n\nOutput:\n21\n5\n6\n5\n2\n\n-----Explanation-----\n...\n\n Examples: \nInput: \n['6', '1 2 5 3 10 6', '6', 'A 1 5', 'M 1 3', 'm 5 6', 's 3 6', 'U 1 7', 'S 1 2']\nOutput: \n ['21', '5', '6', '5', '2']\n",
  "693": "Problem: \nWrite a program to find the factorial value of any number entered by the user.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the factorial of the given number N in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n3 \n4\n5\n\nOutput\n\n6\n24\n120\n\n Examples: \nInput: \n['3', '3', '4', '5']\nOutput: \n ['6', '24', '120']\n",
  "694": "Problem: \nThe MarkiT online virtual market startup wants to organize its grand opening in NIT Patna.\nbut they want maximum crowd for their inauguration. So the manager told  this  to Praveen a student in NITP who suggested them:\nThe first-year students come to campus  every x hour,\nSecond-year students come to campus every y hour,\nThird-year students come to campus every z hour and \nFourth-year is very busy so they don't come regularly.\nSo Praveen being very clever told him the no of times in n days he can have an audience of all year student (1st,2nd & 3rd) at max. So can you code what Praveen has done?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a 2 line of input, first line contain one  integers $N$ (No of Days). \n-Next line contain 3 space separated integer the  value of x y z\n\n-----Output:-----\nFor each testcase, output in a single line answer the no of times audience consists of all year.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^8$\n- $1 \\leq x,y,z \\leq 10^5$\n\n-----Sample Input:-----\n1\n10\n8 10 6\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\nFirst favourable condition will come on 5th day and Second on 10th day.\n\n Examples: \nInput: \n['1', '10', '8 10 6']\nOutput: \n ['2']\n",
  "696": "Problem: \nYou are given a permutation of natural integers from 1 to N, inclusive. Initially, the permutation is 1, 2, 3, ..., N.\nYou are also given M pairs of integers, where the i-th is (Li Ri). In a single turn you can choose any of these pairs (let's say with the index j) and arbitrarily shuffle the elements of our permutation on the positions from Lj to Rj, inclusive (the positions are 1-based). You are not limited in the number of turns and you can pick any pair more than once.\n\nThe goal is to obtain the permutation P, that is given to you. If it's possible, output \"Possible\", otherwise output \"Impossible\" (without quotes).\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space separated integers N and M denoting the size of the permutation P and the number of pairs described above. \nThe next line contains N integers - the permutation P.\nEach of the following M lines contain pair of integers Li and Ri.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 35\n- 1 \u2264 N, M \u2264 100000\n- 1 \u2264 Li \u2264 Ri \u2264 N\n\n-----Example-----\nInput:\n2\n7 4\n3 1 2 4 5 7 6\n1 2\n4 4\n6 7\n2 3\n4 2\n2 1 3 4\n2 4\n2 3\n\nOutput:\nPossible\nImpossible\n\n Examples: \nInput: \n['2', '7 4', '3 1 2 4 5 7 6', '1 2', '4 4', '6 7', '2 3', '4 2', '2 1 3 4', '2 4', '2 3']\nOutput: \n ['Possible', 'Impossible']\n",
  "697": "Problem: \nIn Programmers Army Land, people have started preparation as sports day is scheduled next week.\nYou are given a task to form 1 team of $k$ consecutive players, from a list of sports player whose powers are given to you.\nYou want your team to win this championship, so you have to chose your $k$ team players optimally i.e. there must not be any other $k$ consecutive team players who have their total power greater than your team members total power.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$. $T$ denoting the number of test cases. The description of $T$ test cases is as follows.\n- The next line of the input contains 2 space separated integers $N$ and $K$. $N$ denotes the total number of players and $K$ denotes the number of players allowed in a team.\n- The next line of the input contains $N$ space-separated integers $A1, A2, A3...An$ where $ith$ number denotes power of $ith$ player.\nNote: power of players can also be negative\n\n-----Output:-----\n- For each test-case print the total power that your selected team have(each test case output must be printed on a new line).\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N,K \\leq 10^5$\n- $-10^7 \\leq A1, A2, A3...An \\leq 10^7$\n\n-----Sample Input:-----\n1\n5 3\n1 2 3 4 5\n\n-----Sample Output:-----\n12\n\n Examples: \nInput: \n['1', '5 3', '1 2 3 4 5']\nOutput: \n ['12']\n",
  "698": "Problem: \nFor years you have been working hard in Santa's factory to manufacture gifts for kids in substandard work environments with no pay. You have finally managed to escape the factory and now you seek revenge. You are planning a heist with the Grinch to steal all the gifts which are locked in a safe. Since you have worked in the factory for so many years, you know how to crack the safe.\nThe passcode for the safe is an integer. This passcode keeps changing everyday, but you know a way to crack it. You will be given two numbers  A  and  B .\nPasscode is the number of  X  such that 0 \u2264 X < B and\ngcd(A,B) = gcd(A+X,B).\nNote : gcd(A,B) is the greatest common divisor of A & B.\n\n-----Input-----\nThe first line contains the single integer T (1 \u2264 T \u2264 50) \u2014 the number of test cases.\nNext T lines contain test cases per line. Each line contains two integers  A  &  B \n( 1 \u2264 A < B \u2264 1010 )\n\n-----Output-----\nPrint T integers, one for each Test case. For each test case print the appropriate passcode for that day.\n\n-----Sample Input-----\n3\n4 9\n5 10\n42 9999999967\n\n-----Output-----\n6\n1\n9999999966\n\n Examples: \nInput: \n['3', '4 9', '5 10', '42 9999999967']\nOutput: \n ['6', '1', '9999999966']\n",
  "699": "Problem: \nChef wants to host some Division-3 contests. Chef has $N$ setters who are busy creating new problems for him. The $i^{th}$ setter has made $A_i$ problems where $1 \\leq i \\leq N$.    \nA Division-3 contest should have exactly $K$ problems. Chef wants to plan for the next $D$ days using the problems that they have currently. But Chef cannot host more than one Division-3 contest in a day.\nGiven these constraints, can you help Chef find the maximum number of Division-3 contests that can be hosted in these $D$ days?\n\n-----Input:-----\n- The first line of input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains three space-separated integers - $N$, $K$ and $D$ respectively.\n- The second line of each test case contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$ respectively. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the maximum number of Division-3 contests Chef can host in these $D$ days.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^2$\n- $1 \\le K \\le 10^9$ \n- $1 \\le D \\le 10^9$\n- $1 \\le A_i \\le 10^7$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points):\n- $N = 1$\n- $1 \\le A_1 \\le 10^5$\nSubtask #2 (60 points): Original constraints\n\n-----Sample Input:-----\n5\n1 5 31\n4\n1 10 3\n23\n2 5 7\n20 36\n2 5 10\n19 2\n3 3 300\n1 1 1\n\n-----Sample Output:-----\n0\n2\n7\n4\n1\n\n-----Explanation:-----\n- \nExample case 1: Chef only has $A_1 = 4$ problems and he needs $K = 5$ problems for a Division-3 contest. So Chef won't be able to host any Division-3 contest in these 31 days. Hence the first output is $0$.\n- \nExample case 2: Chef has $A_1 = 23$ problems and he needs $K = 10$ problems for a Division-3 contest. Chef can choose any $10+10 = 20$ problems and host $2$ Division-3 contests in these 3 days. Hence the second output is $2$.\n- \nExample case 3: Chef has $A_1 = 20$ problems from setter-1 and $A_2 = 36$ problems from setter-2, and so has a total of $56$ problems. Chef needs $K = 5$ problems for each Division-3 contest. Hence Chef can prepare $11$ Division-3 contests. But since we are planning only for the next $D = 7$ days and Chef cannot host more than $1$ contest in a day, Chef cannot host more than $7$ contests. Hence the third output is $7$.\n\n Examples: \nInput: \n['5', '1 5 31', '4', '1 10 3', '23', '2 5 7', '20 36', '2 5 10', '19 2', '3 3 300', '1 1 1']\nOutput: \n ['0', '2', '7', '4', '1']\n",
  "700": "Problem: \nNow-a-days, Manish is becoming  famous for bank robbery in the country because of his cleverness, he never robs own his own.He has four workers A , B, C, and D , all working under him.All of the four take some amount for that. There are total N banks in the country and Manish wants to rob all the banks with minimum\n\namount spent on workers.Only one worker is allowed to rob the ith bank but following a condition that if one worker robs ith bank, then he can't rob (i+1) th bank.\n\nSo ,Manish wants you to calculate minimum amount that he has to spend on all workers to rob all N banks.\n\n-----Input Format-----\nFirst line consists number of test cases T.For each test case,\n\nfirst line consists an integer N, number of banks in the country\n\nand the next N line consists 4 integers amount taken by A,B,C and D respectively to rob ith bank.\n\n-----Output format-----\nFor each test case ,output an integer, minimum amount paid  by Manish in separate line .\n\n-----Constraint-----\n- 1<=T<=1000\n- 1<=N<=100000\n- 1<=amount<=100000\n\n-----Subtasks-----\nSubtask-1 (10 points)\n- 1<=T<=5\n- 1<=N<=10\n- 1<=amount<=10\nSubtask-1 (30 points)\n- 1<=T<=100\n- 1<=N<=1000\n- 1<=amount<=1000\nSubtask-1 (60 points)\nOriginal Constraints \nSample Input\n1\n3\n4 7 2 9\n5 6 4 7\n2 6 4 3\n\nSample Output\n10\n\n Examples: \nInput: \n['1', '3', '4 7 2 9', '5 6 4 7', '2 6 4 3']\nOutput: \n ['10']\n",
  "701": "Problem: \nYou are given a sequence of N$N$ powers of an integer k$k$; let's denote the i$i$-th of these powers by kAi$k^{A_i}$. You should partition this sequence into two non-empty contiguous subsequences; each element of the original sequence should appear in exactly one of these subsequences. In addition, the product of (the sum of elements of the left subsequence) and (the sum of elements of the right subsequence) should be maximum possible.\nFind the smallest position at which you should split this sequence in such a way that this product is maximized.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains two space-separated integers N$N$ and k$k$.\n- The second line contains N$N$ space-separated integers A1,A2,\u2026,AN$A_1, A_2, \\dots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the size of the left subsequence. If there is more than one possible answer, print the smallest possible one.\n\n-----Constraints-----\n- 1\u2264T\u226410$1 \\le T \\le 10$\n- 2\u2264N\u2264105$2 \\le N \\le 10^5$\n- 2\u2264k\u2264109$2 \\le k \\le 10^9$\n- 0\u2264Ai\u2264105$0 \\le A_i \\le 10^5$ for each valid i$i$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- 2\u2264N\u22641,000$2 \\le N \\le 1,000$\n- 0\u2264Ai\u22641,000$0 \\le A_i \\le 1,000$ for each valid i$i$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n5 2\n1 1 3 3 5\n\n-----Example Output-----\n4\n\n-----Explanation-----\nExample case 1: The actual sequence of powers is [21,21,23,23,25]=[2,2,8,8,32]$[2^1, 2^1, 2^3, 2^3, 2^5] = [2, 2, 8, 8, 32]$. The maximum product is 20\u22c532=640$20 \\cdot 32 = 640$. In the optimal solution, the sequence is partitioned into [2,2,8,8]$[2, 2, 8, 8]$ and [32]$[32]$.\n\n Examples: \nInput: \n['1', '5 2', '1 1 3 3 5']\nOutput: \n ['4']\n",
  "702": "Problem: \nThis is a peculiar functioning setup.\nTwo Tanks are separated from each other by a wall .There is a pipe in the wall which connects  both tanks  which allows flow of water between them . Due to this ,there is change in temperature of both tanks , every minute temperature of Tank with larger temperature among two decreases by one and temperature of Tank  with smaller temperature among two increases by two until equilibrium is reached , But there is a problem .\nThe pipe can't control this flow of water if there is Non-equilibrium (inequality of temperature  on  both sides )  even after $m$ minutes and the pipe will burst after it , your task is to predict whether the pipe will burst or not .\nNote: If equilibrium cannot be reached the process will continue forever.\nThe initial temperature of Cold Tank is $Tc$ , of Hot Tank it is $Th$. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, three  integers $m, Tc,Th$. \n\n-----Output:-----\nFor each testcase, output in a single line answer \"Yes\" if Pipe will burst after m minutes \"No\" if pipe will not burst.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n-----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo\n\n Examples: \nInput: \n['2', '4 5 10', '2 2 5']\nOutput: \n ['Yes', 'No']\n",
  "703": "Problem: \nChef gives an integer $K$ in the input.  If the given number is beautiful binary number, print it, Else find its previous beautiful binary number. A beautiful binary number is a number whose binary representation does not contain any consecutive 1s.\nNote: 1 is also a beautiful binary number.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, print a beautiful number.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n-----Sample Input:-----\n3\n3\n6\n8\n\n-----Sample Output:-----\n2\n5\n8\n\n-----EXPLANATION:-----\nFor 1) 3 is not a beautiful binary number because the binary representation of 3 is \"11\" which has consecutive 1s.  hence 2 which is less than 3 is printed.\nFor 3) 8 is already a beautiful binary number with no consecutive 1s in its binary representation. so, print 8 as it is.\n\n Examples: \nInput: \n['3', '3', '6', '8']\nOutput: \n ['2', '5', '8']\n",
  "704": "Problem: \nEugene has to do his homework. But today, he is feeling very lazy and wants to you do his homework. His homework has the following given maths problem.\nYou are given three integers: A, N, M. You write the number A appended to itself N times in a row. Let's call the resulting big number X. For example, if A = 120, N = 3, then X will be 120120120. Find out the value of X modulo M.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.\nEach test case is described in one line containing three integers: A, N and M as described in the problem statement.\n\n-----Output-----\nFor each test case, output a single line containing an integer denoting the value of X modulo M.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 0 \u2264 A \u2264 109\n- 1 \u2264 N \u2264 1012\n- 2 \u2264 M \u2264 109\n\n-----Subtasks-----\nSubtask #1 (15 points):\n- 0 \u2264 A \u2264 100\n- 1 \u2264 N \u2264 105\n\nSubtask #2 (25 points):\n- 1 \u2264 N \u2264 109\n\nSubtask #3 (60 points):\n- Original constraints\n\n-----Example-----\nInput:\n2\n12 2 17\n523 3 11\n\nOutput:\n5\n6\n\n-----Explanation-----\nExample 1: As A = 12, N = 2, X = 1212, 1212 modulo 17 = 5\nExample 2. As A = 523, N = 3, X = 523523523, 523523523 modulo 11 = 6\n\n Examples: \nInput: \n['2', '12 2 17', '523 3 11', '', '']\nOutput: \n ['5', '6']\n",
  "705": "Problem: \nA city of dimension N x N is constructed with grid of lanes. These lanes are fenced by government so that no one can cross any grid diagonally. Although a train \nline runs diagonally from (0,0) to (N,N).\nOur chef has a weird kind of phobia and is very afraid to cross the railway line. He is at point (0,0) and wants to get to the point (N,N). Calculate number of path \nthrough which it is possible to reach to its destination travelling the minimum distance. .\nNote that: \n\n1. Since he is already at position (0,0) he can go to either part of grid (i.e. left or right part - divided by diagonal) but he will remain in that part for the whole path.\n2. He is only afraid to \"cross\" the line, i.e. during the route he can go to position (m,m) where 0\n3. You have to calculate the number of path possible. If there is more than one path then you have to print the number of path of minimum distances. \n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases, for each test case enter the grid size i.e value of N.\n\n-----Output-----\nFor each test case, output a single line with number of such paths possible.\n(Note : If no such path possible print 0)\n\n-----Constraints-----\n- 1 <= T <= 100\n- 0 <= N <= 30\n\n-----Example-----\nInput:\n2\n2\n5\nOutput:\n4\n84\n\n Examples: \nInput: \n['2', '2', '5']\nOutput: \n ['4', '84']\n",
  "706": "Problem: \nChef has $N$ small boxes arranged on a line from $1$ to $N$. For each valid $i$, the weight of the $i$-th box is $W_i$. Chef wants to bring them to his home, which is at the position $0$. He can hold any number of boxes at the same time; however, the total weight of the boxes he's holding must not exceed K at any time, and he can only pick the ith box if all the boxes between Chef's home and the ith box have been either moved or picked up in this trip.\nTherefore, Chef will pick up boxes and carry them home in one or more round trips. Find the smallest number of round trips he needs or determine that he cannot bring all boxes home.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $W_1, W_2, \\ldots, W_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the smallest number of round trips or $-1$ if it is impossible for Chef to bring all boxes home.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N, K \\le 10^3$\n- $1 \\le W_i \\le 10^3$ for each valid $i$\n\n-----Example Input-----\n4\n1 1 \n2\n2 4\n1 1\n3 6\n3 4 2\n3 6\n3 4 3\n\n-----Example Output-----\n-1\n1\n2\n3\n\n-----Explanation-----\nExample case 1: Since the weight of the box higher than $K$, Chef can not carry that box home in any number of the round trip.\nExample case 2: Since the sum of weights of both boxes is less than $K$, Chef can carry them home in one round trip.\nExample case 3: In the first round trip, Chef can only pick up the box at position $1$. In the second round trip, he can pick up both remaining boxes at positions $2$ and $3$.\nExample case 4: Chef can only carry one box at a time, so three round trips are required.\n\n Examples: \nInput: \n['4', '1 1', '2', '2 4', '1 1', '3 6', '3 4 2', '3 6', '3 4 3']\nOutput: \n ['-1', '1', '2', '3']\n",
  "707": "Problem: \nIn 17th century our Chef was a Wizard. He asked his small son \"Anshu\" to bring him the secret of the Magical Mountain. The boy after travelling a lot reached the Mountain.\n\nThe description of the Mountain was as follows:\n- Mountain contains N magical stones. Each of them has a unique number.\n- Mountain was divided into many levels, where at ith level atmost 2^i stones can be found.\n- Between stones there exist a magical path containing lava.\n- A stone can be connected with maximum of three stones.\n- Peak of the mountain contains stone with number 1.\n- If Stone 1 is first connected to stone 2 and then to 3. Assume 2 is to the left of 3.\n\nNow, to get the secret of the mountain, Anshu started climbing from the left. On the way he used his magical wand to protect him from lava. But, while climbing he came to know that he is able to see only the one stone at each level. After reaching the peak he slided down and did the the same process. These stones that he saw shows the secret of the mountain, if they are placed in a non decreasing order on a sunny day. Anshu doesn't remember the stones number that he saw. Help him in recollecting them and getting the secret to his father.\n\nThe mountain looks like this\n\n-----Input-----\n- First line contains T the number of test cases.\n- First line of each test test case contains N.\n- Next N-1 lines contains X and Y the stones which are connected.\n\n-----Output-----\n- Output the required non decreasing sequence.\n\n-----Constraints and Subtasks-----\n- 1 <= T <= 10\n- 1 <= X, Y <= N\nSubtask 1: 20 points\n- 3<=N<=100\nSubtask 2: 30 points\n- 3<=N<=10000\nSubtask 3: 50 points\n- 3<=N<=100000\n\n-----Example-----\nInput:\n1\n5\n1 2\n1 3\n2 4\n2 5\n\nOutput:\n1 2 3 4 5\n\n Examples: \nInput: \n['1', '5', '1 2', '1 3', '2 4', '2 5']\nOutput: \n ['1 2 3 4 5']\n",
  "708": "Problem: \nYou are given a square matrix $M$ with $N$ rows (numbered $1$ through $N$) and $N$ columns (numbered $1$ through $N$). Initially, all the elements of this matrix are equal to $A$. The matrix is broken down in $N$ steps (numbered $1$ through $N$); note that during this process, some elements of the matrix are simply marked as removed, but all elements are still indexed in the same way as in the original matrix. For each valid $i$, the $i$-th step consists of the following:\n- Elements $M_{1, N-i+1}, M_{2, N-i+1}, \\ldots, M_{i-1, N-i+1}$ are removed.\n- Elements $M_{i, N-i+1}, M_{i, N-i+2}, \\ldots, M_{i, N}$ are removed.\n- Let's denote the product of all $2i-1$ elements removed in this step by $p_i$. Each of the remaining elements of the matrix (those which have not been removed yet) is multiplied by $p_i$.\nFind the sum $p_1 + p_2 + p_3 + \\ldots + p_N$. Since this number could be very large, compute it modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $A$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the sum of products at each step modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 250$\n- $1 \\le N \\le 10^5$\n- $0 \\le A \\le 10^9$\n- the sum of $N$ over all test cases does not exceed $10^5$\n\n-----Example Input-----\n1\n3 2\n\n-----Example Output-----\n511620149\n\n-----Explanation-----\nExample case 1:\n\n Examples: \nInput: \n['1', '3 2']\nOutput: \n ['511620149']\n",
  "709": "Problem: \n$Gogi$, $Tapu$ and $Sonu$ are the elite members of $Tapu$ $Sena$. $Gogi$ is always stoned and asks absurd questions, But this time he asked a question which seems to be very serious and interesting. $Tapu$ wants to solve this question to impress $Sonu$. He  gave an array of length N to $Tapu$, $Tapu$ can perform the following operations exactly once:\n- Remove any subarray from the given array given the resulting array formed after the removal is non-empty.    \n- Reverse the whole array.\nRemember you can\u2019t shuffle the elements of the array.\nTapu needs to find out the maximum possible GCD of all the numbers in the array after applying the given operations exactly once. Tapu is very weak at programming, he wants you to solve this problem so that he can impress $Sonu$.\n\n-----Input:-----\n- The first line contains $T$, the number of test cases.\n- For each test case\n-FIrst line contains $N$.\n- Last line contains $N$ numbers of the array. \n\n-----Output:-----\nA single integer in a new line, maximum possible GCD. \n\n-----Constraints-----\n- $1 \\leq T \\leq 10^2$\n- $1 \\leq N \\leq 10^4$\n- $1 \\leq a[i] \\leq 10^9$\n\nSummation of N for all testcases is less than $10^6$ \n\n-----Sample Input 1:-----\n1\n1\n2\n\n-----Sample Output 1:-----\n2\n\n Examples: \nInput: \n['1', '1', '2']\nOutput: \n ['2']\n",
  "710": "Problem: \nBlob is a computer science student. He recently got an internship from Chef's enterprise. Along with the programming he has various other skills too like graphic designing, digital marketing and social media management. Looking at his skills Chef has provided him different tasks A[1\u2026N] which have their own scores. Blog wants to maximize the  value of the expression A[d]-A[c]+A[b]-A[a] such that d>c>b>a.\n\nCan you help him in this?\n\n-----Input:-----\n- The first line contain the integer N\n- The second line contains N space separated integers representing A[1], A[2] \u2026 A[N]\n\n-----Output:-----\nThe maximum score that is possible\n\n-----Constraints-----\n- $4 \\leq N \\leq 10^4$\n- $0 \\leq A[i] \\leq 10^5$\n\n-----Sample Input:-----\n6\n\n3 9 10 1 30 40\n\n-----Sample Output:-----\n46\n\n Examples: \nInput: \n['6', '3 9 10 1 30 40']\nOutput: \n ['46']\n",
  "712": "Problem: \nChef got into a fight with the evil Dr Doof. Dr Doof has decided to destroy all even numbers from the universe using his Evil-Destroy-inator. Chef has $N$ integers with him. To stop Doof, Chef has to find an odd number which is an integer multiple of all $N$ numbers that he has with him. Find if it is possible for Chef to prevent Dr Doof from destroying the even numbers.\nFormally, given $N$ positive integers, find if there exists an odd number which is an integer multiple of all the given $N$ numbers. If yes, print \"YES\", otherwise \"NO\". You can print any letter in any case.\n\n-----Input-----\n- First line contains $T$, number of testcases. Each testcase consists of $2$ lines.\n- The first line of each test case consists of a positive integer $N$, denoting the number of positive integers Chef has.\n- The second line of each test case contains $N$ space separated integers $A_i$ each denoting an integer that Chef has with him.\n\n-----Output-----\nFor every test case, if there exists such an odd number, print \"YES\" on a separate line, otherwise \"NO\". The judge is case insensitive. That means, your code can print any letter in any case ( \"Yes\", \"yes\" or \"YES\" are all accepted).\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq A_i \\leq 10^3$\n\n-----Sample Input-----\n2\n5\n1 2 5 4 3\n1\n7\n\n-----Sample Output-----\nNO\nYES\n\n-----Explanation-----\nFor test $1$: There exists no odd number.\nFor test $2$: The possible odd numbers can be $7$, $21$, $49$, $315$, \u2026\n\n Examples: \nInput: \n['2', '5', '1 2 5 4 3', '1', '7']\nOutput: \n ['NO', 'YES']\n",
  "713": "Problem: \nChef has a sequence of $N$ integers, $A_1, A_2, ... , A_N$. He likes this sequence if it contains a  subsequence of $M$ integers, $B_1, B_2, ... , B_M$ within it.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nYou will be given a sequence of $N$ integers, $A_1, A_2, ..., A_N$ followed by another sequence of $M$ integers, $B_1, B_2, ..., B_M$. Given these, you have to tell whether Chef likes the sequence of $N$ integers($A_1, A_2, ..., A_N$) or not. \nFormally, output \"Yes\" if\n$\\exists idx_1, idx_2, ..., idx_M | 1 \\le idx_1 < idx_2 < ... < idx_M \\le N$ and $A_{idx_i} = B_i \\forall i, 1 \\le i \\le M$\nOtherwise output \"No\". Note that the quotes are for clarity.\n\n-----Input-----\nThe first line contains a single integer, $T$.\n$T$ test cases follow where each test case contains four lines:\n- The first line of a test case contains a single integer $N$\n- The second line of the test case contains $N$ space separated integers, $A_1, A_2, ..., A_N$\n- The third line of the test case contains a single integer $M$.\n- The fourth line contains $M$ space separated integers, $B_1, B_2, ..., B_M$\nSymbols have usual meanings as described in the statement.\n\n-----Output-----\nFor each test case, output a single line containing the output. Output is \"Yes\" if Chef likes the sequence $A$. Output is \"No\" if Chef dislikes the sequence $A$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $1 \\le M \\le 10^3$\n- $1 \\le A_i, B_i \\le 10^9$\n\n-----Sample Input-----\n3\n6\n1 2 3 4 5 6\n3\n2 3 4\n6\n22 5 6 33 1 4\n2\n4 15\n4\n1 3 4 2\n2\n1 2\n\n-----Sample Output-----\nYes\nNo\nYes\n\n-----Explanation:-----\nIn sample test case $1$, the sequence $1,2,3,4,5,6$ contains the subsequence $2, 3, 4$. The subsequence is present at indices $1, 2, 3$ of the original sequence.\nHence, $1,2,3,4,5,6$ is a sequence which Chef likes it. Therefore, we output \"Yes\".\nIn sample test case $2$, the subsequence $4, 15$ is not present in sequence $22, 5, 6, 33, 1, 4$. Hence, we output \"No\".\nIn sample test case $3$, the sequence $1, 3, 4, 2$ contains the subsequence $1, 2$. The subsequence is present at indices $0, 3$. Therefore, we output \"Yes\".\n\n Examples: \nInput: \n['3', '6', '1 2 3 4 5 6', '3', '2 3 4', '6', '22 5 6 33 1 4', '2', '4 15', '4', '1 3 4 2', '2', '1 2']\nOutput: \n ['Yes', 'No', 'Yes']\n",
  "714": "Problem: \nIt's John's birthday; he has brought some candies in distribute among N of his friends. Being a good friend, he decided to distribute all of his candies equally among his friend and he don't want to keep any for himself. He left the task of distributing candies up to his friends, but his friends haven't done a great job in distributing them and now they all have unequal amount of candies.\nHe asked all of his friends to keep all the candies in their hands (A[1] to A[N]) so that he can redistribute the candies. Taking a candy away from someone makes them sad and makes the person who gets it happy. Thus, you do not want to do many operations on the number of candies.\nHere each operation stands for, taking away 1 candy from someone and giving it to somebody else.\nAfter applying the operations, he might not be able to distribute all the candies among all of your friends, and you might need to buy some more candies as well. Buying each candy will be counted as 1 operation as well. John is saving up for his birthday party in the evening and so he wants to spend the least amount of money on candies as possible.\nThus, he asks for your help. You have to find the minimum number of operations required to make the distributions equal.\n\n-----Input:-----\n- The first line consists of the number T representing the number of test cases.\n- Each test case consists of 2 lines.\n- The first line contains of the number N representing the number of friends.\n- The second line contains space separated numbers (A[1] to A[N]) representing the number of candies each friend currently has.\n\n-----Output:-----\nFor each test case, you much print the minimum number of operations.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $0 \\leq A[i] \\leq 10^9$\n\n-----Sample Input:-----\n3\n\n4\n\n7 8 6 4\n\n6\n\n7 3 10 2 3 8\n\n1\n\n10   \n\n-----Sample Output:-----\n4\n\n10\n\n0\n\n Examples: \nInput: \n['3', '4', '7 8 6 4', '6', '7 3 10 2 3 8', '1', '10']\nOutput: \n ['4', '10', '0']\n",
  "715": "Problem: \nRecently Rocky had participated in coding competition and he is sharing one of the problem with you which he was unable to solve. Help Rocky in solving the problem.\nSuppose the alphabets are arranged in a row starting with index 0$0$ from AtoZ$A to Z$.\nIf in a coded language  A=27$A=27$ and AND=65$AND=65$.\nHelp Rocky to find a suitable formula for finding all the value for given test cases?\n(All alphabets are in Upper case only).\n\n-----Input:-----\nFirst line of the input contains  string s$s$.\n\n-----Output:-----\nOutput the possible integer values of the given string s$s$ according to the question . \n\n-----Constraints-----\n- 1\u2264s\u2264100$1 \\leq s \\leq 100$\n\n-----Sample Input:-----\nA\n\nAND   \n\n-----Sample Output:-----\n27\n\n65\n\n Examples: \nInput: \n['A', 'AND']\nOutput: \n ['27', '65']\n",
  "717": "Problem: \nToday is rose day, batch mates of Kabir and Tara decided to celebrate this day by exchanging roses with each other. \nNote:$Note:$ exchanging means both the boy and the girl will give rose to each other. \nIn the class there are B$B$ boys and G$G$ girls. \nExchange of rose will take place if and only if at least one of them hasn't received a rose from anyone else and a rose can be exchanged only once.\nTara has to bring maximum sufficient roses for everyone and is confused as she don't know how many roses to buy.You are a friend of Kabir, so help him to solve the problem so that he can impress Tara by helping her. \n\n-----Input:-----\n- First line will contain T$T$, number of test cases. \n- Each test case contains two space separated integers B$B$ (Number of boys) and  G$G$ (Number of Girls).\n\n-----Output:-----\nFor each test case, output in a single line the total number of roses exchanged.\n\n-----Constraints:-----\n- 1\u2264T\u2264105$1 \\leq T \\leq 10^5$\n- 1\u2264B\u2264109$1 \\leq B \\leq 10^{9}$\n- 1\u2264G\u2264109$1 \\leq G \\leq 10^{9}$\n\n-----Sample Input:-----\n1\n2 3\n\n-----Sample Output:-----\n8\n\n Examples: \nInput: \n['1', '2 3']\nOutput: \n ['8']\n",
  "719": "Problem: \n-----Problem-----\n\nSuppose there is a circle. There are N Juice shops on that circle. Juice shops are numbered 0 to N-1 (both inclusive). You have two pieces of information corresponding to each of the juice shop:\n(1) the amount of Juice that a particular Juice shop can provide and \n(2) the distance from that juice shop to the next juice shop.\n\nInitially, there is a man with a bottle of infinite capacity carrying no juice. He can start the tour at any of the juice shops. Calculate the first point from where the man will be able to complete the circle. Consider that the man will stop at every Juice Shop. The man will move one kilometer for each litre of the juice.\n\n-----Input-----\n- \nThe first line will contain the value of N.\n\t\t\t\t\n- \nThe next N lines will contain a pair of integers each, i.e. the amount of juice that a juice shop can provide(in litres) and the distance between that juice shop and the next juice shop.\n\t\t\t\t\n\n-----Output-----\n\nAn integer which will be the smallest index of the juice shop from which he can start the tour.\n\t\t\n\n-----Constraints-----\n- \n\t\t\t\t\t1 \u2264 N \u2264 105\n- \n\t\t\t\t\t1 \u2264 amt of juice, distance  \u2264 109\n\n-----Sample Input-----\n3\n\n1 5\n\n10 3\n\n3 4\n\n-----Sample Output-----\n1\n\n-----Explanation-----\n\n\t\t\tHe can start the tour from the SECOND Juice shop.\n\t\t p { text-align:justify }\n\n Examples: \nInput: \n['3', '1 5', '10 3', '3 4']\nOutput: \n ['1']\n",
  "720": "Problem: \nAll strings in Chefland are beautiful because they are binary strings (a binary string contains only characters '0' and '1'). The beauty of a binary string $S$ is defined as the number of pairs $(i, j)$ ($1 \\le i \\le j \\le |S|$) such that the substring $S_i, S_{i+1}, \\ldots, S_j$ is special.\nFor a binary string $U$, let's denote the number of occurrences of the characters '1' and '0' in $U$ by $cnt_1$ and $cnt_0$ respectively; then, $U$ is special if $cnt_0 = cnt_1 \\cdot cnt_1$.\nToday, Chef's friend Araspa is celebrating her birthday. Chef wants to give Araspa the most beautiful binary string he can find. Currently, he is checking out binary strings in a shop, but he needs your help to calculate their beauties. Tell Chef the beauty of each binary string he gives you.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $S$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the beauty of the string $S$.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le |S| \\le 10^5$\n- each character of $S$ is '0' or '1'\n\n-----Example Input-----\n2\n010001\n10\n\n-----Example Output-----\n4\n1\n\n-----Explanation-----\nExample case 1: The special substrings correspond to $(i, j) = (1, 2), (1, 6), (2, 3), (5, 6)$.\n\n Examples: \nInput: \n['2', '010001', '10']\nOutput: \n ['4', '1']\n",
  "721": "Problem: \nDo you know that The Chef has a special interest in palindromes? Yes he does! Almost all of the dishes in his restaurant is named by a palindrome strings. The problem is that a name of a dish should not be too long, so The Chef has only limited choices when naming a new dish.\n\nFor the given positive integer N, your task is to calculate the number of palindrome strings of length not exceeding N, that contain only lowercase letters of English alphabet (letters from 'a' to 'z', inclusive). Recall that a palindrome is a string that reads the same left to right as right to left (as in \"radar\").\n\nFor example:\n\n- For N = 1, we have 26 different palindromes of length not exceeding N:\n\"a\", \"b\", ..., \"z\".\n- For N = 2 we have 52 different palindromes of length not exceeding N:\n\"a\", \"b\", ..., \"z\",\n\"aa\", \"bb\", ..., \"zz\".\n- For N = 3 we have 728 different palindromes of length not exceeding N:\n\"a\", \"b\", ..., \"z\",\n\"aa\", \"bb\", ..., \"zz\",\n\"aaa\", \"aba\", ..., \"aza\",\n\"bab\", \"bbb\", ..., \"bzb\",\n...,\n\"zaz\", \"zbz\", ..., \"zzz\".\n\nSince the answer can be quite large you should output it modulo 1000000007 (109 + 7). Yes, we know, most of you already hate this modulo, but there is nothing we can do with it :)\n\n-----Input-----\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains a single integer N.\n\n-----Output-----\n\nFor each test case, output a single line containing the answer for the corresponding test case.\n\n-----Constrains-----\n\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 109\n\n-----Example-----\nInput:\n5\n1\n2\n3\n4\n100\n\nOutput:\n26\n52\n728\n1404\n508533804\n\n-----Explanation-----\n\nThe first three examples are explained in the problem statement above.\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '100', '', '']\nOutput: \n ['26', '52', '728', '1404', '508533804']\n",
  "723": "Problem: \nIn this problem, you will be given a polynomial, you have to print what it becomes after differentiation.\n\nFollowing are the rules for differentiation:\n- For a polynomial f(x), its differentiation is defined as f'(x).\n- If a is a constant, then differentiation of af(x) is af'(x).\n- If f(x) = h(x) + g(x) , then f'(x) = h'(x) + g'(x) \n- If f(x) = x n, then f'(x) = nxn-1. This is true for all  n \u2260 0 .\n- If f(x) = c, where c is a constant, f'(x) = 0.\n\nIf you are still uncomfortable with differentiation, please read the following:\n-  Link to Wikihow page\n- Link to Wikipedia entry.\n\n-----Input-----\n\nFirst line contains T, the number of test cases to follow. \n\nEach test case contains the follows, the first line contains N, the number of non zero terms in the polynomial. Then N lines follow, each line contains a pair of integer which denotes a term in the polynomial, where the first element denotes the coefficient (a) and the second denotes the exponent (p) of the term.\n\n-----Output-----\nPrint the polynomial after differentiation in the desired format as described below.\n-  If the coefficient of a term in the output polynomial is 3, and the corresponding exponent is 2, print it as 3x^2\n- Print \" + \" (with single space on both side) between each output term.\n-  Print the terms in decreasing value of exponent.\n-  For the constant term (if any), you have to just print the coefficient. You should not print x^0.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n-   Subtask 1 (20 points)\n\n- 1 \u2264 N \u2264 3\n- 1 \u2264 a \u2264 10\n- 0 \u2264 p \u2264 10\n- Subtask 2 (80 points)\n\n- 1 \u2264 N \u2264 10000\n- 1 \u2264 a \u2264 100000000\n- 0 \u2264 p \u2264 100000000\n-  No two inputs in a test case will have the same exponent.\n\n-----Example-----\nInput:\n2\n1\n1 2\n3\n1 3\n1 1\n1 0\n\nOutput:\n2x^1\n3x^2 + 1\n\n Examples: \nInput: \n['2', '1', '1 2', '3', '1 3', '1 1', '1 0']\nOutput: \n ['2x^1', '3x^2 + 1']\n",
  "724": "Problem: \nPetya is preparing a problem for a local contest in his school. The problem is to find a longest increasing subsequence in a given permutation. A permutation of size n$n$ is a sequence of n$n$ numbers a1,\u2026,an$a_1, \\ldots, a_n$ such that every number from 1$1$ to n$n$ occurs in the sequence exactly once. An increasing subsequence of length k$k$ of the sequence a1,\u2026,an$a_1, \\ldots, a_n$ is a sequence of indices i1,\u2026,ik$i_1, \\ldots, i_k$ such that 1\u2264i1<\u2026<ik\u2264n$1 \\leq i_1 < \\ldots < i_k \\leq n$ and ai1<\u2026<aik$a_{i_1} < \\ldots < a_{i_k}$. A longest increasing subsequence is an increasing subsequences with the largest length. Note that in general there may be several longest increasing subsequences.\nPetya had some tests prepared, but then lost the input part for some of them. He now has a test for a certain value of n$n$, and a sequence i1,\u2026,ik$i_1, \\ldots, i_k$ that is supposed to be a longest increasing subsequence. Petya now has to reconstruct a permutation of size n$n$ with this sequence being an answer. Petya doesn't want to take any risks, so he additionally wants this sequence to be the only longest increasing subsequence, that is, all other increasing subsequences have to have strictly smaller length. Help Petya determine if this is possible, and if so, construct any such permutation.\n\n-----Input:-----\nThe first line contains an integer T$T$, denoting number of test cases.\nThe first line of every test case contains two integers n$n$ and k\u2212$k-$  the size of the permutation and the length of the longest increasing subsequence (1\u2264k\u2264n\u2264105$1 \\leq k \\leq n \\leq 10^5$).\nThe second line contains k$k$ integers i1,\u2026,ik\u2212$i_1, \\ldots, i_k-$ the longest increasing subsequence (1\u2264i1<\u2026<ik\u2264n$1 \\leq i_1 < \\ldots < i_k \\leq n$).\n\n-----Output:-----\nIf there is no permutation with the sequence i1,\u2026,ik$i_1, \\ldots, i_k$ being the only longest increasing subsequence, print NO . Otherwise, print YES on the first line, followed by n$n$ numbers describing any suitable permutation on the second line.\n\n-----Constraints-----\n- 1\u2264T\u226410$1 \\leq T \\leq 10$\n- 1\u2264k\u2264n\u2264105$1 \\leq k \\leq n \\leq 10^5$ \n- 1\u2264i1<\u2026<ik\u2264n$1 \\leq i_1 < \\ldots < i_k \\leq n$ \n\n-----Sample Input:-----\n2\n3 2\n1 2\n2 1\n1\n\n-----Sample Output:-----\nYES\n2 3 1\nNO\n\n Examples: \nInput: \n['2', '3 2', '1 2', '2 1', '1']\nOutput: \n ['YES', '2 3 1', 'NO']\n",
  "725": "Problem: \nThe Little Elephant and his friends from the Zoo of Lviv were returning from the party. But suddenly they were stopped by the policeman Big Hippo, who wanted to make an alcohol test for elephants.\nThere were N elephants ordered from the left to the right in a row and numbered from 0 to N-1. Let R[i] to be the result of breathalyzer test of i-th elephant.\nConsidering current laws in the Zoo, elephants would be arrested if there exists K consecutive elephants among them for which at least M of these K elephants have the maximal test result among these K elephants.\nUsing poor math notations we can alternatively define this as follows. The elephants would be arrested if there exists i from 0 to N-K, inclusive, such that for at least M different values of j from i to i+K-1, inclusive, we have R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\n\nThe Big Hippo is very old and the Little Elephant can change some of the results. In a single operation he can add 1 to the result of any elephant. But for each of the elephants he can apply this operation at most once.\nWhat is the minimum number of operations that the Little Elephant needs to apply, such that the sequence of results, after all operations will be applied, let elephants to avoid the arrest? If it is impossible to avoid the arrest applying any number of operations, output -1.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, K, M. The second line contains N space-separated integers  R[0], R[1], ..., R[N-1] denoting the test results of the elephants.\n\n-----Output-----\nFor each test case, output a single line containing the minimum number of operations needed to avoid the arrest.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 M \u2264 K \u2264 N \u2264 17\n- 1 \u2264 R[i] \u2264 17\n\n-----Example-----\nInput:\n4\n5 3 2\n1 3 1 2 1\n5 3 3\n7 7 7 7 7\n5 3 3\n7 7 7 8 8\n4 3 1\n1 3 1 2\n\nOutput:\n0\n1\n1\n-1\n\n-----Explanation-----\nExample case 1. Let's follow the poor math definition of arrest. We will consider all values of i from 0 to N-K = 2, inclusive, and should count the number of values of j described in the definition. If it less than M = 2 then this value of i does not cause the arrest, otherwise causes.i{R[i],...,R[i+K-1]}max{R[i],...,R[i+K-1]}For which j = i, ..., i+K-1\nwe have R[j] = maxConclusioni=0{1, 3, 1}max = 3R[j] = 3 for j = 1does not cause the arresti=1{3, 1, 2}max = 3R[j] = 3 for j = 1does not cause the arresti=2{1, 2, 1}max = 2R[j] = 2 for j = 3does not cause the arrest\nSo we see that initial test results of the elephants do not cause their arrest. Hence the Little Elephant does not need to apply any operations. Therefore, the answer is 0.\nExample case 2.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.i{R[i],...,R[i+K-1]}max{R[i],...,R[i+K-1]}For which j = i, ..., i+K-1\nwe have R[j] = maxConclusioni=0{7, 7, 7}max = 7R[j] = 7 for j = 0, 1, 2causes the arresti=1{7, 7, 7}max = 7R[j] = 7 for j = 1, 2, 3causes the arresti=2{7, 7, 7}max = 7R[j] = 7 for j = 2, 3, 4causes the arrest\nSo we see that for initial test results of the elephants each value of i causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[2]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 7, 8, 7, 7}. Let's check that now elephants will be not arrested.i{R[i],...,R[i+K-1]}max{R[i],...,R[i+K-1]}For which j = i, ..., i+K-1\nwe have R[j] = maxConclusioni=0{7, 7, 8}max = 8R[j] = 8 for j = 2does not cause the arresti=1{7, 8, 7}max = 8R[j] = 8 for j = 2does not cause the arresti=2{8, 7, 7}max = 8R[j] = 8 for j = 2does not cause the arrest\nSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1.\nExample case 3.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.i{R[i],...,R[i+K-1]}max{R[i],...,R[i+K-1]}For which j = i, ..., i+K-1\nwe have R[j] = maxConclusioni=0{7, 7, 7}max = 7R[j] = 7 for j = 0, 1, 2causes the arresti=1{7, 7, 8}max = 8R[j] = 8 for j = 3does not cause the arresti=2{7, 8, 8}max = 8R[j] = 8 for j = 3, 4does not cause the arrest\nSo we see that for initial test results of the elephants the value of i = 0 causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[1]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 8, 7, 8, 8}. Let's check that now elephants will be not arrested.i{R[i],...,R[i+K-1]}max{R[i],...,R[i+K-1]}For which j = i, ..., i+K-1\nwe have R[j] = maxConclusioni=0{7, 8, 7}max = 8R[j] = 8 for j = 1does not cause the arresti=1{8, 7, 8}max = 8R[j] = 8 for j = 1, 3does not cause the arresti=2{7, 8, 8}max = 8R[j] = 8 for j = 3, 4does not cause the arrest\nSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1. Note that if we increase by 1 the result R[2] instead of R[1] then the value i = 2 will cause the arrest since {R[2], R[3], R[4]} will be {8, 8, 8} after this operation and we will have 3 values of j from 2 to 4, inclusive, for which R[j] = max{R[2], R[3], R[4]}, namely, j = 2, 3, 4.\nExample case 4. When M = 1 the Little Elephant can't reach the goal since for each value of i from 0 to N-K we have at least one value of j for which R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\n\n Examples: \nInput: \n['4', '5 3 2', '1 3 1 2 1', '5 3 3', '7 7 7 7 7', '5 3 3', '7 7 7 8 8', '4 3 1', '1 3 1 2']\nOutput: \n ['0', '1', '1', '-1']\n",
  "726": "Problem: \nToday, Chef decided to cook some delicious meals from the ingredients in his kitchen. There are $N$ ingredients, represented by strings $S_1, S_2, \\ldots, S_N$. Chef took all the ingredients, put them into a cauldron and mixed them up.\nIn the cauldron, the letters of the strings representing the ingredients completely mixed, so each letter appears in the cauldron as many times as it appeared in all the strings in total; now, any number of times, Chef can take one letter out of the cauldron (if this letter appears in the cauldron multiple times, it can be taken out that many times) and use it in a meal. A complete meal is the string \"codechef\". Help Chef find the maximum number of complete meals he can make!\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains a single string $S_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum number of complete meals Chef can create.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $|S_1| + |S_2| + \\ldots + |S_N| \\le 1,000$\n- each string contains only lowercase English letters\n\n-----Example Input-----\n3\n6\ncplusplus\noscar\ndeck\nfee\nhat\nnear\n5\ncode\nhacker\nchef\nchaby\ndumbofe\n5\ncodechef\nchefcode\nfehcedoc\ncceeohfd\ncodechef\n\n-----Example Output-----\n1\n2\n5\n\n-----Explanation-----\nExample case 1: After mixing, the cauldron contains the letter 'c' 3 times, the letter 'e' 4 times, and each of the letters 'o', 'd', 'h' and 'f' once. Clearly, this is only enough for one \"codechef\" meal.\nExample case 2: After mixing, the cauldron contains the letter 'c' 4 times, 'o' 2 times, 'd' 2 times, 'e' 4 times, 'h' 3 times and 'f' 2 times, which is enough to make 2 meals.\n\n Examples: \nInput: \n['3', '6', 'cplusplus', 'oscar', 'deck', 'fee', 'hat', 'near', '5', 'code', 'hacker', 'chef', 'chaby', 'dumbofe', '5', 'codechef', 'chefcode', 'fehcedoc', 'cceeohfd', 'codechef']\nOutput: \n ['1', '2', '5']\n",
  "727": "Problem: \nTo protect people from evil, \na long and tall wall was constructed a few years ago. \nBut just a wall is not safe, there should also be soldiers on it, \nalways keeping vigil. \nThe wall is very long and connects the left and the right towers. \nThere are exactly N spots (numbered 1 to N) on the wall for soldiers. \nThe Kth spot is K miles far from the left tower and (N+1-K) miles from the right tower.\n\nGiven a permutation of spots P of {1, 2, ..., N}, soldiers occupy the N spots in that order. \nThe P[i]th spot is occupied before the P[i+1]th spot. \nWhen a soldier occupies a spot, he is connected to his nearest soldier already placed to his left. \nIf there is no soldier to his left, he is connected to the left tower. The same is the case with right side. \nA connection between two spots requires a wire of length equal to the distance between the two.\n\nThe realm has already purchased a wire of M miles long from Nokia, \npossibly the wire will be cut into smaller length wires. \nAs we can observe, the total length of the used wire depends on the permutation of the spots P. Help the realm in minimizing the length of the unused wire. If there is not enough wire, output -1.\n\n-----Input-----\nFirst line contains an integer T (number of test cases, 1 \u2264 T \u2264 10 ). Each of the next T lines contains two integers N M, as explained in the problem statement (1 \u2264 N \u2264 30 , 1 \u2264 M \u2264 1000).\n\n-----Output-----\nFor each test case, output the minimum length of the unused wire, or -1 if the the wire is not sufficient.\n\n-----Example-----\nInput:\n4\n3 8\n3 9\n2 4\n5 25\n\nOutput:\n0\n0\n-1\n5\n\nExplanation:\n\nIn the 1st case, for example, the permutation P = {2, 1, 3} will use the exact 8 miles wires in total.\n\nIn the 2nd case, for example, the permutation P = {1, 3, 2} will use the exact 9 miles wires in total.\n\nTo understand the first two cases, you can see the following figures:\n\n\n\nIn the 3rd case, the minimum length of wire required is 5, for any of the permutations {1,2} or {2,1}, so length 4 is not sufficient.\n\nIn the 4th case, for the permutation {1, 2, 3, 4, 5} we need the maximum length of the wire = 20. So minimum possible unused wire length = 25 - 20 = 5.\n\n Examples: \nInput: \n['4', '3 8', '3 9', '2 4', '5 25']\nOutput: \n ['0', '0', '-1', '5']\n",
  "728": "Problem: \nGiven a square matrix of size N\u00d7N, calculate the absolute difference between the sums of its diagonals. \n\n-----Input-----\nThe first line contains a single integer N. The next N lines denote the matrix's rows, with each line containing N space-separated integers describing the columns.\n\n-----Output-----\nPrint the absolute difference between the two sums of the matrix's diagonals as a single integer.\n\n-----Constraints-----\n1<=N<=10\n\n-----Example-----\nInput:\n3\n11 2 4\n4 5 6\n10 8 -12\n\nOutput:\n15\n\n-----Explanation-----\nThe primary diagonal is: \n11\n5\n-12\nSum across the primary diagonal: 11 + 5 - 12 = 4\nThe secondary diagonal is:\n4\n5\n10\nSum across the secondary diagonal: 4 + 5 + 10 = 19 \nDifference: |4 - 19| = 15\n\n Examples: \nInput: \n['3', '11 2 4', '4 5 6', '10 8 -12']\nOutput: \n ['15']\n",
  "729": "Problem: \nYou are given a matrix of integers $A$ with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$). Each element of this matrix is either $0$ or $1$.\nA move consists of the following steps:\n- Choose two different rows $r_1$ and $r_2$ or two different columns $c_1$ and $c_2$.\n- Apply the bitwise OR operation with the second row/column on the first row/column. Formally, if you chose two rows, this means you should change $A_{r_1, k}$ to $A_{r_1, k} \\lor A_{r_2, k}$ for each $1 \\le k \\le M$; if you chose two columns, then you should change $A_{k, c_1}$ to $A_{k, c_1} \\lor A_{k, c_2}$ for each $1 \\le k \\le N$.\nFor each element of the matrix, compute the minimum number of moves required to make it equal to $1$ or determine that it is impossible. Note that these answers are independent, i.e. we are starting with the initial matrix for each of them.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $M$ integers $A_{i, 1}, A_{i, 2}, \\dots, A_{i, M}$ NOT separated by spaces.\n\n-----Output-----\nFor each test case, print $N$ lines. For each valid $i$, the $i$-th of these lines should contain $M$ space-separated integers; for each valid $j$, the $j$-th of these integers should be the minimum number of moves required to make $A_{i, j}$ equal to $1$, or $-1$ if it is impossible.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N, M \\le 1,000$\n- $A_{i, j} \\in \\{0, 1\\}$ for each valid $i, j$\n- the sum of $N \\cdot M$ for all test cases does not exceed $1,000,000$\n\n-----Example Input-----\n1\n3 3\n010\n000\n001\n\n-----Example Output-----\n1 0 1\n2 1 1\n1 1 0\n\n Examples: \nInput: \n['1', '3 3', '010', '000', '001']\nOutput: \n ['1 0 1', '2 1 1', '1 1 0']\n",
  "730": "Problem: \nEvery Friday Chef and his N - 1 friends go for a party. At these parties, they play board games. This Friday, they are playing a game named \"Boats! Boats! Boats!\". In this game players have to transport cookies between Venice and Constantinople. Each player has a personal storage. The players are numbered from 1 to N, Chef is numbered 1. Rules for determining a winner are very difficult, therefore Chef asks you to write a program, which will determine who is a winner. \n\nThere are 6 types of cookies. For each cookie in the storage player gets 1 point. Also player gets additional points if he packs his cookies in some boxes as follows: \n\n- A box containing 4 different types of cookies fetches 1 additional point.\n- A box containing 5 different types of cookies fetches 2 additional points.\n- A box containing 6 different types of cookies fetches 4 additional points.\n\nObviously a cookie can be put into a single box.\n\nFor each player, you know the number of cookies in his storage (denoted by c[i]), also the types of cookies in the storage given denoted by type[i][j].\n\nYour task is to determine the winner of this game. Output \"tie\" if there are two or more players with same maximum score, \"chef\" if only Chef has a maximum score, winner's index in all other cases.\n\n-----Input-----\n\nThe first line of input contains a single integer T denoting the number of test cases. This will be followed by T test cases.\nThe first line of each test case contains an integer N denoting the number of players.\nThe second line of each test case contains an integer c[i] denoting the number of cookies in the i-th storage, followed by c[i] space-separated integers type[i][j] which denote the type if j-th cookie in the storage i-th.\n\n-----Output-----\nFor each test case, output a single line containing the answer as specified in the statement.\n\n-----Constraints and Subtasks-----Subtask #1 : (20 points)  \n\n- 1 \u2264 T \u2264 10 \n- 1 \u2264  N  \u2264 100  \n- 1 \u2264  c[i]  \u2264  100  \n- 1 \u2264  type[i][j]  \u2264  3   \nSubtask #2 : (80 points)  \n\n- 1 \u2264 T \u2264 10 \n- 1 \u2264  N  \u2264 100  \n- 1 \u2264  c[i]  \u2264  100  \n- 1 \u2264  type[i][j]  \u2264  6  \n\n-----Example-----\nInput:\n3\n2\n6 1 2 3 4 5 6\n9 3 3 3 4 4 4 5 5 5\n2\n5 2 3 4 5 6\n7 1 1 2 2 3 3 4\n3\n4 1 1 2 3\n4 1 2 2 3\n4 1 2 3 3\nOutput:\nchef\n2\ntie\n\n-----Explanation-----\nExample case 1.\nChef has total 6 cookie, so he gets 6 points for that. Also, he can put all his cookies (as they are all distinct) in a bag of size 6. It will fetch him additional 4 points. So, Chef's total points will be 10.\nThe second player has 9 cookies, he gets 9 points for that. Other than this, he can't create a bag with either 4, 5 or 6 distinct cookies. So, his final score is 9.\n10 > 9 - Chef wins.\nExample case 2.\nChef has 5 + 2 (a bag with 5 different cookies) = 7.\nThe second player has 7 + 1(a bag with 4 different cookies) = 8.\n7 < 8 - the second player wins.\nExample case 3.\nEvery player has 4 cookies and can't create any bag of sweets. So, it's a tie.\n\n Examples: \nInput: \n['3', '2', '6 1 2 3 4 5 6', '9 3 3 3 4 4 4 5 5 5', '2', '5 2 3 4 5 6', '7 1 1 2 2 3 3 4', '3', '4 1 1 2 3', '4 1 2 2 3', '4 1 2 3 3']\nOutput: \n ['chef', '2', 'tie']\n",
  "731": "Problem: \n-----Indian National Olympiad in Informatics 2014-----\nNikhil\u2019s slogan has won the contest conducted by Drongo Airlines and he is entitled to a free ticket between any two destinations served by the airline. All cities served by Drongo Airlines can be reached from each other by some sequence of connecting flights. Nikhil is allowed to take as many connecting flights as needed, but he must take the cheapest route between his chosen destinations.\nEach direct flight between two cities has a fixed price. All pairs of cities connected by direct flights have flights in both directions and the price is the same in either direction. The price for a sequence of connecting flights is the sum of the prices of the direct flights along the route.\nNikhil has information about the cost of each direct flight. He would like to maximize the value of his prize, so he would like to choose a pair of cities on the network for which the cost of the cheapest route is as high as possible.\nFor instance, suppose the network consists of four cities {1, 2, 3, 4}, connected as shown on the right.\nIn this case, Nikhil should choose to travel between 1 and 4, where the cheapest route has cost 19. You can check that for all other pairs of cities, the cheapest route has a smaller cost. For instance, notice that though the direct flight from 1 to 3 costs 24, there is a cheaper route of cost 12 from 1 to 2 to 3.\n\n-----Input Format:-----\n- Line 1 : Two space-separated integers, C and F . C is the number of cities on the network, numbered 1, 2, . . . , C. F is the number of pairs of cities connected by a direct flight\n- Lines 2 to F + 1 : Each line describes one direct flight between a pair of cities and consists of three integers, x, y and p, where x and y are the two cities connected by this flight and p is the price of this\nFor all direct flights, $x \\neq y$, and no pair of cities is connected by more than one direct flight. If there is a direct flight from x to y with price p, there is also a flight from y to x with price p and exactly one of these two will be listed.\n\n-----Output Format-----\n- The output consists of a single integer, the maximum cost among the cheapest routes between all pairs of cities across the airline\u2019s network.\n\n-----Test Data-----\nThe testdata is grouped into three subtasks. In all subtasks, 2 \u2264 C \u2264 230 and 1 \u2264 F \u2264 23665. In addition, each subtask has the following constraints on the inputs.\n- Subtask 1 (20 marks) : F = C \u2212 1 (that is, the airline network is a tree) and p = 1 for each direct flight.\n- Subtask 2 (30 marks) : There is no constraint on the shape of the network, but for each direct flight, p = 1.\n- Subtask 3 (50 marks) : There is no constraint on the shape of the network, but for each direct flight, 0 \u2264 p \u2264 $10^5$.\n\n-----Sample Input-----\n4 5\n1 2 10\n1 3 24\n2 3 2\n2 4 15\n3 4 7\n\n-----Sample Output-----\n19\n\nNote: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\n\n Examples: \nInput: \n['4 5', '1 2 10', '1 3 24', '2 3 2', '2 4 15', '3 4 7']\nOutput: \n ['19', 'Note : Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!']\n",
  "732": "Problem: \nAlice and Bob are walking on an infinite straight street. Initially, both are at the position $X=0$ and they start walking in the direction of increasing $X$. After $N$ seconds, they stop. Let's denote Alice's speed and Bob's speed during the $i$-th of these seconds by $A_i$ and $B_i$ respectively.\nSometimes, Alice and Bob walk together, i.e. with the same speed side by side. Let's define the weird distance as the total distance they walk this way. Find this weird distance.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n- The third line contains $N$ space-separated integers $B_1, B_2, \\ldots, B_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the total weird distance. It can be proved that this distance is an integer.\n\n-----Constraints-----\n- $1 \\le T \\le 20$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^5$ for each valid $i$\n- $1 \\le B_i \\le 10^5$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N \\le 1,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n3\n4\n1 3 3 4\n1 2 4 4\n2\n2 3\n3 2\n2\n3 3\n3 3\n\n-----Example Output-----\n5\n0\n6\n\n-----Explanation-----\nExample case 1:\n- Alice and Bob walk side by side during the first second, from $X=0$ to $X=1$.\n- Then, Alice starts walking faster than Bob, so they do not walk side by side during second $2$. At the end of second $2$, Alice is at $X=4$, while Bob is at $X=3$.\n- During the next second, they again do not walk side by side, but Bob walks faster, so they both end up at $X=7$.\n- During the last second, they both walk side by side and the distance they walk is $4$.\n- Alice and Bob walk side by side during the $1$-st and $4$-th second and the total weird distance they travel is $1+4=5$.\nExample case 2:\n- First, Alice walks with speed $2$ and Bob walks with speed $3$, so they do not walk side by side. Alice ends up at $X=2$, while Bob ends up at $X=3$ at the end of the $1$-st second.\n- Then, Alice walks with speed $3$ and Bob walks with speed $2$, so they do not walk side by side either.\n- Although Alice and Bob both end up at $X=5$ at the end of the $2$-nd second, the weird distance is $0$.\nExample case 3: We can see that Alice and Bob always walk together, so the weird distance is $3+3=6$.\n\n Examples: \nInput: \n['3', '4', '1 3 3 4', '1 2 4 4', '2', '2 3', '3 2', '2', '3 3', '3 3']\nOutput: \n ['5', '0', '6']\n",
  "733": "Problem: \nGiven a string consisting of only lowercase English alphabets, your task is to find the smallest palindromic substring.\nIn case there are multiple palindromic substrings of the same length present, print the lexicographically smallest substring. \nFormally, a substring is a contiguous sequence of characters within a string. So in a string \"abcdef\", \"abc\" is a substring whereas \"adf\" is not a substring.\nA palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g. madam or mom.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains of two lines of input, two integers.\n- First, we have a single integer $N$ which signifies the length of the substring.\n- Next, we have a string of length $N$ that only has lowercase English alphabets.\n\n-----Output:-----\nFor each testcase, output in a single line the shortest palindromic substring.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $2 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n2\n2\nzy\n1\ncd\n\n-----Sample Output:-----\ny\nc\n\n-----EXPLANATION:-----\nThere are only two possibilities. \"z\" and \"y\". Since both of them have the same length. We print the lexicographically smaller substring which is y.\n\n Examples: \nInput: \n['2', '2', 'zy', '1', 'cd']\nOutput: \n ['y', 'c']\n",
  "734": "Problem: \nChef has $N$ markers. There is a cap on each marker. For each valid $i$, the $i$-th marker has colour $a_i$. Initially, for each valid $i$, the colour of the cap on the $i$-th marker is also $a_i$.\nChef wants to rearrange the caps in such a way that no marker has the same colour as its cap. (Obviously, each marker must have exactly one cap.) Can he do that? If he can, find one such way to rearrange the caps. If there are multiple solutions, you may find any one.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\n- For each test case:\n- If Chef cannot successfully rearrange the caps, print a single line containing the string \"No\" (without quotes).\n- Otherwise, print two lines. The first line should contain the string \"Yes\" (without quotes). The second line should contain $N$ space-separated integers describing a valid rearrangement of caps. For each valid $i$, the $i$-th of these integers should denote the final colour of the cap on the $i$-th marker.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $1 \\le a_i \\le 10^9$ for each valid $i$\n\n-----Example Input-----\n2\n9\n1 1 1 2 2 2 3 3 3\n2\n1 1\n\n-----Example Output-----\nYes\n2 2 2 3 3 3 1 1 1\nNo\n\n Examples: \nInput: \n['2', '9', '1 1 1 2 2 2 3 3 3', '2', '1 1']\nOutput: \n ['Yes', '2 2 2 3 3 3 1 1 1', 'No']\n",
  "735": "Problem: \nHarish has decided to go to Arya's hotel this morning. We all know he is crazy for masala dosas. And as usual he is always hungry. He decided to order all the masala dosas at once. But then he realised that he did not have enough money to buy all of them. So he decided to share the amount with his friend Ozil. But both of them are fans of even numbers. Both of them says they want to eat even number of dosas. Ozil is ready to put the share if and only if , he is sure that he can get even number of dosas. So given N number of dosas can you please help Harish to decide, if he will be able to get all the dosas at once from the hotel.\n\n-----Input-----\nThe first line of input contains an integer T which denotes the number of test files. Next T lines contains an integer N where N is the total number of dosas.\n\n-----Output-----\nPrint \"YES\" if both can get even number of dosas. If it is not possible print \"NO\".\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^6\n- 1 \u2264 N \u2264 10^18\n\n-----Subtasks-----\nSubtask #1 : (20 points)\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N\u2264 100\n\nSubtask 2 : (80 points) \n\n- 1 \u2264 T \u2264 10^6\n- 1 \u2264 N\u2264 10^18\n\n-----Example-----\nInput:\n2 \n16 \n27\nOutput:\nYES\nNO\n\n Examples: \nInput: \n['2', '16', '27']\nOutput: \n ['YES', 'NO']\n",
  "736": "Problem: \nGargi is thinking of a solution to a problem. Meanwhile, her friend asks her to solve another problem. Since Gargi is busy in her own problem, she seeks your help to solve the new problem.\n\nYou are given a string S containing characters a-z (lower case letters) only. You need to change the string to a new string consisting of only one letter from a-z.\n\nFor a given character S[i] in the string, if you change it to a character having lower ASCII value than the character S[i], you gain points equal to the difference in ASCII value of the old character and the new character. Similarly, for a given character S[j] in the string, if you change it to a character having higher ASCII value than the character S[j], you lose points equal to the difference in ASCII value of the old character and the new character.\n\nHowever, Gargi does not like gaining or losing points. She has asked you to change the string in such a way that the total losing or gaining of points at the end of the string conversion is minimum.\n\nGive Gargi the absolute value of the points you have at the end of the string conversion.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each of the T test case contains a string S containing only lower case characters (a-z)\n\n-----Output-----\nFor each test case, output a single line containing the answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 |S| \u2264 100000\n\n-----Example-----\nInput:\n1\nabba\n\nOutput:\n2\n\n-----Explanation-----\nExample case 1. The new string can be aaaa where you have +2 points at the end of string conversion or it can be bbbb where you have -2 points at the end of string conversion. Hence the output is 2.\n\n Examples: \nInput: \n['1', 'abba']\nOutput: \n ['2']\n",
  "737": "Problem: \nRodriguez is a happy and content farmer. He has got a square field of side length $x$. Miguel, his son has himself grown into a man and his father wants to gift him something out of which he can make a living. So he gift's his son a square piece of land cut out from a corner of his field of side length $ y (y < x) $ leaving him with a L-shaped land.\nBut in Spanish tradition, it is considered inauspicious to own something which is prime in number. This worries Rodriguez as he doesn't want his left out area to be a prime number leading to bad luck. Find whether the spilt will be in terms with the tradition leaving Rodriguez happy.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains two integers $x, y$. \n\n-----Output:-----\nPrint YES if Rodriguez will be happy. Otherwise print NO.\n\n-----Constraints-----\n- $1 \\leq T \\leq 5$\n- $1 \\leq y < x \\leq 100000000000$\n\n-----Sample Input:-----\n2\n7 5\n6 5\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\nIn case 1 :\nLeft out area is 24, which is not prime.\nIn case 2:\nLeft out area is 11, which is prime.\n\n Examples: \nInput: \n['2', '7 5', '6 5']\nOutput: \n ['YES', 'NO']\n",
  "740": "Problem: \nThere is a field with plants \u2014 a grid with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$); out of its $NM$ cells, $K$ cells contain plants, while the rest contain weeds. Two cells are adjacent if they have a common side.\nYou want to build fences in the field in such a way that the following conditions hold for each cell that contains a plant:\n- it is possible to move from this cell to each adjacent cell containing a plant without crossing any fences\n- it is impossible to move from this cell to any cell containing weeds or to leave the grid without crossing any fences\nThe fences can only be built between cells or on the boundary of the grid, i.e. on the sides of cells. The total length of the built fences is the number of pairs of side-adjacent cells such that there is a fence built on their common side plus the number of sides of cells on the boundary of the grid which have fences built on them. Find the minimum required total length of fences that need to be built.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.\n- $K$ lines follow. Each of these lines contains two space-separated integers $r$ and $c$ denoting that the cell in row $r$ and column $c$ contains a plant.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum required length of fences.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N, M \\le 10^9$\n- $1 \\le K \\le 10^5$\n- $1 \\le r \\le N$\n- $1 \\le c \\le M$\n- the cells containing plants are pairwise distinct\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N, M \\le 1,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n4 4 9\n1 4\n2 1 \n2 2\n2 3\n3 1\n3 3\n4 1\n4 2\n4 3\n4 4 1\n1 1\n\n-----Example Output-----\n20\n4\n\n-----Explanation-----\nExample case 1: The field looks like this ('x' denotes a cell containing a plant, '.' denotes a cell containing weeds):\n...x\nxxx.\nx.x.\nxxx.\n\nAn optimal solution is to build fences around the topmost plant (with length $4$), around the remaining eight plants (with length $12$) and around the hole between them (with length $4$). The total length is $4+12+4 = 20$.\n\n Examples: \nInput: \n['2', '4 4 9', '1 4', '2 1', '2 2', '2 3', '3 1', '3 3', '4 1', '4 2', '4 3', '4 4 1', '1 1']\nOutput: \n ['20', '4']\n",
  "743": "Problem: \nYesterday, Chef found $K$ empty boxes in the cooler and decided to fill them with apples. He ordered $N$ apples, where $N$ is a multiple of $K$. Now, he just needs to hire someone who will distribute the apples into the boxes with professional passion. \nOnly two candidates passed all the interviews for the box filling job. In one minute, each candidate can put $K$ apples into boxes, but they do it in different ways: the first candidate puts exactly one apple in each box, while the second one chooses a random box with the smallest number of apples and puts $K$ apples in it.\nChef is wondering if the final distribution of apples can even depend on which candidate he hires. Can you answer that question?\nNote: The boxes are distinguishable (labeled), while the apples are not. Therefore, two distributions of apples are different if there is a box such that the number of apples in it when the first candidate finishes working can be different from the number of apples in it when the second candidate finishes working.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $K$. \n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if the final distributions of apples can be different or \"NO\" if they will be the same (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 250$\n- $1 \\le N, K \\le 10^{18}$\n- $N$ is divisible by $K$\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N, K \\le 10^5$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n3\n5 1\n4 2\n10 10\n\n-----Example Output-----\nNO\nNO\nYES\n\n-----Explanation-----\nExample case 1: No matter who is hired, all apples will be in the only box at the end.\nExample case 2: At the end, there will be two apples in each box.\nExample case 3: If we hire the first candidate, there will be one apple in each box, but if we hire the second one, there will be $10$ apples in one box and none in all other boxes.\n\n Examples: \nInput: \n['3', '5 1', '4 2', '10 10']\nOutput: \n ['NO', 'NO', 'YES']\n",
  "744": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K (odd) to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n3\n5\n7\n\n-----Sample Output:-----\n*\n*\n**\n*\n*\n**\n* *\n**\n*\n*\n**\n* *\n*  *\n* *\n**\n*\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '3', '5', '7']\nOutput: \n ['*', '*', '**', '*', '*', '**', '* *', '**', '*', '*', '**', '* *', '*  *', '* *', '**', '*']\n",
  "745": "Problem: \nYou want to build a temple for snakes. The temple will be built on a mountain range, which can be thought of as n blocks, where height of i-th block is given by hi. The temple will be made on a consecutive section of the blocks and its height should start from 1 and increase by exactly 1 each time till some height and then decrease by exactly 1 each time to height 1, \ni.e. a consecutive section of 1, 2, 3, .. x-1, x, x-1, x-2, .., 1 can correspond to a temple. Also, heights of all the blocks other than of the temple should have zero height, so that the temple is visible to people who view it from the left side or right side.\nYou want to construct a temple. For that, you can reduce the heights of some of the blocks. In a single operation, you can reduce the height of a block by 1 unit. Find out minimum number of operations required to build a temple.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains an integer n.\nThe next line contains n integers, where the i-th integer denotes hi\n\n-----Output-----\nFor each test case, output a new line with an integer corresponding to the answer of that testcase.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 2 \u2264 n \u2264 105\n- 1 \u2264 hi \u2264 109\n\n-----Example-----\nInput\n3\n3\n1 2 1\n4\n1 1 2 1\n5\n1 2 6 2 1\n\nOutput\n0\n1\n3\n\n-----Explanation-----\nExample 1. The entire mountain range is already a temple. So, there is no need to make any operation.\nExample 2. If you reduce the height of the first block to 0. You get 0 1 2 1. The blocks 1, 2, 1 form a temple. So, the answer is 1.\nExample 3. One possible temple can be 1 2 3 2 1. It requires 3 operations to build. This is the minimum amount you have to spend in order to build a temple.\n\n Examples: \nInput: \n['3', '3', '1 2 1', '4', '1 1 2 1', '5', '1 2 6 2 1']\nOutput: \n ['0', '1', '3']\n",
  "746": "Problem: \nGiven a complete binary tree with the height of H, we index the nodes respectively top-down and left-right from 1. The i-th node stores a positive integer Vi. Define Pi as follows: Pi=Vi if the i-th node is a leaf, otherwise Pi=max(Vi*PL, Vi*PR), where L and R are the indices of the left and right children of i, respectively. Your task is to caculate the value of P1.\n\n-----Input-----\nThere are several test cases (fifteen at most), each formed as follows:\n\n- The first line contains a positive integer H (H \u2264 15).\n- The second line contains 2H-1 positive integers (each having a value of 109 at most), the i-th integer shows the value of Vi.\nThe input is ended with H = 0.\n\n-----Output-----\nFor each test case, output on a line an integer which is the respective value of P1 found, by modulo of 1,000,000,007.\n\n-----Example-----\nInput:\n2\n1 2 3\n3\n3 1 5 2 6 4 7\n0\n\nOutput:\n3\n105\n\nExplanation:\n\nThe second test case is constructed as follows:\n\n3\n/ \\\n/   \\\n1     5\n/ \\   / \\\n2   6 4   7\n\n Examples: \nInput: \n['2', '1 2 3', '3', '3 1 5 2 6 4 7', '0']\nOutput: \n ['3', '105']\n",
  "747": "Problem: \nChef received a new sequence $A_1, A_2, \\ldots, A_N$. He does not like arbitrarily ordered sequences, so he wants to permute the elements of $A$ in such a way that it would satisfy the following condition: there is an integer $p$ ($1 \\le p \\le N$) such that the first $p$ elements of the new (permuted) sequence are strictly increasing and the last $N-p+1$ elements are strictly decreasing.\nHelp Chef and find a permutation of the given sequence which satisfies this condition or determine that no such permutation exists. If there are multiple solutions, you may find any one.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case:\n- If there is no permutation of $A$ that satisfies the given condition, print a single line containing the string \"NO\" (without quotes).\n- Otherwise, print two lines.\n- The first of these lines should contain the string \"YES\" (without quotes).\n- The second line should contain $N$ space-separated integers \u2015 the elements of your permuted sequence.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 2 \\cdot 10^5$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $N \\le 10^3$\n- $A_i \\le 2 \\cdot 10^3$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^4$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n5\n4\n1 3 2 4\n4\n1 3 2 4\n6\n1 10 10 10 20 15\n5\n1 1 2 2 3\n4\n1 2 3 3\n\n-----Example Output-----\nYES\n1 2 3 4\nYES\n4 3 2 1\nNO\nYES\n1 2 3 2 1\nNO\n\n Examples: \nInput: \n['5', '4', '1 3 2 4', '4', '1 3 2 4', '6', '1 10 10 10 20 15', '5', '1 1 2 2 3', '4', '1 2 3 3']\nOutput: \n ['YES', '1 2 3 4', 'YES', '4 3 2 1', 'NO', 'YES', '1 2 3 2 1', 'NO']\n",
  "748": "Problem: \n\tChef has a cubic die with 6 faces kept on an infinite plane. Each face has a distinct integer in the range [1,6] written on it, but the exact arrangement of the numbers on the faces of the die is unknown to Chef. Curiosity gets the better of Chef and he wants to find out o(1), o(2), ..., o(6), where o(i) is the number written opposite to the number i.\n\n\tChef performs the following N-1 steps to learn the exact arrangement of the numbers on the die. In the i-th step, Chef pushes the die in some direction (there are 4 possible directions), and the die rolls 90o in this direction. The picture below demonstrates a die and the result that it produced after rolling in each of the 4 directions respectively. For this die, we have o(1)=4, o(2)=5, o(3)=6, o(4)=1, o(5)=2, o(6)=3.\n\n\tChef records N numbers A1, A2, ..., AN, where Ai is the number written on the top of the die before the i-th step. However, the information on the direction in which he pushes the die each time are lost. Can you help him determine the arrangement of 1-6? You need to output o(1), o(2), ..., o(6). If there are multiple solutions, output any one of them.\n\n-----\n\tInput-----\n- The first line of input contains a single integer T, the number of test cases.\n- Each test case consists of two lines.\n- The first line contains an integer N, and the second line contains N space-separated integers A1, A2, ..., AN.\n\n-----\n\tOutput-----\n\n\tFor each test case, output one line. If a possible solution exists, then output 6 space-separated integers o(1), o(2), ..., o(6); otherwise, output -1.\n\n-----\n\tConstraints-----\n\n- 1 \u2264 T, N \u2264 500\n- 1 \u2264 Ai \u2264 6\n\n\tSubtask #1 (17 points):\n\n- N \u2264 2\n\n\tSubtask #2 (83 points):\n\n- original constraints\n\n-----\n\tExample-----\nInput:\n4\n9\n1 3 4 6 1 3 4 6 1\n10\n1 2 1 3 1 4 1 5 1 6\n6\n1 2 3 4 5 6\n4\n1 3 3 1\n\nOutput:\n2 1 6 5 4 3\n-1\n4 5 6 1 2 3\n-1\n\n-----\n\tExplanation-----\nExample case 1: See below.\n\nExample case 2: You can prove that there's no solution.\nExample case 3: The solution is not unique. 3 5 1 6 2 4 is another valid solution.\n\n Examples: \nInput: \n['4', '9', '1 3 4 6 1 3 4 6 1', '10', '1 2 1 3 1 4 1 5 1 6', '6', '1 2 3 4 5 6', '4', '1 3 3 1']\nOutput: \n ['2 1 6 5 4 3', '-1', '4 5 6 1 2 3', '-1']\n",
  "749": "Problem: \nThe Government of Siruseri is no different from any other when it comes to being \"capital-centric\" in its policies. Recently the government decided to set up a nationwide fiber-optic network to take Siruseri into the digital age. And as usual, this decision was implemented in a capital centric manner --- from each city in the country, a fiber optic cable was laid to the capital! Thus, traffic between any two cities had to go through the capital.\nSoon, it became apparent that this was not quite a clever idea, since any breakdown at the capital resulted in the disconnection of services between other cities. So, in the second phase, the government plans to connect a few more pairs of cities directly by fiber-optic cables. The government has specified that this is to be done in such a way that the disruption of services at any one city will still leave the rest of the country connected.\nThe government has data on the cost of laying fiber optic cables between every pair of cities. You task is to compute the minimum cost of additional cabling required to ensure the requirement described above is met.\nFor example, if Siruseri has $4$ cities numbered $1,2,3$ and $4$ where $1$ is the capital and further suppose that the cost of laying cables between these cities are as given in the table below:\n\nNote that the government has already connected the capital with every other city. So, if we connect the cities $2$ and $3$ as well as $3$ and $4$, you can check that disruption of service at any one city will still leave the other cities connected. The cost of connecting these two pairs is $4 + 6 = 10$. The same effect could have been achieved by connecting $2$ and $3$ as well as $2$ and $4$, which would have cost $4 + 5 = 9$. You can check that this is the best you can do.\nYour task is to write a program that allows the government to determine the minimum cost it has to incur in laying additional cables to fulfil the requirement.\n\n-----Input:-----\n- The first line of the input contains a single integer $N$ indicating the number of cities in Siruseri. You may assume that the capital city is always numbered $1$. \n- This is followed by $N$ lines of input each containing $N$ integers. \n- The $j^{th}$ integer on line $i$ is the cost of connecting city $i$ with city $j$. The $j^{th}$ integer on line $i$ will be the same as the $i^{th}$ integer on line $j$ (since the links are bidirectional) and the $i^{th}$ entry on line $i$ will always be $0$ (there is no cost in connecting a city with itself).\n\n-----Output:-----\nA single integer indicating the minimum total cost of the links to be added to ensure that disruption of services at one city does not disconnect the rest of the cities.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 2000$.\n- $0 \\leq$ costs given in the input $\\leq 100000$\n\n-----Sample Input-----\n4\n0 7 8 10\n7 0 4 5 \n8 4 0 6\n10 5 6 0\n\n-----Sample Output-----\n9\n\n Examples: \nInput: \n['4', '0 7 8 10', '7 0 4 5', '8 4 0 6', '10 5 6 0']\nOutput: \n ['9']\n",
  "750": "Problem: \nSome programming contest problems are really tricky: not only do they\nrequire a different output format from what you might have expected, but\nalso the sample output does not show the difference. For an example,\nlet us look at permutations.\n\nA permutation of the integers 1 to n is an\nordering of\nthese integers. So the natural way to represent a permutation is\nto list the integers in this order. With n = 5, a\npermutation might look like 2, 3, 4, 5, 1. \n\nHowever, there is another possibility of representing a permutation:\nYou create a list of numbers where the i-th number is the\nposition of the integer i in the permutation. \nLet us call this second\npossibility an inverse permutation. The inverse permutation\nfor the sequence above is 5, 1, 2, 3, 4.\n\nAn ambiguous permutation is a permutation which cannot be\ndistinguished from its inverse permutation. The permutation 1, 4, 3, 2\nfor example is ambiguous, because its inverse permutation is the same.\nTo get rid of such annoying sample test cases, you have to write a\nprogram which detects if a given permutation is ambiguous or not.\n\n-----Input Specification-----\nThe input contains several test cases.\n\nThe first line of each test case contains an integer n\n(1 \u2264 n \u2264 100000).\nThen a permutation of the integers 1 to n follows\nin the next line. There is exactly one space character\nbetween consecutive integers.\nYou can assume that every integer between 1 and n\nappears exactly once in the permutation.\n\nThe last test case is followed by a zero.\n\n-----Output Specification-----\nFor each test case output whether the permutation is ambiguous or not.\nAdhere to the format shown in the sample output.\n\n-----Sample Input-----\n4\n1 4 3 2\n5\n2 3 4 5 1\n1\n1\n0\n\n-----Sample Output-----\nambiguous\nnot ambiguous\nambiguous\n\n Examples: \nInput: \n['4', '1 4 3 2', '5', '2 3 4 5 1', '1', '1', '0']\nOutput: \n ['ambiguous', 'not ambiguous', 'ambiguous']\n",
  "751": "Problem: \nThere are n villages in a Chefland. Some of the villages have electricity facilities, other doesn't. You can consider the villages arranged in line in the order 1 to n from left to right. i-th of village can be considered at xi coordinates.\n\nChef decided that electricity should be provided to all the villages. So, he decides to buy some amount of electric wires to connect the villeges without electricity to some villages with electricity. As Chef does not want to spend too much amount of money on wires, can you find out minimum amount of length of wire Chef should buy.\n\n-----Input-----\nFirst line of the input contains an integer T denoting the number of test cases. T test cases follow.\nFirst line of each test case contains an integer n denoting number of villages in Chefland.\nSecond line will contain a string of length n containing '0' or '1's only. If i-th character of the string is '1', then it denotes that i-th village has electricity.\nNext line contains n space separated integers denoting the x coordinates of the villages in the order from village 1 to n\n\n-----Output-----\nFor each test case, output a single line containing a integer corresponding to the minimum length of wire Chef needs to buy.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- It is guaranteed that there will be at least one village which will have electricity.\n- 1 \u2264 x1 <  x2 <  ... < xn \u2264 109\n\n-----Subtasks-----\nSubtask #1 : 30 points\n- 1 \u2264 N \u2264 1000\n\nSubtask #2 : 70 points\n- 1 \u2264 N \u2264 105\n\n-----Example-----\nInput\n2\n2\n01\n1 2\n3\n100\n1 5 6\nOutput:\n1\n5\n\n-----Explanation-----\nIn the first example, first village does not have electricity. If we put a wire between village 1 and 2 of length 1, then both the villages will have electricity.\n\nIn the second example,\nWe can a draw a wire from first village to third village, passing through second village. Its total length will be 5. Now all the villages will have electricity. This is the minimum length of wire you will require.\n\n Examples: \nInput: \n['2', '2', '01', '1 2', '3', '100', '1 5 6']\nOutput: \n ['1', '5']\n",
  "752": "Problem: \nMany internet protocols these days include the option of associating a\nmedia type with the content being sent.\nThe type is usually inferred from the file extension.\nYou are to write a program that facilitates the lookup of media types for\na number of files.\nYou will be given a table of media type associations that associate a certain\nfile extension with a certain media type.\nYou will then be given a number of file names, and tasked to determine the correct\nmedia type for each file.\nA file extension is defined as the part of the file name after the final period.\nIf a file name has no periods, then it has no extension and the media type cannot\nbe determined.\nIf the file extension is not present in the table, then the media type cannot be\ndetermined.\nIn such cases you will print \"unknown\" as the media type.\nIf the file extension does appear in the table (case matters), then print the associated\nmedia type.\n\n-----Input-----\nInput begins with 2 integers N and Q on a line.\nN is the number of media type associations, and Q is the number of file names.\nFollowing this are N lines, each containing a file extension and a media type, separated by a space.\nFinally, Q lines, each containing the name of a file.\nN and Q will be no greater than 100 each.\nFile extensions will consist only of alphanumeric characters, will have length at most 10, and will be distinct.\nMedia types will have length at most 50, and will contain only alphanumeric characters and punctuation.\nFile names will consist only of alphanumeric characters and periods and have length at most 50.\n\n-----Output-----\nFor each of the Q file names, print on a line the media type of the file.\nIf there is no matching entry, print \"unknown\" (quotes for clarity).\n\n-----Sample Input-----\n5 6\nhtml text/html\nhtm text/html\npng image/png\nsvg image/svg+xml\ntxt text/plain\nindex.html\nthis.file.has.lots.of.dots.txt\nnodotsatall\nvirus.exe\ndont.let.the.png.fool.you\ncase.matters.TXT\n\n-----Sample Output-----\ntext/html\ntext/plain\nunknown\nunknown\nunknown\nunknown\n\n Examples: \nInput: \n['5 6', 'html text/html', 'htm text/html', 'png image/png', 'svg image/svg+xml', 'txt text/plain', 'index.html', 'this.file.has.lots.of.dots.txt', 'nodotsatall', 'virus.exe', 'dont.let.the.png.fool.you', 'case.matters.TXT']\nOutput: \n ['text/html', 'text/plain', 'unknown', 'unknown', 'unknown', 'unknown']\n",
  "753": "Problem: \nIt's autumn now, the time of the leaf fall.\nSergey likes to collect fallen leaves in autumn. In his city, he can find fallen leaves of maple, oak and poplar. These leaves can be of three different colors: green, yellow or red.\nSergey has collected some leaves of each type and color. Now he wants to create the biggest nice bouquet from them. He considers the bouquet nice iff all the leaves in it are either from the same type of tree or of the same color (or both). Moreover, he doesn't want to create a bouquet with even number of leaves in it, since this kind of bouquets are considered to attract bad luck. However, if it's impossible to make any nice bouquet, he won't do anything, thus, obtaining a bouquet with zero leaves.\nPlease help Sergey to find the maximal number of leaves he can have in a nice bouquet, which satisfies all the above mentioned requirements.\nPlease note that Sergey doesn't have to use all the leaves of the same color or of the same type. For example, if he has 20 maple leaves, he can still create a bouquet of 19 leaves.\n\n-----Input-----\nIThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\"\nThe first line of each test case contains three space-separated integers MG MY MR denoting the number of green, yellow and red maple leaves respectively.\nThe second line contains three space-separated integers OG OY OR denoting the number of green, yellow and red oak leaves respectively.\nThe third line of each test case contains three space-separated integers PG PY PR denoting the number of green, yellow and red poplar leaves respectively.\n\n-----Output-----\nFor each test case, output a single line containing the maximal amount of flowers in nice bouquet, satisfying all conditions or 0 if it's impossible to create any bouquet, satisfying the conditions.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10000\n- Subtask 1 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 5\n- Subtask 2 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 109\n\n-----Example-----\nInput:1\n1 2 3\n3 2 1\n1 3 4\n\nOutput:7\n\n-----Explanation-----\nExample case 1. We can create a bouquet with 7 leaves, for example, by collecting all yellow leaves. This is not the only way to create the nice bouquet with 7 leaves (for example, Sergey can use all but one red leaves), but it is impossible to create a nice bouquet with more than 7 leaves.\n\n Examples: \nInput: \n['1', '1 2 3', '3 2 1', '1 3 4']\nOutput: \n ['7']\n",
  "754": "Problem: \nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 2. If any of the permutations is divisible by 2 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\n Examples: \nInput: \n['2', '19', '385']\nOutput: \n ['0', '1']\n",
  "755": "Problem: \nAkshay is interested in mathematics, one day he came across a problem of modulus operator.He has  a list of M integers say arr[M] and has to find all integers K such that :\n- K > 1\n- arr[1]%K = arr[2]%K = arr[3]%K = \u2026 = arr[M]%K where '%' is a modulus operator.\nHelp Akshay to find all such K's.\n\n-----Input:-----\n- First line of input contains an integer M. Then M lines follow each containing one integer of the list. Input data is such that at least one integer K will always exist.\n\n-----Output:-----\n- Output all possible integers K separated by space in increasing order.\n\n-----Constraints-----\n- 2<= M <=100\n- 1< value of each integer <109\n- All integers will be distinct\n\n-----Sample Input:-----\n3\n38\n6\n34\n\n-----Sample Output:-----\n2 4\n\n Examples: \nInput: \n['3', '38', '6', '34']\nOutput: \n ['2 4']\n",
  "756": "Problem: \nFarmer Feb has three fields with potatoes planted in them. He harvested x potatoes from the first field, y potatoes from the second field and is yet to harvest potatoes from the third field. Feb is very superstitious and believes that if the sum of potatoes he harvests from the three fields is a prime number (http://en.wikipedia.org/wiki/Prime_number), he'll make a huge profit. Please help him by calculating for him the minimum number of potatoes that if harvested from the third field will make the sum of potatoes prime. At least one potato should be harvested from the third field.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contain 2 integers separated by single space: x and y.\n\n-----Output-----\nFor each test case, output a single line containing the answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 x \u2264 1000\n- 1 \u2264 y \u2264 1000\n\n-----Example-----\nInput:\n2\n1 3\n4 3\n\nOutput:\n1\n4\n\n-----Explanation-----\n\nIn example case 1: the farmer harvested a potato from the first field and 3 potatoes from the second field. The sum is 4. If he is able to harvest a potato from the third field, that will make the sum 5, which is prime. Hence the answer is 1(he needs one more potato to make the sum of harvested potatoes prime.)\n\n Examples: \nInput: \n['2', '1 3', '4 3']\nOutput: \n ['1', '4']\n",
  "757": "Problem: \nSaket loves to play with strings. One day , while he was having fun with Cyclic Permutations of available strings to him, he observed that despite being scarce in numbers Vowels were really clingy.Being clingy means for almost every given string, there was a Cyclic Permutation in which atleast two vowels were together.\nSo he decided to check this property for all the available strings to him. As the number of strings can be very large, help Saket determine whether the given string is clingy or not.\n\n-----Input:-----\nThe first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\nFirst line of every test case contains an integer N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\nFor each test case, print a single line containing \"Yes\" if any of the cyclic permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\nYes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\nExample$Example$ case2:$ case 2: $     None of the cyclic permutation will have 2 vowels together.\n\n Examples: \nInput: \n['2', '5', 'AUXFC', '6', 'XBCDEF']\nOutput: \n ['Yes', 'No']\n",
  "758": "Problem: \nEveryone loves short problem statements.\nGiven a function $ f(x) $ find its minimum value over the range $ 0 < x < \u03c0/2$\n$\nf(x) = ( x^2 + b*x + c ) / sin( x )\n$\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two real numbers $b, c$. \n\n-----Output:-----\nFor each test case, output the minimum value of $ f(x) $ over the given range. Absolute error of $10^{-6}$ is allowed.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq b,c \\leq 20$\n\n-----Sample Input:-----\n1\n2 2\n\n-----Sample Output:-----\n5.8831725615\n\n Examples: \nInput: \n['1', '2 2']\nOutput: \n ['5.8831725615']\n",
  "759": "Problem: \nTara was completing an Algorithms assignment and got stuck on a question. She thought of who can help her, and got reminded of Kabir who has good problem solving skills. The question is:\nGiven N$N$ the number of elements in the sequence A1$A_1$,A2$A_2$ \u2026 An$A_n$. Find out the prime factor which occurred maximum number of times among the largest prime factor corresponding to each element. if there are more than one such prime factors print the largest one.\nYou are friends with Kabir, help him to solve the problem for Tara.\n\n-----Input:-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T test cases follows. \n- First line of each test case contains N$N$, the number of elements in the sequence.\n- Second line contains N space separated elements A1$A_1$,A2$A_2$ \u2026 An$A_n$.\n\n-----Output:-----\n- For each test case, print a single line, the number which occurs maximum number of times from the largest prime factor corresponding to each element.\n\n-----Constraints-----\n- 1\u2264T\u226410$1 \\leq T \\leq 10$\n- 1\u2264N\u2264105$1 \\leq N \\leq 10^5$\n- 2\u2264A[i]\u2264105$2 \\leq A[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n7\n\n3 2 15 6 8 5 10\n\n-----Sample Output:-----\n5\n\n-----EXPLANATION:-----\nThe largest prime factors of numbers are:\n3 2  5  3  2  5  5 , of which 5 is most frequent.\n\n Examples: \nInput: \n['1', '7', '3 2 15 6 8 5 10']\nOutput: \n ['5']\n",
  "761": "Problem: \nChef spent N days working really hard! He planned loads of tasks: as many as Ai tasks to do on the ith day! Chef's work was brutal, so he only managed to finish Bi tasks on the ith day.\nThe good news is that Chef has a Time Machine! \nThe Time Machine has K white buttons and M black buttons. Each button has a positive integer printed on it. Now Chef goes through all N days consequently and presses buttons. Each day Chef can only press one button (either white or black). After using a button once, it becomes inactive.\nPressing a white button with integer x printed on it reduces the number of planned tasks on the day it was pressed by exactly x. Note that this white button can only be pressed if number of planned tasks on the day are greater than or equal to x.\nPressing a black button with integer x printed on it increases the number of completed tasks on the day it was pressed by exactly x. Note that this black button can only be pressed if after pressing it, number of completed tasks don't exceed the number of tasks.\nChef is interested in finding the minimum possible amount of total uncompleted tasks he will still be left with after N days using the Machine in the best way?\nBe careful! Time is sensitive! Chef cannot make a day when he completed more tasks then planned, as this may result in a more-work-than-planned paradox, killing all lazy people on the planet!\n\n-----Input-----\n- The first line of input contains a single integer T, denoting the number of test cases. Description of T test cases follows.\n- The first line of each test case contains three integers \u2014 N, K, M \u2014 denoting the number of days, white and black buttons appropriately.\n- The second line contains N space-separated integers A1, A2, \u2026 , AN, denoting the number of planned tasks.\n- The third line contains N space-separated integers B1, B2, \u2026 , BN, denoting the number of completed tasks.\n- The fourth line contains K space-separated integers C1, C2, \u2026 , CK, denoting the integers on white buttons.\n- The fifth and last line contains M space-separated integers D1, D2, \u2026 , DM, denoting the integers on black buttons.\n\n-----Output-----\n- In a single line, output an integer \u2014 the minimum possible amount of uncompleted tasks.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 4\n- 1 \u2264 N, K, M \u2264 10^5\n- 1 \u2264 Bi \u2264 Ai  \u2264 10^5\n- 1 \u2264 Ci, Di  \u2264 10^5\n\n-----Subtasks-----\n- Subtask N \u2264 10, K, M \u2264 5. Points: 30 \n- Subtask Original constraints. Points: 70 \n\n-----Example-----\nInput:\n1\n4 2 2 \n5 7 6 1\n3 3 1 1\n6 3\n1 4\n\nOutput:\n3\n\n-----Explanation-----\nExample case 1.\nIn this example Chef goes through the following steps:\nUse black button 1 on the first day.\nUse black button 4 on the second day.\nUse white button 3 on the third day.\nThe arrays A and B are now effectively changed to:\n5 7 3 1\n4 7 1 1\nSo he will have 3 uncompleted tasks.\n\n Examples: \nInput: \n['1', '4 2 2', '5 7 6 1', '3 3 1 1', '6 3', '1 4']\nOutput: \n ['3']\n",
  "762": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1 \n1 01 \n11 001 \n1 01 11 \n001 101 011 \n111 0001 1001 \n1 01 11 001 \n101 011 111 0001 \n1001 0101 1101 0011 \n1011 0111 1111 00001 \n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '1 01', '11 001', '1 01 11', '001 101 011', '111 0001 1001', '1 01 11 001', '101 011 111 0001', '1001 0101 1101 0011', '1011 0111 1111 00001']\n",
  "763": "Problem: \nYou are given two binary strings $S$ and $P$, each with length $N$. A binary string contains only characters '0' and '1'. For each valid $i$, let's denote the $i$-th character of $S$ by $S_i$.\nYou have to convert the string $S$ into $P$ using zero or more operations. In one operation, you should choose two indices $i$ and $j$ ($1 \\leq i < j \\leq N$) such that $S_i$ is '1' and $S_j$ is '0', and swap $S_i$ with $S_j$.\nDetermine if it is possible to convert $S$ into $P$ by performing some operations.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains a single string $S$.\n- The third line contains a single string $P$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if it is possible to convert $S$ into $P$ or \"No\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $S$ and $P$ contain only characters '0' and '1'\n- the sum of $N$ over all test cases does not exceed $10^5$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $N \\leq 14$\n- the sum of $N$ over all test cases does not exceed $100$\nSubtask #2 (30 points): the sum of $N$ over all test cases does not exceed $1,000$\nSubtask #3 (50 points): original constraints\n\n-----Example Input-----\n3\n2\n00\n00\n3\n101\n010\n4\n0110\n0011\n\n-----Example Output-----\nYes\nNo\nYes\n\n-----Explanation-----\nExample case 1: The strings are already equal.\nExample case 2: It can be showed that it is impossible to convert $S$ into $P$.\nExample case 3: You can swap $S_2$ with $S_4$. The strings will then be equal.\n\n Examples: \nInput: \n['3', '2', '00', '00', '3', '101', '010', '4', '0110', '0011']\nOutput: \n ['Yes', 'No', 'Yes']\n",
  "764": "Problem: \nChef has just found a recipe book, where every dish consists of exactly four ingredients.\nHe is going to choose some two dishes and prepare them for dinner.\nOf course, he likes diversity and wants to know whether the two dishes are similar.\nTwo dishes are called similar if at least half of their ingredients are the same.\nIn other words, at least two of four ingredients of the first dish should also be present in the second dish.\nThe order of ingredients doesn't matter.\nYour task is to examine T pairs of dishes.\nFor each pair, check if the two dishes are similar and print \"similar\" or \"dissimilar\" accordingly.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case contains four distinct strings, denoting ingredients needed for the first dish.\nEach ingredient is represented by a string of length between 2 and 10 inclusive, consisting of lowercase English letters.\n\nThe second line of each test case describes the second dish in the same format.\n\n-----Output-----\nFor each test case, output a single line containing the answer \u2014 \"similar\" if at least half of the ingredients are same, and \"dissimilar\" otherwise (without the quotes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 200\n- The length of each string will be between 2 and 10 inclusive.\n\n-----Example-----\nInput:\n5\neggs sugar flour salt\nsugar eggs milk flour\naa ab ac ad\nac ad ae af\ncookies sugar grass lemon\nlemon meat chili wood\none two three four\none two three four\ngibberish jibberish lalalalala popopopopo\njibberisz gibberisz popopopopu lalalalalu\n\nOutput:\nsimilar\nsimilar\ndissimilar\nsimilar\ndissimilar\n\n-----Explanation-----\nTest case 1. The first dish consists of ingredients: eggs, sugar, flour, salt, while the second dish consists of: sugar, eggs, milk, flour. Three of four ingredients are present in both dishes (eggs, sugar, flour) so the two dishes are similar.\nTest case 2. This example shows that strings in the input don't necessarily represent real food.\nThe answer is again \"similar\", because two ingredients are present in both dishes (\"ac\" and \"ad\").\nTest case 3. The only common ingredient is lemon, so the answer is \"dissimilar\".\nRemember that at least two ingredients should be present in both dishes.\n\n Examples: \nInput: \n['5', 'eggs sugar flour salt', 'sugar eggs milk flour', 'aa ab ac ad', 'ac ad ae af', 'cookies sugar grass lemon', 'lemon meat chili wood', 'one two three four', 'one two three four', 'gibberish jibberish lalalalala popopopopo', 'jibberisz gibberisz popopopopu lalalalalu']\nOutput: \n ['similar', 'similar', 'dissimilar', 'similar', 'dissimilar']\n",
  "765": "Problem: \nChef likes to travel a lot. Every day Chef tries to visit as much cities as possible. Recently he had a quite a few trips of great Chefland for learning various recipes. Chefland had N cities numbered from 1 to N. People in Chefland are very friendly, friendliness of i-th city is given by Fi.\n\nBefore starting of each trip, Chef's initial enjoyment is 1 unit. Whenever he visits a city with friendliness Fi, his enjoyment gets multiplied by Fi units. \n\nCity 1 is the home city of Chef. He starts each trip from his home city. Before starting a trip, he chooses a parameter R which denotes that he will start from city 1, and go to city 1 + R, then to 1 + 2 * R, then to 1 + 3 * R, till 1 + i * R such that i is largest integer satisfying 1 + i * R \u2264 N.\n\nNow, Chef wants you to help him recreate his visit of the cities. Specifically, he will ask you Q queries, each of which can be of following two types.\n\n- 1 p f : friendliness of p-th city changes to f, i.e. Fp = f \n- 2 R   : Find out the total enjoyment Chef will have during this trip. As Chef does not like big numbers, he just asks you to output two things, first digit of the enjoyment and value of enjoyment modulo 109 + 7.\n\n-----Input-----\nThere is a single test case.\nFirst line of input contains a single integer N, denoting number of cities in Chefland.\nSecond line of the input contains N space separated integer - F1, F2, ..., FN, denoting the friendliness of the cities in order from 1 to N.\nNext line contains an integer Q, denoting number of queries.\n\nFor each of the next Q queries, each line corresponds to one of the two types of the query. First there will be an integer denoting the type of the query, followed by the actual query. For query of type 1, there will be three space separated integers \"1 p f\" as defined above. For query of type 2, there will be two space separated integers \"2 R \", as defined above.\n\n-----Output-----\nFor each query of type 2, output two space separated integers, first digit of Chef's enjoyment in this trip followed by the value of enjoyment modulo 109 + 7.\n\n-----Constraints-----\n-  1 \u2264 N, Q \u2264 105 \n-  1 \u2264 Fi \u2264 10^9 \n-  1 \u2264 f \u2264 10^9 \n-  1 \u2264 p \u2264 N \n-  1 \u2264 R \u2264 N \n\n-----Subtasks-----\nSubtask #1 (5 points) : \n\n-  1 \u2264 N \u2264 10 \n-  1 \u2264 Q  \u2264 1000 \n-  1 \u2264 Fi \u2264 10 \n-  1 \u2264 f \u2264 10 \n\nSubtask #2 (15 points) : \n\n-  1 \u2264 N \u2264 1000 \n-  1 \u2264 Q  \u2264 100 \n-  1 \u2264 Fi \u2264 109 \n-  1 \u2264 f \u2264 1000 \n\nSubtask #3 (80 points) : \n\n- original constraints\n\n-----Example-----\nInput:\n5\n1 2 3 4 5\n3\n2 1\n1 3 10\n2 2\n\nOutput:\n1 120\n5 50\n\n-----Explanation-----\nIn the first query, Chef is going to visit cities 1, 2, 3, 4, 5 in order. At the end of the trip, his total enjoyment will be 1 * 2 * 3 * 4 * 5 = 120. First digit of enjoyment is 1 and 120 modulo 109 + 7 is 120.\nIn the third query, Chef is going to visit cities 1, 3, 5 in order. At the end of the trip, his total enjoyment will be 1 * 10 * 5 = 50.\n\n Examples: \nInput: \n['5', '1 2 3 4 5', '3', '2 1', '1 3 10', '2 2']\nOutput: \n ['1 120', '5 50']\n",
  "766": "Problem: \nChef has an array of N natural numbers. Cheffina challenges the chef to choose the two numbers from the array and following the condition as the area of the rectangle formed from the two numbers is maximum. Cheffina also asks the chef to choose two numbers different from the previous two to form the rectangle with a minimum area.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$.\n- N space-separated natural numbers. \n\n-----Output:-----\nFor each test case, output in one line answers maximum and minimum area of a rectangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $4 \\leq N \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^6$\n\n-----Sample Input:-----\n1\n5\n4 2 1 5 3\n\n-----Sample Output:-----\n20 2\n\n Examples: \nInput: \n['1', '5', '4 2 1 5 3']\nOutput: \n ['20 2']\n",
  "767": "Problem: \nIndian National Olympiad in Informatics 2012\nThe Republic of Tutaria is celebrating its 37th year of independence. To mark the occasion, the nation is organising a contest where all its N citizens take part. The event has three tracks, a COBOL programming competition, pole vault, and a doughnut-eating competition. Each citizen takes part in these three tracks in the same order\u2014a citizen starts with the programming competition, continues with the pole vault as soon as his or her COBOL masterpiece is ready, and then starts gorging on doughnuts as soon as the pole vault is done.\nThe Supreme Leader of Tutaria closely monitors all citizens and knows the exact amount of time each citizen will take in each of the three tracks. She wants to schedule the event so that it will finish as early as possible. However, the Republic of Tutaria has only one computer, and, as a result, only one person can participate in the COBOL programming event at a time. However, any number of people may simultaneously participate in the pole vault and doughnut-eating competitions.\nThe event works as follows. The Supreme Leader fixes the order in which contestants get access to the computer. At time 0, the first citizen in the list starts writing his or her COBOL program, while the remaining citizens wait for the computer to be free. As soon as the first citizen is done, he or she proceeds to the pole vault, and the second citizen gets the computer for the programming round. In general whenever the computer becomes free, the next citizen gets to use it. Whenever a citizen is done using the computer, he or she proceeds to the pole vault immediately, regardless of what the other citizens are doing. Similarly, whenever a citizen is done with the pole vault, he or she proceeds to the doughnut- eating track immediately, independently of the others. The event ends as soon as all the citizens have finished all the three tracks of the event.\nFor example, suppose N = 3, and the time they need for the three tracks are as follows:\nCitizen id\nCOBOL\nPole vault\nDoughnut-eating\n1\n18\n7\n6\n2\n23\n10\n27\n3\n20\n9\n14\n\nIf the citizens start at time 0 and proceed in the order 1,2,3, then citizen 1 will finish at time 18+7+6 = 31, citizen 2 will finish at time 18+23+10+27 = 78, and citizen 3 will finishattime18+23+20+9+14=84. Theeventendsattimemax(31,78,84)=84.\nOn the other hand, if the citizens proceed in the order 2,3,1, you can check that the event ends at max(60, 66, 74) = 74. The Supreme Leader of Tutaria wants to fix the order in which the citizens proceed so that the event ends as early as possible. You can check that in this case 74 is the earliest time at which the event can end.\n\n-----Input format-----\nThe first line of input has a single integer, N, the number of citizens of the Republic of Tutaria. The next N lines contain 3 space-separated integers each: line i gives the time taken by the citizen i for COBOL programming, pole vault, and doughnut-eating respectively.\n\n-----Output format-----\nThe output should have a single line with a single integer, the earliest time at which the event can end.\n\n-----Test Data-----\nThe testdata is grouped into two subtasks with the following constraints on the inputs.\n\u2022 Subtask 1 [30 points] : 1 \u2264 N \u2264 3000.\n\u2022 Subtask 2 [70 points] : 1 \u2264 N \u2264 200000.\nIn both the subtasks, all the numbers in the input (except possibly N) are in the range 1 to 10000, inclusive.\n\n-----Example-----\nHere is the sample input and output corresponding to the example above.\n\n-----Sample input-----\n3\n18 7 6 \n23 10 27\n20 9 14\n\n-----Sample output-----\n74\n\n-----Note:----- Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\n\n Examples: \nInput: \n['and output corresponding to the example above.', 'Sample input', '3', '18 7 6', '23 10 27', '20 9 14', 'Sample output', '74', 'Note:  Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!']\nOutput: \n []\n",
  "768": "Problem: \nThe MEX of a set of integers is defined as the smallest non-negative integer that does not belong to this set. For example, $\\mathrm{MEX}(\\{0,2,3\\}) = 1$ and $\\mathrm{MEX}(\\{1,3\\}) = 0$.\nChef has a tree with $N$ nodes (numbered $1$ through $N$). The tree is rooted at node $1$. Chef wants to assign a non-negative integer to each node in such a way that each integer between $0$ and $N-1$ (inclusive) is assigned to exactly one node.\nFor each node $u$, consider the integers assigned to the nodes in the subtree of $u$ (including $u$); let $a_u$ denote the MEX of these integers. Chef wants $a_1 + a_2 + \\ldots + a_N$ to be as large as possible. Find the maximum possible value of this sum.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N-1$ space-separated integers $p_1, p_2, \\ldots, p_{N-1}$. For each valid $i$, the node $p_i$ is the parent of the node $i+1$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum sum of subtree MEX-s which can be obtained if you assign the weights optimally.\n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $2 \\le N \\le 10^5$\n- $1 \\le p_i < i$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n3\n1 1\n5\n1 1 2 2\n\n-----Example Output-----\n4\n9\n\n Examples: \nInput: \n['2', '3', '1 1', '5', '1 1 2 2', '']\nOutput: \n ['4', '9']\n",
  "769": "Problem: \nPushkar is very good in Number Theory. He takes two numbers $A\\ and\\ B$ and declares them a Pushkar Pair. Pushkar Pair has a property that $A$ has a $Modular\\ Inverse$ modulo $B$.  \nHe asks you to tell him the largest number $L$ that divides both of them.  \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line the integer $L$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq A,B \\leq 10^4$\n\n-----Sample Input:-----\n1\n3 4\n\n-----Sample Output:-----\n1\n\n Examples: \nInput: \n['1', '3 4']\nOutput: \n ['1']\n",
  "770": "Problem: \nYou are given an array $a$ of length $n$. A subsequence of this array is valid, if it satisfies these two conditions:\n- There shouldn't be any two even numbers within a distance of $K$, both which have been chosen in the subsequence. i.e. there shouldn't be two indices $i, j$ such that $a_i$ and $a_j$ are even, $|i - j| \\leq K$ and $a_i$ and $a_j$ are in the subsequence. \n- Similarly, there shouldn't be any two odd numbers within a distance of $K$, both which have been chosen in the subsequence\nThe sum of a subsequence is the sum of all the numbers in it. Your task is find the maximum sum possible in a valid subsequence of the given array. Print this maximum sum.\n\n-----Input-----\n- The first line of the input contains an integer $T$ denoting the number of test cases. The description of the test cases follows.\n- The first line of each test case contains two space-separated integers $n, k$.\n- The second line of each test case contains $n$ space-separated integers denoting the array $a$.\n\n-----Output-----\nFor each test case, output an integer corresponding to the answer of the problem.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le n \\leq 10^5$\n- $1 \\le k \\leq  n$\n- $1 \\le a_i \\leq 10^9$\n- Sum of $n$ over all the test cases doesn't exceed $10^6$\n\n-----Example Input-----\n3\n1 1\n3\n2 1\n2 2\n5 2\n1 2 3 4 6\n\n-----Example Output-----\n3\n2\n11\n\n-----Explanation:-----\nTestcase 2: Only one of the two 2s can be chosen. Hence the answer is 2.\nTestcase 3: The subsequence containing the second, third and fifth numbers is a valid subsequence, and its sum is 2+3+6 = 11. You can check that this is the maximum possible, and hence is the answer.\n\n Examples: \nInput: \n['3', '1 1', '3', '2 1', '2 2', '5 2', '1 2 3 4 6']\nOutput: \n ['3', '2', '11']\n",
  "771": "Problem: \nSultan, the freestyle wrestler, you all know him. He broke multiple records in the history of all wrestling leagues. Now 20 years have passed, Sultan has grown old. He has two sons, he wants them to be like him. Sultan being orthodox goes to his astrologer, where he is told that his sons shall be invincible like him. \nSultan starts to train them. After training, his son Multan & Fultan, having strengths are M and F respectively, decide to fight. They can defeat if the strength of challengers Si is a positive integer multiple of their strength else they lose. Multan fights first, then Fultan. A challenger once knocked out cannot challenge them again. Sultan's sons are still not very good wrestlers. Sultan considers them wrestlers if they both combined are able to win at least 70% of the all the fights. Also, he wants to know who is a better wrestler of the two. Your task is to help Sultan in this venture. Print \"Yes\" (without quotes) if they are able to win, else print \"No\" (without quotes). If yes, also name whether, \"Multan\" or \"Fultan\" is a better wrestler, if both win equally print \u201cBoth\u201d.\n\n-----Input-----\n- First line contains single integer T denoting test cases.\n- Second Line contains single integer N for number of challengers.\n- Third Line contains space separated two integer denoting strength M & F\n- Next Line contains strength space separated N integer ith of which denoting Si of N challengers respectively.\n\n-----Output-----\n- Yes or No corresponding the result.\n- Also, if Yes, print, Multan, Fultan, Both accordingly. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 M, F \u2264 109\n- 0 \u2264 Si \u2264 109\n\n-----Example-----\nInput:\n2\n7\n2 3\n4 5 7 8 9 10 14\n6\n5 7\n1 2 8 9 10 11\n\nOutput:\nYes\nMultan\nNo\n\n\n-----Explanation-----\nExample case 1.\n\nMultan (M) defeats total 4 challengers with strengths 4, 8, 10, 14 and Fultan (F) defeats 1 challenger with strength 9. Their total wins are 5 out of 7 and win accuracy of 71.4%. Hence, 'Yes' and since Multan is better wrestler so 'Multan'\n\nExample case 2.\nMultan defeats 1 and Fultan defeat 0 challengers. Total wins 1 out of 6 with accuracy 16.67% Hence, No.\n\n Examples: \nInput: \n['2', '7', '2 3', '4 5 7 8 9 10 14', '6', '5 7', '1 2 8 9 10 11']\nOutput: \n ['Yes', 'Multan', 'No']\n",
  "773": "Problem: \nA permutation of length n is an array of size n consisting of n distinct integers in the range [1, n]. For example, (3, 2, 4, 1) is a permutation of length 4, but (3, 3, 1, 4) and (2, 3, 4, 5) are not, as (3, 3, 1, 4) contains duplicate elements, and (2, 3, 4, 5) contains elements not in range [1,4].\nA permutation p of length n is good if and only if for any 1 \u2264 i \u2264 n, pi \u2260 i.\nPlease find the lexicographically smallest good permutation p.\nDefinition for \"lexicographically smaller\":\nFor two permutations p and q, we say that p is lexicographically smaller than q if and only if there exists a index 1 \u2264 l \u2264 n such that:\n- For any 1 \u2264 i < l, pi = qi. Note that if l = 1, this constraint means nothing.\n- and, pl < ql.\n\nFor example, (2, 3, 1, 4) < (2, 3, 4, 1) < (3, 4, 1, 2). The lexicographically smallest permutation is, of course, (1, 2, ..., n), though this one is not good.\n\n-----Input-----\nFirst line of the input contains an integer T denoting number of test cases.\nFor each test case, the only line contains an integer n.\n\n-----Output-----\nFor each test case, output the lexicographically smallest good permutation of length n. It's guaranteed that this permutation exists.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 2 \u2264 n \u2264 105\n\n-----Subtasks-----\n- Subtask #1 (17 points): 2 \u2264 n \u2264 9\n- Subtask #2 (83 points): Original Constraints\n\n-----Example-----\nInput:\n4\n2\n3\n5\n6\n\nOutput:\n2 1\n2 3 1\n2 1 4 5 3\n2 1 4 3 6 5\n\n-----Explanation-----\nExample case 1. The only good permutation of length 2 is (2, 1).\nExample case 2. Consider all permutations of length 3, they are(in lexicographically order):\n- p = (1, 2, 3), it's not good since p[1] = 1, p[2] = 2 and p[3] = 3;\n- p = (1, 3, 2), it's not good since p[1] = 1;\n- p = (2, 1, 3), it's not good since p[3] = 3;\n- p = (2, 3, 1), it's good since p[1] \u2260 1, p[2] \u2260 2 and p[3] \u2260 3;\n- p = (3, 1, 2), it's good since p[1] \u2260 1, p[2] \u2260 2 and p[3] \u2260 3;\n- p = (3, 2, 1), it's not good since p[2] = 2.\nThus the minimum good one is (2, 3, 1).\nExample case 3. Consider two good permutations for third test case: p=(2, 1, 4, 5, 3) and q=(2, 4, 1, 5, 3), then p < q. You can check lexicographically condition as follows. Find the first index where the entries of two permutations are different, and compare those entries. For example, in this case, the first position where the entries differ is index 2. You can see that p[2] < q[2], as 1 < 4, so p is lexicographically smaller than q.\n\n Examples: \nInput: \n['4', '2', '3', '5', '6', '', '']\nOutput: \n ['2 1', '2 3 1', '2 1 4 5 3', '2 1 4 3 6 5']\n",
  "774": "Problem: \nNobody knows, but $N$ frogs live in Chef's garden.\nNow they are siting on the X-axis and want to speak to each other. One frog can send a message to another one if the distance between them is less or equal to $K$.\nChef knows all $P$ pairs of frogs, which want to send messages. Help him to define can they or not!\nNote : More than $1$ frog can be on the same point on the X-axis.\n\n-----Input-----\n- The first line contains three integers $N$, $K$ and $P$.\n- The second line contains $N$ space-separated integers $A_1$, $A_2$, \u2026, $A_N$ denoting the x-coordinates of frogs\".\n- Each of the next $P$ lines contains two integers $A$ and $B$ denoting the numbers of frogs according to the input.\n\n-----Output-----\nFor each pair print \"Yes\" without a brackets if frogs can speak and \"No\" if they cannot.\n\n-----Constraints-----\n- $1 \\le N, P \\le 10^5$\n- $0 \\le A_i, K \\le 10^9$\n- $1 \\le A, B \\le N$\n\n-----Example-----\n\n-----Sample Input:-----\n5 3 3\n0 3 8 5 12\n1 2\n1 3\n2 5\n\n-----Sample Output:-----\nYes\nYes\nNo\n\n-----Explanation-----\n- \nFor pair $(1, 2)$ frog $1$ can directly speak to the frog $2$ as the distance between them is $3 - 0 = 3 \\le K$ . \n- \nFor pair $(1, 3)$ frog $1$ can send a message to frog $2$, frog $2$ can send it to frog $4$ and it can send it to frog $3$.\n- \nFor pair $(2, 5)$ frogs can't send a message under current constraints.\n\n Examples: \nInput: \n['5 3 3', '0 3 8 5 12', '1 2', '1 3', '2 5']\nOutput: \n ['Yes', 'Yes', 'No']\n",
  "776": "Problem: \nYou are given an integer $D$. Find an integer sequence $A_1, A_2, \\ldots, A_N$ such that the following conditions are satisfied:\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^5$ for each valid $i$\n- $\\sum_{i=1}^N \\sum_{j=i}^N \\left( \\mathrm{min}(A_i, A_{i+1}, \\ldots, A_j) - \\mathrm{GCD}(A_i, A_{i+1}, \\ldots, A_j) \\right) = D$\nIt can be proved that a solution always exists under the given constraints.\nNote: $\\mathrm{GCD}(B_1, B_2, \\ldots, B_M)$ is the greatest integer which divides all the integers $B_1, B_2, \\ldots, B_M$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $D$.\n\n-----Output-----\nFor each test case, print two lines. The first of these lines should contain a single integer $N$. The second line should contain $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\nIf there are multiple solutions, you may find any one of them.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $0 \\le D \\le 10^9$\n\n-----Example Input-----\n4\n2\n5\n200\n13\n\n-----Example Output-----\n3\n3 3 2 \n5\n2 8 5 1 10 \n7\n12 10 15 11 19 13 15\n4\n5 4 4 10\n\n Examples: \nInput: \n['4', '2', '5', '200', '13']\nOutput: \n ['3', '3 3 2', '5', '2 8 5 1 10', '7', '12 10 15 11 19 13 15', '4', '5 4 4 10']\n",
  "777": "Problem: \nPankaj likes to eat Ice cream when he is working late into the night. Today has been yet another long day for Pankaj. So, he wants to eat ice cream now. He opens the fridge and sees that he has 2 types of containers holding the ice cream.\nThe first container is a cone with radius r1 and height h1. There is also a hemisphere on the top of the cone which has the same radius. The other container is a cylindrical with radius r2 and height h2. Pankaj wants to know the amount (volume) of ice cream in both the containers. Since Pankaj is tired after coding all day, you have to help him with this task.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- Each test case consists of a single line having the r1, h1, r2 and h2. Each value is given upto 2 decimal places. See example for more information.\n\n-----Output-----\n- For each test case, output a single line containing the volumes of the two containers separated by space. The answer is considered correct if it is correct upto 6 decimal places.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 0 <  r1, h1, r2, h2 \u2264 100\n\n-----Example-----\nInput:\n2\n1.00 1.00 1.00 1.00\n3.02 7.23 5.20 6.00\n\nOutput:\n3.141592654 3.141592654\n126.739919445 509.691992118\n\n Examples: \nInput: \n['2', '1.00 1.00 1.00 1.00', '3.02 7.23 5.20 6.00', '', '']\nOutput: \n ['3.141592654 3.141592654', '126.739919445 509.691992118']\n",
  "778": "Problem: \nGiven an Integer N, write a program to reverse it.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the reverse of the given number N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n4\n12345\n31203\n2123\n2300\nOutput\n54321\n30213\n3212\n32\n\n Examples: \nInput: \n['4', '12345', '31203', '2123', '2300']\nOutput: \n ['54321', '30213', '3212', '32']\n",
  "779": "Problem: \nTanish is the president of the chemistry club at his school. He considers everyone who doesn't like chemistry as his enemy. After years of research, he has invented a lethal poison, which he named success. Now Tanish plans to kill all his enemies with his success. Success is extremely deadly and is untraceable in small concentrations.\nTanish has $\\text{N}$ flasks lying on the shelf of his lab. All of these flasks contain the same volume of poison solution. The concentration of poison in the $\\text{ith}$ flask is $\\mathbf{a_i}$. In one move - Tanish picks up any two flasks, pours half of the contents of each of these flasks into a third initially empty flask, discards the two flasks and places the third flask (which now has the same volume of solution as all other flasks) on the shelf. He performs N-1 such moves to end up with only one flask of poison on the shelf. He wishes to perform these moves such that the concentration of poison in this flask is the minimum possible. What is the minimum concentration of poison that he can achieve?\n\n-----Input-----\nFirst line of the input contains a single integer $\\text{T}$ - the number of test cases. \nFor each test case,\nThe first line contains a single integer $\\text{N}$, the number of bottles. \nThe second line contains N space-separated integers, the concentrations. \n\n-----Output-----\nFor each test case, print one line containing the lowest final concentration. The output will be accepted if the absolute error is $\\leq 10^{-6}$.\n\n-----Constraints-----\n$1 \\leq \\text{T} \\leq 10$\n$2 \\leq \\text{N} \\leq 10^4$\n$0 \\leq \\mathbf{a_i} \\leq 10^9$\n\n-----Sample Input-----\n2\n2\n9 3\n3\n3 2 9\n\n-----Sample Output-----\n6.00000000\n4.00000000\n\n-----Explanation-----\nIn test 1, Tanish mixes flasks 1 and 2. In test 2, he first mixes flasks 1 and 3 to get a flask of concentration 6 and then mixes this flask with flask 2 to get a flask of poison concentration 4.    \n\n-----Note-----\nThe concentration is given in the unit ppb i.e. parts per billion.\n1 gram poison in $10^9$ ml solution is 1 ppb.\nConcentration in ppb = (Number of grams of poison / Volume of solution in ml) x $10^9$\n\n Examples: \nInput: \n['2', '2', '9 3', '3', '3 2 9']\nOutput: \n ['6.00000000', '4.00000000']\n",
  "780": "Problem: \n\"Ring Ring!!\"  \nSherlock's phone suddenly started ringing. And it was none other than Jim Moriarty..\n\"Long time no see ! You miss me right ? Anyway we'll talk about it later . Let me first tell you something. Dr.Watson is with me . And you've got only one chance to save him . Here's your challenge:.\nGiven a number N and another number M, tell if the remainder of N%M is odd or even. If it's odd, then print \"ODD\" else print \"EVEN\" \n\nIf Sherlock can answer the query correctly, then Watson will be set free. He has approached you for help since you being a programmer.Can you help him? \n\n-----Input-----\nThe first line contains, T, the number of test cases..\nEach test case contains an integer, N and M\n\n-----Output-----\nOutput the minimum value for each test case \n\n-----Constraints-----\n1 = T = 20\n1 <= N <= 10^18 \n1 <= M<= 10^9 \n\n-----Subtasks-----\nSubtask #1 : (20 points)\n1 = T = 20\n1 <= N <= 100 \n1 <= M<= 100 \n\nSubtask 2 : (80 points) \n\n1 = T = 20\n1 <= N <= 10^18 \n1 <= M<= 10^9 \n\n-----Example-----\nInput:\n2\n4 4\n6 5\n\nOutput:\nEVEN\nODD\n\n Examples: \nInput: \n['2', '4 4', '6 5']\nOutput: \n ['EVEN', 'ODD']\n",
  "782": "Problem: \nNaman owns a very famous Ice Cream parlour in Pune. He has a wide range of flavours with different pricing. \n\nEvery flavour costs \u20b9 X per gram and quantity of each flavour in the parlour is indefinite. Now, Naman has \n\nreceived an order for a party wherein he is asked to prepare each Ice Cream with N number of flavours. \n\nHe needs to prepare each Ice Cream of W grams and at the same time has to keep the cost minimum. \n\nCan you help him out?\n\nNote: If it is not possible to prepare such an Ice Cream, print \u201cNot Possible\u201d.\n\n-----Input:-----\n\nFirst line contains an integer T denoting the number of test cases.\n\nFirst line of every test case contains an integer N denoting the number of flavours.\n\nThe second line of every test case by N space separated integers denoting the cost per gram of each flavour. \n\nSecond line of every test case contains two space separated integers W and Y denoting the weight \n\nof Ice Cream in grams and the number of flavours to be used respectively. \n\n-----Output:-----\n\nFor each test case, print the total cost of the Ice Cream in a single line.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 N,W,Y \u2264 40000\n\n-----Example:-----Input:\n2\n5 \n4 6 8 1 10\n10 3\n2\n1 2\n1 2Output:\n\n18\n\nNot Possible\n\n-----Explanation:-----\n\nIn the first test case to achieve the minimum cost, the Ice Cream will consist of 8 grams \n\nof flavour costing \u20b91, 1 gram of flavour costing \u20b94 and 1 gram of flavour costing \u20b96.\n\nIn the second test case it is not possible to make an ice-cream weighing 1 gram using 2 flavours.\n\n Examples: \nInput: \n['2', '5', '4 6 8 1 10', '10 3', '2', '1 2', '1 2']\nOutput: \n ['18', 'Not Possible']\n",
  "783": "Problem: \nYou are given two points $P$ and $Q$ and an opaque sphere in a three-dimensional space. The point $P$ is not moving, while $Q$ is moving in a straight line with constant velocity. You are also given a direction vector $d$ with the following meaning: the position of $Q$ at time $t$ is $Q(t) = Q(0) + d \\cdot t$, where $Q(0)$ is the initial position of $Q$.\nIt is guaranteed that $Q$ is not visible from $P$ initially (at time $t=0$). It is also guaranteed that $P$ and $Q$ do not touch the sphere at any time.\nFind the smallest positive time $t_v$ when $Q$ is visible from $P$, i.e. when the line segment connecting points $P$ and $Q$ does not intersect the sphere.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains 13 space-separated integers.\n- The first three integers $P_x, P_y, P_z$ denote the coordinates of $P$.\n- The next three integers $Q_x, Q_y, Q_z$ denote the initial coordinates of $Q$.\n- The next three integers $d_x, d_y, d_z$ denote the components of the direction vector $d$.\n- The last four integers $c_x, c_y, c_z, r$ denote the coordinates of the centre of the sphere and its radius.\n\n-----Output-----\nFor each test case, print a single line containing one real number \u2014 the time $t_v$. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$. It is guaranteed that $t_v$ exists and does not exceed $10^9$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- the absolute values of coordinates of all points do not exceed $2\\cdot10^9$\n- $1 \\le r \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (25 points): $P_z = Q_z = d_z = c_z = 0$\nSubtask #2 (75 points): original constraints\n\n-----Example Input-----\n1\n3 0 0 -10 -10 0 0 10 0 0 -3 0 3\n\n-----Example Output-----\n1.0000000000\n\n Examples: \nInput: \n['1', '3 0 0 -10 -10 0 0 10 0 0 -3 0 3']\nOutput: \n ['1.0000000000']\n",
  "784": "Problem: \nSpring is interesting season of year. Chef is thinking about different things, but last time he thinks about interesting game - \"Strange Matrix\". \nChef has a matrix that consists of n rows, each contains m elements. Initially, the element aij of matrix equals j. (1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m). \nThen p times some element aij is increased by 1. \nThen Chef needs to calculate the following: \n\n- For each row he tries to move from the last element (with number m) to the first one (with the number 1). \n- While staying in aij Chef can only move to aij - 1 only if aij - 1 \u2264 aij. \n- The cost of such a movement is aij - aij - 1.\n- Otherwise Chef can't move and lose (in this row).\n- If Chef can move from the last element of the row to the first one, then the answer is the total cost of all the movements. \n- If Chef can't move from the last element of the row to the first one, then the answer is -1. \n\nHelp Chef to find answers for all the rows after P commands of increasing. \n\n-----Input-----\n\n- The first line contains three integers n, m and p denoting the number of rows, the number of elements a single row and the number of increasing commands. \n- Each of next p lines contains two integers i and j denoting that the element aij  is increased by one. \n\n-----Output-----\n- For each row in a single line print the answer after the P increasing commands.\n\n-----Constraints-----\n- 1 \u2264 n, m, p \u2264 10 ^ 5\n- 1 \u2264 i \u2264 n\n- 1 \u2264 j \u2264 m\n\n-----Example-----\nInput:\n4 4 6\n2 2\n3 2 \n3 2 \n4 3\n4 4\n4 3\n\nOutput:\n3\n3\n-1\n4\n\n\n-----Explanation-----\n\nHere is the whole matrix after P commands:\n1 2 3 4\n1 3 3 4\n1 4 3 4\n1 2 5 5\n\nExplanations to the answer: \n- The first line is without changes: 4-3=1, 3-2=1, 2-1=1. answer = 3. \n- The second line: 4-3=1, 3-3=0, 3-1=2. The answer is 3. \n- The third line: 4-3=1, 3-4=-1, Chef can't move to the first number here. Therefore, the answer is -1. \n- The fourth line: 5-5=0, 5-2=3, 2-1=1. The answer is 4.\n\n Examples: \nInput: \n['4 4 6', '2 2', '3 2', '3 2', '4 3', '4 4', '4 3']\nOutput: \n ['3', '3', '-1', '4']\n",
  "785": "Problem: \nOne of Chef's friends offered him a deal: during $D$ days, they are going to exchange money. For each $i$ ($1 \\le i \\le D$), on the $i$-th day, Chef's friend would give Chef $A$ rupees, while Chef would give his friend $2^{i-1}$ rupees ($1$ rupee on day $1$, $2$ rupees on day $2$, $4$ rupees on day $3$, and so on). Chef's profit from the deal is the total number of rupees he received from his friend minus the total number of rupees he gave his friend.\nChef decided to ask for your advice before accepting the deal. You want to help him by telling him two numbers $D_1$ and $D_2$, where $D_1$ is the maximum value of $D$ such that Chef should accept the deal, i.e. his profit from the deal is positive if $D = D_1$, and $D_2$ is the value of $D$ that leads to the maximum possible profit for Chef. If there are multiple values of $D$ that lead to the maximum profit, $D_2$ is the smallest of these values.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $A$.\n\n-----Output-----\nFor each test case, print a single line containing two space-separated integers $D_1$ and $D_2$.\n\n-----Constraints-----\n- $1 \\le T \\le 100,000$\n- $5 \\le A \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n4\n5\n8\n9\n1000000000\n\n-----Example Output-----\n4 3\n5 3\n5 4\n35 30\n\n Examples: \nInput: \n['4', '5', '8', '9', '1000000000']\nOutput: \n ['4 3', '5 3', '5 4', '35 30']\n",
  "786": "Problem: \nThe chef was not happy with the binary number system, so he designed a new machine which is having 6 different states, i.e. in binary there is a total of 2 states as 0 and 1. Now, the chef is confused about how to correlate this machine to get an interaction with Integer numbers, when N(Integer number) is provided to the system, what will be the Nth number that system will return(in Integer form), help the chef to design this system.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer given by the system.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n2\n3\n5\n\n-----Sample Output:-----\n7\n37\n\n-----EXPLANATION:-----\nInitial numbers for system = [1, 6, 7, 36, 37, 42, 43, 216, \u2026..\nFor 1) 3rd Number for the system will be 7.\nFor 2) 5th Number for the system will be 37.\n\n Examples: \nInput: \n['2', '3', '5']\nOutput: \n ['7', '37']\n",
  "787": "Problem: \nLimak is a little polar bear.\nHe is playing a video game and he needs your help.\nThere is a row with N cells, each either empty or occupied by a soldier, denoted by '0' and '1' respectively.\nThe goal of the game is to move all soldiers to the right (they should occupy some number of rightmost cells).\nThe only possible command is choosing a soldier and telling him to move to the right as far as possible.\nChoosing a soldier takes 1 second, and a soldier moves with the speed of a cell per second.\nThe soldier stops immediately if he is in the last cell of the row or the next cell is already occupied.\nLimak isn't allowed to choose a soldier that can't move at all (the chosen soldier must move at least one cell to the right).\nLimak enjoys this game very much and wants to play as long as possible.\nIn particular, he doesn't start a new command while the previously chosen soldier moves.\nCan you tell him, how many seconds he can play at most?\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe only line of each test case contains a string S describing the row with N cells.\nEach character is either '0' or '1', denoting an empty cell or a cell with a soldier respectively.\n\n-----Output-----\nFor each test case, output a single line containing one integer \u2014 the maximum possible number of seconds Limak will play the game.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5\n- 1 \u2264 N \u2264 105 (N denotes the length of the string S)\n\n-----Subtasks-----\n- Subtask #1 (25 points): 1 \u2264 N \u2264 10\n- Subtask #2 (25 points): 1 \u2264 N \u2264 2000\n- Subtask #3 (50 points): Original constraints.\n\n-----Example-----\nInput:\n4\n10100\n1100001\n000000000111\n001110100011010\n\nOutput:\n8\n10\n0\n48\n\n-----Explanation-----\nTest case 1.\nThe initial string is 10100.\nThere are N = 5 cells.\nThere is one soldier in the first cell, and one soldier in the third cell.\nThe following scenario maximizes the total time:\n- Limak chooses the soldier in the first cell.\nThis soldier can move only one cell to the right.\nIt takes 1 second to choose a soldier and 1 second for a soldier to move to the next cell (2 seconds in total).\nThe string is 01100 now.\n- Limak has only one choice.\nHe must choose the soldier in the third cell because the other soldier can't move at all (the soldier in the second cell can't move to the right because the next cell is already occupied).\nChoosing a soldier takes 1 second.\nThe chosen soldier moves from the third cell to the fifth cell, which takes 2 seconds.\nThis operation takes 1 + 2 = 3 seconds in total.\nThe string is 01001 now.\n- Limak has only one choice again.\nSince the soldier in the last row can't move further to the right, the soldier in the second cell must be chosen.\nHe will move 2 cells to the right.\nThis operation takes 1 + 2 = 3 seconds in total.\nThe string become 00011 and the game is over.\nThe total time is 2 + 3 + 3 = 8.\nTest case 2.\nThe initial string is 1100001.\nThere is only one possible scenario:\n- 1100001 is changed to 1000011 in 5 seconds (1 second to choose a soldier and 4 seconds for the soldier to move 4 cells to the right).\n- 1000011 is changed to 0000111 in 5 seconds.\n\nThe total time is 5 + 5 = 10 seconds.\nTest case 3.\nThe game is over immediately because all soldiers occupy rightmost cells already.\nThe answer is 0.\n\n Examples: \nInput: \n['4', '10100', '1100001', '000000000111', '001110100011010']\nOutput: \n ['8', '10', '0', '48']\n",
  "788": "Problem: \nIf Give an integer N . Write a program to obtain the sum of the first and last digits of this number.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the sum of first and last digits of N in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1234\n124894\n242323\n\nOutput\n5\n5\n5\n\n Examples: \nInput: \n['3', '1234', '124894', '242323']\nOutput: \n ['5', '5', '5']\n",
  "789": "Problem: \nRani is teaching Raju maths via a game called N-Cube, which involves three sections involving N.\n\nRani gives Raju a number N, and Raju makes a list of Nth powers of integers in increasing order (1^N, 2^N, 3^N.. so on). This teaches him exponentiation. \nThen Raju performs the following subtraction game N times : Take all pairs of consecutive numbers in the list and take their difference. These differences then form the new list for the next iteration of the game. Eg, if N was 6, the list proceeds as [1, 64, 729, 4096 ... ] to [63, 685, 3367 ...], and so on 5 more times.\nAfter the subtraction game, Raju has to correctly tell Rani the Nth element of the list. This number is the value of the game. \nAfter practice Raju became an expert in the game. To challenge him more, Rani will give two numbers M (where M is a prime) and R instead of just a single number N, and the game must start from M^(R - 1) instead of N. Since the value of the game can now become large, Raju just have to tell the largest integer K such that M^K divides this number. Since even K can be large, output K modulo 1000000007 (109+7).\n\n-----Input-----\n\nFirst line will contain T, number of testcases. Then the testcases follow\nEach testcase contains of a single line of input, two integers M R\n\n-----Output-----\n\nFor each testcase, output in a single line answer given by Raju to Rani modulo 1000000007.\n\n-----Constraints-----\n\n1<=T<=1000\n\n2<=M<=109\n\n30 points : 1<=R<=10000\n\n70 points : 1<=R<=109\n\nM is a prime number\n\n\n-----Example-----\nInput:\n\n1\n\n2 2\n\nOutput:\n\n1\n\n Examples: \nInput: \n['1', '2 2']\nOutput: \n ['1']\n",
  "790": "Problem: \nBob has n heap(s) of gravel (initially there are exactly c piece(s) in each). He wants to do m operation(s) with that heaps, each maybe:\n\n- adding pieces of gravel onto the heaps from u to v, exactly k pieces for each,\n- or querying \"how many pieces of gravel are there in the heap p now?\".\n\n-----Request-----\nHelp Bob do operations of the second type.\n\n-----Input-----\n\n- The first line contains the integers n,m,c, respectively.\n- m following lines, each forms:\n\n- S u v k to describe an operation of the first type.\n- Q p to describe an operation of the second type.\n(Each integer on a same line, or between the characters S, Q and the integers is separated by at least one space character)\n\n-----Output-----\nFor each operation of the second type, output (on a single line) an integer answering to the respective query (follows the respective Input order).\n\n-----Example-----Input:\n7 5 0\nQ 7\nS 1 7 1\nQ 3\nS 1 3 1\nQ 3\nOutput:\n0\n1\n2\n\n-----Limitations-----\n- 0<n\u2264106\n- 0<m\u2264250 000\n- 0<u\u2264v\u2264n\n- 0\u2264c,k\u2264109\n- 0<p\u2264n\n\n Examples: \nInput: \n['7 5 0', 'Q 7', 'S 1 7 1', 'Q 3', 'S 1 3 1', 'Q 3']\nOutput: \n ['0', '1', '2', 'Limitations', '0<n\u226410 6', '0<m\u2264250 000', '0<u\u2264v\u2264n', '0\u2264c,k\u226410 9', '0<p\u2264n']\n",
  "791": "Problem: \nChef's dog Snuffles has so many things to play with! This time around, Snuffles has an array A containing N integers: A1, A2, ..., AN.\nBad news: Snuffles only loves to play with an array in which all the elements are equal.\nGood news: We have a mover of size D. ! \nA mover of size D is a tool which helps to change arrays. Chef can pick two existing elements Ai and Aj from the array, such that i + D = j and subtract 1 from one of these elements (the element should have its value at least 1), and add 1 to the other element. In effect, a single operation of the mover, moves a value of 1 from one of the elements to the other.\nChef wants to find the minimum number of times she needs to use the mover of size D to make all the elements of the array A equal. Help her find this out.\n\n-----Input-----\n- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains two integers N and D, denoting the number of elements in the array and the size of the mover. \n- The second line of each testcase contains N space-separated integers: A1, A2, ..., AN, denoting the initial elements of the array. \n\n-----Output-----\n- For each test case, output a single line containing the minimum number of uses or -1 if it is impossible to do what Snuffles wants.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 2 \u2264 N \u2264 105\n- 1 \u2264 D < N\n- 1 \u2264 Ai \u2264 109\n\n-----Subtasks-----\n- Subtask 1 (30 points) : N \u2264  103\n- Subtask 2 (70 points) : Original constraints\n\n-----Example-----\nInput:\n3\n5 2\n1 4 5 2 3\n3 1\n1 4 1\n4 2\n3 4 3 5\n\nOutput:\n3\n2\n-1\n\n-----Explanation-----\nTestcase 1:\nHere is a possible sequence of usages of the mover:\n- Move 1 from A3 to A1\n- Move 1 from A3 to A1\n- Move 1 from A2 to A4\nAt the end, the array becomes (3, 3, 3, 3, 3), which Snuffles likes. And you cannot achieve this in fewer moves. Hence the answer is 3.\nTestcase 2:\nHere is a possible sequence of usages of the mover:\n- Move 1 from A2 to A1\n- Move 1 from A2 to A3\nAt the end, the array becomes (2, 2, 2), which Snuffles likes. And you cannot achieve this in fewer moves. Hence the answer is 2.\nTestcase 3:\nIt is impossible to make all the elements equal. Hence the answer is -1.\n\n Examples: \nInput: \n['3', '5 2', '1 4 5 2 3', '3 1', '1 4 1', '4 2', '3 4 3 5']\nOutput: \n ['3', '2', '-1']\n",
  "792": "Problem: \nDustin, is the head of an Intelligence agency. He wants to send a secret message S$S$ to his colleague.The message is a single word consisting of only lowercase english letters but he decides to encrypt the message for security reasons. He makes a string M$M$ of length N$N$, such that after deleting a substring of non-zero length from M$M$, the remaining string is S$S$.\nCalculate the number of all such possible strings he can form.\n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow.\n- For each testcase the there is a single line which contains an integer, N$N$ and then a string S$S$.\n\n-----Output:-----\nFor each testcase, output the number of possible strings modulo 109+7$10^9+7$.\n\n-----Constraints-----\n- 1\u2264T\u226450$1 \\leq T \\leq 50$\n- 1\u2264N\u22641018$1 \\leq N \\leq 10^{18}$\n- 1\u2264|S|\u2264105$1 \\leq |S| \\leq 10^5$\n- S$S$ can contain only lowercase English letters.\n\n-----Sample Input:-----\n2\n\n3 a\n\n3 ab     \n\n-----Sample Output:-----\n1326\n\n76\n\n Examples: \nInput: \n['2', '3 a', '3 ab']\nOutput: \n ['1326', '76']\n",
  "793": "Problem: \nAs lockdown is going on so no is allowed to go outside , so Chef has come with an innovative idea for food home delivery using drone.  But there is an issue with it , the drone can move forward or backward a fix number of steps $x$ . \nAll the houses and chef restaurant are all in a straight line . Homes which need delivery are located at $H[i]$ and chef is located at $y$ coordinate . \nIf Drone is at a location $R$, then it can move to $R-x$ or $R+x$ . \nHelp chef find maximum value of $x$ to complete all the deliveries as he is busy managing the orders.\n\n-----Input:-----\n- First line will contain $n$ and $R$, number of houses that need delivery and the correct coordinate of chef (Drone).\n- Second line contains $n$ integers , the coordinate of all homes that need delivery. \n\n-----Output:-----\n- The maximum value of $x$ , so that drone delivers to all houses.\n\n-----Constraints-----\n- $1 \\leq n \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq hi \\leq 10^9$\n- $1 \\leq x  \\leq 10^9$\n\n-----Sample Input:-----\n3 1\n3 5 11\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\nChef's drone is at 1 initially and he needs to visit 3,5,11 , so optimal solution will be (maximum value of x ) equal to 2.\n\n Examples: \nInput: \n['3 1', '3 5 11']\nOutput: \n ['2']\n",
  "794": "Problem: \nOne day, Tanya was studying graph theory. She is very inquisitive, so the following problem soon came to her mind.\nFind the number of undirected unweighted connected simple graphs with $N$ vertices (numbered $1$ through $N$) and $M$ edges, such that for each $i$ ($2 \\le i \\le N$), the shortest path from vertex $1$ to vertex $i$ is unique and its length is equal to $A_i$. In other words, for each $i$ ($2 \\le i \\le N$), there should be exactly one path with length $A_i$ between vertices $1$ and $i$, and there should be no paths with smaller length between these vertices.\nTwo graphs with $N$ vertices are distinct if we can find two vertices $u$ and $v$ such that there is an edge between these vertices in one graph, but not in the other graph.\nSince the answer could be very large, compute it modulo $1,000,000,007$ ($10^9 + 7$).\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- The second line contains $N - 1$ space-separated integers $A_2, A_3, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of graphs modulo $10^9 + 7$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\le N \\le 10^5$\n- $N-1 \\le M \\le \\mathrm{min}\\left(2\\cdot 10^5, \\frac{N(N-1)}{2}\\right)$\n- $1 \\le A_i \\le N-1$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n- the sum of $M$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (50 points): $M = N-1$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n3\n4 3\n1 2 1\n4 6\n1 2 1\n3 2\n2 2\n\n-----Example Output-----\n2\n0\n0\n\n-----Explanation-----\nExample case 1: The two graphs which satisfy all conditions are:\n\n Examples: \nInput: \n['3', '4 3', '1 2 1', '4 6', '1 2 1', '3 2', '2 2']\nOutput: \n ['2', '0', '0']\n",
  "795": "Problem: \nIn a cricket game, an over is a set of six valid deliveries of balls performed by one player \u2015 the bowler for this over.\nConsider a cricket game with a series of $N$ overs (numbered $1$ through $N$) played by $K$ players (numbered $1$ through $K$). Each player may be the bowler for at most $L$ overs in total, but the same player may not be the bowler for any two consecutive overs. Assign exactly one bowler to each over in such a way that these rules are satisfied or determine that no such assignment exists.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains three space-separated integers $N$, $K$ and $L$. \n\n-----Output-----\nFor each test case:\n- If there is no valid assignment of bowlers to overs, print a single line containing the integer $-1$.\n- Otherwise, print a single line containing $N$ space-separated integers. For each valid $i$, the $i$-th of these integers should be the number of the player assigned as the bowler for the $i$-th over.\n\n-----Constraints-----\n- $1 \\le T \\le 30$\n- $1 \\le N, K, L \\le 10,000$\n\n-----Example Input-----\n2\n4 3 2\n5 4 1\n\n-----Example Output-----\n1 2 3 2\n-1\n\n-----Explanation-----\nExample case 1: The following is a valid assignment:\n- Bowler 1 bowls the $1$-st over.\n- Bowler 2 bowls the $2$-nd and $4$-th overs.\n- Bowler 3 bowls the $3$-rd over.\nIt is valid since no bowler bowls more than $2$ overs and each two consecutive overs have different bowlers.\nExample case 2: There is no valid assignment in which each of $4$ players bowls at most $1$ over out of $5$.\n\n Examples: \nInput: \n['2', '4 3 2', '5 4 1']\nOutput: \n ['1 2 3 2', '-1']\n",
  "796": "Problem: \nThere's an array A consisting of N non-zero integers A1..N. A subarray of A is called alternating if any two adjacent elements in it have different signs (i.e. one of them should be negative and the other should be positive).\n\nFor each x from 1 to N, compute the length of the longest alternating subarray that starts at x - that is, a subarray Ax..y for the maximum possible y \u2265 x. The length of such a subarray is y-x+1.\n\n-----Input-----\n- The first line of the input contains an integer T - the number of test cases.\n- The first line of each test case contains N.\n- The following line contains N space-separated integers A1..N.\n\n-----Output-----\nFor each test case, output one line with N space-separated integers - the lengths of the longest alternating subarray starting at x, for each x from 1 to N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- -109 \u2264 Ai \u2264 109\n\n-----Example-----\nInput:\n3\n4\n1 2 3 4\n4\n1 -5 1 -5\n6\n-5 -1 -1 2 -2 -3\n\nOutput:\n1 1 1 1\n4 3 2 1\n1 1 3 2 1 1\n\n-----Explanation-----\nExample case 1. No two elements have different signs, so any alternating subarray may only consist of a single number.\nExample case 2. Every subarray is alternating.\nExample case 3. The only alternating subarray of length 3 is A3..5.\n\n Examples: \nInput: \n['3', '4', '1 2 3 4', '4', '1 -5 1 -5', '6', '-5 -1 -1 2 -2 -3']\nOutput: \n ['1 1 1 1', '4 3 2 1', '1 1 3 2 1 1']\n",
  "797": "Problem: \nChef is a very experienced and well-known cook. He has participated in many cooking competitions in the past \u2014 so many that he does not even remember them all.\nOne of these competitions lasted for a certain number of days. The first day of the competition was day $S$ of the week (i.e. Monday, Tuesday etc.) and the last day was day $E$ of the week. Chef remembers that the duration of the competition (the number of days between the first and last day, inclusive) was between $L$ days and $R$ days inclusive. Is it possible to uniquely determine the exact duration of the competition? If so, what is this duration?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated strings $S$ and $E$, followed by a space and two space-separated integers $L$ and $R$.\n\n-----Output-----\nFor each test case, print a single line containing:\n- the string \"impossible\" if there is no duration consistent with all given information\n- the string \"many\" if there is more than one possible duration\n- one integer \u2014 the duration of the competition, if its duration is unique\n\n-----Constraints-----\n- $1 \\le T \\le 10,000$\n- $1 \\le L \\le R \\le 100$\n- $S$ is one of the strings \"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" or \"friday\"\n- $E$ is one of the strings \"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" or \"friday\"\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\nsaturday sunday 2 4\nmonday wednesday 1 20\nsaturday sunday 3 5\n\n-----Example Output-----\n2\nmany\nimpossible\n\n Examples: \nInput: \n['3', 'saturday sunday 2 4', 'monday wednesday 1 20', 'saturday sunday 3 5']\nOutput: \n ['2', 'many', 'impossible']\n",
  "799": "Problem: \nOne upon a time there were three best friends Abhinav, Harsh, and Akash decided to form a \nteam and take part in ICPC from KIIT. Participants are usually offered several problems during \nthe programming contest. Long before the start, the friends decided that they will implement a \nproblem if at least two of them are sure about the solution. Otherwise, friends won't write the \nproblem's solution. \nThis contest offers $N$ problems to the participants. For each problem we know, which friend is \nsure about the solution. Help the KIITians find the number of problems for which they will write a \nsolution. \nThen n lines contain three integers each, each integer is either 0 or 1. If the first number in the \nline equals 1, then Abhinav is sure about the problem's solution, otherwise, he isn't sure. The \nsecond number shows Harsh's view on the solution, the third number shows Akash's view. The \nnumbers on the lines are \n\n-----Input:-----\n- A single integer will contain $N$, number of problems. \n\n-----Output:-----\nPrint a single integer \u2014 the number of problems the friends will implement on the contest. \n\n-----Constraints-----\n- $1 \\leq N \\leq 1000$ \n\n-----Sample Input:-----\n3\n\n1 1 0\n\n1 1 1\n\n1 0 0   \n\n-----Sample Output:-----\n2  \n\n-----EXPLANATION:-----\nIn the first sample, Abhinav and Harsh are sure that they know how to solve the first problem \nand all three of them know how to solve the second problem. That means that they will write \nsolutions for these problems. Only Abhinav is sure about the solution for the third problem, but \nthat isn't enough, so the group won't take it.\n\n Examples: \nInput: \n['3', '1 1 0', '1 1 1', '1 0 0']\nOutput: \n ['2']\n",
  "800": "Problem: \nChef has provided with a sequence of integers of length $N$ arranged in an unsorted fashion.\nThe elements of the sequence are ordered as ${A1,A2,A3.....A'N}$\nThe task of the chef is to identify the highest and lowest value among the given sequence. It is assured that the sequence given contains the highest and the lowest value always\nPlease help chef in finding the desired value.\n\n-----Input:-----\n- First line will contain $N$, number of elements in the sequence.  \n- Next line contains  $N$ integers of the sequence  . \n\n-----Output:-----\nPrint the HIGHEST and  LOWEST value of the sequence respectively.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$\n- $2 \\leq  {A1,A2,A3.....A'N}  \\leq 10^4$\n\n-----Sample Input:-----\n5\n3 2 7 9 4\n\n-----Sample Output:-----\n9 2\n\n-----EXPLANATION:-----\nThis list is :\n[3,2,7,9,4]  so the highest value is 9 and lowest is 2 respectively.\n\n Examples: \nInput: \n['5', '3 2 7 9 4']\nOutput: \n ['9 2']\n",
  "805": "Problem: \nin Chefland, there is a very famous street where $N$ types of street food (numbered $1$ through $N$) are offered. For each valid $i$, there are $S_i$ stores that offer food of the $i$-th type, the price of one piece of food of this type is $V_i$ (the same in each of these stores) and each day, $P_i$ people come to buy it; each of these people wants to buy one piece of food of the $i$-th type.\nChef is planning to open a new store at this street, where he would offer food of one of these $N$ types. Chef assumes that the people who want to buy the type of food he'd offer will split equally among all stores that offer it, and if this is impossible, i.e. the number of these people $p$ is not divisible by the number of these stores $s$, then only $\\left\\lfloor\\frac{p}{s}\\right\\rfloor$ people will buy food from Chef.\nChef wants to maximise his daily profit. Help Chef choose which type of food to offer and find the maximum daily profit he can make.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$. \n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains three space-separated integers $S_i$, $P_i$ and $V_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum profit.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i, V_i, P_i \\le 10,000$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n3\n4 6 8\n2 6 6\n1 4 3\n1\n7 7 4\n\n-----Example Output-----\n12\n0\n\n-----Explanation-----\nExample case 1: Chef should offer food of the second type. On each day, two people would buy from him, so his daily profit would be $12$.\nExample case 2: Chef has no option other than to offer the only type of food, but he does not expect anyone to buy from him anyway, so his daily profit is $0$.\n\n Examples: \nInput: \n['2', '3', '4 6 8', '2 6 6', '1 4 3', '1', '7 7 4']\nOutput: \n ['12', '0']\n",
  "807": "Problem: \nYou are given an array A of size N. Let us list down all the subarrays of the given array. There will be a total of N * (N + 1) / 2 subarrays of the given array. Let us sort each of the subarrays in descending order of the numbers in it. \n\nNow you want to sort these subarrays in descending order. You can compare two subarrays B, C, as follows.\n\ncompare(B, C):\nAppend N - |B| zeros at the end of the array B.\nAppend N - |C| zeros at the end of the array C.\nfor i = 1 to N:\nif B[i] < C[i]:\nreturn B is less than C\nif B[i] > C[i]:\nreturn B is greater than C\nreturn B and C are equal.\n\nYou are given M queries asking for the maximum element in the pth subarray (1-based indexing).\n\n-----Input-----\nThe first line of input contains T, the number of test cases.\nThe first line of each test case contains two space separated integers N and M, denoting the array size and the number of queries respectively.\nThe next line contains N space-separated integers denoting the array elements.\n\nEach of the next M lines contains a single integer - p.\n\n-----Output-----\nOutput a single integer corresponding to the maximum element in the pth subarray.\n\n-----Constraints-----\n- 1 \u2264 Ai \u2264 109\n- 1 \u2264 p \u2264 N+1C2\n\n-----Subtasks-----Subtask #1 (20 points):\n- 1 \u2264 T \u2264 20\n- 1 \u2264 N \u2264 200\n- 1 \u2264 M \u2264 104\nSubtask #2 (30 points):\n- 1 \u2264 T \u2264 20\n- 1 \u2264 N \u2264 3000\n- 1 \u2264 M \u2264 104\nSubtask #3 (50 points):\n- 1 \u2264 T \u2264 5\n- 1 \u2264 N \u2264 105\n- 1 \u2264 M \u2264 105\n\n-----Example-----\nInput:1\n4 2\n3 1 2 4\n1\n5\n\nOutput:4\n3\n\n Examples: \nInput: \n['1', '4 2', '3 1 2 4', '1', '5']\nOutput: \n ['4', '3']\n",
  "808": "Problem: \nOne day Chef was playing with numbers. He loves Lowest Common Multiple (LCM) too much and he is a very curious guy. He always try to do new things. Now he want to make a large number with it. But he doesn't want to take too many numbers.\n\nHe is willing to take only three numbers less than or equal to N (not necessarily distinct ) and from those three number he want get the maximum number by taking LCM of the numbers.\n\nAs he is busy in playing some more tricks of maths, he assign this task to you.\n\n-----Input-----\nFirst line of input contains an integer t ( t<=1000 ), Number of test cases.\n\nt line follows an integer N\n\n-----Output-----\nPrint t lines contains a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than N.\n\n-----Constraints-----\n1<= N <= 10^6\n\n-----Example-----\nInput:\n2\n9\n7\n\nOutput:\n504\n210\n\n\n-----Explanation-----\nExample case 2. For the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7\u20226\u20225\u2009=\u2009210. It is the maximum value we can get.\n\n Examples: \nInput: \n['2', '9', '7']\nOutput: \n ['504', '210']\n",
  "809": "Problem: \nZaikia has $N$ sticks of distinct positive lengths $A_1,A_2,\\dots,A_N$. For no good reason at all, he wants to know if there is a triplet of sticks which when connected end-to-end will form a non-trivial triangle. Here non-trivial refers to a triangle with positive area.\nHelp Zaikia know if such a triplet exists or not. If such a triplet exists, help him find the lexicographically largest applicable triplet.Input\n- The first line contains an integer $N$.\n- The second line contains $N$ space-seperated integers $A_1,A_2,\\dots,A_N$. Output\n- In the first line print YES if a triplet exists or NO if it doesn't.\n- If such a triplet exists, then in the second line print the lexicographically largest applicable triplet.Constraints\n- $3 \\leq N \\leq {2}\\times{10}^{5}$\n- $1 \\leq A_i \\leq {10}^{9}$ for each valid $i$Sample Input 1\n5\n4 2 10 3 5\nSample Output 1\nYES\n5 4 3\nExplanation 1\nThere are three unordered triplets of sticks which can be used to create a triangle:\n- $4,2,3$\n- $4,2,5$\n- $4,3,5$\nArranging them in lexicographically largest fashion\n- $4,3,2$\n- $5,4,2$\n- $5,4,3$\nHere $5,4,3$ is the lexicographically largest so it is the triplet which dristiron wantsSample Input 2\n5\n1 2 4 8 16\nSample Output 2\nNO\nExplanation 2\nThere are no triplets of sticks here that can be used to create a triangle.\n\n Examples: \nInput: \n['5', '4 2 10 3 5']\nOutput: \n ['YES', '5 4 3']\n",
  "810": "Problem: \nChef is frustrated in this lockown. So to overcome this he plans to travel various mountains.\nHe is very strange so he sets some conditions for $each$ Type 2 query(mentioned below) (i.e. $1$ $i$) : \n- Let Chef has travelled till $ith$ mountain from left to right.\n- He does not like to travel the mountain with the height ,of which he has travelled till now. More formally, \nLet the height of peak on which he is standing is $a_{i}$ then he can only go to the peak of height $a_{j}$ \nwhich is greater than $a_{i}$ and nearest to $ith$ mountain such that there should be no other peak of same height $a_{j}$ till $a_{i}$(height of $ith$ mountain) .\n\n-----Input format:-----\n- \nThe first line contains an integer $T$ denoting the number of test cases.\n- \nThe second line of  consist of a integer $N$ and $Q$ .\n- \nThe third line contains $N$ not necessarily distinct positive integers $a_{0},a_{1}, . . .,a_{n-1}$ denoting the height of \n$N$ mountains.\n- \nThen next $Q$ lines follows where each line consisting of $either$ of $2$ types of queries:\nType 1:  $0$ $A$ $B$ i.e. $a_{A} = B$ (where height of $Ath$ mountain will be updated to $B$) \nType 2:  $1$ $A$ i.e. you have to answer $a_k$ which is greater than $a_{A}$ and nearest to $Ath$ mountain such that there should be no other peak of same height $a_{k}$ till $a_{A}$(height of $Ath$ mountain) .\n\n-----Output format:-----\n- For every query of Type 2 there should be an integer $a_{k}$ on next  line for the updated array , If no such $a_{k}$ exists then $a_{k}$= $-1$ , as query of type 1 will have no output . \n\n-----Constraints:-----\n- $1\\leq T \\leq 10^2$\n- $1 \\leq N,Q \\leq 10^4$\n- $0\\leq a_{i} \\leq 10^6$\n- $0\\leq B \\leq 10^6$\n- $0\\leq A \\leq N-1$\n\n-----Subtasks-----\n- \n1 Point :   \n$1 \\leq T,N,Q \\leq 10^2$ \n$0\\leq B,a_{i} \\leq 10^2$\n- \n99 Points : Orginal   Constraints\n\n-----Example:-----\n\n-----Input:-----\n1\n10 5\n1 3 5 4 5 6 7 8  4 5\n1 7\n1 3\n1 1\n0 2 7\n1 3\n\n-----Output:-----\n-1\n6\n5\n5\n\n Examples: \nInput: \n['1', '10 5', '1 3 5 4 5 6 7 8  4 5', '1 7', '1 3', '1 1', '0 2 7', '1 3']\nOutput: \n ['-1', '6', '5', '5']\n",
  "811": "Problem: \nIndian National Olympiad in Informatics 2013\nCalvin wakes up early one morning and finds that all his friends in the hostel are asleep. To amuse himself, he decides to play the following game : he draws a sequence of N squares on the ground, numbered 1 to N, and writes an integer in each square. He starts at square k (1 \u2264 k \u2264 N). The game consists of one forward phase followed by one backward phase.\n- In the forward phase, Calvin makes zero or more moves of the following type : if his current position is p, he can jump to p+1 or p+2 as long as he stays within the N squares.\n- In the backward phase, Calvin makes zero or more moves of the following type : if his current position is p, he can jump to p\u22121 or p\u22122 as long as he stays within the N squares.\nHe plays such that he finally ends up at square 1, and then he stops. He starts with a score of 0, and each time he jumps from square i to square j, he adds the integer written in square j to his score. Find the maximum score Calvin can obtain by playing this game. Recall that Calvin must start at square k and end at square 1. The integer on the square where he starts is not included in his score.\nFor example, suppose N = 5 and the numbers in squares are 5, 3, \u22122, 1, 1. If k = 2, Calvin starts on the second square. He can make a forward move to square 4, another to square 5, a backward move to square 4, another to square 2, and another to square 1. His total score is 1+1+1+3+5 = 11. You can check that this is the maximum score possible.\n\n-----Input format-----\n\u2022 Line 1 : Two space-separated integers, N and k, with 1 \u2264 k \u2264 N.\n\u2022 Line 2 : A space-separated sequence of N integers, the numbers in squares 1, 2 . . . , N .\n\n-----Output format-----\nA single line with a single integer, the maximum score Calvin can obtain by playing the game.\n\n-----Test Data-----\nThe testdata is grouped into two subtasks with the following constraints on the inputs.\n\u2022 Subtask 1 [30 points] : 1 \u2264 N \u2264 3000.\n\u2022 Subtask 2 [70 points] : 1 \u2264 N \u2264 106.\nIn all subtasks, the number in each square is between \u22121000 and 1000 inclusive.\n\n-----Example-----\nHere is the sample input and output corresponding to the example above.\n\n-----Sample input-----\n5 2\n5 3 -2 1 1\n\n-----Sample output-----\n11\n\nNote: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\n\n Examples: \nInput: \n['and output corresponding to the example above.', 'Sample input', '5 2', '5 3 -2 1 1', 'Sample output', '11', 'Note : Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!']\nOutput: \n []\n",
  "812": "Problem: \n\tDevuLand is a very strange place. There are n villages in it. Some of the villages are occupied by dinosaurs while the remaining ones by villagers.\n\tYou are given the information of DevuLand \n\tby an array D of size n. If D[i] is non-negative, it means that there are D[i] villagers in that village. \n\tOtherwise, it means that are -D[i] \n\tdinosaurs in that village.\n\n\tIt is also guaranteed that total number of villagers in DevuLand is equal to total number of dinosaurs.\n\nOnce dinosaurs got very hungry and started eating villagers. Frightened villagers gathered immediately and met their Sarpanch Deviji. Deviji, being a very daring and negotiable person, met to the head\nof dinosaurs. Soon both parties called a truce. It was decided that the villagers will provide laddus to \nthe dinosaurs. So everyday, each villager will take exactly one laddu to one of the dinosaurs in such a way that no dinosaur remains hungry (note that this is possible because number of villagers is the same as the number of dinosaurs).\n\nActually, carrying laddus is a quite a tough job. Villagers have to use a bullock cart for that. It takes one unit of grass a bullock to \ncarry a cart with 1 laddu for 1 kilometre. Laddus used to be very heavy in DevuLand, so a bullock cart can not carry more than one laddu.\n\nIt is also given distance between village indexed i and j is |j - i| (the absolute value) kilometres.\n\nNow villagers sat down and found a strategy to feed laddus to dinosaurs so that they need to buy the least amount of grass from the nearby market. \nThey are not very good in \ncalculations, please find out what is the minimum number of units of grass they need to buy.\n\n-----Input-----\n\nFirst line of the input contains an integer T denoting number of test cases.\n\nFor each test case, there are two lines. \n\nFirst line contains a single integer denoting n: number of villages. \n\nSecond line contains n space separated integers denoting the array D.\n\n-----Output-----\n\nFor each test case, print a single line containing the integer corresponding to answer of the problem.\n\n-----Constraints-----\n\n-  1 \u2264 T \u2264 10^5 \n-  1 \u2264 n \u2264 10^5 \n-  -10^4 \u2264 D[i] \u2264 10^4 \n-  Sum of n over all the test cases will be \u2264 10^6 \n-  It is guaranteed that sum of D[i] is zero for a single test case which ensures that there are equal number of villagers and dinosaurs. \n\n-----Example-----\nInput:\n3\n2\n5 -5\n2\n-5 5\n3\n1 2 -3\nOutput:\n5\n5\n4\n\n-----Explanation-----\nExample case 1. Each villager in village 1, need to walk 1 km to reach to the dinosaur in 2nd village.\nExample case 2. Each villager in village 2, need to walk 1 km to reach to the dinosaur 1st village.\nExample case 3. Each villager in village 1, need to walk 2 km to reach to the dinosaur in 3rd village whereas Each villager in village 2, \nneed to walk 1 km to reach to the dinosaur in 3rd village.\n\n Examples: \nInput: \n['3', '2', '5 -5', '2', '-5 5', '3', '1 2 -3']\nOutput: \n ['5', '5', '4']\n",
  "813": "Problem: \nHarsh, like usual, started studying 6 months before for his end semester examinations. He was going to complete his 8th revision of the whole syllabus, when suddenly Pranav showed up in his room with the last year's question paper for their algorithms course. This paper contains a problem which both of them couldn't solve. Frustrated he asked you for help. But you declined him and instead try to do this problem instead:\nYou are given an array $A_1,A_2,\\dots,A_N$, a positive integer $K$, and a function $F(x)=\\displaystyle\\sum_{i=1}^{N}{\\left|{\\left({x-A_i}\\right)^K}\\right|}$. Find the smallest integer $x$ such that $F(x)$ is minimum.Input\n- The first line contains two space-seperated integers , $N$ and $K$\n- The second line contains $N$ space-seperated integers $A_1,A_2,\\dots,A_N$. Output\nIn the first and only line print the smallest integer $x$ such that $F(x)$ is minimumConstraints\n- $1 \\leq N \\leq {10}^{5}$\n- $1 \\leq K \\leq {3}$\n- $1 \\leq A_i \\leq {5}\\times{10}^{4}$ for each valid $i$Sample Input 1\n3 1\n6 1 7\nSample Output 1\n6\nExplanation 1\n$F(6) = \\displaystyle\\sum_{i=1}^{N}{\\left|{\\left({6-A_i}\\right)^K}\\right|} \\\\ F(6) = \\left|{\\left({6-6}\\right)^1}\\right| + \\left|{\\left({6-1}\\right)^1}\\right| + \\left|{\\left({6-7}\\right)^1}\\right| \\\\ F(6)  = 0 + 5+ 1 \\\\ F(6)  = 6 $\nHere $6$ is the minumum value for $F(x)$ for any integer value of $x$.Sample Input 2\n3 2\n6 1 7\nSample Output 2\n5\nExplanation 2\n$F(5) = \\displaystyle\\sum_{i=1}^{N}{\\left|{\\left({5-A_i}\\right)^K}\\right|} \\\\F(5) = \\left|{\\left({5-6}\\right)^2}\\right| + \\left|{\\left({5-1}\\right)^2}\\right| + \\left|{\\left({5-7}\\right)^2}\\right| \\\\F(5) = 1 + 16 + 4 \\\\F(5) = 21$ \nHere $21$ is the minumum value for $F(x)$ for any integer value of $x$.Sample Input 3\n3 3\n6 1 7\nSample Output 3\n4\nExplanation 3\n$F(4) = \\displaystyle\\sum_{i=1}^{N}{\\left|{\\left({4-A_i}\\right)^K}\\right|} \\\\F(4) = \\left|{\\left({4-6}\\right)^3}\\right| + \\left|{\\left({4-1}\\right)^3}\\right| + \\left|{\\left({4-7}\\right)^3}\\right| \\\\F(4) = 8 + 27 + 27 \\\\F(4) = 62 $\nHere $62$ is the minumum value for $F(x)$ for any integer value of $x$.\n\n Examples: \nInput: \n['3 1', '6 1 7']\nOutput: \n ['6']\n",
  "814": "Problem: \nTzuyu gave Nayeon a strip of $N$ cells (numbered $1$ through $N$) for her birthday. This strip is described by a sequence $A_1, A_2, \\ldots, A_N$, where for each valid $i$, the $i$-th cell is blocked if $A_i = 1$ or free if $A_i = 0$. Tzuyu and Nayeon are going to use it to play a game with the following rules:\n- The players alternate turns; Nayeon plays first.\n- Initially, both players are outside of the strip. However, note that afterwards during the game, their positions are always different.\n- In each turn, the current player should choose a free cell and move there. Afterwards, this cell becomes blocked and the players cannot move to it again.\n- If it is the current player's first turn, she may move to any free cell.\n- Otherwise, she may only move to one of the left and right adjacent cells, i.e. from a cell $c$, the current player may only move to the cell $c-1$ or $c+1$ (if it is free).\n- If a player is unable to move to a free cell during her turn, this player loses the game.\nNayeon and Tzuyu are very smart, so they both play optimally. Since it is Nayeon's birthday, she wants to know if she can beat Tzuyu. Find out who wins.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if Nayeon wins the game or \"No\" if Tzuyu wins (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 40,000$\n- $2 \\le N \\le 3\\cdot 10^5$\n- $0 \\le A_i \\le 1$ for each valid $i$\n- $A_1 = A_N = 1$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points): $A_i = 0$ for each $i$ ($2 \\le i \\le N-1$)\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n4\n7\n1 1 0 0 0 1 1\n8\n1 0 1 1 1 0 0 1\n4\n1 1 0 1\n4\n1 1 1 1\n\n-----Example Output-----\nYes\nNo\nYes\nNo\n\n-----Explanation-----\nExample case 1: Since both Nayeon and Tzuyu play optimally, Nayeon can start e.g. by moving to cell $4$, which then becomes blocked. Tzuyu has to pick either the cell $3$ or the cell $5$, which also becomes blocked. Nayeon is then left with only one empty cell next to cell $4$ (the one Tzuyu did not pick); after she moves there, Tzuyu is unable to move, so she loses the game.\nExample case 2: Regardless of what cell Nayeon moves to at the start, Tzuyu will always be able to beat her.\n\n Examples: \nInput: \n['4', '7', '1 1 0 0 0 1 1', '8', '1 0 1 1 1 0 0 1', '4', '1 1 0 1', '4', '1 1 1 1']\nOutput: \n ['Yes', 'No', 'Yes', 'No']\n",
  "815": "Problem: \nJohnny has some difficulty memorizing the small prime numbers. So, his computer science teacher has asked him to play with the following puzzle game frequently.\nThe puzzle is a 3x3 board consisting of numbers from 1 to 9. The objective of the puzzle is to swap the tiles until the following final state is reached:\n1 2 3\n4 5 6\n7 8 9\n\nAt each step, Johnny may swap two adjacent tiles if their sum is a prime number. Two tiles are considered adjacent if they have a common edge.\nHelp Johnny to find the shortest number of steps needed to reach the goal state.\n\n-----Input-----\nThe first line contains t, the number of test cases (about 50). Then t test cases follow. Each test case consists of a 3x3 table describing a puzzle which Johnny would like to solve.\nThe input data for successive test cases is separated by a blank line.\n\n-----Output-----\nFor each test case print a single line containing the shortest number of steps needed to solve the corresponding puzzle. If there is no way to reach the final state, print the number -1.\n\n-----Example-----\nInput:\n2\n\n7 3 2 \n4 1 5 \n6 8 9 \n\n9 8 5 \n2 4 1 \n3 7 6  \n\nOutput:\n6\n-1\n\n-----Output details-----\nThe possible 6 steps in the first test case are described in the following figure:\n\n Examples: \nInput: \n['2', '', '7 3 2 ', '4 1 5 ', '6 8 9 ', '', '9 8 5 ', '2 4 1 ', '3 7 6  ', '', '']\nOutput: \n ['6', '-1']\n",
  "816": "Problem: \nThis is another problem about Indraneel's library. His library has one long shelf. His books are numbered and he identifies the books by their number. Each book has a distinct number.\nHe has lost many books, since many of his friends borrow his books and never bother to return them. He does not want to lose any more books and has decided to keep a record of all books that he lends to his friends. To make the task of borrowing a book a little difficult, he has given the following instructions to his friends: when they borrow a book, they must record in a register its position from the left among the books currently on the shelf.\nSuppose there are $5$ books in the library and they are arranged as follows:\n261421532614215326 \\quad 1 \\quad 42 \\quad 15 \\quad 3\nIf someone walks in and borrows the book $42$, then he will record $3$ in the register because this book is the third from the left on the shelf. Now the shelf looks like this:\n26115326115326 \\quad 1 \\quad 15 \\quad 3\nIf the next person borrow the book $3$, he writes down $4$ in the register since this is currently the fourth book from the left on the shelf, and so on.\nIndraneel knows the initial arrangement of the books in his library at the time that he introduced the register system. After a while he examines his register and would like to know which books have been borrowed. Your task is to write a program to help Indraneel solve this problem.\n\n-----Input:-----\nThe first line of the input contains a single integer $M$ indicating the number of books in Indraneel's library. The next line contains $M$ distinct positive integers describing the sequence in which the books are arranged on the library shelf. The third line of input contains a single integer $N$ indicating the number of entries in the register. This, in turn, is followed by $N$ lines (lines $4$ to $N+3$), each containing one positive integer. The integer on line $3+i$ indicates the position from left of the book ith book borrowed. (You may assume that the number on line $3+i$ is at most $M-i+1$.)\n\n-----Output:-----\n$N$ lines with one positive integer on each line. The number on line $i$ is the book borrowed by the ith borrower.\n\n-----Constraints:-----\n- $1 \\leq M \\leq 1000000$.\n- $1 \\leq N \\leq 4000$.\n\n-----Sample Input-----\n5\n26 1 42 15 3 \n2\n3\n4\n\n-----Sample Output-----\n42\n3\n\n Examples: \nInput: \n['5', '26 1 42 15 3', '2', '3', '4']\nOutput: \n ['42', '3']\n",
  "817": "Problem: \nAmit is going on a date and he wants to gift his date an array of positive numbers. But he is running short on money. He already has an array of numbers in design. Cost of an array of numbers is the sum of elements in it. But he wants to minimize the cost of making it. \nSo he does the following number of operations one by one for any number of times:\nHe chooses two adjacent elements ,replace them by one element with value = XOR of the two numbers. This operation reduces length of array (and elements are re-numerated accordingly)\nFind the minimum amount of money that Amit needs to spend to gift his date.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of $2$ lines of input, first line contains a single integer $N$ and the second line contains $N$ elements - $A1,A2,A3,.....,AN$ \n\n-----Output:-----\nFor each testcase, output in a single line answer denoting the minimum cost\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $0 \\leq Ai \\leq 10^9$ for $1\\leq i \\leq N$\n\n-----Sample Input:-----\n3\n5\n8 4 1 5 0\n5\n1 2 4 0 8\n2\n10 10\n\n-----Sample Output:-----\n8\n15\n0\n\n-----EXPLANATION:-----\nFor first case,\nThis array is :\n$[8,4,1,5,0] -> [8,4,4,0] -> [8,0,0]$. Sum=$8$ So the answer is 8.\n\n Examples: \nInput: \n['3', '5', '8 4 1 5 0', '5', '1 2 4 0 8', '2', '10 10']\nOutput: \n ['8', '15', '0']\n",
  "818": "Problem: \nWe all know Gru loves Agnes very much. One day Agnes asked Gru to answer some of her queries. She lined up $N$ minions in a straight line from $1$ to $N$. \nYou are given an array $A$ which contains the height of minions. Agnes will ask him several queries. In each query, Gru has to tell whether the bitwise AND of  $A[L \\ldots R]$ is EVEN or ODD. Since Gru is busy planning the biggest heist on Earth, he asks for your help.\n\n-----Input:-----\n- First line of the input contains an integer $T$ denoting the number of test cases.\nFor each test case:-\n- First line contains an integer $N$ denoting the number of elements.\n- Second line contains $N$ spaced integer representing array elements.\n- Third line contains $Q$ representing number of query.\n- Next $Q$ lines contains two integer $L$ and $R$ as defined above.\n\n-----Output:-----\nFor each query, output \"EVEN\" or \"ODD\" without quotes.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq A_i \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n\n-----Sample Input:-----\n1\n5\n1 3 2 4 5\n3\n1 2 \n1 5\n3 4\n\n-----Sample Output:-----\nODD\nEVEN\nEVEN\n\n-----Explanation-----\n- For the first query, the bitwise AND of 1 and 3 is 1, which is Odd. Hence the first output is ODD.\n- For the third query, the bitwise AND of 2 and 4 is 0, which is Even. Hence the third output is EVEN.\n\n Examples: \nInput: \n['1', '5', '1 3 2 4 5', '3', '1 2', '1 5', '3 4']\nOutput: \n ['ODD', 'EVEN', 'EVEN']\n",
  "819": "Problem: \nMotu wants to learn Cricket from a coach, but firstly coach wants to test his IQ level, so he gave Motu $1$ $Red$ $ball$ and $1$ $Black$ $ball$ , and asked him to buy other $x \u2013 1$ red balls and other $y \u2013 1$ black balls from the market. But he put some conditions on buying balls, that if he has $R$ red and $B$ black balls then he can either buy $B$ red balls or $R$ black balls in one operation. He can perform this operation as many times as he want. But as Motu is not so good in solving problems so he needs your help. So you have to tell him whether his coach\u2019s task possible or not.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $x , y$. \n\n-----Output:-----\nFor each testcase, print $YES$, if it is possible to complete coach task, else print $NO$(without quotes) in a separate line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq x, y \\leq$ 10^18\n\n-----Sample Input:-----\n2\n1 2\n2 3\n\n-----Sample Output:-----\nYES\nYES\n\n Examples: \nInput: \n['2', '1 2', '2 3']\nOutput: \n ['YES', 'YES']\n",
  "821": "Problem: \nYou are given $n$ intervals on the $X$ axis. Each interval $i$ is specified by its ends $[L_i, R_i]$. You want to color each interval either blue or yellow. After coloring all the intervals, the $X$ axis will will have $4$ colors:\n- White, the part of $X$ axis contained in no interval\n- Blue, the part of $X$ axis contained in atleast one blue colored interval and no yellow colored interval.\n- Yellow, the part of $X$ axis contained in atleast one yellow colored interval and no blue colored interval.\n- Green, the part of $X$ axis contained in at least one blue colored interval and at least one yellow colored interval.\nYou want to color the intervals so that the total length of the part colored green is maximized. If there are multiple ways to color which maximize the green part, you can output any of them.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each testcase contains $n$, the number of intervals.\n- The $i^{\\text{th}}$ of the next $n$ lines contains two integers $L_i$ and $R_i$ describing the $i^{\\text{th}}$ interval.\n\n-----Output:-----\nFor each testcase, output a single string on a new line, whose $i^{\\text{th}}$ character is $0$ if you color the $i^{\\text{th}}$ interval blue, and $1$ if you color it yellow.\n\n-----Constraints-----\n- $ 1 \\leq T \\leq 10^5 $\n- $ 1 \\leq n \\leq 10^5 $\n- The sum of $n$ over all testcases doesn't exceed $10^5$.\n- $ 1 \\leq L_i \\leq R_i \\leq 10^9 $ for al $ 1 \\leq i \\leq n$.\n\n-----Sample Input:-----\n1\n3\n3 7\n2 5\n6 9\n\n-----Sample Output:-----\n100\n\n-----Explanation:-----\nThe intervals are $[3, 7]$, $[2, 5]$, $[6, 9]$. It is optimal to color them in yellow, blue and blue respectively. In this coloring:\n- $[2, 3) \\cup (7, 9]$ is colored blue.\n- $(5, 6)$ is colored yellow.\n- $[3, 5] \\cup [6, 7]$ is colored green, with a total length of $(5 - 3) + (7 - 6) = 3$.\n- Rest of the $X$ axis is colored white.\nPlease note that colors at the endpoints of the intervals don't matter when computing the lengths, and we can ignore them. Open and closed intervals have been used in the explanation section only for clarity, and it doesn't matter whether they are open or closed.\nNote that 011 is also a valid output.\n\n Examples: \nInput: \n['1', '3', '3 7', '2 5', '6 9']\nOutput: \n ['100']\n",
  "822": "Problem: \nDoubleville, a small town in Texas, was attacked by the aliens. They have abducted some of the residents and taken them to the a spaceship orbiting around earth. After some (quite unpleasant) human experiments, the aliens cloned the victims, and released multiple copies of them back in Doubleville. So now it might happen that there are 6 identical person named Hugh F. Bumblebee: the original person and its 5 copies. The Federal Bureau of Unauthorized Cloning (FBUC) charged you with the task of determining how many copies were made from each person. To help you in your task, FBUC have collected a DNA sample from each person. All copies of the same person have the same DNA sequence, and different people have different sequences (we know that there are no identical twins in the town, this is not an issue).\n\n\n-----Input-----\n\nThe input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 <= n <= 20000 people, and the length 1 <= m <= 20 of the DNA sequences. The next n lines contain the DNA sequences: each line contains a sequence of m characters, where each character is either 'A', 'C', 'G' or 'T'.\n\nThe input is terminated by a block with n = m = 0 .\n\n-----Output-----\nFor each test case, you have to output n lines, each line containing a single integer. The first line contains the number of different people that were not copied. The second line contains the number of people that were copied only once (i.e., there are two identical copies for each such person.) The third line contains the number of people that are present in three identical copies, and so on: the i -th line contains the number of persons that are present in i identical copies. For example, if there are 11 samples, one of them is from John Smith, and all the others are from copies of Joe Foobar, then you have to print '1' in the first and the tenth lines, and '0' in all the other lines.\n\n-----Example-----\nInput:\n\n9 6\nAAAAAA\nACACAC\nGTTTTG\nACACAC\nGTTTTG\nACACAC\nACACAC\nTCCCCC\nTCCCCC\n0 0\n\nOutput:\n\n1\n2\n0\n1\n0\n0\n0\n0\n0\n\n Examples: \nInput: \n['9 6', 'AAAAAA', 'ACACAC', 'GTTTTG', 'ACACAC', 'GTTTTG', 'ACACAC', 'ACACAC', 'TCCCCC', 'TCCCCC', '0 0', '', '']\nOutput: \n ['1', '2', '0', '1', '0', '0', '0', '0', '0']\n",
  "823": "Problem: \nChef likes problems which using some math. Now he asks you to solve next one. You have 4 integers, Chef wondering is there non-empty subset which has sum equals 0.\n\n-----Input-----\nThe first line of input contains T - number of test cases. \nEach of the next T lines containing four pairwise distinct integer numbers - a, b, c, d.\n\n-----Output-----\nFor each test case output \"Yes\", if possible to get 0 by choosing non-empty subset of {a, b, c, d} with sum equal 0, or \"No\" in another case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 103\n- -106 \u2264 a, b, c, d \u2264 106 \n\n-----Example-----\nInput:\n3\n1 2 0 3\n1 2 4 -1\n1 2 3 4\n\nOutput:\nYes\nYes\nNo\n\n-----Explanation-----\nExample case 1. We can choose subset {0} \nExample case 2. We can choose subset {-1, 1}\n\n Examples: \nInput: \n['3', '1 2 0 3', '1 2 4 -1', '1 2 3 4']\nOutput: \n ['Yes', 'Yes', 'No']\n",
  "825": "Problem: \nOur Chef is doing what he is best at, COOKING A BARBECUE for his guests. He has invited all of us, and taking the help of his apprentice to smoke the barbecues. The chef has got BBQ sticks, each can take N fillings, and he presents N distinctly filled sticks in front his guests forming a N*N  matrix\n\nBut here is the problem, he has got only two type of fillings, meat and capsicum, but still wants the N  sticks to look \"presentable\", he is very particular about it. As a solution he fills the main diagonal of the N*N  matrix with the same type of filling (either meat or capsicum) forming a \"presentable\" set\n\nThe Chef's apprentice is a fool, so the Chef asks him to cook M distinctly filled sticks ,so that the Chef is sure that among M there exist N sticks forming a \"presentable\" set. Your job is to determine smallest possible value of M.\n\n\n-----Input-----\nT, the number of test cases, followed by T lines. \nEach line containing the positive integer N >= 4\n\n-----Output-----\nT lines of output, each line contain the positive integer M\n\n-----Example-----\nInput:\n1\n4\n\nOutput:\n5\n\n Examples: \nInput: \n['1', '4']\nOutput: \n ['5']\n",
  "827": "Problem: \nLimak has a string S, that consists of N lowercase English letters.\nLimak then created a new string by repeating S exactly K times.\nFor example, for S = \"abcb\" and K = 2, he would get \"abcbabcb\".\nYour task is to count the number of subsequences \"ab\" (not necessarily consecutive) in the new string.\nIn other words, find the number pairs of indices i < j, such that the i-th and j-th characters in the new string are 'a' and 'b' respectively.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two integers N and K, denoting the length of the initial string S and the number of repetitions respectively.\nThe second line contains a string S.\nIts length is exactly N, and each of its characters is a lowercase English letter.\n\n-----Output-----\nFor each test case, output a single line containing one integer \u2014 the number of subsequences \"ab\" in the new string.\nFor the given constraints, it can be proved that the answer fits in the 64-bit signed type.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 N * K \u2264 109 (in other words, the new string has length up to 109)\n\n-----Example-----\nInput:\n3\n4 2\nabcb\n7 1\naayzbaa\n12 80123123\nabzbabzbazab\n\nOutput:\n6\n2\n64197148392731290\n\n-----Explanation-----\nTest case 1. Limak repeated the string \"abcb\" 2 times, and so he got \"abcbabcb\". There are 6 occurrences of the subsequence \"ab\":\n- ABcbabcb (the two letters marked uppercase)\n- AbcBabcb\n- AbcbaBcb\n- AbcbabcB\n- abcbABcb\n- abcbAbcB\nTest case 2. Since K = 1, the new string is equal to the given S (\"aayzbaa\"). There are 2 occurrences of the subsequence \"ab\" in this string: AayzBaa and aAyzBaa.\n\n Examples: \nInput: \n['3', '4 2', 'abcb', '7 1', 'aayzbaa', '12 80123123', 'abzbabzbazab', '', '']\nOutput: \n ['6', '2', '64197148392731290']\n",
  "828": "Problem: \nChef lives in a big apartment in Chefland. The apartment charges maintenance fees that he is supposed to pay monthly on time. But Chef is a lazy person and sometimes misses the deadlines. The apartment charges 1000 Rs per month as maintenance fees. Also, they also charge a one-time fine of 100 Rs for each of the late payments. It does not matter how late the payment is done, the fine is fixed to be Rs.100.\nChef has been living in the apartment for N months. Now, he wants to switch the apartment, so he has to pay the entire dues to the apartment. The deadline for the N-th month is also over. From his bank statement, he finds the information whether he paid apartment rent for a particular month for not. You are given this information by an array A of size N, where Ai (can be either 0 or 1) specifies whether he has paid the 1000Rs in the i-th month or not. Assume that Chef paid the fees in the i-th month, then this fees will be considered for the earliest month for which Chef has not yet paid the fees.\n\nFor example, assume Chef did not pay any money in first month and 1000Rs in the second month. Then this rent of 1000Rs will be considered for 1st month. But this counts as late payment for the first month's fees, and hence he will have to pay Rs. 100 for that. And since the payment he made in the second month is not accounted for the second month, but rather for the first month, he will incur a fine of Rs.100 even for the second month. \n\nHe has not paid any of the fines so far. Can you please help in finding Chef total due (all the fines, plus all the unpaid maintenance fees) that he has to pay to apartment? \n\n-----Input-----\nFirst line of the input contains an integer T denoting number of test cases. The description of T test cases follows.\nThe first line of each test cases contains an integer N denoting the number of months for which you have to calculate the total amount of money that Chef has to pay at the end of the n month to clear all of his dues.\nNext line of each test case contains N space separated integers (each of them can be either 0 or 1) denoting whether Chef paid the 1000Rs fees in the corresponding month or not. If the corresponding integer is 1, it means that Chef paid the maintenance fees for that month, whereas 0 will mean that Chef did not pay the maintenance fees that month.\n\n-----Output-----\nFor each test case, output a single integer denoting the total amount including fine that Chef has to pay.\n\n-----Constraints-----Constraints\n- 1 \u2264 T \u2264 25\n- 0 \u2264 Ai \u2264 1\n\n-----Subtasks-----\nSubtask #1 (30 points)\n- 1 \u2264 N \u2264 103\n\nSubtask #2 (70 points)\n- 1 \u2264 N \u2264 105\n\n-----Example-----\nInput\n4\n2\n1 1\n2\n0 0\n3\n0 1 0\n2\n0 1\n\nOutput\n0\n2200\n2300\n1200\n\n-----Explanation-----\nExample case 1. Chef paid maintenance fees for both the months. So, he does not have any dues left.\nExample case 2. Chef did not pay the maintenance fees for any of the months. For the first month, he has to pay 1000Rs, and 100Rs fine as a late payment. For second month payments, he just have to pay 1100Rs. So, in total he has a due of 1100 + 1100 = 2200 Rs.\nExample case 3. In the first month, Chef did not pay his maintenance fees. He paid the maintenance of first in the second month. So, he paid a fine of 100Rs for first month. For second and third month, Chef did not pay the maintenance fees. So, he has to pay 1000Rs + 100Rs (of fine) for second month and only 1000Rs + 100Rs (of fine) for third month. In total, Chef has got to pay 100 + 1100 + 1100 = 2300 Rs. \nExample case 4. In the first month, Chef did not pay his maintenance fees. He paid the maintenance of first in the second month. So, he paid a fine of 100Rs for first month. For second month, Chef did not pay the maintenance fees. So, he has to pay 1000Rs + 100Rs (of fine) for second month. In total, Chef has got to pay 100 + 1100 = 1200 Rs.\n\n Examples: \nInput: \n['4', '2', '1 1', '2', '0 0', '3', '0 1 0', '2', '0 1', '', '']\nOutput: \n ['0', '2200', '2300', '1200']\n",
  "829": "Problem: \nZonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate in a league cricket tournament on Mars, where each pair of distinct teams plays each other exactly once. Thus, there are a total of (N \u00d7 (N-1))/2 matches. An expert has assigned a strength to each team, a positive integer. Strangely, the Martian crowds love one-sided matches and the advertising revenue earned from a match is the absolute value of the difference between the strengths of the two matches. Given the strengths of the N teams, find the total advertising revenue earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\nIn all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n- Subtask 1 (30 marks) : 2 \u2264 N \u2264 1,000.\n- Subtask 2 (70 marks) : 2 \u2264 N \u2264 200,000.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int. We recommend that type long long be used for computing all advertising revenues. If you use printf and scanf, you can use %lld for long long.\n\n Examples: \nInput: \n['4', '3 10 3 5', 'Sample output', '23', 'Test data', 'In all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.', 'Subtask 1 (30 marks)  : 2 \u2264  N  \u2264 1,000.', 'Subtask 2 (70 marks)  : 2 \u2264  N  \u2264 200,000.', 'Live evaluation data', 'Subtask 1 : Testcases 0,1,2.', 'Subtask 2 : Testcases 3,4,5.', 'Note', 'The answer might not fit in a variable of type  int . We recommend that type  long\\xa0long  be used for computing all advertising revenues. If you use  printf  and  scanf , you can use  %lld  for  long\\xa0long .']\nOutput: \n []\n",
  "830": "Problem: \nVivek was quite bored with the lockdown, so he came up with an interesting task. He successfully completed this task and now, he would like you to solve it.\nYou are given two strings $A$ and $B$, each with length $N$. Let's index the characters in each string from $0$ \u2015 for each $i$ ($0 \\le i < N$), the $i+1$-th characters of $A$ and $B$ are denoted by $A_i$ and $B_i$ respectively. You should convert $A$ to $B$ by performing operations of the following type:\n- Choose a subset $S$ of the set $\\{0, 1, \\ldots, N-1\\}$.\n- Let $c$ be the alphabetically smallest character among $A_x$ for all $x \\in S$.\n- For each $x \\in S$, replace $A_x$ by $c$.\nYou should find the smallest necessary number of operations or report that it is impossible to convert $A$ to $B$. If it is possible, you also need to find one way to convert $A$ to $B$ using this smallest number of operations. If there are multiple solutions, you may find any one.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains a single string $A$.\n- The third line contains a single string $B$.\n\n-----Output-----\nFor each test case:\n- If it is impossible to convert $A$ to $B$, print a single line containing the integer $-1$.\n- Otherwise, first, print a line containing a single integer $K$ \u2015 the minimum number of operations.\n- Then, print $K$ lines describing the operations. Each of these lines should contain a positive integer $Z$, followed by a space and $Z$ pairwise distinct space-separated integers from the set $\\{0, 1, \\ldots, N-1\\}$ \u2015 the elements of $S$.\n\n-----Constraints-----\n- $1 \\le T \\le 20$\n- $1 \\le N \\le 10^3$\n- $|A| = |B| = N$\n- $A$ and $B$ contain only lowercase English letters\n\n-----Subtasks-----\nSubtask #1 (30 points): $B$ contains only characters 'a' and 'b'\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n3\n5\nabcab\naabab\n3\naaa\naab\n2\nde\ncd\n\n-----Example Output-----\n2\n3 1 2 4\n3 0 1 3\n-1\n-1\n\n-----Explanation-----\nExample case 1:\n- First, we can choose $S = (1, 2, 4)$, so the character $c$ is 'b' and the string $A$ after this operation is \"abbab\".\n- Then, we choose $S = (0, 1, 3)$, so $c$ is 'a', and $A$ becomes \"aabab\".\n- There is no way to convert $A$ to $B$ in only one operation.\nExample case 2: We can see that it is impossible to convert $A$ to $B$ since $c$ is always 'a'.\nExample case 3: We can see again that it is impossible to convert $A$ to $B$ since $c$ cannot be 'c'.\n\n Examples: \nInput: \n['3', '5', 'abcab', 'aabab', '3', 'aaa', 'aab', '2', 'de', 'cd']\nOutput: \n ['2', '3 1 2 4', '3 0 1 3', '-1', '-1']\n",
  "831": "Problem: \nBear Limak has a sequence of N non-negative integers A1, A2, ..., AN. He defines the score of a segment (consecutive subsequence) as its sum of elements modulo P (not necessarily prime). Find the maximum score of a non-empty segment, and also find the number of segments with this maximum score.\n\n-----Input-----\nFirst line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFor each test case, the first line of the input contains two space separated integers, N and P.\nThe second line contains N space separated integers denoting the sequence.\n\n-----Output-----\nFor each test case, output two space separated integers denoting the maximum score of a segment and the number of segments with the score, respectively.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 P \u2264 109\n- 0 \u2264 Ai \u2264 109 \n\nSubtask #1: (25 points)\n- 1 \u2264 N \u2264 100\n\nSubtask #2: (25 points)\n- 1 \u2264 N \u2264 1000\n\nSubtask #3: (50 points)\n- original constraints\n\n-----Example-----\nInput:\n4\n2 3\n1 2\n3 5\n2 4 3\n3 100\n1 3 5\n4 3\n1 2 3 4\n\nOutput:\n2 1\n4 2\n9 1\n2 2\n\n-----Explanation-----\nExample case 1. There are three segments - [1], [2] and [1, 2]. Sum of these segments are 1, 2 and 3 respectively. Sum of these segments modulo 3 will be 1, 2 and 0. Maximum score among these is 2. There is also only one segment with this score.\nExample case 2. There are six segments - [2], [4], [3], [2, 4], [4, 3] and [2, 4, 3]. Sum of these segments are 2, 4, 3, 6, 7, 9 respectively. Sum of these segments modulo 5 will be 2, 4, 3, 1, 2, 4. Maximum score among these is 4. And there are two segments with this score.\n\n Examples: \nInput: \n['4', '2 3', '1 2', '3 5', '2 4 3', '3 100', '1 3 5', '4 3', '1 2 3 4']\nOutput: \n ['2 1', '4 2', '9 1', '2 2']\n",
  "832": "Problem: \nChef has a sequence $A_1, A_2, \\ldots, A_N$. This sequence has exactly $2^N$ subsequences. Chef considers a subsequence of $A$ interesting if its size is exactly $K$ and the sum of all its elements is minimum possible, i.e. there is no subsequence with size $K$ which has a smaller sum.\nHelp Chef find the number of interesting subsequences of the sequence $A$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of interesting subsequences.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le K \\le N \\le 50$\n- $1 \\le A_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N \\le 20$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n4 2\n1 2 3 4\n\n-----Example Output-----\n1\n\n-----Explanation-----\nExample case 1: There are six subsequences with length $2$: $(1, 2)$, $(1, 3)$, $(1, 4)$, $(2, 3)$, $(2, 4)$ and $(3, 4)$. The minimum sum is $3$ and the only subsequence with this sum is $(1, 2)$.\n\n Examples: \nInput: \n['1', '4 2', '1 2 3 4']\nOutput: \n ['1']\n",
  "833": "Problem: \nGalileo's latest project involves determining the density of stars in certain regions of the sky. For this purpose he started looking for datasets online, and discovered a dataset on Newton's blog. Newton had decomposed the night sky into a Voronoi tessellation with the generators arranged in a grid. He has stored the number of stars in a Voronoi cell at a position in a matrix that corresponds to the position of the generator in the grid.\nThis dataset does not directly help Galileo, because he needs to be able to query the number of stars in a rectangular portion of the sky. Galileo tried to write a program that does this on his own, but it turned out to be too slow. Can you help him?\n\n-----Input Format-----\nThe first line contains two integers n and m that denote the height and width of the matrix respectively. This is followed by  n lines each containing m integers each.\nThe line following this would contain a single integer t, the number of queries to be run. Each query line consists of 4 integers px, py, qx, qy. The first two integers denote the row and column numbers of the upper left corner of the rectangular region, and the second pair of numbers correspond to the lower right corner.\n\n-----Output Format-----\nFor each query output a single line containing the number of stars in that rectangular region.\n\n-----Example-----\nInput:\n\n3 3\n10 10 10\n10 10 10\n10 10 10\n4\n1 1 1 1\n1 1 3 3\n2 1 3 3\n3 1 3 3\n\nOutput:\n\n10\n90\n60\n30\n\n Examples: \nInput: \n['3 3', '10 10 10', '10 10 10', '10 10 10', '4', '1 1 1 1', '1 1 3 3', '2 1 3 3', '3 1 3 3']\nOutput: \n ['10', '90', '60', '30']\n",
  "835": "Problem: \nChef is stuck in a two dimensional maze having N rows and M columns. He needs to get out of the maze as soon as possible and arrive at the kitchen in order to serve his hungry customers. But, he can get out of the maze only if he is able to successfully find any magical path in the given maze.\n\nA path is defined as magical if it starts from any of the cell (a,b) of the maze and ends at the cell (c,d) such that the following conditions are satisfied :-\n- |a - c| + |b - d| = 1\n- All the cells in the maze are traversed exactly once.\n- It is allowed to move only in the four directions - up, down, left and right from the current cell.\n\n-----Input-----\n- First line of the input contains an integer T denoting the number of different types of scenarios.\n- Each of the next T lines will contain two integers N, M denoting the dimensions of the maze.\n\n-----Output-----\nFor each of the T scenarios, output a single line containing \"Yes\" or \"No\" (without quotes) denoting whether the Chef can get out of the maze or not.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 N, M \u2264 1018\n\n-----Subtasks-----\nSubtask #1 : (30 points)\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\nSubtask #2 : (70 points) \n\nOriginal Constraints\n\n-----Example-----\nInput:\n1\n2 2\n\nOutput:\nYes\n\n-----Explanation-----\nExample case 1.\n\nChef can start from (1,1), move down to (2,1), then move right to (2,2) and finally move upwards to reach (1,2). As, he is able to visit all the cells exactly once and sum of absolute differences of corresponding x and y dimension is 1, we can call this path a magical path.\n\n Examples: \nInput: \n['1', '2 2']\nOutput: \n ['Yes']\n",
  "836": "Problem: \nLittle Egor is a huge movie fan. He likes watching different kinds of movies: from drama movies to comedy movies, from teen movies to horror movies. He is planning to visit cinema this weekend, but he's not sure which movie he should watch.\nThere are n movies to watch during this weekend. Each movie can be characterized by two integers Li and Ri, denoting the length and the rating of the corresponding movie. Egor wants to watch exactly one movie with the maximal value of Li \u00d7 Ri. If there are several such movies, he would pick a one with the maximal Ri among them. If there is still a tie, he would pick the one with the minimal index among them.\nYour task is to help Egor to pick a movie to watch during this weekend.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of the test case description contains an integer n.\nThe second line of the test case description contains n integers L1, L2, ...,Ln. The following line contains n integers R1, R2, ..., Rn.\n\n-----Output-----\nFor each test case, output a single integer i denoting the index of the movie that Egor should watch during this weekend. Note that we follow 1-based indexing.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5\n- 1 \u2264 n \u2264 100\n- 1 \u2264 Li, Ri \u2264 100\n\n-----Example-----\nInput:\n2\n2\n1 2\n2 1\n4\n2 1 4 1\n2 4 1 4\n\nOutput:\n1\n2\n\n-----Explanation-----\nIn the first example case, both films have the same value of L \u00d7 R, but the first film has a better rating.\nIn the second example case, the second and the fourth movies are equally good, but the second movie has a smaller index.\n\n Examples: \nInput: \n['2', '2', '1 2', '2 1', '4', '2 1 4 1', '2 4 1 4']\nOutput: \n ['1', '2']\n",
  "837": "Problem: \nFind sum of all the numbers that are multiples of 10 and are less than or equal to a given number \"N\". (quotes for clarity and be careful of integer overflow)\n\n-----Input-----\nInput will start with an integer T the count of test cases, each case will have an integer N.\n\n-----Output-----\nOutput each values, on a newline.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u22641000000000\n\n-----Example-----\nInput:\n1\n10\n\nOutput:\n10\n\n-----Explanation-----\nExample case 1. Only integer that is multiple 10 that is less than or equal to 10 is 10\n\n Examples: \nInput: \n['1', '10']\nOutput: \n ['10']\n",
  "838": "Problem: \nChef and his girlfriend are going to have a promenade. They are walking along the straight road which consists of segments placed one by one. Before walking Chef and his girlfriend stay at the beginning of the first segment, they want to achieve the end of the last segment. \nThere are few problems: \n\n-  At the beginning Chef should choose constant integer - the velocity of mooving. It can't be changed inside one segment. \n-  The velocity should be decreased by at least 1 after achieving the end of some segment. \n-  There is exactly one shop on each segment. Each shop has an attractiveness. If it's attractiveness is W and Chef and his girlfriend move with velocity V then if V < W girlfriend will run away into the shop and the promenade will become ruined. \n\nChef doesn't want to lose her girl in such a way, but he is an old one, so you should find the minimal possible velocity at the first segment to satisfy all conditions.\n\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N denoting the number of segments. The second line contains N space-separated integers W1, W2, ..., WN denoting the attractiveness of shops. \n\n-----Output-----\n- For each test case, output a single line containing the minimal possible velocity at the beginning.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 10^5\n- 1 \u2264 Wi \u2264 10^6\n\n-----Example-----\nInput:\n\n2\n5\n6 5 4 3 2\n5\n3 4 3 1 1\n\nOutput:\n\n6\n5\n\n-----Explanation-----\nExample case 1. \nIf we choose velocity 6, on the first step we have 6 >= 6 everything is OK, then we should decrease the velocity to 5 and on the 2nd segment we'll receive 5 >= 5, again OK, and so on. \nExample case 2. \nIf we choose velocity 4, the promanade will be ruined on the 2nd step (we sould decrease our velocity, so the maximal possible will be 3 which is less than 4).\n\n Examples: \nInput: \n['2', '5', '6 5 4 3 2', '5', '3 4 3 1 1']\nOutput: \n ['6', '5']\n",
  "839": "Problem: \nDhiraj loves Chocolates.He loves chocolates so much that he can eat up to $1000$ chocolates a day. But his mom is fed up by this habit of him and decides to take things in her hand.\nIts diwali Season and Dhiraj has got a lot of boxes of chocolates and Dhiraj's mom is afraid that dhiraj might eat all boxes of chocolates.\nSo she told Dhiraj that he can eat only exactly $k$ number of chocolates and dhiraj has to finish all the chocolates in box selected by him and then move on to next box of chocolate.Now Dhiraj is confused that whether he will be able to eat $k$ number of chocolates or not. Since dhiraj is weak at maths,he asks for your help to tell him whether he can eat $k$ number of chocolates or not. \nSo given number of chocolates  are $k$ which dhiraj has to eat and the boxes of chocolates each containing some number of chocolates, tell whether dhiraj will be able to eat $k$ number of chocolates or not.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- $k$, representing the number of chocolates dhiraj has to eat.\n- the third line contains $N$ representing the no. of boxes of chocolates.\n- fourth line contains list of $a[]$ size $N$ specifying the number of chocolates in each Box.\n\n-----Output:-----\n- For each testcase, output in a single line answer $0$ or $1$.\n- $0$ if dhiraj cant eat $k$ chocolates from given combination and $1$ if he can eat $k$ chocolates from given combination.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 10^7$\n- $1 \\leq  N \\leq 800$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n2\n20\n5\n8 7 2 10 5\n11\n4\n6 8 2 10\n\n-----Sample Output:-----\n1\n0\n\n Examples: \nInput: \n['2', '20', '5', '8 7 2 10 5', '11', '4', '6 8 2 10']\nOutput: \n ['1', '0']\n",
  "840": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K(odd) to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq K \\leq 50$\n\n-----Sample Input:-----\n4\n1\n3\n5\n7\n\n-----Sample Output:-----\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '3', '5', '7']\nOutput: \n ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']\n",
  "841": "Problem: \nThe Petrozavodsk camp takes place in about one month. Jafar wants to participate in the camp, but guess what? His coach is Yalalovichik.\nYalalovichik is a legendary coach, famous in the history of competitive programming. However, he is only willing to send to the camp students who solve really hard problems on Timus. The deadline that Yalalovichik set before has passed and he refuses to send Jafar to the camp.\nJafar decided to make Yalalovichik happy in hopes of changing his decision, so he invented a new sequence of numbers and named them Yalalovichik numbers. Jafar is writing a research paper about their properties and wants to publish it in the Science Eagle yearly journal.\nA Yalalovichik number is created in the following way:\n- Consider an integer $N$ in decimal notation; let's call it the base of the Yalalovichik number $Y_N$. $N$ may not contain the digit $0$.\n- Treat $N$ as a decimal string. Compute all left shifts of this string $N_0, N_1, \\ldots, N_{|N|-1}$ ($|N|$ denotes the number of digits of $N$); specifically, $N_k$ denotes the string formed by moving the first $k$ digits of $N$ to the end in the same order.\n- Concatenate the strings $N_0, N_1, \\ldots, N_{|N|-1}$. The resulting string is the decimal notation of $Y_N$.\nFor example, if $N = 123$, the left shifts are $123, 231, 312$ and thus $Y_N = 123231312$.\nYou are given the base $N$. Calculate the value of $Y_N$ modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single decimal integer $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the value of the Yalalovichik number $Y_N$ modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 200$\n- $|N| \\le 10^5$\n- $N$ does not contain the digit $0$\n- the sum of $|N|$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n1\n123\n\n-----Example Output-----\n123231312\n\n Examples: \nInput: \n['1', '123', '']\nOutput: \n ['123231312']\n",
  "842": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n5\n3\n4\n\n-----Sample Output:-----\n1   1\n2 2\n3\n4 4\n5   5\n1 1\n2\n3 3\n1  1\n22\n33\n4  4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['3', '5', '3', '4']\nOutput: \n ['1   1', '2 2', '3', '4 4', '5   5', '1 1', '2', '3 3', '1  1', '22', '33', '4  4']\n",
  "843": "Problem: \nYou are given N integer sequences A1, A2, ..., AN. Each of these sequences contains N elements. You should pick N elements, one from each sequence; let's denote the element picked from sequence Ai by Ei. For each i (2 \u2264 i \u2264 N), Ei should be strictly greater than Ei-1.\nCompute the maximum possible value of E1 + E2 + ... + EN. If it's impossible to pick the elements E1, E2, ..., EN, print -1 instead.\n\n-----Input-----\n\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N.\n- N lines follow. For each valid i, the i-th of these lines contains N space-separated integers Ai1, Ai2, ..., AiN denoting the elements of the sequence Ai.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum sum of picked elements.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 700\n- 1 \u2264 sum of N in all test-cases \u2264 3700\n- 1 \u2264 Aij \u2264 109 for each valid i, j\n\n-----Subtasks-----\nSubtask #1 (18 points): 1 \u2264 Aij \u2264 N for each valid i, j\nSubtask #2 (82 points): original constraints\n\n-----Example-----\nInput:\n\n1\n3\n1 2 3\n4 5 6\n7 8 9\n\nOutput:\n\n18\n\n-----Explanation-----\nExample case 1: To maximise the score, pick 3 from the first row, 6 from the second row and 9 from the third row. The resulting sum is E1+E2+E3 = 3+6+9 = 18.\n\n Examples: \nInput: \n['1', '3', '1 2 3', '4 5 6', '7 8 9']\nOutput: \n ['18']\n",
  "844": "Problem: \nLittle kids, Jack and Evan like playing their favorite game Glass-and-Stone. Today they want to play something new and came across Twitter on their father's laptop.\n\nThey saw it for the first time but were already getting bored to see a bunch of sentences having at most 140 characters each. The only thing they liked to play with it is, closing and opening tweets.\n\nThere are N tweets on the page and each tweet can be opened by clicking on it, to see some statistics related to that tweet. Initially all the tweets are closed. Clicking on an open tweet closes it and clicking on a closed tweet opens it. There is also a button to close all the open tweets. Given a sequence of K clicks by Jack, Evan has to guess the total number of open tweets just after each click. Please help Evan in this game.\n\n-----Input-----\nFirst line contains two integers N K, the number of tweets (numbered 1 to N) and the number of clicks respectively (1 \u2264 N, K \u2264 1000). Each of the following K lines has one of the following.\n\n- CLICK X , where X is the tweet number (1 \u2264 X \u2264 N)\n- CLOSEALL\n\n-----Output-----\nOutput K lines, where the ith line should contain the number of open tweets just after the ith click.\n\n-----Example-----\nInput:\n3 6\nCLICK 1\nCLICK 2\nCLICK 3\nCLICK 2\nCLOSEALL\nCLICK 1\n\nOutput:\n1\n2\n3\n2\n0\n1\n\nExplanation:\n\nLet open[x] = 1 if the xth tweet is open and 0 if its closed.\n\nInitially open[1..3] = { 0 , 0 , 0 }. Here is the state of open[1..3] after each click and corresponding count of open tweets.\n\nCLICK 1 : { 1, 0, 0 }, open count = 1\n\nCLICK 2 : { 1, 1, 0 }, open count = 2\n\nCLICK 3 : { 1, 1, 1 }, open count = 3\n\nCLICK 2 : { 1, 0, 1 }, open count = 2\n\nCLOSEALL : { 0, 0, 0 }, open count = 0\n\nCLICK 1 : { 1, 0, 0 }, open count = 1\n\n Examples: \nInput: \n['3 6', 'CLICK 1', 'CLICK 2', 'CLICK 3', 'CLICK 2', 'CLOSEALL', 'CLICK 1']\nOutput: \n ['1', '2', '3', '2', '0', '1']\n",
  "845": "Problem: \nGive me Biscuit\n\nSunny wants to make slices of biscuit of size c * d into identical pieces.\n\nbut each piece is a square having maximum possible side length with no left over piece of biscuit.\n\nInput Format\n\nThe first line contains an integer N.\n\nN lines follow. Each line contains two space separated integers c and d.\n\nwhich denote length and breadth of the biscuit.\n\nConstraints\n\n1 <= N <= 1000\n\n1 <= c,d <= 1000\nOutput Format\n\nN lines, each containing an integer that denotes the number of squares of maximum size, when the biscuit is cut as per the given condition.\n\nSample Input \n\n2\n\n2 2\n\n6 9\n\nSample Output \n\n1\n\n6\n\nExplanation \n\t\n\nThe 1st testcase has a biscuit whose original dimensions are 2 X 2, the biscuit is uncut and is a square.\n\nHence the answer is 1.\n\nThe 2nd testcase has a biscuit of size 6 X 9 . We can cut it into 54 squares of size 1 X 1 , 6 of size 3 X 3 . For other sizes we will have leftovers.\n\nHence, the number of squares of maximum size that can be cut is 6.\n\n Examples: \nInput: \n['2', '2 2', '6 9']\nOutput: \n ['1', '6']\n",
  "846": "Problem: \n-----Problem Statement-----\nHarry Potter has one biscuit and zero rupee in his pocket. He will perform the following operations exactly $K$ times in total, in the order he likes:\n- Hit his pocket, which magically increases the number of biscuits by one.\n- Exchange $A$ biscuits to $1$ rupee.\n- Exchange $1$ rupee to $B$ biscuits.\nFind the maximum possible number of biscuits in Harry's pocket after $K$ operations.\n\n-----Input-----\nInput is given in the following format:\nK A B\n\n-----Output-----\nPrint the maximum possible number of biscuits in Harry's pocket after $K$operations.\n\n-----Constraints-----\n- $1 \\leq K, A, B \\leq 10^9$\n- $K$, $A$ and  are integers.\n\n-----Sample Input-----\n4 2 6\n\n-----Sample Output-----\n7\n\n-----EXPLANATION-----\nThe number of biscuits in Harry's pocket after $K$ operations is maximized as follows:\n- Hit his pocket. Now he has $2$ biscuits and $0$ rupee.\n- Exchange $2$ biscuits to $1$ rupee in his pocket .Now he has $0$ biscuits and $1$ rupee.\n- Hit his pocket. Now he has $1$ biscuits and $1$ rupee.\n- Exchange $1$ rupee to $6$ biscuits. his pocket. Now he has $7$ biscuits and $0$ rupee.\n\n Examples: \nInput: \n['4 2 6']\nOutput: \n ['7']\n",
  "848": "Problem: \nCoach Moony wants the best team to represent their college in ICPC. He has $N$ students standing in a circle with certain rating $X_i$ on a competitive coding platform. It is an established fact that any coder with more rating on the platform is a better coder.      \nMoony  wants to send his best $3$ coders based upon their rating. But all coders only want to have their friends in their team and every coder is friends with four other coders, adjacent two on left side in the circle, and adjacent two on right. So Moony comes up with a solution that team with maximum cumulative rating of all three members in a team shall be representing their college.\nYou need to give the cumulative score of the team that will be representing the college.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. \n- First line of each test case contains a single integer $N$.\n- Second  line of each test case takes $N$ integers, denoting rating of $ith$ coder.\n\n-----Output:-----\nFor each testcase, output a single integer denoting cumulative rating  of the team.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $7 \\leq N \\leq 10^5$ \n- $0 \\leq X_i \\leq 10^9$\n\n-----Sample Input:-----\n1\n\n7\n\n10 40 30 30 20 0 0  \n\n-----Sample Output:-----\n100\n\n Examples: \nInput: \n['1', '7', '10 40 30 30 20 0 0']\nOutput: \n ['100']\n",
  "849": "Problem: \nWe all know how great ABD aka AB-DE-VILLIERS is. However his team mates were jealous of him and posed a problem for him to solve.The problem description is as follows :\n\nGiven an array of integers,find the length of the largest subarray(contiguous) of the given array with the maximum possible GCD (Greatest Common Divisor).\n\nFor info on GCD ,see this link: https://en.wikipedia.org/wiki/Greatest_common_divisor\n\nGCD of the subarray is defined as the GCD of all the elements of the subarray.\nAs ABD is not aware of competitive programming he asks your help. Help him!\n\n-----Input-----\nFirst line will contain integer N denoting the size of array.\n\nSecond line will contain N integers denoting array elements.\n\n-----Output-----\nThe answer as specified in the problem statement .\n\n-----Constraints-----\n1 <= N <= 1000000\n\n1 <= array[i] <=100000000000\n\n-----Example-----\nInput:\n4\n2 4 8 3\n\nOutput:\n1\n\nExplanation\nGCD of all possible subarrays of the given array are : 2 , 2 , 2 , 1 , 4 , 4, 1 , 8 , 1 , 3\n\nLargest GCD possible : 8\n\nLength of the largest subarray with GCD as 8 is 1\n\nHence answer is 1 .\n\n Examples: \nInput: \n['4', '2 4 8 3']\nOutput: \n ['1']\n",
  "851": "Problem: \nMr. X has come up with a new string compression algorithm. Consider a string of length N which contains up to K distinct characters. The compression algorithm works as follows: Replace each maximal contiguous substring containing only one distinct character (repeated an arbitrary number of times) and replace it by 2 values: the character and the length of the substring.\nFor example, the string \"aabbaaa\" will be compressed to \"a, 2, b, 2, a, 3\". Thus the length of the compressed string is 6.\n\nSince Mr. X is living in advanced times, the length of any integer is considered to be 1. For example, if a string is compressed to \"a, 111, b, 13\", then its length after compression is considered to be 4.\n\nTo test his algorithm, he needs to know the expected length of the compressed string for given N and K if the input string is randomly uniformly chosen from all possibilities. He wants to run this experiment multiple times for different N, K and needs your help.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of queries. The description of T test cases follows.\nThe first and only line of each test case contains two integers N and K denoting the number of letters in the input string and the maximum number of distinct characters that can be present in the string.\n\n-----Output-----\n\nFor each test case, output a single line containing the expected length of the compressed string. \nYour answer will be considered correct if the absolute error is less than 10-2\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 N, K \u2264 109\n\n-----Example-----\nInput:\n2\n3 1\n3 2\nOutput:\n2.0\n4.0\n\n-----Explanation-----Example case 1:\n\nThere is only one string: aaa with compressed string = a, 3. Therefore length = 2\nExample case 2\n\nInput strings:\n\n\"aaa\": \"a, 3\". Length = 2\n\n\"aab\": \"a, 2, b, 1\". Length = 4 \n\n\"aba\": \"a, 1, b, 1, a, 1\". Length = 6\n\n\"abb\": \"a, 1, b, 2\". Length = 4\n\n\"baa\": \"b, 1, a, 2\". Length = 4\n\n\"bab\": \"b, 1, a, 1, b, 1\". Length = 6\n\n\"bba\": \"b, 2, a, 1\". Length = 4\n\n\"bbb\": \"b, 3\". Length = 2\n\nExpected value = (2+4+6+4+4+6+4+2)/8 = 32/8 = 4\n\n Examples: \nInput: \n['2', '3 1', '3 2', '']\nOutput: \n ['2.0', '4.0']\n",
  "852": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n0\n01\n10\n010\n101\n010\n0101\n1010\n0101\n1010\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['0', '01', '10', '010', '101', '010', '0101', '1010', '0101', '1010']\n",
  "853": "Problem: \nThe new Formula 1 season is about to begin and Chef has got the chance to work with the Formula 1 technical team.  \nRecently, the pre-season testing ended and the technical team found out that their timing system for qualifying was a little bit buggy. So, they asked Chef to fix it before the season begins.  \nHis task is to write a program to find the starting lineup of the race by taking the timings of the drivers in qualifying.\n(If you don\u2019t know the rules that make the starting grid in Formula 1, consider that the driver with the least time will start at the front). \nNote: \n- Two or more drivers can have the same name.  \n- Every driver will have a distinct time.  \n\n-----Input:-----\n- The first line of the input consists of a single integer $T$ denoting the number of test cases.  \n- First line of each test case consists of a single integer $N$ denoting the number of drivers to set a time.  \n- The following $2*N$ lines consists of the driver\u2019s name $S$ in one line and its timing details  $X$ (in milliseconds) in the next line.  \n\n-----Output:-----\n- For each test case output the starting lineup of the race i.e., name of each driver in the order they will start the race. Print each name in a new line.  \n\n-----Constraints-----\n- 1 <= $T$ <= 10  \n- 1 <= $N$ <= 105 \n- 1 <= $|S|$ <= 20  \n- 1 <= $X$ <= 109 \n\n-----Subtasks-----\nSubtask #1 (20 points): \n- 1 <= $N$ <= 100  \nSubtask #2 (80 points): \n- Original Constraints  \n\n-----Sample Input:-----\n2\n\n3\n\nHamilton\n\n75000\n\nVettel\n\n76000\n\nBottas\n\n75500\n\n2\n\nLeclerc\n\n666666\n\nVerstappen\n\n666777  \n\n-----Sample Output:-----\nHamilton\n\nBottas\n\nVettel\n\nLeclerc\n\nVerstappen  \n\n-----EXPLANATION:-----\nThe drivers with the least time are ahead in the lineup.\n\n Examples: \nInput: \n['2', '3', 'Hamilton', '75000', 'Vettel', '76000', 'Bottas', '75500', '2', 'Leclerc', '666666', 'Verstappen', '666777']\nOutput: \n ['Hamilton', 'Bottas', 'Vettel', 'Leclerc', 'Verstappen']\n",
  "854": "Problem: \nA beautiful sequence is defined as a sequence that do not have any repeating elements in it.\nYou will be given any random sequence of integers, and you have to tell whether it is a beautiful sequence or not. \n\n-----Input:-----\n- The first line of the input contains a single integer $T$. $T$ denoting the number of test cases. The description of $T$ test cases is as follows.\n- The next line of the input contains a single integer $N$. $N$ denotes the total number of elements in the sequence.\n- The next line of the input contains $N$ space-separated integers $A1, A2, A3...An$ denoting the sequence.\n\n-----Output:-----\n- Print \"prekrasnyy\"(without quotes) if the given sequence is a beautiful sequence, else print \"ne krasivo\"(without quotes)\nNote: each test case output must be printed on new line\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^2$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq A1, A2, A3...An \\leq 10^5$\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n6\n1 2 3 5 1 4\n\n-----Sample Output:-----\nprekrasnyy\nne krasivo\n\n-----Explanation:-----\n- \nAs 1st sequence do not have any elements repeating, hence it is a beautiful sequence\n- \nAs in 2nd sequence the element 1 is repeated twice, hence it is not a beautiful sequence\n\n Examples: \nInput: \n['2', '4', '1 2 3 4', '6', '1 2 3 5 1 4']\nOutput: \n ['prekrasnyy', 'ne krasivo']\n",
  "855": "Problem: \nAccepts a string from the user and print the reverse string as the output without using any built-in function.\n\n-----Input:-----\nEach testcase contains of a single line of input, a string.\n\n-----Output:-----\nFor each testcase, output in a single line answer, the reverse string.\n\n-----Sample Input:-----\n1\nTracy\n\n-----Sample Output:-----\nycarT\n\n Examples: \nInput: \n['1', 'Tracy']\nOutput: \n ['ycarT']\n",
  "856": "Problem: \nYou are given a dataset consisting of $N$ items. Each item is a pair of a word and a boolean denoting whether the given word is a spam word or not.\nWe want to use this dataset for training our latest machine learning model. Thus we want to choose some subset of this dataset as training dataset. We want to make sure that there are no contradictions in our training set, i.e. there shouldn't be a word included in the training set that's marked both as spam and not-spam. For example item {\"fck\", 1}, and item {\"fck, 0\"} can't be present in the training set, because first item says the word \"fck\" is a spam, whereas the second item says it is not, which is a contradiction.\nYour task is to select the maximum number of items in the training set.\nNote that same pair of {word, bool} can appear multiple times in input. The training set can also contain the same pair multiple times.\n\n-----Input-----\n- First line will contain $T$, number of test cases. Then the test cases follow.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains a string $w_i$, followed by a space and an integer(boolean) $s_i$, denoting the $i$-th item.\n\n-----Output-----\nFor each test case, output an integer corresponding to the maximum number of items that can be included in the training set in a single line.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 25,000$\n- $1 \\le |w_i| \\le 5$ for each valid $i$\n- $0 \\le s_i \\le 1$ for each valid $i$\n- $w_1, w_2, \\ldots, w_N$ contain only lowercase English letters\n\n-----Example Input-----\n3\n3\nabc 0\nabc 1\nefg 1\n7\nfck 1\nfck 0\nfck 1\nbody 0\nbody 0\nbody 0\nram 0\n5\nvv 1\nvv 0\nvv 0\nvv 1\nvv 1\n\n-----Example Output-----\n2\n6\n3\n\n-----Explanation-----\nExample case 1: You can include either of the first and the second item, but not both. The third item can also be taken. This way the training set can contain at the very max 2 items.\nExample case 2: You can include all the items except the second item in the training set.\n\n Examples: \nInput: \n['3', '3', 'abc 0', 'abc 1', 'efg 1', '7', 'fck 1', 'fck 0', 'fck 1', 'body 0', 'body 0', 'body 0', 'ram 0', '5', 'vv 1', 'vv 0', 'vv 0', 'vv 1', 'vv 1', '']\nOutput: \n ['2', '6', '3']\n",
  "857": "Problem: \nProblem description.\nDominic Toretto has taken his crew to compete in this years' Race Wars, a crew-on-crew tournament in which each member of one crew competes with a member of the other crew in a quarter mile drag race. Each win counts as one point for the winning crew. Draws and loses are awarded zero points. In the end the crew with more points is declared the winner of that round and can advance while the losing crew is knocked out. One member can compete in only one race per round and all crews have the same number of members.\nDom and his crew have a reputation of being the best and naturally everyone expects them to win this year as well.\nHowever, during the tournament he spots a new crew of racers who are participating for the first time in this event. People expect them to be a dark horse so naturally Dom wants to keep an eye on their performance.\nBeing the experienced racer that he is, Dom has figured out the time in which each racer of the opposing crew completes his quarter mile race.\n\nHe also knows his own crew inside out and can estimate with absolute certainty, the time it would take each of his members to complete the race. Dominic is the reigning champion and thus has an advantage that he can select the order of the matches i.e.: he can select which member of his crew will go up against which member of the opposition. Given this data he wants to figure out the number of races he will win should his crew come face to face with their newest rivals.\n\nUnfortunately he is a racer and not a problem solver so he comes to you for help.\n\nGiven the time each member of the two crews take to complete the race you have to figure out a way to arrange the matches so that Dominic can win maximum points possible for him.\n\n-----Input-----\n\nThe first line of input is the T, the number of test cases.\n\nEach test case starts with a single number N, the number of racers on each crew.\n\nThis is followed by two lines, each having N space separated integers containing the time taken by each member of Dominic's crew and the rival crew respectively.\n\n-----Output-----\nOutput a single integer. The maximum number of points that Dominic can get.\n\n-----Constraints-----\n1<=T<=100\n1<=N<=100\nTime taken by each member will be between 1 and 500\n\n-----Example-----\nInput:\n\n1\n3\n5 4 1\n5 4 1\n\nOutput:\n2\n\n-----Explanation-----\nIf Dom selects Racer 1 of his team to go against Racer 2 of the other team, Racer 2 of his team against Racer 3 of the other team and Racer 3 of his team against Racer 1 of the other team then he ends up with two wins and a loss which gives him 2 points. ...\n\n Examples: \nInput: \n['1', '3', '5 4 1', '5 4 1']\nOutput: \n ['2']\n",
  "858": "Problem: \nFor Diwali, Chef arranges all $K$ laddus in a row in his sweet shop. Whenever a customer comes to buy laddus, chef follows a rule that each customer must buy all laddus on odd position. After the selection of the laddu, a new row is formed, and again out of these only laddus on odd position are selected. This continues until the chef left with the last laddu. Find out the position of that last laddu in the original row.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one integer $K$. \n\n-----Output:-----\nFor each testcase, print the position of that laddu who is left, in the original row.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\n5\n8\n\n-----Sample Output:-----\n1\n4\n8\n\n-----EXPLANATION:-----\nFor 1) Only one laddu which is last so print 1.\nFor 2) Customer 1: [1, 3, 5]\nNew row = [2, 4]\n\nCustomer 2: [2]\n\nLast laddu = 4\n\n Examples: \nInput: \n['3', '1', '5', '8']\nOutput: \n ['1', '4', '8']\n",
  "859": "Problem: \nVoritex a big data scientist collected huge amount of big data having structure of two rows and n columns.\nVoritex is storing all the valid data for manipulations and pressing invalid command when data not satisfying the constraints.\nVoritex likes brute force method and he calls it as BT, he decided to run newly created BT engine for getting good result.\nAt each instance when BT engine is outputting a newly created number Voritex calls it as BT number.\nVoritex is daydreaming and thinking that his engine is extremely optimised and will get an interview call in which he will be explaining the structure of BT engine and which will be staring from 1 and simultaneously performing $i$-th xor operation with $i$ and previously(one step before) obtained BT number.\nBT engine is outputting the $K$-th highest BT number in the first $N$ natural numbers.\nChef : (thinking) I also want to create BT engine\u2026\u2026..\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of T test cases follows.\n- The line of each test case contains a two integers $N$ and $K$.\n\n-----Output:-----\nFor each test case, print a single line containing integer $K$-th highest number else print -$1$ when invalid command pressed.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq N \\leq 100000$\n- $1 \\leq K \\leq N$\n\n-----Sample Input:-----\n2\n4 2\n5 5\n\n-----Sample Output:-----\n2\n0\n\n-----EXPLANATION:-----\nFor first valid constraints generating output as 0 2 1 5 \n1^1 first BT number is 0\n2^0 second BT number is 2\n3^2 third BT number is 1\n4^1 fourth BT number is 5\nHence the answer is 2.\n\n Examples: \nInput: \n['2', '4 2', '5 5']\nOutput: \n ['2', '0']\n",
  "860": "Problem: \nMinion Chef likes to eat bananas a lot. There are N piles of bananas in front of Chef; for each i (1 \u2264 i \u2264 N), the i-th pile contains Ai bananas.\nChef's mother wants her to eat the bananas and be healthy. She has gone to the office right now and will come back in H hours. Chef would like to make sure that she can finish eating all bananas by that time.\nSuppose Chef has an eating speed of K bananas per hour. Each hour, she will choose some pile of bananas. If this pile contains at least K bananas, then she will eat K bananas from it. Otherwise, she will simply eat the whole pile (and won't eat any more bananas during this hour).\nChef likes to eat slowly, but still wants to finish eating all the bananas on time. Therefore, she would like to choose the minimum K such that she is able to eat all the bananas in H hours. Help Chef find that value of K.\n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains two space-separated integers N and H denoting the number of piles and the number of hours after which Chef's mom will come home.\n- The second line contains N space-separated integers A1, A2, ..., AN.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum possible value of K.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- N \u2264 H \u2264 109\n- 1 \u2264 Ai \u2264 109 for each valid i\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- 1 \u2264 N \u2264 100\n- Ai \u2264 103 for each valid i\n\nSubtask #2 (70 points): original constraints\n\n-----Example-----\nInput:\n\n3\n3 3\n1 2 3\n3 4\n1 2 3\n4 5\n4 3 2 7\n\nOutput:\n\n3\n2\n4\n\n-----Explanation-----\nExample case 1: With a speed of K = 3 bananas per hour, Chef can finish eating all the bananas in 3 hours. It's the minimum possible speed with which she can eat all the bananas in 3 hours. With a speed of 2 bananas per hour, she would take at least 4 hours and with a speed of 1 banana per hour, she would take at least 6 hours.\n\n Examples: \nInput: \n['3', '3 3', '1 2 3', '3 4', '1 2 3', '4 5', '4 3 2 7']\nOutput: \n ['3', '2', '4']\n",
  "861": "Problem: \nRecall the definition of the Fibonacci numbers:\n\n\nf1 := 1\n\nf2 := 2\n\nfn := fn-1 + fn-2 (n>=3)\n\nGiven two numbers a and b, calculate how many Fibonacci numbers are in the range [a,b].\n\n\n-----Input-----\n\nThe input contains several test cases. Each test case consists of two non-negative integer numbers a and b. Input is terminated by a=b=0. Otherwise, a<=b<=10^100. The numbers a and b are given with no superfluous leading zeros.\n\n-----Output-----\n\nFor each test case output on a single line the number of Fibonacci numbers fi with a<=fi<=b.\n\n-----Example-----\nInput:\n\n10 100\n1234567890 9876543210\n0 0\n\nOutput:\n\n5\n4\n\n Examples: \nInput: \n['10 100', '1234567890 9876543210', '0 0']\nOutput: \n ['5', '4']\n",
  "862": "Problem: \nAs we all know, Dhoni loves drinking milk. Once he and Sir Jadeja were invited in the inauguration of a Dairy company in Ranchi.\n\nThe company had arranged  n   jars of milk from various breeds of cows , jar number  i  containing  a[i]  litres of milk. Since Dhoni loves driking milk more than Sir Jadeja, so Kohli suggested a plan for them. His plan was that each time Dhoni will choose a jar containing the maximum amount of milk. If this jar has less than  k   litres of milk or if Dhoni has already drunk more than  m  number of times from this jar, then the milk contained in the jar will be drunk by Sir Jadeja. Sir Jadeja will drink all the milk left in that jar. Otherwise Dhoni will drink exactly k  litres of milk from the jar and put it back at its position. Dhoni will do so until he has given all jars to Sir Jadeja.\n\nYou have to calculate how much milk Sir Jadega will get after Dhoni satisfies his hunger modulo 1,000,000,007.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n-  The first line of each test case contains integer N , M, K denoting the number of milk jars, maximum number of time Dhoni will drink from any jar and maximum amount of milk Dhoni will drink at any time respectively. The second line contains N space-separated integers A1, A2, ..., AN denoting the amount of milk in each jar. \n\n-----Output-----\n- For each test case, output a single line containing the amount of milk Sir Jadega will get modulo 1,000,000,007.\n\n-----Constraints-----\n- 1 \u2264 T \u2264  10 \n- 1 \u2264 N \u2264  10^5 \n- 0 \u2264 M \u2264  10^6 \n- 1 \u2264 K \u2264  10^6 \n- 0 \u2264 Ai \u2264  10^9 \n\n-----Example-----\nInput:\n1\n3 3 3\n15 8 10\n\nOutput:\n9\n\n Examples: \nInput: \n['1', '3 3 3', '15 8 10']\nOutput: \n ['9']\n",
  "863": "Problem: \nThe government has invited bids from contractors to run canteens at all railway stations. Contractors will be allowed to bid for the catering contract at more than one station. However, to avoid monopolistic price-fixing, the government has declared that no contractor may bid for a pair of neighbouring stations.\nThe railway network has exactly one route between any pair of stations. Each station is directly connected by a railway line to at most $50$ neighbouring stations.\nTo help contractors plan their bids, the government has provided data on the number of passengers who pass through each station each year. Contractors would like to bid for stations with a higher volume of passenger traffic to increase their turnover.\nFor instance, suppose the railway network is as follows, where the volume of passenger traffic is indicated by the side of each station.\n\nIn this network, the best option for the contractor is to bid for stations $1, 2, 5$ and $6$, for a total passenger volume of $90$.\nYour task is to choose a set of stations that the contractor should bid for so that the total volume of traffic across all the stations in the bid is maximized.\n\n-----Input:-----\nThe first line of the input contains one integer $N$ indicating the number of railways stations in the network. The stations are numbered $1,2,...,N$. This is followed by $N$ lines of input, lines $2, 3,..., N+1$, indicating the volume of traffic at each station. The volume of traffic at station $i, 1 \\leq i \\leq N$, is given by a single integer in line $i+1$. The next $N-1$ lines of input, lines $N+2, N+3, ..., 2N$, describe the railway network. Each of these lines contains two integers, denoting a pair of stations that are neighbours.\n\n-----Output:-----\nThe output should be a single integer, corresponding to the total volume of traffic across the set of stations in the optimal bid made by the contractor.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 100000$. \n- Each railway station has at most $50$ neighbours.\n\n-----Sample Input-----\n6\n10\n20\n25\n40\n30\n30\n4 5\n1 3\n3 4\n2 3\n6 4\n\n-----Sample Output-----\n90\n\n Examples: \nInput: \n['6', '10', '20', '25', '40', '30', '30', '4 5', '1 3', '3 4', '2 3', '6 4']\nOutput: \n ['90']\n",
  "864": "Problem: \nThese days, chef is very much interested in Mathematics. He has started attending Recitations too! His hunger for problems is increasing day by day!\nToday, chef was a given a crumpled maths problem, which he is stuck with . He needs your help to do it\nHere's what his teacher said: \"Find sum of all numbers till N, do not include numbers which are powers of K from K, K2, K3... which are less than or equal to N\"\nEasy, right? Can you solve it?\n\n-----INPUT-----\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test contains two integers N and K, as per the above given problem specification.\n\n-----OUTPUT-----\nFor each test case, output a single line printing the sum of the each test case, in format Case #T: S, where T is the Tth test case running and S is sum of corresponding test case.\n\n-----CONSTRAINTS-----\n\n10 < T < 50\n\n10 < N < 104\n\n0 < K < 100\n\n-----EXAMPLE-----\nInput:\n\n2\n\n10 3\n\n20 2\n\nOutput:\n\nCase #1: 43\n\nCase #2: 180\n\n Examples: \nInput: \n['2', '10 3', '20 2']\nOutput: \n ['Case #1: 43', 'Case #2: 180']\n",
  "865": "Problem: \nGiven N, count how many permutations of [1, 2, 3, ..., N] satisfy the following property.\n\nLet P1, P2, ..., PN denote the permutation. The property we want to satisfy is that there exists an i between 2 and n-1 (inclusive) such that\n\n- Pj > Pj + 1  \u2200    i \u2264 j \u2264 N - 1.\n- Pj > Pj - 1  \u2200    2 \u2264 j \u2264 i.\n\n-----Input-----\nFirst line contains T, the number of test cases. Each test case consists of N in one line.\n\n-----Output-----\nFor each test case, output the answer modulo 109+7.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 109\n\n-----Subtasks-----\n- Subtask #1(40 points): 1 \u2264 N \u2264 1000\n- Subtask #2(60 points): original constraints\n\n-----Example-----\nInput:\n2\n2\n3\n\nOutput:\n0\n2\n\n-----Explanation-----\n\nTest case 1:\n\nNo permutation satisfies.\n\nTest case 2:\n\nPermutations [1, 3, 2] and [2, 3, 1] satisfy the property.\n\n Examples: \nInput: \n['2', '2', '3']\nOutput: \n ['0', '2']\n",
  "866": "Problem: \nThere are n chef's in Chefland. There is a festival in Chefland in which each chef is asked to vote a person as his best friend. Obviously, a person can't vote himself as his best friend.  Note that the best friend relationship is not necessarily bi-directional, i.e. it might be possible that x is best friend of y, but y is not a best friend of x.\n\nDevu was the election commissioner who conducted this voting. Unfortunately, he was sleeping during the voting time. So, he could not see the actual vote of each person, instead after the voting, he counted the number of votes of each person and found that number of votes of i-th person was equal to ci. \n\nNow he is wondering whether this distribution of votes corresponds to some actual voting or some fraudulent voting has happened. If the current distribution of votes does not correspond to any real voting, print -1. Otherwise, print any one of the possible voting which might have lead to the current distribution. If there are more than one possible ways of voting leading to the current distribution, you can print any one of them.\n\n-----Input-----\n- First line of the input contains a single integer T denoting number of test cases.\n- First line of each test case, contains a single integer n.\n- Second line of each test case, contains n space separated integers denoting array c.\n\n-----Output-----\nFor each test case,\n\n- If there is no real voting corresponding to given distribution of votes, print -1 in a single line.\n- Otherwise, print n space separated integers denoting a possible voting leading to current distribution of votes. i-th integer should denote the index of the person (1 based indexing) whom i-th person has voted as his best friend.\n\n-----Constraints and Subtasks-----\n- 1 \u2264 T \u2264 500\n- 1 \u2264 n \u2264 50\n- 0 \u2264 ci \u2264 n\n\n-----Example-----\nInput:\n3\n3\n1 1 1\n3\n3 0 0\n3\n2 2 0\n\nOutput:\n2 3 1\n-1\n-1\n\n-----Explanation-----\nExample 1: In this example, each person has received one vote. One possible example of real voting leading to this distribution is {2, 3, 1}. In this distribution, number of votes of all three persons are equal to 1. Also it is real voting because no person votes himself as his best friend. \n\nYou can also output another possible distribution {3, 1, 2} too.\n\nExample 2: There is no real voting  corresponding to this voting distribution.\n\nExample 3: There is no real voting  corresponding to this voting distribution.\n\n Examples: \nInput: \n['3', '3', '1 1 1', '3', '3 0 0', '3', '2 2 0']\nOutput: \n ['2 3 1', '-1', '-1']\n",
  "867": "Problem: \nFor her next karate demonstration, Ada will break some bricks.\nAda stacked three bricks on top of each other. Initially, their widths (from top to bottom) are W1,W2,W3.\nAda's strength is S. Whenever she hits a stack of bricks, consider the largest k\u22650 such that the sum of widths of the topmost k bricks does not exceed S; the topmost k bricks break and are removed from the stack. Before each hit, Ada may also decide to reverse the current stack of bricks, with no cost.\nFind the minimum number of hits Ada needs in order to break all bricks if she performs the reversals optimally. You are not required to minimise the number of reversals.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains four space-separated integers S, W1, W2 and W3.Output\nFor each test case, print a single line containing one integer \u2015 the minimum required number of hits.Constraints\n- 1\u2264T\u226464\n- 1\u2264S\u22648\n- 1\u2264Wi\u22642 for each valid i\nit is guaranteed that Ada can break all bricksExample Input\n\n3\n\n3 1 2 2\n\n2 1 1 1\n\n3 2 2 1\nExample Output\n\n2\n\n2\n\n2\nExplanation\n\nExample case 1:\n\nAda can reverse the stack and then hit it two times. Before the first hit, the widths of bricks in the stack (from top to bottom) are (2,2,1). After the first hit, the topmost brick breaks and the stack becomes (2,1). The second hit breaks both remaining bricks.\n\nIn this particular case, it is also possible to hit the stack two times without reversing. Before the first hit, it is (1,2,2). The first hit breaks the two bricks at the top (so the stack becomes (2)) and the second hit breaks the last brick.\n\n Examples: \nInput: \n['3', '3 1 2 2', '2 1 1 1', '3 2 2 1']\nOutput: \n ['2', '2', '2']\n",
  "868": "Problem: \n\"It does not matter how slowly you go as long as you do not stop.\" - Confucius\nYou are given an array $A_1, A_2, \\ldots, A_N$ and an integer $K$. For each subarray $S = [A_l, A_{l+1}, \\ldots, A_r]$ ($1 \\le l \\le r \\le N$):\n- Let's define an array $B$ as $S$ concatenated with itself $m$ times, where $m$ is the smallest integer such that $m(r-l+1) \\ge K$.\n- Next, let's sort $B$ and define $X = B_K$, i.e. as a $K$-th smallest element of $B$. Note that $|B| \\ge K$.\n- Then, let's define $F$ as the number of occurrences of $X$ in $S$.\n- The subarray $S$ is beautiful if $F$ occurs in $S$ at least once.\nFind the number of beautiful subarrays of $A$. Two subarrays $A_l, A_{l+1}, \\ldots, A_r$ and $A_p, A_{p+1}, \\ldots, A_q$ are different if $l \\neq p$ or $r \\neq q$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$. \n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer - the number of beautiful subarrays.\n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 2,000$\n- $1 \\le K \\le 10^9$\n- $1 \\le A_i \\le 2000$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le N \\le 200$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n3 3\n1 2 3\n\n-----Example Output-----\n3\n\n-----Explanation-----\nExample case 1: There are six subarrays of $A$: $[1]$, $[2]$, $[3]$, $[1, 2]$, $[2, 3]$, $[1, 2, 3]$. The corresponding arrays $B$ are $[1, 1, 1]$, $[2, 2, 2]$, $[3, 3, 3]$, $[1, 2, 1, 2]$, $[2, 3, 2, 3]$, $[1, 2, 3]$.\nThree of the subarrays are beautiful: $[1]$, $[1, 2]$ and $[1, 2, 3]$. For these subarrays, $X$ is $1$, $2$ and $3$ respectively (for example, for $S = [1, 2]$, $B = [1, 2, 1, 2]$ is sorted to $[1, 1, 2, 2]$ and $X = 2$ is the $3$-rd element). Then, $F = 1$ for each of these subarrays, and each of these subarrays contains $1$.\n\n Examples: \nInput: \n['1', '3 3', '1 2 3']\nOutput: \n ['3']\n",
  "869": "Problem: \nThe entire network is under the inspection and direct control of the Decepticons. They have learned our language through the World Wide Web and can easily understand the messages which are being sent. Sam is trying to send the information to Autobots to locate \u201cALL SPARK\u201d which is the only source of energy that can be used to create universe. He is bit cautious in sending the message. He is sending the messages in a form of special pattern of string that contains important message in form of substrings. But Decepticons have learnt to recognize the Data Mining and string comparison patterns. He is sending a big message in form of a string (say M) and let there are N smaller substrings. Decepticons have to find whether each of these N substrings is a sub-string of M. All strings consist of only alphanumeric characters.\n\n-----Input-----\nInput to the program consists of two line. The first line contains the string M (where size of M should be <=40). The next line contain a string S.\n\n-----Output-----\nOutput should consist of a line with a character 'Y'/'N' indicating whether the string S is a sub-string of String M or not.\n\n-----Example-----\nInput:\ntechtrishna online event\nonlin\nOutput:\nY\n\n Examples: \nInput: \n['techtrishna online event', 'onlin']\nOutput: \n ['Y']\n",
  "872": "Problem: \nAppy and Chef are participating in a contest. There are $N$ problems in this contest; each problem has a unique problem code between $1$ and $N$ inclusive. Appy and Chef decided to split the problems to solve between them \u2015 Appy should solve the problems whose problem codes are divisible by $A$ but not divisible by $B$, and Chef should solve the problems whose problem codes are divisible by $B$ but not divisible by $A$ (they decided to not solve the problems whose codes are divisible by both $A$ and $B$).\nTo win, it is necessary to solve at least $K$ problems. You have to tell Appy whether they are going to win or lose.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains four space-separated integers $N$, $A$, $B$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Win\" if they can solve at least $K$ problems or \"Lose\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 15$\n- $1 \\le K \\le N \\le 10^{18}$\n- $1 \\le A, B \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (15 points):\n- $1 \\le T \\le 15$\n- $1 \\le K \\le N \\le 10^6$\n- $1 \\le A, B \\le 10^3$\nSubtask #2 (85 points): original constraints\n\n-----Example Input-----\n1\n6 2 3 3\n\n-----Example Output-----\nWin\n\n-----Explanation-----\nExample case 1: Appy is solving the problems with codes $2$ and $4$, Chef is solving the problem with code $3$. Nobody is solving problem $6$, since $6$ is divisible by both $2$ and $3$. Therefore, they can solve $3$ problems and win.\n\n Examples: \nInput: \n['1', '6 2 3 3']\nOutput: \n ['Win']\n",
  "874": "Problem: \nZCO is approaching, and you want to be well prepared!  \nThere are $N$ topics to cover and the $i^{th}$ topic takes $H_i$ hours to prepare (where $1 \\le i \\le N$). You have only $M$ days left to prepare, and you want to utilise this time wisely. You know that you can't spend more than $S$ hours in a day preparing, as you get tired after that. You don't want to study more than one topic in a day, and also, don't want to spend more than two days on any topic, as you feel that this is inefficient.  \nGiven these constraints, can you find the maximum number of topics you can prepare, if you choose the topics wisely?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each test case contains three space-separated integers: $N$, $M$ and $S$, denoting the number of topics, the number of days remaining and the number of hours you can study in a day.  \n- The second line of each test case contains $N$ space-separated integers $H_i$, denoting the number of hours needed to prepare for the $i^{th}$ topic.\n\n-----Output:-----\nFor each testcase, output in a single line: the maximum number of topics you can prepare.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq M \\leq 10^5$\n- $1 \\leq S \\leq 16$\n- $1 \\leq H_i \\leq 50$\n\n-----Subtasks-----\n- 30 points : Every topic takes the same number of hours to prepare (i.e. all $H_i$ are equal).\n- 70 points : Original constraints.\n\n-----Sample Input:-----\n2\n5 4 10\n10 24 30 19 40\n5 4 16\n7 16 35 10 15\n\n-----Sample Output:-----\n2\n4\n\n-----Explanation:-----\nTestcase 1:\n\nYou can choose topics $1$ and $4$. Topic $1$ will consume a single day , while topic $4$ will consume two days.  Thus, you'll be able to prepare these two topics within the 4 remaining days. But you can check that you cannot do any better.\nTestcase 2:\n\nYou can choose topics $1$, $2$, $4$, and $5$. Each of them will consume one day each. Thus you'll be able to cover $4$ topics.\n\n Examples: \nInput: \n['2', '5 4 10', '10 24 30 19 40', '5 4 16', '7 16 35 10 15']\nOutput: \n ['2', '4']\n",
  "876": "Problem: \nRachel has some candies and she decided to distribute them among $N$ kids. The ith kid receives $A_i$ candies. The kids are happy iff the difference between the highest and lowest number of candies received is less than $X$.\nFind out if the children are happy or not.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line contains $N$ and $X$. \n- The second line contains $N$ integers $A_1,A_2,...,A_N$. \n\n-----Output:-----\nFor each test case print either \"YES\"(without quotes) if the kids are happy else \"NO\"(without quotes)\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, X \\leq 10^5$\n- $1 \\leq A_i \\leq 10^5$\n\n-----Sample Input:-----\n2\n\n5 6\n\n3 5 6 8 1\n\n3 10\n\n5 2 9\n\n-----Sample Output:-----\nNO\n\nYES\n\n-----EXPLANATION:-----\n- Example 1: Difference between maximum and minimum candies received is 8-1=7. 7 is greater than 6, therefore, the kids are not happy.\n\n Examples: \nInput: \n['2', '5 6', '3 5 6 8 1', '3 10', '5 2 9']\nOutput: \n ['NO', 'YES']\n",
  "877": "Problem: \nA policeman wants to catch a thief. Both the policeman and the thief can only move on a line on integer coordinates between $0$ and $N$ (inclusive).\nInitially, the policeman is at a coordinate $x$ and the thief is at a coordinate $y$. During each second, each of them must move to the left or right (not necessarily both in the same direction) by distance $\\textbf{exactly}$ equal to $K$. No one may go to the left of the coordinate $0$ or to the right of $N$. Both the policeman and the thief move simultaneously and they cannot meet while moving, only at the end of each second.\nWill the policeman be able to catch the thief if they both move optimally? The thief is caught as soon as the policeman and thief meet at the same position at the same time.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains four space-separated integers $x$, $y$, $K$ and $N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if the thief can be caught or \"No\" if the thief cannot be caught (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^9$\n- $1 \\le K \\le N$\n- $0 \\le x, y \\le N$\n- $x \\neq y$\n\n-----Example Input-----\n5\n0 1 1 1\n1 4 1 5\n4 2 1 7\n3 7 2 10\n8 2 3 15\n\n-----Example Output-----\nNo\nNo\nYes\nYes\nYes\n\n-----Explanation-----\nExample case 1: The policeman is at $0$ and the thief is at $1$. After the $1$-st second, the policeman is at $1$ and the thief is at $0$. After the next second, the policeman is again at $0$ and the thief at $1$. They cannot end up at the same coordinate.\n\n Examples: \nInput: \n['5', '0 1 1 1', '1 4 1 5', '4 2 1 7', '3 7 2 10', '8 2 3 15']\nOutput: \n ['No', 'No', 'Yes', 'Yes', 'Yes']\n",
  "878": "Problem: \nThere is a big staircase with $N$ steps (numbered $1$ through $N$) in ChefLand. Let's denote the height of the top of step $i$ by $h_i$. Chef Ada is currently under the staircase at height $0$ and she wants to reach the top of the staircase (the top of the last step). However, she can only jump from height $h_i$ to the top of a step at height $h_f$ if $h_f-h_i \\le K$. To help Ada, we are going to construct some intermediate steps; each of them may be constructed between any two steps, or before the first step, and have any height. What is the minimum number of steps that need to be added to the staircase so that Ada could reach the top?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-seperated integers $h_1, h_2, \\dots, h_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum required number of steps.\n\n-----Constraints-----\n- $1 \\le T \\le 64$\n- $1 \\le N \\le 128$\n- $1 \\le K \\le 1,024$\n- $1 \\le h_i \\le 1,024$ for each valid $i$\n- $h_i < h_{i+1}$ for each valid $i$\n\n-----Example Input-----\n1\n4 3\n2 4 8 16\n\n-----Example Output-----\n3\n\n Examples: \nInput: \n['1', '4 3', '2 4 8 16']\nOutput: \n ['3']\n",
  "879": "Problem: \nThere are $X$ people participating in a quiz competition and their IDs have been numbered from $1$ to $X$ (both inclusive). Beth needs to form a team among these $X$ participants. She has been given an integer $Y$. She can choose participants whose ID numbers are divisible by $Y$. \nNow that the team is formed, Beth wants to know the strength of her team. The strength of a team is the sum of all the last digits of the team members\u2019 ID numbers.\nCan you help Beth in finding the strength of her team?\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. $T$ lines follow \n- The first line of each test case contains $X$ and $Y$. \n\n-----Output:-----\n- For each test case print the strength of Beth's team\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq X,Y \\leq 10^{20}$\n\n-----Sample Input:-----\n2\n10 3\n\n15 5\n\n-----Sample Output:-----\n18 \n\n10\n\n-----EXPLANATION:-----\n- Example case 1: ID numbers divisible by 3 are 3,6,9 and the sum of the last digits are 3+6+9=18\n\n Examples: \nInput: \n['2', '10 3', '15 5']\nOutput: \n ['18', '10']\n",
  "880": "Problem: \nTracy loves Donuts. She purchased a lots of Donuts for her birthday party. She learnt to calculate the area of the circle a few days back and she is fascinated to know the area of the donuts as well !! Help her finding the area of the Donuts\u2026..\n\n-----Input:-----\n- First line will contain, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, where in you have to provide the RADIUS of the Donuts. \n\n-----Output:-----\nFor each testcase, output in a single line answer is the AREA of the Donut.\n\n-----Constraints-----\n1 <= Radius <= 20.\n\n-----Sample Input:-----\n2\n5 \n12\n\n-----Sample Output:-----\n78.5\n\n452.16\n\n Examples: \nInput: \n['2', '5', '12']\nOutput: \n ['78.5', '452.16']\n",
  "881": "Problem: \nGiven an array $A_1, A_2, ..., A_N$, count the number of subarrays of array $A$ which are non-decreasing.\n\nA subarray $A[i, j]$, where $1 \u2264 i \u2264 j \u2264 N$ is a sequence of integers $A_i, A_i+1, ..., A_j$.\nA subarray $A[i, j]$ is non-decreasing if $A_i \u2264 A_i+1 \u2264 A_i+2 \u2264 ... \u2264 A_j$. You have to count the total number of such subarrays.\n\n-----Input-----\n- \nThe first line of input contains an integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- \nThe first line of each test case contains a single integer $N$ denoting the size of array.\n- \nThe second line contains $N$ space-separated integers $A_1$, $A_2$, \u2026, $A_N$ denoting the elements of the array.\n\n-----Output-----\nFor each test case, output in a single line the required answer.\n\n-----Constraints-----\n- $1 \u2264 T \u2264 5$\n- $1 \u2264 N \u2264 10^5$\n- $1 \u2264 A_i \u2264 10^9$\n\n-----Subtasks-----\n- Subtask 1 (20 points) : $1 \u2264 N \u2264 100$\n- Subtask 2 (30 points) : $1 \u2264 N \u2264 1000$\n- Subtask 3 (50 points) : Original constraints\n\n-----Sample Input:-----\n2\n4\n1 4 2 3\n1\n5\n\n-----Sample Output:-----\n6\n1\n\n-----Explanation-----\nExample case 1.\n\nAll valid subarrays are $A[1, 1], A[1, 2], A[2, 2], A[3, 3], A[3, 4], A[4, 4]$.\n\nNote that singleton subarrays are identically non-decreasing.\nExample case 2.\n\nOnly single subarray $A[1, 1]$ is non-decreasing.\n\n Examples: \nInput: \n['2', '4', '1 4 2 3', '1', '5']\nOutput: \n ['6', '1']\n",
  "882": "Problem: \nAs we all know, Chef is cooking string for long days, his new discovery on string is the longest common pattern length. The longest common pattern length between two strings is the maximum number of characters that both strings have in common. Characters are case sensitive, that is, lower case and upper case characters are considered as different. Note that characters can repeat in a string and a character might have one or more occurrence in common between two strings. For example, if Chef has two strings A = \"Codechef\" and B = \"elfedcc\", then the longest common pattern length of A and B is 5 (common characters are c, d, e, e, f).\nChef wants to test you with the problem described above. He will give you two strings of Latin alphabets and digits, return him the longest common pattern length.\n\n-----Input-----\nThe first line of the input contains an integer T, denoting the number of test cases. Then the description of T test cases follows.\nThe first line of each test case contains a string A. The next line contains another character string B.\n\n-----Output-----\nFor each test case, output a single line containing a single integer, the longest common pattern length between A and B.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 |A|, |B| \u2264 10000 (104), where |S| denotes the length of the string S\n- Both of A and B can contain only alphabet characters (both lower and upper case) and digits\n\n-----Example-----\nInput:\n4\nabcd\nxyz\nabcd\nbcda\naabc\nacaa\nCodechef\nelfedcc\n\nOutput:\n0\n4\n3\n5\n\n-----Explanation-----\nExample case 1. There is no common character.\nExample case 2. All the characters are same.\nExample case 3. Three characters (a, a and c) are same.\nExample case 4. This sample is mentioned by the statement.\n\n Examples: \nInput: \n['4', 'abcd', 'xyz', 'abcd', 'bcda', 'aabc', 'acaa', 'Codechef', 'elfedcc', '', '']\nOutput: \n ['0', '4', '3', '5']\n",
  "883": "Problem: \nIt's year 2018 and it's Christmas time! Before going for vacations, students of Hogwarts School of Witchcraft and Wizardry had their end semester exams.\n$N$ students attended the semester exam. Once the exam was over, their results were displayed as either \"Pass\" or \"Fail\" behind their magic jacket which they wore. A student cannot see his/her result but can see everyone else's results. Each of $N$ students count the number of passed students they can see.\nGiven the number of \"Pass\" verdicts that each of the $N$ students counted, we have to figure out conclusively, the number of students who failed, or report that there is some inconsistency or that we cannot be sure.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each test case will contain $N$, representing the number of students who attended the exam.\n- Next line contains  $N$ spaced integers representing the number of \"Pass\" counted by each of the $N$ students.\n\n-----Output:-----\n- For each test case, output the answer in a single line. \n- If the counts reported by the students are not consistent with each other or if it's not possible to predict the number of failed students from the given input, then print -1.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq N \\leq 10^{5}$\n- $0 \\leq$ Count given by each Student $\\leq 10^{5}$\n\n-----Sample Input:-----\n1\n4\n3 2 2 2\n\n-----Sample Output:-----\n1\n\n-----EXPLANATION:-----\nThere are 4 students, and they counted the number of passed students as 3,2,2,2. The first student can see that all others have passed, and all other students can see only 2 students who have passed. Hence, the first student must have failed, and others have all passed. Hence, the answer is 1.\n\n Examples: \nInput: \n['1', '4', '3 2 2 2']\nOutput: \n ['1']\n",
  "884": "Problem: \nWrite a program that reads two numbers $X$ and $K$. The program first finds the factors of $X$ and then gives the sum of $K$th power of every factor. The program also finds the factor of $k$ and outputs the sum of $X$ times of every factor. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $X, R$. \n\n-----Output:-----\nFor each testcase, output in a single line the factors of $X$ and the $K$th power of every factor, seperated by a space.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq X, K \\leq 10^9$\n\n-----Sample Input:-----\n1\n8 6\n\n-----Sample Output:-----\n266304 88\n\n-----EXPLANATION:-----\nFactors of x = 8 are 2, 4, and 8. Also, factors of k = 6 are 2, 3, and 6.\n2^6 + 4^6 + 8^6 = 266304 and 2 \u00d7 8 + 3 \u00d7 8 + 6 \u00d7 8 = 88.\n(Where a ^b denotes a raised to the power of b).\n\n Examples: \nInput: \n['1', '8 6']\nOutput: \n ['266304 88']\n",
  "885": "Problem: \nChef solved so many hard questions, now he wants to solve some easy problems for refreshment. Chef asks Cheffina for the new question. Cheffina challenges the chef to print the total number of 0's in the binary representation of N(natural number).\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n1\n2\n\n-----EXPLANATION:-----\nFor 1) Binary representation of 2 is 10. i.e. only one 0 present in it.\nFor 2) Binary representation of 4 is 100, i.e. two 0's present in it.\n\n Examples: \nInput: \n['2', '2', '4']\nOutput: \n ['1', '2']\n",
  "886": "Problem: \nChef is playing a game with his childhood friend. He gave his friend a list of N numbers named $a_1, a_2 ....  a_N$ (Note: All numbers are unique). Adjust the numbers in the following order:\n$(i)$ swap every alternate number with it's succeeding number (If N is odd, do not swap the last number i.e. $a_N$ ).\n$(ii)$ add %3 of every number to itself.\n$(iii)$ swap the ith number and the (N-i-1) th number.\nAfter this, Chef will give a number to his friend and he has to give the nearest greater and smaller number to it.\nIf there is no greater or lesser number, put -1.\nHelp his friend to find the two numbers.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, an integers $N$. \n- Next line contains $N$ integers separated by a space. \n- Next line contains a number to be found, $M$. \n\n-----Output:-----\nFor each test case, output in a single line answer given the immediate smaller and greater number separated by a space.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $3 \\leq N \\leq 10^5$\n- $1 \\leq N_i \\leq 10^9$\n- $1 \\leq M \\leq 10^9$\n\n-----Sample Input:-----\n1\n10\n5 15 1 66 55 32 40 22 34 11\n38\n\n-----Sample Output:-----\n35 41\n\n-----Explaination:-----\nStep 1: 15 5 66 1 32 55 22 40 11 34\nStep 2: 15 7 66 2 34 56 23 41 13 35\nStep 3: 35  13 41 23 56 34 2 66 7 15\n35 is the number lesser than 38 and 41 is the number greater than 38 in the given set of numbers.\n\n Examples: \nInput: \n['1', '10', '5 15 1 66 55 32 40 22 34 11', '38']\nOutput: \n ['35 41']\n",
  "887": "Problem: \nArya and Aryan live in a country called Nadaca. Nadaca consists of $N$ cities numbered $1$ through $N$, which are connected by some bidirectional roads. Each road has a positive (not necessarily integer) length. Arya lives in city $1$ and Aryan lives in city $N$.\nArya claims that for each city $v$, the shortest path from city $1$ to city $v$ has length $a_v$. Aryan does not disagree, but claims that for each city $v$, the shortest path from city $N$ to city $v$ has length $b_v$. You are the wisest person they know, so they asked you to tell them if it is possible for their claims to be true, i.e. if a road network which fully satisfies their claims exists. Help them!\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n- The third line contains $N$ space-separated integers $b_1, b_2, \\ldots, b_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if Arya's and Aryan's claims can be true or \"No\" otherwise.\n\n-----Constraints-----\n- $1 \\le T \\le 10^3$\n- $2 \\le N \\le 10^6$\n- $0 \\le a_i, b_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points): the sum of $N$ over all test cases does not exceed $10^3$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n3\n0 1 1\n1 1 0\n3\n0 1 5\n5 1 0\n\n-----Example Output-----\nYes\nNo\n\n Examples: \nInput: \n['2', '3', '0 1 1', '1 1 0', '3', '0 1 5', '5 1 0']\nOutput: \n ['Yes', 'No']\n",
  "889": "Problem: \nChef is a brilliant university student that does not attend lectures because he believes that they are boring and coding is life! However, his university follows certain rules and regulations, and a student may only take an exam for a course if he has attended at least 75% of lectures for this course.\nSince you are Chef's best friend, you want to help him reach the attendance he needs to take exams. Unfortunately, Chef is still focused on his code and refuses to attend more lectures, so the only option is to have some of his friends mark him as present by proxy. This trick is well-known in the university, but only few have the talent to pull it off.\nIn a certain course, there is exactly one lesson per day over the course of $D$ days (numbered $1$ through $D$). You are given a string $S$ with length $D$ describing the lessons Chef attended \u2014 for each valid $i$, the $i$-th character of this string is either 'A' if Chef was absent on day $i$ or 'P' if Chef was actually present on day $i$.\nFor each day $d$ when Chef is absent, one of Chef's friends can mark him as present by proxy on this day only if he was present (if he was really present, not just marked as present) on at least one of the previous two days, i.e. days $d-1$ and $d-2$, and on at least one of the following two days, i.e. days $d+1$ and $d+2$. However, it is impossible to mark him as present by proxy on the first two days and the last two days.\nFind the minimum number of times Chef has to be marked as present by proxy so that his attendance becomes at least 75% ($0.75$). Chef's attendance is number of days when he was marked as present, either by proxy or by actually being present, divided by $D$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $D$.\n- The second line contains a single string $S$ with length $D$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum number of times Chef needs to be marked as present by proxy, or $-1$ if it is impossible to make Chef achieve 75% attendance.\n\n-----Constraints-----\n- $1 \\le T \\le 200$\n- $1 \\le D \\le 1,000$\n- $S$ contains only characters 'A' and 'P'\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n9\nPAAPPAPPP\n\n-----Example Output-----\n1\n\n-----Explanation-----\nExample case 1: With a proxy on the third day, the attendance string is \"PAPPPAPPP\". Now, Chef's attendance is at least 75%, so the minimum number of times Chef needs to be marked as present by proxy is $1$.\n\n Examples: \nInput: \n['1', '9', 'PAAPPAPPP']\nOutput: \n ['1']\n",
  "890": "Problem: \nSnakeland is a well organised city. The houses of the city are organised in an orderly rectangular fashion with dimensions 2 * n, i.e. there are total two rows and n columns. The house in the i-th row and j-th column is also said to be the house at coordinates (i, j). Some of the houses are occupied by snakes, while the others are empty. You are given this information through an array s of dimension 2 * n, where, if s[i][j] = '*', it denotes that there is a snake in the house at coordinates (i, j), and if s[i][j] = '.', it denotes that the house is empty. \nThese snakes are planning a coup against a mongoose who controls their city from outside. So, they are trying their best to meet with other snakes and spread information about the date of the coup. For spreading this information, they can just hiss from their house and usually their hiss is so loud that it will be heard in all the cells except if there is a soundproof fence built that cuts the voice. Note that the external borders of Snakeland are already built of soundproof material. The mongoose got to know about the plan, and he wants to construct sound proof fences along the borders of the houses so that no two people should be able to communicate with each other. The fence can be either vertical or horizontal.  Each fence can be of any length, but the mongoose wants to minimize the number of fences to be built. Find out the minimum number of fences that the mongoose should build.\n\n-----Input-----\nThe first line of the input contains an integer T denoting number of test cases. The descriptions of the T test cases follow.\nThe first line of each test case contains a single integer, n.\nEach of the next two lines contains n characters denoting the first and the second rows of Snakeland respectively.\n\n-----Output-----\nFor each test case, output a single integer corresponding to the minimum number of fences that the mongoose needs to build.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 n \u2264 105\n\n-----Example-----\nInput\n3\n2\n**\n**\n3\n***\n*..\n3\n*..\n.*.\n\nOutput\n2\n3\n1\n\n-----Explanation-----\nAll the examples are shown in the pictures. The fences built are shown by red colored horizontal or vertical segments. You can see that after putting these borders no snake can talk with any another snake.\n\n Examples: \nInput: \n['3', '2', '**', '**', '3', '***', '*..', '3', '*..', '.*.']\nOutput: \n ['2', '3', '1']\n",
  "891": "Problem: \nAndrii is good in Math, but not in Programming. He is asking you to solve following problem: Given an integer number N and two sets of integer A and B. Let set A contain all numbers from 1 to N and set B contain all numbers from N + 1 to 2N. Multiset C contains all sums a + b such that a belongs to A and b belongs to B. Note that multiset may contain several elements with the same values. For example, if N equals to three, then A = {1, 2, 3}, B = {4, 5, 6} and C = {5, 6, 6, 7, 7, 7, 8, 8, 9}. Andrii has M queries about multiset C. Every query is defined by a single integer q. Andrii wants to know the number of times q is contained in C. For example, number 6 is contained two times, 1 is not contained in C at all. \n\nPlease, help Andrii to answer all the queries.\n\n-----Input-----\n\nThe first line of the input contains two integers N and M. Each of the next M line contains one integer q, the query asked by Andrii.\n\n-----Output-----\nOutput the answer for each query in separate lines as in example.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 109\n- 1 \u2264 M \u2264 105\n- 1 \u2264 q \u2264 3N\n\n-----Example-----\nInput:\n3 5\n6\n2\n9\n7\n5\nOutput:\n2\n0\n1\n3\n1\n\n Examples: \nInput: \n['3 5', '6', '2', '9', '7', '5', '']\nOutput: \n ['2', '0', '1', '3', '1']\n",
  "893": "Problem: \nGiven an array of size N$N$ and two integers K$K$ and S$S$, the special sum of a subarray is defined as follows:\n\n(Sum of all elements of the subarray) * (K$K$ - p$p$ * S$S$)\n\nWhere p$p$ = number of distinct prime factors of \u201cproduct of all elements of the subarray\u201d.\n\nFind the maximum special sum by considering all non-empty subarrays of the given array.\n\n-----Input-----\n- First line contains 3 integers N$N$, K$K$ and S$S$.     \n- Second line contains N$N$ integers, the elements of the array.  \n\n-----Output-----\nOutput a single integer. The maximum special sum considering all non-empty subarrays of the array.\n\n-----Constraints:-----\n- 1\u2264N,K,S\u2264105$ 1 \\leq N, K, S \\leq 10^5 $ \n- 0\u2264K/S\u226420$ 0 \\leq K / S \\leq 20 $ \n- 1<$ 1 < $ Any element of array <105$ < 10^5 $\n\n-----Sample Input-----\n4 10 2\n\n14 2 7 15\n\n-----Sample Output-----\n138\n\n-----Sample Explanation-----\nConsider the subarray {14, 2, 7}\n\nTotal number of distinct prime factors in it is 2 (2 and 7).\n\nTherefore, value of special sum is (14 + 2 + 7) * (10 - 2 * 2) = 138.\n\nThis is the subarray with the maximum special sum.\n\n Examples: \nInput: \n['4 10 2', '14 2 7 15']\nOutput: \n ['138', 'Sample']\n",
  "894": "Problem: \nChef recently developed an affinity for undirected graphs.\nHe likes pairs of graphs that are similar in structure.\nHowever, Chef discovered that when the vertices of a graph are reorganized, it's often the case that the resulting graph,\nalthough still structurally similar to the original, can look completely different.\nChef wants you to help him find similarities in pairs of graphs.\n\nChef only considers pairs of graphs where each graph has the same number of vertices (say N).\nChef then labels each vertex of each graph with an integer between 1 and N (inclusive),\nusing each integer exactly once per graph.\nChef then defines the similarity of the graphs as 2*COMMON/TOTAL, where COMMON is the number of\nedges appearing in both graphs \n(that is, the number of unordered pairs {A, B} such that in both graphs there exists an edge between the vertex labelled A\nand the vertex labelled B), and TOTAL is the total number of edges in both graphs.\n\nChef's measure of similarity depends on how the vertices are labelled.\nChef wants you to help him find a labelling that maximizes the similarity.\nOptimal solutions are not required, but better solutions will earn more points.\n\n-----Input-----\n\nInput will begin with an integer T, the number of test cases.\nEach test case will begin with an integer N, the number of vertices in both graphs.\n2*N lines follow.  The first N lines describe the first graph, and the next N lines the second graph.\nEach graph description consists of N lines of N integers each.\nThe i-th integer on the j-th line will be 1 if there is an edge between vertices i and j, and 0 otherwise.\nThe i-th integer on the j-th line will always be equal to the j-th integer on the i-th line,\nand the i-th integer on the i-th line will always be 0.\n\n-----Output-----\n\nFor each test case, output 2 lines with N integers each.\nEach line must contain a permutation of the integers 1 through N, and indicates how Chef should label the corresponding graph.\n\n-----Scoring-----\n\nYour score for each test case is the similarity of the 2 graphs using the labelling you provide.\nYour overall score is the average of your scores on the individual test cases.\n\n-----Sample Input-----\n2\n3\n0 1 0\n1 0 0\n0 0 0\n0 0 1\n0 0 1\n1 1 0\n4\n0 0 1 0\n0 0 0 0\n1 0 0 1\n0 0 1 0\n0 0 1 1\n0 0 0 0\n1 0 0 0\n1 0 0 0\n\n-----Sample Output-----\n1 2 3\n1 2 3\n1 4 2 3\n2 4 1 3\n\nThis output would score 2*0/3 = 0.0 on the first test case, and 2*2/4 = 1.0 on the second test case, for an overall score of 0.5.\nNote that better scores are possible.\n\n-----Test case generation-----\n\nFor each official test file, T is 5.\nFor each test case, N is randomly chosen between 30 and 75.\nA real number D is randomly chosen between 0.05 and 0.5.\nFor each pair of vertices, an edge is added with probability D.\nThis graph is output as the first graph.\nAn integer C is randomly chosen between 0 and N*(N-1)/2.\nC distinct pairs of vertices are chosen.\nFor each pair, if an edge currently exists between them, the edge is removed with probability (1-D).\nIf no edge exists between them, one is added with probability D.\nThen, a random permutation is applied to the vertices of the graph, and it is output as the second graph.\nYou may safely assume there will be no test cases where TOTAL is 0.\n\n Examples: \nInput: \n['2', '3', '0 1 0', '1 0 0', '0 0 0', '0 0 1', '0 0 1', '1 1 0', '4', '0 0 1 0', '0 0 0 0', '1 0 0 1', '0 0 1 0', '0 0 1 1', '0 0 0 0', '1 0 0 0', '1 0 0 0', '']\nOutput: \n ['1 2 3', '1 2 3', '1 4 2 3', '2 4 1 3']\n",
  "895": "Problem: \nZonal Computing Olympiad 2012, 26 Nov 2011\n\nIt's dinner time in Castle Camelot, and the fearsome Knights of the Round Table are clamouring for dessert. You, the chef, are in a soup.  There are N knights, including King Arthur, each with a different preference for dessert, but you cannot afford to make desserts for all of them.\n\nYou are given the cost of manufacturing each Knight's preferred dessert\u2013since it is a round table, the list starts with the cost of King Arthur's dessert, and goes counter-clockwise.\n\nYou decide to pick the cheapest desserts to make, such that for every pair of adjacent Knights, at least one gets his dessert. This will ensure that the Knights do not protest.<p>A strange feature of the Knights is that they will not complain about not getting dessert unless they get support from both their neighbours.  So, you decide to pick the cheapest desserts to make, such that for every pair of adjacent Knights, at least one gets his dessert.</p>\n\nWhat is the minimum cost of tonight's dinner, given this condition?\n\nFor instance, suppose there are 5 Knights and their desserts cost 1, 2, 1, 2 and 2.  In this case, the minimum cost is 4, which you can achieve by feeding the first, third and fourth (or fifth) Knights.  \n\n-----Input format-----\nThere are 2 lines of input.  The first line contains a single integer N, the number of seats at the table. The next line contains N space separated integers, each being the cost of the dessert of a Knight, listed in counterclockwise order around the table, starting with King Arthur.\n\n-----Output format-----\nThe output should be a single line containing a single integer, the minimum possible cost for you, the chef.\n\n-----Testdata-----\nEach Knight's dessert costs strictly more than 0 and strictly less than 1000.  You may assume that 1 \u2264 N \u2264 106.  In 30% of the test cases, 1 \u2264 N \u2264 103.\n\n- Subtask 1 (30 marks)\n- Subtask 2 (70 marks)\n\n-----Sample Input-----\n5\n1 2 1 2 2\n\n-----Sample Output-----\n4\n\n Examples: \nInput: \n['5', '1 2 1 2 2']\nOutput: \n ['4']\n",
  "896": "Problem: \n-----Problem Statement-----\nChef has a sequence of N segments: [L1, R1], [L2, R2], ..., [LN, RN]. He wants to transform the first segment to the last one (with index N). His plan is to do this big deal with a number of transformations: firstly he will transform\n\nthe first segment to the second one, then to the third one, then to the fourth one, and so on till N-th one.\n\nChef can use operation of a single type: shift one segment border by one unit. So, if he has segment [L, R], he can transform it into one of the following segments: [L + 1, R] (we will denote such operation with string L+), [L, R + 1] (will be denoted as R+), [L - 1, R] (L-), [L, R - 1] (R-). Chef doesn't like empty segments, therefore he cannot use any operation that makes a segment empty (L = R).\n\nChef really wants to transform his segment as fast as possible. Please, help him. Find the sequence with minimal number of operations that transforms his segment. If there are multiple such sequences pick the lexicographically minimal one.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a single integer N denoting the number of segments Chef has. \n\nThe following N lines contain pairs of integers. The i-th line contains integers Li, Ri, denoting i-th Chef's segment.\n\n-----Output-----\nFor each test case print an answer - two lines. The first line should contain the minimal number of operations. The second line should contain the sequence of operations\n\nwithout any whitespaces.\n\n-----Constraints-----\n- 1 \u2264 T, N \u2264 1000.\n- -1000 \u2264 Li < Ri \u2264 1000.\nThe total sum of N values for all test cases doesn't exceed 1000.\n\n-----Example-----\nInput:\n4\n3\n-1 0\n0 1\n3 5\n1\n0 1\n3\n-2 -1\n-2 -1\n-2 0\n4\n4 6\n3 5\n-1 1\n1 2\n\nOutput:\n9\nR+L+R+L+R+L+R+L+R+\n0\n\n1\nR+\n13\nL-R-L-L-L-L-R-R-R-R-L+R+L+\n\n Examples: \nInput: \n['4', '3', '-1 0', '0 1', '3 5', '1', '0 1', '3', '-2 -1', '-2 -1', '-2 0', '4', '4 6', '3 5', '-1 1', '1 2']\nOutput: \n ['9', 'R+L+R+L+R+L+R+L+R+', '0', '1', 'R+', '13', 'L-R-L-L-L-L-R-R-R-R-L+R+L+']\n",
  "898": "Problem: \nNote : This question carries $150$ $points$\nThere is an outcry in Middle Earth, as the greatest war between Orgs of Dark Lord Sauron and Frodo Baggins is about to begin. To end the war, Frodo decides to destroy the ring in the volcano of Mordor. There are many ships that lead Frodo to Mordor, and he is confused about which one he should board.  Given two-ship numbers $M$ and $N$, Frodo has to solve a problem to find the ship which he should board.\nFind the number of pairs (x, y), such that $1<=x<=M$ and $1<=y<=N$, for which $x*y + x+ y = string(x)+string(y)$ is true. \nAlso, calculate the number of distinct x satisfying the given condition.  The number of pairs and the number of distinct x will help select Frodo the boat he should board. Help Frodo defeat Sauron. \n\n-----Input :-----\n- First line contains $T$ as number of test cases \n- Each test case contains two integers $M$ and $N$ \n\n-----Output :-----\n- For each test case, print two integers - the number of such pairs (x,y) and the number of distinct x\n\n-----Constraints :-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264  M, N \u2264 10^9\n\n-----Sample Input :-----\n1\n1 9\n\n-----Sample Output :-----\n1 1\n\n-----Explanation :-----\nFor test case two M=1 and N=9  Pair (1,9) satisfies the above condition 1*9+1+9= \u201c19\u201d and only x=1 satisfies the equation.\n\n Examples: \nInput: \n['1', '1 9']\nOutput: \n ['1 1']\n",
  "899": "Problem: \nChef wants to teach a lesson of sharing to the students.\nThere are $N$ students (numbered from $1$ to $N$ from left to right) who are asked to stand in a row. Initially Chef gave $A$$i$ candies to the $i$$th$ child. In one operation any child can give any number of candies to the child standing to his immediate left (i.e. $i$$th$ child can give any amount of candies to the $(i-1)$$th$ child. In particular 1st child cannot give his candies to anyone).  \nHe asked them to minimize the maximum value of candies a student can possess after performing any number of operations (possibly zero). \nHelp the students finding such maximum value.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- First line of each test case contains a single integer $N$ denoting the number of students.\n- Second line contains $N$ space-separated integers $A$$1$,$A$$2$,$.....$ $A$$N$ denoting the initial amount of candies chef gave to them.\n\n-----Output:-----\n- For each test case, print a single line containing one integer \u2015 maximum value after sharing.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $0$ $\\leq$ $A$$i$ $\\leq$ $10^9$\n- Sum of $N$ over all Test Cases does not exceed $10^5$\n\n-----Sample Input-----\n2 \n5 \n1 2 3 4 5 \n5\n5 4 3 2 1\n\n-----Sample Output-----\n3 \n5  \n\n-----Explanation-----\n- \nFor First Test Case:\nThe $5$$th$ student will give $2$ candies to $4$$th$ student and $4$$th$ will give $3$ candies to $3$$rd$ and $3$$rd$ will give $3$ candies to $2$$nd$ and $2$$nd$ will give $2$ candies to $1$$st$. So finally the number of candies that they will have are \n$[3,3,3,3,3]$ and the value of maximum candies is $3$.\n- \nFor Second Test Case:\nSharing to the left student will not change the maximum value as $1$$st$ cannot share to anyone. So the maximum value will remain $5$.\n\n Examples: \nInput: \n['2', '5', '1 2 3 4 5', '5', '5 4 3 2 1']\nOutput: \n ['3', '5']\n",
  "900": "Problem: \nOn her way to ChefLand, Marichka noticed $10^K$ road signs (numbered $0$ through $10^K - 1$). For each valid $i$, the sign with number $i$ had the integer $i$ written on one side and $10^K-i-1$ written on the other side.\nNow, Marichka is wondering \u2014 how many road signs have exactly two distinct decimal digits written on them (on both sides in total)? Since this number may be large, compute it modulo $10^9+7$.\nFor example, if $K = 3$, the two integers written on the road sign $363$ are $363$ and $636$, and they contain two distinct digits $3$ and $6$, but on the road sign $362$, there are integers $362$ and $637$, which contain four distinct digits \u2014 $2$, $3$, $6$ and $7$. On the road sign $11$, there are integers $11$ and $988$, which contain three distinct digits \u2014 $1$, $9$ and $8$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $K$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of road signs with exactly two digits, modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le K \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le T, K \\le 5$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n1\n\n-----Example Output-----\n10\n\n Examples: \nInput: \n['1', '1', '']\nOutput: \n ['10']\n",
  "901": "Problem: \nSereja have array A' that contain N integers. Now Sereja want to permute elements of the array, he want to use some permutation p, such that A[i] = A'[p[i]], where A - new array. \n\nLets function f(A,i) = S - A[i] - A[i +1] - ... - A[j], where j is the maximum possible index, such that A[i] + A[i + 1] + ... + A[j] <= S, if A[i] > S, f(A, i) = S.\n\nHelp Sereja to find such permutation p, such that (f(A, 1) + f(A, 2) + ... f(A, k))/k will be as low as possible. \n\n-----Input-----\n\nFirst line of input contain integer T - number of testcases. Next lines contain T testcases. First line of each testcase contain three integers N, k, S. Next line contain N integers - array A'.\n\n-----Output-----\n\nFor each testcase output N numbers in one line - permutation p. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 2000\n- 1 \u2264 k \u2264 N\n- 1 \u2264 A'[i] \u2264 10^4\n- 1 \u2264 S \u2264 10^9\n\n-----Example-----\nInput:\n2\n3 2 4\n3 4 1\n4 4 1\n1 1 1 1\n\nOutput:\n2 1 3\n4 3 2 1\n\n\n-----Scoring-----\n\nSuppose Sum will be sum of yours (f(A, 1) + f(A, 2) + ... f(A, k))/k per each testcase.  \nLets B will be the smallest such sum. Your score will be equal to B/Sum. Lower scores will earn more points.\n\nWe have 20 official test files. You must correctly solve all test files to receive OK. During the contest, your overall score is the sum of the scores on the first 4 test files. After the contest, all solutions will be rescored by the sum of the scores on the rest 16 test files. Note, that public part of the tests may not contain some border cases.\n\n Examples: \nInput: \n['2', '3 2 4', '3 4 1', '4 4 1', '1 1 1 1', '', '']\nOutput: \n ['2 1 3', '4 3 2 1']\n",
  "902": "Problem: \nTweedle-Dee and Tweedle-Dum are playing a fierce match of binary Nim. This novel game is played with $N$ stacks, each of them containing only $1$-s and $0$-s.\nJust like in normal Nim, Tweedle-Dee and Tweedle-Dum alternate turns; in their turn, a player must choose one non-empty stack and remove a positive number of elements from the top of this stack. However, Tweedle-Dee may only choose a stack with $0$ at the top (and remove elements from it afterwards), and similarly, Tweedle-Dum may only choose a stack with $1$ at the top. the player that cannot make a move loses\nSuzumo does not want to wait for the end of the game, so given the starting player he asks you to determine the winner. Remember that Tweedle-Dee and Tweedle-Dum are legendary grandmasters of combinatorial games, so both always play optimally.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains an integer $N$, a string $S$ denoting the number of stacks, the player that starts the game, respectively.\n- Each of the following $N$ lines contains a single binary string $B$ representing a stack; the first character of $B$ corresponds to the top element of the stack and the last character to the bottom element.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Dee\" if Tweedle-Dee wins the match or \"Dum\" if Tweedle-Dum wins.\n\n-----Constraints-----\n- $1 \\le T \\le 500$\n- $1 \\le N \\le 50$\n- $1 \\le |B| \\le 50$\n- each character in $B$ is either '1' or '0'\n- $S$ is either \"Dee\" or \"Dum\"\n\n-----Example Input-----\n2\n2 Dee\n101\n010\n2 Dum\n101\n010\n\n-----Example Output-----\nDum\nDee\n\n Examples: \nInput: \n['2', '2 Dee', '101', '010', '2 Dum', '101', '010']\nOutput: \n ['Dum', 'Dee']\n",
  "903": "Problem: \nKabir likes Tara's smile and wants to look at her smile. They are sitting in the class and you are friends with Kabir. You have to place a mirror (point size)  in the front wall of the class so that Kabir can have a glimpse of Tara's smile.\nConsider the front wall as x-axis . You are given the  coordinates of position of Kabir (x1,y1)$(x1,y1)$ and Tara  (x2,y2)$(x2,y2)$. Find the position where the mirror should be placed. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains two integers x1,y1$x1, y1$.\n- Second line of each testcase contains two integers x2,y2$x2, y2$. \n\n-----Output:-----\nFor each testcase, print the x-coordinate of the mirror. Absolute error of 10\u22122$10^{\u22122}$ is allowed.\n\n-----Constraints:-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264x1,y1,x2,y2\u2264105$1 \\leq x1,y1,x2,y2 \\leq 10^5 $\n\n-----Sample Input:-----\n1\n1 1\n\n4 4\n\n-----Sample Output:-----\n1.60\n\n Examples: \nInput: \n['1', '1 1', '4 4']\nOutput: \n ['1.60']\n",
  "904": "Problem: \nThe most dangerous cyborg Jenish is finally entrapped on a narrow bridge over a valley. The bridge is $N$ meters long. For convenience, position $i$ represents a portion of bridge between whose left border is at distance $i-1$ meters from left end and right border is at distance $i$ meters from left end. \nThere are $N$ batteries placed at positions $1,2...N$. The $i^{th}$ one has energy $a[i]$.\nThere are two tanks of strength $X$ at positions $0$ and $N+1$. Initially Jenish has $0$ energy.\nFrom now at any second $t$ starting from $1$, \nfirst, Jenish can select any battery placed at position $i$ such that $(t \\leq i \\leq N-t+1)$ and add $a[i]$ to his energy (every battery can be used atmost once).\nThen both the tanks move one meter towards each other. If there are still any batteries present at positions where the tanks are heading, the battery gets destroyed. \nAt any moment if Jenish's total energy is greater than or equal to $X$, he destroys both the tanks and he escapes the cops. If by the end of $\\lfloor \\frac {(n+1)}{2}\\rfloor^{th}$ second, he can't destroy the tanks, he himself gets destroyed. Find out if he can escape.\n\n-----Input:-----\n- The first line consists of a single integer $T$, the number of test cases.\n- The first line of each test case contains two space separated integers which represents $N$ and $X$ for that test case respectively.\n- The second line of each test case contains $N$ space separated integers, $i^{th}$ of which represents $a[i]$.\n\n-----Output:-----\nFor each test case, print in a single line, $YES$ if Jenish can escape or $NO$ if he gets destroyed.\n\n-----Constraints:-----\n- $1 \\leq  X \\leq 10^9$\n- $0 \\leq a[i] \\leq 10^6$\n- $ 1 \\leq N \\leq 10^5$\n- $\\Sigma$ $N$ over all the test cases does not exceed $10^5$\n\n-----Sample Input:-----\n3\n4 8\n5 1 4 2\n3 4\n3 1 2\n2 7\n5 5\n\n-----Sample Output:-----\nYES\nYES\nNO\n\n-----Explanation-----\nFor test $1$, in the 1st second, first Jenish will select battery at index $1$ and then the tanks from either side will move one meter closer, thus destroying the battery at index $4$.Then, in the next second, Jenish will select battery at index $3$.Then,tanks will move one meter closer again to destroy the remaining battery at index $2$.But now, Jenish has a total energy of $9$ units which is more than enough to destroy the tanks.\nFor test $2$, Jenish can use batteries at index $1$ and $2$ to get a total energy of $4$ units.\nFor test $3$, Jenish can use batteries at index $1$ or $2$ and get a maximum of $5$ units of energy which is less than required.\n\n Examples: \nInput: \n['3', '4 8', '5 1 4 2', '3 4', '3 1 2', '2 7', '5 5']\nOutput: \n ['YES', 'YES', 'NO']\n",
  "905": "Problem: \nOnce upon a time, a king and a few of his soldiers were  caught by an enemy king in a war. \n\nHe puts them in a circle. The first man in the circle has to kill the second man, the third man has to kill the fourth, fifth man to kill the sixth and so on. When the circle is completed, the remaining people have to form a circle and the process has to repeat. The last man standing will be set free.\n\nIf the king has to be set free, which position must he take? For any given N number of people, write a program to find the position that the king has to take.\n\n-----Input-----\nAny positive integer in the range 1 to 10000.\n\n-----Output-----\nA positive integer indicating safest position\n\n-----Example-----\nInput:\n9\n\nOutput:\n3\n\n Examples: \nInput: \n['9']\nOutput: \n ['3']\n",
  "907": "Problem: \nThe annual snake festival is upon us, and all the snakes of the kingdom have gathered to participate in the procession. Chef has been tasked with reporting on the procession, and for this he decides to first keep track of all the snakes. When he sees a snake first, it'll be its Head, and hence he will mark a 'H'. The snakes are long, and when he sees the snake finally slither away, he'll mark a 'T' to denote its tail. In the time in between, when the snake is moving past him, or the time between one snake and the next snake, he marks with '.'s.\nBecause the snakes come in a procession, and one by one, a valid report would be something like \"..H..T...HTH....T.\", or \"...\", or \"HT\", whereas \"T...H..H.T\", \"H..T..H\", \"H..H..T..T\" would be invalid reports (See explanations at the bottom).\nFormally, a snake is represented by a 'H' followed by some (possibly zero) '.'s, and then a 'T'. A valid report is one such that it begins with a (possibly zero length) string of '.'s, and then some (possibly zero) snakes between which there can be some '.'s, and then finally ends with some (possibly zero) '.'s.\n\nChef had binged on the festival food and had been very drowsy. So his report might be invalid. You need to help him find out if his report is valid or not.\n\n-----Input-----\n- The first line contains a single integer, R, which denotes the number of reports to be checked. The description of each report follows after this.\n- The first line of each report contains a single integer, L, the length of that report.\n- The second line of each report contains a string of length L. The string contains only the characters '.', 'H', and 'T'.\n\n-----Output-----\n- For each report, output the string \"Valid\" or \"Invalid\" in a new line, depending on whether it was a valid report or not.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 500\n- 1 \u2264 length of each report \u2264 500\n\n-----Example-----\nInput:\n6\n18\n..H..T...HTH....T.\n3\n...\n10\nH..H..T..T\n2\nHT\n11\n.T...H..H.T\n7\nH..T..H\n\nOutput:\nValid\nValid\nInvalid\nValid\nInvalid\nInvalid\n\n-----Explanation-----\n\"H..H..T..T\" is invalid because the second snake starts before the first snake ends, which is not allowed.\n\".T...H..H.T\" is invalid because it has a 'T' before a 'H'. A tail can come only after its head.\n\"H..T..H\" is invalid because the last 'H' does not have a corresponding 'T'.\n\n Examples: \nInput: \n['6', '18', '..H..T...HTH....T.', '3', '...', '10', 'H..H..T..T', '2', 'HT', '11', '.T...H..H.T', '7', 'H..T..H']\nOutput: \n ['Valid', 'Valid', 'Invalid', 'Valid', 'Invalid', 'Invalid']\n",
  "908": "Problem: \nChef belongs to a very rich family which owns many gold mines. Today, he brought N gold coins and decided to form a triangle using these coins. Isn't it strange?\nChef has a unusual way of forming a triangle using gold coins, which is described as follows:\n- He puts 1 coin in the 1st row.\n- then puts 2 coins in the 2nd row.\n- then puts 3 coins in the 3rd row.\n-  and so on as shown in the given figure.\nChef is interested in forming a triangle with maximum possible height using at most N coins. Can you tell him the maximum possible height of the triangle?\n\n-----Input-----\nThe first line of input contains a single integer T denoting the number of test cases. \nThe first and the only line of each test case contains an integer N denoting the number of gold coins Chef has.\n\n-----Output-----\nFor each test case, output a single line containing an integer corresponding to the maximum possible height of the triangle that Chef can get.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 109\n\n-----Subtasks-----\n- Subtask 1 (48 points) : 1 \u2264 N \u2264 105\n- Subtask 2 (52 points) : 1 \u2264 N \u2264 109\n\n-----Example-----\nInput3\n3\n5\n7\n\nOutput2\n2\n3\n\n-----Explanation-----\n- Test 1: Chef can't form a triangle with height > 2 as it requires atleast 6 gold coins.\n- Test 2: Chef can't form a triangle with height > 2 as it requires atleast 6 gold coins.\n- Test 3: Chef can't form a triangle with height > 3 as it requires atleast 10 gold coins.\n\n Examples: \nInput: \n['3', '3', '5', '7']\nOutput: \n ['2', '2', '3']\n",
  "909": "Problem: \n-----Problem Statement-----\nA classroom has several students, half of whom are boys and half of whom are girls. You need to arrange all of them in a line for the morning assembly such that the following conditions are satisfied:\n- The students must be in order of non-decreasing height.\n- Two boys or two girls must not be adjacent to each other.\nYou have been given the heights of the boys in the array $b$ and the heights of the girls in the array $g$. Find out whether you can arrange them in an order which satisfies the given conditions. Print \"YES\" if it is possible, or \"NO\" if it is not.\nFor example, let's say there are $n = 3$ boys and $n = 3$ girls, where the boys' heights are $b = [5, 3, 8]$ and the girls' heights are $g = [2, 4, 6]$. These students can be arranged in the order $[g_0, b_1, g_1, b_0, g_2, b_2]$, which is $[2, 3, 4, 5, 6, 8]$. Because this is in order of non-decreasing height, and no two boys or two girls are adjacent to each other, this satisfies the conditions. Therefore, the answer is \"YES\".\n\n-----Input-----\n- The first line contains an integer, $t$, denoting the number of test cases.\n- The first line of each test case contains an integer, $n$, denoting the number of boys and girls in the classroom.\n- The second line of each test case contains $n$ space separated integers, $b_1,b_2, ... b_n$, denoting the heights of the boys.\n- The second line of each test case contains $n$ space separated integers, $g_1,g_2,... g_n$, denoting the heights of the girls.\n\n-----Output-----\nPrint exactly $t$ lines. In the $i^{th}$ of them, print a single line containing \"$YES$\" without quotes if it is possible to arrange the students in the $i^{th}$ test case, or \"$NO$\" without quotes if it is not.\n\n-----Constraints-----\n- $1 \\leq t \\leq 10$\n- $1 \\leq n \\leq 100$\n- $1 \\leq b_i, g_i \\leq 100$\n\n-----Sample Input-----\n1\n2\n1 3\n2 4\n\n-----Sample Output-----\nYES\n\n-----EXPLANATION-----\nThe following arrangement would satisfy the given conditions: $[b_1, g_1, b_2, g_2]$. This is because the boys and girls and separated, and the height is in non-decreasing order.\n\n Examples: \nInput: \n['1', '2', '1 3', '2 4']\nOutput: \n ['YES']\n",
  "910": "Problem: \nRecently, Chef got obsessed with piano. He is a just a rookie in this stuff and can not move his fingers from one key to other fast enough. He discovered that the best way to train finger speed is to play scales.\n\nThere are different kinds of scales which are divided on the basis of their interval patterns. For instance, major scale is defined by pattern T-T-S-T-T-T-S, where \u2018T\u2019 stands for a whole tone whereas \u2018S\u2019 stands for a semitone. Two semitones make one tone. To understand how they are being played, please refer to the below image of piano\u2019s octave \u2013 two consecutive keys differ by one semitone.\n\nIf we start playing from first key (note C), then we\u2019ll play all white keys in a row (notes C-D-E-F-G-A-B-C \u2013 as you can see C and D differ for a tone as in pattern, and E and F differ for a semitone).\n\nThis pattern could be played some number of times (in cycle).\n\n\nEach time Chef takes some type of a scale and plays using some number of octaves. Sometimes Chef can make up some scales, so please don\u2019t blame him if you find some scale that does not exist in real world.\n\nFormally, you have a set of 12 keys (i.e. one octave) and you have N such sets in a row. So in total, you have 12*N keys. You also have a pattern that consists of letters 'T' and 'S', where 'T' means move forward for two keys (from key x to key x + 2, and 'S' means move forward for one key (from key x to key x + 1).\n\nNow, you can start playing from any of the 12*N keys. In one play, you can repeat the pattern as many times as you want, but you cannot go outside the keyboard.\n\nRepeating pattern means that if, for example, you have pattern STTST, you can play STTST as well as STTSTSTTST, as well as STTSTSTTSTSTTST, as well as any number of repeating. For this pattern, if you choose to repeat it once, if you start at some key x, you'll press keys: x (letter 'S')-> x + 1 (letter 'T')-> x + 3 (letter 'T')-> x + 5 (letter 'S') -> x + 6 (letter 'T')-> x + 8. Also 1 \u2264 x, x + 8 \u2264 12*N so as to avoid going off the keyboard.\n\nYou are asked to calculate number of different plays that can be performed. Two plays differ if and only if they start at different keys or patterns are repeated different number of times.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nFirst line of each test case contains scale\u2019s pattern \u2013 string s consisting of letters \u2018T\u2019 and \u2018S\u2019 only.\n\nSecond line contains one integer N \u2013 number of octaves he\u2019ll be using.\n\n-----Output-----\nFor each test case output a single number in a line corresponding to number of different scales he\u2019ll play. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 |S| \u2264 100\n- 1 \u2264 n \u2264 7\n\n-----Subtasks-----\nSubtask 1: T < 10 4, N = 1 \nSubtask 2: No additional constraints.\n\n-----Example-----\nInput:\n2 \nTTTT\n1\nTTSTTTS\n3\n\nOutput:\n4\n36\n\n-----Explanation-----\nExample case 1. In the first case there is only one octave and Chef can play scale (not in cycle each time) starting with notes C, C#, D, D# - four together.\n\n Examples: \nInput: \n['2 ', 'TTTT', '1', 'TTSTTTS', '3', '', '']\nOutput: \n ['4', '36']\n",
  "912": "Problem: \nk kids seem to have visited your home for the festival. It seems like the kids\nhad all been fighting with each other, so you decided to keep them as far as\npossible from each other. You had placed n chairs on the positive number line,\neach at position x i , 1 \u2264 i \u2264 n. You can make the kids sit in any of the chairs.\nNow you want to know the largest possible minimum distance between each kid.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains two lines. First line contains two space separated integers n and k. Second line contains n space separated values, x1, x2, x3, \u2026 ,xn.\n\n-----Output:-----\nFor each test case print the largest possible minimum distance.\n\n-----Sample Input:-----\n1\n\n2 2\n\n1 2    \n\n-----Sample Output:-----\n1  \n\n-----Constraints-----\n- $2 \\leq n \\leq 100000$\n- $0 \\leq xi \\leq 10^9$\n- $k \\leq n $\n\n Examples: \nInput: \n['1', '2 2', '1 2']\nOutput: \n ['1', 'Constraints', '2 \u2264 n \u2264 100000', '0 \u2264 xi \u2264 10 9', 'k \u2264 n']\n",
  "913": "Problem: \nSalmon runs a fish delivery company in Fish City. Fish City has $N$ vertical roads numbered $1, 2, ..., N$ from left to right, each spaced 1 unit apart; similarly, there are $M$ horizontal roads numbered $1, 2, ..., M$ from bottom to top, each spaced 1 unit apart. We will denote the intersection between the $x$-th vertical road and the $y$-th horizontal road as $(x, y)$. \nSalmon has to make $K$ deliveries, with the $i$-th delivery starting at $(x_i, y_i)$ and ending at $(x'_i, y'_i)$. He can also travel every road with speed $0.5$ (meaning it would take him $2$ units of time to travel $1$ unit of distance). However, Salmon can bribe the mayor of Fish City and make the mayor change exactly one horizontal road to a highway, meaning the speed on that road would increase to $1$.\nHe wants to choose a road to be a highway such that the sum of durations of all the deliveries is minimum possible. Help him find this minimum sum!\nNote that each delivery starts exactly at $(x_i, y_i)$ and ends at $(x'_i, y'_i)$, i.e., we don't count the time taken to travel from $(x'_{i-1}, y'_{i-1})$ to $(x_i, y_i)$ in our answer.\n\n-----Input:-----\nThe first line contains 3 integers, $N$, $M$ and $K$ ($1 \\le N, M, K \\le 10^5$).\nThe next $K$ lines describe deliveries. Each line contains 4 space-separated integers $x_i$, $y_i$, $x'_i$, $y'_i$ ($1 \\le x_i, x'_i \\le N$, $1 \\le y_i, y'_i \\le M$), describing the $i$-th delivery.\n\n-----Output:-----\nPrint one integer -- the minimum sum of durations possible.\n\n-----Subtasks-----\n- Subtask 1 [17 points]: $y_i = y_{i-1}$ for all $i>0$. \n- Subtask 2 [34 points]: $K \\le 10$.\n- Subtask 3 [49 points]: No additional constraints.\n\n-----Sample Input 1:-----\n5 4 3\n2 3 4 1\n1 4 5 2\n3 3 5 3\n\n-----Sample Output 1:-----\n16\n\n-----Explanation:-----\n\nSalmon can turn the 3rd horizontal road into a highway.\n- For the first delivery, we can go 2 units to the right taking 2 units of time, and 2 units down taking 4 units of time. The time taken is $2 + 4 = 6$.\n- For the second delivery, we can go 1 unit down taking 2 units of time, 4 units right taking 4 units of time, and 1 unit down taking 2 units of time. The time taken is $2 + 4 + 2 = 8$.\n- For the third delivery, we can go 2 units right taking 2 units of time.\nTherefore, the total time taken is $6 + 8 + 2 = 16$.\n\n-----Sample Input 2:-----\n10 2 3\n1 2 10 2\n2 1 9 1\n4 1 7 1\n\n-----Sample Output 2:-----\n23\n\n-----Explanation:-----\n\nSalmon can turn the 1st horizontal road into a highway.\n- For the first delivery, we can go 1 unit down taking 2 units of time, 9 units right taking 9 units of time, and 1 unit up taking 2 units of time. The time taken is $2 + 9 + 2 = 13$.\n- For the second delivery, we can go 7 units right taking 7 units of time.\n- For the third delivery, we can go 3 units to the right taking 3 units of time.\nTherefore, the total time taken is $13 + 7 + 3 = 23$.\n\n Examples: \nInput: \n['5 4 3', '2 3 4 1', '1 4 5 2', '3 3 5 3']\nOutput: \n ['16']\n",
  "914": "Problem: \nThere is a building with $N$ floors (numbered $1$ through $N$ from bottom to top); on each floor, there are $M$ windows (numbered $1$ through $M$ from left to right). Let's denote the $j$-th window on the $i$-th floor by $(i, j)$.\nAll windows in the building need to be cleaned one by one in a specific order. You are given this order as a matrix $A$ with $N$ rows and $M$ columns; for each valid $i$ and $j$, the window $(i, j)$ must be cleaned on the $A_{N-i+1,j}$-th turn. \nWhenever we clean a window $(i, j)$, it becomes clean, but the dirty water used for cleaning it flows down to windows $(i-1, j-1)$, $(i-1, j)$ and $(i-1, j+1)$ (more precisely, to all of these windows which exist), so these windows become dirty again. Then, the water flows further down, so the same applies for other windows below: whenever a window $(i, j)$ becomes dirty, windows $(i-1, j-1)$, $(i-1, j)$ and $(i-1, j+1)$ become dirty as well. For example, cleaning a window $(5, 3)$ will make the window $(3, 2)$ dirty. The next window is cleaned only after water flows down completely. Note that each window is cleaned only once and there may be dirty windows at the end.\nFor each window, determine whether it will be clean after the cleaning process ends.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$. \n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $M$ space-separated integers $A_{i, 1}, A_{i, 2}, \\ldots, A_{i, M}$.\n\n-----Output-----\nFor each test case, print $N$ lines; each of them should contain a string with length $M$. For each valid $i$ and $j$, the $j$-th character on the $i$-th line should be '1' if the window $(N-i+1, j)$ is clean or '0' if it is dirty.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N, M \\le 10^3$\n- $1 \\le A_{i, j} \\le N \\cdot M$ for each valid $i, j$\n- the elements of the matrix $A$ are pairwise distinct\n- the sum of $N \\cdot M$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $N, M \\le 25$\n- the sum of $N \\cdot M$ over all test cases does not exceed $625$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n1\n3 4\n1 3 7 10\n9 2 4 11\n8 12 5 6 \n\n-----Example Output-----\n1111\n1001\n0100\n\n Examples: \nInput: \n['1', '3 4', '1 3 7 10', '9 2 4 11', '8 12 5 6 ', '']\nOutput: \n ['1111', '1001', '0100']\n",
  "915": "Problem: \nDevu has n weird friends. Its his birthday today, so they thought that this is the best occasion for testing their friendship with him. They put up conditions before Devu that they will break the friendship unless he gives them a grand party on their chosen day. Formally, ith friend will break his friendship if he does not receive a grand party on dith day.\n\nDevu despite being as rich as Gatsby, is quite frugal and can give at most one grand party daily. Also, he wants to invite only one person in a party. So he just wonders what is the maximum number of friendships he can save. Please help Devu in this tough task !!\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- First line will contain a single integer denoting n.\n\n- Second line will contain n space separated integers where ith integer corresponds to the day dith as given in the problem.\n\n-----Output-----\nPrint a single line corresponding to the answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 104\n- 1 \u2264 n  \u2264 50\n- 1 \u2264 di \u2264 100\n\n-----Example-----\nInput:\n2\n2\n3 2\n2\n1 1\nOutput:\n2\n1\n\n-----Explanation-----\nExample case 1. Devu can give party to second friend on day 2 and first friend on day 3, so he can save both his friendships.\nExample case 2. Both the friends want a party on day 1, and as the Devu can not afford more than one party a day, so he can save only one of the friendships, so answer is 1.\n\n Examples: \nInput: \n['2', '2', '3 2', '2', '1 1']\nOutput: \n ['2', '1']\n",
  "916": "Problem: \nChef was bored staying at home in the lockdown. He wanted to go out for a change. Chef and Chefu are fond of eating Cakes,so they decided to go the Cake shop where cakes of all possible price are available .\nThey decided to purchase cakes of equal price and each of them will pay for their cakes. Chef only has coins of denomination $N$ whereas Chefu has that of denomination $M$.\nSo they want your help to find out the minimum amount to be spent in order to purchase the cakes.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $N, M$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the minimum amount to be spent in order to purchase the cake.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N,M \\leq 10^7$\n\n-----Sample Input:-----\n1\n2 3\n\n-----Sample Output:-----\n6\n\n Examples: \nInput: \n['1', '2 3']\nOutput: \n ['6']\n",
  "917": "Problem: \nYou are given an array of N integers a1, a2, ..., aN and an integer K. Find the number of such unordered pairs {i, j} that \n\n- i \u2260 j\n- |ai + aj - K| is minimal possible\n\nOutput  the minimal possible value of |ai + aj - K| (where i \u2260 j) and the number of such pairs for the given array and the integer K.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case consists of two space separated integers - N and K respectively.\n\nThe second line contains N single space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing two single space separated integers - the minimal possible value of |ai + aj - K| and the number of unordered pairs {i, j} for which this minimal difference is reached.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 50\n- 1 \u2264 ai, K \u2264 109\n- N = 2 - 31 point.\n- 2 \u2264 N \u2264 1000 - 69 points.\n\n-----Example-----\nInput:\n1   \n4 9\n4 4 2 6\n\nOutput:\n1 4\n\n-----Explanation:-----\nThe minimal possible absolute difference of 1 can be obtained by taking the pairs of a1 and a2, a1 and a4, a2 and a4, a3 and a4.\n\n Examples: \nInput: \n['1', '4 9', '4 4 2 6']\nOutput: \n ['1 4']\n",
  "918": "Problem: \nMr. Wire Less is not that good at implementing circuit in a breadboard. In his Digital Logic Design course, he has to implement several boolean functions using the breadboard. In a breadboard, inputs are given through the switches and outputs are taken through the LEDs. Each input switch can be either in ground state or in high state. So, if he wishes to implement a boolean function, f(x1, x2, .., xn) that takes n boolean values as input and returns m boolean values as output, he will use n switches and m LEDs. \nMr. Wire Less can quickly assemble the necessary ICs and wires, but the key problem is testing. While testing he has to check with all possible input combination, to make sure whether the output of LED corresponds to the expected output or not. This is taking too long for him, as most of the switches are jammed and difficult to toggle. \nMr. Wire Less is asking for help to minimize his time of testing. So, your task is to minimize the total number of switch-toggle throughout the testing.\nFor example, if Mr. Wire Less has to test a function f(x0, x1) of two variables, he may choose this switching-sequence for testing 00, 11, 10, 01. In this case, the total number of switch-toggle will be 2+1+2 = 5. But if he tests in this sequence 00, 10, 11, 01 total number of toggle will be 1+1+1 = 3.\nGiven n, you have to output the minimum number of toggle needed for complete testing. Though it seems impractical, he wants you to solve the problem for a very large value of n. But, then the toggle value can be quite big. So, he is completely okay with the toggle value modulo 8589934592 (233).\u2028\u2028\n\n-----Input-----\nThe first line of the input contains a positive integer T(T \u2264 105), denoting the number of test-case. Each of the following T lines contains a single non-negative integer n(n \u2264 1020).\n\n-----Output-----\nFor every test-case, output a single containing test-case number and the minimum number of switch-toggle modulo 8589934592 (233).\n\n-----Sample----- \nInput   \n2\n1\n2\n\nOutput\nCase 1: 1\nCase 2: 3\n\n Examples: \nInput: \n['2', '1', '2', '', '']\nOutput: \n ['Case 1: 1', 'Case 2: 3']\n",
  "919": "Problem: \nAn even sequence has the following property: each maximal contiguous subsequence which contains only equal integers (i.e. the same integer repeated a number of times) has an even length. In particular, the empty sequence is even. A subsequence is maximal if it is not contained in a larger contiguous subsequence which contains only equal integers.\nChef was given an integer sequence $A_1, A_2, \\ldots, A_N$ by his friend Mr. Z. He may perform the following operation any number of times: either delete an element of the current sequence (if it is non-empty) or insert an integer anywhere in the current sequence (possibly at the beginning or at the end).\nFind the minimum number of operations needed to make the sequence even.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum number of operations.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 2 \\cdot 10^5$\n- $1 \\leq A_i \\leq N$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Subtasks-----\nSubtask #1 (10 points): $N \\leq 18$\nSubtask #2 (10 points): $A_i \\leq A_{i+1}$ for each valid $i$\nSubtask #3 (20 points): $N \\leq 3,000$\nSubtask #4 (20 points): $A_i \\leq 26$ for each valid $i$\nSubtask #5 (40 points): original constraints\n\n-----Example Input-----\n2\n4\n1 1 2 1\n11\n2 2 2 10 2 10 1 1 5 3 5\n\n-----Example Output-----\n2\n3\n\n-----Explanation-----\nExample case 1: Here are two ways to make the sequence even using $2$ operations:\n- Delete the first element $1$ and the only element $2$, resulting in a sequence $(1, 1)$, which is even.\n- Delete the last element $1$ and insert $2$ at the end, resulting in a sequence $(1,1,2,2)$, which is even.\nIt can be proved that one operation is not enough to make the initial sequence even.\n\n Examples: \nInput: \n['2', '4', '1 1 2 1', '11', '2 2 2 10 2 10 1 1 5 3 5']\nOutput: \n ['2', '3']\n",
  "920": "Problem: \nYou are teaching a class of $N$ students. Today, during the morning prayer, all the students are standing in a line. You are given a string $s$ with length $N$; for each valid $i$, the $i$-th character of this string is 'b' if the $i$-th student in the line is a boy or 'g' if this student is a girl.\nThe awkwardness of this configuration of students is defined as the sum of pairwise distances between each boy and girl. The distance between the $i$-th and $j$-th student in the line is $|i - j|$. Formally, the awkwardness is \u2211i=1N\u2211j=i+1sj\u2260siN(j\u2212i).\u2211i=1N\u2211j=i+1sj\u2260siN(j\u2212i).\\sum\\limits_{i=1}^N \\, \\sum\\limits_{j=i+1\\\\ s_j \\neq s_i}^N (j - i)\\,.\nAs the teacher, it is your responsibility to reorder the students in such a way that the awkwardness of the resulting configuration is the smallest possible. You may reorder the students in the line in any way you want. Find the minimum awkwardness that can be achieved.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $s$.\n\n-----Output-----\nFor each test case, print a single line containing one integer - the minimum possible awkwardness.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le |s| \\le 10^5$\n- each character of $s$ is either 'b' or 'g'\n- the sum of $|s|$ over all test cases does not exceed $4 \\cdot 10^6$\n\n-----Example Input-----\n3\ngb\nbgg\nbbgg\n\n-----Example Output-----\n1\n2\n6\n\n-----Explanation-----\nExample case 1: The total awkwardness is $|1 - 0| = 1$, no matter how you arrange the students.\nExample case 2: Initially, the awkwardness is $|1 - 0| + |2 - 0| = 1 + 2 = 3$. However, you can move the boy between the two girls, i.e. choose the configuration \"gbg\". Here, the awkwardness is $|1 - 0| + |2 - 1| = 1 + 1 = 2$.\n\n Examples: \nInput: \n['3', 'gb', 'bgg', 'bbgg']\nOutput: \n ['1', '2', '6']\n",
  "921": "Problem: \nDoctor Kunj installed new software on cyborg Shresth.\nThis software introduced Shresth to range minimum queries.\nCyborg Shresth thought of T$T$ different problems in each of which you will be given\nan array A$A$ of length N$N$ and an array B$B$ of length M$M$. In each of these problems, you have to calculate:\n\u2211mi=1\u2211mj=irangeMin(B[i],B[j])$\\sum_{i=1}^m \\sum_{j=i}^m rangeMin(B[i],B[j])$\nWhere rangeMin(i,j)$rangeMin(i,j)$ returns the minimum element in the range of indices i$i$ to j$j$ (both included) in array A$A$.\nIt is given that array B$B$ consists of pairwise distinct elements and is in ascending order.\n\n-----Input Format:-----\n- First line will contain T$T$, the number of different problems Cyborg Shresth thought of.\n- Each problem's input data will be given in three different lines. \n- The first line will contain N$N$ and M$M$, the length of array A$A$ and B$B$ respectively. \n- The second line will contain N$N$ space separated positive integers, which form the array A$A$. - \n- The third line will contain M$M$ space separated positive integers, which form the array B$B$.\n\n-----Output Format:-----\n- For each different problem, print on a new line the answer to the problem, i.e. the value of \u2211mi=1\u2211mj=irangeMin(B[i],B[j])$\\sum_{i=1}^m \\sum_{j=i}^m rangeMin(B[i],B[j])$ .\n\n-----Constraints:-----\n- 1\u2264T\u2264105$1 \\leq T \\leq {10}^5$\n- 1\u2264N\u2264105$1 \\leq N \\leq {10}^5$\n- 1\u2264M\u2264105$1 \\leq M \\leq {10}^5$\n- 1\u2264A[i]\u2264109$1 \\leq A[i] \\leq 10^9$\n- 1\u2264B[i]\u2264N$1 \\leq B[i] \\leq N$\nIt is guaranteed that the sum of N$N$ over all test cases does not exceed 106${10}^6$ .\n\n-----Sample Input:-----\n1\n7 3\n10 3 7 9 1 19 2\n1 4 6\n\n-----Sample Output:-----\n43\n\n-----Explanation:-----\nFor the given array A$A$, we have to calculate rangeMin(1,1)+rangeMin(1,4)+rangeMin(1,6)+rangeMin(4,4)+rangeMin(4,6)+rangeMin(6,6)$rangeMin(1,1) + rangeMin(1,4) + rangeMin(1,6) + rangeMin(4,4) + rangeMin(4,6) + rangeMin(6,6) $.\nThis is equal to 10+3+1+9+1+19=43$10 + 3 + 1 + 9 + 1 +19 = 43$.\n\n Examples: \nInput: \n['1', '7 3', '10 3 7 9 1 19 2', '1 4 6']\nOutput: \n ['43']\n",
  "922": "Problem: \nChef has three baskets and two of them have multiple balls(Natural numbers written on them). The first basket has N balls, the second basket has M balls and the third basket is empty. Chef starts choosing all the unique balls(only occurring once in both the baskets) and puts into the third basket and throw the repetitive ones. Print numbers on the balls of the third basket in ascending order. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains three lines of input.\n- First-line has two integers $N, M$. \n- Second-line with N space-separated numbers.\n- Third-line with M space-separated numbers.\n\n-----Output:-----\nFor each testcase, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq M \\leq 10^5$\n\n-----Sample Input:-----\n1\n4 5\n1 2 3 4\n2 3 4 5 6\n\n-----Sample Output:-----\n1 5 6\n\n Examples: \nInput: \n['1', '4 5', '1 2 3 4', '2 3 4 5 6']\nOutput: \n ['1 5 6']\n",
  "923": "Problem: \nLike all minions Dave also like to eat bananas. So as to his obsession, he is eating banana, but this time in different way. There are N bananas in dish. Dave wants to eat all of them. He starts eating at speed 1 banana/second. He can increase or decrease speed of eating by one only. The condition is that he must end eating at speed 1 banana/second. So, your task is to find minimum time required to finish all bananas in a dish.\n\n-----Input-----\nFirst line contain number of test cases T. Next T lines contain one integer N. Where N is number of bananas in a dish.\n\n-----Output-----\nFor each test case print minimum time require to eat all N bananas.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 105\n\n-----Example-----\nInput:\n2\n2\n4\n\nOutput:\n2\n3\n\n\n-----Explanation-----\nExample case 1.Dave will start to eat with rate of 1 banana/second. Then only one banana will remain. He will eat that banana in 1 second. Thus, Total time is 2 seconds.\nExample case 2.Dave starts with rate of 1 banana/second, and then increase it to 2 bananas/second and again decrease it to 1 banana/second. So total time is 3 seconds.\n\n Examples: \nInput: \n['2', '2', '4']\nOutput: \n ['2', '3']\n",
  "925": "Problem: \nPetr is organizing Petr Mitrichev Contest #11. The top N coders according to codechef ratings (excluding Petr himself) agreed to participate in the contest. The participants have been ranked from 0 to N-1 according to their ratings. Petr had asked each participant to choose a coder with rating higher than himself/ herself, whom he/she would like to be team-mates with, and the ith ranked coder's choice is stored as choice[i]. As expected, programmers turned out to be lazy, and only a few of them actually filled in their choices. If choice[i] = -1, then it means the ith coder was lazy and did not fill his/her choice. Of course, the top-ranked person (i.e., rank = 0),  Gennady Korotkevich  (obviously), despite clearly not being a lazy person, was not able to fill any choice, because he is the top ranked coder, so choice[0] is always equal to -1.\n\nPetr, being the organizer, had to undertake the arduous task of filling in the choices for the lazy participants. Unfortunately, he also got lazy and adopted the following random strategy:\n\nFor each lazy person i (i.e., for all i > 0, such that choice[i] = -1), he flips an unbiased coin (i.e. with 1/2 probability it lands Heads, and with 1/2 probability it lands Tails). Notice that no coin is flipped for i=0, since Gennady is not lazy despite his choice being -1.\n\nIf it lands Heads, he will not change the choice of this person. That is, he leaves choice[i] as -1.\n\nOtherwise, if it lands Tails, he will uniformly at random select one of the top i ranked participants as choice of ith person. That is, he sets choice[i] = j, where j is randomly and uniformly chosen from 0 to i-1, inclusive.\n\nAfter this process of filling the choice array, Petr is wondering about the maximum number of teams he can have such that all the valid choices are respected (i.e. if choice[i] = j and j != -1, then i and j should be in the same team). \n\nPetr now has to arrange for computers. As each team will need a computer, he wants to know the expected value of maximum number of teams. As he is too busy in organizing this contest, can you please help him?\n\n-----Input:-----\nThe first line of input contains T, the number of test cases. Each test case contains 2 lines.\nThe first line contains a single integer N.\nThe second line contains N integers, which specify the choice array: choice[0], choice[1],..,choice[N-1].\n\n-----Output:-----\nEach test case's output must be in a new line and must be 1 number which is the expected number of teams. Your answer should be within an absolute error of 10-6 from the correct answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 1000\n- The sum of all the T Ns in one test file \u2264 5000\n- -1 \u2264 choice[i] \u2264 i-1 , for all 0 \u2264 i < N\n- choice[0] will be equal to -1, always\n\n-----Example-----\nInput:\n1\n5\n-1 -1 1 2 1\n\nOutput:\n1.5\n\n-----Explanation:-----\nchoice[2] = 1 implies 1 and 2 should be in the same team. choice[3] = 2 implies that 2 and 3 have to be in the same team. Therefore, 1, 2 and 3 have to be in the same team. Also, choice[4] = 1 implies that 1 and 4 have to be in the same team, which means that 1, 2, 3 and 4 \u2014 all have to be in the same team.\nThe only lazy person is 1. So with probability 1/2, Petr leaves his choice unchanged, or with the remaining 1/2 probability, he assigns choice[1] = 0, as 0 is the only higher ranked person for 1. In the first case, you can get 2 teams: {0} and {1, 2, 3 ,4}.\nIn the second case, because choice[1] = 0, 0 and 1 are forced to be in the same team, and hence {0, 1, 2, 3, 4} is the only possible team.\nTherefore, with 1/2 probability, number of teams = 1 and with another 1/2 probability, it is 2. Hence, expected number of teams = (1/2 * 1) + (1/2 * 2) = 1.5.\n\n Examples: \nInput: \n['1', '5', '-1 -1 1 2 1']\nOutput: \n ['1.5']\n",
  "926": "Problem: \nToday is Chocolate day and Kabir and Tara are visiting a Valentine fair. Upon arriving, they find a stall with an interesting game.\nThere are N$N$ jars having some chocolates in them. To win the game, one has to select the maximum number of consecutive jars such that the sum of count of chocolates in maximum and second maximum jar is less than or equal to k$k$ in that range.\nKabir wants to win the game so that he can gift the chocolates to Tara. You are a friend of Kabiir, help him win the game.\nThere will be at least one possible answer.\nNote$Note$ :\n- You have to select at least two jars. \n- Count of chocolates in maximum and second maximum jar among selected consecutive jars may be equal.\n\n-----Input:-----\n- First line will contain T$T$, number of test cases.\n- First line of each test case contains two space separated integers N,k$N, k$.\n- Second line of each test case contains N$N$ space separated integer ai$a_i$ denotes number of chocolates in the jar. \n\n-----Output:-----\nFor each test case print maximum number of jars.\n\n-----Constraints:-----\n- 1\u2264T\u226410$1 \\leq T \\leq 10$\n- 2\u2264N\u2264105$2 \\leq N \\leq 10^5$\n- 1\u2264ai\u2264105$1 \\leq a_i \\leq 10^5$\n\n-----Sample Input:-----\n1\n6 5\n\n1 3 3 1 1 5\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nYou can select 3rd$3^{rd}$, 4th$4^{th}$, and 5th$5^{th}$ jar as the sum of max and second max is equal to 4 which is less then 5.\n\n Examples: \nInput: \n['1', '6 5', '1 3 3 1 1 5']\nOutput: \n ['3']\n",
  "927": "Problem: \nMohit(Ex GenSec ) is the most active member of the roasting club who loves giving tasks to other members. One day he observed that none of the members were paying attention to the online classes, so he decided to have some fun and overcome the boring lectures. He wrote N numbers on the virtual board (where the first number is 1, the last one is N and the ith number being i).\nThen he asked M questions to every other member of the club. In each question, a number K was given by Mohit and the members had to give a single integer as an answer which will be the sum of all numbers present on the whiteboard.\nThere are some conditions that every member has to follow while answering.\n- If K is already present on the whiteboard then swap the first and last number.\n- Otherwise, replace the last number with K.\n\n-----Input:-----\n- First-line will consist of space-separated integers N and M. The board will contain the list of numbers from 1 to N and M is the number of questions that Mohit will ask.\n- Next M lines contain the number Ki, which will be provided by Mohit and (1<=i<=M).\n\n-----Output:-----\nFor each question, report the sum of all integers present\n\n-----Constraints-----\n- $1 \\leq N,M \\leq 1000000$\n- $2 \\leq K \\leq 10^9$\n\n-----Sample Input:-----\n5 4\n7\n12 \n10 \n1  \n\n-----Sample Output:-----\n17\n22  \n20\n20\n\n Examples: \nInput: \n['5 4', '7', '12', '10', '1']\nOutput: \n ['17', '22', '20', '20']\n",
  "928": "Problem: \nBeing a crewmate in the Among Us game, you will have to solve a task to win against the imposter. \nThe task : You are given a certain number of bulbs(Say n) which are initially in OFF position. \nThe bulbs are numbered from 1 to n. There will be n current fluctuations in such a way that in the 1st fluctuation all bulbs are toggled, in the 2nd fluctuation every 2nd bulb is toggled, in the 3rd fluctuation every 3rd bulb is toggled and so on.\nYour job as a crewmate is to find the number of bulbs which are ON at the end of n fluctuations. But, the imposter has a special power which alerts it when a bulb with a number divisible by 3 is kept ON at the end of n fluctuations. \nSo, you will have to switch off the bulbs with numbers divisible by 3 and give the final result to complete the task and win the game.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, an integer $n$. \n\n-----Output:-----\n- For each testcase, output a single integer - the number of bulbs that will remain ON after $n$ fluctuations.\n\n-----Constraints :-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq n \\leq 10^9$\n\n-----Sample Input:-----\n2\n2\n20\n\n-----Sample Output:-----\n1\n\n3\n\n Examples: \nInput: \n['2', '2', '20']\nOutput: \n ['1', '3']\n",
  "930": "Problem: \nConsider the following $4 \\times 4$ pattern:\n1  2  4  7\n3  5  8 11\n6  9 12 14\n10 13 15 16\n\nYou are given an integer $N$. Print the $N \\times N$ pattern of the same kind (containing integers $1$ through $N^2$).\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$.\n\n-----Output-----\nFor each test case, print $N$ lines; each of them should contain $N$ space-separated integers.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 100$\n\n-----Subtasks-----\nSubtask #1 (100 points): Original constraints\n\n-----Example Input-----\n1\n4\n\n-----Example Output-----\n1 2 4 7\n3 5 8 11\n6 9 12 14\n10 13 15 16\n\n-----Explanation-----\n\n Examples: \nInput: \n['1', '4']\nOutput: \n ['1 2 4 7', '3 5 8 11', '6 9 12 14', '10 13 15 16']\n",
  "931": "Problem: \nOne day, Delta, the dog, got very angry. He has $N$ items with different values, and he decided to destroy a few of them. However, Delta loves his hooman as well. So he only destroyed those items whose Least Significant Bit in binary representation is 0. \nCan you help Delta to find the total damage he did so he could make an equally sorry face?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of Each test case a single integer $N$.\n- Next line contains $N$ integers denoting values of items.\n\n-----Output:-----\nFor each testcase, output in a single line the total damage caused by Delta.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq value \\leq 10^3$\n\n-----Sample Input:-----\n1\n5\n\n1 2 3 4 5\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nTotal Damage: $2  + 4 = 6$.\n\n Examples: \nInput: \n['1', '5', '1 2 3 4 5']\nOutput: \n ['6']\n",
  "932": "Problem: \nThere are two friends Alice and Bob. They have a packet of $n$ candies. They want to split the candies between them, and to do so, they kept them all in a single line. The $i^{\\text{th}}$ candy in the line has a sweetness value of $a_i$. They decided to take turns in picking the candies. Alice has the first turn. In a person's turn, they either eat the leftmost candy or the rightmost candy with equal probability.\nCan you find the expected value of sum of sweetness of the candies eaten by Alice?\nYour answer is considered correct if its absolute or relative error doesn't exceed $10^{-6}$ .\n\n-----Input:-----\n- The first line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains a single integer $n$ denoting the number of candies.\n- Second line of each testcase contains  $n$ space separated integers representing $a_1,a_2,a_3,...a_n$ respectively.\n\n-----Output:-----\nFor each testcase, output the expected value of sum of sweetness of the candies which Alice eats.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq n \\leq 10^3$\n- $1 \\leq a_i \\leq 10^6$\n- Sum of $n$ across all the tests $\\leq 10^3$\n\n-----Sample Input:-----\n2\n2\n1 2\n3\n1 2 3\n\n-----Sample Output:-----\n1.500000000000000\n4.000000000000000\n\n-----EXPLANATION:-----\nIn the first sample, Alice eats either the first or the second candy with equal probability. Hence, expected value is $(1+2)/2 = 1.5$\nFor the second sample, expected value is $4$.\n\n Examples: \nInput: \n['2', '2', '1 2', '3', '1 2 3']\nOutput: \n ['1.500000000000000', '4.000000000000000']\n",
  "933": "Problem: \nChef develops his own computer program for playing chess. He is at the very beginning. At first he needs to write the module that will receive moves written by the players and analyze it. The module will receive a string and it should report at first whether this string represents the correct pair of cells on the chess board (we call such strings correct) and then report whether it represents the correct move depending on the situation on the chess board. Chef always has troubles with analyzing knight moves. So at first he needs a test program that can say whether a given string is correct and then whether it represents a correct knight move (irregardless of the situation on the chess board). The cell on the chessboard is represented as a string of two characters: first character is a lowercase Latin letter from a to h and the second character is a digit from 1 to 8. The string represents the correct pair of cells on the chess board if it composed of 5 characters where first two characters represent the cell where chess figure was, 3rd character is the dash \"-\" and the last two characters represent the destination cell.\n\n-----Input-----\nThe first line contains a single integer T <= 50000, the number of test cases. T test cases follow. The only line of each test case contains a non-empty string composed the characters with ASCII-codes from 32 to 126. The length of the string is not greater than 10.\n\n-----Output-----\nFor each test case, output a single line containing the word \"Error\" if the corresponding string does not represent the correct pair of cells on the chess board. Otherwise output \"Yes\" if this pair of cells represents the correct knight move and \"No\" otherwise.\n\n-----Example-----\nInput:\n4\na1-b3\nd2-h8\na3 c4\nErrorError\n\nOutput:\nYes\nNo\nError\nError\n\n Examples: \nInput: \n['4', 'a1-b3', 'd2-h8', 'a3 c4', 'ErrorError']\nOutput: \n ['Yes', 'No', 'Error', 'Error']\n",
  "934": "Problem: \nGiven a triplet of integers (X , Y , Z), such that X \u2264 Y and Y \u2265 Z, we define f(X , Y , Z) to be (X + Y) * (Y + Z). If either X > Y or Y < Z, or both, then f(X , Y , Z) is defined to be 0.\nYou are provided three arrays  A , B and C   of any length (their lengths may or may not be equal).  \nYour task is to find the sum of f(X , Y , Z) over all triplets (X, Y , Z) where   X, Y and Z  belong to  A, B and C respectively.\nOutput your sum for each test case modulo 1000000007.\n\n-----Input-----\n- The first line contains a single integer, T, which is the number of test cases. The description of each testcase follows:\n- The first line of each testcase contains 3 integers: p, q and r. These denote the lengths of A,B and C respectively. \n- The second line contains p integers, which are the elements of A\n- The third line contains q integers, which are the elements of B\n- The fourth line contains r integers, which are the elements of C\n\n-----Output-----\nOutput the required sum modulo  1000000007  for each test case in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10 \n- 1 \u2264 p, q, r \u2264 100000 \n- 1 \u2264 every array element \u2264 1000000000\n\n-----Subtasks  -----\n- Subtask #1 (30 points): 1 \u2264 p,q,r  \u2264 100 \n- Subtask #2 (70 points): 1 \u2264 p,q,r  \u2264 100000 \n\n-----Example : -----\nInput:\n1 \n3 1 3\n1 2 3\n5\n4 5 6\n\nOutput:\n399\n\n-----Explanation: -----\nAs there is only one choice for Y which equals to 5, to get a non-zero function value,we can choose any element for X from the set { 1 , 2 , 3 } and for Z from the set { 4  , 5 } \nSo triplets which give non-zero function values are: \n{ 1 , 5  , 4 } :  ( 1 + 5 ) * ( 5 + 4 )  = 54 \n{ 1 , 5  , 5 } :  ( 1 + 5 ) * ( 5 + 5 )  = 60 \n{ 2 , 5  , 4 } :  ( 2 + 5 ) * ( 5 + 4 )  = 63 \n{ 2 , 5  , 5 } :  ( 2 + 5 ) * ( 5 + 5 )  = 70 \n{ 3 , 5  , 4 } :  ( 3 + 5 ) * ( 5 + 4 )  = 72 \n{ 3 , 5  , 5 } :  ( 3 + 5 ) * ( 5 + 5 )  = 80 \nFinal answer : 54 + 60 + 63 + 70 + 72 + 80  = 399\n\n Examples: \nInput: \n['1 ', '3 1 3', '1 2 3', '5', '4 5 6', '', '']\nOutput: \n ['399']\n",
  "935": "Problem: \nChef Two and Chef Ten are playing a game with a number $X$. In one turn, they can multiply $X$ by $2$. The goal of the game is to make $X$ divisible by $10$.\nHelp the Chefs find the smallest number of turns necessary to win the game (it may be possible to win in zero turns) or determine that it is impossible.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer denoting the initial value of $X$. \n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum required number of turns or $-1$ if there is no way to win the game.\n\n-----Constraints-----\n- $1 \\le T \\le 1000$\n- $0 \\le X \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n10\n25\n1\n\n-----Example Output-----\n0\n1\n-1\n\n Examples: \nInput: \n['3', '10', '25', '1']\nOutput: \n ['0', '1', '-1']\n",
  "936": "Problem: \nChef Ada has a matrix with $N$ rows (numbered $1$ through $N$ from top to bottom) and $N$ columns (numbered $1$ through $N$ from left to right) containing all integers between $1$ and $N^2$ inclusive. For each valid $i$ and $j$, let's denote the cell in the $i$-th row and $j$-th column by $(i,j)$.\nAda wants to sort the matrix in row-major order \u2015 for each valid $i$ and $j$, she wants the cell $(i, j)$ to contain the value $(i-1) \\cdot N + j$.\nIn one operation, Ada should choose an integer $L$ and transpose the submatrix between rows $1$ and $L$ and columns $1$ and $L$ (inclusive). Formally, for each $i$ and $j$ ($1 \\le i, j \\le L$), the value in the cell $(i, j)$ after this operation is equal to the value in $(j, i)$ before it.\nThe initial state of the matrix is chosen in such a way that it is possible to sort it using a finite number of operations (possibly zero). Find the smallest number of operations required to sort the matrix.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The next $N$ lines describe the matrix. For each valid $i$, the $i$-th of these lines contains $N$ space-separated integers \u2015 the initial values in cells $(i, 1), (i, 2), \\ldots, (i, N)$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the smallest number of operations required to sort the matrix.\n\n-----Constraints-----\n- $4 \\le N \\le 64$\n- the sum of $N^2$ over all test files does not exceed $3 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- $T \\le 50$\n- $N = 4$\nSubtask #2 (90 points): original constraints\n\n-----Example Input-----\n1\n4\n1 2 9 13\n5 6 10 14\n3 7 11 15\n4 8 12 16\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: After the first operation, with $L = 2$, the resulting matrix is\n1 5 9 13\n2 6 10 14\n3 7 11 15\n4 8 12 16\n\nAfter the second operation, with $L = 4$, the matrix becomes sorted\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\n Examples: \nInput: \n['1', '4', '1 2 9 13', '5 6 10 14', '3 7 11 15', '4 8 12 16']\nOutput: \n ['2']\n",
  "937": "Problem: \nChef's daily routine is very simple. He starts his day with cooking food, then he eats the food and finally proceeds for sleeping thus ending his day. Chef carries a robot as his personal assistant whose job is to log the activities of Chef at various instants during the day. Today it recorded activities that Chef was doing at N different instants. These instances are recorded in chronological order (in increasing order of time). This log is provided to you in form of a string s of length N, consisting of characters 'C', 'E' and 'S'. If s[i] = 'C', then it means that at the i-th instant Chef was cooking, 'E' denoting he was eating and 'S' means he was sleeping.\nYou have to tell whether the record log made by the robot could possibly be correct or not. \n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains string s.\n\n-----Output-----\nFor each test case, output a single line containing \"yes\" or \"no\" (without quotes) accordingly.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\n- 1 \u2264 N \u2264 105\n\n-----Subtasks-----\n- Subtask #1 (40 points) : 1 \u2264 N \u2264 100\n- Subtask #2 (60 points) : original constraints\n\n-----Example-----\nInput:\n5\nCES\nCS\nCCC\nSC\nECCC\n\nOutput:\nyes\nyes\nyes\nno\nno\n\n-----Explanation-----\nExample case 1. \"CES\" can correspond to a possible record of activities of Chef. He starts the day with cooking, then eating and then sleeping.\nExample case 2. \"CS\" can also correspond to a possible record of activities of Chef. He starts the day with cooking, then eating and then sleeping. Robot recorded his cooking and sleeping in order. He might not have recorded his eating activity.\nExample case 4. \"SC\" can not correspond to Chef's activities. Here it means that Chef slept first, then he cooked the food, which is impossible for Chef to do on some particular day.\n\n Examples: \nInput: \n['5', 'CES', 'CS', 'CCC', 'SC', 'ECCC']\nOutput: \n ['yes', 'yes', 'yes', 'no', 'no']\n",
  "938": "Problem: \nChef has an array A consisting of N elements. He wants to find number of pairs of non-intersecting segments [a, b] and [c, d] (1 \u2264 a \u2264 b < c \u2264 d \u2264 N) such there is no number that occurs in the subarray {Aa, Aa+1, ... , Ab} and   {Ac, Ac+1, ... , Ad} simultaneously. \nHelp Chef to find this number.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N denoting the number of elements in the array.\n- The second line contains N space-separated integers A1, A2, ..., AN. \n\n-----Output-----\n- For each test case, output a single line containing one integer - number of pairs of non-intersecting segments. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 5\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 Ai \u2264 109\n\n-----Subtasks-----Subtask 1 (7 points)\n- 1 \u2264 N \u2264 20Subtask 2 (34 points)\n- 1 \u2264 N \u2264 300Subtask 3 (59 points)\n- Original constraints\n\n-----Example-----\nInput:\n2\n3\n1 2 3\n4\n1 2 1 2\n\nOutput:\n5\n4\n\n-----Explanation-----\nExample case 1.\nAll possible variants are correct: {[1, 1], [2, 2]}, {[1, 1], [2, 3]}, {[1, 2], [3, 3]}, {[2, 2], [3, 3]}, {[1,1], [3, 3]}.\n\nExample case 2.\nCorrect segments: {[1, 1], [2, 2]}, {[1, 1], [4, 4]}, {[2, 2], [3, 3]}, {[3, 3], [4, 4]}.\n\n Examples: \nInput: \n['2', '3', '1 2 3', '4', '1 2 1 2']\nOutput: \n ['5', '4']\n",
  "940": "Problem: \nChef has a circular plot of land of radius $R$ on which he wants to construct a swimming pool.\nHe wants the swimming pool to be square in shape with maximum possible area,so that he along\nwith his friends can enjoy themselves during their summer vacations.\nHelp Chef to find out the maximum area of the swimming pool that can be constructed in his \ncircular plot.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,  $R$ i.e the radius of the plot. \n\n-----Output:-----\nFor each testcase, output in a single line answer displaying the maximum possible area of the swimming pool.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^8$\n\n-----Sample Input:-----\n2\n\n5\n\n10   \n\n-----Sample Output:-----\n50\n\n200\n\n Examples: \nInput: \n['2', '5', '10']\nOutput: \n ['50', '200']\n",
  "941": "Problem: \nYou are given two positive integers $A$ and $B$. Find the number of pairs of positive integers $(X, Y)$ such that $1 \\le X \\le A$, $1 \\le Y \\le B$ and $X + Y$ is even.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $A$ and $B$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of valid pairs.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le A, B \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (10 points): $A, B \\le 10$\nSubtask #2 (10 points): $A, B \\le 1,000$\nSubtask #3 (80 points): original constraints\n\n-----Example Input-----\n4\n1 1\n2 3\n4 6\n8 9\n\n-----Example Output-----\n1\n3\n12\n36\n\n Examples: \nInput: \n['4', '1 1', '2 3', '4 6', '8 9']\nOutput: \n ['1', '3', '12', '36']\n",
  "943": "Problem: \nTejas has invited the Clash Team for a Dinner Party. He places V empty plates (numbered from 1 to V inclusive) in a straight line on a table. He has prepared 2 kinds of Delicious Dishes named dish A and dish B.\n\nHe has exactly V servings of Dish A and W servings of dish B. \n\nNow he wants to serve the dishes in such a way that if theith plate has serving of Dish A then (i-1)th plate should not have serving of Dish B. Assuming all the Dishes are identical find number of ways Tejas can serve the Clash Team.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases . The description of T testcases follow.\n\n- The first line of each test case contains two space seperated integers V W .\n\n-----Output-----\nFor each test case, output the number of ways Tejas can serve the Clash Team.\n\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100\n- 1 \u2264 V \u2264 1000\n- 1 \u2264 W \u2264 1000\n\n-----Example-----\nInput:\n\n1\n\n3 3 \n\nOutput:\n4\n\n\n\n-----Explanation-----\n\nIn the above example the 4 ways are:\n\nAAA\n\nAAB\n\nABB\n\nBBB\n\n Examples: \nInput: \n['1', '3 3']\nOutput: \n ['4']\n",
  "945": "Problem: \nNow that Chef has finished baking and frosting his cupcakes, it's time to package them. Chef has N cupcakes, and needs to decide how many cupcakes to place in each package. Each package must contain the same number of cupcakes. Chef will choose an integer A between 1 and N, inclusive, and place exactly A cupcakes into each package.  Chef makes as many packages as possible. Chef then gets to eat the remaining cupcakes. Chef enjoys eating cupcakes very much. Help Chef choose the package size A that will let him eat as many cupcakes as possible.\n\n-----Input-----\n\nInput begins with an integer T, the number of test cases. Each test case consists of a single integer N, the number of cupcakes.\n\n-----Output-----\n\nFor each test case, output the package size that will maximize the number of leftover cupcakes. If multiple package sizes will result in the same number of leftover cupcakes, print the largest such size.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 2 \u2264 N \u2264 100000000 (108)\n\n-----Sample Input-----\n2\n2\n5\n\n-----Sample Output-----\n2\n3\n\n-----Explanation-----\n\nIn the first test case, there will be no leftover cupcakes regardless of the size Chef chooses, so he chooses the largest possible size.  In the second test case, there will be 2 leftover cupcakes.\n\n Examples: \nInput: \n['2', '2', '5']\nOutput: \n ['2', '3']\n",
  "946": "Problem: \nThere are $N$ buckets numbered $1$ through $N$. The buckets contain balls; each ball has a color between $1$ and $K$. Let's denote the number of balls with color $j$ that are initially in bucket $i$ by $a_{i, j}$.\nFor each $i$ from $1$ to $N-1$ (in this order), someone draws a ball uniformly at random from bucket $i$ and puts it into bucket $i+1$, then continues to draw the next ball. After putting a ball in bucket $N$, this person draws a ball, again uniformly at random, from bucket $N$.\nFor each color from $1$ to $K$, find the probability that the ball drawn from bucket $N$ has this color.\n\n-----Input-----\n- The first line of the input contains two space-separated integers $N$ and $K$. \n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $K$ space-separated integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, K}$.\n\n-----Output-----\nPrint a single line containing $K$ space-separated real numbers. For each valid $i$, the $i$-th of these numbers should denote the probability that the last drawn ball has color $i$. your answer will be considered correct if absolute or relative error does not exceed $10^{-6}$\n\n-----Constraints-----\n- $1 \\le N, K \\le 1,000$\n- $0 \\le a_{i, j} \\le 10$ for each valid $i, j$\n- initially, there is at least one ball in bucket $1$\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N, K \\le 100$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2 2\n0 1\n1 1\n\n-----Example Output-----\n0.333333 0.666667\n\n-----Explanation-----\n\n Examples: \nInput: \n['2 2', '0 1', '1 1']\nOutput: \n ['0.333333 0.666667']\n",
  "948": "Problem: \nChang's new maths teacher is very enthusiastic about making sure that students understand the concept rather than remembering it. On her first day at teaching, she gives an assignment to all the students to test their potential. Chang wants to demonstrate that he understands the concept rather than rote learning. Help Chang in doing this by solving the hardest problem in the assignment. The problem is written as follows. \n\nA perfect function is defined in the following manner.\n\n- F(x, y) = x2 + y for 1 \u2264 x \u2264 A, 1 \u2264 y \u2264 B\n- F(x, y) = 2 otherwise\n\nFind the number of integral pairs (x, y) such that F(x, y) is a perfect square.\n\n-----Input-----\nFirst and the only line of the input contains two single space separated integers A and B.\n\n-----Output-----\nOutput a single integer indicating the output to the only test case.\n\n-----Constraints-----\n- 1 \u2264 A, B \u2264 106\n\n-----Example-----\nInput:\n4 4\n\nOutput:\n1\n\n-----Explanation-----\nExample case 1.\n(1, 3) is the only pair such that x = 1, y = 3 satisfying x <= 4 and y <= 4. 1^2 + 3 = 4 which is a perfect square.\n\n Examples: \nInput: \n['4 4']\nOutput: \n ['1']\n",
  "949": "Problem: \nFizza is a cute girl and she wants to be more beautiful.\nSo she approached a magician to increase her beauty magically. But the magician's \nglasses accidently got locked inside the locker and he forgot the password. Without\nglasses he can't help her. The password is hidden in N integers i.e. $a[1], a[2], ..... a[N]$ \nwritten on his magical stick.The password is the maximum number of moves Fizza can perform, for any position $i$ such that 1 < = $i$ < = $N$ and integer $X$ is present at $i$-th\nposition. In one move she can perform one of the following operations ->\n$(1)$  If ( $i$ + 1 < = $N$ ) she can go to position ($i$ + 1 ) if integer at ( $i$ + 1 )-th \nposition is equal to $X$.\n$(2)$ if ( $i$ + 2 < = $N$ ) she can go to position ($i$ + 2 ) if integer at ($i$ + 2)-th \nposition is equal to $X$.\nFizza is a bit worried about her beauty so she can't focus on the problem but she asked for \nyour help to find the password.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase consists of  two lines of input.\n- Input $N$.\n- Input $N$ integers . \n\n-----Output:-----\nFor each testcase, output in a single line Maximum number of moves.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq a[i] \\leq 2*10^5$\n\n-----Sample Input:-----\n3\n8\n6 3 6 4 5 4 3 6\n9\n5 5 4 5 2 1 3 4 2\n6\n1 2 3 4 5 6\n\n-----Sample Output:-----\n1\n2\n0\n\n-----EXPLANATION:-----\nIn the first case, integers at position 1 and 3 are the same and at alternate positions.\nIn the second case, integers at position 1, 2, 4 follow the conditions.\n\n Examples: \nInput: \n['3', '8', '6 3 6 4 5 4 3 6', '9', '5 5 4 5 2 1 3 4 2', '6', '1 2 3 4 5 6']\nOutput: \n ['1', '2', '0']\n",
  "950": "Problem: \nA repetition-free number is one in which each digit $\\{1,2,3,\u2026,9\\}$ appears at most once and the digit $0$ does not appear. A repetition-free number can have at most nine digits, but may also have fewer than nine digits. Some examples of repetition-free numbers are $9, 32, 489, 98761$ and $983245$.\nYou will be given an integer $N$ with at most nine digits. Your task is to print out the smallest repetition-free number bigger than $N$. For example, for $99$ the answer is $123$, for $881$ the answer is $891$, and for $133$ the answer is $134$.\n\n-----Input:-----\nA single line with a single integer with at most $9$ digits.\n\n-----Output:-----\nA single line containing the smallest repetition-free number bigger than the given number. If there is no repetition-free number bigger than the given number, print $0$.\n\n-----Constraints:-----\n- $N$ consists of atmost $9$ digits\n\n-----Sample input-----\n99\n\n-----Sample output-----\n123\n\n Examples: \nInput: \n['99', 'Sample output', '123']\nOutput: \n []\n",
  "952": "Problem: \nChef has a string of size $N$ which consists only lowercase English alphabet. The chef doesn't like the consonant alphabet at all. So he is thinking of changing every single consonant alphabet to any vowel alphabet. There is some cost for performing this operation.\n- Number all alphabet [a,b,c,\u2026\u2026,z] as [1,2,3,\u2026..,26]\n- So if you want to change c to e then cost will be |e-c| = |5-3| = 2\nYou need the answer at what minimum cost chef can change every single consonant alphabet to any vowel alphabet. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains of a single line of input, a string of lowercase alphabet. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq |s| \\leq 10^2$\n\n-----Sample Input:-----\n2\naeiou\ndbcc  \n\n-----Sample Output:-----\n0\n6\n\n-----EXPLANATION:-----\nIn the first test case, all characters are already vowel so we don't need to change.\nIn the second tect case\n|e-d|=|5-4|=1\n|a-b|=|1-2|=1\n|a-c|=|1-3|=2\n|a-c|=|1-3|=2\n1+1+2+2=6\n\n Examples: \nInput: \n['2', 'aeiou', 'dbcc']\nOutput: \n ['0', '6']\n",
  "953": "Problem: \nChef has  $N$ doggo (dogs) , Lets number them $1$ to $N$.\n\nChef decided to build houses for each, but he soon realizes that keeping so many dogs at one place may be messy. So he decided to divide them into several groups called doggo communities. Let the total no. of groups be $K$ . In a community, paths between pairs of houses can be made so that doggo can play with each other. But there cannot be a path between two houses of different communities for sure. Chef wanted to make maximum no. of paths such that the total path is not greater then $K$.\nLet\u2019s visualize this problem in an engineer's way :)\nThe problem is to design a graph with max edge possible such that the total no. of edges should not be greater than the total no. of connected components.\n\n-----INPUT FORMAT-----\n- First line of each test case file contain $T$ , denoting total number of test cases.\n- $ith$ test case contain only one line with a single integer $N$ , denoting the number of dogs(vertex)\n\n-----OUTPUT FORMAT-----\n- For each test case print a line with a integer , denoting the maximum possible path possible.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10000$\n- $1 \\leq N \\leq 10^9$ \n\n-----Sub-Tasks-----\n- $20 Points$\n- $1 \\leq N \\leq 10^6$ \n\n-----Sample Input-----\n1\n\n4\n\n-----Sample Output-----\n2\n\n-----Explanation-----\n4 houses can be made with  like this:\n\ncommunity #1  : [1 - 2  ]\n\ncommunity #2 :  [3 - 4 ]\n\nor  [1 - 2 - 3]  , [ 4 ]\n\nIn both cases the maximum possible path is 2.\n\n Examples: \nInput: \n['1', '4']\nOutput: \n ['2']\n",
  "954": "Problem: \nChef has an old machine if the chef enters any natural number, the machine will display 1, 2, \u2026n, n-1, n-2, n-3,\u20261 series and in next line prints sum of cubes of each number in the series. Chef wants to create a computer program which can replicate the functionality of the machine. Help the chef to code.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq N \\leq 50$\n\n-----Sample Input:-----\n2\n1\n3\n\n-----Sample Output:-----\n1\n45\n\n-----EXPLANATION:-----\nFor 2) series will be 1, 2, 3, 2, 1 and the sum will be = 1 + 8 + 27 + 8+ 1\n\n Examples: \nInput: \n['2', '1', '3']\nOutput: \n ['1', '45']\n",
  "955": "Problem: \n-----Problem Statement-----\nLevy's conjecture, named after Hyman Levy, states that all odd integers greater than 5 can be represented as the sum of an odd prime number and an even semiprime. To put it algebraically, 2n + 1 = p + 2q always has a solution in primes p and q (not necessary to be distinct) for n > 2. (Source: Wikipedia)\nIn this problem, given a positive integer N (not necessary to be odd integer greater than 5). Your task is to calculate how many distinct ordered pairs (p, q) such that N = p + 2q, where p and q are primes.\n\n-----Input-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\n\nEach test case consists of exactly one line containing an integer N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000 (105)\n- 1 \u2264 N \u2264 10000 (104)\n\n-----Output-----\nFor each test case, output the number of ordered pairs (p, q) of primes such that N = p + 2q.\n\n-----Example-----\nInput:\n3\n2\n7\n11\n\nOutput:\n0\n1\n2\n\n-----Explanation-----\nCase #1: There are no ordered pairs (p, q) such that p + 2q = 2.\nCase #2: There is only one ordered pair (p, q) = (3, 2) such that p + 2q = 7.\nCase #3: There are two ordered pairs (p, q) = (7, 2), (5, 3) such that p + 2q = 11.\n\n Examples: \nInput: \n['3', '2', '7', '11']\nOutput: \n ['0', '1', '2']\n",
  "956": "Problem: \nYou are given a convex polygon $P$ with vertices $P_0, P_1, \\ldots, P_{n-1}$, each having integer coordinates. On each edge $P_{i} P_{(i+1) \\% n}$ of the polygon, choose a point $R_i$ uniformly at random. What is the expected area of the convex hull of these $n$ chosen points $R_0, R_1, \\ldots R_{n-1}$ ?\n\n-----Note-----\n- Consider the area of the convex hull as zero if it contains less than 3 vertices.\n- All the points $R_i$ are chosen independently of each other.\n- Your answer is considered correct if and only if its absolute or relative error doesn't exceed $10^{-6}$.\n\n-----Input-----\n- The first line contains $n$, the number of vertices in the convex polygon.\n- The next $n$ lines contain the coordinates of the vertices of the polygon in anti-clockwise order. \n\n-----Output-----\nFor each testcase, print the expected area of the convex hull of the $n$ randomly chosen points.\n\n-----Constraints-----\n- $3 \\leq n \\leq 10^5$\n- The absolute values of all the coordinates $\\leq 10^7$.\n- All the points in the input are distinct.\n- The described polygon $P$ is convex and the vertices of the polygon are given in anti-clockwise order. Also, no three vertices of the polygon are collinear.\n\n-----Example Input-----\n3\n0 0\n1 0\n0 1\n\n-----Example Output-----\n0.1250000000\n\n Examples: \nInput: \n['3', '0 0', '1 0', '0 1']\nOutput: \n ['0.1250000000']\n",
  "957": "Problem: \nTired of the overpopulated world, Miu - The introverted cat visits a new continent in search for a new house.  \nThere are $N$ houses lying on the X-axis.\n\nTheir positions are given by $X$$i$ , where $i$ refers to the $i$th house. ( $1 <= i <= N$ )\n\nEach of these positions are pairwise distinct \nMiu is supposed to choose one of these houses for herself.\n\nMiu defines a term - The Distance of Peace,  as the minimum distance from her house to any other house.  \nMiu wonders what is maximum Distance of Peace she can obtain. Can you help her?\n\n-----Input:-----\n- The first line of the input consists of a single integer $T$, denoting the number of test cases  \n- The first line of each test case consists of a single integer $N$ \n- The second line of each test case consists of $N$ space-separated integers\n$X$$1$ $X$$2$ $X$$3$ \u2026 $X$$N$\n\n-----Output:-----\n- For each test case print the answer in a single line, the maximum Distance of Peace Miu can obtain\n\n-----Constraints-----\n- 1 <= $T$ <= 100  \n- 2 <= $N$ <= 105 \n- -109 <= $X$$i$ <= 109 \n- Sum of $N$ over all test cases does not exceed 106 \n\n-----Subtasks-----\nSubtask #1 (30 points): \n- $N$ <= 103 \nSubtask #2 (70 points): \n- Original Constraints\n\n-----Sample Input:-----\n2\n\n6\n\n7 -1 2 13 -5 15\n\n4\n\n6 10 3 12  \n\n-----Sample Output:-----\n5\n\n3  \n\n-----EXPLANATION:-----\nTest Case 1:\n\nThe $1$st house has the maximum Distance of Peace, which is from the $3$rd house:\n$| 7 - 2 | = 5$\n\nHence, the answer is $5$\n\n Examples: \nInput: \n['2', '6', '7 -1 2 13 -5 15', '4', '6 10 3 12']\nOutput: \n ['5', '3']\n",
  "958": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq K \\leq 50$\n\n-----Sample Input:-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output:-----\n*\n*\n***\n*\n* *\n*****\n*\n* *\n*   *\n*******\n*\n* *\n*   *\n*     *\n*********   \n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '5']\nOutput: \n ['*', '*', '***', '*', '* *', '*****', '*', '* *', '*   *', '*******', '*', '* *', '*   *', '*     *', '*********']\n",
  "959": "Problem: \nYou are given an array with $N$ integers: $A[1], A[2], \\ldots, A[N]$ (where $N$ is even). You are allowed to permute the elements however you want. Say, after permuting the elements, you end up with the array $A'[1], A'[2], \\ldots, A'[N]$. Your goal is to maximize the following sum:\n|A\u2032[1]\u2212A\u2032[2]| + |A\u2032[3]\u2212A\u2032[4]| + ... + |A\u2032[N\u22121]\u2212A\u2032[N]||A\u2032[1]\u2212A\u2032[2]| + |A\u2032[3]\u2212A\u2032[4]| + ... + |A\u2032[N\u22121]\u2212A\u2032[N]|\n|A'[1] - A'[2]| \\ + \\ |A'[3] - A'[4]| \\ + \\ ... \\ + \\ |A'[N - 1] - A'[N]|\n\nHere, $|x|$ denotes the absolute value of $x$.\nYou have to print the maximum sum achievable.\n\n-----Input-----\n- The first line contains $T$, the number of test cases.\n- Each test case starts with an integer $N$ in the first line.\n- The second line of each test case contains $N$ space separated integers, denoting the values of array $A$.\n\n-----Output-----\nFor each test case, output the maximum sum achievable in a new line.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le N \\le 10^5$\n- $N$ is even\n- $|A[i]| \\le 10^9$\n- Sum of $N$ over all test cases $\\le 2 * 10^5$\n\n-----Example Input 1-----\n1\n4\n1 -3 2 -3\n\n-----Example Output 1-----\n9\n\n-----Explanation 1-----\nThe original array is {$1, -3, 2, -3$}. Suppose you permute it and get the array {$2, 1, -3, -3$}. Then the corresponding sum would be $|2 - 1| \\ + \\ |-3 - (-3)| = 1 + 0 = 1$.\nBut suppose you permute it differently and get the array {$-3, 2, 1, -3$}. Then the corresponding sum would be $|-3 - 2| \\ + \\ |1 - (-3)| = 5 + 4 = 9$. You can check that you cannot do any better, and hence the answer is 9.\n\n Examples: \nInput: \n['1', '4', '1 -3 2 -3']\nOutput: \n ['9']\n",
  "960": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1 \n1 10 \n11 100 \n1 10 11 \n100 101 110 \n111 1000 1001 \n1 10 11 100 \n101 110 111 1000 \n1001 1010 1011 1100 \n1101 1110 1111 10000 \n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '1 10', '11 100', '1 10 11', '100 101 110', '111 1000 1001', '1 10 11 100', '101 110 111 1000', '1001 1010 1011 1100', '1101 1110 1111 10000']\n",
  "962": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n21\n1\n123\n21\n1\n4321\n123\n21\n1\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['3', '2', '3', '4']\nOutput: \n ['21', '1', '123', '21', '1', '4321', '123', '21', '1']\n",
  "963": "Problem: \nIn ChefLand, there is a mountain range consisting of $N$ hills (numbered $1$ through $N$) in a straight line. Let's denote the height of the $i$-th hill from the left by $h_i$.\nAda is working on the water supply system of ChefLand. On some of the hills, she wants to place water reservoirs; then, for each reservoir, she will decide in which direction the water should flow from it \u2014 either to the left or to the right (water may not flow in both directions from the same reservoir). From a reservoir on a hill with height $h$, water flows in the chosen direction until it reaches the first hill that is strictly higher than $h$; all hills before this hill (including the hill containing the reservoir) are therefore supplied with water.\nFor example, suppose we have hills with heights $[7, 2, 3, 5, 8]$. If we place a reservoir on the hill with height $5$, and pump water from it to the left, then the hills with heights $2$, $3$ and $5$ are supplied with water.\nHelp Ada find the minimum numer of reservoirs needed to provide water to all the hills if she chooses the directions optimally.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $h_1, h_2, \\dots, h_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum required number of reservoirs.\n\n-----Constraints-----\n- $2 \\le N \\le 10^5$\n- $1 \\le h_i \\le 10^9$ for each valid $i$\n- $h_i \\neq h_j $ for any valid $i \\neq j$\n- the sum of $N$ over all test cases does not exceed $5 \\cdot 10^5$\n\n-----Example Input-----\n1\n6\n4 16 32 6 8 2\n\n-----Example Output-----\n2    \n\n-----Explanation-----\nExample case 1: We can place reservoirs on the second and third hill, pumping water to the left and right respectively.\n\n Examples: \nInput: \n['1', '6', '4 16 32 6 8 2', '']\nOutput: \n ['2    ']\n",
  "964": "Problem: \n-----Problem-----\n\nThere is an infinite one dimensional array ranging from (-infinity, infinity).A Zombie is currently at cell number 0. The zombie wants to reach cell number H. The Zombie moves in only two ways. The Zombie either\n\nMakes U steps to the right (positive side) or\n\nMakes D steps to the left (negative side).\n\nYour task is to find the minimum number of moves the Zombie require to reach the goal.\n\n-----Input-----\n\nThe first line contains the number of test cases T. Each of the next T lines contains 3 space\n\nseparated integers, H U D.\n\n-----Output-----\n\nFor each test case, output one line with an integer, the minimum number of moves required to reach H from 0. If it is impossible, print -1 instead.\n\n-----Constraints-----\n\n- \n\nT \u2264 10000\n\n- \n\n1 \u2264 H, U, D \u2264 109\n\n-----Sample Input-----\n2\n\n3 2 1\n\n3 2 2\n\n-----Sample Output-----\n3\n\n-1\n\n-----Explanation-----\n\n- \n\nIn the first sample case, first move 2 steps to the right to reach cell number 2. Then 1 step to the left  to reach cell number 1 and finally 2 more steps to the right to reach the goal. Thus 3 moves are required\n\nwhich is the minimum.\n\n- \n\nBecause both U and D are even, you will always be in an even cell.Thus there is no way to reach cell      number 3.\n\np { text-align:justify }\n\n Examples: \nInput: \n['2', '3 2 1', '3 2 2']\nOutput: \n ['3', '-1']\n",
  "965": "Problem: \nCyael is a teacher at a very famous school in Byteland and she is known by her students for being very polite to them and also to encourage them to get good marks on their tests.\nThen, if they get good marks she will reward them with candies :) However, she knows they are all very good at Mathematics, so she decided to split the candies evenly to all the students she considers worth of receiving them, so they don't fight with each other. \nShe has a bag which initially contains N candies and she intends to split the candies evenly to K students. To do this she will proceed as follows: while she has more than K candies she will give exactly 1 candy to each student until she has less than K candies. On this situation, as she can't split candies equally among all students she will keep the remaining candies to herself.\nYour job is to tell how many candies will each student and the teacher\nreceive after the splitting is performed.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case will consist of 2 space separated integers, N and K denoting the number of candies and the number of students as described above.\n\n-----Output-----\nFor each test case, output a single line containing two space separated integers, the first one being the number of candies each student will get, followed by the number of candies the teacher will get.\n\n-----Constraints-----\n-  T<=100 in each test file \n- 0 <= N,K <= 233 - 1 \n\n-----Example-----Input:\n2\n10 2\n100 3\n\nOutput:\n5 0\n33 1\n\n-----Explanation-----\nFor the first test case, all students can get an equal number of candies and teacher receives no candies at all \nFor the second test case, teacher can give 33 candies to each student and keep 1 candy to herselfUpdate:\nThere may be multiple whitespaces before, after or between the numbers in input.\n\n Examples: \nInput: \n['2', '10 2', '100 3']\nOutput: \n ['5 0', '33 1']\n",
  "966": "Problem: \nThere are N hills in a row numbered 1 through N from left to right. Each hill has a height; for each valid i, the height of the i-th hill is Hi. Chef is initially on the leftmost hill (hill number 1). He can make an arbitrary number of jumps (including zero) as long as the following conditions are satisfied:\n\n- Chef can only jump from each hill to the next hill, i.e. from the i-th hill, he can jump to the i+1-th hill (if it exists).\n- It's always possible to jump to a hill with the same height as the current hill.\n- It's possible to jump to a taller hill if it's higher than the current hill by no more than U.\n- It's possible to jump to a lower hill if it's lower than the current hill by no more than D.\n- Chef can use a parachute and jump to a lower hill regardless of its height (as long as it's lower than the current hill). This jump can only be performed at most once.\n\nChef would like to move as far right as possible. Determine the index of the rightmost hill Chef can reach.\n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains three space-separated integers N, U and D.\n- The second line contains N space-separated integers H1, H2, ..., HN.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the index of the rightmost reachable hill.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 100\n- 1 \u2264 U, D \u2264 1,000,000\n- 1 \u2264 Hi \u2264 1,000,000 for each valid i\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example-----\nInput:\n\n3\n5 3 2\n2 5 2 6 3\n5 2 3\n4 4 4 4 4\n5 2 7\n1 4 3 2 1\n\nOutput:\n\n3\n5\n1\n\n-----Explanation-----\nExample case 1: Chef can jump to second hill because it's higher by no more than U=3 than first hill, to jump to third hill Chef has to use parachute \nbecause it's lower than second hill by 3 which is more than D=2, Chef can't jump to fourth hill because it's higher than third hill by 4 which is more than U=3\nExample case 2: All hills are of the same height, so chef can reach the last hill with no problems.\nExample case 3: Chef can't jump to second hill because it's too high for him\n\n Examples: \nInput: \n['3', '5 3 2', '2 5 2 6 3', '5 2 3', '4 4 4 4 4', '5 2 7', '1 4 3 2 1']\nOutput: \n ['3', '5', '1']\n",
  "967": "Problem: \nSince due to COVID 19, India has undergone a complete 21 day lockdown. So Amol was attending an online lecture where his professor asked him to solve a question. Amol was unable to solve the question so he asked you to solve the question and give him the correct answer. \n\nThe question was asked a such that his professor gave him a number M and a list of integers of length N (i.e. A1, A2,..... AN) and you have to find out all the subsets that add up to M and the total number of subsets will be the final answer. \n\nInput: \n\u2022 The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. \n\n\u2022 The first line of each test case contains a single integer N. \n\n\u2022 The second line of each test case contains a single integer M. \n\n\u2022 The third line contains N space-separated integers A1, A2,..... AN. \n\nOutput: \nFor each test case, print a single line containing one integer \u2015 the no. of subsets that adds upto M.\n\nConstraints: \n\u2022 1\u2264T\u22645\n\n\u2022 1\u2264N\u2264100 \n\n\u2022 10\u2264M\u2264100 \n\n\u2022 1\u2264Ai\u2264100\n\nExampleInput:\n\n2\n\n4\n\n16\n\n2 4 6 10 \n\n4 \n\n20 \n\n2 8 12 10 \n\nOutput:\n\n2\n\n2\n\nExplanation:\nIn the 1st example there are two subsets {2,4,10} and {6,10} that adds upto 16 so the output is 2.\n\n Examples: \nInput: \n['2', '4', '16', '2 4 6 10', '4', '20', '2 8 12 10']\nOutput: \n ['2', '2']\n",
  "968": "Problem: \nYou are given a rooted tree on N vertices. The nodes are numbered from 1 to N, and Node 1 is the root. Each node u has an associated value attached to it: Au.\nFor each vertex v, we consider the path going upwards from v to the root. Suppose that path is v1, v2, .., vk, where v1 = v and vk = 1. The cost of any node on this path is equal to the minimum value among all the nodes to its left in the path sequence, including itself. That is, cost(vi) = min1 <= j <= i{Avj}. And the cost of the path is the sum of costs of all the nodes in it.\nFor every node in the tree, find the cost of the path from that node to the root.\n\n-----Input-----\n- The first line of the input contains a single integer, N, denoting the number of nodes in the tree.\n- The next line contains N-1 integers, the i-th of which denotes the parent of node i+1.\n- The next line contains N integers, the i-th of which denotes Ai.\n\n-----Output-----\nOutput a single line containing N integers, the i-th of which should be the cost of the path from node i to the root.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 100,000\n- -1,000,000,000 \u2264 Av \u2264 1,000,000,000\n\n-----Subtasks-----\n- Subtask #1 (30 points): 1 \u2264 N \u2264 2000\n- Subtask #2 (70 points): Original constraints.\n\n-----Example-----\nInput:\n8\n1 1 1 1 5 8 6\n1 2 3 4 5 15 70 10\n\nOutput: \n1 3 4 5 6 21 96 26\n\n-----Explanation-----\nFor example, take a look at the path from vertex 7: The path is 7 -> 8 -> 6 -> 5 -> 1.\nCost(7) has no choice but to be A7. So Cost(7) = 70.\nCost(8) will be minimum of A7 and A8, which turns out to be A8. So Cost(8) = 10.\nCost(6) = minimum {A7, A8, A6} = minimum {70, 10, 15} = 10.\nCost(5) = minimum {70, 10, 15, 5} = 5.\nCost(1) = minimum {70, 10, 15, 5, 1} = 1. \nSo, the cost of the path from 7 to the root is 70 + 10 + 10 + 5 + 1 = 96.\n\n Examples: \nInput: \n['8', '1 1 1 1 5 8 6', '1 2 3 4 5 15 70 10']\nOutput: \n ['1 3 4 5 6 21 96 26']\n",
  "969": "Problem: \nYou might have heard about our new goodie distribution program aka the \"Laddu Accrual System\". This problem is designed to give you a glimpse of its rules. You can read the page once before attempting the problem if you wish, nonetheless we will be providing all the information needed here itself. \n\nLaddu Accrual System is our new goodie distribution program. In this program, we will be distributing Laddus in place of goodies for your winnings and various other activities (described below), that you perform on our system. Once you collect enough number of Laddus, you can then redeem them to get yourself anything from a wide range of CodeChef goodies.  \n\nLet us know about various activities and amount of laddus you get corresponding to them.\n\n- Contest Win (CodeChef\u2019s Long, Cook-Off, LTIME, or any contest hosted with us) : 300 + Bonus (Bonus = 20 - contest rank). Note that if your rank is > 20, then you won't get any bonus.\n- Top Contributor on Discuss : 300\n- Bug Finder\t: 50 - 1000 (depending on the bug severity). It may also fetch you a CodeChef internship! \n- Contest Hosting\t : 50 \n\nYou can do a checkout for redeeming laddus once a month. The minimum laddus redeemable at Check Out are 200 for Indians and 400 for the rest of the world.\n\nYou are given history of various activities of a user. The user has not redeemed any of the its laddus accrued.. Now the user just wants to redeem as less amount of laddus he/she can, so that the laddus can last for as long as possible. Find out for how many maximum number of months he can redeem the laddus.\n\n-----Input-----\n- The first line of input contains a single integer T denoting number of test cases\n- For each test case:\n\t\n- First line contains an integer followed by a string denoting activities, origin respectively, where activities denotes number of activities of the user, origin denotes whether the user is Indian or the rest of the world. origin can be \"INDIAN\" or \"NON_INDIAN\".\n- For each of the next activities lines, each line contains an activity. \n\n\t\t\tAn activity can be of four types as defined above. \n\t\t\t\n- Contest Win : Input will be of form of CONTEST_WON rank, where rank denotes the rank of the user. \n- Top Contributor : Input will be of form of TOP_CONTRIBUTOR.\n- Bug Finder : Input will be of form of BUG_FOUND severity, where severity denotes the severity of the bug. \n- Contest Hosting : Input will be of form of CONTEST_HOSTED.\n\n-----Output-----\n- For each test case, find out the maximum number of months for which the user can redeem the laddus accrued.\n\n-----Constraints-----\n- 1 \u2264 T, activities \u2264 100\n- 1 \u2264 rank \u2264 5000\n- 50 \u2264 severity \u2264 1000\n\n-----Subtasks-----\nThere is only a single subtask with 100 points.\n\n-----Example-----\nInput:\n2\n4 INDIAN\nCONTEST_WON 1\nTOP_CONTRIBUTOR\nBUG_FOUND 100\nCONTEST_HOSTED\n4 NON_INDIAN\nCONTEST_WON 1\nTOP_CONTRIBUTOR\nBUG_FOUND 100\nCONTEST_HOSTED\n\nOutput:\n3\n1\n\n-----Explanation-----\nIn the first example, \n\n- For winning contest with rank 1, user gets 300 + 20 - 1 = 319 laddus. \n- For top contributor, user gets 300 laddus. \n- For finding a bug with severity of 100, user gets 100 laddus. \n- For hosting a contest, user gets 50 laddus. \n\nSo, overall user gets 319 + 300 + 100 + 50 = 769 laddus.\nNow, the user is an Indian user, he can redeem only 200 laddus per month. So, for first three months, he will redeem 200 * 3 = 600 laddus. The remaining 169 laddus, he can not redeem as he requires at least 200 laddues in a month to redeem. \n\nSo, answer is 3.\n\nIn the second example, user is a non-Indian user, he can redeem 400 laddues per month. So, in the first month, he will redeem 400 laddus. The remaining 369 laddus, he can not redeem as he requires at least 400 laddues in a month to redeem. \n\nSo, answer is 1.\n\n Examples: \nInput: \n['2', '4 INDIAN', 'CONTEST_WON 1', 'TOP_CONTRIBUTOR', 'BUG_FOUND 100', 'CONTEST_HOSTED', '4 NON_INDIAN', 'CONTEST_WON 1', 'TOP_CONTRIBUTOR', 'BUG_FOUND 100', 'CONTEST_HOSTED']\nOutput: \n ['3', '1']\n",
  "970": "Problem: \nYou may have helped Chef and prevented Doof from destroying the even numbers. But, it has only angered Dr Doof even further. However, for his next plan, he needs some time. Therefore, Doof has built $N$ walls to prevent Chef from interrupting him. You have to help Chef by telling him the number of walls he needs to destroy in order to reach Dr Doof.\nFormally, the whole area can be represented as the first quadrant with the origin at the bottom-left corner. Dr. Doof is located at the origin $(0, 0)$. There are $N$ walls, the i-th wall is a straight line segment joining the points $(a_i, 0)$ and $(0, a_i)$. For every initial position of Chef $(x_j, y_j)$, find the number of walls he needs to break before reaching Doof. Obviously, chef can't start from a point on the wall. Therefore, if $(x_j, y_j)$ lies on any of the given walls, print $-1$ in a new line.\n\n-----Input-----\n- First line contains $T$, denoting the number of testcases.\n- The first line of every test case contains a single integer $N$ denoting the number of walls Dr Doof has built.\n- The next line contains $N$ space separated distinct integers each denoting $a_i$.\n- The next line contains a single integer $Q$ denoting the number of times Chef asks for your help.\n- The next $Q$ lines contains two space separated integers $x_j$ and $y_j$, each denoting the co-ordinates of the starting point of Chef.\n\n-----Output-----\nFor each query, print the number of walls Chef needs to break in order to reach Dr Doof in a separate line. If Chef tries to start from a point on any of the walls, print $-1$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 2 * 10^2$\n- $1 \\leq N, Q \\leq 2 * 10^5$\n- $1 \\leq a_i \\leq 10^9$\n- $0 \\leq x_j, y_j \\leq 10^9$\n- $a_1 < a_2 < a_3 < .... < a_N$\n- Sum of $N$ and $Q$ over all testcases for a particular test file does not exceed $2 * 10^5$\n\n-----Sample Input-----\n1\n2\n1 3\n5\n0 0\n2 0\n0 4\n1 1\n1 2\n\n-----Sample Output-----\n0\n1\n2\n1\n-1\n\n-----Explanation-----\nThe sample input can be represented by the graph given below:\n\nIf Chef starts from $(0, 0)$, he can reach Dr Doof without destroying any wall.\n\nIf Chef starts from $(2, 0)$, he has to destroy the $1st$ wall.\n\nIf Chef starts from $(0, 4)$, he has to destroy both the walls.\n\nIf Chef starts from $(1, 1)$, he has to destroy the $1st$ wall.\n\nAs $(1, 2)$ lies on the second wall, the answer is $-1$ for the last query.\n\n Examples: \nInput: \n['1', '2', '1 3', '5', '0 0', '2 0', '0 4', '1 1', '1 2']\nOutput: \n ['0', '1', '2', '1', '-1']\n",
  "971": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. You want all the elements of the sequence to be equal. In order to achieve that, you may perform zero or more moves. In each move, you must choose an index $i$ ($1 \\le i \\le N$), then choose $j = i-1$ or $j = i+1$ (it is not allowed to choose $j = 0$ or $j = N+1$) and change the value of $A_i$ to $A_j$ \u2014 in other words, you should replace the value of one element of the sequence by one of its adjacent elements.\nWhat is the minimum number of moves you need to make in order to make all the elements of the sequence equal?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum required number of moves.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le A_i \\le 100$ for each valid $i$\n\n-----Example Input-----\n3\n5\n1 1 1 1 1\n4\n9 8 1 8\n2\n1 9\n\n-----Example Output-----\n0\n2\n1\n\n-----Explanation-----\nExample case 1: No moves are needed since all the elements are already equal.\nExample case 3: We can perform one move on either $A_1$ or $A_2$.\n\n Examples: \nInput: \n['3', '5', '1 1 1 1 1', '4', '9 8 1 8', '2', '1 9']\nOutput: \n ['0', '2', '1']\n",
  "972": "Problem: \n-----\nHALLOWEEN EVE\n-----\n\nIn some other world, today is Halloween Eve.There are N trees planted in Mr. Smith\u2019s\ngarden. The height of the i-th tree (1\u2264i\u2264N) is h i meters.\nHe decides to choose K trees from these trees and decorate them with electric lights.\nTo make the scenery more beautiful, the heights of the decorated trees should be as\nclose to each other as possible.\n\n\t\n\nMore specifically, let the height of the tallest decorated tree be hmax meters, and the\nheight of the shortest decorated tree be hmin meters.\nThe smaller the value hmax\u2212hmin is, the better. What is the minimum possible value of\nhmax\u2212hmin?\n\n\t\t\n\t\t\n\n-----Constraints-----\n\n\t    2\u2264K< N \u2264105 \n\n1\u2264hi\u2264109\n\nhi is an integer\n\t\n\n-----Input Format-----\n\nInput is given from Standard Input in the following format:\n\nN K \n\nh1 \n\nh2 \n\n: \n\nhN\n\n-----Output-----\n\nPrint the minimum possible value of hmax\u2212hmin.\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n5 3\n10\n15\n11\n14\n12\n\nOutput:\n\n2\n\nExplanation\n\nIf we decorate the first, third and fifth trees, hmax=12,hmin=10 so hmax\u2212hmin=2. This is\noptimal.\n\t\t\n\t\t\n\n Examples: \nInput: \n['5 3', '10', '15', '11', '14', '12']\nOutput: \n ['2']\n",
  "973": "Problem: \nYou are given an $array$ of size $N$ and an integer $K$ ( $N > 1 , K > 0$ ).\nEach element in the array can be incremented by $K$ or decremented by $K$ $at$ $most$ $once$.\nSo there will be  $3^n$ possible combinations of final array. (As there are 3 options for every element).\n\nOut of these combinations, you have to select a combination, in which the $absolute$ difference between the largest and the smallest element is $maximum$.\nYou have to print the $maximum$ $absolute$ $difference$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a two lines of input\n- First line contains two integers $N, K$. \n- Second line contains $N$ space separated integers.\n\n-----Output:-----\nFor each testcase, output the maximum absolute difference that can be achieved on a new line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq N \\leq 1000$\n- $1 \\leq K , arr[i]  \\leq 10000$\n$NOTE$:  Large  input files, Use of fastio is recommended.\n\n-----Sample Input:-----\n2\n\n4 3\n\n4 2 5 1\n\n3 5\n\n2 5 3\n\n-----Sample Output:-----\n10\n\n13\n\n Examples: \nInput: \n['2', '4 3', '4 2 5 1', '3 5', '2 5 3']\nOutput: \n ['10', '13']\n",
  "974": "Problem: \nMr. Pr and Ms. Ad are at $a$ and $b$ respectively on an infinite number line. Mr. Pr wants to meet Ms. Ad.\nMr. Pr can choose to move  $c$ or $d$ units in 1 second. If Mr. Pr moves $c$ units then Ms. Ad will move $d$ units and vice versa. (Both of them always moved in positive x-direction)\nYou have to determine if Mr. Pr can meet with Ms. Ad after some integral amount of time, given that Mr. Pr chooses optimally. Note that meeting after a fractional amount of time does not count.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains four space separated integers, $a$, $b$, $c$, and $d$.\n\n-----Output:-----\n- For each test case, output a single line containing \"YES\" if Mr. Pr meets with Ms. Ad, otherwise \"NO\".\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq a,b,c,d \\leq 10^9$\n\n-----Sample Input:-----\n2\n3 4 1 2\n10 20 3 7\n\n-----Sample Output:-----\nYES\nNO\n\n-----Explanation:-----\nIn the first test case, Mr. Pr will move 2 units in the first second and Ms. Ad moves 1 unit simultaneously and they meet. \nIn the second test case, it is impossible to meet (fractional time is not allowed).\n\n Examples: \nInput: \n['2', '3 4 1 2', '10 20 3 7']\nOutput: \n ['YES', 'NO']\n",
  "975": "Problem: \nThe ZCO scholarship contest offers scholarships to first time ZCO participants. You are participating in it for the first time. So you want to know the number of participants who'll get the scholarship.\nYou know that the maximum number of scholarships offered is $R$ and there are a total of $N$ participants numbered from $1$ to $N$. Out of these, you know the set of people (denoted by $X$) who you know, had participated in previous year ZCOs and hence, they shall not get the scholarship.\nFurther, as the world isn't free from plagiarism, so is the case with the scholarship contest. And from your secret sources, you also know the set of people (denoted by set $Y$) who were involved in plagiarism and therefore aren't eligible for scholarship either.\nFind out the number of participants who shall get the scholarship.\nPS: Don't ask how so many scholarships are being offered when you see the constraints on $R$. You never questioned it when in mathematics classes, some person bought $80$ watermelons twice just to compare them and save $\u20b91$. \n\n-----Input:-----\n- The first line will contain a single integer, $T$, the number of testcases. Then the testcases follow. \n- The first line of each test case contains four integers; $N$, $R$, $|X|$ and $|Y|$ denoting the number of participants, maximum number of scholarships offered, number of old participants, and the number of participants involved in plagiarism, respectively.\n- The second line of each test case contains $|X|$ space separated integers $x_1, x_2 \\ldots x_{|X|}$ denoting the indices of people who participated in previous years. If $X$ is empty, this line is skipped and no empty line is in the input.\n- The third line of each test case contains $|Y|$ space separated integers $y_1, y_2 \\ldots y_{|Y|}$  denoting the indices of people who are involved in plagiarism. If $Y$ is empty, this line is skipped and no empty line is in input.\n\n-----Output:-----\nFor each testcase, print a single integer in a new line, denoting the number of participants who shall get the scholarship.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^{15}$\n- $0 \\leq R \\leq 10^{15}$\n- $0 \\leq |X|, |Y| \\leq min(N, 2*10^5)$\n- $1 \\leq x_i, y_i \\leq N$\n- All $x_i$ are distinct\n- All $y_i$ are distinct\n- Sum of $|X|$ over all test cases does not exceed $5*10^5$\n- Sum of $|Y|$ over all test cases does not exceed $5*10^5$\n\n-----Subtasks-----\n- 20 points : $1 \\leq N \\leq 10^3$, and the sum of $N$ over all test cases does not exceed $3*10^3$\n- 30 points : $1 \\leq N \\leq 2*10^5$, and the sum of $N$ over all test cases does not exceed $5*10^5$\n- 50 points: Original constraints\n\n-----Sample Input:-----\n3\n5 3 0 1\n4\n10 2 4 6\n3 1 7 6\n4 3 1 5 9 7\n10 4 4 6\n3 1 7 6\n4 3 1 5 9 7\n\n-----Sample Output:-----\n3\n2\n3\n\n-----EXPLANATION:-----\n- In the first testcase, only participant $4$ is involved in plagiarism, and thus not eligible for the scholarship. No user has participated in previous years, and so no empty line is there in the sample. All participants except participant $4$ are eligible for the scholarship, but only three of them get it because $R = 3$.\n- Both second and third testcases are the same, except for $R$. In both samples, only participants $2$, $8$ and $10$ are eligible for scholarships.\n- In the second testcase, since the maximum number of scholarships is $2$, only $2$ participants get scholarships.\n- In the third testcase, all three eligible participants get scholarships.\n\n Examples: \nInput: \n['3', '5 3 0 1', '4', '10 2 4 6', '3 1 7 6', '4 3 1 5 9 7', '10 4 4 6', '3 1 7 6', '4 3 1 5 9 7']\nOutput: \n ['3', '2', '3']\n",
  "977": "Problem: \nChef recently graduated Computer Science in university, so he was looking for a job. He applied for several job offers, but he eventually settled for a software engineering job at ShareChat. Chef was very enthusiastic about his new job and the first mission assigned to him was to implement a message encoding feature to ensure the chat is private and secure.\nChef has a message, which is a string $S$ with length $N$ containing only lowercase English letters. It should be encoded in two steps as follows: \n- Swap the first and second character of the string $S$, then swap the 3rd and 4th character, then the 5th and 6th character and so on. If the length of $S$ is odd, the last character should not be swapped with any other.\n- Replace each occurrence of the letter 'a' in the message obtained after the first step by the letter 'z', each occurrence of 'b' by 'y', each occurrence of 'c' by 'x', etc, and each occurrence of 'z' in the message obtained after the first step by 'a'.\nThe string produced in the second step is the encoded message. Help Chef and find this message.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains the message string $S$.\n\n-----Output-----\nFor each test case, print a single line containing one string \u2014 the encoded message.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 100$\n- $|S| = N$\n- $S$ contains only lowercase English letters\n\n-----Example Input-----\n2\n9\nsharechat\n4\nchef\n\n-----Example Output-----\nshizxvzsg\nsxuv\n\n-----Explanation-----\nExample case 1: The original message is \"sharechat\". In the first step, we swap four pairs of letters (note that the last letter is not swapped), so it becomes \"hsraceaht\". In the second step, we replace the first letter ('h') by 's', the second letter ('s') by 'h', and so on, so the resulting encoded message is \"shizxvzsg\".\n\n Examples: \nInput: \n['2', '9', 'sharechat', '4', 'chef']\nOutput: \n ['shizxvzsg', 'sxuv']\n",
  "978": "Problem: \nChuck Norris just created a universe. He has already started the space-time continuum. Now he needs to fill the universe with matter and antimatter for the avatar cycle to start.\nHe created $N$ distinct pairs of elementary matter and their corresponding antimatter particles. Annihilations happen only when a matter particle is placed adjacent to its corresponding antimatter particle and not when it is placed adjacent to any other matter or antimatter particle. Thus for every distinct particle of matter in the universe there exist one and only one antimatter particle that can cause its annihilation.\nChuck Norris wants to arrange all the particles in a 2-D circular pattern such that a matter particle is placed adjacent only to antimatter particles and vice versa. In how many distinct ways can he arrange them, regardless of the orientation of the arrangement, such that total annihilation of ALL particles doesn't take place i.e., $at least$ $one$ pair remain unannihilated after he arranges them in a circular pattern.\nSince the total number of distinct ways can be very large, print the result modulo $1000000007$.\n\n-----Input:-----\n- First line has single integer $T$, i.e., the number of test cases\n- The first and only line of each test case has a single integer $N$ i.e., number of distinct pairs of matter-antimatter particles.\n\n-----Output:-----\n- For of each test case print a single line, i.e., total number of distinct ways.\n\n-----Constraints :-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq N \\leq 10^7$\n\n-----Subtasks-----\n- \nSubtask 1 : 10 pts\n- $1 \\leq T \\leq 100$\n- $0 \\leq N \\leq 100$ \n- \nSubtask 2 : 90 pts\n- Original Constraints\n\n-----Sample input :-----\n1\n3\n\n-----Sample output :-----\n8\n\n-----Explanation:-----\nFor 3 pairs of elementary matter and their corresponding  antimatter particles, Chuck Norris can arrange them in 8 ways such that at least one pair of matter antimatter particles survive annihilation.\n\n Examples: \nInput: \n['1', '3', 'Sample output :', '8']\nOutput: \n []\n",
  "979": "Problem: \nYou are given a grid of size M x N, where each square is colored with some random color among K colors with each having equal probability.\n\nA Good Rectangle is defined as one where all squares lying on the inner border are of the same color.\n\nWhat is the expected number of Good Rectangles in the given grid.\n\n-----Input-----\n\n- \nFirst Line contains M, N, K\n\n-----Output-----\nA single value rounded off to the nearest Integer corresponding to the required answer.\n\n-----Constraints-----\n-  1 <= N <= 105 \n-  1 <= M <= 105 \n-  1 <= K <= 105 \n\n-----Example-----\nInput:\n1 3 1\nOutput:\n6\n\n Examples: \nInput: \n['1 3 1']\nOutput: \n ['6']\n",
  "980": "Problem: \nJem is famous for his laziness at school. He always leaves things to last minute. Now Jem has N problems in the assignment of \"Advanced topics in algorithm\" class to solved. The assignment is due tomorrow and as you may guess he hasn't touch any of the problems. Fortunately he got a plan as always.\n\nThe first step will be buying a pack of Red Bull and then to work as hard as he can. Here is how he is going to spend the remaining time:\n\nJem will not take a break until he finishes at least half of the remaining problems. Formally, if N is even then he will take he first break after finishing N / 2 problems. If N is odd then the break will be after he done (N + 1) / 2 problems. Each of his break will last for B minutes. Initially, he takes M minutes in solving a problem, after each break he will take twice more time in solving a problem, i.e. 2 * M minutes per problem after the first break.\n\nJem will start working soon and ask you to help him calculate how much time it will take until he finish the last problem!\n\n-----Input-----\n\nThe first line contains a single integer T represents the number of test cases in the input.\nEach line in the next T line contains three integers N, B and M represents a test case.\n\n-----Output-----\n\nFor each test case output a single line containing an integer represent how much time Jem will need (in minutes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, B, M \u2264 108\n\n-----Example-----\nInput:\n2\n9 1 2\n123456 123456 123456\n\nOutput:\n45\n131351258112\n\n-----Explanation-----\n\nIn the first test case, Jem will proceed as below:\n\n- Initially, Jem has 9 problems to solve. since it is an odd number, Jem will finish the first (9 + 1) / 2 = 5 problems with speed of 2 minutes/problem.\n- After that, Jem takes 1 minute break.\n- Now he has 4 problems to solve, which is an even number, so Jem will solve the next 4 / 2 = 2 problems. his speed after the first break has now became 4 minutes/problem.\n\n- Again, he takes a 1 minute break.\n- he has now 2 problems left so he do one more problem in 8 minutes.\n- He takes 1 minute break.\n- he solves the last problem in 16 minutes.\n\nSo, Jem will need time = 5 \u00d7 2 + 1 + 2 \u00d7 4 + 1 + 8 + 1 + 16  = 45\n\n Examples: \nInput: \n['2', '9 1 2', '123456 123456 123456']\nOutput: \n ['45', '131351258112']\n",
  "981": "Problem: \nChef is very fond of horses. He enjoys watching them race. As expected, he has a stable full of horses. He, along with his friends, goes to his stable during the weekends to watch a few of these horses race. Chef wants his friends to enjoy the race and so he wants the race to be close. This can happen only if the horses are comparable on their skill i.e. the difference in their skills is less.\nThere are N horses in the stable. The skill of the horse i is represented by an integer S[i]. The Chef needs to pick 2 horses for the race such that the difference in their skills is minimum. This way, he would be able to host a very interesting race. Your task is to help him do this and report the minimum difference that is possible between 2 horses in the race.\n\n-----Input:-----\nFirst line of the input file contains a single integer T, the number of test cases.\n\nEvery test case starts with a line containing the integer N.\n\nThe next line contains N space separated integers where the i-th integer is S[i].\n\n-----Output:-----\nFor each test case, output a single line containing the minimum difference that is possible.\n\n-----Constraints:-----\n1 \u2264 T \u2264 10\n2 \u2264 N \u2264 5000\n1 \u2264 S[i] \u2264 1000000000\n\n-----Example:-----Input:\n1\n5\n4 9 1 32 13\n\nOutput:\n3\n\nExplanation: The minimum difference can be achieved if we pick horses with skills 1 and 4 for the race.\n\n Examples: \nInput: \n['1', '5', '4 9 1 32 13']\nOutput: \n ['3']\n",
  "982": "Problem: \nSpecial Numbers \nMani has encountered a problem on Special numbers in Bytecode. A number S is called a special number if its digits are in an arithmetic progression modulo 10. He has an array consisting of all numbers from 1 to N and needs your help to find the number of special numbers in the array. He has promised you a significant share of the prize money if he wins the contest :p \nNote:\n123,99,802 are special numbers.\n146 is not a special number \n\n-----Input-----\n\nInput consists of 1 integer - the value of N\n\n-----Output-----\nPrint one integer in the first line - the solution to this problem\n\n-----Constraints-----\n- 1 \u2264 Number of digits in N \u2264 105\n\nExample\n\nInput\n\n123\n\nOutput\n\n102\n\n Examples: \nInput: \n['123']\nOutput: \n ['102']\n",
  "984": "Problem: \nGiven an array $A$ of size $N$ , count number of pairs of index $i,j$ such that $A_i$ is even, $A_j$ is odd and $i < j$\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases.   \n- The first line of each test case contains integer $N$.    \n- The second line of each test case contains $N$ space separated integers $A_i$. \n\n-----Output-----\nFor each test case, print a single line containing an integer denoting number of pairs.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 10^5$ \n- $1 \\le A_i \\le 10^9$\n- Sum of $N$ over all test cases doesn't exceed $10^6 $ \n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $2 \\le N \\le 100$ \nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n4\n1 2 1 3\n5\n5 4 1 2 3\n\n-----Example Output-----\n2\n3\n\n-----Explanation-----\nExample case 1:$(A_2,A_3)$ and $(A_2,A_4)$ . \nExample case 2:$(A_2,A_3)$ , $(A_2,A_5)$ and $(A_4,A_5)$  .\n\n Examples: \nInput: \n['2', '4', '1 2 1 3', '5', '5 4 1 2 3']\nOutput: \n ['2', '3']\n",
  "985": "Problem: \nThis problem is about sequences of positive integers $a_1,a_2,...,a_N$. A subsequence of a sequence is anything obtained by dropping some of the elements. For example, $3,7,11,3$ is a subsequence of $6,3,11,5,7,4,3,11,5,3$ , but $3,3,7$ is not a subsequence of $6,3,11,5,7,4,3,11,5,3$ .\nA fully dividing sequence is a sequence $a_1,a_2,...,a_N$ where $a_i$ divides $a_j$ whenever $i < j$. For example, $3,15,60,720$ is a fully dividing sequence.\nGiven a sequence of integers your aim is to find the length of the longest fully dividing subsequence of this sequence.\nConsider the sequence $2,3,7,8,14,39,145,76,320$\nIt has a fully dividing sequence of length $3$, namely $2,8,320$, but none of length $4$ or greater.\nConsider the sequence $2,11,16,12,36,60,71,17,29,144,288,129,432,993$.\nIt has two fully dividing subsequences of length $5$,\n- $2,11,16,12,36,60,71,17,29,144,288,129,432,993$ and\n- $2,11,16,12,36,60,71,17,29,144,288,129,432,993$\nand none of length $6$ or greater.\n\n-----Input:-----\nThe first line of input contains a single positive integer $N$ indicating the length of the input sequence. Lines $2,...,N+1$ contain one integer each. The integer on line $i+1$ is $a_i$.\n\n-----Output:-----\nYour output should consist of a single integer indicating the length of the longest fully dividing subsequence of the input sequence.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a_i \\leq 1000000000$\n\n-----Sample input 1:-----\n9\n2 \n3 \n7 \n8 \n14 \n39 \n145 \n76 \n320\n\n-----Sample output 1:-----\n3\n\n-----Sample input 2:-----\n14\n2\n11 \n16 \n12 \n36 \n60 \n71 \n17 \n29 \n144 \n288 \n129 \n432 \n993\n\n-----Sample output 2:-----\n5\n\n Examples: \nInput: \n['9', '2', '3', '7', '8', '14', '39', '145', '76', '320', 'Sample output 1:', '3', 'Sample input 2:', '14', '2', '11', '16', '12', '36', '60', '71', '17', '29', '144', '288', '129', '432', '993', 'Sample output 2:', '5']\nOutput: \n []\n",
  "987": "Problem: \nBack in 2015, Usain Bolt announced that he'll be retiring after the 2017 World Championship. Though his final season did not end gloriously, we all know that he is a true legend and we witnessed his peak during 2008 - 2013. \nPost retirement, Usain Bolt is still leading an adventurous life. He's exploring the unexplored parts of the globe. But sometimes he gets bored, and reads questions asked about him on Quora. One such question he read was, \"Who would win a race between Usain Bolt and a tiger if the race is on a straight line track and the tiger is $distancetoBolt$ meters behind Bolt? The finishing point is $finish$ meters away from Bolt's starting position. The tiger starts with an initial speed of $0$ $meter/second$, and will accelerate itself with $tigerAccelaration$ $m/s^2$. Bolt can run with a constant speed of $boltSpeed$ $m/s$ from start to finish. Given these values, find out who will win the race - Bolt or the tiger? \"\nNote that Bolt will win the race if and only if he touches the finishing line before the tiger touches it. If both of them finish together, the tiger is announced as the winner since Bolt was given an initial advantage. See the figure below for more clarity.\n\nSince Bolt was busy practicing in the tracks during his Physics school classes, he is asking for your help to solve the question. Can you please help him?\nHe just remembers two formulae from the class, and thinks that they will be useful to you:\n$Displacement (S) $ = $ut$ +$ (1/2)at^2$ where $u$ is the initial velocity , #$ $is the acceleration and $t$ is the time taken.\n$Velocity$ = $Displacement /Time$\n\n-----Input:-----\n- The first line will contain $T$, the number of testcases. Then the description of each test case follow. \n- Each test case contains 4 integers $finish, distancetoBolt, tigerAccelaration, boltSpeed$. \n\n-----Output:-----\nFor each testcase, output in a single line, the word \"Bolt\" or \"Tiger\" without quotes, depending on whether Bolt wins or the tiger wins.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq finish\\leq 10^5$\n- $1 \\leq distancetoBolt\\leq 10^5$\n- $1 \\leq tigerAccelaration\\leq 10^5$\n- $1 \\leq boltSpeed\\leq 10^5$\n\n-----Sample Input:-----\n2\n10 100 10 10\n100 10 5 10\n\n-----Sample Output:-----\nBolt\nTiger\n\n Examples: \nInput: \n['2', '10 100 10 10', '100 10 5 10']\nOutput: \n ['Bolt', 'Tiger']\n",
  "988": "Problem: \nYou are given a sequence of non-negative integers $A_1, A_2, \\ldots, A_N$. At most once, you may choose a non-negative integer $X$ and for each valid $i$, change $A_i$ to $A_i \\oplus X$ ($\\oplus$ denotes bitwise XOR).\nFind the minimum possible value of the sum of all elements of the resulting sequence.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum possible sum.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $1 \\le N \\le 10^3$\n- $1 \\le A_i \\le 10^3$ for each valid $i$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n3\n5\n2 3 4 5 6\n4\n7 7 7 7\n3\n1 1 3\n\n-----Example Output-----\n14\n0\n2\n\n-----Explanation-----\nExample case 1: If we choose $X = 6$, the sequence becomes $(4, 5, 2, 3, 0)$.\nExample case 2: We can choose $X = 7$ to make all elements of the resulting sequence equal to $0$.\nExample case 3: We can choose $X = 1$. The sequence becomes $(0, 0, 2)$, with sum $2$.\n\n Examples: \nInput: \n['3', '5', '2 3 4 5 6', '4', '7 7 7 7', '3', '1 1 3']\nOutput: \n ['14', '0', '2']\n",
  "989": "Problem: \nChef and Paja are bored, so they are playing an infinite game of ping pong. The rules of the game are as follows:\n- The players play an infinite number of games. At the end of each game, the player who won it scores a point.\n- In each game, one of the players serves. Chef serves in the first game.\n- After every $K$ points are scored (regardless of which players scored them), i.e. whenever $K$ games have been played since the last time the serving player changed, the player that serves in the subsequent games changes: if Chef served in the game that just finished, then Paja will serve in the next game and all subsequent games until the serving player changes again; if Paja served, then Chef will serve.\nThe players got a little too caught up in the game and they forgot who is supposed to serve in the next game. Will you help them determine that? So far, Chef has scored $X$ points and Paja has scored $Y$ points.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains three space-separated integers $X$, $Y$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Chef\" if Chef is supposed to serve next or \"Paja\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $0 \\le X, Y \\le 10^9$\n- $1 \\le K \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n1 3 3\n5 7 2\n38657 76322 564\n\n-----Example Output-----\nPaja\nChef\nPaja\n\n-----Explanation-----\nExample case 1: Chef served for the first three games, after that Paja started serving. He only served in one game, so he is supposed to serve next.\n\n Examples: \nInput: \n['3', '1 3 3', '5 7 2', '38657 76322 564']\nOutput: \n ['Paja', 'Chef', 'Paja']\n",
  "990": "Problem: \nTheatre Square in the capital city of Berland has a rectangular shape with the size n\u2009\u00d7\u2009m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a\u2009\u00d7\u2009a.\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed number of flagstones in new line.\nExamples\ninput\n6 6 4\noutput\n4\n\n Examples: \nInput: \n['s', 'input', '6 6 4', 'output', '4']\nOutput: \n []\n",
  "992": "Problem: \nJanuary and February are usually very cold in ChefLand. The temperature may reach -20 and even -30 degrees Celsius. Because of that, many people seal up windows in their houses.\nSergey also lives in ChefLand. He wants to seal the window in his house. The window has the shape of a   simple convex polygon with N vertices.\nFor the sealing, there are M kinds of sticky stripes, which are sold in the shops. The stripe of the ith type has the length of Li millimeters and the cost of Ci rubles.\nThe sealing process consists in picking the stripe and sticking it on the border of the window. The stripe can't be cut (it is made of very lasting material) and can only be put straight, without foldings. It is not necessary to put the strip strictly on the window border, it can possibly extend outside the border side of window too (by any possible amount). The window is considered sealed up if every point on its' border is covered with at least one stripe.\nNow Sergey is curious about the stripes he needs to buy. He wonders about the cheapest cost, at which he can seal his window. Please help him.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of number of vertices in the polygon denoting Sergey's window.\nEach of the following N lines contains a pair of space-separated integer numbers Xi Yi, denoting the coordinates of the ith points.\nThe following line contains a single integer M denoting the number of types of sticky stripe which is sold in the shop.\nEach of the following M lines contains a pair of space-separated integers Li Ci denoting the length and the cost of the sticky stripe of the ith type respectively.\n\n-----Output-----\nFor each test case, output a single line containing the minimum cost of sealing up the window.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- The coordinates of the window are given either in clockwise or in a counter-clockwise order.\n- No three or more vertices lie on the same line (i.e. are collinear).\n- 0 \u2264 Xi, Yi \u2264 106\n- 1 \u2264 Li, Ci \u2264 106\n\n-----Subtasks-----\n- Subtask #1 (17 points): 3 \u2264 N \u2264 10,  M = 1\n- Subtask #2 (24 points): 3 \u2264 N \u2264 42, M \u2264 2\n- Subtask #3 (59 points): 3 \u2264 N \u2264 2000, 1 \u2264 M \u2264 10\n\n-----Example-----\nInput:1\n4\n0 0\n1000 0\n1000 2000\n0 2000\n2\n1000 10\n2000 15\n\nOutput:50\n\n-----Explanation-----\nExample case 1. In this case, Sergey's window is a rectangle with the side lengths of 1000 and 2000. There are two types of the sticky stripes in the shop - the one of the length 1000 with the cost of 10 rubles and with the length of 2000 and the cost of 15 rubles. The optimal solution would be to buy 2 stripes of the first type 2 stripes of the second type. The cost will be 2 \u00d7 15 + 2 \u00d7 10 = 50 rubles.\n\n Examples: \nInput: \n['1', '4', '0 0', '1000 0', '1000 2000', '0 2000', '2', '1000 10', '2000 15']\nOutput: \n ['50']\n",
  "993": "Problem: \nSupermarket Dilemma\nChef is going to local supermarket but there appears a problem with chef as he is confused about which Supermarket he can choose to go as he is not able to decide whether he can park his car in that particular supermarket\u2019s parking lot or not! There are N parking slots in each supermarket which are marked from 1,2,3,4\u2026N.\nChef will go to that supermarket in which he gets to know that there is exactly 1 empty parking slot having number K that exactly divides the total number of slots (N) available in that supermarket.\nThe 1st and Nth parking slots are always occupied by the staff of every supermarket. Rest parking slots are empty as Chef is arriving early morning to the supermarket.\nNow Chef needs your help in determining whether he can park his car in a supermarket or not!\nInput\nThe first line contains the single integer N showing how many supermarkets are there for the chef to choose.\nThe next N lines contain a number \u2018ai\u2019 which represents the total parking slots available in ith supermarket.\nOutput\nYou need to output \"YES\" (without the quotes), if a supermarket can be reached by Chef, and \"NO\" (without the quotes), if it can't.\nConstraints\n1<=N<=10^5\n1<=ai<=10^12\nSample Input :\n2\n4\n5\nSample Output :\nYES\nNO\n\n Examples: \nInput: \n['2', '4', '5']\nOutput: \n ['YES', 'NO']\n",
  "994": "Problem: \nYou are given an integer sequence $A_1, A_2, \\ldots, A_N$ and an integer $X$. Consider a $N \\times N$ matrix $B$, where $B_{i,j} = A_i + A_j$ for each valid $i$ and $j$.\nYou need to find the number of square submatrices of $B$ such that the sum of their elements is $X$. Formally, find the number of quartets $(x_1, y_1, x_2, y_2)$ such that $1 \\le x_1 \\le x_2 \\le N$, $1 \\le y_1 \\le y_2 \\le N$, $x_2-x_1 = y_2-y_1$ and $\\sum_{i=x_1}^{x_2}\\sum_{j=y_1}^{y_2} B_{i,j} = X$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $X$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of square submatrices with sum $X$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le X \\le 10^6$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^6$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points): the sum of $N$ over all test cases does not exceed $1,000$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n5 36\n1 2 3 1 12\n4 54\n3 3 3 3\n\n-----Example Output-----\n6\n4\n\n Examples: \nInput: \n['2', '5 36', '1 2 3 1 12', '4 54', '3 3 3 3']\nOutput: \n ['6', '4']\n",
  "995": "Problem: \nMr. Krabs loves money. He enters a bank and sees that there are n rooms arranged in a row. The only rooms with doors are the two rooms on either corner. Initially, all the rooms are locked (including the corner ones). To enter a room, it must be unlocked with a key.\nMr. Krabs is able to steal k keys from the sleeping night guard. Each key can be used to unlock only one room. To reach one of the inner rooms, he has to unlock an adjacent room first.\nEg: If there are 5 rooms labelled: 1 2 3 4 5\nOnly Rooms 1 and 5 can be accessed initially. To unlock room 2, either room 1 or room 3 must be unlocked. Similarly to unlock Room 4, he must unlock room 5 or room 3 first.\nEach room has some money in it. The money present in room i is given by A[i]. Using the k keys, calculate what is the maximum possible amount of money obtainable.\n\n-----Input:-----\n- First line will contain n,  number of rooms.\n- Second line will contain space separated integers, denoting A[i], money present in each room.\n- Third line will contain an integer, k, the number of keys available.\n\n-----Output:-----\nMaximum money obtained.\n\n-----Constraints-----\n- 1 <= Number of Rooms <= 10^5\n- 1 <= A[i] <= 10^4\n- 1 <= k <= Number of Rooms\n\n-----Subtasks-----\n- 40 points : 1 <= Number of Rooms <= 100\n- 60 points : Number of Rooms > 100\n\n-----Sample Input:-----\n7\n1 2 3 4 5 6 1\n3\n\n-----Sample Output:-----\n12\n\n-----Explanation:-----\nFor the first step, Mr. Krabs can only unlock the room at the left corner or the right corner. If he unlocks the room in the right corner, he obtains 1 dollar. He can then go on to unlock the second last room and gain 6 dollars, for a total of 7 dollars. Finally he can unlock the third last room and get 5 dollars, for a total of 12 dollars. \nThis is the maximum amount of money he can get with only 3 keys.\n\n Examples: \nInput: \n['7', '1 2 3 4 5 6 1', '3']\nOutput: \n ['12']\n",
  "996": "Problem: \nThe game of billiards involves two players knocking 3 balls around\non a green baize table. Well, there is more to it, but for our\npurposes this is sufficient.\nThe game consists of several rounds and in each round both players\nobtain a score, based on how well they played. Once all the rounds\nhave been played, the total score of each player is determined by\nadding up the scores in all the rounds and the player with the higher\ntotal score is declared the winner.\nThe Siruseri Sports Club organises an annual billiards game where\nthe top two players of Siruseri play against each other. The Manager\nof Siruseri Sports Club decided to add his own twist to the game by\nchanging the rules for determining the winner. In his version, at the\nend of each round, the cumulative score for each player is calculated, and the leader and her current lead are found. Once\nall the rounds are over the player who had the maximum lead at the\nend of any round in the game is declared the winner.\n\nConsider the following score sheet for a game with 5 rounds:\nRoundPlayer 1Player 2114082289134390110411210658890\n\nThe total scores of both players, the leader and the lead after\neach round for this game is given below:RoundPlayer 1Player 2LeaderLead114082Player 1582229216Player 1133319326Player 274431432Player 215519522Player 23\nNote that the above table contains the cumulative scores.\nThe winner of this game is Player 1 as he had the maximum lead (58\nat the end of round 1) during the game.\nYour task is to help the Manager find the winner and the winning\nlead. You may assume that the scores will be such that there will\nalways be a single winner.  That is, there are no ties.\nInput\nThe first line of the input will contain a single integer N (N\n\u2264 10000) indicating the number of rounds in the game.  Lines\n2,3,...,N+1 describe the scores of the two players in the N rounds.\nLine i+1 contains two integer Si and Ti, the scores of the Player 1\nand 2 respectively, in round i.  You may assume that 1 \u2264 Si \u2264\n1000 and 1 \u2264 Ti \u2264 1000.  \nOutput\nYour output must consist of a single line containing two integers\nW and L, where W is 1 or 2 and indicates the winner and L is the\nmaximum lead attained by the winner.\nExample\nInput:\n5\n140 82\n89 134\n90 110\n112 106\n88 90\n\nOutput:\n1 58\n\n Examples: \nInput: \n['5', '140 82', '89 134', '90 110', '112 106', '88 90']\nOutput: \n ['1 58']\n",
  "997": "Problem: \nDr. S. De teaches computer architecture in NIT Patna. Whenever he comes across any good question(with complexity $k$), he gives that question to students within roll number range $i$ and $j$\nAt the start of semester he assigns score of $10$ to every student in his class if a student submits a question of complexity $k$, his score gets multiplied by $k$\nThis month he gave $M$ questions and he is wondering what will be mean of maximum scores of all the student. He is busy in improving his finger print attendance module, can you help him?\nInput file may be large so try to use fast input output\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a First line of input, two integers $N, M$ i.e. Number of students in the class and number of questions given in this month. \n- Next $M$ lines contains 3 integers -$i, j, k$ i.e. starting roll number, end roll number and complexity of the question\n\n-----Output:-----\nFor each testcase, output in a single line answer - $floor$ value of Mean of maximum possible score for all students.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, M \\leq 10^5$\n- $1 \\leq i \\leq j \\leq N$\n- $1 \\leq k \\leq 100$\n\n-----Subtasks-----\nSubtask1 \n- \n$1 \\leq T \\leq 10$\n- \n$1 \\leq N, M \\leq 10^4$\nSubtask2\n- \nOriginal Constraints \n\n-----Sample Input:-----\n1\n5 3\n1 3 5\n2 5 2\n3 4 7\n\n-----Sample Output:-----\n202\n\n-----EXPLANATION:-----\nInitial score of students will be : $[10, 10, 10, 10, 10]$\nafter solving question 1 scores will be: $[50, 50, 50, 10, 10]$\nafter solving question 2 scores will be: $[50, 100, 100, 20, 20]$\nafter solving question 1 scores will be: $[50, 100, 700, 140, 20]$\nHence after all questions mean of maximum scores will $(50+100+700+140+20)/5 = 202$\n\n Examples: \nInput: \n['1', '5 3', '1 3 5', '2 5 2', '3 4 7']\nOutput: \n ['202']\n",
  "998": "Problem: \nYou are given an N \u00d7 N grid initially filled by zeros. Let the rows and columns of the grid be numbered from 1 to N, inclusive. There are two types of operations can be applied to the grid:\n\n- RowAdd R X: all numbers in the row R should be increased by X.\n- ColAdd C X: all numbers in the column C should be increased by X.\n\nNow after performing the sequence of such operations you need to find the maximum element in the grid.\n\n-----Input-----\nThe first line of the input contains two space separated integers N and Q denoting the size of the grid and the number of performed operations respectively. Each of the following Q lines describe an operation in the format described above.\n\n-----Output-----\nOutput a single line containing the maximum number at the grid after performing all the operations.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 314159\n- 1 \u2264 Q \u2264 314159\n- 1 \u2264 X \u2264 3141\n- 1 \u2264 R, C \u2264 N\n\n-----Example-----\nInput:\n2 4\nRowAdd 1 3\nColAdd 2 1\nColAdd 1 4\nRowAdd 2 1\n\nOutput:\n7\n\n-----Explanation-----\nThe grid changes as follows:\n00  33  34  74  74\n00  00  01  41  52\n\nThe maximum number in the final grid is 7.\n\n Examples: \nInput: \n['2 4', 'RowAdd 1 3', 'ColAdd 2 1', 'ColAdd 1 4', 'RowAdd 2 1']\nOutput: \n ['7']\n",
  "999": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n-First-line will contain $T$, the number of test cases. Then the test cases follow.\n-Each test case contains a single line of input, one integer $K$.\n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 26$\n- $1 \\leq K \\leq 26$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\nA\n12\nA\n12\nABC\n1234\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['2', '2', '4']\nOutput: \n ['A', '12', 'A', '12', 'ABC', '1234']\n",
  "1000": "Problem: \nThe activity of a panipuri seller is \"making a panipuri and putting it on the palte of his customer\".    \n$N$ customers are eating panipuri, Given an array $A$ of length $N$, $i^{th}$ customer takes $A_i$ seconds to eat a panipuri.     \nThe Speed of Panipuri seller refers to the number of customers served per second. Determine the minimum speed of panipuri seller so that no customer has to wait for panipuri after getting his/her first panipuri.    \nAssume that the plate can hold infinite panipuris, and customer starts eating next panipuri just after finishing the current one.    You would be provided with the time taken by each customer to eat a panipuri.\nPanpuri seller serves panipuri in round robin manner (first to last and then again first).\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the test cases follow.\n- For each test case, the first line contains $N$ number of customers.\n- Then the second line will contain $N$ space separated integers, $A_1$ to $A_N$, eating time taken by each customer(in seconds).\n\n-----Output:-----\n- For each test case, print a single line containing the minimum integral speed of panipuri seller so that no customer has to wait. \n\n-----Constraints-----\n- $0 < T \\leq 100$\n- $0 < N \\leq 10^6$\n- $0 < A_i \\leq 10^9$\n- Sum of $N$ over all test cases does not exceed $10^6$\n\n-----Sample Input:-----\n2\n4\n2 4 6 3\n5\n2 3 4 6 5\n\n-----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\n$Test case$ $1$:\n\nLet's assume speed of panipuri seller be 1.\n\nSo starting from $0^{th}$ second, in $0$ to $1$ second seller make a panipuri and put it into the plate of first customer, and first customer completely eat it in $1$ to $3$ second as he takes $2$ second to eat a panipuri. But in $3$ to $4$ second panipuri seller is serving to $4^{th}$ customer, and hence first customer have to wait, so 1 cannot be our answer.\n\nNext possible speed can be $2$ .\n\nStarting from $0^{th}$ second, at half second seller make a panipuri and put it into the plate of first customer,  first customer completely eat it on $2.5$ second as he takes $2$ second to eat a panipuri. In $0.5$ to $1$ second, seller serve the second customer. similarly in $1$ to $2$ second $3^{rd}$ and $4^{th}$ customer will be serve, in $2$ to $2.5$ second, seller will again serve the first customer so at $2.5$ sec $1^{st}$ customer will have a panipuri to eat.\n\nSimilarly proceeding further we will find that no customer have to wait when speed is $2$.\n\n Examples: \nInput: \n['2', '4', '2 4 6 3', '5', '2 3 4 6 5']\nOutput: \n ['2', '3']\n",
  "1001": "Problem: \nChef wants to buy a new phone, but he is not willing to spend a lot of money. Instead, he checks the price of his chosen model everyday and waits for the price to drop to an acceptable value. So far, he has observed the price for $N$ days (numbere $1$ through $N$); for each valid $i$, the price on the $i$-th day was $P_i$ dollars.\nOn each day, Chef considers the price of the phone to be good if it is strictly smaller than all the prices he has observed during the previous five days. If there is no record of the price on some of the previous five days (because Chef has not started checking the price on that day yet), then Chef simply ignores that previous day \u2015 we could say that he considers the price on that day to be infinite.\nNow, Chef is wondering \u2015 on how many days has he considered the price to be good? Find the number of these days.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $P_1, P_2, \\dots, P_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of days with a good price.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $7 \\le N \\le 100$\n- $350 \\le P_i \\le 750$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (30 points): $N = 7$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n7\n375 750 723 662 647 656 619\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: Chef considers the price to be good on day $1$, because he has not observed any prices on the previous days. The prices on days $2, 3, 4, 5, 6$ are not considered good because they are greater than the price on day $1$. Finally, the price on day $7$ is considered good because it is smaller than all of the prices on days $2, 3, 4, 5, 6$.\n\n Examples: \nInput: \n['1', '7', '375 750 723 662 647 656 619']\nOutput: \n ['2']\n",
  "1002": "Problem: \nChef works in a similar way to a travelling salesman \u2015 he always travels to new cities in order to sell his delicious dishes.\nToday, Chef is planning to visit $N$ cities (numbered $1$ through $N$). There is a direct way to travel between each pair of cities. Each city has a specific temperature; let's denote the temperature in the $i$-th city by $C_i$. Chef has a fixed temperature tolerance $D$ with the following meaning: for each pair of cities $a$ and $b$, he may travel from city $a$ directly to city $b$ only if $|C_a-C_b| \\le D$, otherwise he would catch a heavy flu because of the sudden change in temperature.\nChef starts from city $1$. Is he able to visit all $N$ cities in such a way that each city is visited exactly once?\nNotes:\n- Chef is not able to travel through a city without visiting it.\n- City $1$ is visited at the beginning.\n- It is not necessary to be able to travel directly to city $1$ from the last city Chef visits.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $D$.\n- The second line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" (without quotes) if Chef can visit all cities or \"NO\" (without quotes) if he cannot.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\le N \\le 10^5$\n- $0 \\le D \\le 10^9$\n- $0 \\le C_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $N \\le 1,000$\n- the sum of $N$ over all test cases does not exceed $10,000$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\n5 3\n3 2 1 4 5\n5 4\n10 1 3 2 9\n\n-----Example Output-----\nYES\nNO\n\n Examples: \nInput: \n['2', '5 3', '3 2 1 4 5', '5 4', '10 1 3 2 9']\nOutput: \n ['YES', 'NO']\n",
  "1004": "Problem: \nA group of rebels travelling on a square hoverboard is ambushed by Imperial Stormtroopers.Their big hoverboard is an easy target, so they decide to split the board into smaller square hoverboards so that they can bolt away easily.But they should also make sure they don't get too spread out.Help the rebels split the craft into minimum number of smaller crafts possible.\n\n-----Input-----\nA single integer N denoting the side length of the big hoverboard.\n\n-----Output-----\nIn the first line, output the integer 'k' which is the minimum number of square boards into which the bigger board can be split up.\n\nIn the second line, output k space separated integers which denote the sizes of the smaller square hoverboards.This must be in increasing order of sizes.\n\n-----Constraints-----\nN ranges from 2 to 50.\n\n-----Example-----\nInput:\n3\n\nOutput:\n6\n1 1 1 1 1 2\n\n-----Explanation-----\nA square of side length 3 can be split into smaller squares in two ways: Either into 9 squares of side1 or 5 squares of side 1 and 1 square of size 2.The second case is the favourable one.\n\n Examples: \nInput: \n['3']\nOutput: \n ['6', '1 1 1 1 1 2']\n",
  "1006": "Problem: \nChef Leonardo has a decimal integer $N$ and a non-zero decimal digit $d$. $N$ does not contain the digit zero; specifically, $N$ should always be treated as a decimal integer without leading zeroes.\nChef likes $d$ and does not like any other digit, so he decided to change $N$. He may apply the following operation any number of times (including zero): append the digit $d$ to the decimal representation of $N$ ($d$ becomes the least significant digit of $N$), then remove one occurrence of one digit from the decimal representation of $N$.\nChef has already changed a lot of numbers and he got bored. Now, he wants to know the smallest possible value of $N$ which can be obtained by performing the operation described above. Can you help him?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $d$.\n\n-----Output-----\nFor each test case, print a single line containing one integer - the minimum number Chef can obtain.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^{18}$\n- $N$ does not contain the digit $0$\n- $1 \\le d \\le 9$\n\n-----Subtasks-----\nSubtask #1 (40 points):\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^9$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n35 4\n42 4\n24 9\n\n-----Example Output-----\n34\n24\n24\n\n-----Explanation-----\nExample case 1: Chef can remove the digit $5$ and add $4$ to the end of $N$. Then, $N$ becomes $34$.\nExample case 2: Chef can remove the digit $4$ from the beginning of $N$, add $4$ to the end of $N$ and get $N = 24$.\nExample case 3: Chef cannot make his number any smaller.\n\n Examples: \nInput: \n['3', '35 4', '42 4', '24 9']\nOutput: \n ['34', '24', '24']\n",
  "1007": "Problem: \nGiven an array A1,A2...AN, you have to print the size of the largest contiguous subarray such that \nGCD of all integers in that subarray is 1.\n\nFormally,\nFor a subarray Ai,Ai+1...Aj where 1 \u2264 i < j \u2264 N to be valid: GCD(Ai,Ai+1...Aj) should be 1. You have to print the size of the largest valid subarray.\nIf no valid subarray exists, output -1.\nNote:A single element is not considered as a subarray according to the definition of this problem.\n\n-----Input-----\nFirst line contains T, the number of testcases. Each testcase consists of N in one line followed by N integers in the next line.\n\n-----Output-----\nFor each testcase, print the required answer in one line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 2 \u2264 N \u2264 105\n- 1 \u2264 Ai \u2264 105\n\n-----Example-----\nInput:\n2\n2\n7 2\n3\n2 2 4\n\nOutput:\n2\n-1\n\n-----Explanation-----\nExample case 1.GCD(2,7)=1. So the subarray [A1,A2] is valid.\nExample case 2.No subarray satisfies.\nNote: Use scanf/print instead of cin/cout. Large input files.\n\n Examples: \nInput: \n['2', '2', '7 2', '3', '2 2 4']\nOutput: \n ['2', '-1']\n",
  "1008": "Problem: \nYou are given an array A consisting of N integers. A group of disjoint subarrays in it will be a collection of subarrays of the array. Formally a group of subarrays consisting of K subarrays can be denoted by 2 * K indices, [i1, j1], [i2, j2] , ..., [iK, jK], such that i1 \u2264 j1 < i2 \u2264 j2 < ... < iK \u2264 jK.\n\nFor example, in array A = {5, 6, 7}. A group of subarrays could be the subarrays denoted by indices [1, 1], [2, 3]. The subarray corresponding to indices [1, 1] will be {5}. The subarray corresponding to indices [2, 3] will be {6, 7}. So, we have i1 = 1, j1 = 1, i2 = 2, j2 = 3 and K = 2. You can check that the indices satisfy the property i1 \u2264 j1 < i2 \u2264 j2.\n\nNote that the group of subarrays [1, 2] and [2, 3] won't be disjoint, as it does not satisfy the property j1 < i2. In other words, the index 2 is common in two subarrays, which should not happen.\n\nLet M denote the maximum value of K in a group of K disjoint subarrays of array A, such that there are not two elements (not indices) common in those subarrays. This means, that if the group contained subarrays [A[i1], A[j1], [A[i2], A[j2]] , ..., A[[iK, jK]], then there should not be an element which is present in more than one subarrays.\n\nYou have to find maximum number of group of disjoint subarrays that number of subarrays in those groups are equal to M. As the answer could be large, output it modulo 109 + 7.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFirst line of the each test case contains a single integer N denoting number of elements in array A.\nSecond line of each test case contains N space separated integers denoting the elements of the array A\n\n-----Output-----\nFor each test case, output a single line corresponding to maximum number of group of disjoint subarrays of array A.\n\n-----Constraints-----\n- 1 \u2264 T, N \u2264 105\n- 1 \u2264 Ai \u2264 n\n- Sum of N over all the test cases in a single file won't exceed 105\n\n-----Subtasks-----\nSubtask #1 (30 points)\n\n- 1 \u2264 T, N \u2264 103\n- 1 \u2264 Ai \u2264 n\n- Sum of N over all the test cases in a single file won't exceed 103\n\nSubtask #2 (70 points)\n- original constraints\n\n-----Example-----\nInput\n3\n2\n3 4\n3\n1 2 2\n5\n1 1 2 2 2\n\nOutput:\n1\n3\n18\n\n-----Explanation-----\nExample case 1. M will be equal to 2. The subarrays will be {[1, 1], [2, 2]}.\nExample case 2. M will be equal to 3. The subarrays will be {[1, 1], [2, 2]}, {[1, 1], [3, 3]} and {[1, 1], [2, 3]}. Note that {[2, 2], [3, 3]} won't be a non-intersecting subarray as A[2] = 2 and A[3] = 2. So, 2 is common in both these subarrays.\n\n Examples: \nInput: \n['3', '2', '3 4', '3', '1 2 2', '5', '1 1 2 2 2', '', '']\nOutput: \n ['1', '3', '18']\n",
  "1009": "Problem: \nChef is playing a game on a sequence of $N$ positive integers, say $A_1, A_2, ... A_N$ The game is played as follows.\n- If all the numbers are equal, the game ends.\n- Otherwise\n- Select two numbers which are unequal\n- Subtract the smaller number from the larger number\n- Replace the larger number with the result from above\nChef has already figured out that the game always terminates. He also knows, for a given sequence of integers, the game will always terminate on the same value, no matter how the game is played. Chef wants you to simulate the game for him and tell him if the game terminates on $1$.\nIn fact, there may be many such games. Given a sequence of integers Chef wants to know the number of sub-sequences of the given sequence, for which, playing the above game on the subsuquence will terminate on $1$. A sub-sequence can be obtained from the original sequence by deleting $0$ or more integers from the original sequence. See the explanation section for clarity.\n\n-----Input-----\n- The first line of the input contains an integer $T$, the number of test cases. Then follow the description of $T$ test cases. \n- The first line of each test case contains a single integer $N$, the length of the sequence. \n- The second line contains $N$ positive integers, each separated by a single space.\n\n-----Output-----\nFor each test case, output a single integer - the number of sub-sequences of the original sequence, such that, playing the game on the sub-sequence results in ending the game with all the values equal to $1$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$ \n- $1 \\le N \\le 60$ \n- $1 \\le A_i \\le 10^4$ \n- All $A_i$ will be distinct.\n\n-----Sample Input-----\n3\n4\n2 3 5 7\n4\n3 4 8 16\n3\n6 10 15\n\n-----Sample Output-----\n11\n7\n1\n\n-----Explanation-----\nTest Case 1: The following $11$ sub-sequences are counted.\n- $\\{ 2, 3 \\}$\n- $\\{ 2, 5 \\}$\n- $\\{ 2, 7 \\}$\n- $\\{ 3, 5 \\}$\n- $\\{ 3, 7 \\}$\n- $\\{ 5, 7 \\}$\n- $\\{ 2, 3, 5 \\}$\n- $\\{ 2, 3, 7 \\}$\n- $\\{ 2, 5, 7 \\}$\n- $\\{ 3, 5, 7 \\}$\n- $\\{ 2, 3, 5, 7 \\}$\nTest Case 2: The following $7$ sub-sequences are counted.\n- $\\{ 3, 4 \\}$\n- $\\{ 3, 8 \\}$\n- $\\{ 3, 16 \\}$\n- $\\{ 3, 4, 8 \\}$\n- $\\{ 3, 4, 16 \\}$\n- $\\{ 3, 8, 16 \\}$\n- $\\{ 3, 4, 8, 16 \\}$\nTest Case 3: There are $8$ subsequences of $\\{ 6, 10, 15 \\}$\n- $\\{\\}$ => The game cannot be played on this sub-sequence\n- $\\{ 6 \\}$ => The game cannot be played on this sub-sequence\n- $\\{ 10 \\}$ => The game cannot be played on this sub-sequence\n- $\\{ 15 \\}$ => The game cannot be played on this sub-sequence\n- $\\{ 6, 10 \\}$ => The game cannot end at $\\{ 1, 1 \\}$\n- $\\{ 6, 15 \\}$ => The game cannot end at $\\{ 1, 1 \\}$\n- $\\{ 10, 15 \\}$ => The game cannot end at $\\{ 1, 1 \\}$\n- $\\{ 6, 10, 15 \\}$ => The game ends at $\\{ 1, 1, 1 \\}$. Hence this is the only sub-sequence that is counted in the result.\n\n Examples: \nInput: \n['3', '4', '2 3 5 7', '4', '3 4 8 16', '3', '6 10 15']\nOutput: \n ['11', '7', '1']\n",
  "1011": "Problem: \nChef is a really nice and respectful person, in sharp contrast to his little brother, who is a very nasty and disrespectful person. Chef always sends messages to his friends in all small letters, whereas the little brother sends messages in all capital letters.\nYou just received a message given by a string s. You don't know whether this message is sent by Chef or his brother. Also, the communication channel through which you received the message is erroneous and hence can flip a letter from uppercase to lowercase or vice versa. However, you know that this channel can make at most K such flips.\nDetermine whether the message could have been sent only by Chef, only by the little brother, by both or by none.\n\n-----Input-----\n\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains two space-separated integers N and K denoting the length of the string s and the maximum number of flips that the erroneous channel can make.\n- The second line contains a single string s denoting the message you received.\n\n-----Output-----\nFor each test case, output a single line containing one string \u2014 \"chef\", \"brother\", \"both\" or \"none\".\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 100\n- 0 \u2264 K \u2264 N\n- s consists only of (lowercase and uppercase) English letters\n\n-----Example-----\nInput\n\n4\n5 1\nfrauD\n5 1\nFRAUD\n4 4\nLife\n10 4\nsTRAWBerry\n\nOutput\n\nchef\nbrother\nboth\nnone\n\n-----Explanation-----\nExample case 1: Only one flip is possible. So it is possible that Chef sent \"fraud\" and the channel flipped the last character to get \"frauD\". However, it is not possible for the brother to have sent \"FRAUD\", because then it would need 4 flips. Hence the answer is \"chef\".\nExample case 2: Only one flip is possible. So it is possible that the brother sent \"FRAUD\" and the channel didn't flip anything. However, it is not possible for Chef to have sent \"fraud\", because then it would need 5 flips. Hence the answer is \"brother\".\nExample case 3: Four flips are allowed. It is possible that Chef sent \"life\" and the channel flipped the first character to get \"Life\". It is also possible that the brother sent \"LIFE\" and the channel flipped the last three characters to get \"Life\". Hence the answer is \"both\".\nExample case 4: Four flips are allowed. It is not possible that Chef sent \"strawberry\", because it would need five flips to get \"sTRAWBerry\". It is also not possible that the brother sent \"STRAWBERRY\", because that would also need five flips. Hence the answer is \"none\".\n\n Examples: \nInput: \n['4', '5 1', 'frauD', '5 1', 'FRAUD', '4 4', 'Life', '10 4', 'sTRAWBerry']\nOutput: \n ['chef', 'brother', 'both', 'none']\n",
  "1013": "Problem: \nNavnit is a college student and there are $N$ students in his college .Students are numbered from $1$ to $N$.\nYou are given $M$ facts that \"Student $A_i$ and $B_i$\".The same fact can be given multiple times .If $A_i$ is a friend of $B_i$ ,then $B_i$ is also a friend of $A_i$ . If $A_i$ is a friend of $B_i$ and $B_i$ is a friend of $C_i$ then $A_i$ is also a friend of $C_i$.\nFind number of ways in which two students can be selected in such a way that they are not friends. \n\n-----Input:-----\n- First line will contain two integers $N$ and $M$. \n- Then $M$ lines follow. Each line contains two integers $A_i$ and $B_i$ denoting the students who are friends.\n\n-----Output:-----\nFor each testcase, output the number of ways in which  two students can be selected in such a way that they are friends.\n\n-----Constraints-----\n- $2 \\leq N \\leq 200000$\n- $0 \\leq M \\leq 200000$\n- $1 \\leq A_i,B_i \\leq N$\n\n-----Sample Input:-----\n5 3\n1 2                                                   \n3 4\n1 5\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nGroups of friend are $[1,2,5]$ and $[3,4]$.Hence the answer is  3 X 2 =6.\n\n Examples: \nInput: \n['5 3', '1 2', '3 4', '1 5']\nOutput: \n ['6']\n",
  "1014": "Problem: \nA number K$K$ is said to be magical if it can be represented as a power of 2 only.That is K$K$=2x$2^{x}$ for some natural number x$x$. \nGiven a string of digits S$S$ of length N$N$, Let P be a valid arrangement of S.\nBy valid arrangement we mean that it should not have any leading zeroes.\nFind the sum of all such distinct Pi's, which, when treated as a number is magical.\nTwo arrangements are said to be distinct, if there is atleast one index where they differ. \nAs the sum can be very large, print the sum modulo 109+7$10^{9}+7$.\n\n-----Input:-----\n-The first line of the input contains a single integer T$T$ denoting the number of test cases. \n-Only line of each test case contains a string S$S$ of length N$N$, consisting only of digits between 0 to 9.\n\n-----Output:-----\nFor each test case, print a single integer denoting the sum of all such magical Pi\u2032s$Pi's$ modulo 109+7$10^{9}+7$.\nIf no such Pi$Pi$ exists print \"-1\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 2\u2264N\u22641000$2 \\leq N \\leq 1000$\n- String only consists of digits between 0 to 9, both inclusive.\n\n-----Subtasks-----\n- 10 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 40 points : 1\u2264N\u2264100$1 \\leq N \\leq 100$\n- 50 points : Original Constraints\n\n-----Sample Input:-----\n2\n35566\n\n31\n\n-----Sample Output:-----\n65536\n\n-1\n\n-----EXPLANATION:-----\nOnly arrangement is 65536.\nNo arrangement of 31 gives us a power of two.\n\n Examples: \nInput: \n['2', '35566', '31']\nOutput: \n ['65536', '-1']\n",
  "1015": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n2\n24\n68\n246\n81012\n141618\n2468\n10121416\n18202224\n26283032\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['2', '24', '68', '246', '81012', '141618', '2468', '10121416', '18202224', '26283032']\n",
  "1016": "Problem: \nYou have been recently hired as a developer in CodeChef. Your first mission is to implement a feature that will determine the number of submissions that were judged late in a contest.\nThere are $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Please determine how many submissions received their verdicts after a delay of more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: The delays of the respective submissions are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer is $2$.\n\n Examples: \nInput: \n['1', '5', '1 3', '4 4', '4 10', '1 11', '2 7']\nOutput: \n ['2']\n",
  "1017": "Problem: \nChef recently started working at ABC corporation. Let's number weekdays (Monday through Friday) by integers $1$ through $5$. For each valid $i$, the number of hours Chef spent working at the office on weekday $i$ was $A_i$.\nUnfortunately, due to the COVID-19 pandemic, Chef started working from home and his productivity decreased by a considerable amount. As per Chef's analysis, $1$ hour of work done at the office is equivalent to $P$ hours of work done at home.\nNow, in order to complete his work properly, Chef has to spend more hours working from home, possibly at the cost of other things like sleep. However, he does not have to do the same work on each day as he would have in the office \u2015 for each weekday, he can start the work for this day on an earlier day and/or complete it on a later day. The only requirement is that his work does not pile up indefinitely, i.e. he can complete his work for each week during the same week. One day has $24$ hours.\nIf Chef is unable to complete his work for a week during those five weekdays, then he has to work during the weekend too. Chef wishes to know whether he has to work on weekends or if he can complete his work by working only on weekdays. Help him answer that question. (It is possible that Chef would be unable to finish his work even if he worked all the time, but he does not want to know about that.)\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains six space-separated integers $A_1$, $A_2$, $A_3$, $A_4$, $A_5$ and $P$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if Chef has to work on weekends or \"No\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $0 \\le A_i \\le 24$ for each valid $i$\n- $1 \\le P \\le 24$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n14 10 12 6 18 2\n10 10 10 10 10 3\n\n-----Example Output-----\nNo\nYes\n\n-----Explanation-----\nExample case 1: Here, $P=2$, so the number of hours Chef has to work from home to handle his workload for days $1$ through $5$ is $[28,20,24,12,36]$. If he works for full $24$ hours on each of the five weekdays, he finishes all the work, so he does not have to work on weekends.\nExample case 2: No matter what Chef does, he will have to work on weekends.\n\n Examples: \nInput: \n['2', '14 10 12 6 18 2', '10 10 10 10 10 3']\nOutput: \n ['No', 'Yes']\n",
  "1018": "Problem: \nChef has a garden with $N$ plants arranged in a line in decreasing order of height. Initially the height of the plants are $A_1, A_2, ..., A_N$.\nThe plants are growing, after each hour the height of the $i$-th plant increases by $i$ millimeters. Find the minimum number of integer hours that Chef must wait to have two plants of the same height.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space separated integers $A_1,A_2,..A_N$. \n\n-----Output:-----\nFor each test case print a single line containing one integer, the minimum number of integer hours that Chef must wait to have two plants of the same height.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N \\leq 10^5$\n- $0\\leq A_i \\leq 10^{18}$\n- $A_i >A_{i+1}$, for each valid $i$\n- The Sum of $N$ over all test cases does not exceed $10^6$\n\n-----Sample Input:-----\n1\n3\n8 4 2\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\nAfter $2$ hours there are two plants with the same height. \n$[8,4,2] \\rightarrow [9,6,5] \\rightarrow [10,8,8]$.\n\n Examples: \nInput: \n['1', '3', '8 4 2']\nOutput: \n ['2']\n",
  "1019": "Problem: \nThe snakes want to build a temple for Lord Cobra. There are multiple strips of land that they are looking at, but not all of them are suitable. They need the strip of land to resemble a coiled Cobra. You need to find out which strips do so.\nFormally, every strip of land, has a length. Suppose the length of the i-th strip is is Ni, then there will be Ni integers, Hi1, Hi2, .. HiNi, which represent the heights of the ground at various parts of the strip, in sequential order. That is, the strip has been divided into Ni parts and the height of each part is given. This strip is valid, if and only if all these conditions are satisfied:\n- There should be an unique 'centre' part. This is where the actual temple will be built. By centre, we mean that there should be an equal number of parts to the left of this part, and to the right of this part.\n- Hi1 = 1\n- The heights keep increasing by exactly 1, as you move from the leftmost part, to the centre part.\n- The heights should keep decreasing by exactly 1, as you move from the centre part to the rightmost part. Note that this means that HiNi should also be 1.\nYour job is to look at every strip and find if it's valid or not.\n\n-----Input-----\n- The first line contains a single integer, S, which is the number of strips you need to look at. The description of each of the S strips follows\n- The first line of the i-th strip's description will contain a single integer: Ni, which is the length and number of parts into which it has been divided.\n- The next line contains Ni integers: Hi1, Hi2, .., HiNi. These represent the heights of the various parts in the i-th strip.\n\n-----Output-----\n- For each strip, in a new line, output \"yes\" if is a valid strip, and \"no\", if it isn't.\n\n-----Constraints-----\n- 1 \u2264 S \u2264 100 \n- 3 \u2264 Ni \u2264 100 \n- 1 \u2264 Hij \u2264 100 \n\n-----Example-----\nInput:\n7\n5\n1 2 3 2 1\n7\n2 3 4 5 4 3 2\n5\n1 2 3 4 3\n5\n1 3 5 3 1\n7\n1 2 3 4 3 2 1\n4\n1 2 3 2\n4\n1 2 2 1\n\nOutput:\nyes\nno\nno\nno\nyes\nno\nno\n\n-----Explanation-----\nIn the first strip, all the conditions are satisfied, hence it is valid.\nIn the second strip, it does not start with a 1, and hence is invalid.\nIn the third strip, it keeps increasing even past the centre, instead of decreasing. Hence invalid.\nThe fourth strip does not increase and decrease by exactly 1. Hence invalid.\nThe fifth satisfies all conditions and hence is valid.\nThe sixth and seventh strip do not have a 'centre' part. Because for every part, there are either more parts to its right than its left, or more parts on its left than its right. Hence both the strips are invalid.\n\n Examples: \nInput: \n['7', '5', '1 2 3 2 1', '7', '2 3 4 5 4 3 2', '5', '1 2 3 4 3', '5', '1 3 5 3 1', '7', '1 2 3 4 3 2 1', '4', '1 2 3 2', '4', '1 2 2 1']\nOutput: \n ['yes', 'no', 'no', 'no', 'yes', 'no', 'no']\n",
  "1020": "Problem: \nVanja and Miksi have already finished everything for this year at their university, so they decided to spend their free time playing a game with a binary sequence $A_1, A_2, \\dots, A_N$ (i.e. a sequence containing only integers $0$ and $1$).\nAt the beginning of the game, Vanja and Miksi write down the expression $* A_1 * A_2 * A_3 * \\ldots * A_N$ (note below that each $*$ is a placeholder and does not denote multiplication).\nThe players take turns alternately, starting with Vanja. The game lasts $N$ turns. In each turn, the current player must replace the first (leftmost) remaining $*$ by the sign $+$ or $-$ (or, equivalently, by the operation of addition or subtraction).\nAfter the last turn, the boys calculate the resulting value $V$ of the expression. If $|V| \\ge K$, the winner is Vanja; otherwise, the winner is Miksi.\nPlease predict the winner of the game if both players play optimally. \n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 $1$ if Vanja (the first player) is the winner or $2$ if Miksi (the second player) is the winner.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $1 \\le N \\le 3 \\cdot 10^4$\n- $0 \\le K \\le 3 \\cdot 10^4$\n- $0 \\le A_i \\le 1$ for each valid $i$\n\n-----Example Input-----\n2\n2 1\n1 0\n3 5\n0 1 0\n\n-----Example Output-----\n1\n2\n\n-----Explanation-----\nExample case 1: $K = 1$, so if Vanja replaces the first $*$ by $+$, the value of the final expression will be $V = 1$; then, $K \\le |V|$, so the winner is Vanja.\nExample case 2: $K = 5$, but the absolute value of the final expression cannot be greater than $1$. The winner is Miksi.\n\n Examples: \nInput: \n['2', '2 1', '1 0', '3 5', '0 1 0']\nOutput: \n ['1', '2']\n",
  "1021": "Problem: \nThe chef likes to play with numbers. He takes some integer number x, writes it down on his iPad, and then performs with it n\u22121 operations of the two kinds:\n- divide the number x by 3 (x must be divisible by 3);\n- multiply the number x by 2.\nAfter each iteration, Chef writes down the result on his iPad and replaces x with the result. So there will be n numbers on the iPad after all.\nYou are given a sequence of length n \u2014 the numbers that Chef wrote down. This sequence is given in the order of the sequence can mismatch the order of the numbers written on the iPad.\nYour problem is to rearrange elements of this sequence in such a way that it can match a possible Chef's game in the order of the numbers written on the board. I.e. each next number will be exactly two times the previous number or exactly one-third of the previous number.\nI can give a guarantee that the answer exists.\n\n-----Input:-----\n- The first line of the input contains an integer number N i.e the number of the elements in the sequence. \n- The second line of the input contains n integer numbers a1,a2,\u2026, an i.e rearranged (reordered) sequence that Chef can write down on the iPad.\n\n-----Output:-----\nPrint N integer numbers \u2014 rearranged (reordered) input sequence that can be the sequence that Chef could write down on the iPad.\nIt is guaranteed that the answer exists\n\n-----Constraints-----\n- $2 \\leq N \\leq 100$\n- $1 \\leq A[i] \\leq  3* 10^{18} $\n\n-----Sample Input:-----\n6\n4 8 6 3 12 9\n\n-----Sample Output:-----\n9 3 6 12 4 8 \n\n-----EXPLANATION:-----\nIn the first example, the given sequence can be rearranged in the following way: [9,3,6,12,4,8]. It can match possible Polycarp's game which started with x=9.\n\n Examples: \nInput: \n['6', '4 8 6 3 12 9']\nOutput: \n ['9 3 6 12 4 8']\n",
  "1022": "Problem: \nThere are $N$ cities on a circle, numbered $1$ through $N$. For each $i$ ($1 \\le i \\le N-1$), cities $i$ and $i+1$ are directly connected by a bidirectional road with length $A_i$, and cities $N$ and $1$ are also directly connected by a bidirectional road with length $A_N$. However, we do not know the lengths of some roads.\nFor each city $i$, we do know that it has an opposite city \u2014 formally, there is a city $j \\neq i$ such that the clockwise distance between cities $i$ and $j$ is equal to the counterclockwise distance between these cities.\nPlease find the lengths of all roads in such a way that the above condition is satisfied and the sum of lengths of all roads is minimised.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$. For each valid $i$, $A_i = -1$ denotes that the length of road $i$ is unknown.\n\n-----Output-----\nFor each test case, print a line containing the string \"NO\" if there is no solution or \"YES\" otherwise. If a solution exists, print a second line containing $N$ space-separated positive integers \u2014 the lengths of all roads in your solution. Each of these integers should be $\\le 10^9$. If there are multiple solutions, you may print any one.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $3 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^9$ or $A_i = -1$ for each valid $i$\n- the sum of $N$ for all test cases does not exceed $3\\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (10 points): $N \\le 4$\nSubtask #2 (20 points): $A_i = \\pm 1$ for each valid $i$\nSubtask #3 (70 points): original constraints\n\n-----Example Input-----\n4\n4\n1 1 1 1\n4\n1 1 1 2\n4\n1 -1 -1 4\n4\n1 -1 2 -1\n\n-----Example Output-----\nYES\n1 1 1 1\nNO\nYES\n1 4 1 4\nNO\n\n Examples: \nInput: \n['4', '4', '1 1 1 1', '4', '1 1 1 2', '4', '1 -1 -1 4', '4', '1 -1 2 -1']\nOutput: \n ['YES', '1 1 1 1', 'NO', 'YES', '1 4 1 4', 'NO']\n",
  "1023": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq K \\leq 50$\n\n-----Sample Input:-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output:-----\n1\n1\n23\n1\n23\n456\n1\n23\n4 5\n6789\n1\n23\n4 5\n6  7\n89101112\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '5']\nOutput: \n ['1', '1', '23', '1', '23', '456', '1', '23', '4 5', '6789', '1', '23', '4 5', '6  7', '89101112']\n",
  "1024": "Problem: \nNote : This question carries $100$ $points$\nCodeLand is celebrating a festival by baking cakes! In order to avoid wastage, families follow a unique way of distributing cakes.\nFor $T$ families in the locality, $i$-th family (1 <= $i$ <= $T$) has $N$ members. They baked $S$ slices of cakes. The smallest member of the family gets $K$ slices of cakes. Each family has a lucky number of $R$ and they agree to distribute the slices such that the member gets $R$ times more slices than the member just smaller than them. Since the family is busy in festival preparations, find out if the number of slices would be sufficient for the family or not. Also, find how many extra slices they have or how many slices are they short of.\nAlso, the locality is kind and believes in sharing. So, you also need to determine if each family would have sufficient slices if families shared their cakes among each other!\n\n-----Input :-----\n- First line of input will have a single integer $T$ i.e. the number of families in the locality\n- For next $T$ lines, each line will describe one family through 4 integers i.e. $S$, $N$, $K$, $R$ separated by spaces\n\n-----Output-----\n- First $T$ lines of output will show if slices are enough for the family or not, followed by extra or required slices. For example, if slices are sufficient, the output would be $POSSIBLE$ $10$ which implies 10 slices are extra. If slices are insufficient, the output would be $IMPOSSIBLE$ $15$ which implies 15 slices are required to fulfill the requirement.\n- Last line of output would be $IMPOSSIBLE$ or $POSSIBLE$ depending on whether each family would get enough slices after sharing.\n\n-----Constraints:-----\n- 1 \u2264 $T$ \u2264 50\n- 1 \u2264 $N$ \u2264 15\n- 1 \u2264 $S$ \u2264 10^9\n- 1 \u2264 $K$ \u2264 5\n- 1 \u2264 $R$ \u2264 5\n\n-----Sample Input:-----\n5\n100 4 2 2\n100 4 3 2\n100 4 3 3\n200 4 4 2\n10 3 2 2\n\n-----Sample Output:-----\nPOSSIBLE 70\nPOSSIBLE 55\nIMPOSSIBLE 20\nPOSSIBLE 140\nIMPOSSIBLE 4\nPOSSIBLE\n\n-----Explanation-----\nFor the first home, the youngest member has got 2 slices, the one older than them gets 2 times more slices, and so forth. So, first home needs 2 + 4 + 8 + 16 = 30 slices. But since they made 100, they have 70 extra, hence we print 'POSSIBLE 70'.\nDoing the same for other houses, we find 20 + 4 = 24 slices extra are required so that all families have enough slices. In this case we have 70 + 55 + 140 = 265 extra slices which is > 24, so we print 'POSSIBLE' in last line.\n\n Examples: \nInput: \n['5', '100 4 2 2', '100 4 3 2', '100 4 3 3', '200 4 4 2', '10 3 2 2']\nOutput: \n ['POSSIBLE 70', 'POSSIBLE 55', 'IMPOSSIBLE 20', 'POSSIBLE 140', 'IMPOSSIBLE 4', 'POSSIBLE']\n",
  "1026": "Problem: \nThis is probably the simplest problem ever. You just need to count the number of ordered triples of different numbers (X1, X2, X3), where Xi could be any positive integer from 1 to Ni, inclusive (i = 1, 2, 3).\nNo, wait. I forgot to mention that numbers N1, N2, N3 could be up to 1018. Well, in any case it is still quite simple :)\nBy the way, because of this the answer could be quite large. Hence you should output it modulo 109 + 7. That is you need to find the remainder of the division of the number of required triples by 109 + 7.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains three space-separated integers N1, N2, N3.\n\n-----Output-----\nFor each test case, output a single line containing the number of required triples modulo 109 + 7.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 Ni \u2264 1018\n\n-----Example-----\nInput:\n5\n3 3 3\n2 4 2\n1 2 3\n25 12 2012\n1 1 2013\n\nOutput:\n6\n4\n1\n578880\n0\n\n-----Explanation-----\nExample case 1. We have the following triples composed of different numbers up to 3:\n(1, 2, 3)\n(1, 3, 2)\n(2, 1, 3)\n(2, 3, 1)\n(3, 1, 2)\n(3, 2, 1)\nExample case 2. Here the triples are:\n(1, 3, 2)\n(1, 4, 2)\n(2, 3, 1)\n(2, 4, 1)\nExample case 3. Here the only triple is (1, 2, 3).\nExample case 4. Merry Christmas! \nExample case 5. ... and Happy New Year! By the way here the answer is zero since the only choice for X1 and for is X2 is 1, so any such triple will have equal numbers.\n\n Examples: \nInput: \n['5', '3 3 3', '2 4 2', '1 2 3', '25 12 2012', '1 1 2013']\nOutput: \n ['6', '4', '1', '578880', '0']\n",
  "1027": "Problem: \nChef recently learned about concept of periodicity of strings. A string is said to have a period P, if P divides N and for each i, the i-th of character of the string is same as i-Pth character (provided it exists), e.g. \"abab\" has a period P = 2, It also has a period of P = 4, but it doesn't have a period of 1 or 3.\nChef wants to construct a string of length N that is a palindrome and has a period P. It's guaranteed that N is divisible by P. This string can only contain character 'a' or 'b'. Chef doesn't like the strings that contain all a's or all b's.\nGiven the values of N, P, can you construct one such palindromic string that Chef likes? If it's impossible to do so, output \"impossible\" (without quotes)\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe only line of each test case contains two space separated integers N, P.\n\n-----Output-----\nFor each test case, output a single line containing the answer of the problem, i.e. the valid string if it exists otherwise \"impossible\"  (without quotes). If there are more than possible answers, you can output any.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\n- 1 \u2264 P, N \u2264 105\n\n-----Subtasks-----\n- Subtask #1 (25 points) : P = N\n- Subtask #2 (75 points) : No additional constraints\n\n-----Example-----\nInput\n5\n3 1\n2 2\n3 3\n4 4\n6 3\n\nOutput\nimpossible\nimpossible\naba\nabba\nabaaba\n\n-----Explanation-----\nExample 1: The only strings possible are either aaa or bbb, which Chef doesn't like. So, the answer is impossible.\nExample 2: There are four possible strings, aa, ab, ba, bb. Only aa and bb are palindromic, but Chef doesn't like these strings. Hence, the answer is impossible.\nExample 4: The string abba is a palindrome and has a period of 4.\nExample 5: The string abaaba is a palindrome and has a period of length 3.\n\n Examples: \nInput: \n['5', '3 1', '2 2', '3 3', '4 4', '6 3']\nOutput: \n ['impossible', 'impossible', 'aba', 'abba', 'abaaba']\n",
  "1028": "Problem: \nChef has some numbers. His girlfriend Chefina feels good when chef gives her a particular pattern number also called as Armstrong number.\nArmstrong number is a number whose sum of its all individual digit raise to the power of the number of digit in that number is equal to that number itself\neg.. 153 = 1^3 + 5^3 + 3^3 (153 is an Armstrong number)\n1634 = 1^4 + 6^4 + 3^4 + 4^4 (1634 is an Armstrong number)\nAs a love guru of chef you have to help chef to find Armstrong numbers Among the numbers which chef has initially so that Chefina feels good\n\n-----Input:-----\nFirst line will contain a positive Integer $T$ which is the number of testcases\nNext $T$ lines follows an Integer $N$.\n\n-----Output:-----\nFor Every n You have to print \"FEELS GOOD\" without qoutes if it is an armstrong number otherwise Print \"FEELS BAD\" without quotes\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n3\n153\n11\n1634\n\n-----Sample Output:-----\nFEELS GOOD\nFEELS BAD\nFEELS GOOD\n\n-----EXPLANATION:-----\nFor test case 1 --> 153 = 1^3 + 5^3 + 3^3 (153 is an armstrong number)\n\n Examples: \nInput: \n['3', '153', '11', '1634']\nOutput: \n ['FEELS GOOD', 'FEELS BAD', 'FEELS GOOD']\n",
  "1029": "Problem: \nAfter a long and successful day of preparing food for the banquet, it is time to clean up. There is a list of n jobs to do before the kitchen can be closed for the night. These jobs are indexed from 1 to n.\n\nMost of the cooks have already left and only the Chef and his assistant are left to clean up. Thankfully, some of the cooks took care of some of the jobs before they left so only a subset of the n jobs remain. The Chef and his assistant divide up the remaining jobs in the following manner. The Chef takes the unfinished job with least index, the assistant takes the unfinished job with the second least index, the Chef takes the unfinished job with the third least index, etc. That is, if the unfinished jobs were listed in increasing order of their index then the Chef would take every other one starting with the first job in the list and the assistant would take every other one starting with the second job on in the list.\n\nThe cooks logged which jobs they finished before they left. Unfortunately, these jobs were not recorded in any particular order. Given an unsorted list\nof finished jobs, you are to determine which jobs the Chef must complete and which jobs his assitant must complete before closing the kitchen for the \nevening.\n\n-----Input-----\n\nThe first line contains a single integer T \u2264 50 indicating the number of test cases to follow. Each test case consists of two lines. The first line contains two numbers n,m satisfying 0 \u2264 m \u2264 n \u2264 1000. Here, n is the total number of jobs that must be completed before closing and m is the number of jobs that have already been completed. The second line contains a list of m distinct integers between 1 and n. These are the indices of the jobs that have already been completed. Consecutive integers are separated by a single space.\n\n-----Output-----\n\nThe output for each test case consists of two lines. The first line is a list of the indices of the jobs assigned to the Chef. The second line is a list of the indices of the jobs assigned to his assistant. Both lists must appear in increasing order of indices and consecutive integers should be separated by a single space. If either the Chef or the assistant is not assigned any jobs, then their corresponding line should be blank.\n\n-----Example-----\nInput:\n3\n6 3\n2 4 1\n3 2\n3 2\n8 2\n3 8\n\nOutput:\n3 6\n5\n1\n\n1 4 6\n2 5 7\n\n Examples: \nInput: \n['3', '6 3', '2 4 1', '3 2', '3 2', '8 2', '3 8']\nOutput: \n ['3 6', '5', '1', '1 4 6', '2 5 7']\n",
  "1030": "Problem: \nLet's consider a rooted binary tree with the following properties:\n- The number of nodes and edges in the tree is infinite\n- The tree root is labeled by $1$\n- A node labeled by $v$ has two children: $2 \\cdot v$ (the left child of $v$), and $2 \\cdot v + 1$ (the right child of $v$).\nHere is an image of the first several layers of such a tree:\n\nLet's consider four operations that you are allowed to apply during the tree traversal:\n- move to the left child - move from $v$ to $2 \\cdot v$\n- move to the right child - move from $v$ to $2 \\cdot v + 1$\n- move to the parent as a left child - move from $v$ to $\\frac{v}{2}$ if $v$ is an even integer\n- move to the parent as a right child - move from $v$ to $\\frac{v - 1}{2}$ if $v$ is an odd integer\nIt can be proven, that for any pair of nodes $u$ and $v$, there is only one sequence of commands that moves from $u$ to $v$ and visits each node of the tree at most once. Let's call such a sequence of commands a path configuration for a pair of nodes $(u, v)$.\nYou are asked to process a series of the following queries: \nYou are given three integers $n$, $u$ and $v$ ($1 \\leq u, v \\leq n$). Count the pairs of nodes $(w, t)$ ($1 \\leq w, t \\leq n$) such that the path configuration for $(w, t)$ is the same with the path configuration for $(u, v)$.\n\n-----Input-----\n- The first line of input contains a single integer $Q$, denoting the number of queries to process.\n- Each of the next $Q$ lines contains three space-separated integers $n$, $u$ and $v$ denoting a query.\n\n-----Output-----\nFor each query, print the answer on a separate line.\n\n-----Constraints-----\n- $1 \\leq Q \\leq 2 \\cdot 10^4$\n- $1 \\leq u, v \\leq n \\leq 10^{9}$\n\n-----Example Input-----\n3\n11 9 11\n10 2 2\n8 1 8\n\n-----Example Output-----\n2\n10\n1\n\n-----Explanation-----\nIn the first query from the example test case, you should count pairs $(5, 7)$ and $(9, 11)$.\nIn the second query from the example test case, you should count the following pairs: $(1, 1)$, $(2, 2)$, $(3, 3)$, $(4, 4)$, $(5, 5)$, $(6, 6)$, $(7, 7)$, $(8, 8)$, $(9, 9)$ and $(10, 10)$.\nIn the third query from the example test case, you should only count a pair $(1, 8)$.\n\n Examples: \nInput: \n['3', '11 9 11', '10 2 2', '8 1 8']\nOutput: \n ['2', '10', '1']\n",
  "1031": "Problem: \nChef taught his brother Chefu about right angled triangle and its properties. Chefu says that he has understood everything about right angled triangles. Chef wants to check learning of his brother by asking the following question \"Can you find a right angled triangle whose length of hypotenuse  is H and its area is S?\"\nChefu is confused how to solve it. I hope you are not. Please solve this by finding a right angled triangle with hypotenuse H and area S. If it not possible to do so, then output -1.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test-cases. T test cases follow.\nFor each test case, there will be a single line containing two space separated integers H and S.\n\n-----Output-----\nOutput the answer for each test-case in a single line. If it is not possible to find such a triangle, output -1. Otherwise print 3 real numbers corresponding to the lengths of the sides of the triangle sorted in non-decreasing order. Please note that the length of the triangle sides should not differ by more than 0.01 in absolute value from the correct lengths.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 H \u2264 106\n- 1 \u2264 S \u2264 1012\n\n-----Example-----\nInput:4\n5 6\n6 10\n258303 89837245228\n616153 77878145466\nOutput:3.00000 4.00000 5.00000\n-1\n-1\n285168.817674 546189.769984 616153.000000\n\n Examples: \nInput: \n['4', '5 6', '6 10', '258303 89837245228', '616153 77878145466']\nOutput: \n ['3.00000 4.00000 5.00000', '-1', '-1', '285168.817674 546189.769984 616153.000000']\n",
  "1032": "Problem: \nHelp Saurabh with his Chemistry Assignment.\n\nSaurabh has been given a chemistry assignment by Ruby Mam. Though the assignment is simple but\n\nSaurabh has to watch India vs Pakistan Match and he has no time to do the assignment by himself.\n\nSo Saurabh wants you to do his assignment so that he doesn\u2019t get scolded by Ruby Mam . The assignment\n\nis as follows , Suppose there are X particles initially at time t=0 in a box. At a time t the number of particles in\n\nbox becomes t times the number of particles at time t-1 . You will be given N and X where N is time at which the\n\nnumber of particles in box is to be calculated and X is the number of particles at time t=0.\n\n-----Input-----\nThe first line will contain the integer T, the number of test cases. Each test case consists of two space\n\nseparated integers N and X .\n\n-----Output-----\nFor each test case, output the answer to the query. Since the output can be very large, output the answer modulo\n\n10^6+3\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000\n- 1 \u2264 N,X \u2264 10^18\n\n-----Example-----\nInput:\n2\n1 2\n2 1\n\nOutput:\n2\n2\n\n-----Explanation-----\nExample case 2.At t=0 particles are 1 ,so at t=1 ,particles are 1*1 = 1 particles. At t=2, particles are 2*1 = 2 particles.\n\n Examples: \nInput: \n['2', '1 2', '2 1']\nOutput: \n ['2', '2']\n",
  "1033": "Problem: \nGiven the values at the leaf nodes of a complete binary tree. The total number of nodes in the binary tree, is also given. Sum of the values at both the children of a node is equal to the value of the node itself. You can add any value or subtract any value from a node. Print the minimum change(difference made) in the sum of values of all the nodes in the tree, such that all the leaf nodes have the same value.\n\nNote: If a value transfers from one node to another, then that is not a change, but if an extra is needed to be added or subtracted to the entire total value of the nodes, then that is a change.\n\nInput Description:\n\nInput will contain an integer N, the number of nodes in the tree on a newline, followed by N space separated integers representing the values at the leaf nodes of the tree.\n\nOutput Description:\n\nPrint the required value on a newline.\n\nConstraints:\n\n1<=N<=20000\n1<=Value at each node in the leaves<=1000\n\nExample 1:\nInput:\n\n1\n\n50\nOutput:\n\n0\n\nExplanation: Since there is only one node, it is a leaf node itself and no change needs to be made.\n\nExample 2:\nInput:\n\n3\n\n200 800\nOutput:\n\n0 \n\nExplanation: There are two leaf nodes, and they can be made to 500 500, since no change in the total was made so difference made is 0. \n\nExample 3:\nInput:\n\n30\n\n29 33 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\nOutput:\n\n6\n\nOutput: A total change of 6 needs to be changed to the entire value of the nodes, to get the leaf nodes equal.\n\n Examples: \nInput: \n['1:', 'Input:', '1', '50']\nOutput: \n ['0']\n",
  "1036": "Problem: \nConsider a 2d-grid. That is, each cell is identified by (i,j). You have received reports of two snake-sightings on this grid. You want to check whether they could be partial sightings of the same snake or not.\nEach of the snake sightings correspond to a straight, axis-parallel line segment in the grid, and the starting and ending cells for each are given to you. Now consider a graph, where each cell in the 2d-grid is a vertex. And there is an edge between 2 vertices if and only if the cells corresponding to these two vertices are consecutive cells in at least one of the two snakes. That is, at least in one of the snakes, when you go from one end point to the other end point, these two cells should occur consecutively.\nThe two sightings/snakes are said to be same, if both these conditions are satisfied:\n- The union of the set of cells in the first snake and the set of cells in the second snake, should form a connected component in this graph.\n- No vertex should have degree more than 2 in the graph.\nIn other words, the induced subgraph on the union set must be a path graph.\n\n-----Input-----\n- The first line contains a single integer, T, which is the number of testcases. The description of each testcase follows.\n- The first line of each testcase contains four integers: X11, Y11, X12, Y12. This represents the fact that the first snake's end points are (X11, Y11) and (X12, Y12).\n- The second line of each testcase contains four integers: X21, Y21, X22, Y22. This represents the fact that the second snake's end points are (X21, Y21) and (X22, Y22).\n\n-----Output-----\n- For each testcase, output \"yes\" if the snakes are the same, as per the definition given above. Output \"no\" otherwise.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- -109 \u2264 Xij,Yij \u2264 109\n- The two end points of every snake is guaranteed to be either on the same row or on the same column. Thus, the snake occupies all the cells between these cells, including the end points.\n\n-----Example-----\nInput:\n4\n2 1 8 1\n11 1 7 1\n2 1 8 1\n11 1 9 1\n2 1 8 1\n3 1 3 -2\n2 1 8 1\n2 1 2 -2\nOutput:\nyes\nno\nno\nyes\n\n-----Explanation-----\nIn the images, the first snake is red, the second snake is yellow, and the intersections, if any, are in orange.\nThe first test case corresponds to:\n\nBoth the conditions on the graph are satisfied, and hence this is a \"yes\".\nThe second test case corresponds to:\n\nThere is no edge between the vertex corresponding to the (8,1) cell and the vertex corresponding to (9,1), Hence, the union set is disconnected, and thus the answer is \"no\". \nThe third test case corresponds to:\n\nThe vertex corresponding to the cell (3,1) has degree 3, which is more than 2, and thus the answer is \"no\". \nThe fourth test case corresponds to:\n\nBoth the conditions on the graph are satisfied, and hence this is a \"yes\".\n\n Examples: \nInput: \n['4', '2 1 8 1', '11 1 7 1', '2 1 8 1', '11 1 9 1', '2 1 8 1', '3 1 3 -2', '2 1 8 1', '2 1 2 -2']\nOutput: \n ['yes', 'no', 'no', 'yes']\n",
  "1037": "Problem: \nAda is playing pawn chess with Suzumo.\nPawn chess is played on a long board with N$N$ squares in one row. Initially, some of the squares contain pawns.\nNote that the colours of the squares and pawns do not matter in this game, but otherwise, the standard chess rules apply:\n- no two pawns can occupy the same square at the same time\n- a pawn cannot jump over another pawn (they are no knights!), i.e. if there is a pawn at square i$i$, then it can only be moved to square i\u22122$i-2$ if squares i\u22121$i-1$ and i\u22122$i-2$ are empty\n- pawns cannot move outside of the board (outs are forbidden)\nThe players alternate turns; as usual, Ada plays first. In each turn, the current player must choose a pawn and move it either one or two squares to the left of its current position. The player that cannot make a move loses.\nCan Ada always beat Suzumo? Remember that Ada is a chess grandmaster, so she always plays optimally.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first and only line of each test case contains a single string S$S$ with length N$N$ describing the initial board from left to right. An empty square and a square containing a pawn are denoted by the characters '.' and 'P' respectively.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Yes\" if Ada wins the game or \"No\" otherwise (without quotes).\n\n-----Constraints-----\n- 1\u2264T\u2264500$1 \\le T \\le 500$\n- 2\u2264N\u2264128$2 \\le N \\le 128$\n- S$S$ contains only characters '.' and 'P'\n\n-----Example Input-----\n1\n..P.P\n\n-----Example Output-----\nYes\n\n-----Explanation-----\nExample case 1: Ada can move the first pawn two squares to the left; the board after this move looks like\nP...P\n\nand now, Suzumo can only move the second pawn. If he moves it one square to the left, Ada will move it two squares to the left on her next move, and if he moves it two squares to the left, Ada will move it one square to the left, so the board after Ada's next move will look like\nPP...\n\nand Suzumo cannot make any move here.\n\n Examples: \nInput: \n['1', '..P.P']\nOutput: \n ['Yes']\n",
  "1039": "Problem: \n\u201cI am not in danger, Skyler. I am the danger. A guy opens his door and gets shot, and you think that of me? No! I am the one who knocks!\u201d\nSkyler fears Walter and ponders escaping to Colorado. Walter wants to clean his lab as soon as possible and then go back home to his wife. \nIn order clean his lab, he has to achieve cleaning level of lab as $Y$. The current cleaning level of the lab is $X$. \nHe must choose one positive odd integer $a$ and one positive even integer $b$. Note that, he cannot change $a$ or $b$ once he starts cleaning.\nHe can perform any one of the following operations for one round of cleaning:  \n- Replace $X$ with $X+a$.  \n- Replace $X$ with $X-b$.\nFind minimum number of rounds (possibly zero) to make lab clean.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. $T$ testcases follow :  \n- Each test case contains two space separated integers $X, Y$. \n\n-----Output:-----\nFor each test case, output an integer denoting minimum number of rounds to clean the lab.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $ |X|,|Y| \\leq 10^9$\n\n-----Sample Input:-----\n3\n0 5\n4 -5\n0 10000001\n\n-----Sample Output:-----\n1\n2\n1\n\n-----EXPLANATION:-----\n- \nFor the first testcase, you can convert $X$ to $Y$  by choosing $a=5$ and $b=2$.\n\nIt will cost minimum of $1$ cleaning round. You can select any other combination of $a, b$ satisfying above condition but will take minimum of $1$ cleaning round in any case.\n- \nFor the second testcase, you can convert $X$ to $Y$ by choosing $a=1$ and $b=10$. In first round they will replace $X$ to $X+a$ and then in second round replace to $X-b$. You can perform only one operation in one round.\n\n Examples: \nInput: \n['3', '0 5', '4 -5', '0 10000001']\nOutput: \n ['1', '2', '1']\n",
  "1040": "Problem: \nA string with length $L$ is called rich if $L \\ge 3$ and there is a character which occurs in this string strictly more than $L/2$ times.\nYou are given a string $S$ and you should answer $Q$ queries on this string. In each query, you are given a substring $S_L, S_{L+1}, \\ldots, S_R$. Consider all substrings of this substring. You have to determine whether at least one of them is rich.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $Q$.\n- The second line contains a single string $S$ with length $N$.\n- Each of the next $Q$ lines contains two space-separated integers $L$ and $R$ describing a query.\n\n-----Output-----\nFor each query, print a single line containing the string \"YES\" if the given substring contains a rich substring or \"NO\" if it does not contain any rich substring.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N, Q \\le 10^5$\n- $1 \\le L \\le R \\le N$\n- $S$ contains only lowercase English letters\n\n-----Example Input-----\n1\n10 2\nhelloworld\n1 3\n1 10\n\n-----Example Output-----\nNO\nYES\n\n Examples: \nInput: \n['1', '10 2', 'helloworld', '1 3', '1 10']\nOutput: \n ['NO', 'YES']\n",
  "1041": "Problem: \nRipul was skilled in the art of lapidary. He used to collect stones and convert it into decorative items for sale.  There were n stone shops. Each shop was having one exclusive stone of value s[i] , where 1<=i<=n.  If number of stones collected are more than 1, then total value will be product of values of all the stones he collected. Ripul wants to have maximum value of stones he collected. Help Ripul in picking up the subarray which leads to maximum value of stones he collected.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each testcase contains an integer $N$, denoting number of elements in the given array.\n- The second line contains $N$ space-separated integers $S1$, $S2$, \u2026, $SN$ denoting the value of stone in each shop. \n\n-----Output:-----\nFor each testcase, output the maximum value of stones possible, the starting index and ending index of the chosen subarray (0-based indexing). If there are multiple subarrays with same value, print the one with greater starting index. If there are multiple answer subarrays with same starting index, print the one with greater ending index. (The answer will fit in 64 bit binary number).\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $-100 \\leq S[i] \\leq 100$\n\n-----Subtasks-----\n- 30 points : $1 \\leq N \\leq 10^3$\n- 70 points : $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n1\n3\n\n1 2 3\n\n-----Sample Output:-----\n6 1 2\n\n-----EXPLANATION:-----\nIf Ripul collects all the all the three gems, total value will be 6 (1 * 2 * 3).\nIf Ripul collects last two gems, total value will be 6 (1 * 2 * 3).\nSo, he picks the subarray with greater starting index.\n\n Examples: \nInput: \n['1', '3', '1 2 3']\nOutput: \n ['6 1 2']\n",
  "1042": "Problem: \nChef wants to gift pairs to his friends this new year. But his friends like good pairs\nonly.\nA pair (a , b) is called a good pair if 1 <= a < b <= N such that GCD(a*b , P) = 1.\nSince Chef is busy in preparation for the party, he wants your help to find all the\ngood pairs.\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nINPUT\n\u2022 The first line of the input contains a single integer T.\n\u2022 The first and only line of each test case contain two integer N,P.\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nOUTPUT\nFor each test case, print a single line containing one integer \u2014 the total number of good\npairs\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nCONSTRAINTS\n\u2022 1 \u2264 T\u2264 50\n\u2022 2 \u2264 N,P \u226410^5\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExample Input\n2\n2 3\n3 3\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExample Output\n1\n1\n\n Examples: \nInput: \n['2', '2 3', '3 3', '\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014']\nOutput: \n ['1', '1']\n",
  "1043": "Problem: \nForgotten languages (also known as extinct languages) are languages that are no longer in use. Such languages were, probably, widely used before and no one could have ever imagined that they will become extinct at some point. Unfortunately, that is what happened to them. On the happy side of things, a language may be dead, but some of its words may continue to be used in other languages.\n\nUsing something called as the Internet, you have acquired a dictionary of N words of a forgotten language. Meanwhile, you also know K phrases used in modern languages. For each of the words of the forgotten language, your task is to determine whether the word is still in use in any of these K modern phrases or not.\n\n-----Input-----\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of a test case description contains two space separated positive integers N and K.\n\nThe second line of the description contains N strings denoting a dictionary of the forgotten language.\n\nEach of the next K lines of the description starts with one positive integer L denoting the number of words in the corresponding phrase in modern languages. The integer is followed by L strings (not necessarily distinct) denoting the phrase.\n\n-----Output-----\n\nFor each test case, output a single line containing N tokens (space-separated): if the ith word of the dictionary exists in at least one phrase in modern languages, then you should output YES as the ith token, otherwise NO.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\n- 1 \u2264 N \u2264 100\n- 1 \u2264 K, L \u2264 50\n- 1 \u2264 length of any string in the input \u2264 5\n\n-----Example-----\nInput:\n2\n3 2\npiygu ezyfo rzotm\n1 piygu\n6 tefwz tefwz piygu ezyfo tefwz piygu\n4 1\nkssdy tjzhy ljzym kegqz\n4 kegqz kegqz kegqz vxvyj\n\nOutput:\nYES YES NO \nNO NO NO YES\n\n Examples: \nInput: \n['2', '3 2', 'piygu ezyfo rzotm', '1 piygu', '6 tefwz tefwz piygu ezyfo tefwz piygu', '4 1', 'kssdy tjzhy ljzym kegqz', '4 kegqz kegqz kegqz vxvyj']\nOutput: \n ['YES YES NO', 'NO NO NO YES']\n",
  "1044": "Problem: \nYou're given an integer N. Write a program to calculate the sum of all the digits of N. \n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n9\n8\n\n Examples: \nInput: \n['3', '12345', '31203', '2123']\nOutput: \n ['15', '9', '8']\n",
  "1045": "Problem: \nYou are given Name of chef's friend and using chef's new method of calculating value of string , chef have to find the value of all the names. Since chef is busy , he asked you to do the work from him .\nThe method is a function $f(x)$ as follows - \n- \n$f(x)$ = $1$ , if $x$ is a consonent\n- \n$f(x)$ = $0$ , if $x$ is a vowel \nYour task is to apply the above function on all the characters in the string $S$ and convert the obtained binary string in decimal number N. Since the number N can be very large, compute it modulo $10^9+7$ .\nInput:\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each test line contains one String $S$ composed of lowercase English alphabet letters. \n\n-----Output:-----\nFor each case, print a single line containing one integer $N$ modulo  $10^9+7$ .\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq |S| \\leq 10^5$\n\n-----Sample Input:-----\n1\ncodechef\n\n-----Sample Output:-----\n173\n\n-----EXPLANATION:-----\nThe string \"codechef\" will be converted to 10101101 ,using the chef's method function . Which is equal to 173.\n\n Examples: \nInput: \n['1', 'codechef']\nOutput: \n ['173']\n",
  "1046": "Problem: \nBears love candies and games involving eating them. Limak and Bob play the following game. Limak eats 1 candy, then Bob eats 2 candies, then Limak eats 3 candies, then Bob eats 4 candies, and so on. Once someone can't eat what he is supposed to eat, he loses.\nLimak can eat at most A candies in total (otherwise he would become sick), while Bob can eat at most B candies in total.\nWho will win the game?\nPrint \"Limak\" or \"Bob\" accordingly.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains two integers A and B denoting the maximum possible number of candies Limak can eat and the maximum possible number of candies Bob can eat respectively.\n\n-----Output-----\nFor each test case, output a single line containing one string \u2014 the name of the winner (\"Limak\" or \"Bob\" without the quotes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A, B \u2264 1000\n\n-----Example-----\nInput:\n10\n3 2\n4 2\n1 1\n1 2\n1 3\n9 3\n9 11\n9 12\n9 1000\n8 11\n\nOutput:\nBob\nLimak\nLimak\nBob\nBob\nLimak\nLimak\nBob\nBob\nBob\n\n-----Explanation-----\nTest case 1. We have A = 3 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies. Then Limak is supposed to eat 3 candies but that would mean 1 + 3 = 4 candies in total. It's impossible because he can eat at most A candies, so he loses. Bob wins, and so we print \"Bob\".\nTest case 2. Now we have A = 4 and B = 2. Limak eats 1 candy first, and then Bob eats 2 candies, then Limak eats 3 candies (he has 1 + 3 = 4 candies in total, which is allowed because it doesn't exceed A). Now Bob should eat 4 candies but he can't eat even a single one (he already ate 2 candies). Bob loses and Limak is the winner.\nTest case 8. We have A = 9 and B = 12. The game looks as follows:\n- Limak eats 1 candy.\n- Bob eats 2 candies.\n- Limak eats 3 candies (4 in total).\n- Bob eats 4 candies (6 in total).\n- Limak eats 5 candies (9 in total).\n- Bob eats 6 candies (12 in total).\n- Limak is supposed to eat 7 candies but he can't \u2014 that would exceed A. Bob wins.\n\n Examples: \nInput: \n['10', '3 2', '4 2', '1 1', '1 2', '1 3', '9 3', '9 11', '9 12', '9 1000', '8 11']\nOutput: \n ['Bob', 'Limak', 'Limak', 'Bob', 'Bob', 'Limak', 'Limak', 'Bob', 'Bob', 'Bob']\n",
  "1047": "Problem: \nChef bought a huge (effectively infinite) planar island and built $N$ restaurants (numbered $1$ through $N$) on it. For each valid $i$, the Cartesian coordinates of restaurant $i$ are $(X_i, Y_i)$.\nNow, Chef wants to build $N-1$ straight narrow roads (line segments) on the island. The roads may have arbitrary lengths; restaurants do not have to lie on the roads. The slope of each road must be $1$ or $-1$, i.e. for any two points $(x_1, y_1)$ and $(x_2, y_2)$ on the same road, $|x_1-x_2| = |y_1-y_2|$ must hold.\nLet's denote the minimum distance Chef has to walk from restaurant $i$ to reach a road by $D_i$. Then, let's denote $a = \\mathrm{max}\\,(D_1, D_2, \\ldots, D_N)$; Chef wants this distance to be minimum possible.\nChef is a busy person, so he decided to give you the job of building the roads. You should find a way to build them that minimises $a$ and compute $a \\cdot \\sqrt{2}$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $X_i$ and $Y_i$.\n\n-----Output-----\nFor each test case, print a single line containing one real number \u2014 the minimum distance $a$ multiplied by $\\sqrt{2}$. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 10^4$\n- $|X_i|, |Y_i| \\le 10^9$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 5$\n- $|X_i|, |Y_i| \\le 10$ for each valid $i$\n- $a \\cdot \\sqrt{2}$ is an integer\nSubtask #2 (90 points): original constraints\n\n-----Example Input-----\n2\n3\n0 0\n0 1\n0 -1\n3\n0 1\n1 0\n-1 0\n\n-----Example Output-----\n0.5\n0\n\n-----Explanation-----\nExample case 1: We should build roads described by equations $y-x+0.5 = 0$ and $y-x-0.5 = 0$.\nExample case 2: We should build roads described by equations $y-x-1 = 0$ and $y+x-1 = 0$.\n\n Examples: \nInput: \n['2', '3', '0 0', '0 1', '0 -1', '3', '0 1', '1 0', '-1 0']\nOutput: \n ['0.5', '0']\n",
  "1048": "Problem: \nThere are three squares, each with side length a placed on the x-axis. The coordinates of centers of these squares are (x1, a/2), (x2, a/2) and (x3, a/2) respectively. All of them are placed with one of their sides resting on the x-axis.\nYou are allowed to move the centers of each of these squares along the x-axis (either to the left or to the right)  by a distance of at most K. Find the maximum possible area of intersections of all these three squares that you can achieve. That is, the maximum area of the region which is part of all the three squares in the final configuration.\n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains two space-separated integers a, K denoting side length of the squares, and the maximum distance that you can move the center of any square.\n- The second line contains three space separated integers x1, x2, x3\n\n-----Output-----\nFor each test case, output a real number corresponding to the maximum area of the intersection of the three squares that you can obtain. Your answer will be considered correct if it has an absolute error of less than or equal to \t10-2.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 a \u2264 105\n- 0 \u2264 K \u2264 106\n- -106 \u2264 x1, x2, x3 \u2264 106\n\n-----Example-----\nInput\n3\n1 0\n1 2 3\n1 1\n1 2 3\n1 1\n1 4 6\n\nOutput\n0.000000\n1.0000\n0.0\n\n-----Explanation-----\nTestcase 1: The figure below shows the three squares:\n\nSince K = 0, they cannot be moved, and since there is no region which belongs to all three squares, the answer is 0.\nTestcase 2: The starting configuration is the same as above, but now each of the squares can move 1 unit. So we can move the first square 1 unit to the right and the third square one unit to the left, and have all the three squares at x-coordinate = 2. Thus the entire square is part of all three squares, and the answer is 1.\n\n Examples: \nInput: \n['3', '1 0', '1 2 3', '1 1', '1 2 3', '1 1', '1 4 6']\nOutput: \n ['0.000000', '1.0000', '0.0']\n",
  "1049": "Problem: \n-----\nARRAY AND DISTINCT ELEMENTS\n-----\n\nChef is multitalented but he mistakenly took part in 2 contest which will take place\nat the same time. So while chef is busy at one cooking contest, he wants you to\ntake part in coding contest. Chef wants u to solve this program for him.\n\n\t\n\nYou have been given an array of size n. You have to calculate a subarray of size k\nwith maximum sum having distinct elements same as original array.\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases. Second line contains n and k. Third line\ncontains array of n integers.\n\n\n-----Output-----\n\nPrint maximum possible sum as stated in question\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n1\n10 6\n8 8 3 5 3 8 5 7 7 7\n\nOutput:\n37\n\n\t\t\n\n Examples: \nInput: \n['1', '10 6', '8 8 3 5 3 8 5 7 7 7']\nOutput: \n ['37']\n",
  "1050": "Problem: \nLira is now very keen on compiler development. :) \nShe knows that one of the most important components of a compiler, is its parser.\nA parser is, in simple terms, a software component that processes text, and checks it's semantic correctness, or, if you prefer, if the text is properly built.\nAs an example, in declaring and initializing an integer, in C/C++, you can't do something like:\nint = x ;4\nas the semantics of such statement is incorrect, as we all know that the datatype must precede an identifier and only afterwards should come the equal sign and the initialization value, so, the corrected statement should be:\nint x = 4;\nToday, Lira is concerned with an abstract instruction which is composed of the characters \"<\" and \">\" , which she will use on the design of her language, L++ :D.\nShe is using it as an abstraction for generating XML code Tags in an easier fashion and she understood that, for an expression to be valid, a \"<\" symbol must always have a corresponding \">\" character somewhere (not necessary immediately) after it. Moreover, each \">\" symbol should correspond to exactly one \"<\" symbol.\nSo, for instance, the instructions:\n<<>> \n<> \n<><> \nare all valid. While:\n>> \n><>< \nare not.\nGiven some expressions which represent some instructions to be analyzed by Lira's compiler, you should tell the length of the longest prefix of each of these expressions that is valid, or 0 if there's no such a prefix.\n\n-----Input-----\nInput will consist of an integer T denoting the number of test cases to follow.\nThen, T strings follow, each on a single line, representing a possible expression in L++.\n\n-----Output-----\nFor each expression you should output the length of the longest prefix that is valid or 0 if there's no such a prefix. \n\n\n-----Constraints-----\n- 1 \u2264 T \u2264 500\n- 1 \u2264 The length of a single expression \u2264 106\n- The total size all the input expressions is no more than 5*106\n\n-----Example-----\nInput:\n3\n<<>>\n><\n<>>>\nOutput:\n4\n0\n2\n\n Examples: \nInput: \n['3', '<<>>', '><', '<>>>', '']\nOutput: \n ['4', '0', '2']\n",
  "1051": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n0\n*1\n**2\n0\n*1\n**2\n***3\n0\n*1\n**2\n***3\n****4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['3', '2', '3', '4', '']\nOutput: \n ['0', '*1', '**2', '0', '*1', '**2', '***3', '0', '*1', '**2', '***3', '****4']\n",
  "1053": "Problem: \nChef has a binary array in an unsorted manner. Cheffina challenges chef to find the transition point in the sorted (ascending) binary array. Here indexing is starting from 0.\nNote: Transition point always exists.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, $N$.\n- N space-separated binary numbers. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n1\n5\n0 1 0 0 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nbinary array in sorted form will look like = [0, 0, 0, 1, 1]\n\n Examples: \nInput: \n['1', '5', '0 1 0 0 1', '']\nOutput: \n ['3']\n",
  "1054": "Problem: \nChef likes strings a lot but he likes palindromic strings even more. Today he found an old string s in his garage. The string is so old that some of its characters have faded and are unidentifiable now. Faded characters in the string are represented by '.' whereas other characters are lower case Latin alphabets i.e ['a'-'z'].\n\nChef being the palindrome lover decided to construct the lexicographically smallest palindrome by filling each of the faded character ('.') with a lower case Latin alphabet. Can you please help him completing the task?\n\n-----Input-----\nFirst line of input contains a single integer T denoting the number of test cases. T test cases follow.\nFirst and the only line of each case contains string s denoting the old string that chef has found in his garage.\n\n-----Output-----\nFor each test case, print lexicographically smallest palindrome after filling each faded character - if it possible to construct one. Print -1 otherwise.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 |s| \u2264 12345\n- String s consists of ['a'-'z'] and '.' only.\n\n-----Subtasks-----Subtask #1 (47 points)\n- 1 \u2264 T \u2264 50, 1 \u2264 |S| \u2264 123\nSubtask #2 (53 points)\n- 1 \u2264 T \u2264 50, 1 \u2264 |S| \u2264 12345\n\n-----Example-----Input\n3\na.ba\ncb.bc\na.b\n\nOutput\nabba\ncbabc\n-1\n\n-----Explanation-----\nIn example 1, you can create a palindrome by filling the faded character by 'b'.\nIn example 2, you can replace the faded character by any character from 'a' to 'z'. We fill it by 'a', as it will generate the lexicographically smallest palindrome.\nIn example 3, it is not possible to make the string s a palindrome.\n\n Examples: \nInput: \n['3', 'a.ba', 'cb.bc', 'a.b']\nOutput: \n ['abba', 'cbabc', '-1']\n",
  "1055": "Problem: \nChef is planning a huge party for all of you and has ordered M pizzas. He wants to invite as many people to the party. However, he knows that everyone will have exactly one slice of a pizza (regardless of the size) and he wants to make sure that he has enough pizza slices. \nChef is very lazy and will only make a total of N straight cuts among all the pizzas. Each pizza is also of different size and to avoid the slices getting too small the chef can only make a max of Ai cuts to the ith pizza. He wants to maximize the number of slices of pizza. Since chef is busy with preparing other aspects of the party he wants you to find out the maximum number of slices he can get following the constraints. \nIf a pizza is not cut at all then it is considered as 1 slice.  \n\n-----Input-----\nFirst line contains two integers M and N.\nThe second line of input contains the array A.\n\n-----Output-----\nOutput a single integer - the maximum number of slices chef can get.\n\n-----Constraints-----\n- 1 \u2264 M \u2264 2*105\n- 1 \u2264 N,Ai \u2264 2*105\n\n-----Subtasks-----\n- Subtask 1: 1 \u2264 M,N \u2264 100 - 10 points \n- Subtask 2: 1 \u2264 N \u2264 100, \n1 \u2264 M \u2264 105 - 20 points\n- Subtask 3: Original Constraints - 70 points\n\n-----Example-----\nInput:\n5 10\n1 2 3 4 5\nOutput:\n31\n\n-----Explanation-----\nExample case 1. One of the optimal way to cut would be to do {0, 1,  0, 4, 5} cuts.\n\n Examples: \nInput: \n['5 10', '1 2 3 4 5', '']\nOutput: \n ['31']\n",
  "1056": "Problem: \nWrite a program to check whether a triangle is valid or not, when the three angles of the triangle are the inputs. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\n Examples: \nInput: \n['3 ', '40 40 100', '45 45 90', '180 1 1', '']\nOutput: \n ['YES', 'YES', 'NO']\n",
  "1057": "Problem: \nAlice is a very brilliant student. He considers '4' and '7' as Magic numbers. The numbers containing only magic numbers are also magical. Given a magic number N ,he wants to know what could be the next magical number greater than the given number.\n\n-----Input-----\n\nFirst line of input contains number of test cases T. For each test case, there is exits only one line containing a magic number N. \n\n-----Output-----\n\nFor each test case,  output a single line containing the next greater magical number.\n\n-----Constraints-----\n1<=T<=1000\n4<= N<=10^100\n\n-----Example-----\nInput:\n2\n4\n47\n\nOutput:\n7\n74\n\n Examples: \nInput: \n['2', '4', '47', '', '']\nOutput: \n ['7', '74']\n",
  "1058": "Problem: \nThere is a popular apps named \u201cExbook\u201d like \u201cFacebook\u201d. To sign up in this app , You have to make a strong password with more than 3 digits and less than 10 digits . But I am a pro hacker and so I make a Exbook hacking site . You need to login in this site to hack exbook account and then you will get a portal. You can give any user exbook login link using this site and when anyone login into exbook using your link ,you can see his/her password .\nBut I made a mistake and so you cannot find original password in your portal . The portal showing you by adding two in every digit . So , now you have to find out the original password of an user if I give you the password which is showing in your portal .\n\n-----Input:-----\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\nThe first line of each test case contains a single integer n which is showing in your portal . Mind it , every digit of n is greater than one .\n\n-----Output:-----\nPrint , original password of user .\n\n-----Sample Input:-----\n2\n3527\n47269\n\n-----Sample Output:-----\n1305\n25047\n\n Examples: \nInput: \n['2', '3527', '47269']\nOutput: \n ['1305', '25047']\n",
  "1059": "Problem: \nYou have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n-----Explanation-----\nThere will be four values, A[0]%A[0] = 0, A[0]%A[1]=1, A[1]%A[0]=0, A[1]%A[1]=0, and hence the output will be the maximum among them all, that is 1.\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['1']\n",
  "1060": "Problem: \nChef and Abhishek both are fighting for the post of Chairperson to be part of ACE committee and are trying their best. To select only one student their teacher gave them a binary string (string consisting of only 0's and 1's) and asked them to find number of sub-strings present in the given string that satisfy the following condition:\nThe substring should start with 0 and end with 1 or the substring should start with 1 and end with 0 but not start with 0 and end with 0 and start with 1 and end with 1.\nMore formally, strings such as 100,0101 are allowed since they start and end with different characters. But strings such as 0110,1101 are not allowed because they start and end with same characters.\nBoth Chef and Abhishek try their best to solve it but couldn't do it. You being a very good friend of Chef, he asks for your help so that he can solve it and become the Chairperson.\n\n-----Input:-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the length of the string.\nThe second line of each test case contains a binary string of length N.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of sub strings satisfying above conditions.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N \\leq 10^9$\nBinary string consist's only 0 and 1.\n\n-----Sample Input:-----\n1\n4\n\n1010\n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----\nAll possible substring are : { (1),(0),(1),(0),(10),(01),(10),(101),(010),(1010) }. Out of these only 4 substrings {(10),(01),(10),(1010)} start and end with different characters. Hence the answer 4.\n\n Examples: \nInput: \n['1', '4', '1010']\nOutput: \n ['4']\n",
  "1062": "Problem: \nHo, Ho, Ho!\nIt's Christmas time and our friendly grandpa Santa Claus is busy distributing gifts to all the nice children. With the rising population, Santa's workload every year gets increased and he seeks your help to wrap the gifts with fancy wrapping papers while he gets them distributed. \nEverything was going great until you realised that you'll fall short of wrapping paper. But luckily, you get a very innovative idea, that will allow you to pack all the remaining gifts without worrying about lack of wrapping paper. Any guesses what the idea is? Using ice for wrapping, obviously! That's the only thing available at the North Pole.\nNow, in order to reduce your trips to the ice factory, you decide to write a program that helps you visualize how much ice is needed for a particular gift. \n\n-----Input:-----\nInput will consist of a single line with size $n$.\n\n-----Output:-----\nPrint the ice wrapped gift box for the given size. \n\n-----Constraints-----\n- $0 \\leq n \\leq 1000$\n\n-----Sample Input:-----\n4\n\n-----Sample Output:-----\n4 4 4 4 4 4 4\n4 3 3 3 3 3 4\n4 3 2 2 2 3 4\n4 3 2 1 2 3 4\n4 3 2 2 2 3 4 \n4 3 3 3 3 3 4\n4 4 4 4 4 4 4\n\n Examples: \nInput: \n['4']\nOutput: \n ['4 4 4 4 4 4 4', '4 3 3 3 3 3 4', '4 3 2 2 2 3 4', '4 3 2 1 2 3 4', '4 3 2 2 2 3 4', '4 3 3 3 3 3 4', '4 4 4 4 4 4 4']\n",
  "1063": "Problem: \nWrite a program to find the remainder when an integer A is divided by an integer B.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, find the remainder when A is divided by  B, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n40 15\n\nOutput\n1\n100\n10\n\n Examples: \nInput: \n['3', '1 2', '100 200', '40 15']\nOutput: \n ['1', '100', '10']\n",
  "1064": "Problem: \nChef Ciel wants to put a fancy neon signboard over the entrance of her restaurant. She has not enough money to buy the new one so she bought some old neon signboard through the internet. Ciel was quite disappointed when she received her order - some of its letters were broken. But she realized that this is even better - she could replace each broken letter by any letter she wants. So she decided to do such a replacement that the resulting signboard will contain the word \"CHEF\" as many times as possible.\nWe can model the signboard as a string S having capital letters from 'A' to 'Z', inclusive, and question marks '?'. Letters in the string indicate the intact letters at the signboard, while question marks indicate broken letters. So Ciel will replace each question mark with some capital letter and her goal is to get the string that contains as many substrings equal to \"CHEF\" as possible. If there exist several such strings, she will choose the lexicographically smallest one.\nNote 1. The string S = S1...SN has the substring \"CHEF\" if for some i we have SiSi+1Si+2Si+3 = \"CHEF\". The number of times \"CHEF\" is the substring of S is the number of those i for which SiSi+1Si+2Si+3 = \"CHEF\".\nNote 2. The string A = A1...AN is called lexicographically smaller than the string B = B1...BN if there exists K from 1 to N, inclusive, such that Ai = Bi for i = 1, ..., K-1, and AK < BK. In particular, A is lexicographically smaller than B if A1 < B1. We compare capital letters by their positions in the English alphabet. So 'A' is the smallest letter, 'B' is the second smallest letter, ..., 'Z' is the largest letter.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains a string S.\n\n-----Output-----\nFor each test case, output a single line containing the content of the signboard Chef Ciel will come up with. That is you should output the lexicographically smallest string that could be obtained from the input string by replacing all its question marks by some capital letters and having as many substrings equal to \"CHEF\" as possible.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 2013\n- 1 \u2264 length of S \u2264 2013\n- Each character in S is either a capital letter from 'A' to 'Z', inclusive, or the question mark '?'.\n\n-----Example-----\nInput:\n5\n????CIELIS???E?\n????CIELISOUR???F\nT?KEITE?SY\n????????\n???C???\n\nOutput:\nCHEFCIELISACHEF\nCHEFCIELISOURCHEF\nTAKEITEASY\nCHEFCHEF\nAAACHEF\n\n-----Explanation -----\nExample Case 1. Here the resulting string can have at most 2 substrings equal to \"CHEF\". For example, some possible such strings are:\n\n- CHEFCIELISACHEF\n- CHEFCIELISQCHEF\n- CHEFCIELISZCHEF\nHowever, lexicographically smallest one is the first one.\n\nExample Case 3. Here the resulting string cannot have \"CHEF\" as its substring. Therefore, you must simply output the lexicographically smallest string that can be obtained from the given one by replacing question marks with capital letters.\n\n Examples: \nInput: \n['5', '????CIELIS???E?', '????CIELISOUR???F', 'T?KEITE?SY', '????????', '???C???']\nOutput: \n ['CHEFCIELISACHEF', 'CHEFCIELISOURCHEF', 'TAKEITEASY', 'CHEFCHEF', 'AAACHEF']\n",
  "1065": "Problem: \nChefland is a grid with N$N$ rows and M$M$ columns. Each cell of this grid is either empty or contains a house. The distance between a pair of houses is the Manhattan distance between the cells containing them.\nFor each d$d$ between 1$1$ and N+M\u22122$N+M-2$ inclusive, Chef wants to calculate the number of unordered pairs of distinct houses with distance equal to d$d$. Please help him!\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains two space-separated integers N$N$ and M$M$.\n- N$N$ lines follow. For each i$i$ (1\u2264i\u2264N$1 \\le i \\le N$), the i$i$-th of these lines contains a binary string with length M$M$; for each j$j$ (1\u2264j\u2264M$1 \\le j \\le M$), the j$j$-th character of this string is '1' if the cell in the i$i$-th row and j$j$-th column contains a house or '0' if it is empty.\n\n-----Output-----\nFor each test case, print a single line containing N+M\u22122$N+M-2$ space-separated integers. For each valid i$i$, the i$i$-th integer should denote the number of pairs with distance i$i$.\n\n-----Constraints-----\n- 1\u2264T\u22643$1 \\le T \\le 3$\n- 2\u2264N,M\u2264300$2 \\le N, M \\le 300$\n\n-----Subtasks-----\nSubtask #1 (50 points): N,M\u226450$N, M \\le 50$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n1\n3 4\n0011\n0000\n0100\n\n-----Example Output-----\n1 0 1 1 0\n\n Examples: \nInput: \n['1', '3 4', '0011', '0000', '0100']\nOutput: \n ['1 0 1 1 0']\n",
  "1066": "Problem: \n-----\nCHEF N TIMINGS\n-----\n\nOne day chef was working with some random numbers. Then he found something\ninteresting. He observed that no 240, 567, 9999 and 122 and called these numbers\nnice as the digits in numbers are in increasing order. Also he called 434, 452, 900\nare not nice as digits are in decreasing order\n\n\t\n\nNow you are given a no and chef\nwants you to find out largest \"nice\" integer which is smaller than or equal to the\ngiven integer.\n\n\t\t\n\t\t\n\n-----Constraints-----\n\n1< t < 1000 \n\n1< N < 10^18\n\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases t. Then t test cases follow. Each test case\ncontain a integer n.\n\n-----Output-----\n\nOutput a integer for each test case in a new line which is largest nice\ninteger smaller or equal to the given integer. \n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n1\n132\n\nOutput:\n\n129\n\t\n\t\t\n\n Examples: \nInput: \n['1', '132']\nOutput: \n ['129']\n",
  "1068": "Problem: \nAda's classroom contains $N \\cdot M$ tables distributed in a grid with $N$ rows and $M$ columns. Each table is occupied by exactly one student.\nBefore starting the class, the teacher decided to shuffle the students a bit. After the shuffling, each table should be occupied by exactly one student again. In addition, each student should occupy a table that is adjacent to that student's original table, i.e. immediately to the left, right, top or bottom of that table.\nIs it possible for the students to shuffle while satisfying all conditions of the teacher?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $M$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if it is possible to satisfy the conditions of the teacher or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 5,000$\n- $2 \\le N, M \\le 50$\n\n-----Example Input-----\n2\n3 3\n4 4\n\n-----Example Output-----\nNO\nYES\n\n-----Explanation-----\nExample case 2: The arrows in the following image depict how the students moved.\n\n Examples: \nInput: \n['2', '3 3', '4 4']\nOutput: \n ['NO', 'YES']\n",
  "1069": "Problem: \nShivam is the youngest programmer in the world, he is just 12 years old. Shivam is learning programming and today he is writing his first program. \n\nProgram is very simple, Given two integers A and B, write a program to add these two numbers.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, add A and B and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50\n\n Examples: \nInput: \n['3', '1 2', '100 200', '10 40']\nOutput: \n ['3', '300', '50']\n",
  "1071": "Problem: \nBob just learned about bitwise operators. Since Alice is an expert, she decided to play a game, she will give a number $x$ to Bob and will ask some questions:\nThere will be 4 different kinds of queries:-\n- \nAlice gives an integer $i$ and Bob has to report the status of the $i^{th}$ bit in $x$, the answer is $\"ON\"$ if it is on else $\"OFF\"$.\n- \nAlice gives an integer $i$ and Bob has to turn on the $i^{th}$ bit in $x$.\n- \nAlice gives an integer $i$ and Bob has to turn off the $i^{th}$ bit in $x$.\n- \nAlice gives two integers $p$ and $q$ and in the binary representation of $x$ Bob has to swap the $p^{th}$ and the $q^{th}$ bits.\nThe value of $x$ changes after any update operation.\npositions $i$, $p$, and $q$ are always counted from the right or from the least significant bit.\nIf anyone of $i$, $p$, or $q$ is greater than the number of bits in the binary representation of $x$, consider $0$ at that position.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- the first line of each test case contains two space-separated integers $x, Q$.\n- $2Q$ lines follow.\n- first line is an integer, the query type.\n- for each query of type 1 to 3, there will be the integer $i$\n- for the query of type 4, there will be two space-separated integers, the integers $p, q$\n\n-----Output:-----\nFor the queries of the first kind, print $\"ON\"$ or $\"OFF\"$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq x \\leq 10^9$\n- $1 \\leq Q \\leq 10^3$\n- $1 \\leq i,p,q \\leq 30$\n\n-----Sample Input-----\n1\n2 2\n2 \n1\n1 \n1\n\n-----Sample Output:-----\nON\n\n-----EXPLANATION:-----\nthe binary representation of 2 is 10\nfor query 1, we just have to update x to 11 (or 3 in decimal).\nfor the next query, x is now 3 or 11 in binary so the answer is ON.\n\n Examples: \nInput: \n['1', '2 2', '2', '1', '1', '1']\nOutput: \n ['ON']\n",
  "1072": "Problem: \nProblem description.\nWinston and Royce love sharing memes with each other. They express the amount of seconds they laughed ar a meme as the number of \u2018XD\u2019 subsequences in their messages. Being optimization freaks, they wanted to find the string with minimum possible length and having exactly the given number of \u2018XD\u2019 subsequences.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases.\n- Next T lines contains a single integer N, the no of seconds laughed.\n\n-----Output-----\n- \nFor each input, print the corresponding string having minimum length. If there are multiple possible answers, print any.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 109\n- 1 \u2264 Sum of length of output over all testcases \u2264 5*105\n\n-----Example-----\nInput:\n1\n9\n\nOutput:\nXXXDDD\n\n-----Explanation-----\nSome of the possible strings are - XXDDDXD,XXXDDD,XDXXXDD,XDXDXDD etc. Of these, XXXDDD is the smallest.\n\n Examples: \nInput: \n['1', '9']\nOutput: \n ['XXXDDD']\n",
  "1073": "Problem: \nYou are given two integers $N$ and $M$. Find the number of sequences $A_1, A_2, \\ldots, A_N$, where each element is an integer between $1$ and $M$ (inclusive) and no three consecutive elements are equal. Since this number could be very large, compute it modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $M$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of valid sequences modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le N, M \\le 10^{18}$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $T \\le 20$\n- $N \\le 10^5$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2 \n2 2\n3 4\n\n-----Example Output-----\n4\n60\n\n Examples: \nInput: \n['2', '2 2', '3 4']\nOutput: \n ['4', '60']\n",
  "1074": "Problem: \nChef is making Window frames for his new office, for this he has  n wooden Logs whose lengths are l1,\u2009l2,\u2009\u2026 ln respectively. Chef Doesn\u2019t want to break any logs or Stick 2 or more logs together.\nTo make a  h\u2009\u00d7\u2009w Window Frame, he needs two Logs with lengths equal h and two with length . \nThe Chef wants as much sunlight in as possible and for it he has decided to make from the available logs as many frames as possible. Help him in finding the number of window Frames that he can make. \nNote : Chef do not need to use all the logs\nInput:\nThe first line of the input contains a single integer T denoting the number of test cases. The description of each test case follows :.\nThe first line of each test case contains a single integer n the number of wooden logs. \nThe second line contains  n space-separated integers l1,l2,l3\u2026.ln The length of each wooden log\nOutput: \nThe only line in Output Contains single Integer denoting the maximum possible number of Wooden Frames.\nConstraints:\n1 \u2264 T \u2264 10\n1 \u2264 n \u2264 100\n1 \u2264 li \u2264 10000\nExample Input:\n2\n4\n1 2 1 2\n8\n1 2 1 3 4 1 5 6\nExample Output:\n1\n0\nExplanation :\nFirst Case :  We can build a frame of dimension 1x2 as two logs of each dimension are available.\nSecond Case :  We can\u2019t build any Frame as no logs of length except 1 have more than one piece.\n\n Examples: \nInput: \n['2', '4', '1 2 1 2', '8', '1 2 1 3 4 1 5 6']\nOutput: \n ['1', '0']\n",
  "1075": "Problem: \nHenry and Derek are waiting on a room, eager to join the Snackdown 2016 Qualifier Round. They decide to pass the time by playing a game.  \nIn this game's setup, they write N positive integers on a blackboard. Then the players take turns, starting with Henry. In a turn, a player selects one of the integers, divides it by 2, 3, 4, 5 or 6, and then takes the floor to make it an integer again. If the integer becomes 0, it is erased from the board. The player who makes the last move wins.  \n\nHenry and Derek are very competitive, so aside from wanting to win Snackdown, they also want to win this game. Assuming they play with the optimal strategy, your task is to predict who wins the game.  \n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of integers they wrote on the board. The second line contains N space-separated integers A1, A2, ..., AN denoting the integers themselves.\n\n-----Output-----\nFor each test case, output a single line containing either \u201cHenry\u201d or \u201cDerek\u201d (without quotes), denoting the winner of the game.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 1018\n\n-----Example-----\nInput:2\n2\n3 4\n3\n1 3 5\n\nOutput:Henry\nDerek\n\n-----Explanation-----\nExample case 1. In this test case, the numbers on the board are [3,4]. Henry can win by selecting 4 and then dividing it by 2. The integers on the board are now [3,2]. Derek now has a couple of choices:\n- Derek can divide 2 by 3, 4, 5 or 6, making it 0 and removing it. Now only one integer remains on the board, 3, and Henry can just divide it by 6 to finish, and win, the game.\n- Derek can divide 3 by 4, 5 or 6, making it 0 and removing it. Now only one integer remains on the board, 2, and Henry can just divide it by 6 to finish, and win, the game.\n- Derek can divide 2 by 2. Now the integers are [1,3]. Henry can respond by dividing 3 by 3. The integers are now [1,1]. Now Derek has no choice but to divide 1 by 2, 3, 4, 5 or 6 and remove it (because it becomes 0). Henry can respond by dividing the remaining 1 by 2 to finish, and win, the game.\n- Derek can divide 3 by 2 or 3. Now the integers are [1,2]. Henry can respond by dividing 2 by 2. The integers are now [1,1]. This leads to a situation as in the previous case and Henry wins.\n\n Examples: \nInput: \n['2', '2', '3 4', '3', '1 3 5']\nOutput: \n ['Henry', 'Derek']\n",
  "1077": "Problem: \nChef recently printed directions from his home to a hot new restaurant across the town, but forgot to print the directions to get back home. Help Chef to transform the directions to get home from the restaurant.\nA set of directions consists of several instructions. The first instruction is of the form \"Begin on XXX\", indicating the street that the route begins on. Each subsequent instruction is of the form \"Left on XXX\" or \"Right on XXX\", indicating a turn onto the specified road.\nWhen reversing directions, all left turns become right turns and vice versa, and the order of roads and turns is reversed. See the sample input for examples.\n\n-----Input-----\nInput will begin with an integer T, the number of test cases that follow. Each test case begins with an integer N, the number of instructions in the route. N lines follow, each with exactly one instruction in the format described above.\n\n-----Output-----\nFor each test case, print the directions of the reversed route, one instruction per line. Print a blank line after each test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 15\n- 2 \u2264 N \u2264 40\n- Each line in the input will contain at most 50 characters, will contain only alphanumeric characters and spaces and will not contain consecutive spaces nor trailing spaces. By alphanumeric characters we mean digits and letters of the English alphabet (lowercase and uppercase).\n\n-----Sample Input-----\n2\n4\nBegin on Road A\nRight on Road B\nRight on Road C\nLeft on Road D\n6\nBegin on Old Madras Road\nLeft on Domlur Flyover\nLeft on 100 Feet Road\nRight on Sarjapur Road\nRight on Hosur Road\nRight on Ganapathi Temple Road\n\n-----Sample Output-----\nBegin on Road D\nRight on Road C\nLeft on Road B\nLeft on Road A\n\nBegin on Ganapathi Temple Road\nLeft on Hosur Road\nLeft on Sarjapur Road\nLeft on 100 Feet Road\nRight on Domlur Flyover\nRight on Old Madras Road\n\n-----Explanation-----\nIn the first test case, the destination lies on Road D, hence the reversed route begins on Road D. The final turn in the original route is turning left from Road C onto Road D. The reverse of this, turning right from Road D onto Road C, is the first turn in the reversed route.\n\n Examples: \nInput: \n['2', '4', 'Begin on Road A', 'Right on Road B', 'Right on Road C', 'Left on Road D', '6', 'Begin on Old Madras Road', 'Left on Domlur Flyover', 'Left on 100 Feet Road', 'Right on Sarjapur Road', 'Right on Hosur Road', 'Right on Ganapathi Temple Road', '']\nOutput: \n ['Begin on Road D', 'Right on Road C', 'Left on Road B', 'Left on Road A', '', 'Begin on Ganapathi Temple Road', 'Left on Hosur Road', 'Left on Sarjapur Road', 'Left on 100 Feet Road', 'Right on Domlur Flyover', 'Right on Old Madras Road']\n",
  "1078": "Problem: \nFor her next karate demonstration, Ada will break some bricks.\nAda stacked three bricks on top of each other. Initially, their widths (from top to bottom) are $W_1, W_2, W_3$.\nAda's strength is $S$. Whenever she hits a stack of bricks, consider the largest $k \\ge 0$ such that the sum of widths of the topmost $k$ bricks does not exceed $S$; the topmost $k$ bricks break and are removed from the stack. Before each hit, Ada may also decide to reverse the current stack of bricks, with no cost.\nFind the minimum number of hits Ada needs in order to break all bricks if she performs the reversals optimally. You are not required to minimise the number of reversals.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains four space-separated integers $S$, $W_1$, $W_2$ and $W_3$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum required number of hits.\n\n-----Constraints-----\n- $1 \\le T \\le 64$\n- $1 \\le S \\le 8$\n- $1 \\le W_i \\le 2$ for each valid $i$\n- it is guaranteed that Ada can break all bricks\n\n-----Subtasks-----\nSubtask #1 (50 points): $W_1 = W_2 = W_3$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n3\n3 1 2 2\n2 1 1 1\n3 2 2 1\n\n-----Example Output-----\n2\n2\n2\n\n-----Explanation-----\nExample case 1: Ada can reverse the stack and then hit it two times. Before the first hit, the widths of bricks in the stack (from top to bottom) are $(2,2,1)$. After the first hit, the topmost brick breaks and the stack becomes $(2,1)$. The second hit breaks both remaining bricks.\nIn this particular case, it is also possible to hit the stack two times without reversing. Before the first hit, it is $(1, 2, 2)$. The first hit breaks the two bricks at the top (so the stack becomes $(2)$) and the second hit breaks the last brick.\n\n Examples: \nInput: \n['3', '3 1 2 2', '2 1 1 1', '3 2 2 1']\nOutput: \n ['2', '2', '2']\n",
  "1079": "Problem: \nKostya likes the number 4 much. Of course! This number has such a lot of properties, like:\n\n- Four is the smallest composite number;\n- It is also the smallest Smith number;\n- The smallest non-cyclic group has four elements;\n- Four is the maximal degree of the equation that can be solved in radicals;\n- There is four-color theorem that states that any map can be colored in no more than four colors in such a way that no two adjacent regions are colored in the same color;\n- Lagrange's four-square theorem states that every positive integer can be written as the sum of at most four square numbers;\n- Four is the maximum number of dimensions of a real division algebra;\n- In bases 6 and 12, 4 is a 1-automorphic number;\n- And there are a lot more cool stuff about this number!\n\nImpressed by the power of this number, Kostya has begun to look for occurrences of four anywhere. He has a list of T integers, for each of them he wants to calculate the number of occurrences of the digit 4 in the decimal representation. He is too busy now, so please help him.\n\n-----Input-----\nThe first line of input consists of a single integer T, denoting the number of integers in Kostya's list.\nThen, there are T lines, each of them contain a single integer from the list.\n\n-----Output-----\nOutput T lines. Each of these lines should contain the number of occurences of the digit 4 in the respective integer from Kostya's list.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- (Subtask 1): 0 \u2264 Numbers from the list  \u2264 9 - 33 points.\n- (Subtask 2): 0 \u2264 Numbers from the list  \u2264 109 - 67 points.\n\n-----Example-----\nInput:\n5\n447474\n228\n6664\n40\n81\n\nOutput:\n4\n0\n1\n1\n0\n\n Examples: \nInput: \n['5', '447474', '228', '6664', '40', '81']\nOutput: \n ['4', '0', '1', '1', '0']\n",
  "1080": "Problem: \nEvery day, Mike goes to his job by a bus, where he buys a ticket. On the ticket, there is a letter-code that can be represented as a string of upper-case Latin letters.\nMike believes that the day will be successful in case exactly two different letters in the code alternate.  Otherwise, he believes that the day will be unlucky. Please see note section for formal definition of alternating code.\nYou are given a ticket code. Please determine, whether the day will be successful for Mike or not. Print \"YES\" or \"NO\" (without quotes) corresponding to the situation.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a single string S denoting the letter code on the ticket.\n\n-----Output-----\nFor each test case, output a single line containing \"YES\" (without quotes) in case the day will be successful and \"NO\" otherwise.\n\n-----Note-----\nTwo letters x, y where x != y are said to be alternating in a code, if code is of form \"xyxyxy...\".\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100\n- S consists only of upper-case Latin letters\n\nSubtask 1 (50 points):\n\n- |S| = 2\n\nSubtask 2 (50 points):\n\n- 2 \u2264 |S| \u2264 100\n\n-----Example-----\nInput:\n2\nABABAB\nABC\n\nOutput:\nYES\nNO\n\n Examples: \nInput: \n['2', 'ABABAB', 'ABC']\nOutput: \n ['YES', 'NO']\n",
  "1081": "Problem: \nA spy needs your help to encrypt a 5 letter message. \nTo encrypt the message the following steps are need to be done:\n1)Each letter of the message will be converted to it's equivalent number (i.e A=0, B=1,..Z=25) \n2)98, 57, 31, 45, 46 are the 5 numbers in the key.\n3)Add the equivalent number of the first letter of the message to the first number of the key, then the equivalent number of the second letter of the message to the second number of the key and so on.\n4)Take modulo 26 of the sum of each expression.\n5)Convert the newly obtained numbers into it's equivalent letters (i.e 0=A, 1=B,\u202625=Z)\nPrint the final encrypted string.\nNote: It is guaranteed that the given string only contains Only Upper-case Latin Letters.\n\n-----Input:-----\n- The first line of the input contains a single Integer $T$. $T$ denoting the number of testcases, description of each testcases contains.\n- The first line of the each testcase contains a single string $S$. $S$ denoting the string which you need to encrypt\n\n-----Output:-----\n- For each test case, print encypted string i.e result of above operation.\nNote: Each testcase output must be printed on new line\n\n-----Constraints:-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq S \\leq 5$\n\n-----Sample Input:-----\n2\nHELLO\nHELL\n\n-----Sample Output:-----\nBJQEI\nBJQE\n\n-----Explanation:-----\n- For 1st Testcase : The conversion of \"HELLO\" to its equivalent number will be 7, 4, 11, 11, 14 respectively.\nThen we add each equivalent number of the message with corresponding number in the key:\n7 + 98 = 105\n4 + 57 = 61 \n11 + 31 = 42 \n11 + 45 = 56\n14 + 46 = 60\nFurther we take the sum:\n105 modulo 26 = 1\n61 modulo 26 = 9\n42 modulo 26 = 16\n56 modulo 26 = 4\n60 modulo 26 = 8 \nFinally, convert the newly obtained numbers into it's equivalent letters:\nB\nJ\nQ\nE\nI\nPrint the final string:\nBJQEI\n\n Examples: \nInput: \n['2', 'HELLO', 'HELL']\nOutput: \n ['BJQEI', 'BJQE']\n",
  "1083": "Problem: \nProbably everyone has experienced an awkward situation due to shared armrests between seats in cinemas. A highly accomplished cinema manager named \"Chef\" decided to solve this problem.\n\nWhen a customer wants to buy a ticket, the clerk at the ticket window asks the visitor if they need the armrests, and if so, which of them: left, right, or both. We know that out of the audience expected to show up, L of them only need the left armrest, R of them need just the right one, Z need none and B need both. Your task is to calculate the maximum number of people that can attend the show. In the cinema hall there are N rows with M seats each. There is only one armrest between two adjacent seats. Seats at the beginning and at the end of the row have two armrests\n\n-----Input-----\n\nInput begins with an integer T: the number of test cases.\n\nEach test case consists of a single line with 6 space-separated integers: N, M, Z, L, R, B.\n\n-----Output-----\n\nFor each test case, output a line containing the answer for the task.\n\n-----Constraints and Subtasks-----\n- 1 \u2264 T \u2264 105 \nSubtask 1 : 10 points \n- 1 \u2264 N, M \u2264 3 \n- 0 \u2264 Z, L, R, B \u2264 3 \nSubtask 2 : 20 points \n- 1 \u2264 N, M \u2264 30 \n- 0 \u2264 Z, L, R \u2264 30 \n- 0 \u2264 B \u2264 109 \nSubtask 3 : 30 points\n- 1 \u2264 N, M \u2264 106 \n- 0 \u2264 Z, L, R \u2264 106 \n- 0 \u2264 B \u2264 1016 \nSubtask 4 : 40 points\n- 1 \u2264 N, M \u2264 108 \n- 0 \u2264 Z, L, R, B \u2264 1016 \n\n-----Example-----\nInput:2\n2 2 3 2 1 1\n3 3 1 2 0 9\n\nOutput:4\n8\n\n-----Explanation-----\n'L' - needs left\n\n'R - needs right\n\n'Z' - doesn't need any\n\n'B' - needs both\n\n'-' - empty place\n\nExample case 1.\nZZ\n\nZB\nExample case 2.\nLLB\n\nBZB\n\nB-B\n\n Examples: \nInput: \n['2', '2 2 3 2 1 1', '3 3 1 2 0 9']\nOutput: \n ['4', '8']\n",
  "1084": "Problem: \nYou are given a binary string S. You need to transform this string into another string of equal length consisting only of zeros, with the minimum number of operations.\nA single operation consists of taking some prefix of the string S and flipping all its values. That is, change all the 0s in this prefix to 1s, and all the 1s in the prefix to 0s. You can use this operation as many number of times as you want over any prefix of the string.\n\n-----Input-----\nThe only line of the input contains the binary string,  S . \n\n-----Output-----\nOutput a single line containing one integer, the minimum number of operations that are needed to transform the given string S into the string of equal length consisting only of zeros.\n\n-----Constraints-----\n- 1 \u2264 |S| \u2264 100,000\n\n-----Subtasks-----\n- Subtask #1 (30 points): 1 \u2264 |S| \u2264 2000\n- Subtask #2 (70 points): Original constraints.\n\n-----Example-----\nInput:\n01001001\n\nOutput:\n6\n\n-----Explanation-----\nFor the given sample case, let us look at the way where we achieved minimum number of operations.\n\nOperation 1: You flip values in the prefix of length 8 and transform the string into 10110110 \nOperation 2: You flip values in the prefix of length 7 and transform the string into 01001000 \nOperation 3: You flip values in the prefix of length 5 and transform the string into 10110000 \nOperation 4: You flip values in the prefix of length 4 and transform the string into 01000000 \nOperation 5: You flip values in the prefix of length 2 and transform the string into 10000000 \nOperation 6: You flip values in the prefix of length 1 and finally, transform the string into 00000000\n\n Examples: \nInput: \n['01001001']\nOutput: \n ['6']\n",
  "1085": "Problem: \n-----Problem-----\n\n\t\t\tOnce THANMAY met PK who is from a different planet visiting earth. THANMAY was very fascinate to learn PK's language. The language contains only lowercase English letters and is based on a simple logic that only certain characters can follow a particular character.\n\n\n\t\t\tNow he is interested in calculating the number of possible words of length L and ending at a particular character C. Help THANMAY to calculate this value. \n\n-----Input-----\n\n\t\t\tThe input begins with 26 lines, each containing 26 space-separated integers. The integers can be either 0 or 1. The jth integer at ith line depicts whether jth English alphabet can follow ith English alphabet or not.\n\n\n\t\t\t Next line contains an integer T. T is the number of queries.\n\n\t\t\t Next T lines contains a character C and an integer L.\n\n-----Output-----\n\n\t\t\tFor each query output the count of words of length L ending with the character C. Answer to each query must be followed by newline character.\n\n\n\t\t\tThe answer may be very large so print it modulo 1000000007.\n\n-----Constraints-----\n- \n\t\t\t\t\t1 \u2264 T \u2264 100\n- \nC is lowercase English alphabet.\n\n- \n\t\t\t\t\t2 \u2264 L \u2264 10000000\n\t\t\n\n-----Sample Input-----\n0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n2\n\nc 3\n\nb 2\n\n-----Sample Output-----\n1\n\n2\n\n-----Explanation-----\n\n\t\t\tFor query 1, Words of length 3 are: aba, acb, bab, bac, cba. The only word ending with 'c' is bac.\n\t\t p { text-align:justify }\n\n Examples: \nInput: \n['0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0', '2', 'c 3', 'b 2']\nOutput: \n ['1', '2']\n",
  "1087": "Problem: \nYou are given an unweighted, undirected graph. Write a program to check if it's a tree topology.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\n Examples: \nInput: \n['3 2', '1 2', '2 3']\nOutput: \n ['YES']\n",
  "1088": "Problem: \nTwo cheeky thieves (Chef being one of them, the more talented one of course) have came across each other in the underground vault of the State Bank of Churuland. They are shocked! Indeed, neither expect to meet a colleague in such a place with the same intentions to carry away all the money collected during Churufest 2015.\n\nThey have carefully counted a total of exactly 1 billion (109) dollars in the bank vault. Now they must decide how to divide the booty. But there is one problem: the thieves have only M minutes to leave the bank before the police arrives. Also, the more time they spend in the vault, the less amount could carry away from the bank. Formally speaking, they can get away with all of the billion dollars right now, but after t minutes they can carry away only  1 billion * pt dollars, where p is some non-negative constant less than or equal to unity, and at t = M, they get arrested and lose all the money.\nThey will not leave the vault until a decision on how to divide the money has been made.\n\nThe money division process proceeds in the following way: at the beginning of each minute starting from the 1st (that is, t = 0), one of them proposes his own way to divide the booty. If his colleague agrees, they leave the bank with pockets filled with the proposed amounts of dollars. If not, the other one proposes his way at the next minute etc. To escape arrest, they can only propose plans till the beginning of the Mth minute (i.e., till t = M-1).\nEach thief wants to maximize his earnings, but if there are two plans with the same amounts for him, he would choose the one which leads to a larger total amount of stolen dollars.\n\nChef is about to start this procedure, and he is the first to propose a plan. You are wondering what will be the final division of money, if each thief chooses the optimal way for himself and money is considering real.\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of input for each test case contains an integer M denoting the number of minutes until arrest and a double denoting the constant p.\n\n-----Output-----\nFor each test case, output a single line containing two space-separated doubles denoting the amount of dollars each thief will get in the optimal division. First number: dollars amassed by Chef, and second: by his colleague. The answer will be considered correct if its absolute error doesn't exceed 10-2.\n\n\n-----Constraints and subtasks-----\n- 1 \u2264 T \u2264 105\n- 0 \u2264 p \u2264  1  \nSubtask 1 (15 points) : \n1 \u2264 M \u2264 3\nSubtask 2 (55 points) : \n1 \u2264 M \u2264  103\nSubtask 3 (30 points) : \n1 \u2264 M \u2264 109\n\n-----Example-----\nInput:\n2\n1 0.5\n2 0.5\nOutput:\n1000000000.0 0.0\n500000000.0 500000000.0\n\n-----Explanation-----\nExample case 1. In the second case, if decision isn't made at t = 0, total amount of money decreases to 5*108 at t = 1 which leads to a situation worse than the given solution.\n\n Examples: \nInput: \n['2', '1 0.5', '2 0.5']\nOutput: \n ['1000000000.0 0.0', '500000000.0 500000000.0']\n",
  "1089": "Problem: \nThe garden has a tree with too many leaves on it and gardner wants to cut the unwanted leaves. This is a rooted tree, where a node $v$ is called parent of another node $u$, if there exists a directed edge from $v$ to $u$. Leaf node is a node with no outgoing edges.\nGardner cuts the tree in a peculiar way:\n- For each parent node(which has a valid leaf node attached to it), he cuts $x$ leaf nodes, such that $x$ is a multiple of 3.\nExample : If a parent node has 7 leaf nodes, 6 leaf nodes will be cut and 1 will be left.\n- If a parent has all its leaf nodes cut, only then the parent node itself becomes a new leaf node. If new leaf nodes are created, Gardner repeats step 1 until he can cut no more leaf nodes.\nAfter completing all operations, gardner wants to know the minimum number of nodes left on the tree.\n\nIt is guaranteed that the given input is a rooted tree.\nThe root of the tree is vertex 1.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains an integer $n$, the number of vertices in the tree. \n- Second line of each testcase contains array $A$ of size $n-1$, where $A_{i}(1\u2264i\u2264n-1)$, is the index of the parent of the $(i+1)^{th}$ vertex. \n\n-----Output:-----\nFor each testcase, output single integer, the number of nodes finally left on the tree.  \n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq n \\leq 10^5$ \n- $1 \\leq A_i \\leq i$\n\n-----Sample Input:-----\n1\n\n13\n\n1 1 1 1 1 4 3 4 4 3 4 3 \n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----\n\n Examples: \nInput: \n['1', '13', '1 1 1 1 1 4 3 4 4 3 4 3']\nOutput: \n ['4']\n",
  "1090": "Problem: \nYou are given a sequence of n integers a1, a2, ..., an and an integer d.\nFind the length of the shortest non-empty contiguous subsequence with sum of elements at least d. Formally, you should find the smallest positive integer k with the following property: there is an integer s (1 \u2264 s \u2264 N-k+1) such that as + as+1 + ... + as+k-1 \u2265 d.\n\n-----Input-----\n\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains two space-separated integers n and d.\n- The second line contains n space-separated integers a1, a2, ..., an.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the length of the shortest contiguous subsequence with sum of elements \u2265 d. If there is no such subsequence, print -1 instead.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 n \u2264 105\n- -109 \u2264 d \u2264 109\n- -104 \u2264 ai \u2264 104\n- 1 \u2264 sum of n over all test cases \u2264 2 \u00b7 105\n\n-----Example-----\nInput:\n\n2\n5 5\n1 2 3 1 -5\n5 1\n1 2 3 1 -5\n\nOutput:\n\n2\n1\n\n Examples: \nInput: \n['2', '5 5', '1 2 3 1 -5', '5 1', '1 2 3 1 -5']\nOutput: \n ['2', '1']\n",
  "1091": "Problem: \nRupsa really loves triangles. One day she came across an equilateral triangle having length of each side as an integer N. She started wondering if it was possible to transform the triangle keeping two sides fixed and alter the third side such that it still remains a triangle, but the altered side will have its length as an even integer, and the line drawn from the opposite vertex to the mid-point of the altered side is of integral length.\nSince Rupsa is in a hurry to record a song for Chef as he really loves her songs, you must help her solve the problem as fast as possible.\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases.\nEach test-case contains a single integer N.\n\n-----Output-----\n\nFor each test case, output \"YES\" if the triangle transformation is possible, otherwise \"NO\" (quotes for clarity only, do not output).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 106\n- 1 \u2264 N \u2264 5 x 106\n\n-----Sub tasks-----\n- Subtask #1: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 104 (10 points)\n- Subtask #2: 1 \u2264 T \u2264 104, 1 \u2264 N \u2264 106 (30 points)\n- Subtask #3: Original Constraints (60 points)\n\n-----Example-----\nInput:2\n5\n3\n\nOutput:YES\nNO\n\n-----Explanation-----\n- In test case 1, make the length of any one side 6, and it will suffice.\n\n Examples: \nInput: \n['2', '5', '3']\nOutput: \n ['YES', 'NO']\n",
  "1092": "Problem: \nThe faculty of application management and consulting services (FAMCS) of the Berland State University (BSU) has always been popular among Berland's enrollees. This year, N students attended the entrance exams, but no more than K will enter the university. In order to decide who are these students, there are series of entrance exams. All the students with score strictly greater than at least (N-K) students' total score gets enrolled.\nIn total there are E entrance exams, in each of them one can score between 0 and M points, inclusively. The first E-1 exams had already been conducted, and now it's time for the last tribulation.\nSergey is the student who wants very hard to enter the university, so he had collected the information about the first E-1 from all N-1 enrollees (i.e., everyone except him). Of course, he knows his own scores as well.\nIn order to estimate his chances to enter the University after the last exam, Sergey went to a fortune teller. From the visit, he learnt about scores that everyone except him will get at the last exam. Now he wants to calculate the minimum score he needs to score in order to enter to the university. But now he's still very busy with minimizing the amount of change he gets in the shops, so he asks you to help him.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains four space separated integers N, K, E, M denoting the number of students, the maximal number of students who'll get enrolled, the total number of entrance exams and maximal number of points for a single exam, respectively.\nThe following N-1 lines will contain E integers each, where the first E-1 integers correspond to the scores of the exams conducted. The last integer corresponds to the score at the last exam, that was predicted by the fortune-teller.\nThe last line contains E-1 integers denoting Sergey's score for the first E-1 exams.\n\n-----Output-----\n\nFor each test case, output a single line containing the minimum score Sergey should get in the last exam in order to be enrolled. If Sergey doesn't have a chance to be enrolled, output \"Impossible\" (without quotes).\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 5\n- 1 \u2264 K < N \u2264 104\n- 1 \u2264 M \u2264 109\n- 1 \u2264 E \u2264 4\n\n-----Example-----\nInput:1\n4 2 3 10\n7 7 7\n4 6 10\n7 10 9\n9 9\n\nOutput:4\n\n-----Explanation-----\nExample case 1. If Sergey gets 4 points at the last exam, his score will be equal to 9+9+4=22. This will be the second score among all the enrollees - the first one will get 21, the second one will get 20 and the third will have the total of 26. Thus, Sergey will enter the university.\n\n Examples: \nInput: \n['1', '4 2 3 10', '7 7 7', '4 6 10', '7 10 9', '9 9']\nOutput: \n ['4']\n",
  "1094": "Problem: \nTwo words rhyme if their last 3 letters are a match. Given N words, print the test case number (of the format Case : num) followed by the rhyming words in separate line adjacent to each other.\n\nThe output can be in anyorder.\n\n-----Input-----\nFirst line contains the number of test case T\n\nThe next line contains the number of words N\n\nNext N words follow . They\u2019ll contain only alphabets from \u2018a\u2019-\u2018z\u2019.\n\n-----Output-----\nPrint case number (for each test case) of the format Case : num followed by the words that rhyme in a new line.\n\n-----Constraints-----\n1 <= T <= 5\n\n1 <= N <= 1000\n\n3 <= length of each word <= 1000\n\n-----Example-----\nInput:\n3\n3\nnope qwerty hope\n5 \nbrain drain request grain nest\n4\nthese words dont rhyme\n\n\nOutput:\nCase : 1\nhope nope\nqwerty\nCase : 2\nbrain drain grain\nnest request\nCase : 3\nthese\ndont\nwords\nrhyme\n\n\n\n-----Explanation-----\nCase : 2\n\nbrain drain grain\n\nnest request\n\nCase : 3\n\nthese\n\ndont\n\nwords\n\nrhyme\nExplanation for case 1: since hope and nope rhyme (suffix \u201cope\u201d matches), we print them in the same line and qwerty In a new line.\n\nNote that\n\nqwerty\n\nnope hope\n\nis also correct (the output can be in any order )\n\n Examples: \nInput: \n['3', '3', 'nope qwerty hope', '5', 'brain drain request grain nest', '4', 'these words dont rhyme']\nOutput: \n ['Case : 1', 'hope nope', 'qwerty', 'Case : 2', 'brain drain grain', 'nest request', 'Case : 3', 'these', 'dont', 'words', 'rhyme']\n",
  "1095": "Problem: \nIndraneel has to sort the books in his library. His library has one long shelf. His books are numbered $1$ through $N$ and he wants to rearrange the books so that they appear in the sequence $1,2, ..., N$.\nHe intends to do this by a sequence of moves. In each move he can pick up any book from the shelf and insert it at a different place in the shelf. Suppose Indraneel has $5$ books and they are initially arranged in the order\n21453214532 \\quad 1 \\quad 4 \\quad 5 \\quad 3\nIndraneel will rearrange this in ascending order by first moving book $1$ to the beginning of the shelf to get\n12453124531 \\quad 2 \\quad 4 \\quad 5 \\quad 3\nThen, moving book $3$ to position $3$, he gets\n12345123451 \\quad 2 \\quad 3 \\quad 4 \\quad 5\nYour task is to write a program to help Indraneel determine the minimum number of moves that are necessary to sort his book shelf.\n\n-----Input:-----\nThe first line of the input will contain a single integer $N$ indicating the number of books in Indraneel's library. This is followed by a line containing a permutation of $1, 2, ..., N$ indicating the intial state of Indraneel's book-shelf.\n\n-----Output:-----\nA single integer indicating the minimum number of moves necessary to sort Indraneel's book-shelf.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 200000$.\n- You may also assume that in $50 \\%$ of the inputs, $1 \\leq N \\leq 5000$.\n\n-----Sample Input-----\n5\n2 1 4 5 3 \n\n-----Sample Output-----\n2\n\n Examples: \nInput: \n['5', '2 1 4 5 3']\nOutput: \n ['2']\n",
  "1096": "Problem: \nZonal Computing Olympiad 2012, 26 Nov 2011\n\nThe year is 2102 and today is the day of ZCO. This year there are N contests and the starting and ending times of each contest is known to you. You have to participate in exactly one of these contests. Different contests may overlap. The duration of different contests might be different. \n\nThere is only one examination centre. There is a wormhole V that transports you from your house to the examination centre and another wormhole W that transports you from the examination centre back to your house. Obviously, transportation through a wormhole does not take any time; it is instantaneous. But the wormholes can be used at only certain fixed times, and these are known to you.\n\nSo, you use a V wormhole to reach the exam centre, possibly wait for some time before the next contest begins, take part in the contest, possibly wait for some more time and then use a W wormhole to return back home. If you leave through a V wormhole at time t1 and come back through a W wormhole at time t2, then the total time you have spent is (t2 - t1 + 1). Your aim is to spend as little time as possible overall while ensuring\nthat you take part in one of the contests.\n\nYou can reach the centre exactly at the starting time of the contest, if possible. And you can leave the examination centre the very second the contest ends, if possible. You can assume that you will always be able to attend at least one contest\u2013that is, there will always be a contest such that there is a V wormhole before it and a W wormhole after it.\n\nFor instance, suppose there are 3 contests with (start,end) times (15,21), (5,10), and (7,25), respectively.  Suppose the V wormhole is available at times 4, 14, 25, 2 and the W wormhole is available at times 13 and 21.  In this case, you can leave by the V wormhole at time 14, take part in the contest from time 15 to 21, and then use the W wormhole at time 21 to get back home.  Therefore the time you have spent is (21 - 14 + 1) = 8. You can check that you cannot do better than this.\n\n-----Input format-----\nThe first line contains 3 space separated integers N, X, and Y, where N is the number of contests, X is the number of time instances when wormhole V can be used and Y is the number of time instances when wormhole W can be used.  The next N lines describe each contest.  Each of these N lines contains two space separated integers S and E, where S is the starting time of the particular contest and E is the ending time of that contest, with S < E.  The next line contains X space separated integers which are the time instances when the wormhole V can be used.  The next line contains Y space separated integers which are the time instances when the wormhole W can be used.\n\n-----Output format-----\nPrint a single line that contains a single integer, the minimum time needed to be spent to take part in a contest.\n\n-----Testdata-----\nAll the starting and ending times of contests are distinct and no contest starts at the same time as another contest ends. The time instances when wormholes are available are all distinct, but may coincide with starting and ending times of contests. All the time instances (the contest timings and the wormhole timings) will be integers between 1 and 1000000 (inclusive).\n\n- Subtask 1 (30 marks)\n- Subtask 2 (70 marks)\n\nYou may assume that \n1 \u2264 N \u2264 105,\n1 \u2264 X \u2264 105, and\n1 \u2264 Y \u2264 105.\n\nIn 30% of the cases, \n1 \u2264 N \u2264 103,\n1 \u2264 X \u2264 103, and\n1 \u2264 Y \u2264 103.\n\n-----Sample Input-----\n3 4 2\n15 21\n5 10\n7 25\n4 14 25 2\n13 21\n\n-----Sample Output-----\n8\n\n Examples: \nInput: \n['3 4 2', '15 21', '5 10', '7 25', '4 14 25 2', '13 21']\nOutput: \n ['8']\n",
  "1097": "Problem: \nSinchan and his friends loves to eat. They have a 2D rectangular cake which they want to share. Sinchan is very kind and offers his friends to eat the cake first, all friends goes one by one to eat the cake. Each friend will cut cake into two parts. First part of the cake will be largest possible square from the cake, that the friend will eat, and will leave the second part for others, it continues untill cake is over or every friend gets to eat the cake.\nNow Sinchan wonder how much cake would he be able to get.\n\n-----Input-----\n- First line of input contain T, denoting number of test case.\n- First line of each test case contains N, denoting number of friends.\n- Second line of test case contain L, B (L x B) denoting dimension of cake.\n\n-----Output-----\n- For each test case, if Sinchan gets to eat the cake print (without quotes) \"Yes #\" where # is area of cake that Sinchan gets. Otherwise print  (without quotes) \"No\"\n\n-----Constraints-----\n- 1 \u2264 T, N, L, B \u2264 1000\n\n-----Example-----\nInput:\n3\n2\n5 3\n4\n4 8\n1\n1 2\n\nOutput:\nYes 2\nNo\nYes 1\n\n-----Explanation-----\nExample case 1. First friend divides 5x3 cake in 3x3 and 2x3 since 3x3 is largest possible square, second Friend divides 2x3 cake in 2x2 and 1x2 and eat 2x2 piece. Finaly Sinchan gets to eat and area of cake is 1*2 hence Output is (without quotes) \"Yes 2\"\n\n Examples: \nInput: \n['3', '2', '5 3', '4', '4 8', '1', '1 2']\nOutput: \n ['Yes 2', 'No', 'Yes 1']\n",
  "1098": "Problem: \nChef and Roma are playing a game. Rules of the game are quite simple.\nInitially there are N piles of stones on the table.\nIn each turn, a player can choose one pile and remove it from the table.\nEach player want to maximize the total number of stones removed by him.\nChef takes the first turn. \n\nPlease tell Chef the maximum number of stones he can remove assuming that both players play optimally.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of piles.\nThe second line contains N space separated integers A1, A2, ..., AN denoting the number of stones in each pile.\n\n-----Output-----\nFor each test case, output a single line containg the maximum number of stones that Chef can remove.\n\n-----Constraints-----\n- 1 \u2264 Ai \u2264 109\n- Subtask 1 (35 points): T = 10, 1 \u2264 N \u2264 1000\n- Subtask 2 (65 points): T = 10, 1 \u2264 N \u2264 105 \n\n-----Example-----\nInput:\n2\n3\n1 2 3\n3\n1 2 1\n\nOutput:\n4\n3\n\n Examples: \nInput: \n['2', '3', '1 2 3', '3', '1 2 1']\nOutput: \n ['4', '3']\n",
  "1099": "Problem: \nDid you know that there are over 40,000 varieties of Rice in the world ? There are so many dishes that can be prepared with Rice too. A famous chef from Mumbai, Tid Gusto prepared a new dish and named it 'Tid Rice'. He posted the recipe in his newly designed blog for community voting, where a user can plus (+) or minus (-) the recipe. The final score is just the sum of all votes, where (+) and (-) are treated as +1 and -1 respectively. But, being just a chef ( and not a codechef ) he forgot to take care of multiple votes by the same user.\n\nA user might have voted multiple times and Tid is worried that the final score shown is not the correct one. Luckily, he found the user logs, which had all the N votes in the order they arrived.  Remember that, if a user votes more than once, the user's previous vote is first nullified before the latest vote is counted ( see explanation for more clarity ). Given these records in order ( and being a codechef yourself :) ), calculate the correct final score.\n\n-----Input-----\nFirst line contains T ( number of testcases, around 20 ). T cases follow. Each test case starts with N ( total number of votes, 1 <= N <= 100 ). Each of the next N lines is of the form \"userid vote\" ( quotes for clarity only ), where userid is a non-empty string of lower-case alphabets ( 'a' - 'z' ) not more than 20 in length and vote is either a + or - . See the sample cases below, for more clarity.\n\n-----Output-----\nFor each test case, output the correct final score in a new line\n\n-----Example-----\nInput:\n3\n4\ntilak +\ntilak +\ntilak -\ntilak +\n3\nratna +\nshashi -\nratna -\n3\nbhavani -\nbhavani +\nbhavani -\n\nOutput:\n1\n-2\n-1\n\nExplanation\n\nCase 1 : Initially score = 0. Updation of scores in the order of user tilak's votes is as follows,\n\n( + ): +1 is added to the final score. This is the 1st vote by this user, so no previous vote to nullify. score = 1\n( + ):  0 should be added ( -1 to nullify previous (+) vote, +1 to count the current (+) vote ). score = 1\n( - ) : -2 should be added ( -1 to nullify previous (+) vote, -1 to count the current (-) vote ). score = -1\n( + ): +2 should be added ( +1 to nullify previous (-) vote, +1 to count the current (+) vote ). score = 1\n\n Examples: \nInput: \n['3', '4', 'tilak +', 'tilak +', 'tilak -', 'tilak +', '3', 'ratna +', 'shashi -', 'ratna -', '3', 'bhavani -', 'bhavani +', 'bhavani -']\nOutput: \n ['1', '-2', '-1']\n",
  "1100": "Problem: \nThis question is similar to the $\"Operation$ $on$ $a$ $Tuple\"$ problem in this month's Long Challenge but with a slight variation.\n\nConsider the following operations on a triple of integers. In one operation, you should:\n\n- Choose a positive integer $d>0$ and an arithmetic operation - in this case, it will only be addition.\n\n- Choose a subset of elements of the triple.\n\n- Apply arithmetic operation to each of the chosen elements.\n\nFor example, if we have a triple $(3,5,7)$, we may choose to add $3$ to the first and third element, and we get $(6,5,10)$ using one operation.\n\nYou are given an initial triple $(p,q,r)$ and a target triple $(a,b,c)$. Find the maximum number of operations needed to transform $(p,q,r)$ into $(a,b,c)$ or say the conversion is impossible .\nInput:\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains three space-separated integers p, q and r.\n- The second line contains three space-separated integers a, b and c.Output:\nFor each test case, print a single line containing one integer \u2015 the maximum required number of operations(if the conversion is possible), or else print \"-1\"\n\nConstraints:\n- $1 \\leq T \\leq 1,000$\n- $2 \\leq |p|,|q|,|r|,|a|,|b|,|c| \\leq 10^9$Sample Input:\n\t1\n\n\t2 2 1\n\n\t3 3 2\n\nSample Output:\n\t3\n\t\n\n Examples: \nInput: \n['1', '2 2 1', '3 3 2']\nOutput: \n ['3']\n",
  "1102": "Problem: \nOn Miu's smart phone, there is a search feature which lets her search for a contact name by typing digits on the keypad where each digit may correspond to any of the characters given below it. For example, to search for TOM, she can type 866 and for MAX she can type 629.\n+------+-----+------+\n|   1  |  2  |   3  |\n|      | ABC |  DEF |\n+------+-----+------+\n|   4  |  5  |   6  |\n|  GHI | JKL |  MNO |\n+------+-----+------+\n|   7  |  8  |   9  |\n| PQRS | TUV | WXYZ |\n+------+-----+------+\n|      |  0  |      |\n+------+-----+------+\n\nMiu typed a random string of digits $S$ on the keypad while playing around, where each digit is between 2 and 9 inclusive. Now she wants to know the number of possible strings which would map to $S$. \nSince this number can be very large, output it modulo 10^9 + 7 (1000000007)\n\n-----Input:-----\n- \nThe first line of the input consists of a single integer $T$ denoting the number of test cases.\n- \nEach test case consists of a string $S$.\n\n-----Output:-----\n- For each test case, print a single line containing one integer - the count of all possible strings mod 1,000,000,007\n\n-----Constraints-----\n- \n1 <= $T$ <= 10\n- \n1 <= $|S|$ <= 105\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- 1 <= $|S|$ <= 10\nSubtask #2 (90 points):\n- Original Constraints\n\n-----Sample Input:-----\n2\n\n5\n\n72  \n\n-----Sample Output:-----\n3\n\n12  \n\n-----EXPLANATION:-----\n- \nExample Case 1:\n\nOn the key 5, we have the character set JKL.\n\nHence the possible strings are J,K,L.\n\nHence the answer is 3 % (1000000007) = 3.  \n- \nExample Case 2:\nOn key 7, we have the character set PQRS.\n\nOn key 2, we have the character set ABC.\n\nHence the possible strings are PA,PB,PC,QA,QB,QC,RA,RB,RC,SA,SB,SC.\n\nHence the answer is 12 % (1000000007) = 12.\n\n Examples: \nInput: \n['2', '5', '72']\nOutput: \n ['3', '12']\n",
  "1103": "Problem: \nLeha is a bright mathematician. Today he is investigating whether an integer is divisible by some square number or not.\nHe has a positive integer X represented as a product of N integers a1, a2, .... aN. He has somehow figured out that there exists some integer P such that the number X is divisible by P2, but he is not able to find such P himself. Can you find it for him? If there are more than one possible values of P possible, you can print any one of them.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. T test cases follow.\nThe first line of each test case contains one integer N denoting the number of intgers in presentation of X.\nThe second line contains N space-separated integers a1, a2, .... aN.\n\n-----Output-----\nFor each test case, output a single integer P deoting the answer for this test case. Note that P must be in range from 2 to 1018 inclusive. It's guaranteed that at least one answer exists. If there are more than one possible answers, print any.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5\n- 1 \u2264 N \u2264 100\n- 1 \u2264 ai \u2264 1018\n\n-----Subtasks-----\n- Subtask 1[19 points]: 1 \u2264 a1*a2*...*aN \u2264 106\n- Subtask 2[22 points]: 1 \u2264 a1*a2*...*aN \u2264 1012\n- Subtask 3[23 points]: 1 \u2264 ai \u2264 1012\n- Subtask 4[36 points]: no additional constraints\n\n-----Example-----\nInput:\n1\n3\n21 11 6\n\nOutput:\n3\n\n-----Explanation-----\nExample case 1. X = 21 * 11 * 6 = 1386. It's divisible by 9 which is a square number, as 9 = 32. So P = 3.\n\n Examples: \nInput: \n['1', '3', '21 11 6']\nOutput: \n ['3']\n",
  "1104": "Problem: \nKabir Singh is playing a game on the non-negative side of  x-axis. It takes him $1 second$ to reach from Pth position to (P\u22121)th position or (P+1)th position. \nKabir never goes to the negative side and also doesn't stop at any moment of time.\nThe movement can be defined as  : \n- At the beginning he is at $x=0$ , at time $0$\n- During the first round, he moves towards $x=1$ and comes back to the $x=0$ position.\n- In the second round, he moves towards the $x=2$ and comes back again to $x=0$.\n- So , at $Kth$ round , he moves to $x=K$ and comes back to $x=0$\nSo in this way game goes ahead.\nFor Example, the path of Kabir for $3rd$ round is given below.\n$0\u22121\u22122\u22123\u22122\u22121\u22120$\nThe overall path followed by Kabir would look somewhat like this:\n$0\u22121\u22120\u22121\u22122\u22121\u22120\u22121\u22122\u22123\u22122\u22121\u22120\u22121\u22122\u22123\u22124\u22123\u2212\u2026$\nNow the task is , You are given Two Non-Negative integers $N$ , $K$ .\nYou have to tell the time at which Kabir arrives at $x=N$ for the $Kth$ time.\nNote - Kabir visits all the points , he can not skip or jump over one point.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $N, K$. \n\n-----Output:-----\nFor each testcase, output in a single line answer i.e Time Taken by Kabir Singh modulo 1000000007.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $0 \\leq N \\leq 10^9$\n- $1 \\leq K \\leq 10^9$\n\n-----Sample Input:-----\n4\n\n0 1\n1 1\n1 3\n4 6\n\n-----Sample Output:-----\n0\n1\n5\n46\n\n-----EXPLANATION:-----\nTest Case 1:\nKabir starts the journey from the $N=0$ at time $t=0$ and it's the first time$ (K=1)$, he is here. So, the answer is $0$.\nTest Case 3:\nThe path followed by Kabir to reach 1 for the third time is given below.\n$0\u22121\u22120\u22121\u22122\u22121$\nHe reaches $1$ for the third time at $ t=5$.\n\n Examples: \nInput: \n['4', '0 1', '1 1', '1 3', '4 6']\nOutput: \n ['0', '1', '5', '46']\n",
  "1105": "Problem: \nChef Ada is preparing $N$ dishes (numbered $1$ through $N$). For each valid $i$, it takes $C_i$ minutes to prepare the $i$-th dish. The dishes can be prepared in any order.\nAda has a kitchen with two identical burners. For each valid $i$, to prepare the $i$-th dish, she puts it on one of the burners and after $C_i$ minutes, removes it from this burner; the dish may not be removed from the burner before those $C_i$ minutes pass, because otherwise it cools down and gets spoiled. Any two dishes may be prepared simultaneously, however, no two dishes may be on the same burner at the same time. Ada may remove a dish from a burner and put another dish on the same burner at the same time.\nWhat is the minimum time needed to prepare all dishes, i.e. reach the state where all dishes are prepared?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of minutes needed to prepare all dishes.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 4$\n- $1 \\le C_i \\le 5$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (1 points): $C_1 = C_2 = \\ldots = C_N$\nSubtask #2 (99 points): original constraints\n\n-----Example Input-----\n3\n3\n2 2 2\n3\n1 2 3\n4\n2 3 4 5\n\n-----Example Output-----\n4\n3\n7\n\n-----Explanation-----\nExample case 1: Place the first two dishes on the burners, wait for two minutes, remove both dishes and prepare the last one on one burner.\nExample case 2: Place the first and third dish on the burners. When the first dish is prepared, remove it and put the second dish on the same burner.\nExample case 3: Place the third and fourth dish on the burners. When the third dish is prepared, remove it and put the second dish on the same burner. Similarly, replace the fourth dish (when it is prepared) by the first dish on the other burner.\n\n Examples: \nInput: \n['3', '3', '2 2 2', '3', '1 2 3', '4', '2 3 4 5']\nOutput: \n ['4', '3', '7']\n",
  "1107": "Problem: \nPolo, the Penguin, likes numbers. He says that the goodness of a number is itself multiplied by the number of digits in it's decimal representation. For example, the goodness of the integer 474 is 474*3 = 1422.\nHelp him to count the sum of goodness of all integers from L to R, inclusive. Since the answer can be too large, output it modulo 1,000,000,007 (10^9+7).\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains the pair of integers L and R, separated by a single space.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1,000\n- 1 \u2264 L \u2264 R \u2264 1,000,000,000 (10^9)\n\n-----Example-----\nInput:\n1\n9 12\n\nOutput:\n75\n\n-----Explanation-----\nExample case 1. The answer is 9*1 + 10*2 + 11*2 + 12*2 = 75.\n\n Examples: \nInput: \n['1', '9 12', '', '']\nOutput: \n ['75']\n",
  "1108": "Problem: \nThere were $N$ students (numbered $1$ through $N$) participating in the Indian Programming Camp (IPC) and they watched a total of $K$ lectures (numbered $1$ through $K$). For each student $i$ and each lecture $j$, the $i$-th student watched the $j$-th lecture for $T_{i, j}$ minutes.\nAdditionally, for each student $i$, we know that this student asked the question, \"What is the criteria for getting a certificate?\" $Q_i$ times.\nThe criteria for getting a certificate is that a student must have watched at least $M$ minutes of lectures in total and they must have asked the question no more than $10$ times.\nFind out how many participants are eligible for a certificate.\n\n-----Input-----\n- The first line of the input contains three space-separated integers $N$, $M$ and $K$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains $K+1$ space-separated integers $T_{i, 1}, T_{i, 2}, \\ldots, T_{i, K}, Q_i$.\n\n-----Output-----\nPrint a single line containing one integer \u2014 the number of participants eligible for a certificate. \n\n-----Constraints-----\n- $1 \\le N, K \\le 1,000$\n- $1 \\le M \\le 10^6$\n- $1 \\le Q_i \\le 10^6$ for each valid $i$\n- $1 \\le T_{i, j} \\le 1,000$ for each valid $i$ and $j$\n\n-----Example Input-----\n4 8 4\n1 2 1 2 5\n3 5 1 3 4\n1 2 4 5 11\n1 1 1 3 12\n\n-----Example Output-----\n1\n\n-----Explanation-----\n- Participant $1$ watched $1 + 2 + 1 + 2 = 6$ minutes of lectures and asked the question $5$ times. Since $6 < M$, this participant does not receive a certificate.\n- Participant $2$ watched $3 + 5 + 1 + 3 = 12$ minutes of lectures and asked the question $4$ times. Since $12 \\ge M$ and $4 \\le 10$, this participant receives a certificate.\n- Participant $3$ watched $1 + 2 + 4 + 5 = 12$ minutes of lectures and asked the question $11$ times. Since $12 \\ge M$ but $11 > 10$, this participant does not receive a certificate.\n- Participant $4$ watched $1 + 1 + 1 + 3 = 6$ minutes of lectures and asked the question $12$ times. Since $6 < M$ and $12 > 10$, this participant does not receive a certificate.\nOnly participant $2$ receives a certificate.\n\n Examples: \nInput: \n['4 8 4', '1 2 1 2 5', '3 5 1 3 4', '1 2 4 5 11', '1 1 1 3 12']\nOutput: \n ['1']\n",
  "1109": "Problem: \nSumit and Dhiraj are roommates in a hostel of NIT Jamshedpur,One day after completing there boring assignments of Artificial Intelligence, they decided to play a game as it was dhiraj,s idea to play a game so he started explaining the rules of the game to sumit.\nSo the game was as follows-They randomly took a number N after that they find all its divisors.Suppose first sumit took a divisor then dhiraj and so on.The player who will be having the last divisor with him will win the game.Rohit their mutual friend,was observing them play. Can you help Rohit predict the outcome of game? If Sumit wins print \"YES\" without quotes and \"NO\" without quotes, if Dhiraj wins\nthe game.\n\n-----Input-----\nInput starts with an integer T denoting the number of test cases Each test case starts with a line containing an integer N the number.\n\n-----Output-----\nOutcome of each game in a separate line\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^3\n- 1 \u2264 N \u2264 10^18\n\n-----Sub tasks-----\n- Subtask #1:(10 points)\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 103\n- Subtask #2:(25 points)\n\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 1016\n- Subtask #3:(65 points)\n\n- 1 \u2264 T \u2264 103\n- 1 \u2264 N \u2264 1018\n\n-----Example-----\nInput:\n2\n4\n5\n\nOutput:\nYES\nNO\n\n Examples: \nInput: \n['2', '4', '5']\nOutput: \n ['YES', 'NO']\n",
  "1110": "Problem: \nYou are given an array of integers [A1,A2,\u2026,AN]$[A_1, A_2, \\ldots, A_N]$. Let's call adding an element to this array at any position (including the beginning and the end) or removing an arbitrary element from it a modification. It is not allowed to remove an element from the array if it is empty.\nFind the minimum number of modifications which must be performed so that the resulting array can be partitioned into permutations. Formally, it must be possible to partition elements of the resulting array into zero or more groups (multisets; not necessarily identical) in such a way that each element belongs to exactly one group and for each group, if it contains L$L$ elements, then it must contain only integers 1$1$ through L$L$, each of them exactly once.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains a single integer N$N$.\n- The second line contains N$N$ space-separated integers A1,A2,\u2026,AN$A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum required number of modifications.\n\n-----Constraints-----\n- 1\u2264T\u22641,000$1 \\le T \\le 1,000$\n- 1\u2264N\u2264106$1 \\le N \\le 10^6$\n- 1\u2264Ai\u2264109$1 \\le A_i \\le 10^9$ for each valid i$i$\n- the sum of N$N$ over all test cases does not exceed 106$10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- 1\u2264N\u22641,000$1 \\le N \\le 1,000$\n- the sum of N$N$ over all test cases does not exceed 10,000$10,000$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n5\n1 4 1 2 2\n4\n2 3 2 3\n\n-----Example Output-----\n1\n2\n\n Examples: \nInput: \n['2', '5', '1 4 1 2 2', '4', '2 3 2 3']\nOutput: \n ['1', '2']\n",
  "1111": "Problem: \nUsing his tip-top physique, Kim has now climbed up the mountain where the base is located. Kim has found the door to the (supposedly) super secret base. Well, it is super secret, but obviously no match for Kim's talents. \nThe door is guarded by a row of $N$ buttons. Every button has a single number $A_i$ written on it. Surprisingly, more than one button can have the same number on it. Kim recognises this as Soum's VerySafe door, for which you need to press two buttons to enter the password. More importantly, the sum of the two numbers on the buttons you press must be odd. Kim can obviously break through this door easily, but he also wants to know how many different pairs of buttons he can pick in order to break through the door.\nCan you help Kim find the number of different pairs of buttons he can press to break through the door? \nNote: Two pairs are considered different if any of the buttons pressed in the pair is different (by position of the button pressed). Two pairs are not considered different if they're the same position of buttons, pressed in a different order. \nPlease refer to the samples for more details.\n\n-----Input:-----\n- The first line contains a single integer $T$, representing the number of testcases. $2T$ lines follow, 2 for each testcase.\n- For each testcase, the first line contains a single integer $N$, the number of buttons.\n- The second line of each testcase contains $N$ space-separated integers, $A_1, A_2, \\ldots, A_N$, representing the numbers written on each button.\n\n-----Output:-----\nPrint a single number, $K$, representing the number of pairs of buttons in $A$ which have an odd sum.\n\n-----Subtasks-----\nFor all subtasks,  $1 \\leq T \\leq 10$, $1 \\leq N \\leq 100000$, and $1 \\leq A_i \\leq 100000$ for all $A_i$.\nSubtask 1 [15 points] : $N \\leq 2$, There are at most 2 buttons\nSubtask 2 [45 points] : $N \\leq 1000$, There are at most 1000 buttons\nSubtask 3 [40 points] : No additional constraints.\n\n-----Sample Input:-----\n3\n4\n3 5 3 4\n2\n5 7\n1\n4\n\n-----Sample Output:-----\n3\n0\n0\n\n-----EXPLANATION:-----\nThis section uses 1-indexing.\nIn the first sample, the buttons are: $[3, 5, 3, 4]$\n$A[1] +  A[4] = 3 + 4 = 7$ which is odd.\n$A[2] +  A[4] = 5 + 4 = 9$ which is odd.\n$A[3] +  A[4] = 3 + 4 = 7$ which is odd.\nIn total, there are 3 pairs with an odd sum, so the answer is 3.\nIn the second sample, the buttons are: $[5, 7]$. There are no odd pairs, so the answer is $0$.\nIn the third sample, the buttons are: $[4]$. There are no pairs at all, so the answer is $0$.\n\n Examples: \nInput: \n['3', '4', '3 5 3 4', '2', '5 7', '1', '4']\nOutput: \n ['3', '0', '0']\n",
  "1112": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '12', '3', '123', '45', '6', '1234', '567', '89', '10']\n",
  "1113": "Problem: \nGiven an array A of length N, your task is to find the element which repeats in A maximum number of times as well as the corresponding count. In case of ties, choose the smaller element first.\n\n-----Input-----\nFirst line of input contains an integer T, denoting the number of test cases. Then follows description of T cases. Each case begins with a single integer N, the length of A. Then follow N space separated integers in next line.  Assume that 1 <= T <= 100, 1 <= N <= 100 and for all i in [1..N] : 1 <= A[i] <= 10000\n\n-----Output-----\nFor each test case, output two space separated integers V & C. V is the value which occurs maximum number of times and C is its count.\n\n-----Example-----\nInput:\n2\n5\n1 2 3 2 5\n6\n1 2 2 1 1 2\n\nOutput:\n2 2\n1 3\n\nDescription:\nIn first case 2 occurs twice whereas all other elements occur only once. \nIn second case, both 1 and 2 occur 3 times but 1 is smaller than 2.\n\n Examples: \nInput: \n['2', '5', '1 2 3 2 5', '6', '1 2 2 1 1 2', '', '']\nOutput: \n ['2 2', '1 3']\n",
  "1114": "Problem: \nChefu is Chef's little brother, he is 12 years old and he is new to competitive programming.\nChefu is practicing very hard to become a very skilled competitive programmer and win gold medal in IOI.\nNow Chefu is participating in a contest and the problem that he is trying to solve states:\nGiven an array A of N integers, find any i, j such that i <  j \nand Ai + Aj is maximum possible \nunfortunately, there's no much time left before the end of the contest, so Chefu doesn't have time to think of correct solution, so instead, he wrote a solution that selects a random pair (i,  j) (i <  j) and output Ai + Aj. each pair is equiprobable to be selected.\nNow Chefu wants your help to calculate the probability that his solution will pass a particular input.\n\n-----Input-----\nFirst line contains an integer T denoting the number of test-cases.\nFirst line of each test-case contains a single integer N\nSecond line of each test-case contains N space-separated integers A1 A2 ... AN\n\n-----Output-----\nFor each test-case output a single line containing a single number denoting the probability that Chefu's solution to output a correct answer. your answer will be accepted if the absolute difference between it and correct answer is less than 1e-6\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 2 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 1,000\n\n-----Example-----\nInput:\n3\n4\n3 3 3 3\n6\n1 1 1 2 2 2\n4\n1 2 2 3\n\nOutput:\n1.00000000\n0.20000000\n0.33333333\n\n Examples: \nInput: \n['3', '4', '3 3 3 3', '6', '1 1 1 2 2 2', '4', '1 2 2 3']\nOutput: \n ['1.00000000', '0.20000000', '0.33333333']\n",
  "1118": "Problem: \nChef is playing a game which contains a binary string. \nHe can perform one operation only:\n- Toggle the i_th bit of the string (0 to 1 or 1 to 0)\nBy performing operations on the string (can be zero times), you have to convert the string with no adjacent bit being the same.\nCan you help chef ?\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- First line of each test case, contains the size of the  string $N$\n- Seond line contains a single line of input, the binary string. \n\n-----Output:-----\nFor each testcase, output in a single line answer - the minimum operations.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $2 \\leq |S| \\leq 10^3$\n\n-----Sample Input:-----\n1\n4\n1011\n\n-----Sample Output:-----\n1\n\n Examples: \nInput: \n['1', '4', '1011']\nOutput: \n ['1']\n",
  "1120": "Problem: \nDue to the COVID pandemic, maintaining social distancing is of utmost importance. In this problem, you'd calculate how many days would it take to reach an apocalypse from an initial case if nobody maintains social distancing.\nThe Earth is flat (for this question) and it's dimensions are $R$ x $C$\nThe whole Earth is already divided into blocks and the virus can spread in all directions except diagonally. The virus from each newly infected person will spread in all directions in the next day, thus growing exponentially.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Next line contains $R$ and $C$ respectively separated by a space.\n- Next line contains $x$ and $y$ respectively separated by a space, denoting the indices of the initial case in the world.\n\n-----Output:-----\nFor each testcase, output in a single line an integer denoting the number of days after which everyone will be infected.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^4$\n- $2 \\leq R,C \\leq 10^7$\n- $0 \\leq x,y \\leq 10^7$\n\n-----Subtasks-----\n- 10 points : $1 \\leq T \\leq 5$ and $2 \\leq R,C \\leq 10$\n- 20 points : $2 \\leq R,C \\leq 10^5$\n- 70 points : Original constraints\n\n-----Sample Input:-----\n2\n4 5\n2 1\n3 4\n1 1\n\n-----Sample Output:-----\n5\n3\n\n-----EXPLANATION:-----\n2nd test case:\nAssuming, it's a small world of $3$ x $4$\n0 is not infected. 1 is infected.\nWorld indexing is like a 2D array:\n(0,0) (0,1) (0,2) (0,3)\n(1,0) (1,1) (1,2) (1,3)\n(2,0) (2,1) (2,2) (2,3)\nIf this is the case on Day 0:\n0 0 0 0\n0 1 0 0\n0 0 0 0\nThis will be the case on Day 1:\n0 1 0 0\n1 1 1 0\n0 1 0 0\nThis will be the case on Day 2:\n1 1 1 0\n1 1 1 1\n1 1 1 0\nThe End on Day 3:\n1 1 1 1\n1 1 1 1\n1 1 1 1\nThus, answer will be 3\n\n Examples: \nInput: \n['2', '4 5', '2 1', '3 4', '1 1']\nOutput: \n ['5', '3']\n",
  "1121": "Problem: \nChef is stuck on the minute hand of a giant clock. To escape from this clock he needs to get onto the hour hand which has an exit door. \nSince the minute hand and and hour hand are not connected at any point, chef will surely need to make a jump. Since he wants minimum risks, he chooses to jump on the hour hand so that the angle he has to cover is minimum possible.\nYou will be given a clock time in $UTC$ format denoting time of chef's jump and you have to compute the minimum angle that chef needs to cover while completing the jump.\nFor some reason chef times his jump only when the number of minutes is a multiple of 5.\n\n-----Input:-----\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of  $T$ test cases follows.\nThe first line of each test case contains a string denoting time in UTC format (e.g. 10:20 i.e. 10 hours and 20 minutes)\n\n-----Output-----\nFor each test case, print a single line denoting the smallest angle of jump.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $0 \\leq hours \\leq 23$\n- $0 \\leq minutes \\leq 59$\n\n-----Example Input-----\n3\n14:20\n02:10\n09:30\n\n-----Example Output-----\n50 degree \n5 degree  \n105 degree\n\n-----Explanation-----\n- In the second case, once the hour hand reaches 2 it starts moving towards 3 with the passing of every minute, hence when the minute hand points 10 minutes, the hour hand has already covered some angle towards 3. \nIn this scenario the two angles made by hour and minute hand are 355 and 5 degrees. Since chef will jump on the side with minimum angle, he chooses the one with 5-degree angle.\n\n Examples: \nInput: \n['3', '14:20', '02:10', '09:30']\nOutput: \n ['50 degree', '5 degree', '105 degree']\n",
  "1122": "Problem: \nRavi is very good student in mathematics and he also like Even numbers very much .\n\nOn the other hand his friend Jhon like Odd numbers . Both of them are preparing for IIT JEE Advance .One day they are solving a  question together the question was Find the sum of first $n$ terms of the given series  $1^2+2.2^2+3^2+2.4^2+5^2+2.6^2+...........$\nIf the sum is odd then Jhon will be happy and will solve 2 more questions,and Ravi will not attempt more questions. If sum is even Ravi will  be happy and will solve 2 more questions and Jhon will not attempt more questions. \nSo Your task is to decide who will solve more questions.\n\n-----Input:-----\n- First line will contain $n$, number of terms  in the given series.\n\n-----Output:-----\nOutput single line \"Ravi\" if he solve more questions or \"Jhon\" if he solve more questions.\n\n-----Constraints-----\n- $1 \\leq n \\leq 100$\n\n-----Sample Input:-----\n2\n\n3   \n\n-----Sample Output:-----\nJhon       \nRavi       \n\n-----EXPLANATION:-----\nIn the first test cases  sum of 2 terms is 9 (according to the given series) which is an odd number   so Jhon will solve 2 more questions and Ravi will not attempt more questions.\nIn second test case sum of 3 terms is 18 (according to the given series) which is an  even number according to the given series  so Ravi will solve 3 more questions and Jhon will not attempt more questions.\n\n Examples: \nInput: \n['2', '3']\nOutput: \n ['Jhon', 'Ravi']\n",
  "1123": "Problem: \nChef has decided to start home delivery from his restaurant. He hopes that he will get a lot of orders for delivery, however there is a concern. He doesn't have enough work forces for all the deliveries.  For this he has came up with an idea - he will group together all those orders which have to be delivered in nearby areas. \n\nIn particular, he has identified certain bidirectional roads which he calls as fast roads. They are short and usually traffic free, so the fast travel is possible along these roads. His plan is that he will send orders to locations A and B together if and only if it is possible to travel between A and B using only fast roads. Your task is, given the configuration of fast roads, identify which orders are to be sent together.\n\n-----Input-----\nFirst line of input contains an integer T, the number of test cases. Then T test cases follow. First line of each test case contains two space separated integers N and M, denoting number of locations and the number of fast roads. Then M lines follow each containing two space separated integers A and B, denoting that there is a fast road between locations A and B. Assume that locations are indexed by numbers from 0 to N-1. \n\nNext line contains an integer Q denoting the number of queries. Each of the next Q lines contain two integers X and Y. For each query you have to find out if orders meant for locations X and Y are to be sent together or not.\n\nNote that there might be multiple fast roads between same pair of locations, also there might be a fast road that links a location to itself.\n\n-----Output-----\nFor each test case print Q lines - one for each query. Output \"YO\" if the orders are to be \ndelivered together and \"NO\" otherwise (quotes for clarity).\n\n-----Constraints-----\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 M \u2264 1000\n0 \u2264 A, B, X, Y \u2264 N-1\n1 \u2264 Q \u2264 3000\n\n-----Example-----\nInput:\n1\n4 2\n0 1\n1 2\n3\n0 2\n0 3\n2 1\n\nOutput:\nYO\nNO\nYO\n\n-----Warning!-----\nThere are large input and output files in this problem. Make sure you use fast enough I/O methods.\n\n Examples: \nInput: \n['1', '4 2', '0 1', '1 2', '3', '0 2', '0 3', '2 1', '', '']\nOutput: \n ['YO', 'NO', 'YO']\n",
  "1124": "Problem: \nLumpy is a bus driver. Today, the conductor is absent so Lumpy has to do the conductor's job as well. There are N creatures in the bus. Sometimes the creatures don't carry change and can't pay the exact amount of the fare. Each creature in the bus today has paid an amount\ngreater than his/her fare. You are given information about the extra amount paid by each creature, by an array A of size N, where Ai denotes the extra amount paid by the i-th creature, in rupees.\nAfter the end of the trip, Lumpy noticed that he had P one rupee coins and Q two rupee coins. He wants to pay back the creatures using this money. Being a kind hearted moose, Lumpy wants to pay back as many creatures as he can. Note that Lumpy will \nnot pay back the i-th creature if he can't pay the exact amount that the i-th creature requires with the coins that he possesses. \nLumpy is busy driving the bus and doesn't want to calculate the maximum number of creatures he can satisfy - He will surely cause an accident if he tries to do so. Can you help him out with this task? \n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- For each test case, first line consists of three space separated integers N, P and Q.\n- Second line consists of N space separated integers A containing N space integers, where i-th integer denotes Ai.\n\n-----Output-----\n- For each test case, output a single line containing an integer corresponding to maximum number of creatures that Lumpy can pay back.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 106\n- 1 \u2264 N \u2264 105\n- 1 \u2264 Ai \u2264 109\n- 0 \u2264 P, Q \u2264 1014\n- Sum of N over all the cases does not exceed 106\n\n-----Subtasks-----\n- Subtask #1 (15 points): P = 0\n- Subtask #2 (15 points): Q = 0\n- Subtask #3 (70 points): Original constraints\n\n-----Example-----\nInput:3\n3 3 0\n1 2 2\n3 2 1\n1 2 1\n4 5 4\n2 3 4 5\n\nOutput:2\n3\n3\n\n-----Explanation-----\nExample 1. Lumpy has just 3 one rupee coins. \n\nHe can pay creatures numbered {1, 2} or creatures numbered {1, 3} with these coins. Thus, answer is 2. \nExample 2. Lumpy has 2 one rupee coins and 1 two rupee coin. \n\nIn the optimal solution, Lumpy can give the two rupee coin to creature 2 and the one rupee coins to creatures 1 and 3. Thus, answer is 3.\n\n Examples: \nInput: \n['3', '3 3 0', '1 2 2', '3 2 1', '1 2 1', '4 5 4', '2 3 4 5']\nOutput: \n ['2', '3', '3']\n",
  "1125": "Problem: \nYou are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today.\nThe students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\n Examples: \nInput: \n['1', '5 10']\nOutput: \n ['50']\n",
  "1126": "Problem: \n\"How did you get the deal,how did he agree?\"\n\"Its's simple Tom I just made him an offer he couldn't refuse\" \nAyush is the owner of a big construction company and a close aide of Don Vito The Godfather, recently with the help of the Godfather his company has been assigned a big contract according to the contract he has to make n number of V shaped infinitely long roads(two V shaped roads may or  not intersect) on an infinitely large field.\nNow the company assigning the contract needs to know the maximum number of regions they can get after making n such roads.\nHelp Ayush by answering the above question.\n\n-----Input:-----\n- The first line consists of the number of test cases $T$. \n- Next T lines consists of the number of V shaped roads $n$.\n\n-----Output:-----\nFor each test case print a single line consisting of the maximum regions obtained.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq n \\leq 10^9$\n\n-----Sample Input:-----\n2\n1\n2\n\n-----Sample Output:-----\n2\n7\n\n-----EXPLANATION:-----\nTest case 1:       For one V shaped road there will be 2 regions\n\nTest case 2:       For n=2 the following figure depicts the case of maximum regions:\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['2', '7']\n",
  "1127": "Problem: \nNitika was once reading a history book and wanted to analyze it. So she asked her brother to create a list of names of the various famous personalities in the book. Her brother gave Nitika the list. Nitika was furious when she saw the list. The names of the people were not properly formatted. She doesn't like this and would like to properly format it.\nA name can have at most three parts: first name, middle name and last name. It will have at least one part. The last name is always present. The rules of formatting a name are very simple:\n\n- Only the first letter of each part of the name should be capital.\n- All the parts of the name except the last part should be represented by only two characters. The first character should be the first letter of the part and should be capitalized. The second character should be \".\".\n\nLet us look at some examples of formatting according to these rules:\n- gandhi -> Gandhi\n\n- mahatma gandhI -> M. Gandhi \n- Mohndas KaramChand ganDhi -> M. K. Gandhi \n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe only line of each test case contains the space separated parts of the name.\n\n-----Output-----\nFor each case, output the properly formatted name.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 2 \u2264 Length of each part of the name \u2264 10\n- Each part of the name contains the letters from lower and upper case English alphabets (i.e. from 'a' to 'z', or 'A' to 'Z')\n\n-----Subtasks-----\nSubtask #1 (40 points)\n- There is exactly one part in the name.\n\nSubtask #2 (60 points)\n- Original constraints.\n\n-----Example-----\nInput:\n3\ngandhi\nmahatma gandhI\nMohndas KaramChand gandhi\n\nOutput:\nGandhi \nM. Gandhi \nM. K. Gandhi \n\n-----Explanation-----\nThe examples are already explained in the problem statement.\n\n Examples: \nInput: \n['3', 'gandhi', 'mahatma gandhI', 'Mohndas KaramChand gandhi', '', '']\nOutput: \n ['Gandhi ', 'M. Gandhi ', 'M. K. Gandhi ']\n",
  "1128": "Problem: \nThe Chef is given an array of numbers and asked to find the first balance point of an array. A balance point is an index in the array N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no such balance point, print -1\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of weights on the array. The second line contains N space-separated integers A1, A2, ..., AN denoting the weights\n\n-----Output-----\nFor each test case, output a single line containing the index of the first balance point. If no such index exists, output -1\n\n-----Constraints-----\nFor Subtask 1:\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 10\n- -1000 \u2264 A1, A2, ..., AN \u2264 1000\nFor Subtask 1:\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 1000\n- -10000 \u2264 A1, A2, ..., AN \u2264 10000\n\n-----Example-----\nInput:\n2\n7\n7 8 9 1 9 8 7\n6\n1 100 50 -51 1 1\n\nOutput:\n3\n1\n\n-----Explanation-----\nExample case 1. In the first case, at the midpoint of the array 1, the sum of the left side {7,8,9} is equal to the sum of the right side {9,8,7}\nExample case 1. In the second case, at index 1, the sum of left side =1 is equal to the sum of the right side {50,-51,1,1}\n\n Examples: \nInput: \n['2', '7', '7 8 9 1 9 8 7', '6', '1 100 50 -51 1 1']\nOutput: \n ['3', '1']\n",
  "1129": "Problem: \nChef\u2019s girlfriend is angry with him because he forgot her birthday. Chef decided to please her by gifting her a Love Graph. \nChef has $N$ vertices: $V_1, V_2, \\dots, V_N$. Love Graph is an undirected multigraph with no self-loops and can be constructed by performing the following operations:-\n- Choose an integer $i$ ($1 \\leq i \\leq N$)\n- Choose another integer $j \\space \\space \\{ (i \\neq j) \\text{ and } (1 \\leq j \\leq N) \\}$\n- Make an edge between $V_i$ and $V_j$\n- Set $i = j$\n- Repeat steps $2, 3$ and $4$ in order $M-1$ more times.\nFind the number of ways in which Chef can construct a Love Graph. Since the answer can be very large, compute it modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. \n- The first line of each test case contains two space-separated integers $N$ and $M$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of ways in which Chef can construct a Love Graph modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $2 \\leq N \\leq 10^9$\n- $1 \\leq M \\leq 10^{18}$\n\n-----Subtasks-----\n- 30 points:\n- $1 \\leq T \\leq 100$\n- $2 \\leq N \\leq 10$\n- $1 \\leq M \\leq 10$ \n- 70 points: original constraints\n\n-----Sample Input-----\n1\n\n2 1   \n\n-----Sample Output-----\n2   \n\n-----Explanation-----\nThere are two ways of constructing Love Graph.\n\nIn first way, we pick Vertex 1 and then join with Vertex 2.\n\nIn second way, we pick Vertex 2 and then join with Vertex 1.\n\n Examples: \nInput: \n['1', '2 1']\nOutput: \n ['2']\n",
  "1130": "Problem: \nFinally, a COVID vaccine is out on the market and the Chefland government has asked you to form a plan to distribute it to the public as soon as possible. There are a total of $N$ people with ages $a_1, a_2, \\ldots, a_N$.\nThere is only one hospital where vaccination is done and it is only possible to vaccinate up to $D$ people per day. Anyone whose age is $\\ge 80$ or $\\le 9$ is considered to be at risk. On each day, you may not vaccinate both a person who is at risk and a person who is not at risk. Find the smallest number of days needed to vaccinate everyone.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $D$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the smallest required number of days.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^4$\n- $1 \\le D \\le 10^5$\n- $1 \\le a_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n10 1\n10 20 30 40 50 60 90 80 100 1\n5 2\n9 80 27 72 79\n\n-----Example Output-----\n10\n3\n\n-----Explanation-----\nExample case 1: We do not need to worry about how the people are grouped, since only one person can be vaccinated in a single day. We require as many days as there are people.\nExample case 2: There are two people at risk and three people who are not at risk. One optimal strategy is to vaccinate the two people at risk on day $1$ and the remaining three on the next $2$ days.\n\n Examples: \nInput: \n['2', '10 1', '10 20 30 40 50 60 90 80 100 1', '5 2', '9 80 27 72 79']\nOutput: \n ['10', '3']\n",
  "1131": "Problem: \nChef has an array of N natural numbers most of them are repeated. Cheffina challenges chef to find all numbers(in ascending order) whose frequency is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5\n\n Examples: \nInput: \n['1', '5 1', '5 2 1 2 5']\nOutput: \n ['2 5']\n",
  "1132": "Problem: \nShaun was given $N$ pairs of parenthesis ( )  by his teacher who gave him a difficult task.The task consists of two steps. First,Shaun should colour all $N$ pairs of parenthesis each with different color but opening and closing bracket of a particular pair should be of same colour. Then,Shaun should report to his teacher the number of ways he can arrange all $2*N$ brackets such that sequence form is valid. Teacher defined valid sequence by these rules:\n- Any left parenthesis '(' must have a corresponding right parenthesis ')'.\n- Any right parenthesis ')' must have a corresponding left parenthesis '('.\n- Left parenthesis '(' must go before the corresponding right parenthesis ')'. \nNote: Shaun could match opening and closing brackets of different colours. \nSince number of ways can be large, Shaun would report the answer as modulo 1000000007 ($10^9 + 7$).\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one integer $N$. \n\n-----Output:-----\nFor each testcase, output in a single line answer given by Shaun to his teacher modulo 1000000007.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq N \\leq 100000$\n\n-----Sample Input:-----\n3\n1\n2\n3\n\n-----Sample Output:-----\n1\n6\n90\n\n-----EXPLANATION:-----\nHere numbers from $1$ to $N$ have been used to denote parenthesis.A unique number corresponds to a unique pair of parenthesis.\n-In the first test case , you can use only one color to color the parenthesis  you could arrange it only in one way i.e, 1 1\n-In the second test case  you can use two colors and the possible ways of arranging it are\n1 1 2 2\n1 2 2 1\n1 2 1 2\n2 2 1 1\n2 1 1 2\n2 1 2 1\n\n Examples: \nInput: \n['3', '1', '2', '3']\nOutput: \n ['1', '6', '90']\n",
  "1133": "Problem: \nShivam is working on electric circuits. He requires some connecting wires. He needs to make a total of N connections and he has mentioned his wire length requirements for each connection in an integer sequence A. For buying wires, he need to decide the length of each wire piece, and he\u2019ll get as many wire pieces of the chosen length each at unit cost (cost 1 per piece) but he can't get wires of different lengths. Also, he can't cut wire pieces to make new pieces of different (smaller) length(s).\nBut he can connect any number of wires together to form a new single wire piece whose length is the sum of lengths of the wires connected. So, Shivam needs to choose an integer length for buying wires. Shivam hates to waste anything, and he hates it even more if that thing is money.\nShivam is weak in mathematics and is asking you to help him in this situation. Help him decide the length of wires and total number of wires so as to minimize the total expenditure.\nNote: You cannot make a connection which requires a wire piece of length X with a wire piece of length Y if X\u2260Y.\nInput:\n\u00b7        The first line of the input contains T = Number of Test cases\n\u00b7        The first line of each test case contains an integer N\n\u00b7        The second line contains N space separated integers A1, A2, \u2026., AN.\nOutput:\nFor each test case print a single line containing two space separated integers, length of each wire and the corresponding minimum cost.\nConstraints:\n\u00b7       1 <= T <= 10\n\u00b7       1 <= N <= 10^5\n\u00b7        1 <= Ai <= 10^5, for each valid i\nSample Input:\n1\n3\n2 4 8\nSample Output:\n2 7\n\n Examples: \nInput: \n['1', '3', '2 4 8']\nOutput: \n ['2 7']\n",
  "1134": "Problem: \nDaenerys Targaryen has been suggested by her counselors to leave the Meereen and start conquering other parts of the world. But she knows giving up on the people of Meereen means victory of slavery. Her plan is to start conquering rest of the world while she remains in Meereen. She can only trust her bravest and most beloved Daario Naharis to undertake this risk. She asks him to conquer a few nations and promises him a help from her dragons. She also promises to marry him if he successfully conquers all the nations and not if he is defeated.\nDaario has to conquer 'N' number of nations each nation with army size A[i]. He attacks the nations serially. As promised, he gets help from Daenerys's Dragons. His first 'M' attacks are made with the help of Dragons.\n\nFor first 'M' attacks, he gains A[i] soldiers.\n\nFor the rest, he looses ceiling of A[i]/2 soldiers.\n\nHe is defeated if he is left with no army before he conquers all the 'N' nations. He has no army initially and only has Dragons.\n\n-----Input-----\nFirst line has 'T' which is the number of test cases.\nFor each test cases there are two space separated integers 'N' and 'M' denoting the number of nations and the number of nations he has Dragon's help for respectively.\nFollows N space separated integers denoting the size of army of each nation.\n\n-----Output-----\nPrint 'VICTORY' if Daario conquers all nations and 'DEFEAT' if he doesn't.  \n\n-----Constraints-----\n- 1 \u2264 T \u2264 500\n- 1 \u2264 M \u2264N \u2264 100000\n- 1 \u2264 A[i] \u2264 100000\n\n-----Example-----\nInput:\n\n3\n5 3\n1 2 3 4 5\n6 2\n4 4 4 4 4 4\n7 4 \n10 10 10 10 50 60 70\nOutput:\n\nVICTORY\nVICTORY\nDEFEAT \n\n-----Explanation-----\nExample case 1.\n\nFirst 3 attacks add 1,2,3 to his army making it 6. (1+2+3 = 6)\n\nThen he looses 2 and 3 making it 1. (6-2-3 = 1)\n\nHe conquers all so VICTORY.\n\nExample case 2.\n\nFirst 2 attacks add 4,4 to his army making it 8. (4+4 = 8)\n\nThen he looses 2,2,2,2 making it 0. (8-2-2-2-2 = 0)\n\nHe conquers all so VICTORY.\n\nExample case 3.\n\nFirst 4 attacks add 10,10,10,10 to his army making it 40. (10+10+10+10 = 40)\n\nThen he looses 25 and then all 15 out of possible 30 making it 0. (40-25-15 = 0)\n\nHe is defeated on 6th attack so DEFEAT.\n\n Examples: \nInput: \n['3', '5 3', '1 2 3 4 5', '6 2', '4 4 4 4 4 4', '7 4', '10 10 10 10 50 60 70']\nOutput: \n ['VICTORY', 'VICTORY', 'DEFEAT']\n",
  "1135": "Problem: \nChef Ada is the FootBall coach of the Dinosaurs Institute of Technology.\nThere are $N$ dinosaurs (enumerated $1$ through $N$) placed in a line. The i-th dinosaur has a height of $i$ meters.\nAda is training The dinosaurs in the following tactic:\n- Initially the leftmost dinosaur has the ball.\n- The dinosaur that has the ball passes the ball to the nearest dinosaur to the right that is tallest than him.\n- The previous step continues until the ball reaches the tallest dinosaur, then he throws the ball and scores a goal!\nHelp Ada reordering the dinosaurs in such a way that the ball is passed from dinosaur to dinosaur exactly $K$ times.\nFor example, if there are $5$ dinosaurs ordered as $[2,3,1,5,4]$, then the ball goes $2 \\rightarrow 3\\rightarrow5 \\rightarrow goal$, and the ball was passed two times.\n\n-----Input:-----\n- First line will contain $T$, number of testcases.\n- Each test case consist of a line with two space separated integers $N,K$.\n\n-----Output:-----\nFor each testcase, output in a single line conaining $N$ integers representing one possible ordering in which the dinosaurs can be placed.\n\n-----Constraints-----\n- $1 \\leq T \\leq 2^8$\n- $2 \\leq N \\leq 20$\n- $0 \\leq K \\leq N-1$\n\n-----Sample Input:-----\n1\n5 2\n\n-----Sample Output:-----\n2 3 1 5 4\n\n Examples: \nInput: \n['1', '5 2']\nOutput: \n ['2 3 1 5 4']\n",
  "1136": "Problem: \nChef has N laddus of K sweetness each. Chef wants to eat all laddus, but Chef is restricted with the given condition that he must not eat two adjacent laddus. Chef starts calculating the maximum sweetness that he will get from the laddus. Find the maximum sweetness that chef gets at the end of all calculations. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N, K$. \n\n-----Output:-----\nFor each test case, output in a single line answer as Maximum sweetness the chef will have.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n-----Sample Input:-----\n2\n1 2\n4 3\n\n-----Sample Output:-----\n2\n6\n\n-----EXPLANATION:-----\nFor 1) Chef will get only 1 laddu with sweetness 2.\nFor 2) Chef will have multiple ways as\n[1,3], [2,4], [1,4] with sweetness 6\n[1],[2],[3],[4] with sweetness 3.\nMaximum sweetness will be 6.\n\n Examples: \nInput: \n['2', '1 2', '4 3']\nOutput: \n ['2', '6']\n",
  "1137": "Problem: \nVishal Wants to buy 2 gifts for his best friend whose name is Annabelle(her age is 20), So they both went for shopping in a store. But Annabelle gave, Vishal a condition that she will accept this gifts only when the total price of the gifts is the same as her age times 100.\nThe store contains, a list of items whose prices are also displayed, Now Vishal is asking for your help to buy gifts, as he wants to impress Annabelle this time.\nNote: Vishal cannot buy the same item more than once.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$. $T$ denoting the number of test cases. The description of $T$ test cases is as follows.\n- The next line of the input contains a single integer $N$. $N$ denotes the total number of items in store.\n- The next line of the input contains $N$ space-separated integers $A1, A2, A3...An$ where $ith$ number denotes the price of $ith$ element.\n\n-----Output:-----\n- For each test-case print \"Accepted\"(without quotes) if the gifts are accepted by Annabelle, else print \"Rejected\"(without quotes)\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq A1, A2, A3...An \\leq 10^7$\n\n-----Sample Input:-----\n1\n5\n10 2 1000 50 1000\n\n-----Sample Output:-----\nAccepted\n\n-----Explanation:-----\n- As the given list of items have 2 items whose price sum up to the age times 100 of Annabelle i.e. 1000+1000 = (20 *100)\n\n Examples: \nInput: \n['1', '5', '10 2 1000 50 1000']\nOutput: \n ['Accepted']\n",
  "1138": "Problem: \nSereja is hosting his birthday dinner. He invited his N close friends. Let us number the people from 1 to N according to the order in which they arrive at the event. The dinner is being held in long straight corridor in which people sit in a way such that they won't leave any empty space in between two consecutive persons at any given time. \n\nWhen a person number i arrives at the corridor, he must go and stand to the immediate right of the person numbered A[i] (if A[i] = 0, then this person just stands at the leftmost end of the line). \n\nBut there is a problem, as there is no space between two consecutive persons at any given time, so for this person to sit, space must be created by moving either all the persons to left of the place to the left one step each, or all the persons to right of the place to the right one step each.  \n\nNow, Sereja is wondering about what could be the minimum number of steps people will take so as to sit in the dinner party. Please find it fast, so that Sereja can peacefully entertain his guests.\n\n-----Input-----\nFirst line of input contain an integer T \u2014 the number of test cases. T tests follow.\nFirst line of each test case contain the integer N, and the next line contains N integers \u2014 A[1], A[2], ... , A[N].\n\n-----Output-----\nFor each test case, output a single line with the answer \u2014 the minimal number of steps required.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 100\n- 0 \u2264 A[i] < i\n\n-----Example-----\nInput:\n3\n1\n0\n3\n0 0 0\n5\n0 1 2 1 4\n\nOutput:\n0\n0\n3\n\n-----Explanation-----\nExample case 3.\n- First three persons don't need any steps to sit. The line after the arrangement of these persons will look like [1, 2, 3].  \n\n- When person #4 comes in, he wants to sit to the right of person 1, so we need to either move the first person to the left, or the second and third persons to the right. The first case is clearly better. Now the line will look like [1, 4, 2, 3].  \n\n- When person #5 arrives, he will need to move 2 persons in either case. The final arrangement will be [1, 4, 5, 2, 3]. \n\nSo total number of steps people moved during the entire process is 1 + 2 = 3. So the answer is 3.\n\n Examples: \nInput: \n['3', '1', '0', '3', '0 0 0', '5', '0 1 2 1 4']\nOutput: \n ['0', '0', '3']\n",
  "1139": "Problem: \nThe chef is very expert in coding, so to keep his password safe from the hackers. He always enters a decoded code of his password. You are a hacker and your work is to find the maximum number of possible ways to unlock his password in encoded form.\n\nThe encoded message containing only letters from A-Z is being encoded with numbers using the following mapping: \n\n'A' -> 1 \n\n'B' -> 2 ... \n\n'Z' -> 26\n\nYou have given a non-empty string containing only digits, determine the total number of ways to encode it. \n\nIf the total number of ways are even then you are able to unlock the password. \n\nInput: \nThe first line has a single integer T, denoting the number of test cases. The first line of each test case contains string \u201cS\u201d decoded number.\n\nOutput:\nFor each test case, in a new line, print 'YES' if number of maximum ways are even, otherwise\n'NO'. (without quotes)\n\nConstraints:\n1 \u2264 T \u2264 50\n\n1 \u2264 S \u2264 30\n\nSample Input:\n2\n\n12\n\n223\n\nSample Output:\nYES\n\nNO\n\nExplanation:\nFor first test case, It could be encoded as \"AB\" (1 2) or \"L\" (12), hence the number of\nmaximum possible ways are 2 so output is \u201cYES\u201d.\n\n Examples: \nInput: \n['2', '12', '223']\nOutput: \n ['YES', 'NO']\n",
  "1140": "Problem: \nConsider the following algorithm\norder(arr, i) {\nif length(arr) <= 1 {\nreturn arr\n}\nl = []  \nr = []\nn = length(arr) - 1\nfor j in 0, 1, ..., n {\nif ( (arr[j] modulo power(2,i+1))  < power(2,i) ) {\nappend arr[j] to l\n}else{\nappend arr[j] to r\n}\n}\nl = order(l, i + 1)\nr = order(r, i + 1)\nc = concatenate(l, r)\nreturn c\n}\n\nNote that $concatenate(l, r)$ returns an array which is the array $l$, followed by the array $r$. Similarly $power(x,y)$ returns $x^y$.\nLet $a$ be the array $a_0,a_1,a_2,a_3, \\ldots,a_n$ where $a_j = j$ for each index $j$ and the last index $n = (2^p-1)$ for a fixed integer parameter $p$.  Given an integer $p$ and an index $idx$, your task is calculate the element at index $idx$ in the array returned by executing $order(a, 0)$.\nFor example, suppose $ p = 3$ and $idx = 3$.\n- The initial array is $a = [0, 1, 2, 3, 4, 5, 6, 7]$.\n- Executing $order(a, 0)$ first creates two new arrays $l == [0, 2, 4, 6]$ and $r == [1, 3, 5, 7]$.\n- Next, $order(l, 1)$ and $order(r, 1)$ are executed.\n- $order(l, 1)$, in turn, executes $order([0, 4], 2)$ and $order([2, 6], 2)$ which return $[0, 4]$ and $[2, 6]$, respectively. These are then concatenated, so $order(l, 1)$ returns $[0, 4, 2, 6]$.\n- Similarly, $order(r, 1)$ returns $[1, 5, 3, 7]$.\n- These two are concatenated as the final result, so the array returned by $order(a, 0)$ is $[0, 4, 2, 6, 1, 5, 3, 7]$.\nSo, if the input is $p = 3$, and $idx = 3$, the answer is $6$. If $p = 3$ and $idx = 7$, the answer should be $7$.\n\n-----Input Format:-----\n- The first line contains a single integer, $T$, which is the number of testcases. The description of each testcase follows.\n- Each testcase is described by a single line with two integers: $p$ and $idx$, where $p$ is the parameter that determines the length of the array $a$ and $idx$ is the index at which you have to report the value in the output of $order(a, 0)$.\n\n-----Output Format:-----\n- You should print the answer in a new line for each testcase, which should be a single integer, the element at index $idx$ after executing $order(a, 0)$ for the array $a$ defined by the parameter $p$.\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10$ \n- $1 \\leq p \\leq 50$\n- $0 \\leq idx \\leq 2^p-1$\n\n-----SUBTASKS:-----\n- Subtask 1: 20% points : $1 \\leq p \\leq 20$\n- Subtask 2: 80% points: Original constraints\n\n-----Sample Input:-----\n2\n3 3\n3 7\n\n-----Sample Output:-----\n6\n7\n\n-----Explanation:-----\nBoth the testcases have been explained in the problem statement.\n\n Examples: \nInput: \n['2', '3 3', '3 7']\nOutput: \n ['6', '7']\n",
  "1141": "Problem: \nA tourist is visiting Byteland. The tourist knows English very well. The language of Byteland is rather different from English. To be exact it differs in following points:\n\n- Bytelandian alphabet has the same letters as English one, but possibly different in meaning. Like 'A' in Bytelandian may be 'M' in English. However this does not mean that 'M' in Bytelandian must be 'A' in English. More formally, Bytelindian alphabet is a permutation of English alphabet. It will be given to you and could be any possible permutation. Don't assume any other condition.\n- People of Byteland don't like to use invisible character for separating words. Hence instead of space (' ') they use underscore ('_'). Other punctuation symbols, like '?', '!' remain the same as in English.\n\nThe tourist is carrying \"The dummies guide to Bytelandian\", for translation. The book is serving his purpose nicely. But he is addicted to sharing on BaceFook, and shares his numerous conversations in Byteland on it. The conversations are rather long, and it is quite tedious to translate for his English friends, so he asks you to help him by writing a program to do the same.\n\n-----Input-----\nThe first line of the input contains an integer T, denoting the length of the conversation, and the string M, denoting the English translation of Bytelandian string \"abcdefghijklmnopqrstuvwxyz\". T and M are separated by exactly one space. Then T lines follow, each containing a Bytelandian sentence S which you should translate into English. See constraints for details.\n\n-----Output-----\nFor each of the sentence in the input, output its English translation on a separate line. Replace each underscores ('_') with a space (' ') in the output. Each punctuation symbol (see below) should remain the same. Note that the uppercase letters in Bytelandian remain uppercase in English, and lowercase letters remain lowercase. See the example and its explanation for clarity.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100\n- M is a permutation of \"abcdefghijklmnopqrstuvwxyz\"\n- Each sentence is non-empty and contains at most 100 characters\n- Each sentence may contain only lowercase letters ('a'-'z'), uppercase letters ('A'-'Z'), underscores ('_') and punctuation symbols: dot ('.'), comma (','), exclamation ('!'), question-mark('?')\n\n-----Example-----\nInput:\n5 qwertyuiopasdfghjklzxcvbnm\nPh\nPcssi\nBpke_kdc_epclc_jcijsc_mihyo?\nEpcf_kdc_liswhyo_EIED_hy_Vimcvpcn_Zkdvp_siyo_viyecle.\nIpp!\n\nOutput:\nHi\nHello\nWhat are these people doing?\nThey are solving TOTR in Codechef March long contest.\nOhh!\n\n-----Explanation-----\nThe string \"qwertyuiopasdfghjklzxcvbnm\" means that 'a' in Bytelandian is 'q' in English, 'b' in Bytelandian is 'w' in English, 'c' in Bytelandian is 'e' in English and so on.\nThus to translate \"Ph\" (first sentence in example) to English:\n1) We find that 'p' in Bytelandian means 'h' in English. So we replace 'P' with 'H'.\n2) Then we see that 'h' in Bytelandian means 'i' in English. So we replace 'h' with 'i'.\n3) Therefore, the translation is \"Hi\".\n\n Examples: \nInput: \n['and its']\nOutput: \n []\n",
  "1142": "Problem: \nThis is one more story about our old friend, the Despotic King. Once every year, it was customary for the king to give audience to the rich merchants of his country in a large hall. On that day, the merchants were ushered in to meet the king one by one and after paying their respects to the king they were seated in the auditorium.\nIt was the job of the minister to introduce each merchant, as he arrived, to the others in the hall. He would announce his name and his wealth. However, our quirky king demanded that in addition, he should also announce the rank of the merchant among all those in the hall (at the time of his arrival) in terms of his wealth.\nFor example, let us suppose that the wealth of the 6 merchants who met the king (in the order in which they arrived) is given by the sequence\n78246840398978246840398978 \\quad 24 \\quad 68 \\quad 40 \\quad 39 \\quad 89\nThen, clearly the first merchant is the richest in the hall when he enters it (since there are no others in the hall) and so his rank is $1$. Since $24 < 78$ the rank of the second merchant when he enters the hall is $2$. The rank of the third merchant is also $2$ since $24 < 68 < 78$. The rank of the fourth merchant is $3$ since $24 < 40 < 68 < 78$, the rank of the fifth merchant is $4$ since $24 < 39 < 40 < 68 < 78$ and finally the rank of the sixth merchant is $1$ since $24 < 39 < 40 < 68 < 78 < 89$. The sequence of ranks announced by the minister would thus be:\n1223411223411 \\quad 2 \\quad 2 \\quad 3 \\quad 4 \\quad 1\nYour task is to write a program that takes as input a sequence of distinct positive integers indicating the wealth of the merchants in the order in which they visit the king and outputs the sequence of ranks announced by the minister.\n\n-----Input:-----\nThe first line contains a single integer $N$ indicating the number of merchants. The next $N$ lines (line $2,...,N+1$) describe the wealth of these $N$ merchants. Line $i+1$ contains a single positive integer indicating the wealth of the $i^{th}$ merchant to enter the hall.\n\n-----Output:-----\nYour output should consist of $N$ lines. Line $i$ should be the rank announced when the $i^{th}$ minister enters the hall.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 45000$.\n- No two merchants have the same wealth.\n- You may also assume that in $30 \\%$ of of the inputs $1 \\leq N \\leq 8000$.\n\n-----Sample Input-----\n6\n78\n24\n68\n40\n39\n89\n\n-----Sample Output-----\n1\n2\n2\n3\n4\n1\n\n Examples: \nInput: \n['6', '78', '24', '68', '40', '39', '89']\nOutput: \n ['1', '2', '2', '3', '4', '1']\n",
  "1143": "Problem: \nYash likes playing with numbers. He has a challenge for you. Yash gives\nyou a number that he made by multiplying two numbers. He claims that the\npossible sum of the two numbers he multiplied is as minimum as possible. He\nchallenges you to find that minimum sum.\n\nFormally, for a given value of N, you are required to find the minimum sum of two distinct numbers x and y such that x, y > 0 and xy = N.  \n\n-----Input:-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n\nEach testcase contains single integer N.\n\n-----Output:-----\nFor each testcase, output minimum x + y such that x*y = N and x,y >0.\n\n-----Constraints :-----\n$1 \\leq T \\leq 100$\n$1 < N \\leq 10^{12}$\n\n-----Sample Input:-----\n1\n\n852140\n\n-----Sample Output:-----\n1929\n\n Examples: \nInput: \n['1', '852140']\nOutput: \n ['1929']\n",
  "1145": "Problem: \nIn a bizarre game of chess ,knight was so drunk, that instead of his usual move he started walking straight. In every move Knight jumps on 2n steps forward (n is number of block that he had travelled so far from starting) but after that he has to take either 1 step forward or backward.\nNow the Knight needs to get to position X so King (i.e. You) needs to decide the order of his backward or forward step in such a way that he can reach its destination in minimum number of steps. Remember he always travels in a straight line and the length of the board is infinite.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases, for each test case enter value X ( i.e. destination)\nNote : initially knight is at n = 1.\n\n-----Output-----\nFor each test case the output should be string of numbers 1 & 2 where 1 denotes backward step and 2 denote the forward step \nNote : for no solution print 0.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 X \u2264 10^10\n\n-----Example-----\nInput:\n2\n17\n10\nOutput:\n2111\n0\n\n-----Explanation-----\nCase 1 : starting from  n = 1 , knight moves to n = 3 ('2') , 5 ('1') , 9 ('1') , 17 ('1') i.e. string printed is 2 1 1 1\nCase 2 : no solution is possible\n\n Examples: \nInput: \n['2', '17', '10']\nOutput: \n ['2111', '0']\n",
  "1146": "Problem: \n[Chopsticks (singular: chopstick) are short, frequently tapered sticks used in pairs of equal length, which are used as the traditional eating utensils of China, Japan, Korea and Vietnam. Originated in ancient China, they can also be found in some areas of Tibet and Nepal that are close to Han Chinese populations, as well as areas of Thailand, Laos and Burma which have significant Chinese populations. Chopsticks are most commonly made of wood, bamboo or plastic, but in China, most are made out of bamboo. Chopsticks are held in the dominant hand, between the thumb and fingers, and used to pick up pieces of food.]\nRetrieved from wikipedia\nActually, the two sticks in a pair of chopsticks need not be of the same length. A pair of sticks can be used to eat as long as the difference in their length is at most D. The Chef has N sticks in which the ith stick is L[i] units long. A stick can't be part of more than one pair of chopsticks. Help the Chef in pairing up the sticks to form the maximum number of usable pairs of chopsticks.\n\n-----Input-----\nThe first line contains two space-separated integers N and D. The next N lines contain one integer each, the ith line giving the value of L[i].\n\n-----Output-----\nOutput a single line containing the maximum number of pairs of chopsticks the Chef can form.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 100,000 (10 5 ) \n- 0 \u2264 D \u2264 1,000,000,000 (10 9 ) \n- 1 \u2264 L[i] \u2264 1,000,000,000 (10 9 ) for all integers i from 1 to N\n\n-----Example-----\nInput:\n\n5 2\n1\n3\n3\n9\n4\n\nOutput:\n2\n\n-----Explanation-----\n\nThe 5 sticks have lengths 1, 3, 3, 9 and 4 respectively. The maximum allowed difference in the lengths of two sticks forming a pair is at most 2.\nIt is clear that the 4th stick (length 9) cannot be used with any other stick.\nThe remaining 4 sticks can can be paired as (1st and 3rd) and (2nd and 5th) to form 2 pairs of usable chopsticks.\n\n Examples: \nInput: \n['5 2', '1', '3', '3', '9', '4']\nOutput: \n ['2']\n",
  "1147": "Problem: \nYou are given a string S containing only lowercase characters. \nYou can rearrange the string and you have to print minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\n Examples: \nInput: \n['3', '1', 'a', '9', 'abbbcbddd', '6', 'abcdef']\nOutput: \n ['0', '2', '5']\n",
  "1148": "Problem: \nIn ACM-ICPC contests, there are usually three people in a team. For each person in the team, you know their scores in three skills - hard work, intelligence and persistence.\nYou want to check whether it is possible to order these people (assign them numbers from 1 to 3) in such a way that for each 1 \u2264 i \u2264 2, i+1-th person is stricly better than the i-th person.\nA person x is said to be better than another person y if x doesn't score less than y in any of the skills and scores more than y in at least one skill.\nDetermine whether such an ordering exists.\n\n-----Input-----\nThe first line fo the input contains an integer T denoting the number of test cases.\nEach test consists of three lines. Each of these lines contains three space separated integers s1, s2 and s3 denoting the scores of one member of the team in each of the three skills, in the given order.\n\n-----Output-----\nFor each test case, output a single line containing \"yes\" if such an ordering exists or \"no\" if doesn't exist (without quotes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 s1, s2, s3 \u2264 100\n\n-----Example-----\nInput\n3\n1 2 3\n2 3 4\n2 3 5\n1 2 3\n2 3 4\n2 3 4\n5 6 5\n1 2 3\n2 3 4\n\nOutput\nyes\nno\nyes\n\n-----Explanation-----\nTest Case 1: We can order them as (3, 2, 1). Person 3 is better than Person 2 because his scores in the first two skills are not lesser than Person 2's. And in skill 3, Person 3 scores higher. Similarly, Person 2 is better than Person 1. He scores more than Person 1 in every skill, in fact.\n\n Examples: \nInput: \n['3', '1 2 3', '2 3 4', '2 3 5', '1 2 3', '2 3 4', '2 3 4', '5 6 5', '1 2 3', '2 3 4']\nOutput: \n ['yes', 'no', 'yes']\n",
  "1149": "Problem: \nChef had an interesting dream last night. He dreamed of a new revolutionary chicken recipe. When he woke up today he tried very hard to reconstruct the ingredient list. But, he could only remember certain ingredients. To simplify the problem, the ingredient list can be represented by a string of lowercase characters 'a' - 'z'.\nChef can recall some characters of the ingredient list, all the others, he has forgotten. However, he is quite sure that the ingredient list was a palindrome.\nYou are given the ingredient list Chef dreamed last night. The forgotten characters are represented by a question mark ('?'). Count the number of ways Chef can replace the forgotten characters with characters 'a' - 'z' in such a way that resulting ingredient list is a palindrome.\n\n-----Input-----\nThe first line of input contains a single integer T, the number of test cases. T lines follow, each containing a single non-empty string - the ingredient list as recalled by Chef. Whatever letters he couldn't recall are represented by a '?'.\n\n-----Output-----\nFor each test case, output a single line containing the number of valid ways the ingredient list could be completed. Since the answers can be very large, output each answer modulo 10,000,009.\n\n-----Example-----\nInput:\n5\n?\n??\nab?\na?c\naba\n\nOutput:\n26\n26\n1\n0\n1\n\n-----Constraints-----\n\n1 \u2264 T \u2264 20\n\n1 \u2264 sum of length of all input strings \u2264 1,000,000\n\nEach input string contains only lowercase roman letters ('a' - 'z') or question marks.\n\n Examples: \nInput: \n['5', '?', '??', 'ab?', 'a?c', 'aba']\nOutput: \n ['26', '26', '1', '0', '1', 'Constraints', '1 \u2264 T \u2264 20', '1 \u2264 sum of length of all input strings \u2264 1,000,000', \"Each input string contains only lowercase roman letters ('a' - 'z') or question marks.\"]\n",
  "1150": "Problem: \nIn the 2-D world of Flatland, the Circles were having their sports day and wanted to end it with a nice formation. So, they called upon Mr. Sphere from Spaceland for help. Mr Sphere decides to arrange the Circles in square formations. He starts with $N$ Circles and forms the largest possible square using these Circles. He then takes the remaining Circles and repeats the procedure. A square of side $S$ requires $S^2$ Circles to create.\nFind the number of squares he will be able to form at the end of the process.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow.\n- Each testcase contains of a single integer $N$.\n\n-----Output:-----\nFor each testcase, output a single integer denoting the number of squares.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n\n85\n\n114          \n\n-----Sample Output:-----\n2\n\n4\n\n-----EXPLANATION:-----\nTest case 1 : Mr Sphere forms a square of side 9 using 81 Circles and then forms a square of side 2 using the remaining 4.\n\n Examples: \nInput: \n['2', '85', '114']\nOutput: \n ['2', '4']\n",
  "1151": "Problem: \nThere is a city with $N$ numbered $0 - N-1$ shops. A market is a place where we can reach from one shop to another using some road. There are $M$ roads in this city connecting each connecting any two shops. \nFind the number of markets in the city.\nNOTE:  A market having only one shop is also a valid market.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of Each Test Case is $N, M$, denoting the number of shops and the number of roads respectively.\n- Next M lines consist of two integers $A$ and $B$ denoting that there exists a road between Shop A and Shop B\n\n-----Output:-----\nFor each testcase, output the number of markets.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N,M \\leq 10^3$\n- $0 \\leq A,B < N$\n\n-----Sample Input:-----\n1\n5 3\n0 1\n2 3\n3 4\n\n-----Sample Output:-----\n2\n\n Examples: \nInput: \n['1', '5 3', '0 1', '2 3', '3 4']\nOutput: \n ['2']\n",
  "1152": "Problem: \nChef Jessie has a lot of recipes with her (N). She often remembered the starting few characters of the recipe and forgot the rest. As all the great chefs do, Jessie also numbered the recipes depending on the priority. So, given the list of recipes along with their priorities answer Jessie\u2019s queries.\nJessie\u2019s queries are as follows:\n\nShe gives you the first few characters of a recipe; you have to print the complete recipe with the highest priority.\nNote:\n\nEvery recipe has a unique priority\n\n-----Input-----\n\nFirst line contains an integer N - the number of recipes.\n\nFollowed by N strings Si along with an integer each Vi.\nSi stands for the recipe and Vi for the priority.\n\nIt is followed by an integer Q - the number of queries.\n\nFollowed by Q strings Qi.\n\nEach string Si, Qi contain only lowercase Latin alphabets ('a' - 'z') and '-'.\n\n-----Output-----\nQ \u2013 lines, each contain the answer for each of the query.\n\nIf for a query no recipe matches print \"NO\". (Without quotes)\nConstraints:\n0 <= N <= 1000\n\n0 <= Q <= 1000\n\n-10^9 <= Vi <= 10^9\n\n1 <= |Si| <= 1000 (length of Si)\n\n1 <= |Qi| <= 1000 (length of Qi)\n\n-----Example-----\nInput:\n4\nflour-with-eggs 100\nchicken-ham -10\nflour-without-eggs 200\nfish-with-pepper 1100\n6\nf\nflour-with\nflour-with-\nc\nfl\nchik\n\nOutput:\nfish-with-pepper\nflour-without-eggs\nflour-with-eggs\nchicken-ham\nflour-without-eggs\nNO\n\n Examples: \nInput: \n['4', 'flour-with-eggs 100', 'chicken-ham -10', 'flour-without-eggs 200', 'fish-with-pepper 1100', '6', 'f', 'flour-with', 'flour-with-', 'c', 'fl', 'chik']\nOutput: \n ['fish-with-pepper', 'flour-without-eggs', 'flour-with-eggs', 'chicken-ham', 'flour-without-eggs', 'NO']\n",
  "1153": "Problem: \n-----Problem Statement-----\nSereja has a sequence of n integers a[1], a[2], ..., a[n]. Sereja can do following transformation of the array:\n\n- create a new sequence of n integers b[1], b[2], ..., b[n]in this way:    (1\u2009\u2264\u2009i\u2009\u2264\u2009n)\n\n- Replace the sequence a by b, i.e., a[i] = b[i] for all i in [1, n] \n\nSereja decided to use his transformation k times. Then he computed the value of      , where r \u2014 the sequence obtained after k transformations of sequence a, as described above.\n\nSereja lost sequence a, but he was left with the numbers q(r) and k. Now Sereja is interested in the question : what is the number of the sequences of the integers \u0441[1], \u0441[2], ..., \u0441[n], such that 1\u2009\u2264\u2009c[i]\u2009\u2264\u2009m and q(d)\u2009=\u2009q(r), where d \u2014 the sequence obtained after k transformations of sequence c, as described above.\n\n-----Input-----\nThe first lines contains a single integer T, denoting the number of test cases. Each  test case consist of four integers : n, m, q(r), k.\n\n-----Output-----\nIn a single line print the remainder of division the answer of the problem on number 10^9\u2009+\u20097.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10000\n- 1 \u2264 n,\u2009m,\u2009q(r), k \u2264 10^9\n\n-----Example-----\nInput:\n3\n1 1 1 1\n2 2 1 1\n2 3 1 1\n\nOutput:\n0\n2\n4\n\n Examples: \nInput: \n['3', '1 1 1 1', '2 2 1 1', '2 3 1 1']\nOutput: \n ['0', '2', '4']\n",
  "1154": "Problem: \nChef and his friends are playing the game AMONG US. They all have chosen their names as numbers. There are N people in Chef\u2019s group including him, and each swears that he is not the imposter. However, it turns out there were N+1 people in the game. Now all that Chef needs to know is the name of the imposter, which is a number. Also remember that numbers can be duplicate. Can you help out Chef in finding the imposter?\nInput : \nFirst line contains the value of N. Second line contains the N numbers that Chef\u2019s friends used as their names. Third line contains the N+1 numbers that people in the game have used as their names.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Numbers used as names \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\n Examples: \nInput: \n['3', '4 2 5', '4 2 3 5']\nOutput: \n ['3']\n",
  "1155": "Problem: \nAutobots are instructed by Optimus Prime to mobilize in the form of a rectangular shape with each Autobot on each vertex of the rectangle region on a -\u201ddeployment area\u201d (which may consist of one or more regions). This is done so as to take care of the inner rectangular area called \u201cregion\u201d. However the rule states-\u201cno two regions may overlap\u201d.  You have been asked to remove some regions from the \u201cdeployment area\u201d so the remaining regions do not obscure each other. To keep the disturbance to the minimum level, you should remove the minimum number of regions to achieve this goal. You may not remove a region and place it in another position; all regions you leave in \u201cdeployment area\u201d must be in their original position.\nWhen you examined the \u201cdeployment area\u201d, you noticed something very nice. Every region was placed on the deployment area by placing each autobot in the four corners. This was done in a very courteous manner since each autobot is guarding only the region it is holding. \nThe reason Optimus Prime wants your help because you are good at taking down a single region without disturbing the rest, even if that region is obscured by many others.\n\n\n-----Input-----\nThe first line consists of a single integer T indicating the number of test cases (about 25).\nEach test case consists begins with a single integer n indicating the number of regions. The next n lines consist of 4 integers x0, x1, y0, and y1 satisfying x0 < x1 and y0 < y1. This means the region covers all points (x,y) satisfying x0 <= x <= x1 and y0 <= y <= y1.\nAs stated before hand, no corner of any region will intersect any other region anywhere. That is, if (x,y) is a corner point of one region and another region is described by x0, x1, y0, and y1, then we do not have x0 <= x <= x1 and y0 <= y <= y1.\nBounds: 1 <= n <= 100 and each integer in a region description fits in a signed 32 bit integer.\n\n-----Output-----\nThe output for each test case is a single line containing a single integer that is the maximum number of regions that can be left on the wall such that no two regions share a common point in the deployment area.\n\n-----Example-----\nInput:\n1\n4\n0 4 0 4\n1 3 1 2\n2 3 1 3\n3 4 1 3\nOutput:\n2\n\n Examples: \nInput: \n['1', '4', '0 4 0 4', '1 3 1 2', '2 3 1 3', '3 4 1 3']\nOutput: \n ['2']\n",
  "1156": "Problem: \nWrite a program, which takes an integer N and if the number is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\n Examples: \nInput: \n['3', '1', '12', '-5']\nOutput: \n ['Thanks for helping Chef!', '-1', 'Thanks for helping Chef!']\n",
  "1157": "Problem: \nToday is the planned day tor Thik and Ayvak's wedding. Kark is infatuated with Ayvak. He offers to play a game with Thik. Whosoever wins, will get to marry Ayvak. Ayvak, who values games of chance over all the other things in life, agrees to this.\n\nKark sets up an N by M grid (N rows, M columns), labelled from left to right and top to bottom consecutively with numbers from 1 to M*N, with 1 at the top left corner and M*N at the bottom right corner. For example, a labelled 3 by 6 grid looks as follows:\n\nKark has already painted K unit squares of the grid with a heart each. Next, Thik randomly picks a rectangle with sides on the grid lines, and having a positive area, with each valid rectangle having an equal probability of being chosen. Three distinct possibilities for Thik's rectangle in the 3 by 6 grid are shown below: \n\nThe nine different rectangles in a 2 by 2 grid are shown below:\n\n\nIf Thik's rectangle contains at least half of the hearts, Thik gets to marry Ayvak. Otherwise, Kark will marry Ayvak. Kark wants to know whether or not he has an advantage here, so he wants to know the expected value of the number of hearts a randomly chosen rectangle will cover. I'm sure that you have a good heart, so please, cover this job for him. \n\n-----Input-----\nThe first line of input contains one integer T, the number of test cases.\nFor each test case, the first line contains 3 space-separated integers N, M, K, as described in the problem statement. The next line contains K space-separated integers, each a single number from 1 to M*N, representing a square that is painted with a heart. It is guaranteed that all K integers are distinct.\n\n-----Output-----\nOutput T lines, each containing a single real number, containing the expected number of hearts that a randomly chosen rectangle will contain. The answer will be considered correct if its relative or absolute error does not exceed 10-6.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5  \n- 1 \u2264 N, M \u2264 107  \n- 1 \u2264 K \u2264 105 \n- Each of the K integers representing a heart are between 1 and N*M, inclusive. All K integers are distinct. \n\n-----Subtasks-----Subtask 1 (15 points) : \n\n- 1 \u2264 N, M \u2264 10\n- 1 \u2264 K \u2264 N * M  \nSubtask 2 (85 points) : no additional constraints \n\n\n-----Example-----\nInput:\n1\n2 2 2\n1 2\n\nOutput:\n0.8888888888888888\n\n-----Explanation-----\nThere are a total of 9 possible rectangles Thik could draw, shown in the figure above, and grid squares 1 and 2 are painted with a heart. The top row of possible selections (shown in the figure) contain 1, 0, 1, 2, and 2 hearts (from left to right), and the bottom row of possible selections (in the figure) contain 1, 0, 1, and 0 hearts. Therefore, 3/9 of the time 0 hearts are contained in the rectangle, 4/9 of the times 1 heart is contained in the rectangle, and 2/9 of the time 2 hearts are contained in the rectangle. The expected value is then 0 * 3/9 + 1 * 4/9 + 2 * 2/9 = 8/9.\n\n Examples: \nInput: \n['1', '2 2 2', '1 2', '', '']\nOutput: \n ['0.8888888888888888']\n",
  "1158": "Problem: \nRecently, chef Ciel often hears about lucky numbers.\n\nEverybody knows that lucky numbers are positive integers\nwhose decimal representation contains only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nCiel decides to make Ciel numbers.\nAs you know, Ciel likes the digit 8 very much.\nAnd then, Ciel likes the digits 5 and 3.\nSo Ciel defines Ciel numbers as the positive integers k such that d(k, 8) \u2265 d(k, 5) \u2265 d(k, 3) and d(k, i) = 0 for all i = 0, 1, 2, 4, 6, 7, 9,\nwhere d(k, i) denotes the number of the digit i in the decimal representation of the integer k.\nFor example, the first few Ciel numbers are 8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888, ....\n\nCiel's restaurant has N menus.\nAnd Ciel want to know how many menus have Ciel numbers as their price.\nYour task is to find it.\n\n-----Input-----\n\nThe first line contains an integer N.\nThen N lines follow.\nEach line has the name Si of the menu and its price Pi separated by a single space.\n\n-----Output-----\n\nPrint the number of menus whose prices are one of Ciel numbers.\n\n-----Constraints-----\n\n1 \u2264 N \u2264 1000\n\n1 \u2264 |Si| \u2264 100, where |Si| denotes the length of Si\n\nEach letter of Si is either an alphabetical letter or a digit or a single quotation mark or a space.\n\n1 \u2264 Pi < 1000000 (106)\nPi contains no leading zeros.\n\n-----Sample Input-----\n6\nmilk 58\nCiel's Drink 80\nThe curry 2nd edition 888888\nrice omelet 85855\nunagi 1\nThe first    and last letters can be a space    358\n\n-----Sample Output-----\n3\n\n-----Output details-----\n\n58 and 888888 and 358 are Ciel numbers.\n80 and 85855 and 1 are not Ciel numbers.\n\n-----Notes-----\n\nDifferent operating systems have different ways of representing a newline; do not assume one particular way will be used.\n\n Examples: \nInput: \n['6', 'milk 58', \"Ciel's Drink 80\", 'The curry 2nd edition 888888', 'rice omelet 85855', 'unagi 1', 'The first    and last letters can be a space    358']\nOutput: \n ['3', 'Output details', '58 and 888888 and 358 are Ciel numbers.', '80 and 85855 and 1 are not Ciel numbers.', 'Notes', 'Different operating systems have different ways of representing a newline; do not assume one particular way will be used.']\n",
  "1159": "Problem: \nAbhi and his friends (Shanky,Anku and Pandey) love to play with strings. Abhi invented a simple game. He will give a string S to his friends. Shanky and Anku will play the game while Pandey is just a spectator. Shanky will traverse the string from beginning (left to right) while Anku will traverse from last (right to left). Both have to find the first character they encounter during their traversal,that appears only once in the entire string. Winner will be one whose character is alphabetically more superior(has higher ASCII value). When it is not possible to decide the winner by comparing their characters, Pandey will be the winner.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nEach test case contains a string S having only lowercase alphabets ( a..z ).\n\n-----Output-----\nFor each test case, output a single line containing \"SHANKY\" if Shanky is the winner or \"ANKU\" if Anku is the winner or \"PANDEY\" if the winner is Pandey. Output your answer without quotes.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 < |S| \u2264 10^5\n\n-----Example-----\nInput:\n3\ngoogle\nbreakraekb\naman\n\nOutput:\nSHANKY\nPANDEY\nANKU\n\n-----Explanation-----\nExample case 2. Both Shanky and Anku can not find any such character. Hence it is not possible to decide the winner between these two. So Pandey is the winner.\n\n Examples: \nInput: \n['3', 'google', 'breakraekb', 'aman']\nOutput: \n ['SHANKY', 'PANDEY', 'ANKU']\n",
  "1161": "Problem: \nIn Snakeland, there are some snakes and mongooses. They are lined up in a row. The information about how exactly they are lined up it is provided to you by a string of length n. If the i-th character of this string is 's', then it means that there is a snake at the i-th position, whereas the character 'm' denotes a mongoose.\nYou might have heard about the age-old rivalry between hares and tortoises, but in Snakeland, the rivalry between snakes and mongooses is much more famous. The snakes and the mongooses want to hold a final poll in which the ultimate winner of this age-old battle will be decided. If the snakes get more votes than the mongooses, they will be the ultimate winners. Similarly, if the mongooses get more votes than snakes, they will be the ultimate winners. Obviously, each animal is loyal to their species, i.e. each snake will vote for the snakes to be the ultimate champions and each mongoose for the mongooses.\n\nTomorrow's the election day. Before the elections, the mongooses decided to cheat. They planned that each mongoose will eat at most one of its neighbor snakes. Two animals are said to be neighbors of each other if they are consecutive to each other in the row. After this, the elections will be held. The mongooses planned in such a way that the number of snakes eaten is maximized. Can you find out who will win the final poll? Output \"snakes\", \"mongooses\" or \"tie\" correspondingly.\n\n-----Input-----\nFirst line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.\nThe only line of each test case contains a string consisting of characters 's' and 'm'. \n\n-----Output-----\nFor each test case output a single line containing \"snakes\", \"mongooses\" or \"tie\" correspondingly (without quotes).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 |s| \u2264 100\n\n-----Example-----\nInput\n4\nsm\nssm\nsms\nssmmmssss\n\nOutput\nmongooses\ntie\ntie\nsnakes\n\n-----Explanation-----\nExample 1. The mongoose will eat the snake. Only the mongoose will be left. So, on the election day, there is one mongoose and zero snakes. So mongooses will win.\nExample 2. The mongoose will eat the snake at position 2 (1-based indexing). One mongoose and one snake will be left. Hence, there will be a tie.\nExample 3. The mongoose can eat either the snake to its left or to the right. But, it can eat only one of them. Afterwards, there will be a single snake and mongoose. So, it will result in a tie. \nExample 4. The mongooses can eat at max two snakes. For example, s*mmm*sss, where * denotes the snakes that were eaten by mongooses. After this, we have four snakes and three mongooses. So, the snakes win.\n\n Examples: \nInput: \n['4', 'sm', 'ssm', 'sms', 'ssmmmssss']\nOutput: \n ['mongooses', 'tie', 'tie', 'snakes']\n",
  "1162": "Problem: \nEvery great chef knows that lucky numbers are positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.  \n\nOur chef has recently returned from the Lucky country. He observed that every restaurant in the Lucky country had a lucky number as its name. \nHe believes that having a lucky number as a restaurant name can indeed turn out to be very lucky.  \n\nOur chef believes that it is possible to make a lucky number having N digits even luckier. Any number following the rules below is called Lucky lucky number -  \n\n1. The number contains only digits 4 and 7. \n\n2. Count of digit 4 in the number should be divisible by 7. \n\n3. Count of digit 7 in the number should be divisible by 4. \n\nHelp our chef to compute the count of digit 4 in the smallest Lucky lucky number having N digits. \n\n-----Input-----\n\nFirst line contains T, number of test cases. Each of the next T lines contains a number N, the number of digits in the Lucky lucky number to be formed. \n\n1<=T<=1000 \n\n1<=N<=1000000000 (10^9) \n\n-----Output-----\n\nIf it is not possible to form a Lucky lucky number having N digits, output -1.\nOtherwise, output the count of digit 4 in the smallest Lucky lucky number having N digits.\n\n-----Example-----\nInput:\n5\n7\n4\n11\n1\n15\n\nOutput:\n7\n0\n7\n-1\n7\n\nExplanation\nFor the last test case, N = 15, the smallest lucky lucky number is\n444444477777777. The count of digit 4 is 7.\n\n Examples: \nInput: \n['5', '7', '4', '11', '1', '15', '', '']\nOutput: \n ['7', '0', '7', '-1', '7']\n",
  "1163": "Problem: \nWho's interested in football?\nRayne Wooney has been one of the top players for his football club for the last few years. But unfortunately, he got injured during a game a few months back and has been out of play ever since.\nHe's got proper treatment and is eager to go out and play for his team again. Before doing that, he has to prove to his fitness to the coach and manager of the team. Rayne has been playing practice matches for the past few days. He's played N practice matches in all.\nHe wants to convince the coach and the manager that he's improved over time and that his injury no longer affects his game. To increase his chances of getting back into the team, he's decided to show them stats of any 2 of his practice games. The coach and manager will look into the goals scored in both the games and see how much he's improved. If the number of goals scored in the 2nd game(the game which took place later) is greater than that in 1st, then he has a chance of getting in. Tell Rayne what is the maximum improvement in terms of goal difference that he can show to maximize his chances of getting into the team. If he hasn't improved over time, he's not fit to play. Scoring equal number of goals in 2 matches will not be considered an improvement. Also, he will be declared unfit if he doesn't have enough matches to show an improvement.\n\n-----Input:-----\nThe first line of the input contains a single integer T, the number of test cases.\nEach test case begins with a single integer N, the number of practice matches Rayne has played.\n\nThe next line contains N integers. The ith integer, gi, on this line represents the number of goals Rayne scored in his ith practice match. The matches are given in chronological order i.e. j > i means match number j took place after match number i.\n\n-----Output:-----\nFor each test case output a single line containing the maximum goal difference that Rayne can show to his coach and manager. If he's not fit yet, print \"UNFIT\".\n\n-----Constraints:-----\n1<=T<=10\n\n1<=N<=100000\n\n0<=gi<=1000000 (Well, Rayne's a legend! You can expect him to score so many goals!)\n\n-----Example:-----Input:\n\n3\n\n6\n\n3 7 1 4 2 4\n\n5\n\n5 4 3 2 1\n\n5\n\n4 3 2 2 3\n\nOutput:\n\n4\n\nUNFIT\n\n1\n\nExplanation:\n\nIn the first test case, Rayne can choose the first and second game. Thus he gets a difference of 7-3=4 goals. Any other pair would give him a lower improvement.\nIn the second test case, Rayne has not been improving in any match. Thus he's declared UNFIT.\nNote: Large input data. Use faster I/O methods. Prefer scanf,printf over cin/cout.\n\n Examples: \nInput: \n['3', '6', '3 7 1 4 2 4', '5', '5 4 3 2 1', '5', '4 3 2 2 3']\nOutput: \n ['4', 'UNFIT', '1']\n",
  "1164": "Problem: \nMandarin chinese\n, Russian and Vietnamese as well.\nChef is organising a contest with $P$ problems (numbered $1$ through $P$). Each problem has $S$ subtasks (numbered $1$ through $S$).\nThe difficulty of a problem can be calculated as follows:\n- Let's denote the score of the $k$-th subtask of this problem by $SC_k$ and the number of contestants who solved it by $NS_k$.\n- Consider the subtasks sorted in the order of increasing score.\n- Calculate the number $n$ of valid indices $k$ such that $NS_k > NS_{k + 1}$.\n- For problem $i$, the difficulty is a pair of integers $(n, i)$.\nYou should sort the problems in the increasing order of difficulty levels. Since difficulty level is a pair, problem $a$ is more difficult than problem $b$ if the number $n$ is greater for problem $a$ than for problem $b$, or if $a > b$ and $n$ is the same for problems $a$ and $b$.\n\n-----Input-----\n- The first line of the input contains two space-separated integers $P$ and $S$ denoting the number of problems and the number of subtasks in each problem.\n- $2P$ lines follow. For each valid $i$, the $2i-1$-th of these lines contains $S$ space-separated integers $SC_1, SC_2, \\dots, SC_S$ denoting the scores of the $i$-th problem's subtasks, and the $2i$-th of these lines contains $S$ space-separated integers $NS_1, NS_2, \\dots, NS_S$ denoting the number of contestants who solved the $i$-th problem's subtasks.\n\n-----Output-----\nPrint $P$ lines containing one integer each \u2014 the indices of the problems in the increasing order of difficulty.\n\n-----Constraints-----\n- $1 \\le P \\le 100,000$\n- $2 \\le S \\le 30$\n- $1 \\le SC_i \\le 100$ for each valid $i$\n- $1 \\le NS_i \\le 1,000$ for each valid $i$\n- in each problem, the scores of all subtasks are unique\n\n-----Subtasks-----\nSubtask #1 (25 points): $S = 2$\nSubtask #2 (75 points): original constraints\n\n-----Example Input-----\n3 3\n16 24 60\n498 861 589\n14 24 62\n72 557 819\n16 15 69\n435 779 232\n\n-----Example Output-----\n2\n1\n3\n\n Examples: \nInput: \n['3 3', '16 24 60', '498 861 589', '14 24 62', '72 557 819', '16 15 69', '435 779 232']\nOutput: \n ['2', '1', '3']\n",
  "1165": "Problem: \nChef will not be able to attend the birthday of his best friend Rock. He promised Rock that this will not be the case on his half birthday. To keep his promise Chef must know Rock\u2019s next half birthday accurately. Being busy, he is assigning this work to you.\nHalf birthday is the day that occurs exactly between two subsequent birthdays. \nYou will be provided with Rock\u2019s birthdate and birth month, you will have to figure out his half birthday.\n$Note$: Consider every year to be a leap year and all months are displayed in lowercase English characters.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. \n- The description of each of the $T$ test cases contains an integer $d$ followed by a string, denoting month $m$.\n- Here $d$ denotes day of a month and $m$ denotes the month of a year respectively.\n\n-----Output:-----\nFor each test case print an integer $d1$ followed by a string, denoting month $m1$, which overall denotes date and month of Rock\u2019s half birthday.\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq d , d1 \\leq 31$\n- $january \\leq m , m1 \\leq december$\n\n-----Sample Input:-----\n3\n15 january\n31 august\n10 october\n\n-----Sample Output:-----\n16 july\n1 march\n10 april\n\n Examples: \nInput: \n['3', '15 january', '31 august', '10 october']\nOutput: \n ['16 july', '1 march', '10 april']\n",
  "1166": "Problem: \nLittle Elephant is playing a game with arrays. He is given an array A0, A1, ..., AN\u22121 of N integers. And then Q queries are given, each containing an integer K. He has to tell how many subarrays satisfy the condition: the function foo returns K when it is applied to the subarray.\n\nIn this problem, a subarray is defined as a sequence of continuous elements Ai, Ai+1, ..., Aj  where 0 \u2264 i \u2264 j \u2264 N\u22121. The function foo, when applied to an array, returns the minimum of all the elements in the array.\n\nFor example, foo returns 5 when it is applied to the array [7, 5, 10, 7, 5, 8]. Please note that the subarrays Ai, Ai+1, ..., Aj and Ak, Ak+1, ..., Al are different if and only if i \u2260 k or j \u2260 l in this problem.\n\n-----Input-----\nThe first line of input contains N, denoting the size of the array. The next line contains N space separated integers A0, A1, ..., AN\u22121, denoting the array. Then the next line contains Q, denoting the number of queries. Each query consists of one integer per line, denoting K.\n\n-----Output-----\nFor each query, print the required number of subarrays.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 50\n- 1 \u2264 Ai \u2264 1000000 (106)\n- 1 \u2264 Q \u2264 10\n- 1 \u2264 K \u2264 1000000 (106)\n\n-----Example-----\nInput:\n5\n4 1 2 3 4\n4\n3\n4\n6\n1\n\nOutput:\n2\n2\n0\n8\n\n-----Explanation-----\nQuery 1. Only the two subarrays [3, 4] and [3] satisfy.\nQuery 2. Again only the two subarrays [4] and [4] satisfy. Please note that these subarrays (A0 and A4) are considered different.\nQuery 3. No subarray satisfies.\nQuery 4. The eight subarrays [4, 1], [4, 1, 2], [4, 1, 2, 3], [4, 1, 2, 3, 4], [1], [1, 2], [1, 2, 3] and [1, 2, 3, 4] satisfy.\n\n Examples: \nInput: \n['5', '4 1 2 3 4', '4', '3', '4', '6', '1', '', '']\nOutput: \n ['2', '2', '0', '8']\n",
  "1167": "Problem: \nTom  has finally taken over the business empire and now looking for \na new Name of the business to make a new start.\n\nJoe  (Tom's dear friend)  suggested a string $S$  consisting of\nUppercase and lowercase letters   \n\nTom wants to make some changes as per the following criteria:\n\n1) String should $not$ have any vowels .\n\n2) Every other uppercase consonant(other characters except vowels) should \nbe in lowercase\n\nFor ex:\n\nIf the consonant character is Z then it should be z\n\n3)  There should be  a character \".\" before each consonant.\n\nHelp Tom to make the required Changes.\n\n-----Input:-----\n- First line will contain string  $S$,This string only consists of uppercase and lowercase letters.\n\n-----Output:-----\nPrint the resulting string. It is guaranteed that this string is not empty.\n\n-----Constraints-----\n- Length of string is in [1 .. 100]\n\n-----Sample Input:-----\n$CodeSprInT$\n\n-----Sample Output:-----\n.c.d.s.p.r.n.t \n\n-----EXPLANATION:-----\nC is a consonant and it is in uppercase so turn it in lower case and add a \u201c.\u201d before it\no is a vowel so it is deleted\nd  is a consonant and in lowercase so just  add a \u201c.\u201d before it\ne  is a vowel so it is deleted\nS is a consonant and it is in uppercase so turn it in lower case and add a \u201c.\u201d before it\np is a consonant and in lowercase so just  add a \u201c.\u201d before it\nr is a consonant and in lowercase so just  add a \u201c.\u201d before it\nI is a vowel so it is deleted\nn is a consonant and in lowercase so just  add a \u201c.\u201d before it\nT is a consonant and it is in uppercase so turn it in lower case and add a \u201c.\u201d before it\n\n Examples: \nInput: \n['CodeSprInT']\nOutput: \n ['.c.d.s.p.r.n.t']\n",
  "1168": "Problem: \nAbhishek is fond of playing cricket very much. One morning, he is playing cricket with his friends. Abhishek  is a right-hand batsman\n\n.He has to face  all types of balls either good or  bad. There are total 26 balls in the game and each ball is represented\n\nby one of the following two ways:-\n1. \"g\" denotes a good ball.\n2. \"b\" denotes a bad  ball.\nAll 26 balls are represented by lower case letters (a,b,.....z).\nBalls faced by Abhishek are represented as a string s, all the characters of which are lower case  i.e, within  26 above mentioned balls.\nA substring s[l...r] (1\u2264l\u2264r\u2264|s|) of string s=s1s2...s|s| (where |s| is the length of string s) is string slsl+1...sr.\nThe substring s[l...r] is good, if among the letters slsl+1...sr, there are at most k bad ones (refer sample explanation ).\nYour task is to find out the number of distinct good substrings for the given string s. Two substrings s[x...y] and s[p...q] are considered distinct if their contents are different, i.e. s[x...y]\u2260s[p...q].\n\n-----Input Format-----\nFirst Line contains an integer T, number of test cases. For each test case, first line contains a string - a sequence of balls faced by Abhishek.\n\nAnd, next line contains a string of characters \"g\" and \"b\" of length 26 characters. If the ith character of this string equals \"1\", then the i-th English letter is good, otherwise it's bad. That is, the first character of this string corresponds to letter \"a\", the second one corresponds to letter \"b\" and so on.\n\nAnd, the third line of the test case consists of a single integer k (0\u2264k\u2264|s|) \u2014 the maximum acceptable number of bad characters in a good substring.\n\n-----Output Format -----\nFor each test case, print a single integer \u2014 the number of distinct good substrings of string s.\n\n-----Constraints-----\n- 1<=T<=1000\n- 1<=|s|<=2000\n- 0<=k<=|s|\n\n-----Subtasks-----\nSubtask 1 : 20 Points\n- 1<=T<=10\n- 1<=|s|<=20\n- 0<=k<=|s|\nSubtask 2 : 80 Points \nOriginal Constraints\nSample Input\n2\nababab\nbgbbbbbbbbbbbbbbbbbbbbbbbb\n1\nacbacbacaa\nbbbbbbbbbbbbbbbbbbbbbbbbbb\n2\nSample Output\n5\n8\n\nExplanation\nIn the first test case there are following good substrings: \"a\", \"ab\", \"b\", \"ba\", \"bab\".\n\nIn the second test case there are following good substrings: \"a\", \"aa\", \"ac\", \"b\", \"ba\", \"c\", \"ca\", \"cb\".\n\n Examples: \nInput: \n['2', 'ababab', 'bgbbbbbbbbbbbbbbbbbbbbbbbb', '1', 'acbacbacaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbb', '2']\nOutput: \n ['5', '8']\n",
  "1169": "Problem: \nThis is a simple game you must have played around with during your school days, calculating FLAMES of you and your crush! Given the names of two people, cancel out the common letters (repeated occurrence of a letter is treated separately, so 2A's in one name and one A in the other would cancel one A in each name), count the total number of remaining letters (n) and repeatedly cut the letter in the word FLAMES which hits at the nth number when we count from F in cyclic manner.\n\nFor example:\nNAME 1: SHILPA\nNAME 2: AAMIR\nAfter cutting the common letters: \nNAME 1: SHILPA \nNAME 2: AAMIR\nTotal number of letters left=7\nFLAMES, start counting from F : 1=F, 2=L, 3=A, 4=M, 5=E, 6=S,7=F...So cut F\nFLAMES: repeat this process with remaining letters of FLAMES for number 7 (start count from the letter after \nthe last letter cut) . In the end, one letter remains. Print the result corresponding to the last letter:\nF=FRIENDS\nL=LOVE\nA=ADORE\nM=MARRIAGE\nE=ENEMIES\nS=SISTER\n\n-----Input-----\nThe no. of test cases (<100)\ntwo names (may include spaces) for each test case.\n\n\n-----Output-----\nFLAMES result (Friends/Love/...etc) for each test case\n\n-----Example-----\nInput:\n2\nSHILPA\nAAMIR\nMATT\nDENISE\n\nOutput:\nENEMIES\nLOVE\n\n\n\nBy:\nChintan, Asad, Ashayam, Akanksha\n\n Examples: \nInput: \n['2', 'SHILPA', 'AAMIR', 'MATT', 'DENISE', '', '', '']\nOutput: \n ['ENEMIES', 'LOVE']\n",
  "1170": "Problem: \nIn order to establish dominance amongst his friends, Chef has decided that he will only walk in large steps of length exactly $K$ feet. However, this has presented many problems in Chef\u2019s life because there are certain distances that he cannot traverse. Eg. If his step length is $5$ feet, he cannot travel a distance of $12$ feet. Chef has a strict travel plan that he follows on most days, but now he is worried that some of those distances may become impossible to travel. Given $N$ distances, tell Chef which ones he cannot travel.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The first line of each test case will contain two space separated integers - $N$, the number of distances, and $K$, Chef\u2019s step length.\n- The second line of each test case will contain $N$ space separated integers, the $i^{th}$ of which represents $D_i$, the distance of the $i^{th}$ path.\n\n-----Output:-----\nFor each testcase, output a string consisting of $N$ characters. The $i^{th}$ character should be $1$ if the distance is traversable, and $0$ if not. \n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 1000$\n- $1 \\leq K \\leq 10^9$\n- $1 \\leq D_i \\leq 10^9$\n\n-----Subtasks-----\n- 100 points : No additional constraints.\n\n-----Sample Input:-----\n1\n5 3\n12 13 18 20 27216\n\n-----Sample Output:-----\n10101\n\n-----Explanation:-----\nThe first distance can be traversed in $4$ steps.\n\nThe second distance cannot be traversed.\n\nThe third distance can be traversed in $6$ steps.\n\nThe fourth distance cannot be traversed.\n\nThe fifth distance can be traversed in $9072$ steps.\n\n Examples: \nInput: \n['1', '5 3', '12 13 18 20 27216']\nOutput: \n ['10101']\n",
  "1172": "Problem: \nChef has the string s of length n consisted of digits 4 and 7.\nThe string s is called balanced\nif there exits such integer x (1 \u2264 x \u2264 n) that the number of digits 4 in substring s[1; x) is equal to the number of digits 7 in substring s(x; n],\nwhere s[1; x) is the substring from the 1st digit to (x-1)th digit of s, and s(x; n] is the substring from the (x+1)th digit to nth digit of s.\nFor example, s = 747474 is a balanced string, because s[1; 4) = 747 has one 4 and s(4; 6] = 74 has one 7.\nNote that x can be 1 or n and s[1; 1) and s(n; n] denote an empty string.\n\nIn one turn Chef can choose any pair of consecutive digits and swap them.\nFind for Chef the total number of different balanced string that can be obtained from string s using any (even 0) number of turns.\nPrint the result modulo 1000000007.\n\n-----Input-----\n\nThe first line of the input contains one integer T, the number of test cases.\nThen T lines follow, each of which contains string s for the corresponding test.\n\n-----Output-----\nT lines, each of which contains single integer - the answer for the corresponding test modulo 109+7.\n\n-----Constraints-----\n\n1 \u2264 T \u2264 10\n\n1 \u2264 n \u2264 5000\n\n-----Example-----\nInput:\n2\n47\n4477\n\nOutput:\n1\n4\n\n Examples: \nInput: \n['2', '47', '4477', '', '']\nOutput: \n ['1', '4']\n",
  "1173": "Problem: \nGuddu was participating in a programming contest. He only had one problem left when his mother called him for dinner. Guddu is well aware how angry his mother could get if he was late for dinner and he did not want to sleep on an empty stomach, so he had to leave that last problem to you. Can you solve it on his behalf?\nFor a given sequence of positive integers $A_1, A_2, \\ldots, A_N$, you are supposed to find the number of triples $(i, j, k)$ such that $1 \\le i < j \\le k \\le N$ and\nAi\u2295Ai+1\u2295\u2026\u2295Aj\u22121=Aj\u2295Aj+1\u2295\u2026\u2295Ak,Ai\u2295Ai+1\u2295\u2026\u2295Aj\u22121=Aj\u2295Aj+1\u2295\u2026\u2295Ak,A_i \\oplus A_{i+1} \\oplus \\ldots \\oplus A_{j-1} = A_j \\oplus A_{j+1} \\oplus \\ldots \\oplus A_k \\,,\nwhere $\\oplus$ denotes bitwise XOR.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of triples.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^6$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 100$\nSubtask #2 (30 points):\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 1,000$\nSubtask #3 (50 points): original constraints\n\n-----Example Input-----\n1\n3\n5 2 7\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: The triples are $(1, 3, 3)$, since $5 \\oplus 2 = 7$, and $(1, 2, 3)$, since $5 = 2 \\oplus 7$.\n\n Examples: \nInput: \n['1', '3', '5 2 7']\nOutput: \n ['2']\n",
  "1174": "Problem: \nChef has a sequence of N$N$ integers A1,A2,...,AN$A_1, A_2, ..., A_N$. \nChef thinks that a triplet of integers (i,j,k)$(i,j,k)$ is good if 1\u2264i<j<k\u2264N$1 \\leq i < j < k \\leq N$ and P$P$ in the following expression contains an odd number of ones in its binary representation:\nP=[Ai<<(\u230alog2(Aj)\u230b+\u230alog2(Ak)\u230b+2)]+[Aj<<(\u230alog2(Ak)\u230b+1)]+Ak$P = [ A_i<< (  \\lfloor \\log_2(A_j) \\rfloor + \\lfloor \\log_2(A_k) \\rfloor + 2 ) ] + [A_j << ( \\lfloor \\log_2(A_k) \\rfloor + 1) ] + A_k$\nThe <<$<<$ operator is called left shift, x<<y$x << y$  is defined as x\u22c52y$x \\cdot 2^y$.\nHelp the Chef finding the total number of good triplets modulo 109+7$10^9 + 7$.\n\n-----Input:-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains a single integer N$N$. \n- The second line of each test case contains N$N$ space-separated integers A1,A2,...,AN$A_1, A_2, ..., A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer, the number of good triplets modulo 109+7$10^9+7$.\n\n-----Constraints:-----\n- 1\u2264T\u2264103$1 \\leq T \\leq 10^3$\n- 1\u2264N\u2264105$1\\leq N \\leq 10^5$\n- 1\u2264Ai\u2264109$1 \\leq A_i \\leq 10^9$\n- The sum of N$N$ over all testcases is less than 106$10^6$\n\n-----Sample Input:-----\n1\n4\n1 1 2 3\n\n-----Sample Output:-----\n1\n\n Examples: \nInput: \n['1', '4', '1 1 2 3']\nOutput: \n ['1']\n",
  "1175": "Problem: \nOliver and Nova are true lovers. Inspite of knowing that Nova will die Oliver married her at the lake where they met. But they had a conflict about even and odd numbers. Nova likes the odd numbers and Oliver prefers even. One day they went to a fair where Oliver bought some square shaped marshmallows and Nova bought some round shaped. Then they decided to play a game. They will pick a natural number N . Nova will sum up the odd numbers from 1 to N and and she will notedown LCM of R(R is defined in the picture) and the sum she calculated before. And Oliver will sum up the even numbers from 1 to N and and he will notedown LCM of S(S is defined in the picture) and the sum he calculated before. You must use the ceil value of R and S.\n\nNow  whose LCM is strictly greater than the other will win.If both of their LCM is equal Nova will win because Oliver is afraid of Nova.\n$N.B.$ define the value of pi with $acos(-1)$.\n$N.B.$ Sum of all odd number and sum of all even number will not exceed 10^18. \n\n-----Input:-----\nThe first line contains an integer $T$  \u2014 the number of test cases in the input. Next, T test cases are given, one per line.\nEach test case is a positive integer $N$  . \n\n-----Output:-----\nPrint T answers to the test cases.\nIn each test cases,\nIf Oliver wins the game, print \"Nova's gonna kill me\" (without quotes) .\nIf Nova wins the game, print \"YESS(sunglass emo)\" (without quotes) .\n\n-----Constraints-----\n- $1 \\leq T \\leq 2000$\n- $1 \\leq N \\leq 1845271$\n\n-----Sample Input:-----\n1\n111\n\n-----Sample Output:-----\nYESS(sunglass emo)\n\n Examples: \nInput: \n['1', '111']\nOutput: \n ['YESS(sunglass emo)']\n",
  "1176": "Problem: \nThere are $5$ cities in the country.\nThe map of the country is given below.\nThe tour starts from the red city.\n\nEach road is associated with a character.\nInitially, there is an empty string.\nEvery time a road has been travelled the character associated gets appended to the string.\nAt the green city either the string can be printed or the tour can be continued.\nIn the problem, you are given a string tell whether it is possible to print the string while following the rules of the country?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains a single line of input, a string $ s  $. The string consists only of $0's$ and $1's$.\n\n-----Output:-----\nFor each testcase, output \"YES\" or \"NO\" depending on the input.\n\n-----Constraints-----\n- \n$1 \\leq T \\leq 10000$\n- \n$1 \\leq length of each string \\leq 10000$\n- \n$ 1 \\leq Summation length \\leq 10^5$\n\n-----Sample Input:-----\n1\n100\n\n-----Sample Output:-----\nNO\n\n-----EXPLANATION:-----\n\n Examples: \nInput: \n['1', '100']\nOutput: \n ['NO']\n",
  "1177": "Problem: \nChef has N subordinates. In order to complete a very important order he will choose exactly K of them. He can't choose less than K since it will be not enough to complete the order in time. On the other hand if he chooses more than K subordinates he can't control them during the operation. Help him to find the number of ways he can choose the team to complete this very important order.\n\n-----Input-----\nThe first line contains a single positive integer T <= 100, the number of test cases. T test cases follow. The only line of each test case contains two integers N and K, where 0 <= N, K < 2^64. It is guaranteed that the answer will be less than 2^64.\n\n-----Output-----\nFor each test case, output a single line containing the number of ways to choose the required team.\n\n-----Example-----\nInput:\n3\n2 1\n3 3\n10 5\n\nOutput:\n2\n1\n252\n\n Examples: \nInput: \n['3', '2 1', '3 3', '10 5']\nOutput: \n ['2', '1', '252']\n",
  "1178": "Problem: \nTonight, Chef would like to hold a party for his $N$ friends.\nAll friends are invited and they arrive at the party one by one in an arbitrary order. However, they have certain conditions \u2014 for each valid $i$, when the $i$-th friend arrives at the party and sees that at that point, strictly less than $A_i$ other people (excluding Chef) have joined the party, this friend leaves the party; otherwise, this friend joins the party.\nHelp Chef estimate how successful the party can be \u2014 find the maximum number of his friends who could join the party (for an optimal choice of the order of arrivals).\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum number of Chef's friends who could join the party.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n3\n2\n0 0\n6\n3 1 0 0 5 5\n3\n1 2 3\n\n-----Example Output-----\n2\n4\n0\n\n-----Explanation-----\nExample case 1: Chef has two friends. Both of them do not require anyone else to be at the party before they join, so they will both definitely join the party.\nExample case 2: At the beginning, friends $3$ and $4$ can arrive and join the party, since they do not require anyone else to be at the party before they join. After that, friend $2$ can arrive; this friend would see that there are two people at the party and therefore also join. Then, friend $1$ will also join, so in the end, there would be $4$ people attending the party.\nExample case 3: No one will attend the party because each of Chef's friends will find zero people at the party and leave, regardless of the order in which they arrive.\n\n Examples: \nInput: \n['3', '2', '0 0', '6', '3 1 0 0 5 5', '3', '1 2 3']\nOutput: \n ['2', '4', '0']\n",
  "1179": "Problem: \nYou are given a positive integer $N$. Consider the sequence $S = (1, 2, \\ldots, N)$. You should choose two elements of this sequence and swap them.\nA swap is nice if there is an integer $M$ ($1 \\le M < N$) such that the sum of the first $M$ elements of the resulting sequence is equal to the sum of its last $N-M$ elements. Find the number of nice swaps.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of nice swaps.\n\n-----Constraints-----\n- $1 \\le T \\le 10^6$\n- $1 \\le N \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- $T \\le 10$\n- $N \\le 10^3$\nSubtask #2 (30 points):\n- $T \\le 10$\n- $N \\le 10^6$\nSubtask #3 (60 points): original constraints\n\n-----Example Input-----\n5\n1\n2\n3\n4\n7\n\n-----Example Output-----\n0\n0\n2\n2\n3\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '7']\nOutput: \n ['0', '0', '2', '2', '3']\n",
  "1180": "Problem: \nYou are playing a Billiards-like game on an $N \\times N$ table, which has its four corners at the points $\\{(0, 0), (0, N), (N, 0),$ and $(N, N)\\}$. You start from a coordinate $(x,y)$,  $(0 < x < N, 0 <  y < N)$ and shoot the ball at an angle $45^{\\circ}$ with the horizontal. On hitting the sides, the ball continues to move with the same velocity and ensuring that the angle of incidence is equal to the angle of reflection with the normal, i.e, it is reflected with zero frictional loss. On hitting either of the four corners, the ball stops there and doesn\u2019t move any further. \nFind the coordinates of the point of collision, when the ball hits the sides for the $K^{th}$ time. If the ball stops before hitting the sides $K$ times, find the coordinates of the corner point where the ball stopped instead.\n\n-----Input:-----\n- The first line of the input contains an integer $T$, the number of testcases.\n- Each testcase contains a single line of input, which has four space separated integers - $N$, $K$, $x$, $y$, denoting the size of the board, the number of collisions to report the answer for, and the starting coordinates.\n\n-----Output:-----\nFor each testcase, print the coordinates of the ball when it hits the sides for the $K^{th}$ time, or the coordinates of the corner point if it stopped earlier.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $2 \\leq N \\leq 10^9$\n- $1 \\leq K \\leq 10^9$\n\n-----Subtasks-----\n- $30$ points :  Sum of $K$ over all test cases $\\le 10^7$\n- $70$ points : Original constraints.\n\n-----Sample Input:-----\n2\n5 5 4 4\n5 2 3 1\n\n-----Sample Output:-----\n5 5\n3 5\n\n-----Explanation:-----\n- Sample Case $1$ : \nWe are given a $5$ by $5$ board. We shoot the ball from coordinates $(4,4)$, and we need to find its coordinates after it has collided with sides $5$ times. However, after shooting, the ball goes directly to the corner $(5,5)$, and stops there. So we report the coordinates $(5,5)$.\n\n- Sample Case $2$ : \nWe are given a $5$ by $5$ board. We shoot the ball from the coordinates $(3,1)$, and we need to find its coordinates after it has collided with the sides twice. After shooting, it first hits the right side at $(5,3)$, and then the top side at $(3,5)$. So, we report $(3,5)$.\n\n Examples: \nInput: \n['2', '5 5 4 4', '5 2 3 1']\nOutput: \n ['5 5', '3 5']\n",
  "1181": "Problem: \nChef has a natural number N. Cheffina challenges chef to check whether the given number is divisible by the sum of its digits or not. If the given number is divisible then print \"Yes\" else \"No\".\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n16\n27\n\n-----Sample Output:-----\nNo\nYes\n\n Examples: \nInput: \n['2', '16', '27']\nOutput: \n ['No', 'Yes']\n",
  "1182": "Problem: \nGorodetskiy is a university student. He is really good at math and really likes solving engaging math problems. In the last exam, his professor gave him really hard math problems to solve, but Gorodetskiy could not solve them and failed the exam, so the professor told him: \"These problems are a piece of cake, you should know them from school!\" Here is one of the problems from the exam - you can decide if it really was an easy problem or not.\nYou are given a positive integer $M$. Let's call a positive integer $A$ an interesting number if there is at least one integer $B$ ($A \\le B$) such that $A \\cdot B$ is divisible by $M$ and $\\frac{A \\cdot B}{M} = A+B$.\nFind all interesting numbers. Let's denote the number of such integers by $K$; it is guaranteed that $K \\le 3*10^5$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $M$.\n\n-----Output-----\nFor each test case:\n- First, print a line containing a single integer $K$.\n- Then, print $K$ lines. For each valid $i$, the $i$-th of these lines should contain a single integer \u2015 the $i$-th interesting number in increasing order.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le M \\le 10^{14}$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le M \\le 100$\nSubtask #2 (20 points): $1 \\le M \\le 10^7$\nSubtask #3 (60 points): original constraints\n\n-----Example Input-----\n2\n3\n6\n\n-----Example Output-----\n2\n4\n6\n5\n7\n8\n9\n10\n12\n\n-----Explanation-----\nExample case 1: There are two interesting numbers, $4$ and $6$. For $A = 4$, we can choose $B = 12$ and for $A = 6$, we can choose $B = 6$.\n\n Examples: \nInput: \n['2', '3', '6']\nOutput: \n ['2', '4', '6', '5', '7', '8', '9', '10', '12']\n",
  "1183": "Problem: \nProblem description.\n\nThis problem is simple and will introduce you to the Dynamic Programming.\n\nYou will be given an array and a key value.\n\nYou will have to find out the occurrences of the key value depending upon the query using Brute Force and Top Down Dynamic Programming.\n\n-----Brute-Force: -----\nYou will check the query, and calculate the occurrences.\n\n\n-----DP: -----\n\nYou will check the query; check whether the memoized solution is already available.\n\nIf the memoized solution is available, no need to calculate the number of occurrences again.\n\nIf the memoized solution is not available, then calculate the number of  occurrences and memoize it for future use.\n\n-----Pseudo Code for DP:-----\ncountOccurences(key,from):\n\nif (from = size of array) then \n\treturn 0\nendif\nif dp[from] is availabe then \n\treturn dp[from]\nendif\nif( array[from] == key) then\n\tdp[from] = 1+countOccurences(key,from+1)\nelse\n\tdp[from] = countOccurences(key,from+1)\nendif\t\nreturn dp[from]\n\n\n-----Input:-----\n\nThe first line of input is the number of test cases (t).\n\nThe first line of each test case is the number of array elements (n).\n\nThe next will contain n space separated integers.\n\nThe next line will have the key element (k).\n\nThe next will have number of queries (q).\n\nThe next q lines will contain an integer A such that 0<=A < n. \n\nYou have to find out the number of occurrences from a to end of the array using both brute force and DP. \n\nEverything will fit into the range of int.\n\n-----Output:-----\n\nFor each test case, the output will have q lines with 3 space separated integers.\nThe first will be the number of occurrences, other will be the loop count/function calls,\nusing brute force and the last will be the number of loop count/function calls using DP.\n\n-----Sample Input:-----\n1\n10\n1 2 3 1 2 3 1 2 3 1\n3\n5\n2\n4\n6\n8\n2\n\n-----Sample output:-----\n3 8 9\n2 6 1\n1 4 1\n1 2 1\n3 8 1\n\n-----Explanation:-----\n\nFor the first query, we have to find the number of occurrences of 3 from index 2.\n\nUsing the brute force, the loop will check each element from index 2 to 9. Thus the loop count is 8.\n\nUsing DP, the method countOccurences(key,from) will be called like this : \n\ncountOccurences(3,2)->countOccurences(3,3)->countOccurences(3,4)->countOccurences(3,5)\n->countOccurences(3,6)->countOccurences(3,7)->countOccurences(3,8)\n->countOccurences(3,9)->countOccurences(3,10).\n\n\nWhen the countOccurences(3,10) is called, it will return 0. Total 9 function calls.\n\nFor the second query, the brute force will do the same as above.\n\nBut the DP will check whether solution for countOccurences(3,4) is available or not.\n\nAs it was calculated while solving the first query, it won\u2019t solve it again and will directly give the answer. \n\nTotal 1 function calls.\n\n Examples: \nInput: \n['1', '10', '1 2 3 1 2 3 1 2 3 1', '3', '5', '2', '4', '6', '8', '2', '']\nOutput: \n ['3 8 9', '2 6 1', '1 4 1', '1 2 1', '3 8 1']\n",
  "1184": "Problem: \nChef's friend Alex runs a movie theatre. Due to the increasing number of platforms for watching movies online, his business is not running well. As a friend, Alex asked Chef to help him maximise his profits. Since Chef is a busy person, he needs your help to support his friend Alex.  \nAlex's theatre has four showtimes: 12 PM, 3 PM, 6 PM and 9 PM. He has four movies which he would like to play \u2015 let's call them A, B, C and D. Each of these movies must be played exactly once and all four must be played at different showtimes. For each showtime, the price of a ticket must be one of the following: Rs 25, Rs 50, Rs 75 or Rs 100. The prices of tickets for different showtimes must also be different.\nThrough his app, Alex receives various requests from his customers. Each request has the form \"I want to watch this movie at this showtime\". Let's assume that the number of people who come to watch a movie at a given showtime is the same as the number of requests for that movie at that showtime.\nIt is not necessary to accommodate everyone's requests \u2015 Alex just wants to earn the maximum amount of money. There is no restriction on the capacity of the theatre. However, for each movie that is not watched by anyone, Alex would suffer a loss of Rs 100 (deducted from the profit).\nYou are given $N$ requests Alex received during one day. Find the maximum amount of money he can earn on that day by choosing when to play which movies and with which prices. \n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. Each of these lines contains a character $m$, followed by a space and an integer $t$, describing a request to see the movie $m$ at the showtime $t$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum profit Alex can earn (possibly negative).\nFinally, print a line containing one integer \u2015 the total profit over all test cases, i.e. over $T$ days.\n\n-----Constraints-----\n- $1 \\le T \\le 150$\n- $0 \\le N \\le 100$\n- $m$ is 'A', 'B', 'C' or 'D'\n- $t$ is $12$, $3$, $6$ or $9$\n\n-----Subtasks-----\nSubtask #1 (30 points): it is possible to fulfill all requests\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n5\n12\nA 3\nB 12\nC 6\nA 9\nB 12\nC 12\nD 3\nB 9\nD 3\nB 12\nB 9\nC 6\n7\nA 9\nA 9\nB 6\nC 3\nD 12\nA 9\nB 6\n2\nA 9\nB 6\n1\nD 12\n0 \n\n-----Example Output-----\n575\n525\n-25 \n-200 \n-400\n475\n\n-----Explanation-----\nExample case 1: The following table shows the number of people that want to watch the movies at the given showtimes:  12  3  6  9   A   0  1  0 1  B   3  0  0  2   C   1  0  2  0   D   0  2  0  0 \nThe maximum number of requests was sent for movie B at 12 PM. Therefore, we play this movie at this time and the tickets cost Rs 100. Next, we play movie D at 3 PM with ticket price Rs 75 and movie C at 6 PM with ticket price Rs 50. Finally, we have a slot for 9 PM and the only movie we can play at that time now is movie A, with ticket price Rs 25. The total profit is $3 \\cdot 100 + 2 \\cdot 75 + 2 \\cdot 50 + 1 \\cdot 25 = 300 + 150 + 100 + 25 = 575$. Since each movie was watched by at least one person, there is no additional loss.\nExample case 2: Just like above, we show the requests in a table:  12  3  6  9   A   0  0  0 3  B   0  0  2  0   C   0  1  0  0   D   1  0  0  0 \nThe optimal solution is to play movie A at 9 PM, movie B at 6 PM, movie C at 3 PM and movie D at 12 PM, with decreasing ticket prices in this order. The profit is $3 \\cdot 100 + 2 \\cdot 75 + 1 \\cdot 50 + 1 \\cdot 25 = 300+150+50+25 = 525$.\nExample case 3: Again, we show the requests in a table:  12  3  6  9   A   0  0  0 1  B   0  0  1  0   C   0  0  0  0   D   0  0  0  0 \nThe optimal solution is to play movie A at 9 PM with ticket price Rs 100, movie B at 6 PM with ticket price Rs 75 and the remaining two movies in any order at 12 PM and 3 PM \u2015 either way, there will be nobody watching them. We earn $1 \\cdot 100 + 1 \\cdot 75 = 175$, but we have to deduct Rs 200, so the resulting profit is $175 - 200 = -25$.\nExample case 4: The optimal solution is to play movie D at 12 PM; the other three movies go unattended. We have to deduct Rs 300, so the profit is $1 \\cdot 100 - 300 = -200$.\nExample case 5: Since there are no requests for any movie at any time, all movies go unattended and Alex just suffers a loss of Rs 400.\nThe total profit for all 5 days is $575+525-25-200-400 = 475$.\n\n Examples: \nInput: \n['5', '12', 'A 3', 'B 12', 'C 6', 'A 9', 'B 12', 'C 12', 'D 3', 'B 9', 'D 3', 'B 12', 'B 9', 'C 6', '7', 'A 9', 'A 9', 'B 6', 'C 3', 'D 12', 'A 9', 'B 6', '2', 'A 9', 'B 6', '1', 'D 12', '0']\nOutput: \n ['575', '525', '-25', '-200', '-400', '475']\n",
  "1185": "Problem: \nTaru likes reading. Every month he gets a copy of the magazine \"BIT\". The magazine contains information about the latest advancements in technology.  Taru \n\nreads the book at night and writes the page number to which he has read on a piece of paper so that he can continue from there the next day. But sometimes \n\nthe page number is not printed or is so dull that it is unreadable.  To make matters worse Taru's brother who is really naughty tears of some of the pages of \n\nthe Magazine and throws them in the dustbin. He remembers the number of leaves he had torn but he does not remember which page numbers got removed. When Taru \n\nfinds this out he is furious and wants to beat him up. His brother apologizes, and says he won't ever do this again. But Taru did not want to be easy on him \n\nand he says \"I will leave you only if you help me find the answer to this. I will tell you how many pages (Printed sides) were there in the Magazine plus the \n\npages on which the page numbers were not printed. You already know the number of leaves you tore (T). Can you tell me the expected sum of the page numbers \n\nleft in the Magazine?\" Taru's brother replied \"huh!! This is a coding problem\". Please help Taru's brother.\n\nNote: The magazine is like a standard book with all odd page numbers in front and the successive even page number on its back. If the book contains 6 pages, \n\nPage number 1 and Page number 2 are front and back respectively. Tearing a leaf removes both the front and back page numbers.\n\n\n-----Input-----\nThe first line contains the number of test cases t. 3t lines follow. The first line of each test case contains the number of pages (printed sides) in the \n\nbook. The second line's first integer is F, F integers follow which tell us the numbers of the page numbers not printed. The third line contains a single integer telling us the number of leaves Taru's brother tore.\n\n-----Output-----\nOutput one real number correct up to 4 decimal digits which is equal to the expected sum of the page numbers left in the book.\n\n-----Constraints-----\n\nNumber of printed Sides<=2000. All other values abide by the number of printed sides.\n\n-----Example-----\nInput:\n2\n10\n2 1 2\n2\n10\n1 8\n0\n\nOutput:\n31.2000\n47.0000\n\n Examples: \nInput: \n['2', '10', '2 1 2', '2', '10', '1 8', '0']\nOutput: \n ['31.2000', '47.0000']\n",
  "1186": "Problem: \nBhallaladeva was an evil king who ruled the kingdom of Maahishmati. He wanted to erect a 100ft golden statue of himself and he looted gold from several places for this. He even looted his own people, by using the following unfair strategy:\nThere are N houses in Maahishmati, and the ith house has Ai gold plates. Each gold plate costs exactly 1 Nimbda, which is the unit of currency in the kingdom of Maahishmati. Bhallaladeva would choose an integer K, and loots all the houses in several steps. In each step:\n\n- He would choose a house i which hasn't been looted yet, pay the owner exactly Ai Nimbdas, and take away all the gold plates in that house (Hence, he also ends up looting this house).\n- He would now choose atmost K houses which haven't been looted yet and take away all the gold plates from these houses without paying a single Nimbda (Yes, he takes all of them for free).\n\nHe repeats the above steps until all the N houses have been looted. Your task is to devise a strategy for Bhallaladeva to loot the houses in some order, so that the number of nimbdas he has to pay is minimium. You'll also be given multiple values of K (Q of them to be precise), and you need to find the minimum number of nimbdas for each of these values.\n\n-----Input-----\nThe first line of input consists of a single integer N denoting the number of houses in Maahishmati. The second line of input consists of N space separated integers denoting A1, A2, ..., AN, where Ai denotes the number of gold plates in the ith house. The third line of input consists of a single integer Q denoting the number of values of K to follow. Each of the following Q lines consist of a single integer, where the value on the ith line denotes the value of K for the ith query.\n\n-----Output-----\nOutput exactly Q integers on separate lines, where the output on the ith line denotes the answer for the ith value of K.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 Q \u2264 105\n- 0 \u2264 K \u2264 N-1\n- 1 \u2264 Ai \u2264 104\n\n-----Example-----\nInput:\n4\n3 2 1 4\n2\n0\n2\n\nOutput:\n10\n3\n\n-----Explanation-----\nFor the first query, K = 0. Hence, Bhallaladeva cannot take gold plates from any of the houses for free. It will cost him 3 + 2 + 1 + 4 = 10 nimbdas.\nFor the second query, K = 2. In the first step Bhallaladeva can pay 2 nimbdas for gold plates in house number 2, and take the gold in houses 1 and 4 for free (Note that house 1 has 3 gold plates and house 4 has 4 gold plates). Now, he has looted houses 1, 2 & 4. Now in the second step, he loots house 3, by paying 1 nimbda. Hence, the total cost = 1 + 2 = 3. Note that there might be multiple ways to achieve the minimum cost, and we have explained only one of them.\n\n Examples: \nInput: \n['4', '3 2 1 4', '2', '0', '2']\nOutput: \n ['10', '3']\n",
  "1187": "Problem: \nChef wants to select a subset $S$ of the set $\\{1, 2, \\ldots, N\\}$ such that there are no two integers $x, y \\in S$ which satisfy $\\frac{x}{y} = M$.\nHelp Chef find the maximum size of a subset $S$ he can choose and the number of ways in which he can choose a subset $S$ with this maximum size. Since the number of ways to choose $S$ can be very large, calculate it modulo $998,244,353$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $M$.\n\n-----Output-----\nFor each test case, print a single line containing two space-separated integers \u2015 the maximum size of a subset Chef can choose and the number of ways to choose a subset with this maximum size modulo $998,244,353$. Note that only the number of ways to choose a subset should be printed modulo $998,244,353$.\n\n-----Constraints-----\n- $1 \\le T \\le 10,000$\n- $2 \\le M \\le N \\le 10^{18}$\n\n-----Example Input-----\n3\n5 2\n10 2\n100 3\n\n-----Example Output-----\n4 1\n6 12\n76 49152\n\n-----Explanation-----\nExample case 1: The only subset $S$ with the maximum size which Chef can choose is $\\{1, 3, 4, 5\\}$.\n\n Examples: \nInput: \n['3', '5 2', '10 2', '100 3']\nOutput: \n ['4 1', '6 12', '76 49152']\n",
  "1188": "Problem: \nChef is a private detective. He was asked to investigate a case of murder in the city of Frangton.\nChef arrived in Frangton to find out that the mafia was involved in the case. Chef spent some time watching for people that belong to the clan and was able to build a map of relationships between them. He knows that a mafia's organizational structure consists of a single Don, heading a hierarchical criminal organization. Each member reports exactly to one other member of the clan. It's obvious that there are no cycles in the reporting system of the mafia.\nThere are N people in the clan, for simplicity indexed from 1 to N, and Chef knows who each of them report to. Member i reports to member Ri.\nNow, Chef needs to identfy all potential killers to continue his investigation. Having considerable knowledge about the mafia's activities, Chef knows that the killer must be a minor criminal, that is, one of the members who nobody reports to. Please find the list of potential killers for Chef. Since Don reports to nobody, his Ri will be equal to 0.\n\n-----Input-----\nThe first line of input contains one integer N.\nNext line has N space-separated integers, the ith integer denotes Ri \u2014 the person whom the ith member reports to.\n\n-----Output-----\nOutput a list of space-separated integers in ascending order \u2014 the indices of potential killers.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 Ri \u2264 N except for Don, whose Ri equals to 0.\n- It is guaranteed that there are no cycles in the reporting structure.\n\n-----Subtasks-----\n- Subtask #1 [50 points]: N \u2264 10000\n- Subtask #2 [50 points]: No additional constraints\n\n-----Example-----\nInput:\n6\n0 1 1 2 2 3\n\nOutput:\n4 5 6\n\n-----Explanation-----\nThe reporting structure:\n\n Examples: \nInput: \n['6', '0 1 1 2 2 3']\nOutput: \n ['4 5 6']\n",
  "1189": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. For each $k$ ($1 \\le k \\le N$), let's define a function $f(k)$ in the following way:\n- Consider a sequence $B_1, B_2, \\ldots, B_N$, which is created by setting $A_k = 0$. Formally, $B_k = 0$ and $B_i = A_i$ for each valid $i \\neq k$.\n- $f(k)$ is the number of ways to split the sequence $B$ into two non-empty contiguous subsequences with equal sums.\nFind the sum $S = f(1) + f(2) + \\ldots + f(N)$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the sum $S$.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 2 \\cdot 10^5$\n- $1 \\le |A_i| \\le 10^9$ for each valid $i$\n\n-----Example Input-----\n2\n6\n1 2 1 1 3 1\n3\n4 1 4\n\n-----Example Output-----\n6\n2\n\n Examples: \nInput: \n['2', '6', '1 2 1 1 3 1', '3', '4 1 4']\nOutput: \n ['6', '2']\n",
  "1190": "Problem: \nTomya is a girl. She loves Chef Ciel very much.\n\nTomya like a positive integer p, and now she wants to get a receipt of Ciel's restaurant whose total price is exactly p.\nThe current menus of Ciel's restaurant are shown the following table.\nName of Menupriceeel flavored water1deep-fried eel bones2clear soup made with eel livers4grilled eel livers served with grated radish8savory egg custard with eel16eel fried rice (S)32eel fried rice (L)64grilled eel wrapped in cooked egg128eel curry rice256grilled eel over rice512deluxe grilled eel over rice1024eel full-course2048\n\nNote that the i-th menu has the price 2i-1 (1 \u2264 i \u2264 12).\n\nSince Tomya is a pretty girl, she cannot eat a lot.\nSo please find the minimum number of menus whose total price is exactly p.\nNote that if she orders the same menu twice, then it is considered as two menus are ordered. (See Explanations for details)\n\n-----Input-----\n\nThe first line contains an integer T, the number of test cases.\nThen T test cases follow.\nEach test case contains an integer p.\n\n-----Output-----\n\nFor each test case, print the minimum number of menus whose total price is exactly p.\n\n-----Constraints-----\n\n1 \u2264 T \u2264 5\n\n1 \u2264 p \u2264 100000 (105)\n\nThere exists combinations of menus whose total price is exactly p.\n\n-----Sample Input-----\n4\n10\n256\n255\n4096\n\n-----Sample Output-----\n2\n1\n8\n2\n\n-----Explanations-----\n\nIn the first sample, examples of the menus whose total price is 10 are the following:\n\n1+1+1+1+1+1+1+1+1+1 = 10 (10 menus)\n\n1+1+1+1+1+1+1+1+2 = 10 (9 menus)\n\n2+2+2+2+2 = 10 (5 menus)\n\n2+4+4 = 10 (3 menus)\n\n2+8 = 10 (2 menus)\n\nHere the minimum number of menus is 2.\n\nIn the last sample, the optimal way is 2048+2048=4096 (2 menus).\nNote that there is no menu whose price is 4096.\n\n Examples: \nInput: \n['4', '10', '256', '255', '4096']\nOutput: \n ['2', '1', '8', '2']\n",
  "1191": "Problem: \nSandy is a professor at a very reputed institute. The institute mandates that all the lectures be communicated in English. As Sandy is not very good at English(or anything actually) the presentations he displays in class have a lot of spelling mistakes in them.\nAs you have a dictionary on you containing $N$ words in it, the responsibility of correctly deducing the misspelt word falls upon your shoulders. Sandy's presentation contains in them, $Q$ words which you $think$ are wrongly spelt. A word is misspelt if a $single$ letter in it is missing or is different from the corresponding correctly spelled word in your dictionary.\nFor each of the misspelt word in the presentation find out the corresponding correct word from your dictionary.\nNote : \n- For each misspelt word in Sandy's presentation, there exists one and only one correctly spelt word in your dictionary that corresponds to it. \n- Out of the $Q$ misspelt words given to you, there might be some which are correctly spelt i.e., that word completely matches a word in your dictionary. (Give Sandy some credit, he's a teacher after all). For such words print the word corresponding to it in your dictionary.\n- The maximum length of each string can be $L$.\n\n-----Input:-----\n- First line contains a single integer $T$ denoting the number of testcases. Then the testcases follow. \n- The first line of each test case contains two space-separated integers $N, Q$ corresponding to the number of words in your dictionary and the number of misspelt word in Sandy's dictionary respectively.\n- $N$ lines follow each containing a single string $S$ denoting a word in your dictionary.\n- $Q$ lines follow each containing a single string $M$ denoting a misspelt word in Sandy's presentation.\n\n-----Output:-----\nIn each testcase, for each of the $Q$ misspelt words, print a single word $S$ corresponding to the correctly spelt word in your dictionary.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 200$\n- $1 \\leq Q \\leq 200$\n- $1 \\leq L \\leq 100$\n- None of the words contain any spaces in them.\n- Each letter in every word is in lower case.\n\n-----Subtasks-----\n- \nSubtask 1 : 10 points\n- $1 \\leq N \\leq 50$\n- $1 \\leq Q \\leq 10$\n- \nSubtask 2 : 90 points\n- Original Constraints\n\n-----Sample Input:-----\n1\n5 2\nszhbdvrngk\nqzhxibnuec\njfsalpwfkospl\nlevjehdkjy\nwdfhzgatuh\nszhbdvcngk\nqzhxbnuec\n\n-----Sample Output:-----\nszhbdvrngk\nqzhxibnuec\n\n-----EXPLANATION:-----\n- In the first misspelt word $szhbdvcngk$, a single letter $c$ is different from the original word $szhbdvrngk$.\n- The second misspelt word $qzhxbnuec$ is missing the letter $i$ that  was in the original word $qzhxibnuec$.\n\n Examples: \nInput: \n['1', '5 2', 'szhbdvrngk', 'qzhxibnuec', 'jfsalpwfkospl', 'levjehdkjy', 'wdfhzgatuh', 'szhbdvcngk', 'qzhxbnuec']\nOutput: \n ['szhbdvrngk', 'qzhxibnuec']\n",
  "1194": "Problem: \nToby has found a game to entertain himself.The game is like this:\n\nYou are in a coordinate system initially at (0,0) and you are given a sequence of steps which lead to your destination.The steps are given in the form of directions: \u2019U\u2019 ,\u2019D\u2019 , \u2019L\u2019 and \u2018R\u2019 for up, down, left and right respectively.If you are at position (x,y) then:\n- U:move to (x,y+1)\n- D:move to (x,y-1)\n- L:move to (x-1,y)\n- R:move to (x+1,y)\nThe sequence is provided as a string \u2018s\u2019 of characters where $s_i$ $(1 \\leq i \\leq N)$ is one of the direction character as mentioned above.An example of a sequence of steps is:   UULRUDR\n\nThe destination according to this string is (1,2).\n\nYou want to remove maximum number of characters from the string such that the resulting string leads to the same destination as before.\nFor example in the example above we can remove characters at positions 1,3,4,6 and the resulting path will be UUR which will lead to the same destination i.e (1,2).so we reduced the number of steps by 4,and this is our score.\nYou need to get maximum score.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains a single integer $N$,size of string. \n- Second line of testcase contains a string $s$ of size $N$.\n\n-----Output:-----\nFor each testcase, output a single line containing the maximum score possible.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n\n7\n\nULUDLLU\n\n4\n\nRUUR\n\n4\n\nLRLR   \n\n-----Sample Output:-----\n2\n\n0\n\n4    \n\n-----EXPLANATION:-----\n- \ntest case 1:\nThe final destination after moving according to the sequence is (-3,2).\n\nOne way is to remove characters at positions 3,4 and the resulting string will be ULLLU and destination still remains (-3,2).\n- \ntest case 2: No character can be removed in this case.\n\n Examples: \nInput: \n['3', '7', 'ULUDLLU', '4', 'RUUR', '4', 'LRLR']\nOutput: \n ['2', '0', '4']\n",
  "1195": "Problem: \nChefland has all the cities on a straight line. There are $N$ cities in Chefland numbered $1$ to $N$. City $i$ is located at coordinate $x_i$ on the x-axis. Guru wants to travel from city $A$ to city $B$. He starts at time t=0. He has following choices to travel.\n- He can walk $1$ metre in $P$ secs.\n- There is a train that travels from city $C$ to city $D$ which travels $1$ metre in $Q$ secs which starts at time t=$Y$ secs. Guru can take the train only at city $C$ and leave the train only at city $D$.\nCan you help Guru find the minimum time he will need to travel from city $A$ to $B$. Note that you cannot board the train after time t =$Y$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains eight space separated integers $N, A, B, C, D, P, Q, Y $. \n- Second line of each testcase contains $N$ space-separated integers with the $i$-th integer representing $x_i$.\n\n-----Output:-----\nFor each testcase, output in a single line containing the minimum travel time.\n\n-----Constraints-----\n- $1 \\leq T \\leq 300$\n- $2 \\leq N \\leq 300$\n- $-1000 \\leq x_i \\leq 1000$\n- $0 \\leq Y \\leq 100000$\n- $1 \\leq A,B,C,D \\leq n $\n- $A \\neq B$\n- $C \\neq D$\n- $1 \\leq P, Q \\leq 100$\n- $x_i < x_j$  if $i < j$\n\n-----Sample Input:-----\n1\n4 1 3 2 4 3 2 4\n1 2 3 4\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nGuru can walk directly in 6 secs.\nIf Guru takes train, then he will need  atleast 11 secs.\n\n Examples: \nInput: \n['1', '4 1 3 2 4 3 2 4', '1 2 3 4']\nOutput: \n ['6']\n",
  "1196": "Problem: \nEvery college has a stud\u2212max$stud-max$ buoy. JGEC$JGEC$ has its own Atul$Atul$ who loves to impress everyone with his smile. A presentation is going on at the auditorium where there are N$N$ rows of M$M$ chairs with people sitting on it. Everyone votes for Atul's presentation skills, but Atul is interested in knowing the maximum$maximum$ amount of vote that he receives either taking K$K$ people vertically$vertically$ or horizontally$horizontally$. Atul$Atul$, however, wants to finish up the presentation party soon, hence asks for your help so that he can wrap up things faster.  \n\n-----Input:-----\n- First line will contain T$T$, number of test cases. Then the test cases follow. \n- Each testcase contains of a single line of input, three integers N$N$, M$M$ and K$K$.  \n- N lines follow, where every line contains M numbers$numbers$ denoting the size of the sugar cube\n\n-----Output:-----\nFor each test case, output in a single line the maximum votes Atul can get. \n\n-----Constraints-----\n- 1\u2264T\u2264$1 \\leq T \\leq $5\n- 1\u2264N,M\u2264500$1 \\leq N,M \\leq 500$\n- K\u2264min(N,M)$K \\leq min(N,M)$ \n- 1\u2264numbers\u2264109$1 \\leq numbers \\leq 10^9$\n\n-----Sample Input:-----\n1\n4 4 3 \n1 4 5 7 \n2 3 8 6\n1 4 8 9 \n5 1 5 6 \n\n-----Sample Output:-----\n22\n\n-----EXPLANATION:-----\nIf Atul starts counting votes from (1,4), then he can take the 3 consecutive elements vertically downwards and those are 7,6 and 9 which is the maximum sum possible.\n\n Examples: \nInput: \n['1', '4 4 3', '1 4 5 7', '2 3 8 6', '1 4 8 9', '5 1 5 6']\nOutput: \n ['22']\n",
  "1198": "Problem: \nChef recently took a course in linear algebra and learned about linear combinations of vectors. Therefore, in order to test his intelligence, Raj gave him a \"fuzzy\" problem to solve.\nA sequence of integers $B_1, B_2, \\ldots, B_M$ generates an integer $K$ if it is possible to find a sequence of integers $C_1, C_2, \\ldots, C_M$ such that $C_1 \\cdot B_1 + C_2 \\cdot B_2 + \\ldots + C_M \\cdot B_M = K$.\nIn this problem, Chef has a sequence $A_1, A_2, \\ldots, A_N$ and he should answer $Q$ queries. In each query, he is given an integer $K$; the answer to this query is the number of pairs $(l, r)$ such that $1 \\le l \\le r \\le N$ and the subsequence $(A_l, A_{l+1}, \\ldots, A_r)$ generates $K$.\nChef has no idea how to solve this problem \u2015 can you help him find the answers to all queries?\n\n-----Input-----\n- The first line of the input contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n- The third line contains a single integer $Q$.\n- The following $Q$ lines describe queries. Each of these lines contains a single integer $K$.\n\n-----Output-----\nFor each query, print a single line containing one integer \u2015 the number of contiguous subsequences that generate $K$.\n\n-----Constraints-----\n- $1 \\le N, Q \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n- $1 \\le K \\le 10^6$\n\n-----Subtasks-----\nSubtask #1 (10 points): $1 \\le N \\le 1,000$\nSubtask #2 (90 points): original constraints\n\n-----Example Input-----\n2\n2 4\n3\n1\n2\n8\n\n-----Example Output-----\n0\n2\n3\n\n-----Explanation-----\nThe sequence $(2, 4)$ has three contiguous subsequences: $(2)$, $(4)$ and $(2, 4)$. \n- In the first query, $1$ cannot be generated by any subsequence.\n- In the second query, $2$ is generated by subsequences $(2)$ and $(2, 4)$. For example, for the subsequence $(2, 4)$, we can choose $C_1 = 1$ and $C_2 = 0$.\n- In the third query, $8$ is generated by all three subsequences.\n\n Examples: \nInput: \n['2', '2 4', '3', '1', '2', '8']\nOutput: \n ['0', '2', '3']\n",
  "1199": "Problem: \nIn a country called Chef Land, there was a lot of monetary fraud, so Chefu, the head of the country, decided to choose new denominations of the local currency \u2015 all even-valued coins up to an integer $N$ should exist. After a few days, a citizen complained that there was no way to create an odd value, so Chefu decided that he should also introduce coins with value $1$. Formally, you are given an integer $N$; for $v = 1$ and each even positive integer $v \\le N$, coins with value $v$ exist.\nYou are also given an integer $S$. To handle transactions quickly, find the minimum number of coins needed to pay a price $S$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $S$ and $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of coins.\n\n-----Constraints-----\n- $1 \\le T \\le 10,000$\n- $1 \\le S \\le 10^9$\n- $2 \\le N \\le 10^9$\n- $N$ is even\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n4\n2 2\n1 14\n30 10\n31 4\n\n-----Example Output-----\n1\n1\n3\n9\n\n-----Explanation-----\nExample case 1: One coin with value $2$ is sufficient.\nExample case 2: We need to use one coin with value $1$.\nExample case 3: We need $3$ coins, each with value $10$.\nExample case 4: We can use seven coins with value $4$, one coin with value $2$ and one coin with value $1$.\n\n Examples: \nInput: \n['4', '2 2', '1 14', '30 10', '31 4']\nOutput: \n ['1', '1', '3', '9']\n",
  "1200": "Problem: \nTwo sisters, A and B, play the piano every day. During the day, they can play in any order. That is, A might play first and then B, or it could be B first and then A. But each one of them plays the piano exactly once per day. They maintain a common log, in which they write their name whenever they play.\nYou are given the entries of the log, but you're not sure if it has been tampered with or not. Your task is to figure out whether these entries could be valid or not.\n\n-----Input-----\n- The first line of the input contains an integer $T$ denoting the number of test cases. The description of the test cases follows.\n- The first line of each test case contains a string $s$ denoting the entries of the log.\n\n-----Output-----\n- For each test case, output yes or no according to the answer to the problem.\n\n-----Constraints-----\n- $1 \\le T \\le 500$\n- $2 \\le |s| \\le 100$\n- $|s|$ is even\n- Each character of $s$ is either 'A' or 'B'\n\n-----Example Input-----\n4\nAB\nABBA\nABAABB\nAA\n\n-----Example Output-----\nyes\nyes\nno\nno\n\n-----Explanation-----\nTestcase 1: There is only one day, and both A and B have played exactly once. So this is a valid log. Hence 'yes'.\nTestcase 2: On the first day, A has played before B, and on the second day, B has played first. Hence, this is also a valid log.\nTestcase 3: On the first day, A played before B, but on the second day, A seems to have played twice. This cannot happen, and hence this is 'no'.\n\n Examples: \nInput: \n['4', 'AB', 'ABBA', 'ABAABB', 'AA']\nOutput: \n ['yes', 'yes', 'no', 'no']\n",
  "1202": "Problem: \nMark loves eating chocolates and also likes to be fit. Given the calorie count for every chocolate he eats, find what he has to do to burn the calories. \nThe name of the chocolates along with its calorie count are given as follows:\nCalories per one whole bar:\nDairy milk (D)\n238\nTwix (T)\n244\nMilky Bar (M)\n138\nBounty (B)\n279\nCrunchie (C)\n186\nThe exercises preferred by him and the calories burnt are as follows:\nCalories burnt per km:\nRunning\n50\nCycling\n5\nWalking\n0.5\nFind the number of kilometers he has to run, cycle or walk to burn all of the calories. \nPriority given to the exercises is as follows: \nRunning > Cycling > Walking\n\n-----Input:-----\n- It is a one line string consisting of the names(initial letter) of all the chocolates he has eaten.\n\n-----Output:-----\nPrint three lines. First line representing how much he ran(in km), second line representing how much he cycled(in km), third line representing how much he walked(in km).\n\n-----Constraints-----\n- 1 <= length of input string <= 10. \n\n-----Sample Input:-----\nDDTM\n\n-----Sample Output:-----\n17\n1\n6\n\n-----EXPLANATION:-----\nCalorie intake = 238 + 238 + 244 + 138 = 858\n( 17km x 50 ) + ( 1km x 5 ) + ( 6km x 0.5 ) = 858.\n\n Examples: \nInput: \n['DDTM']\nOutput: \n ['17', '1', '6']\n",
  "1203": "Problem: \nGiven a set of  N  natural numbers 1,2,3........N and Q query.For each query you have to calculate the total number of subset in which  Ith.\nnumber of set come at Kth postion.Elements of every subset should be in sorted order.\nThe answer could  be very large so you have to print answer modulo 1e9+7.\n\n\n-----Input:-----\n- The first line of input cotains a single integer T denoting the number of test cases.\n- For every test case it contains two number N and Q.\n- Next Q line contains two number I and K.\n\n-----Output:-----\nFor each test case print required answer.\n\n-----Constraints and Subtasks:-----\n- 1<=T<=5\n- 1<=N, K<=4000\n- 1<=Q<=1000000\nSubtask 3: 5 points\n- 1<=T<=5\n- 1<=N, K<=16\n- 1<=Q<=1000\nSubtask 1: 25 points\n- T=1\n- 1<=N, K<=4000\n- 1<=Q<=100000\nSubtask 2: 70 points\n- Original Constraints.\n\n-----Example:-----\nInput:\n\n1\n\n3 3\n\n1 2\n\n2 1\n\n3 2\n\nOutput:\n\n0\n\n2\n\n2\n\n-----Explanation:-----\nFor N=3\n\ntotal subsets are:\n\n{1}\n\n{2}\n\n{3}\n\n{1,2}\n\n{1,3}\n\n{2,3}\n\n{1,2,3}\n\nNow we can see that for I=1 and K=2 there is no subset in which 1 come at 2nd position so the answer is Zero for that query.\n\nFor 2nd query I=2 and K=1 there are two subset i.e {2,3} and {2} in which 2 come at 1st position.\n\nSame for 3rd querry there is two subset i.e{1,3} and {2,3}.\n\n Examples: \nInput: \n['1', '3 3', '1 2', '2 1', '3 2']\nOutput: \n ['0', '2', '2']\n",
  "1204": "Problem: \nYou are given two strings $S$ and $R$. Each of these strings has length $N$. We want to make $S$ equal to $R$ by performing the following operation some number of times (possibly zero):\n- Choose two integers $a$ and $b$ such that $1 \\le a \\le b \\le N$.\n- For each $i$ such that $a \\le i \\le b$, replace the $i$-th character of $S$ by the $i$-th character of $R$.\nSuppose that we make $S$ equal to $R$ by performing this operation $k$ times, in such a way that the total number of replaced characters (i.e. the sum of all $k$ values of $b-a+1$) is $l$. Then, the cost of this process is defined as $k \\cdot l$.\nFind the minimum cost with which we can make $S$ equal to $R$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single string $S$.\n- The second line contains a single string $R$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum cost.\n\n-----Constraints-----\n- $1 \\le T \\le 4,000$\n- $1 \\le N \\le 10^6$\n- $|S| = |R| = N$\n- $S$ and $R$ contain only lowercase English letters\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Example Input-----\n1\nadefb\nbdefa\n\n-----Example Output-----\n4\n\n-----Explanation-----\nExample case 1: $S$ can be made equal to $R$ in two moves. First, we replace $S_1$ by $R_1$ and then replace $S_5$ by $R_5$. We have $k = l = 2$, so the cost is $2 \\cdot 2 = 4$. If we wanted to perform only one operation, the cost would be $5$.\n\n Examples: \nInput: \n['1', 'adefb', 'bdefa']\nOutput: \n ['4']\n",
  "1205": "Problem: \nDo you know Professor Saeed? He is the algorithms professor at Damascus University. Yesterday, he gave his students hard homework (he is known for being so evil) - for a given binary string $S$, they should compute the sum of $F(S, L, R)$ over all pairs of integers $(L, R)$ ($1 \\le L \\le R \\le |S|$), where the function $F(S, L, R)$ is defined as follows:\n- Create a string $U$: first, set $U = S$, and for each $i$ ($L \\le i \\le R$), flip the $i$-th character of $U$ (change '1' to '0' or '0' to '1').\n- Then, $F(S, L, R)$ is the number of valid pairs $(i, i + 1)$ such that $U_i = U_{i+1}$.\nAs usual, Professor Saeed will give more points to efficient solutions. Please help the students solve this homework.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $S$.\n\n-----Output-----\nFor each test case, print a single line containing one integer $\\sum_{1 \\le L \\le R \\le |S|} F(S, L, R)$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le |S| \\le 3 \\cdot 10^6$\n- the sum of $|S|$ over all test cases does not exceed $6 \\cdot 10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $1 \\le |S| \\le 300$\n- the sum of $|S|$ over all test cases does not exceed $600$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n1\n001\n\n-----Example Output-----\n6\n\n-----Explanation-----\nExample case 1:\n- $L = 1, R = 1$: $U$ is \"101\", $F = 0$\n- $L = 2, R = 2$: $U$ is \"011\", $F = 1$\n- $L = 3, R = 3$: $U$ is \"000\", $F = 2$\n- $L = 1, R = 2$: $U$ is \"111\", $F = 2$\n- $L = 2, R = 3$: $U$ is \"010\", $F = 0$\n- $L = 1, R = 3$: $U$ is \"110\", $F = 1$\n\n Examples: \nInput: \n['1', '001']\nOutput: \n ['6']\n",
  "1206": "Problem: \nAs you might remember, the collector of Siruseri had ordered\na complete revision of the Voters List. He knew that constructing\nthe list of voters is a difficult task, prone to errors. Some\nvoters may have been away on vacation, others may have moved\nduring the enrollment and so on. \nTo be as accurate as possible, he entrusted the task to three different \nofficials. Each of them was to independently record the list of voters and \nsend it to the collector. In Siruseri, every one has a ID number and\nthe list would only list the ID numbers of the voters and not their names.\nThe officials were expected to arrange the ID numbers in ascending order\nin their lists. \nOn receiving the lists, the Collector realised that there were\ndiscrepancies - the three lists were not identical.  He decided\nto go with the majority. That is, he decided to construct the\nfinal list including only those ID numbers that appeared in at\nleast 2 out of the 3 lists.  For example if the three lists\nwere\n23  30  42  57  90\n21  23  35  57  90  92\n21  23  30  57  90 \n\nthen the final list compiled by the collector would be:\n21  23  30  57  90\n\nThe ID numbers 35, 42 and 92 which appeared in only one list\neach do not figure in the final list.\nYour task is to help the collector by writing a program that\nproduces the final list from the three given lists.\nInput format\nThe first line of the input contains 3 integers\nN1, N2 and\nN3.  N1 is the number of\nvoters in the first list, N2 is the number of\nvoters in the second list and N3 is the number of\nvoters in the third list.  The next N1 lines\n(lines 2,...,N1+1) contain one positive integer\neach and describe the first list in ascending order.  The following\n\nN2 lines (lines\nN1+2,...,N1+N2+1)\ndescribe the second list in ascending order and the final\nN3 lines (lines\n\nN1+N2+2,...,N1+N2+N3+1)\ndescribe the third list in ascending order.\nOutput format\nThe first line of the output should contain a single integer\nM indicating the number voters in the final list. The next\nM lines (lines 2,...,M+1) should contain one\npositive integer each, describing the list of voters in the final\nlist, in ascending order.\nTest data\nYou may assume that 1 \u2264\nN1,N2,N3\n\u2264 50000.  You may also assume that in 50% of the inputs 1 \u2264 N1,N2,N3 \u2264 2000.\n\nExample\nSample input:\n5 6 5\n23\n30\n42\n57\n90\n21 \n23 \n35 \n57 \n90 \n92 \n21 \n23 \n30 \n57 \n90 \n\nSample output:\n5\n21 \n23 \n30 \n57 \n90\n\n Examples: \nInput: \n['5 6 5', '23', '30', '42', '57', '90', '21', '23', '35', '57', '90', '92', '21', '23', '30', '57', '90', 'Sample output:', '5', '21', '23', '30', '57', '90']\nOutput: \n []\n",
  "1207": "Problem: \nChef is the new king of the country Chefland. As first and most important responsibility he wants to reconstruct the road system of Chefland. There are N (1 to N) cities in the country and each city i has a population Pi. Chef wants to build some bi-directional roads connecting different cities such that each city is connected to every other city (by a direct road or through some other intermediate city) and starting from any city one can visit every other city in the country through these roads. Cost of building a road between two cities u and v is Pu x Pv. Cost to build the road system is the sum of cost of every individual road that would be built. \nHelp king Chef to find the minimum cost to build the new road system in Chefland such that every city is connected to each other.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nFirst line contains an integer N denoting the number of cities in the country. Second line contains N space separated integers Pi, the population of i-th city.\n\n-----Output-----\nFor each test case, print a single integer, the minimum cost to build the new road system on separate line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 Pi \u2264 106\n\n-----Example-----\nInput:\n2\n2\n5 10\n4\n15 10 7 13\n\nOutput:\n50\n266\n\n Examples: \nInput: \n['2', '2', '5 10', '4', '15 10 7 13']\nOutput: \n ['50', '266']\n",
  "1208": "Problem: \nChef is solving mathematics problems. He is preparing for Engineering Entrance exam. He's stuck in a problem.\n$f(n)=1^n*2^{n-1}*3^{n-2} * \\ldots * n^{1} $ \nHelp Chef to find the value of $f(n)$.Since this number could be very large, compute it modulo $1000000007$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,  $N$. \n\n-----Output:-----\nFor each testcase, output in a single line the value of $f(n)$ mod $1000000007$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Subtasks-----\nSubtask 1(24 points) : \n- $1 \\leq T \\leq 5000$\n- $1 \\leq N \\leq 5000$\nSubtask 2(51 points) : original constraints\n\n-----Sample Input:-----\n1\n3\n\n-----Sample Output:-----\n12\n\n Examples: \nInput: \n['1', '3']\nOutput: \n ['12']\n",
  "1209": "Problem: \nIt's winter and taking a bath is a delicate matter. Chef has two buckets of water. The first bucket has $v_1$ volume of cold water at temperature $t_1$. The second has $v_2$ volume of hot water at temperature $t_2$. Chef wants to take a bath with at least $v_3$ volume of water which is at exactly $t_3$ temperature. To get the required amount of water, Chef can mix some water obtained from the first and second buckets.\nMixing $v_x$ volume of water at temperature $t_x$ with $v_y$ volume of water at temperature $t_y$ yields $v_x + v_y$ volume of water at temperature calculated as\nvxtx+vytyvx+vyvxtx+vytyvx+vy\\frac{v_x t_x + v_y t_y}{v_x + v_y}\nHelp Chef figure out if it is possible for him to take a bath with at least $v_3$ volume of water at temperature $t_3$.\nAssume that Chef has no other source of water and that no heat is lost by the water in the buckets with time, so Chef cannot simply wait for the water to cool.\n\n-----Input-----\n- The first line contains $n$, the number of test cases. $n$ cases follow.\n- Each testcase contains of a single line containing 6 integers $v_1, t_1, v_2, t_2, v_3, t_3$.\n\n-----Output-----\n- For each test case, print a single line containing \"YES\" if Chef can take a bath the way he wants and \"NO\" otherwise.\n\n-----Constraints-----\n- $1 \\leq n \\leq 10^5$\n- $1 \\leq v_1, v_2, v_3 \\leq 10^6$\n- $1 \\leq t_1 < t_2 \\leq 10^6$\n- $1 \\leq t_3 \\leq 10^6$\n\n-----Sample Input-----\n3\n5 10 5 20 8 15\n5 10 5 20 1 30\n5 10 5 20 5 20\n\n-----Sample Output-----\nYES\nNO\nYES\n\n-----Explanation-----\n- Case 1: Mixing all the water in both buckets yields 10 volume of water at temperature 15, which is more than the required 8.\n- Case 2: It is not possible to get water at 30 temperature.\n- Case 3: Chef can take a bath using only the water in the second bucket.\n\n Examples: \nInput: \n['3', '5 10 5 20 8 15', '5 10 5 20 1 30', '5 10 5 20 5 20']\nOutput: \n ['YES', 'NO', 'YES']\n",
  "1210": "Problem: \n-----Problem Statement-----\nOne of the things JEC is known for is its GR (Group Recreation) where juniors and seniors do friendly interaction ;P\nAs for the new session of 2020 seniors decided to have their first GR and give them some treat. Juniors were excited about it they came to college canteen aligned in a line and counted themselves one by one from left to right so that every junior gets his/her treat. But seniors played a game and they will treat only the ones who passes in this game. Game is simple all they need to do is to alternate their language (between Hindi and English) while telling their positions that is if the junior just before you told 2 in English you need to say 3 in Hindi . You do not want to be the one left without a treat. \nYou are the junior standing at position $X$ from left and the counting could start from left or right you have to predict which number you have to speak and in which language when your turn comes.\n\n-----Input:-----\n- \nFirst line will contain $T$, number of testcases. Then the testcases follow. \n- \nEach testcase contains 2 lines first consist 2 space separated integers, $N$ (total count) , $X$ (your position from left), next line consist of 2 space separated characters  L or R (Direction from which counting starts L-left, R-Right) and H or E (the language to start counting).\n\n-----Output:-----\nFor each testcase, output a single line consisting space seperated Integer P and Character L\nwhere P is the number you will speak and L is the language (H or E).\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 120$\n- $1 \\leq X \\leq N$\n\n-----Sample Input:-----\n2\n15 5\nL H\n20 14\nR E\n\n*try to trim extra white spaces like new line during input in case of wrong answer\n\n-----Sample Output:-----\n5 H\n7 E\n\n-----EXPLANATION:-----\n- When counting starts from left with H it alternates like H E H E H\u2026.. on the fifth position H comes\n- When Count starts from right with E it alternates like E H E H E H E\u2026.. with E on the position of 14th student from right.\n\n Examples: \nInput: \n['2', '15 5', 'L H', '20 14', 'R E', '*try to trim extra white spaces like new line during input in case of wrong answer']\nOutput: \n ['5 H', '7 E']\n",
  "1211": "Problem: \nThe chef is having one string of English lower case alphabets only. The chef wants to remove all \"abc\" special pairs where a,b,c are occurring consecutively. After removing the pair, create a new string and again remove \"abc\" special pair from a newly formed string. Repeate the process until no such pair remains in a string.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, $String$. \n\n-----Output:-----\nFor each testcase, output in a single line answer, new String with no \"abc\" special pair.\n\n-----Constraints:-----\n$T \\leq 2 $\n$1 \\leq String length \\leq 1000 $\n\n-----Sample Input:-----\n2\naabcc\nbababccc\n\n-----Sample Output:-----\nac\nbc\n\n-----EXPLANATION:-----\nFor 1) after removing \"abc\" at middle we get a new string as ac.\nFor 2) string = bababccc\nnewString1 = babcc  // After removing middle \"abc\"\nnewString2 = bc   //After removing \"abc\"\n\n Examples: \nInput: \n['2', 'aabcc', 'bababccc']\nOutput: \n ['ac', 'bc']\n",
  "1212": "Problem: \n\"Everything in the universe is balanced. Every disappointment you face in life will be balanced by something good for you! Keep going, never give up.\"\nLet's call a string balanced if all characters that occur in this string occur in it the same number of times.\nYou are given a string $S$; this string may only contain uppercase English letters. You may perform the following operation any number of times (including zero): choose one letter in $S$ and replace it by another uppercase English letter. Note that even if the replaced letter occurs in $S$ multiple times, only the chosen occurrence of this letter is replaced.\nFind the minimum number of operations required to convert the given string to a balanced string.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $S$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of operations.\n\n-----Constraints-----\n- $1 \\le T \\le 10,000$\n- $1 \\le |S| \\le 1,000,000$\n- the sum of $|S|$ over all test cases does not exceed $5,000,000$\n- $S$ contains only uppercase English letters\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $T \\le 10$\n- $|S| \\le 18$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\nABCB\nBBC\n\n-----Example Output-----\n1\n1\n\n-----Explanation-----\nExample case 1: We can change 'C' to 'A'. The resulting string is \"ABAB\", which is a balanced string, since the number of occurrences of 'A' is equal to the number of occurrences of 'B'.\nExample case 2: We can change 'C' to 'B' to make the string \"BBB\", which is a balanced string.\n\n Examples: \nInput: \n['2', 'ABCB', 'BBC']\nOutput: \n ['1', '1']\n",
  "1213": "Problem: \nChef and his competitor Kefa own two restaurants located at a straight road. The position of Chef's restaurant is $X_1$, the position of Kefa's restaurant is $X_2$.\nChef and Kefa found out at the same time that a bottle with a secret recipe is located on the road between their restaurants. The position of the bottle is $X_3$.\nThe cooks immediately started to run to the bottle. Chef runs with speed $V_1$, Kefa with speed $V_2$.\nYour task is to figure out who reaches the bottle first and gets the secret recipe (of course, it is possible that both cooks reach the bottle at the same time).\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains five space-separated integers $X_1$, $X_2$, $X_3$, $V_1$ and $V_2$. \n\n-----Output-----\nFor each test case, print a single line containing the string \"Chef\" if Chef reaches the bottle first, \"Kefa\" if Kefa reaches the bottle first or \"Draw\" if Chef and Kefa reach the bottle at the same time (without quotes). \n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $|X_1|, |X_2|, |X_3| \\le 10^5$\n- $X_1 < X_3 < X_2$\n- $1 \\le V_1 \\le 10^5$\n- $1 \\le V_2 \\le 10^5$\n\n-----Example Input-----\n3\n1 3 2 1 2\n1 5 2 1 2\n1 5 3 2 2\n\n-----Example Output-----\nKefa\nChef\nDraw\n\n-----Explanation-----\nExample case 1. Chef and Kefa are on the same distance from the bottle, but Kefa has speed $2$, while Chef has speed $1$.\n\n Examples: \nInput: \n['3', '1 3 2 1 2', '1 5 2 1 2', '1 5 3 2 2']\nOutput: \n ['Kefa', 'Chef', 'Draw']\n",
  "1214": "Problem: \nEverybody is worried about Rakesh as the boy does not have much knowledge about the real world. He can not go from one place to another on his own. It's high time he learned to explore the city. He is going to a relative's house situated on the other side of the city on his own. As this is his first time, he is carrying a GPS tracker of a special kind. The tracker continuously sends information to the family of Rakesh about his movement. The information is sent using the following four letters: U, D, R, and L. Those letters indicate the moves taken by Rakesh. \n\nThe city can be considered as a grid. Rakesh starts his journey from (0, 0) position of the grid. His relative's house is situated at (Rx, Ry). Rakesh can move in four directions: up, down, right, or left indicated by U, D, R, and L respectively. \n\nAny position of the city with x ordinate negative or greater than M is considered as dangerous. Also, any position of the city with y ordinate negative or greater than N is considered as dangerous. You will be given the total sequence of Rakesh's movement. You need to determine if Rakesh ended up being at his relative's house, at a dangerous place, or at a random place in the city.\n\nTo make things clear,\n\n-  U indicates a move that increases position along y-axis by 1 \n-  D indicates a move that decreases position along y-axis by 1 \n-  R indicates a move that increases position along x-axis by 1 \n-  L indicates a move that decreases position along x-axis by 1 \n\nNote that we are interested in the position of Rakesh at the end of his journey only. He may visit some dangerous place or his relative's house at some intermediate point but that won't affect the answer.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows.\n\n- The first line of each test case contains two integers M and N.\n- The second line contains two integers Rx and Ry.\n- The third line contains the length of Rakesh's move sequence.\n- The next line contains the move sequence containing letters U, D, R, and L only with no space.\n\n-----Output-----\nFor each test case, print \"Case i: \", and then the answer, where i is the testcase number, 1-indexed. The answer should be any of the following three strings:\n-  \"REACHED\" if Rakesh could reach his relative's house \n-  \"DANGER\" if Rakesh ended up being in a dangerous place \n-  \"SOMEWHERE\" if Rakesh ended up being in somewhere safe place in the city other than his relative's place \nDon't print any quotation mark. Check the sample output.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10\n- 0 \u2264 M, N \u2264 10000\n- 0 \u2264 Rx \u2264  M \n- 0 \u2264 Ry \u2264  N \n- 0 \u2264 Sum of the lengths of all sequences \u2264 10000\n\n-----Example-----\nInput:\n2\n20 20\n4 5\n13\nLLUUUUURRRRRR\n10 10\n3 4\n7\nUDUDDRR\n\nOutput:\nCase 1: REACHED\nCase 2: DANGER\n\n Examples: \nInput: \n['2', '20 20', '4 5', '13', 'LLUUUUURRRRRR', '10 10', '3 4', '7', 'UDUDDRR']\nOutput: \n ['Case 1: REACHED', 'Case 2: DANGER']\n",
  "1216": "Problem: \nToday Chef wants to evaluate the dishes of his $N$ students. He asks each one to cook a dish and present it to him.\nChef loves his secret ingredient, and only likes dishes with at least $X$ grams of it.\nGiven $N$, $X$ and the amount of secret ingredient used by each student $A_i$, find out whether Chef will like at least one dish. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each testcase contains two integers $N$ \n(number of students) and $X$ (minimum amount of secret ingredient that a dish must contain for Chef to like it).\n- The next line contains $N$ space separated integers, $A_i$ denoting the amount of secret ingredient used by the students in their dishes.\n\n-----Output:-----\nFor each testcase, print a single string \"YES\" if Chef likes at least one dish. Otherwise, print \"NO\". (Without quotes).\n\n-----Constraints:-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n- $1 \\leq X \\leq 1000000$\n- $1 \\leq A_i \\leq 1000000$\n\n-----Sample Input:-----\n3\n5 100\n11 22 33 44 55\n5 50\n10 20 30 40 50\n5 45\n12 24 36 48 60\n\n-----Sample Output:-----\nNO\nYES\nYES\n\n Examples: \nInput: \n['3', '5 100', '11 22 33 44 55', '5 50', '10 20 30 40 50', '5 45', '12 24 36 48 60']\nOutput: \n ['NO', 'YES', 'YES']\n",
  "1217": "Problem: \nChef has an array A = (A1, A2, ..., AN), which has N integers in it initially. Chef found that for i \u2265 1, if Ai > 0, Ai+1 > 0, and Ai+2 exists, then he can decrease both Ai, and Ai+1 by one and increase Ai+2 by one. If Ai+2 doesn't exist, but Ai > 0, and Ai+1 > 0, then he can decrease both Ai, and Ai+1 (which will be the currently last two elements of the array) by one and add a new element at the end, whose value is 1.\nNow Chef wants to know the number of different arrays that he can make from A using this operation as many times as he wishes. Help him find this, and because the answer could be very large, he is fine with you reporting the answer modulo 109+7.\nTwo arrays are same if they have the same number of elements and if each corresponding element is the same. For example arrays (2,1,1) and (1,1,2) are different. \n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases.\n- The first line contains a single integer N denoting the initial number of elements in A.\n- The second line contains N space-separated integers: A1, A2, ... , AN. \n\n-----Output-----\nFor each test case, output answer modulo 109+7 in a single line. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 5\n- 1 \u2264 N \u2264 50\n- 0 \u2264 Ai \u2264 50\n\n-----Subtasks-----\n- Subtask 1 (20 points) : 1 \u2264 N \u2264 8, 0 \u2264 Ai \u2264 4\n- Subtask 2 (80 points) : Original constraints\n\n-----Example-----\nInput:\n3\n3\n2 3 1\n2\n2 2\n3\n1 2 3\n\nOutput:\n9\n4\n9\n\n-----Explanation-----\nExample case 1.\nWe'll list the various single steps that you can take (ie. in one single usage of the operation):\n- (2, 3, 1) \u2192 (2, 2, 0, 1)\n- (2, 2, 0, 1) \u2192 (1, 1, 1, 1)\n- (1, 1, 1, 1) \u2192 (1, 1, 0, 0, 1)\n- (1, 1, 0, 0, 1) \u2192 (0, 0, 1, 0, 1)\n- (1, 1, 1, 1) \u2192 (1, 0, 0, 2)\n- (1, 1, 1, 1) \u2192 (0, 0, 2, 1)\n- (2, 3, 1) \u2192 (1, 2, 2)\n- (1, 2, 2) \u2192 (0, 1, 3)\n\nSo all the arrays you can possibly get are: \n(2, 3, 1), (2, 2, 0, 1), (1, 1, 1, 1), (1, 1, 0, 0, 1), (0, 0, 1, 0, 1), (1, 0, 0, 2), (0, 0, 2, 1), (1, 2, 2), and (0, 1, 3)\nSince there are 9 different arrays that you can reach, the answer is 9.\n\n Examples: \nInput: \n['3', '3', '2 3 1', '2', '2 2', '3', '1 2 3', '', '']\nOutput: \n ['9', '4', '9']\n",
  "1218": "Problem: \nRichik$Richik$ has just completed his engineering and has got a job in one of the firms at Sabrina$Sabrina$ which is ranked among the top seven islands in the world in terms of the pay scale. \nSince Richik$Richik$ has to travel a lot to reach the firm, the owner assigns him a number X$X$, and asks him to come to work only on the day which is a multiple of X$X$. Richik joins the firm on 1-st day but starts working from X-th day. Richik$Richik$ is paid exactly the same amount in Dollars as the day number. For example, if Richik$Richik$ has been assigned X=3$X = 3$, then he will be paid 3$3$ dollars and 6$6$ dollars on the 3rd$3rd$ and 6th$6th$ day on which he comes for work. \nOn N\u2212th$N-th$ day, the owner calls up Richik$Richik$ and asks him not to come to his firm anymore. Hence Richik$Richik$ demands his salary of all his working days together. Since it will take a lot of time to add, Richik$Richik$ asks help from people around him, let's see if you can help him out. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N$X, N$. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264X<=N\u2264107$1 \\leq X<=N \\leq 10^7$\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\n Examples: \nInput: \n['1', '3 10']\nOutput: \n ['18']\n",
  "1219": "Problem: \nYou have found $M$ different types of jewels in a mine and each type of jewel is present in an infinite number.\nThere are $N$ different boxes located at position $(1 ,2 ,3 ,...N)$.\nEach box can collect jewels up to a certain number ( box at position $i$ have $i$ different partitions and each partition can collect at most one jewel of any type).\nBoxes at odd positions are already fully filled with jewels while boxes at even positions are completely empty.\nPrint the total number of different arrangements possible so that all boxes can be fully filled.\nAs the answer can be very large you can print it by doing modulo with 1000000007(10^9+7).\n\n-----Input:-----\n- First line will contain $T$, number of testcases. \n- Each testcase contains of a single line of input, two integers $N ,  M$. \n\n-----Output:-----\nFor each testcase, Print the total number of different arrangement.\n\n-----Constraints-----\n- $1 \\leq T \\leq 20000$\n- $1 \\leq N \\leq 1e9$\n- $1 \\leq M \\leq 1e14$\n\n-----Sample Input:-----\n2\n1 10\n5 2\n\n-----Sample Output:-----\n1\n64\n\n Examples: \nInput: \n['2', '1 10', '5 2']\nOutput: \n ['1', '64']\n",
  "1220": "Problem: \nLets wish Horsbug98 on his birthday and jump right into the question.\nIn Chefland, $6$ new mobile brands have appeared each providing a range of smartphones. For simplicity let the brands be represented by numbers $1$ to $6$. All phones are sold at the superstore. \nThere are total $N$ smartphones. Let $P_i$ & $B_i$ be the price and the brand of the $i^{th}$ smartphone. The superstore knows all the price and brand details beforehand. \nEach customer has a preference for brands. The preference is a subset of the brands available (i.e $1$ to $6$). Also, the customer will buy the $K^{th}$ costliest phone among all the phones of his preference.\nYou will be asked $Q$ queries. Each query consists of the preference of the customer and $K$.\nFind the price the customer has to pay for his preference. If no such phone is available, print $-1$\nNote that for each query the total number of smartphones is always $N$ since, after each purchase, the phones are replaced instantly.\n\n-----Input:-----\n- First Line contains $N$ and $Q$\n- Second-line contains $N$ integers $P_1,P_2,...,P_N$ (Price)\n- Third line contains $N$ integers $B_1,B_2,...,B_N$ (Brand)\n- Each of the next Q lines contains a query, the query is describes below\n- First line of each quey contains $b$ and $K$ where $b$ is the size of the preference subset.\n- Second line of each query contains $b$ integers, describing the preference subset.\n\n-----Output:-----\nFor each query, print the price to be paid.\n\n-----Constraints-----\n- $1 \\leq N, Q, P_i \\leq 10^5$\n- $1 \\leq B_i, b \\leq 6$\n- $1 \\leq K \\leq N$\n\n-----Sample Input:-----\n4 2\n4 5 6 7 \n1 2 3 4 \n3 3\n1 2 3\n3 4\n4 5 6 \n\n-----Sample Output:-----\n4\n\n-1\n\n-----Explaination-----\nQuery 1: The preference subset is {1, 2, 3}, The prices of phones available of these brands are {4, 5, 6}. The third costliest phone is 4.\nQuery 2: The preference subset is {4, 5, 6}, The prices of phones available of these brands are {7}.\nFouth costliest phone is required, which is not available. Hence, answer is $-1$.\n\n Examples: \nInput: \n['4 2', '4 5 6 7', '1 2 3 4', '3 3', '1 2 3', '3 4', '4 5 6']\nOutput: \n ['4', '-1']\n",
  "1221": "Problem: \nChef played an interesting game yesterday. This game is played with two variables $X$ and $Y$; initially, $X = Y = 0$. Chef may make an arbitrary number of moves (including zero). In each move, he must perform the following process:\n- Choose any positive integer $P$ such that $P \\cdot P > Y$.\n- Change $X$ to $P$.\n- Add $P \\cdot P$ to $Y$.\nUnfortunately, Chef has a bad memory and he has forgotten the moves he made. He only remembers the value of $X$ after the game finished; let's denote it by $X_f$. Can you tell him the maximum possible number of moves he could have made in the game?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $X_f$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum number of moves Chef could have made.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le X_f \\le 10^9$\n\n-----Example Input-----\n3\n3\n8\n9\n\n-----Example Output-----\n3\n5\n6\n\n-----Explanation-----\nExample case 2: One possible sequence of values of $X$ is $0 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 5 \\rightarrow 8$.\n\n Examples: \nInput: \n['3', '3', '8', '9']\nOutput: \n ['3', '5', '6']\n",
  "1222": "Problem: \nThe EEE classes are so boring that the students play games rather than paying attention during the lectures. Harsha and Dubey are playing one such game.\n\nThe game involves counting the number of anagramic pairs of a given string (you can read about anagrams from here). Right now Harsha is winning. Write a program to help Dubey count this number quickly and win the game!\n\n-----Input-----\nThe first line has an integer T which is the number of strings. Next T lines each contain a strings. Each string consists of lowercase english alphabets only.\n\n-----Output-----\nFor each string, print the answer in a newline.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 length of each string \u2264 100\n\n-----Example-----\nInput:\n3\nrama\nabba\nabcd\nOutput:\n2\n4\n0\n\n-----Explanation-----\nrama has the following substrings:\n\n- r\n- ra\n- ram\n- rama\n- a\n- am\n- ama\n- m\n- ma\n- a\nOut of these, {5,10} and {6,9} are anagramic pairs.\n\nHence the answer is 2.\n\nSimilarly for other strings as well.\n\n Examples: \nInput: \n['3', 'rama', 'abba', 'abcd']\nOutput: \n ['2', '4', '0']\n",
  "1223": "Problem: \nIt's the annual military parade, and all the soldier snakes have arrived at the parade arena, But they aren't standing properly. The entire parade must be visible from the main podium, and all the snakes must be in a line. But the soldiers are lazy, and hence you must tell the soldiers to move to their new positions in such a manner that the total movement is minimized.\nFormally, the entire parade strip can be thought of as the integer line. There are N snakes, where each snake is a line segment of length L. The i-th snake is initially at the segment [Si, Si + L]. The initial positions of the snakes can overlap. The only segment of the strip visible from the podium is [A, B], and hence all the snakes should be moved so that all of them are visible from the podium. They should also all be in a line without gaps and every consecutive pair touching each other. In other words, they should occupy the segments [X, X + L], [X + L, X + 2*L], ... , [X + (N-1)*L, X + N*L], for some X, such that A \u2264 X \u2264 X + N*L \u2264 B. You are guaranteed that the visible strip is long enough to fit all the snakes.\n\nIf a snake was initially at the position [X1, X1 + L] and finally is at the position [X2, X2 + L], then the snake is said to have moved a distance of |X2 - X1|. The total distance moved by the snakes is just the summation of this value over all the snakes. You need to move the snakes in such a manner that it satisfies all the conditions mentioned above, as well as minimize the total distance. You should output the minimum total distance achievable.\n\n-----Input-----\n- The first line contains a single integer, T, the number of testcases. The description of each testcase follows.\n- The first line of each testcase contains four integers, N, L, A and B, where N denotes the number of snakes, L denotes the length of each snake, and [A, B] is the segment visible from the podium.\n- The next line contains N integers, the i-th of which is Si. This denotes that the i-th snake is initially in the segment [Si, Si + L].\n\n-----Output-----\n- For each testcase, output a single integer in a new line: the minimum total distance achievable.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 Si \u2264 109\n- 1 \u2264 L \u2264 109\n- 1 \u2264 A \u2264 B \u2264 109\n- N * L \u2264 B - A\n\n-----Example-----\nInput:\n2\n3 4 11 23\n10 11 30\n3 4 11 40\n10 11 30\n\nOutput:\n16\n16\n\n-----Explanation-----\nIn the first testcase, the three snakes are initially at segments [10, 14], [11, 15], and [30, 34]. One optimal solution is to move the first snake which was at [10, 14] to [15, 19] and the third snake which was at [30, 34] to [19, 23]. After this, the snakes would form a valid parade because they will be from [11, 15], [15, 19] and [19, 23]. Hence they are all in a line without any gaps in between them, and they are all visible, because they all lie in the visible segment, which is [11, 23].\nThe distance traveled by the first snake is |15 - 10| = 5, by the second snake is |11 - 11| = 0 and by the third snake is |19 - 30| = 11. Hence the total distance traveled is 5 + 0 + 11 = 16. This is the best that you can do, and hence the answer is 16.\nIn the second testcase, only the visible segment has increased. But you can check that the same final configuration as in the first subtask is still optimal here. Hence the answer is 16.\n\n Examples: \nInput: \n['2', '3 4 11 23', '10 11 30', '3 4 11 40', '10 11 30']\nOutput: \n ['16', '16']\n",
  "1225": "Problem: \nTomya is a girl. She loves Chef Ciel very much.\n\nToday, too, Tomya is going to Ciel's restaurant.\nOf course, Tomya would like to go to Ciel's restaurant as soon as possible.\nTherefore Tomya uses one of the shortest paths from Tomya's house to Ciel's restaurant.\nOn the other hand, Tomya is boring now to use the same path many times.\nSo Tomya wants to know the number of shortest paths from Tomya's house to Ciel's restaurant.\nYour task is to calculate the number under the following assumptions.\n\nThis town has N intersections and M two way roads.\nThe i-th road connects from the Ai-th intersection to the Bi-th intersection, and its length is \n\nCi.\nTomya's house is in the 1st intersection, and Ciel's restaurant is in the N-th intersection.\n\n-----Input-----\n\nThe first line contains an integer T, the number of test cases.\nThen T test cases follow.\nThe first line of each test case contains 2 integers N, M.\nThen next M lines contains 3 integers denoting Ai, Bi and Ci.\n\n-----Output-----\n\nFor each test case, print the number of shortest paths from Tomya's house to Ciel's restaurant.\n\n-----Constraints-----\n\n1 \u2264 T \u2264 10\n\n2 \u2264 N \u2264 10\n\n1 \u2264 M \u2264 N \u2219 (N \u2013 1) / 2\n\n1 \u2264 Ai, Bi \u2264 N\n\n1 \u2264 Ci \u2264 10\nAi \u2260 Bi\n\nIf i \u2260 j and Ai = Aj, then Bi \u2260 Bj\n\nThere is at least one path from Tomya's house to Ciel's restaurant.\n\n-----Sample Input-----\n2\n3 3\n1 2 3\n2 3 6\n1 3 7\n3 3\n1 2 3\n2 3 6\n1 3 9\n\n-----Sample Output-----\n1\n2\n\n-----Explanations-----\n\nIn the first sample, only one shortest path exists, which is 1-3.\n\nIn the second sample, both paths 1-2-3 and 1-3 are the shortest paths.\n\n Examples: \nInput: \n['2', '3 3', '1 2 3', '2 3 6', '1 3 7', '3 3', '1 2 3', '2 3 6', '1 3 9']\nOutput: \n ['1', '2']\n",
  "1227": "Problem: \nOne day, Chef found a cube which has each of its sides painted in some color out of black, blue, red, green, yellow and orange.\nNow he asks you to check if he can choose three sides such that they are pairwise adjacent and painted in the same color.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases.\n- A single line of each test case contains six words denoting the colors of painted sides in the order: front, back, left, right, top and bottom, respectively.\n\n-----Output-----\nFor each test case, output a single line containing the word \"YES\" or \"NO\" (without quotes) corresponding to the answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264  50000 \n- Each color will be from the list {\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"orange\"}\n\n-----Subtasks-----\nSubtask 1: (25 points)\n- 1 \u2264 T \u2264  12000 \n- For each test case there will be at most three different colors\n\nSubtask 2: (75 points)\n- Original constraints\n\n-----Example-----\nInput:\n2\nblue yellow green orange black green\ngreen yellow green orange black green\n\nOutput:\nNO\nYES\n\n-----Explanation-----\n\nExample case 1.\nThere are no three sides with the same color.\n\nExample case 2.\nIn this test case, the front, bottom and left sides are green (see picture).\n\n Examples: \nInput: \n['2', 'blue yellow green orange black green', 'green yellow green orange black green']\nOutput: \n ['NO', 'YES']\n",
  "1228": "Problem: \nChef has $N$ axis-parallel rectangles in a 2D Cartesian coordinate system. These rectangles may intersect, but it is guaranteed that all their $4N$ vertices are pairwise distinct.\nUnfortunately, Chef lost one vertex, and up until now, none of his fixes have worked (although putting an image of a point on a milk carton might not have been the greatest idea after all\u2026). Therefore, he gave you the task of finding it! You are given the remaining $4N-1$ points and you should find the missing one.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- Then, $4N-1$ lines follow. Each of these lines contains two space-separated integers $x$ and $y$ denoting a vertex $(x, y)$ of some rectangle.\n\n-----Output-----\nFor each test case, print a single line containing two space-separated integers $X$ and $Y$ \u2015 the coordinates of the missing point. It can be proved that the missing point can be determined uniquely.\n\n-----Constraints-----\n- $T \\le 100$\n- $1 \\le N \\le 2 \\cdot 10^5$\n- $|x|, |y| \\le 10^9$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $T = 5$\n- $N \\le 20$\nSubtask #2 (30 points): $|x|, |y| \\le 10^5$\nSubtask #3 (50 points): original constraints\n\n-----Example Input-----\n1\n2\n1 1\n1 2\n4 6\n2 1\n9 6\n9 3\n4 3\n\n-----Example Output-----\n2 2\n\n-----Explanation-----\nThe original set of points are:\n\nUpon adding the missing point $(2, 2)$, $N = 2$ rectangles can be formed:\n\n Examples: \nInput: \n['1', '2', '1 1', '1 2', '4 6', '2 1', '9 6', '9 3', '4 3']\nOutput: \n ['2 2']\n",
  "1229": "Problem: \nMotu and Tomu are very good friends who are always looking for new games to play against each other and ways to win these games. One day, they decided to play a new type of game with the following rules:\n- The game is played on a sequence $A_0, A_1, \\dots, A_{N-1}$.\n- The players alternate turns; Motu plays first, since he's earlier in lexicographical order.\n- Each player has a score. The initial scores of both players are $0$.\n- On his turn, the current player has to pick the element of $A$ with the lowest index, add its value to his score and delete that element from the sequence $A$.\n- At the end of the game (when $A$ is empty), Tomu wins if he has strictly greater score than Motu. Otherwise, Motu wins the game.\nIn other words, Motu starts by selecting $A_0$, adding it to his score and then deleting it; then, Tomu selects $A_1$, adds its value to his score and deletes it, and so on.\nMotu and Tomu already chose a sequence $A$ for this game. However, since Tomu plays second, he is given a different advantage: before the game, he is allowed to perform at most $K$ swaps in $A$; afterwards, the two friends are going to play the game on this modified sequence.\nNow, Tomu wants you to determine if it is possible to perform up to $K$ swaps in such a way that he can win this game.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$ denoting the number of elements in the sequence and the maximum number of swaps Tomu can perform.\n- The second line contains $N$ space-separated integers $A_0, A_1, \\dots, A_{N-1}$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if Tomu can win the game or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10,000$\n- $0 \\le K \\le 10,000$\n- $1 \\le A_i \\le 10,000$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le N \\le 100$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\n6 0\n1 1 1 1 1 1\n5 1\n2 4 6 3 4\n\n-----Example Output-----\nNO\nYES\n\n-----Explanation-----\nExample case 1: At the end of the game, both Motu and Tomu will have scores $1+1+1 = 3$. Tomu is unable to win that game, so the output is \"NO\".\nExample case 2: If no swaps were performed, Motu's score would be $2+6+4 = 12$ and Tomu's score would be $4+3 = 7$. However, Tomu can swap the elements $A_2 = 6$ and $A_3 = 3$, which makes Motu's score at the end of the game equal to $2+3+4 = 9$ and Tomu's score equal to $4+6 = 10$. Tomu managed to score higher than Motu, so the output is \"YES\".\n\n Examples: \nInput: \n['2', '6 0', '1 1 1 1 1 1', '5 1', '2 4 6 3 4']\nOutput: \n ['NO', 'YES']\n",
  "1230": "Problem: \nThe Gray code (see wikipedia for more details) is a well-known concept.\nOne of its important properties is that every two adjacent numbers have exactly one different digit in their binary representation.\n\nIn this problem, we will give you n non-negative integers in a sequence A[1..n] (0<=A[i]<2^64), such that every two adjacent integers have exactly one different digit in their binary representation, similar to the Gray code.\n\nYour task is to check whether there exist 4 numbers A[i1], A[i2], A[i3], A[i4] (1 <= i1 < i2 < i3 < i4 <= n) out of the given n numbers such that A[i1] xor A[i2] xor A[i3] xor A[i4] = 0. Here xor is a bitwise operation which is same as ^ in C, C++, Java and xor in Pascal.\n\n-----Input-----\nFirst line contains one integer n (4<=n<=100000).\nSecond line contains n space seperated non-negative integers denoting the sequence A.\n\n-----Output-----\nOutput \u201cYes\u201d (quotes exclusive) if there exist four distinct indices i1, i2, i3, i4 such that A[i1] xor A[i2] xor A[i3] xor A[i4] = 0. Otherwise, output \"No\" (quotes exclusive) please.\n\n-----Example-----\nInput:\n\n5\n1 0 2 3 7\n\nOutput:\n\nYes\n\n Examples: \nInput: \n['5', '1 0 2 3 7']\nOutput: \n ['Yes']\n",
  "1231": "Problem: \nThe chef won a duet singing award at Techsurge & Mridang 2012. From that time he is obsessed with the number 2.\n\nHe just started calculating the powers of two. And adding the digits of the results.\n\nBut he got puzzled after a few calculations. So gave you the job to generate the solutions to 2^n and find their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\nExplanation:\n2^5=32\n3+2=5\n2^10=1024\n1+0+2+4=7\n2^4=16\n1+6=7\n\n Examples: \nInput: \n['3', '5', '10', '4']\nOutput: \n ['5', '7', '7']\n",
  "1232": "Problem: \nAND gates and OR gates are basic components used in building digital circuits. Both gates have two input lines and one output line. The output of an AND gate is 1 if both inputs are 1, otherwise the output is 0. The output of an OR gate is 1 if at least one input is 1, otherwise the output is 0.\n\nYou are given a digital circuit composed of only AND and OR gates where one node (gate or input) is specially designated as the output. Furthermore, for any gate G and any input node I, at most one of the inputs to G depends on the value of node I.\n\nNow consider the following random experiment. Fix some probability p in [0,1] and set each input bit to 1 independently at random with probability p (and to 0 with probability 1-p). The output is then 1 with some probability that depends on p. You wonder what value of p causes the circuit to output a 1 with probability 1/2.\n\n-----Input-----\n\nThe first line indicates the number of test cases to follow (about 100).\n\nEach test case begins with a single line containing a single integer n with 1 \u2264 n \u2264 100 indicating the number of nodes (inputs and gates) in the circuit. Following this, n lines follow where the i'th line describes the i'th node. If the node is an input, the line simply consists of the integer 0. Otherwise, if the node is an OR gate then the line begins with a 1 and if the node is an AND gate then the line begins with a 2. In either case, two more integers a,b follow, both less than i, which indicate that the outputs from both a and b are used as the two input to gate i.\n\nAs stated before, the circuit will be such that no gate has both of its inputs depending on the value of a common input node.\n\nTest cases are separated by a blank line including a blank line preceding the first test case.\n\n\n-----Output-----\n\nFor each test case you are to output a single line containing the value p for which the output of node n is 1 with probability exactly 1/2 if the inputs are independently and randomly set to value 1 with probability p. The value p should be printed with exactly 5 digits after the decimal.\n\n\n-----Example-----\nInput:\n\n4\n\n1\n0\n\n3\n0\n0\n1 1 2\n\n3\n0\n0\n2 1 2\n\n5\n0\n0\n0\n2 1 2\n1 3 4\n\nOutput:\n\n0.50000\n0.29289\n0.70711\n0.40303\n\n-----Temporary Stuff-----\n\nA horizontal rule follows.\n\n***\n\nHere's a definition list (with `definitionLists` option):\n\napples\n: Good for making applesauce.\noranges\n: Citrus!\ntomatoes\n: There's no \"e\" in tomatoe.\n\n#PRACTICE\n- This must be done\n[http:codechef.com/users/dpraveen](http:codechef.com/users/dpraveen)\n\n(0.8944272\u22120.44721360.4472136\u22120.8944272)(10005)(0.89442720.4472136\u22120.4472136\u22120.8944272)(10005)\n\\left(\\begin{array}{cc} \n0.8944272 & 0.4472136\\\\\n-0.4472136 & -0.8944272\n\\end{array}\\right)\n\\left(\\begin{array}{cc} \n10 & 0\\\\ \n0 & 5\n\\end{array}\\right)\n\n Examples: \nInput: \n['4', '', '1', '0', '', '3', '0', '0', '1 1 2', '', '3', '0', '0', '2 1 2', '', '5', '0', '0', '0', '2 1 2', '1 3 4', '', '']\nOutput: \n ['0.50000', '0.29289', '0.70711', '0.40303']\n",
  "1233": "Problem: \nThere are players standing in a row each player has a digit written on their T-Shirt (multiple players can have the same number written on their T-Shirt).   \nYou have to select a group of players, note that players in this group should be standing in $\\textbf{consecutive fashion}$. For example second player of chosen group next to first player of chosen group, third player next to second and similarly last player next to second last player of chosen group. Basically You've to choose a contiguous group of players.\nAfter choosing a group, players can be paired if they have the same T-Shirt number (one player can be present in at most one pair), finally the chosen group is called \u201cgood\u201d if at most one player is left unmatched. Your task is to find the size of the maximum \u201cgood\u201d group.\nFormally, you are given a string $S=s_{1}s_{2}s_{3}...s_{i}...s_{n}$ where $s_{i}$ can be any digit character between $'0'$ and $'9'$ and $s_{i}$ denotes the number written on the T-Shirt of $i^{th}$ player. Find a value $length$ such that there exist pair of indices $(i,j)$ which denotes $S[i...j]$ is a \u201cgood\u201d group where $i\\geq1$ and $j\\leq S.length$ and $i\\leq j$ and $(j-i+1)=length$ and there exist no other pair $(i\u2019,j\u2019)$ such that $(j\u2019-i\u2019+1)>length$ and $S[i'...j']$ is a \"good\" group.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- $i^{th}$ testcase consist of a single line of input, a string $S$. \n\n-----Output:-----\nFor each testcase, output in a single line maximum possible size of a \"good\" group.\n\n-----Constraints-----\n$\\textbf{Subtask 1} (20 points)$\n- $1 \\leq T \\leq 10$\n- $S.length \\leq 10^{3}$\n$\\textbf{Subtask 2} (80 points)$\n- $1 \\leq T \\leq 10$\n- $S.length \\leq 10^{5}$\n\n-----Sample Input:-----\n1\n\n123343\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\n1$\\textbf{$\\underline{2 3 3}$}$43\nUnderlined group is a \u201cgood\u201d group because the second player(number 2 on T-Shirt) is the only player who is left unmatched and third and fourth player can form a pair, no other group has length greater than 3 that are \u201cgood\u201d. However note that we have other \u201cgood\u201d group also 12$\\textbf{$\\underline{334}$}$3 but length is 3 which is same as our answer.\n\n-----Sample Input:-----\n1\n\n95665\n\n-----Sample Output:-----\n5\n\n-----EXPLANATION:-----\n$\\textbf{$\\underline{95665}$}$ is \u201cgood\u201d group because first player is the only player who is left unmatched second and fifth player can form pair and third and fourth player also form pair.\n\n-----Sample Input:-----\n2\n\n2323\n\n1234567\n\n-----Sample Output:-----\n4\n\n1\n\n-----EXPLANATION:-----\nFor first test case\n$\\textbf{$\\underline{2323}$}$ is a \u201cgood\u201d group because there are no players who are left unmatched first and third player form pair and second and fourth player form pair.\n\nFor second test\n\nOnly length one \"good\" group is possible.\n\n Examples: \nInput: \n['1', '123343']\nOutput: \n ['3']\n",
  "1235": "Problem: \nGiven a number n. Find the last two digits of 5 ^ n ( 5 to the power of n ).\nRemember that overflow can occur.\n\n-----Input:-----\n- N  \u2014 the power in which you need to raise number 5.\n\n-----Output:-----\nLast two digits of 5^n.\n\n-----Constraints-----\n- $2 \\leq N \\leq 2.1018$\n\n-----Sample Input:-----\n2\n\n-----Sample Output:-----\n25\n\n Examples: \nInput: \n['2']\nOutput: \n ['25']\n",
  "1236": "Problem: \nYou are given a set of n pens, each of them can be red, blue, green, orange, and violet in color. Count a minimum number of pens that should be taken out from the set so that any two neighboring pens have different colors. Pens are considered to be neighboring if there are no other pens between them.\n\n-----Input:-----\n- \nThe first line contains t denoting the number of test cases.\n- \nThe first line of each test case will contain a single integer n.\n- \nThe second line of each test case will contain a string s.\n(s contains only 'R', 'B', 'G', 'O', and 'V' characters denoting red, blue, green, orange, and violet respectively)\n\n-----Output:-----\nFor each test case, print single line containing one integer - The minimum number of pens that need to be taken out.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq n \\leq 1000$\n\n-----Sample Input:-----\n2\n5\nRBBRG\n5\nRBGOV\n\n-----Sample Output:-----\n1\n0\n\n-----EXPLANATION:-----\nIn first test case, two blue pens are neighboring each other, if we take out any one of them then the string will be RBRG in which each pen has different neighbors.\nIn second test case, no pen needs to be taken out as each pen has different neighbors.\n\n Examples: \nInput: \n['2', '5', 'RBBRG', '5', 'RBGOV']\nOutput: \n ['1', '0']\n",
  "1237": "Problem: \nYou are standing near a very strange machine. If you put C cents in the machine, the remaining money in your purse will transform in an unusual way. If you have A dollars and B cents remaining in your purse after depositing the C cents, then after the transformation you will have B dollars and A cents. You can repeat this procedure as many times as you want unless you don't have enough money for the machine. If at any point C > B and A > 0, then the machine will allow you to break one of the A dollars into 100 cents so you can place C cents in the machine. The machine will not allow you to exchange a dollar for 100 cents if B >= C.\n\nOf course, you want to do this to maximize your profit. For example if C=69 and you have 9 dollars and 77 cents then after you put 69 cents in the machine you will have 8 dollars and 9 cents (9.77 --> 9.08 --> 8.09). But I should warn you that you can't cheat. If you try to throw away 9 cents before the transformation (in order to obtain 99 dollars and 8 cents after), the machine will sense you are cheating and take away all of your money. You need to know how many times you should do this transformation in order to make a maximum profit. Since you are very busy man, you want to obtain the maximum possible profit in the minimum amount of time.\n\n-----Input-----\nThe first line contains a single integer T <= 40, the number of test cases. T test cases follow. The only line of each test case contains three nonnegative integers A, B and C where A, B, C < 100. It means that you have A dollars and B cents in your purse and you need to put C cents in the machine to make the transformation.\n\n-----Output-----\nFor each test case, output a single line containing the minimal number of times you should do this transformation in order to make a maximal profit. It is guaranteed that the answer is less than 10000.\n\n-----Example-----\nInput:\n2\n9 77 69\n98 99 69\n\nOutput:\n4\n0\n\n-----Explanation-----\nIn the first test we have the following sequence: 9.77, 8.09, 40.07, 38.39, 70.37, 68.69, 0.68. After last step we have not enough money for further transformations. The maximal profit will be after 4 transformations.\n\n Examples: \nInput: \n['2', '9 77 69', '98 99 69', '', '']\nOutput: \n ['4', '0']\n",
  "1238": "Problem: \nChef likes to play with big numbers. Today, he has a big positive integer N. He can select any two digits from this number (the digits can be same but their positions should be different) and orders them in any one of the two possible ways. For each of these ways, he creates a two digit number from it (might contain leading zeros). Then, he will pick a character corresponding to the ASCII value equal to this number, i.e. the number 65 corresponds to 'A', 66 to 'B' and so on till 90 for 'Z'. Chef is only interested in finding which of the characters in the range 'A' to 'Z' can possibly be picked this way. \n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of the input contains an integer N. \n\n-----Output-----\nFor each test case, output a string containing characters Chef can pick in sorted order If the resulting size of string is zero, you should output a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 10100000\n\n-----Subtasks-----\n- Subtask #1 (40 points) N \u2264 1010\n- Subtask #2 (60 points) Original Constraints\n\n-----Example-----\nInput:\n4\n65\n566\n11\n1623455078\n\nOutput:\nA\nAB\n\nACDFGHIJKLNPQRSTUVW\n\n-----Explanation-----\nExample case 1. Chef can pick digits 6 and 5 and create integers 56 and 65. The integer 65 corresponds to 'A'.\nExample case 2. Chef can pick digits 6 and 5 and create 'A' as it equals 65. He can pick 6 and 6 (they are picked from position 2 and position 3, respectively) to create 'B' too. Hence answer is \"AB\".\nExample case 3. It's not possible to create any character from 'A' to 'Z'. Hence, we just print a new line.\n\n Examples: \nInput: \n['4', '65', '566', '11', '1623455078']\nOutput: \n ['A', 'AB', 'ACDFGHIJKLNPQRSTUVW']\n",
  "1239": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['2', '2', '4']\nOutput: \n ['2', '21', '210', '21', '2', '4', '43', '432', '4321', '43210', '4321', '432', '43', '4']\n",
  "1240": "Problem: \nThe chef is having one array of natural numbers. Cheffina challenges chef that find the sum of weights all the natural numbers present in the array, but the main problem is that all numbers have not original weights. After every 6 natural numbers weight is set to 1 as weight increases by 1 after that. (i.e. weight of 1 is 1, weight of 2 is 2 but the weight of 7 is 1 and weight of 8 is 2 and so on\u2026). Help the chef to find the sum. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains two lines of input, one integer $N$.\n- Next line has N space separate natural numbers. \n\n-----Output:-----\nFor each testcase, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^6$\n\n-----Sample Input:-----\n1\n6\n6 7 9 11 4 16\n\n-----Sample Output:-----\n23\n\n-----EXPLANATION:-----\nArray after conversion = [6, 1, 3, 5, 4, 4]\n\n Examples: \nInput: \n['1', '6', '6 7 9 11 4 16']\nOutput: \n ['23']\n",
  "1241": "Problem: \n\"Don't Drink and Drive, but when you do, Better Call Saul.\"\nOnce Jesse and Walter were fighting over extra cash, and Saul decided to settle it with a game of stone piles whose winner gets the extra money. The game is described as follows :\nThere are N$N$ piles of stones with A$A$1$1$,$,$ A$A$2$2$,$,$ ...$...$ A$A$N$N$ stones in each pile. \nJesse and Walter move alternately, and in one move, they remove one pile entirely. \nAfter a total of X$X$ moves, if the Sum of all the remaining piles is odd, Walter wins the game and gets the extra cash, else Jesse is the winner.\nWalter moves first. \nDetermine the winner of the game if both of them play optimally. \n\n-----Input:-----\n- The first line will contain T$T$, number of testcases. T$T$ testcases follow : \n- The first line of each testcase contains two space-separated integers N,X$N, X$. \n- The second line of each testcase contains N$N$ space-separated integers A$A$1$1$,$,$ A$A$2$2$,$,$ ...,$...,$A$A$N$N$.\n\n-----Output:-----\nFor each test case, print a single line containing the string \"Jesse\" (without quotes), if Jesse wins the game or \"Walter\" (without quotes) if Walter wins.\n\n-----Constraints-----\n- 1\u2264T\u2264104$1 \\leq T \\leq 10^4$\n- 2\u2264N\u2264105$2 \\leq N \\leq 10^5$\n- 1\u2264X\u2264N\u22121$1 \\leq X \\leq N-1$\n- 1\u2264A$1 \\leq A$i$i$ \u2264100$ \\leq 100$\n- The sum of N$N$ over all test cases does not exceed 106$10^6$\n\n-----Sample Input:-----\n2\n5 3\n4 4 4 3 4\n7 4\n3 3 1 1 1 2 4\n\n-----Sample Output:-----\nJesse\nWalter\n\n-----EXPLANATION:-----\n- \nFor Test Case 1 : Playing optimally, Walter removes 4. Jesse removes 3 and then Walter removes 4. Jesse wins as 4+4=8$4 + 4 = 8$ is even.\n- \nFor Test Case 2 : Playing optimally, Walter removes 4, Jesse removes 3, Walter removes 2 and Jesse removes 1. Walter wins as  3+3+1=7$3 + 3 + 1 = 7$ is odd.\n\n Examples: \nInput: \n['2', '5 3', '4 4 4 3 4', '7 4', '3 3 1 1 1 2 4']\nOutput: \n ['Jesse', 'Walter']\n",
  "1242": "Problem: \nChef loves to play with arrays by himself. Today, he has an array A consisting of N distinct integers. He wants to perform the following operation on his array A.\n\n- Select a pair of adjacent integers and remove the larger one of these two. This decreases the array size by 1. Cost of this operation will be equal to the smaller of them.\n\nFind out minimum sum of costs of operations needed to convert the array into a single element.\n\n-----Input-----\nFirst line of input contains a single integer T denoting the number of test cases. First line of each test case starts with an integer N denoting the size of the array A. Next line of input contains N space separated integers, where the ith integer denotes the value Ai.\n\n-----Output-----\nFor each test case, print the minimum cost required for the transformation.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10 \n- 2 \u2264 N \u2264 50000 \n- 1 \u2264 Ai \u2264 105 \n\n-----Subtasks-----\n- Subtask 1 : 2 \u2264 N \u2264 15 : 35 pts \n- Subtask 2 : 2 \u2264 N \u2264 100 : 25 pts \n- Subtask 3 : 2 \u2264 N \u2264 50000 : 40 pts \n\n-----Example-----\nInput\n2\n2\n3 4\n3\n4 2 5\n\nOutput\n3\n4\n\n-----Explanation-----Test 1 :  Chef will make only 1 move: pick up both the elements (that is, 3 and 4), remove the larger one (4), incurring a cost equal to the smaller one (3).\n\n Examples: \nInput: \n['2', '2', '3 4', '3', '4 2 5']\nOutput: \n ['3', '4']\n",
  "1243": "Problem: \nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 5. If any of the permutations is divisible by 5 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input,$N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\n Examples: \nInput: \n['2', '19', '385']\nOutput: \n ['0', '1']\n",
  "1244": "Problem: \nA Train started its journey at x=-infinity is travelling on the x-Coordinate Axis. Given n passengers and the coordinates $b_i$ and $d_i$ for each of the $ith$ passenger at which they board and leave from the train respectively. Due to current COVID-19 crisis, the train is monitored at each mile/coordinate. The infection degree of the train at each mile is equal to the total passengers present in the train at that mile/coordinate. The train stops its journey if no more passengers are there to board the train. The term infection severity of the journey is defined as the sum of infection degrees noted at each mile. Find the Infection severity of the journey. Note: A passenger is considered for calculation of infection degree at both boarding and leaving stations.\n\nSince the answer can be very large, print it modulo $(10^9)+7$.\n\n-----Input:-----\n- First line will contain $N$, number of passengers. Then the $N$ lines follow. \n- $i$th line contains two integers $b_i, d_i$ , the boarding and departure mile of $i$th passenger.\n\n-----Output:-----\nPrint a single value, the Infection Severity of the journey modulo $(10^9)+7$.\n\n-----Constraints-----\n- $0 \\leq N \\leq 100000$\n- $-500000 \\leq b_i \\leq 500000$\n- $-500000 \\leq d_i \\leq 500000$\n\n-----Sample Input:-----\n3\n\n0 2\n\n1 3\n\n-1 4  \n\n-----Sample Output:-----\n12    \n\n-----EXPLANATION:-----\nInfection degree at :\n\n-1 is 1\n\n0 is 2\n\n1 is 3\n\n2 is 3\n\n3 is 2\n\n4 is 1\n\nCalculation started at mile -1 and ended at mile 4. Infection Severity = 1+2+3+3+2+1 =12\n\n Examples: \nInput: \n['3', '0 2', '1 3', '-1 4']\nOutput: \n ['12']\n",
  "1245": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n13\n57\n135\n7911\n131517\n1357\n9111315\n17192123\n25272931\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '13', '57', '135', '7911', '131517', '1357', '9111315', '17192123', '25272931']\n",
  "1246": "Problem: \nWalter White and Jesse Pinkman (a drug addict) both love to play with chemicals. One day they were playing with some chemicals to make an energy drink. Unknowingly they made a highly powerful drink. To test the drink on others also they called some of their friends and gave a drop of it to everyone. Now they all were feeling highly energetic and thought of an unique game to play with each other.\nAfter pondering for a while, Jesse came up with an extraordinary idea of competing in a race around a circular globe with N checkpoints each of one unit. Walter and all their other friends agreed with it.They divided themselves in $2$ teams with $N$ teammates in each team.This race has two commencing points $A$ and $B$ strictly facing each other. Walter and his team commences from $A$ point and other team starts from $B$. Both the teams start running at the same time clockwise around the globe. Speed of every player is constant throughout the race. If a player has a speed $X$ then it means that he covers a distance of $X$ units in one second.The race ends when some member of one team overtakes all members of opposite team at any point of time. Now you have to tell if any team will win the race or not.They all are stubborn and can run forever just to win the race. Help them to know if it is possible in anyway that the race will come to an end. \nFor Clarity, you can visualize the path as a circular paths where $A$ and $B$ are opposite ends of diameter. It can be proven that the actual circumference of circle do not affect the answer.\nIt is also possible that someone don't run at all.Keep in mind that the fastest one wins the race so does the code.\n\n-----Input:------\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. \n- The first line of each test case contains a single integer $N$ number of teammates in both team.\n- The second line contains $N$ space-separated integers $A_1, A_2 \\ldots A_N$ denoting speed of A's Team\n- The third line contains $N$ space-separated integers  $B_1, B_2 \\ldots B_N$ denoting speed of B's Team\n\n-----Output:------\nFor each test case, print a single line denoting YES if the race ends at any point of time else NO\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $0 \\leq A_i \\leq 2^{15}$\n- $0 \\leq B_i \\leq 2^{15}$\n\n-----Subtasks-----\nSubtask #1 (30 points): \n- $1 \\le N \\le 20$\n- $0 \\le  A_i  \\le 11$\n- $0 \\le  B_i  \\le 11$\nSubtask #2 (70 points): \n- Original constraints\n\n-----Sample input:-----\n1\n5\n1 2 3 4 5\n2 7 8 9 9\n\n-----Sample output-----\nYES\n\n-----Sample Explanation:------\nTeam B can overtake all members of Team A.\n\n Examples: \nInput: \n['1', '5', '1 2 3 4 5', '2 7 8 9 9', '']\nOutput: \n ['YES']\n",
  "1248": "Problem: \nChef has recently learned about number bases and is becoming fascinated.\nChef learned that for bases greater than ten, new digit symbols need to be introduced, and that the convention is to use the first few letters of the English alphabet. For example, in base 16, the digits are 0123456789ABCDEF. Chef thought that this is unsustainable; the English alphabet only has 26 letters, so this scheme can only work up to base 36. But this is no problem for Chef, because Chef is very creative and can just invent new digit symbols when she needs them. (Chef is very creative.)\nChef also noticed that in base two, all positive integers start with the digit 1! However, this is the only base where this is true. So naturally, Chef wonders: Given some integer N, how many bases b are there such that the base-b representation of N starts with a 1?\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case consists of one line containing a single integer N (in base ten).\n\n-----Output-----\nFor each test case, output a single line containing the number of bases b, or INFINITY if there are an infinite number of them.\n\n-----Constraints-----\n\n-----Subtasks-----Subtask #1 (16 points):\n- 1 \u2264 T \u2264 103\n- 0 \u2264 N < 103\nSubtask #2 (24 points):\n- 1 \u2264 T \u2264 103\n- 0 \u2264 N < 106\nSubtask #3 (28 points):\n- 1 \u2264 T \u2264 103\n- 0 \u2264 N < 1012\nSubtask #4 (32 points):\n- 1 \u2264 T \u2264 105\n- 0 \u2264 N < 1012\n\n-----Example-----\nInput:4\n6\n9\n11\n24\n\nOutput:4\n7\n8\n14\n\n-----Explanation-----\nIn the first test case, 6 has a leading digit 1 in bases 2, 4, 5 and 6: 610 = 1102 = 124 = 115 = 106.\n\n Examples: \nInput: \n['4', '6', '9', '11', '24']\nOutput: \n ['4', '7', '8', '14']\n",
  "1250": "Problem: \nOur chef has been assigned a task to make a necklace of length N, from gold, diamond and platinum.There is single kind of gold, two types of diamond and three types of platinum available.\nA necklace can be represented as strings of the form (G)\u2217(D1|D2)\u2217(P1|P2|P3)\u2217$ (G)*(D1|D2)*(P1|P2|P3)* $ where (x|y) means we can use x or y and \u2217$ * $ means we can repeat the previous parenthesized expression 0 or more times.\nInstead of making necklace he choose to count all such distinct necklaces possible for a given length N.\n\n-----Input:-----\n-The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n-Only line of every test case contains an integer N$N$ denoting the length of the necklace required.\n\n-----Output:-----\nFor each test case, print the number of all such distinct necklaces, with given length. As the number can be really large, print it modulo  109+7$10^{9}+7$.\n\n-----Constraints-----\n- 1\u2264T\u226410000$1 \\leq T \\leq 10000$\n- 2\u2264N\u22641000000000$2 \\leq N \\leq 1000000000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 70 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n1\n2\n\n-----Sample Output:-----\n6\n25\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['6', '25']\n",
  "1252": "Problem: \nGiven a number $n$, give the last digit of sum of all the prime numbers from 1 to $n$ inclusive.\n\n-----Input:-----\n- First line contains number of testcase $t$.\n- Each testcase contains of a single line of input, number $n$. \n\n-----Output:-----\nLast digit of sum of every prime number till n.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n1\n10\n\n-----Sample Output:-----\n7\n\n Examples: \nInput: \n['1', '10']\nOutput: \n ['7']\n",
  "1253": "Problem: \nPeople in Karunanagar are infected with Coronavirus. To understand the spread of disease and help contain it as early as possible, Chef wants to analyze the situation in the town. Therefore, he does the following:\n- Chef represents the population of Karunanagar as a binary string of length $N$ standing in a line numbered from $1$ to $N$ from left to right, where an infected person is represented as $1$ and an uninfected person as $0$.\n- Every day, an infected person in this binary string can infect an adjacent (the immediate left and right) uninfected person.\n- Therefore, if before Day 1, the population is $00100$, then at the end of Day 1, it becomes $01110$ and at the end of Day 2, it becomes $11111$.\nBut people of Karunanagar are smart and they know that if they 'socially isolate' themselves as early as possible, they reduce the chances of the virus spreading. Therefore on $i$-th day, person numbered $P_i$ isolates himself from person numbered $P_i - 1$, thus cannot affect each other. This continues in the town for $D$ days.\nGiven the population binary string before Day 1, Chef wants to calculate the total number of infected people in Karunanagar at the end of the day $D$. Since Chef has gone to wash his hands now, can you help do the calculation for him?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the test cases follow. \n- The first line of each test case contains a single integer $N$ denoting the length of the binary string.\n- The next line contains a binary string of length $N$ denoting the population before the first day, with $1$ for an infected person and $0$ for uninfected.\n- The next line contains a single integer $D$ - the number of days people isolate themselves.\n- The next line contains $P$ - a list of $D$ distinct space-separated integers where each $P_{i}$ denotes that at the start of $i^{th}$ day, person $P_{i}$ isolated him/herself from the person numbered $P_i-1$.\n\n-----Output:-----\nFor each test case, print a single integer denoting the total number of people who are infected after the end of $D^{th}$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 200$\n- $2 \\leq N \\leq 10^{4}$\n- $1 \\leq D < N$\n- $2 \\leq P_{i} \\leq N$ for $1 \\le i \\le D$\n\n-----Subtasks-----\nSubtask #1(30 points): $1 \\leq T \\leq 100$, $2 \\leq N \\leq 2000$\nSubtask #2(70 points): Original Constraints\n\n-----Sample Input:-----\n2\n9\n000010000\n3\n2 5 8\n5\n00001\n1\n5\n\n-----Sample Output:-----\n6\n1\n\n-----EXPLANATION:-----\nFor the purpose of this explanation, a social distance can be denoted with a '$|$'.\nFor the first testcase:\n- \nBefore Day $1$, the population is: $0|00010000$\n- \nBefore Day $2$, the population is: $0|001|11000$\n- \nBefore Day $3$, the population is: $0|011|111|00$\n- \nTherefore, after Day $3$, the population will be: $0|111|111|00$\nSo, there are $6$ infected persons.\nFor the second testcase:\nBefore Day $1$, the population is: $0000|1$\nTherefore, there is one infected person.\n\n Examples: \nInput: \n['2', '9', '000010000', '3', '2 5 8', '5', '00001', '1', '5']\nOutput: \n ['6', '1']\n",
  "1254": "Problem: \nChef wants to organize a contest. Predicting difficulty levels of the problems can be a daunting task. Chef wants his contests to be balanced in terms of difficulty levels of the problems.\nAssume a contest had total P participants. A problem that was solved by at least half of the participants (i.e. P / 2 (integer division)) is said to be cakewalk difficulty. A problem solved by at max P / 10 (integer division) participants is categorized to be a hard difficulty.\nChef wants the contest to be balanced. According to him, a balanced contest must have exactly 1 cakewalk and exactly 2 hard problems. You are given the description of N problems and the number of participants solving those problems. Can you tell whether the contest was balanced or not?\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers, N, P denoting the number of problems, number of participants respectively.\nThe second line contains N space separated integers, i-th of which denotes number of participants solving the i-th problem.\n\n-----Output-----\nFor each test case, output \"yes\" or \"no\" (without quotes) denoting whether the contest is balanced or not.\n\n-----Constraints-----\n- 1 \u2264 T, N \u2264 500 \n- 1 \u2264 P \u2264 108 \n- 1 \u2264 Number of participants solving a problem \u2264 P\n\n-----Subtasks-----\n- Subtask #1 (40 points): P is a multiple of 10\n- Subtask #2 (60 points): Original constraints\n\n-----Example-----\nInput\n6\n3 100\n10 1 100\n3 100\n11 1 100\n3 100\n10 1 10\n3 100\n10 1 50\n4 100\n50 50 50 50\n4 100\n1 1 1 1\n\nOutput\nyes\nno\nno\nyes\nno\nno\n\n-----Explanation-----\nExample case 1.: The problems are of hard, hard and cakewalk difficulty. There is 1 cakewalk and 2 hard problems, so the contest is balanced.\nExample case 2.: The second problem is hard and the third is cakewalk. There is 1 cakewalk and 1 hard problem, so the contest is not balanced.\nExample case 3.: All the three problems are hard. So the contest is not balanced.\nExample case 4.: The problems are of hard, hard, cakewalk difficulty. The contest is balanced.\nExample case 5.: All the problems are cakewalk. The contest is not balanced.\nExample case 6.: All the problems are hard. The contest is not balanced.\n\n Examples: \nInput: \n['6', '3 100', '10 1 100', '3 100', '11 1 100', '3 100', '10 1 10', '3 100', '10 1 50', '4 100', '50 50 50 50', '4 100', '1 1 1 1']\nOutput: \n ['yes', 'no', 'no', 'yes', 'no', 'no']\n",
  "1255": "Problem: \nYou are teaching students to generate strings consisting of unique lowercase latin characters (a-z). You give an example reference string $s$ to the students.\nYou notice that your students just copy paste the reference string instead of creating their own string. So, you tweak the requirements for strings submitted by the students.\nLet us define a function F(s, t) where s and t are strings as the number of characters that are same in both the strings. Note that the position doesn't matter. Here are a few examples of F(s, t):\nF(\"abc\", \"def\") = 0\nF(\"abc\", \"acb\") = 3\nF(\"back\", \"abcd\") = 3\nNow you ask your students to output a string t with lowercase unique characters of the same length as $s$, such that F(s, t) $\\leq k$ where you are also given the value of $k$. If there are multiple such strings, you ask them to output the lexicographically smallest possible string. If no such string is possible, output the string \"NOPE\" without quotes.\n\n-----Input:-----\n- The first line will contain $T$, the number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, which contains a string $s$ and an integer $k$.\n\n-----Output:-----\nFor each testcase, output in a single line the lexicographically smallest string t such that F(s, t) <= k or \"NOPE\" without quotes if no such string exists.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10000$\n- $1 \\leq $length of string s $(|s|) \\leq 26$\n- $s$ only consists of characters $a$ to $z$\n- There are no repeating characters in s\n- $0 \\leq k \\leq |s|$\n\n-----Sample Input:-----\n4\nhelowrd 0\nbackground 0\nabcdefghijklmnopqrstuvwxyz 0\nb 1\n\n-----Sample Output:-----\nabcfgij\nefhijlmpqs\nNOPE\na\n\n Examples: \nInput: \n['4', 'helowrd 0', 'background 0', 'abcdefghijklmnopqrstuvwxyz 0', 'b 1']\nOutput: \n ['abcfgij', 'efhijlmpqs', 'NOPE', 'a']\n",
  "1256": "Problem: \nLittle chef has just been introduced to the world of numbers! While experimenting with addition and multiplication operations, the little chef came up with the following problem:\n\nGiven an array A of non-negative integers, how many pairs of indices i and j exist such that  A[i]*A[j] > A[i]+A[j]  where  i < j .\n\nNow being a learner, little chef isn't able to solve this problem efficiently and hence turns to you for help. \n\n-----Input-----\nFirst line of input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number of integers in the array. The next line contains N space separated integers where the ith integer represents A[i]. \nNote : There may be trailing spaces on each line of input. \n\n-----Output-----\nFor each test, print the required number of pairs in a single line.\n\n-----Constraints-----\n-  1 \u2264 T \u2264 10 \n-  2 \u2264 N \u2264 100000 (105) \n-  0 \u2264 A[i] \u2264 1000000 (106)\n\n-----Example-----\nInput:\n2\n3\n3 4 5\n4\n1 1 1 1\n\nOutput:\n3\n0\n\n-----Explanation-----\n\nExample case 1.\n\nAll pairs of numbers satisfy the criteria. Total number of pairs equals 3.\n\nExample case 2.\n\nNo pair of numbers satisfy the criteria.\n\n Examples: \nInput: \n['2', '3', '3 4 5', '4', '1 1 1 1']\nOutput: \n ['3', '0']\n",
  "1257": "Problem: \nThe chef was chatting with his friend who was a mathematician.\nChef said \"Hi !\".\n\nHis friend replied that '!' is the symbol of factorial.\n\nChef had never heard about it and he asked more about it. Then his friend taught him how to calculate the factorial of a number.\n\nChef loved that But as always he got tired after calculating a few values and asked you to do it for him.\n\n-----Input-----\nN : Number of inputs\nthen N lines with input T\n\nN<10\n\nT<=200\n\n-----Output-----\nThe result for the corresponding value of T\n\n-----Example-----\nInput:\n3\n5\n4\n6\n\nOutput:\n120\n24\n720\n\n Examples: \nInput: \n['3', '5', '4', '6']\nOutput: \n ['120', '24', '720']\n",
  "1258": "Problem: \nChef Zidane likes the number 9. He has a number N, and he wants to turn it into a multiple of 9. He cannot add or remove digits, and he can only change one digit at a time. The only allowed operation is to increment or decrement a digit by one, and doing this takes exactly one second. Note that he cannot increase a digit 9 or decrease a digit 0, and the resulting number must not contain any leading zeroes unless N has a single digit.\n\nChef Zidane wants to know the minimum amount of time (in seconds) needed to accomplish this. Please help him, before his kitchen gets overwhelmed with mist!\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case consists of one line containing a single positive integer N.\n\n-----Output-----\nFor each test case, output a single line containing the answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 N \u2264 10105\n- N will not contain leading zeroes.\n- Each test file is at most 3Mb in size.\n\n-----Example-----\nInput:4\n1989\n86236\n90210\n99999999999999999999999999999999999999988\n\nOutput:0\n2\n3\n2\n\n-----Explanation-----\nExample case 1. 1989 is already divisible by 9, so no operations are needed to be performed.\nExample case 2. 86236 can be turned into a multiple of 9 by incrementing the first and third digit (from the left), to get 96336. This takes 2 seconds.\nExample case 3. 90210 can be turned into a multiple of 9 by decrementing the third digit twice and the fourth digit once, to get 90000. This takes 3 seconds.\n\n Examples: \nInput: \n['4', '1989', '86236', '90210', '99999999999999999999999999999999999999988']\nOutput: \n ['0', '2', '3', '2']\n",
  "1259": "Problem: \nVasya likes the number $239$. Therefore, he considers a number pretty if its last digit is $2$, $3$ or $9$. \nVasya wants to watch the numbers between $L$ and $R$ (both inclusive), so he asked you to determine how many pretty numbers are in this range. Can you help him?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $L$ and $R$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of pretty numbers between $L$ and $R$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le L \\le R \\le 10^5$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\n1 10\n11 33\n\n-----Example Output-----\n3\n8\n\n-----Explanation-----\nExample case 1: The pretty numbers between $1$ and $10$ are $2$, $3$ and $9$.\nExample case 2: The pretty numbers between $11$ and $33$ are $12$, $13$, $19$, $22$, $23$, $29$, $32$ and $33$.\n\n Examples: \nInput: \n['2', '1 10', '11 33']\nOutput: \n ['3', '8']\n",
  "1261": "Problem: \nYou have been appointed as the designer for your school's computer network.\nIn total, there are N computers in the class, and M computer-to-computer connections need to be made. Also, there are three mandatory conditions the design should fulfill.\nThe first requirement is that any computer in the network should be able to communicate with any other computer through the connections, possibly, through some other computers.\nNetwork attacks are possible, so the second requirement is that even if any one computer from the network gets disabled so that the rest of the computers are unable to communicate with it, the rest of the computers can still communicate with each other. In other words, the first requirement still holds for any subset of (N-1) computers.\nThe third requirement is that there shouldn't be any irrelevant connections in the network. We will call a connection irrelevant if and only if after its' removal, the above two requirements are still held.\nGiven N, M, please build a network with N computers and M connections, or state that it is impossible.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a pair of space-separated integers N and M denoting the number of computers and the number of connections.\n\n-----Output-----\nOutput T blocks.\nIf it is impossible to construct a network with the given parameters for the corresponding test case, output just -1 -1. Otherwise, output M lines, each of which contains a space-separated pairs of integers denoting the IDs of the computers that should be connected. Note that multiple connections between any pair of computers and connections connecting a computer to itself are implicitly not allowed due to the third requirement.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 M \u2264 N * (N - 1) / 2\n- 1 \u2264 Sum of all N \u2264 1000\n- Subtask 1 (21 point): 1 \u2264 N \u2264 4\n- Subtask 2 (79 points): 1 \u2264 N \u2264 100\n\n-----Example-----\nInput:2\n10 1\n5 5\n\nOutput:-1 -1\n1 2\n2 3\n3 4\n4 5\n5 1\n\n-----Explanation-----\nExample case 1. There are not enough connections even to satisfy the first requirement.\nExample case 2. The obtained network satisfies all the requirements.\n\n Examples: \nInput: \n['2', '10 1', '5 5']\nOutput: \n ['-1 -1', '1 2', '2 3', '3 4', '4 5', '5 1']\n",
  "1263": "Problem: \nThe chef was playing with numbers and he found that natural number N can be obtained by sum various unique natural numbers, For challenging himself chef wrote one problem statement, which he decided to solve in future.\nProblem statement: N can be obtained as the sum of Kth power of integers in multiple ways, find total number ways?\nAfter that Cheffina came and read what chef wrote in the problem statement, for having some fun Cheffina made some changes in the problem statement as.\nNew problem statement: N can be obtained as the sum of Kth power of unique +ve integers in multiple ways, find total number ways?\nBut, the chef is now confused, how to solve a new problem statement, help the chef to solve this new problem statement.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N, K$. \n\n-----Output:-----\nFor each test case, output in a single line answer to the problem statement.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 1000$\n- $1 \\leq K \\leq 6$\n\n-----Sample Input:-----\n2\n4 1\n38 2\n\n-----Sample Output:-----\n2\n1\n\n-----EXPLANATION:-----\nFor 1) 4 can be obtained by as [ 4^1 ], [1^1, 3^1], [2^1, 2^1]. (here ^ stands for power)\nBut here [2^1, 2^1] is not the valid way because it is not made up of unique +ve integers. \nFor 2) 38 can be obtained in the way which is [2^2, 3^2, 5^2] = 4 + 9 + 25\n\n Examples: \nInput: \n['2', '4 1', '38 2']\nOutput: \n ['2', '1']\n",
  "1264": "Problem: \nMohit's girlfriend is playing a game with Nicky. The description of the game is as follows:\n- Initially on a table Player 1 will put N gem-stones.\n- Players will play alternatively, turn by turn.\n- At each move a player can take at most M gem-stones (at least 1 gem-stone must be taken) from the available gem-stones on the table.(Each gem-stone has same cost.)\n- Each players gem-stone are gathered in player's side.\n- The player that empties the table purchases food from it (using all his gem-stones; one gem-stone can buy one unit of food), and the other one puts all his gem-stones back on to the table. Again the game continues with the \"loser\" player starting.\n- The game continues until all the gem-stones are used to buy food.\n- The main objective of the game is to consume maximum units of food.\n\n\tMohit's girlfriend is weak in mathematics and prediction so she asks help from Mohit, in return she shall kiss Mohit. Mohit task is to predict the maximum units of food her girlfriend can eat, if, she starts first. Being the best friend of Mohit, help him in predicting the answer.\n\n-----Input-----\n- Single line contains two space separated integers N and M.\n\n-----Output-----\n- The maximum units of food Mohit's girlfriend can eat.\n\n-----Constraints and Subtasks-----\n- 1 <= M <= N <= 100\nSubtask 1: 10 points\n- 1 <= M <= N <= 5\nSubtask 2: 20 points\n- 1 <= M <= N <= 10\nSubtask 3: 30 points\n- 1 <= M <= N <= 50\nSubtask 3: 40 points\n- Original Constraints.\n\n-----Example-----\nInput:\n4 2\n\nOutput:\n2\n\n Examples: \nInput: \n['4 2']\nOutput: \n ['2']\n",
  "1265": "Problem: \nThe Head Chef is receiving a lot of orders for cooking the best of the problems lately. For this, he organized an hiring event to hire some talented Chefs. He gave the following problem to test the skills of the participating Chefs. Can you solve this problem and be eligible for getting hired by Head Chef.\n\nA non-negative number n is said to be magical if it satisfies the following property. Let S denote the multi-set of numbers corresponding to the non-empty subsequences of the digits of the number n in decimal representation. Please note that the numbers in the set S can have leading zeros. Let us take an element s of the multi-set S, prod(s) denotes the product of all the digits of number s in decimal representation. \nThe number n will be called magical if sum of prod(s) for all elements s in S, is even. \n\nFor example, consider a number 246, its all possible non-empty subsequence will be S = {2, 4, 6, 24, 46, 26, 246}. Products of digits of these subsequences will be {prod(2) = 2, prod(4) = 4, prod(6) = 6, prod(24) = 8, prod(46) = 24, prod(26) = 12, prod(246) = 48, i.e. {2, 4, 6, 8, 24, 12, 48}. Sum of all of these is 104, which is even. Hence 246 is a magical number.\n\nPlease note that multi-set S can contain repeated elements, e.g. if number is 55, then S = {5, 5, 55}. Products of digits of these subsequences will be {prod(5) = 5, prod(5) = 5, prod(55) = 25}, i.e. {5, 5, 25}. Sum of all of these is 35 which is odd. Hence 55 is not a \nmagical number.\n\nConsider a number 204, then S = {2, 0, 4, 20, 04, 24, 204}. Products of digits of these subsequences will be {2, 0, 4, 0, 0, 8, 0}. Sum of all these elements will be 14 which is even. So 204 is a magical number.\n\nThe task was to simply find the Kth magical number.\n\n-----Input-----\n- First line of the input contains an integer T denoting the number of test cases.\n- Each of the next T lines contains a single integer K.\n\n-----Output-----\nFor each test case, print a single integer corresponding to the Kth magical number.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 K \u2264 1012.\n\n-----Subtasks-----\nSubtask #1 : (20 points)\n- 1 \u2264 T \u2264 100\n- 1 \u2264 K \u2264 104.\n\nSubtask 2 : (80 points) Original Constraints\n\n-----Example-----\nInput:\n2\n2\n5\n\nOutput:\n2\n8\n\n-----Explanation-----\nExample case 1.\n2 is the 2nd magical number, since it satisfies the property of the magical number. The first magical number will be of course 0.\n\n Examples: \nInput: \n['2', '2', '5', '', '']\nOutput: \n ['2', '8']\n",
  "1266": "Problem: \nChef's younger brother is in town. He's a big football fan and has a very important match to watch tonight. But the Chef wants to watch the season finale of MasterChef which will be aired at the same time. Now they don't want to fight over it like they used to when they were little kids. They want to decide it in a fair way. So they agree to play a game to make a decision. Their favourite childhood game!\nThe game consists of C boards. Each board i is a grid of dimension ni x mi.\nRules of the game:\n\n- A coin is placed at (1,1) on every board initially.\n\n- Each one takes a turn alternatively.\n\n- In one turn, a player can choose any one board and move a coin from a cell (i,j) to one of the following cells:\n\n\t(i+1,j) OR (i+2,j) OR (i,j+1) OR (i,j+2) OR (i+1,j+1) OR (i+2,j+2).\n\n- A coin cannot be moved out of the board at any point during the game.\n\n- A coin cannot be moved once it reaches the cell (n,m) where n and m are the dimensions of the board of that coin.\n\n- A player MUST make one valid move.\n\n- The player who makes the last move gets to watch TV. \n\nBoth of them are passionate about their interests and want to watch their respective shows. So they will obviously make optimal moves in every turn. The Chef, being the elder brother, takes the first turn.\nYour task is to predict which show they will be watching tonight.\n\n-----Input:-----\nThe first line of input contains a single integer T, the number of test cases. T tests follow.Each test case starts with a single line containing C, the number of boards in the game.\nThen follow C lines: each containing 2 integers ni and mi, the dimensions of the ith board.\n\n-----Output:-----\nGiven the number and dimensions of boards, for each test case, output in a single line: \"MasterChef\" if the Chef wins or \"Football\" if his brother wins.\n\n-----Constraints:-----\n\n1<=T<=10000\n\n1<=C<=20\n\n2<=ni,mi<=1000\n\n-----Example:-----Input:\n\n1\n\n1\n\n2 2\n\nOutput:\n\nMasterChef\n\nExplanation: \n\nThe Chef can move the coin on the board from (1,1)->(2,2). This coin cannot be moved any further. And so, the Chef wins.\nNotice that if the Chef moves it to any other valid position, i.e. either to (1,2) or (2,1) he will lose!\n\n Examples: \nInput: \n['1', '1', '2 2']\nOutput: \n ['MasterChef']\n",
  "1267": "Problem: \nChef likes problems related to learning new languages. He only knows first N letters of English alphabet. Also he explores all M-letter words formed by the characters he knows. Define cost for a given M-letter word S, cost(S) = P1, S1+P2, S2+...+PM, SM, where Pi, j is i, jth entry of matrix P. Sort all the words by descending cost, if costs are equal, sort them lexicographically. You need to find K-th M-letter word in Chef's order.\n\n-----Input-----\nFirst line contains three positive integer numbers N, M and K.\nNext M lines contains N integers per line, denoting the matrix P.\n\n-----Output-----\nOutput in a single line K-th M-letter in Chef's order.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 16 \n- 1 \u2264 M \u2264 10 \n- 1 \u2264 K \u2264 NM\n- 0 \u2264 Pi, j \u2264 109\n\n-----Subtasks-----\n- Subtask #1: (20 points) 1 \u2264 K \u2264 10000\n- Subtask #2: (20 points) 1 \u2264 M \u2264 5\n- Subtask #3: (60 points) Original constraints\n\n-----Example-----\nInput:2 5 17\n7 9\n13 18\n10 12\n4 18\n3 9\n\nOutput:aaaba\n\n Examples: \nInput: \n['2 5 17', '7 9', '13 18', '10 12', '4 18', '3 9']\nOutput: \n ['aaaba']\n",
  "1268": "Problem: \nThere is a universal library, where there is a big waiting room with seating capacity for maximum $m$ people, each of whom completes reading $n$ books sequentially. Reading each book requires one unit of time. \nUnfortunately, reading service is provided sequentially. After all of the $m$ people enter the library, the entrance gate is closed. There is only one reading table. So when someone reads, others have to wait in the waiting room. \nAt first everybody chooses $n$ books they want to read. It takes $x$ amount of time. People can choose books simultaneously. Then they enter the waiting room. After reading $n$ books the person leaves the library immediately. \nAs nothing is free, the cost of reading is also not free. If a person stays in the library $t$ units of time then the cost of reading is $\\left \\lfloor \\frac{t-n}{m} \\right \\rfloor$ units of money. So, the $i^{th}$ person pays for time $x$ he needs to choose books and the time $(i-1)*n$ he needs to wait for all the persons before him to complete reading.\nNote: $\\left \\lfloor a \\right \\rfloor$ denotes the floor($a$).\n\n-----Input-----\n- Each case contains three space-separated positive integers $n$, $m$ and $x$ where $n, x \\leq 1000$ and $m \\leq 10^{15}$. \n- End of input is determined by three zeros. \n- There are no more than 1000 test cases.\n\n-----Output-----\n- For each case, output in a single line the total unit of money the library gets in that day.\n\n-----Sample Input-----\n1 100 9\n11 2 10\n12 2 11\n0 0 0\n\n-----Sample Output-----\n9\n15\n16\n\n-----Explanation:-----\nTestcase 2: Here, $n=11$, $m=2$, $x=10$.\nFor 1st person, \n$t=21$ and he/she gives $\\left \\lfloor \\frac{21-11}{2} \\right \\rfloor = 5$ units of money.\nFor 2nd person,\n$t=32$ and he/she gives $\\left \\lfloor \\frac{32-11}{2} \\right \\rfloor= 10$ units of money.\nSo, total units of money $= 5+10 = 15$\n\n Examples: \nInput: \n['1 100 9', '11 2 10', '12 2 11', '0 0 0']\nOutput: \n ['9', '15', '16']\n",
  "1269": "Problem: \nOnce again, we have a lot of requests from coders for a challenging problem on geometry. Geometry expert Nitin is thinking about a problem with parabolas, icosahedrons, crescents and trapezoids, but for now, to encourage beginners, he chooses to work with circles and rectangles.\nYou are given two sequences $A_1, A_2, \\ldots, A_N$ and $B_1, B_2, \\ldots, B_N$. You should choose a permutation $P_1, P_2, \\ldots, P_N$ of the integers $1$ through $N$ and construct $N$ rectangles with dimensions $A_1 \\times B_{P_1}, A_2 \\times B_{P_2}, \\ldots, A_N \\times B_{P_N}$. Then, for each of these rectangles, you should construct an inscribed circle, i.e. a circle with the maximum possible area that is completely contained in that rectangle.\nLet $S$ be the sum of diameters of these $N$ circles. Your task is to find the maximum value of $S$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$. \n- The third line contains $N$ space-separated integers $B_1, B_2, \\ldots, B_N$. \n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum value of $S$. It is guaranteed that this value is always an integer.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $1 \\le N \\le 10^4$\n- $1 \\le A_i, B_i \\le 10^9$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $A_1 = A_2 = \\ldots = A_N$\n- $B_1 = B_2 = \\ldots = B_N$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\n4\n8 8 10 12\n15 20 3 5\n3\n20 20 20\n10 10 10\n\n-----Example Output-----\n30\n30\n\n-----Explanation-----\nExample case 1: Four rectangles with dimensions $8 \\times 3$, $8 \\times 5$, $10 \\times 20$ and $12 \\times 15$ lead to an optimal answer.\n\n Examples: \nInput: \n['2', '4', '8 8 10 12', '15 20 3 5', '3', '20 20 20', '10 10 10']\nOutput: \n ['30', '30']\n",
  "1270": "Problem: \nGet excited, folks, because it is time for the final match of Codechef Premier League (CPL)!\nMike and Tracy also want to watch the grand finale, but unfortunately, they could not get tickets to the match. However, Mike is not someone who gives up so easily \u2014 he has a plan to watch the match.\nThe field where the match is played is surrounded by a wall with height $K$. Outside, there are $N$ boxes (numbered $1$ through $N$). For each valid $i$, the $i$-th box has a height $H_i$.\nMike wants to take some boxes and stack them on top of each other to build two towers. The height of each tower is the sum of heights of all the boxes that form it. Of course, no box may be in both towers. The height of each tower should be at least $K$. Then Mike can climb on top of one tower and Tracy on top of the other, and they can watch the match uninterrupted!\nWhile Mike is busy stacking the boxes, Tracy would like to know the smallest number of boxes required to build two towers such that each of them has height at least $K$, or at least that it is impossible to build such towers. Can you help Tracy?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $H_1, H_2, \\ldots, H_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the smallest number of boxes required to build two towers, or $-1$ if it is impossible.\n\n-----Constraints-----\n- $1 \\leq T \\leq 5$\n- $1 \\leq N, K \\leq 4,000$\n- $1 \\leq H_i \\leq 10^5$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\leq N, K \\leq 100$\n- $1 \\leq H_i \\leq 100$ for each valid $i$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n8 38\n7 8 19 7 8 7 10 20\n4 5\n2 10 4 9\n\n-----Example Output-----\n7\n2\n\n-----Explanation-----\nExample case 1: The first tower can be built with boxes $8 + 10 + 20 = 38$ and the second tower with boxes $7 + 7 + 8 + 19 = 41$. In this case, the box with height $7$ is left unused.\nExample case 2: We only need the box with height $10$ for one tower and the box with height $9$ for the other tower.\n\n Examples: \nInput: \n['2', '8 38', '7 8 19 7 8 7 10 20', '4 5', '2 10 4 9']\nOutput: \n ['7', '2']\n",
  "1271": "Problem: \nYou are given a set $S$ and $Q$ queries. Initially, $S$ is empty. In each query:\n- You are given a positive integer $X$.\n- You should insert $X$ into $S$.\n- For each $y \\in S$ before this query such that $y \\neq X$, you should also insert $y \\oplus X$ into $S$ ($\\oplus$ denotes the XOR operation).\n- Then, you should find two values $E$ and $O$: the number of elements of $S$ with an even number of $1$-s and with an odd number of $1$-s in the binary representation, respectively.\nNote that a set cannot have duplicate elements, so if you try to insert into $S$ an element that is already present in $S$, then nothing happens.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $Q$.\n- Each of the next $Q$ lines contains a single integer $X$ describing a query.\n\n-----Output-----\nFor each query, print a single line containing two space-separated integers $E$ and $O$.\n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $1 \\le Q, X \\le 10^5$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\le Q \\le 1,000$\n- $1 \\le X \\le 128$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n3\n4\n2\n7\n\n-----Example Output-----\n0 1\n1 2\n3 4\n\n-----Explanation-----\nExample case 1:\n- Initially, the set is empty: $S = \\{\\}$.\n- After the first query, $S = \\{4\\}$, so there is only one element with an odd number of $1$-s in the binary representation (\"100\").\n- After the second query, $S = \\{4,2,6\\}$, there is one element with an even number of $1$-s in the binary representation ($6$ is \"110\") and the other two elements have an odd number of $1$-s.\n- After the third query, $S = \\{4,2,6,7,3,5,1\\}$.\n\n Examples: \nInput: \n['1', '3', '4', '2', '7']\nOutput: \n ['0 1', '1 2', '3 4']\n",
  "1272": "Problem: \nGiven an integer $x$, find two non-negative integers $a$ and $b$ such that $(a \\wedge b) + (a \\vee b) = x$, where $\\wedge$ is the bitwise AND operation and $\\vee$ is the bitwise OR operation.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $x$.\n\n-----Output-----\nIf there is no valid pair $(a, b)$, print a single line containing the integer $-1$. Otherwise, print a single line containing two space-separated integers $a$ and $b$.\nIf there are multiple solutions, you may print any one of them.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le x \\le 10^{18}$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\le T \\le 200$\n- $1 \\le x \\le 200$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n1\n8\n\n-----Example Output-----\n0 1\n5 3\n\n Examples: \nInput: \n['2', '1', '8']\nOutput: \n ['0 1', '5 3']\n",
  "1273": "Problem: \nThere is a haunted town called HauntedLand. The structure of HauntedLand can be thought of as a grid of size n * m. There is a house in each cell of the grid. Some people have fled from their houses because they were haunted. '.' represents a haunted house whereas '*' represents a house in which people are living.\n\nOne day, Devu, the famous perfumer came to town with a perfume whose smell can hypnotize people. Devu can put the perfume in at most one of the houses. This takes Devu one second. Then, the perfume spreads from one house (need not be inhabited by people) to all its adjacent houses in one second, and the cycle continues. Two houses are said to be a adjacent to each other, if they share a corner or an edge, i.e., each house (except those on the boundaries) will have 8 adjacent houses.\n\nYou want to save people from Devu's dark perfumery by sending them a message to flee from the town. So, you need to estimate the minimum amount of time Devu needs to hypnotize all the people? Note that if there are no houses inhabited by people, Devu doesn't need to put perfume in any cell.\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFirst line of each test case contains two space separated integers n, m denoting the dimensions of the town.\nFor each of next n lines, each line has m characters (without any space) denoting a row of houses of the town.\n\n-----Output-----\nFor each test case, output a single integer corresponding to the answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\nSubtask #1: (40 points) \n\n- 1 \u2264 n, m \u2264 100Subtask #2: (60 points) \n\n- 1 \u2264 n, m \u2264 1000\n\n-----Example-----\nInput:\n2\n2 2\n*...\n3 4\n.*..***..*..\n\nOutput:\n1\n2\n\n-----Explanation-----\nIn the first example, it will take Devu one second for putting the perfume at the only house. So, the answer is 1.\n\nIn the second example, He will first put the perfume at the * at cell (1, 1) (assuming 0-based indexing).\n\nNow, it will take Devu 1 secs to put perfume. In the next second, the perfume will spread to all of its adjacent cells, thus making each house haunted.\nSo, the answer is 2.\n\n Examples: \nInput: \n['2', '2 2', '*.', '..', '3 4', '.*..', '***.', '.*..']\nOutput: \n ['1', '2']\n",
  "1274": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n1121\n1222\n112131\n122232\n132333\n11213141\n12223242\n13233343\n14243444\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['3', '2', '3', '4']\nOutput: \n ['1121', '1222', '112131', '122232', '132333', '11213141', '12223242', '13233343', '14243444']\n",
  "1275": "Problem: \nN Soldiers are lined up for a memory test. They are numbered from 0 to N-1 from left to right. \n\nIn the test, there are M rounds. In each round, Captain selects one position. Soldier at that position will be numbered 0. All the soldiers to the right of selected position will be numbered one greater than the soldier to his left. All the soldiers to the left of selected position will be numbered one greater than the soldier to his right. \n\neg. if N = 6 and selected position is 3, then the numbering will be [3, 2, 1, 0, 1, 2].\n\nAfter M rounds, Captain asked each soldier to shout out the greatest number he was assigned during the M rounds. In order to check the correctness, Captain asked you to produce the correct values for each soldier (That is the correct value each soldier should shout out).\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases.\nFirst line of each test case contains two integers, N and M.\nSecond line of each test case contains M integers, the positions selected by Captain, in that order.\n\n-----Output-----\nFor each test case, output one line with N space separated integers.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^4\n- 1 \u2264 N \u2264 10^5\n- 1 \u2264 M \u2264 10^5\n- 1 \u2264 Sum of N over all testcases \u2264 10^5\n- 1 \u2264 Sum of M over all testcases \u2264 10^5\n- 0 \u2264 Positions selected by captain \u2264 N-1\n\n-----Example-----\nInput\n2\n4 1\n1\n6 2\n2 3\n\nOutput\n1 0 1 2\n3 2 1 1 2 3\n\n Examples: \nInput: \n['2', '4 1', '1', '6 2', '2 3']\nOutput: \n ['1 0 1 2', '3 2 1 1 2 3']\n",
  "1276": "Problem: \nChef Tobby is trying to run a code given to him by Bhuvan for an experiment they want to include in the manuscript to be submitted to a conference. The deadline to submit the manuscript is within a couple of hours and Chef Tobby needs to finish the experiments before then.\nThe code given by Bhuvan is the following which runs given an array of N integers and another integer K :\nvoid recurse ( array a, int n )\n{\n\t// n = size of array\n\tdefine array b currently empty\n\tconsider all 2^n subsets of a[]\n\t{\n\t\tx = bitwise OR of elements in the subsets\n\t\tadd x into \"b\" if it is not present yet\n\t}\n\tif (sizeof( b ) == 1 << k)\n\t{\n\t\tprintf(\u201cWon\u201d);\n\t\treturn;\n\t}\n\trecurse ( b, sizeof( b ) );\n}\n\nChef Tobby tried to run an experiment with only one integer in the array with value 2 and K = 3. To his horror, he found out that the algorithm is resulting in an infinite loop. He is livid with the possibility that the algorithm can lead to infinite loops for certain cases. On closer inspection he determines that it might be possible to insert additional elements in the initial array to subvert the problem. Since time is very less, Chef Tobby would like to insert the minimum number of elements.\nChef Tobby has to finish writing the paper, so he asks his graduate student Leamas to fix it. Leamas has no idea how to fix the problem so he asks you for help.\n\n-----Input section-----\nThe first line contains T, the number of test cases.\nEach test case consists of 2 lines. The first line contains 2 integers N and K, denoting the number of elements in the array and parameter mentioned in problem statement.\nNext line contains N space separated integers, denoting the elements of the array.\n\n-----Output section-----\nOutput the minimum number of elements that need to be inserted so that inifinite loop can be avoided.\n\n-----Input constraints-----\n1 \u2264 T \u2264 10\n1 \u2264 Sum of N over all test cases \u2264 105\n1 \u2264 K \u2264 20\n0 \u2264 A[i] \u2264 2K-1, where A[i] denotes the ith element of the array.\n\n-----Sample Input - 1-----\n1\n2 2\n3 1\n\n-----Sample Output - 1-----\n1\n\n-----Explanation - 1-----\nYou can win the game by inserting the element 2 into the array.\n\n-----Sample Input - 2-----\n1\n7 3\n3 7 5 4 6 2 1\n\n-----Sample Output - 2-----\n0\n\n-----Explanation - 2-----\nThe initial array will result will terminate in the first step of algorithm only. Thus there is no need to insert any new element.\n\n Examples: \nInput: \n['- 1', '1', '2 2', '3 1']\nOutput: \n ['1']\n",
  "1277": "Problem: \nChef recently opened a big e-commerce website where her recipes can be bought online. It's Chef's birthday month and so she has decided to organize a big sale in which grand discounts will be provided.\nIn this sale, suppose a recipe should have a discount of x percent and its original price (before the sale) is p. Statistics says that when people see a discount offered over a product, they are more likely to buy it. Therefore, Chef decides to first increase the price of this recipe by x% (from p) and then offer a discount of x% to people.\nChef has a total of N types of recipes. For each i (1 \u2264 i \u2264 N), the number of recipes of this type available for sale is quantityi, the unit price (of one recipe of this type, before the x% increase) is pricei and the discount offered on each recipe of this type (the value of x) is discounti.\nPlease help Chef find the total loss incurred due to this sale, if all the recipes are sold out.\n\n-----Input-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N denoting the number of recipe types.\n- N lines follow. The i-th of these lines contains three space-separated integers pricei, quantityi and discounti describing the i-th recipe type.\n\n-----Output-----\nFor each test case, print a single line containing one real number \u2014 the total amount of money lost. Your answer will be considered correct if it has an absolute error less than 10-2.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 pricei, quantityi \u2264 100 for each valid i\n- 0 \u2264 discounti \u2264 100 for each valid i\n\n-----Subtasks-----\nSubtask #1 (30 points): 1 \u2264 N \u2264 100\nSubtask #2 (70 points): original constraints\n\n-----Example-----\nInput:\n\n2\n2\n100 5 10\n100 1 50\n3\n10 10 0\n79 79 79\n100 1 100\n\nOutput:\n\n30.000000000\n3995.0081000\n\n-----Explanation-----\nExample case 1: There are two recipes.\nThere are 5 recipes of the first type, each of them has a price of 100 and there is a 10% discount provided on it. Therefore, Chef first increases the price of each recipe by 10%, from 100 to 110. After that, she decreases the price by 10%, which makes the final price 99. The amount of money lost for each unit is 1, thus losing 5 for recipes of the first type.\nThere is only one recipe of the second type, with price 100 and a 50% discount. Therefore, Chef increases the price of the recipe by 50% from 100 to 150 and after that, she decreases its price by 50% to make its final price 75. She loses 25 for this recipe.\nOverall, the amount of money Chef loses is 30.\n\n Examples: \nInput: \n['2', '2', '100 5 10', '100 1 50', '3', '10 10 0', '79 79 79', '100 1 100']\nOutput: \n ['30.000000000', '3995.0081000']\n",
  "1278": "Problem: \nA plot of land can be described by $M x N$ dots such that horizontal and vertical distance between any two dots is 10m.\nMr. Wolf would like to build a house in the land such that all four sides of the house are equal. Help Mr. Wolf to find the total number of unique positions where houses can be built. Two positions are different if and only if their sets of four dots are different.\n\n-----Input:-----\nThe first line of the input gives the number of test cases, $T$. $T$ lines follow. Each line has two integers $M$ and $N$: the number of dots in each row and column of the plot, respectively.\n\n-----Output:-----\nFor each test case, output one single integer containing the total number of different positions where the house can be built.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $2 \\leq M \\leq 10^9$\n- $2 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n4\n\n2 4\n\n3 4\n\n4 4\n\n1000 500  \n\n-----Sample Output:-----\n3\n\n10\n\n20\n\n624937395  \n\n-----EXPLANATION:-----\nMap 1\n\nMap 2\n\nMap 3\n\n Examples: \nInput: \n['4', '2 4', '3 4', '4 4', '1000 500']\nOutput: \n ['3', '10', '20', '624937395']\n",
  "1279": "Problem: \nChef hates unoptimized codes and people who write such codes. One fine day he decided to look through the kitchen's codebase and found a function whose pseudo-code is given here:\n\ninput: integer N, list X[1, 2, ..., N], list Y[1, 2, ..., N]\n\noutput: integer res\n\nfunction:\n\nset res = 0;\nfor i := 1 to N do\nfor j := 1 to N do\nfor k := 1 to N do\nif (X[i] = X[j]) OR (X[j] = X[k]) OR (X[k] = X[i])\ncontinue\nelse\nset res = max(res, Y[i] + Y[j] + Y[k])\nreturn res\n\nLuckily enough this code gets triggered only if the Head Chef makes a submission. But still there is a possibility that this can crash the judge. So help Chef by writing a new function which does the same thing but is faster.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains an integer N denoting the number of elements in the two lists.\n- The i-th of the next N lines contains a pair of space-separated integers denoting the values of X[i] and Y[i] respectively.\n\n-----Output-----\nFor each test case, output an integer corresponding to the return value of the function.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 105\n- 1 \u2264 X[i], Y[i] \u2264 108\n\n-----Example-----\nInput\n2\n3\n1 3\n3 1\n1 2\n5\n1 3\n2 4\n1 2\n3 2\n3 4\n\nOutput\n0\n11\n\n-----Explanation-----\nTestcase 2: The maximum is attained when i = 1, j = 2 and k = 5. This leads to res being 3 + 4 + 4 = 11. This value is attained in other iterations as well, but it never exceeds this, and hence this is the answer.\n\n Examples: \nInput: \n['2', '3', '1 3', '3 1', '1 2', '5', '1 3', '2 4', '1 2', '3 2', '3 4']\nOutput: \n ['0', '11']\n",
  "1280": "Problem: \nEmily and Mia are friends. Emily got Mia\u2019s essay paper, but since she is a prankster, she decided to meddle with the words present in the paper. She changes all the words in the paper into palindromes. To do this, she follows two rules: \n- In one operation she can only reduce the value of an alphabet by 1, i.e.  she can change \u2018d\u2019 to \u2018c\u2019, but she cannot change \u2018c\u2019 to \u2018d\u2019 or \u2018d\u2019 to \u2018b\u2019. \n- The alphabet \u2018a\u2019 will not be reduced any further. \nEach reduction in the value of any alphabet is counted as a single operation. Find the minimum number of operations required to convert a given string into a palindrome.\n\n-----Input:-----\n- The first line contains an integer $T$, denoting the number of test cases. \n- Each test case consists of a string $S$ containing only lowercase characters with no spaces.\n\n-----Output:-----\nFor each test case on a new line, print the minimum number of operations for the corresponding test case.\n\n-----Constraints-----\n- $1<=T<=10$\n- $1<=|S|<=10^7$, where $|S|$ denotes length of string S.\n\n-----Sample Input:-----\n4 \nabc \nabcba \nabcd \ncba\n\n-----Sample Output:-----\n2 \n0\n4\n2\n\n-----EXPLANATION:-----\nFor the first test case string = \u201cabc\u201d \nc->b->a so the string become \u201caba\u201d which is a palindrome. For this we perform 2 operations\n\n Examples: \nInput: \n['4', 'abc', 'abcba', 'abcd', 'cba']\nOutput: \n ['2', '0', '4', '2']\n",
  "1281": "Problem: \nChef likes all arrays equally. But he likes some arrays more equally than others. In particular, he loves Rainbow Arrays. \nAn array is Rainbow if it has the following structure:\n- First a1 elements equal 1. \n- Next a2 elements equal 2. \n- Next a3 elements equal 3. \n- Next a4 elements equal 4. \n- Next a5 elements equal 5. \n- Next a6 elements equal 6. \n- Next a7 elements equal 7. \n- Next a6 elements equal 6. \n- Next a5 elements equal 5. \n- Next a4 elements equal 4. \n- Next a3 elements equal 3. \n- Next a2 elements equal 2. \n- Next a1 elements equal 1. \n- ai can be any non-zero positive integer.\n- There are no other elements in array. \n\nHelp Chef in finding out if the given array is a Rainbow Array or not. \n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases.\n- The first line of each test case contains an integer N, denoting the number of elements in the given array. \n- The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of array. \n\n-----Output-----\n- For each test case, output a line containing \"yes\" or \"no\" (without quotes) corresponding to the case if the array is rainbow array or not. \n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 7 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10\n\n-----Subtasks-----\n- Subtask 1 (100 points) : Original constraints\n\n-----Example-----\nInput\n3\n19\n1 2 3 4 4 5 6 6 6 7 6 6 6 5 4 4 3 2 1\n14\n1 2 3 4 5 6 7 6 5 4 3 2 1 1\n13\n1 2 3 4 5 6 8 6 5 4 3 2 1\n\nOutput\nyes\nno\nno\n\n-----Explanation-----\nThe first example satisfies all the conditions. \nThe second example has 1 element of value 1 at the beginning and 2 elements of value 1 at the end. \nThe third one has no elements with value 7 after elements with value 6.\n\n Examples: \nInput: \n['3', '19', '1 2 3 4 4 5 6 6 6 7 6 6 6 5 4 4 3 2 1', '14', '1 2 3 4 5 6 7 6 5 4 3 2 1 1', '13', '1 2 3 4 5 6 8 6 5 4 3 2 1']\nOutput: \n ['yes', 'no', 'no']\n",
  "1282": "Problem: \nYou are given positive integers $L$ and $R$. You have to find the sum\nS=\u2211i=LR(L\u2227(L+1)\u2227\u2026\u2227i),S=\u2211i=LR(L\u2227(L+1)\u2227\u2026\u2227i),S = \\sum_{i=L}^R \\left(L \\wedge (L+1) \\wedge \\ldots \\wedge i\\right) \\,,\nwhere $\\wedge$ denotes the bitwise AND operation. Since the sum could be large, compute it modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $L$ and $R$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the sum $S$ modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le L \\le R \\le 10^{18}$\n\n-----Example Input-----\n2\n1 4\n4 10\n\n-----Example Output-----\n1\n16\n\n-----Explanation-----\nExample case 1: The sum is 1 + 1 AND 2 + 1 AND 2 AND 3 + 1 AND 2 AND 3 AND 4 = 1 + 0 + 0 + 0 = 1.\nExample case 2: The sum is 4 + 4 AND 5 + 4 AND 5 AND 6 + 4 AND 5 AND 6 AND 7 + \u2026 + 4 AND 5 AND \u2026 AND 10 = 4 + 4 + \u2026 + 0 = 16.\n\n Examples: \nInput: \n['2', '1 4', '4 10']\nOutput: \n ['1', '16']\n",
  "1283": "Problem: \nChef likes prime numbers. However, there is one thing he loves even more. Of course, it's semi-primes! A semi-prime number is an integer which can be expressed as a product of two distinct primes. For example, $15 = 3 \\cdot 5$ is a semi-prime number, but $1$, $9 = 3 \\cdot 3$ and $5$ are not.\nChef is wondering how to check if an integer can be expressed as a sum of two (not necessarily distinct) semi-primes. Help Chef with this tough task!\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if it is possible to express $N$ as a sum of two semi-primes or \"NO\" otherwise.\n\n-----Constraints-----\n- $1 \\le T \\le 200$\n- $1 \\le N \\le 200$\n\n-----Example Input-----\n3\n30\n45\n62\n\n-----Example Output-----\nYES\nYES\nNO\n\n-----Explanation-----\nExample case 1: $N=30$ can be expressed as $15 + 15 = (3 \\cdot 5) + (3 \\cdot 5)$.\nExample case 2: $45$ can be expressed as $35 + 10 = (5 \\cdot 7) + (2 \\cdot 5)$.\nExample case 3: $62$ cannot be expressed as a sum of two semi-primes.\n\n Examples: \nInput: \n['3', '30', '45', '62', '']\nOutput: \n ['YES', 'YES', 'NO']\n",
  "1284": "Problem: \nCoach Khaled is a swag teacher in HIT (Hag Institute of Technology). However, he has some obsession problems.\nRecently, coach Khaled was teaching a course in building 8G networks using TV antennas and programming them with assembly. There are $N$ students (numbered $1$ through $N$) in his class; for some reason, this number is always a multiple of $4$. The final exam has finished and Khaled has all the scores of his $N$ students. For each valid $i$, the score of the $i$-th student is $A_i$; each score is an integer between $0$ and $100$. Currently, the score-grade distribution is as follows:\n- grade D for score smaller than $60$\n- grade C for score greater or equal to $60$, but smaller than $75$\n- grade B for score greater or equal to $75$, but smaller than $90$\n- grade A for score greater or equal to $90$\nHowever, coach Khaled is not satisfied with this. He wants exactly $N/4$ students to receive each grade (A, B, C and D), so that the grades are perfectly balanced. The scores cannot be changed, but the boundaries between grades can. Therefore, he wants to choose three integers $x$, $y$ and $z$ and change the grade distribution to the following (note that initially, $x = 60$, $y = 75$ and $z = 90$):\n- grade D for score smaller than $x$\n- grade C for score greater or equal to $x$, but smaller than $y$\n- grade B for score greater or equal to $y$, but smaller than $z$\n- grade A for score greater or equal to $z$\nYour task is to find thresholds $x$, $y$ and $z$ that result in a perfect balance of grades. If there are multiple solutions, choose the one with the maximum value of $x+y+z$ (because coach Khaled wants seem smarter than his students); it can be proved that there is at most one such solution. Sometimes, there is no way to choose the thresholds and coach Khaled would resign because his exam questions were low-quality.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, if there is no solution, print a single line containing the integer $-1$; otherwise, print a single line containing three space-separated integers $x$, $y$ and $z$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $4 \\le N \\le 100$\n- $N$ is divisible by $4$\n- $0 \\le A_i \\le 100$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $5,000$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n6\n4\n90 25 60 75\n8\n27 29 92 92 67 67 85 92\n4\n0 1 2 3\n4\n100 100 100 100\n4\n30 30 40 50\n4\n30 40 40 50\n\n-----Example Output-----\n60 75 90\n-1\n1 2 3\n-1\n-1\n-1\n\n-----Explanation-----\nExample case 1: The default distribution is the correct one.\nExample case 4: All students have the same score and grade, so there is no way to choose the thresholds and coach Khaled must resign.\n\n Examples: \nInput: \n['6', '4', '90 25 60 75', '8', '27 29 92 92 67 67 85 92', '4', '0 1 2 3', '4', '100 100 100 100', '4', '30 30 40 50', '4', '30 40 40 50']\nOutput: \n ['60 75 90', '-1', '1 2 3', '-1', '-1', '-1']\n",
  "1285": "Problem: \nChef is learning linear algebra. Recently, he learnt that for a square matrix $M$, $\\mathop{\\rm trace}(M)$ is defined as the sum of all elements on the main diagonal of $M$ (an element lies on the main diagonal if its row index and column index are equal).\nNow, Chef wants to solve some excercises related to this new quantity, so he wrote down a square matrix $A$ with size $N\\times N$. A square submatrix of $A$ with size $l\\times l$ is a contiguous block of $l\\times l$ elements of $A$. Formally, if $B$ is a submatrix of $A$ with size $l\\times l$, then there must be integers $r$ and $c$ ($1\\le r, c \\le N+1-l$) such that $B_{i,j} = A_{r+i-1, c+j-1}$ for each $1 \\le i, j \\le l$.\nHelp Chef find the maximum trace of a square submatrix of $A$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $N$ space-separated integers $A_{i,1}, A_{i,2}, \\dots, A_{i, N}$ denoting the $i$-th row of the matrix $A$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the maximum possible trace.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 100$\n- $1 \\le A_{i,j} \\le 100$ for each valid $i, j$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n3\n1 2 5\n6 3 4\n2 7 1\n\n-----Example Output-----\n13\n\n-----Explanation-----\nExample case 1: The submatrix with the largest trace is \n6 3\n2 7\n\nwhich has trace equal to $6 + 7 = 13$. (This submatrix is obtained for $r=2, c=1, l=2$.)\n\n Examples: \nInput: \n['1', '3', '1 2 5', '6 3 4', '2 7 1']\nOutput: \n ['13']\n",
  "1287": "Problem: \nYou are given a string $s$. And you have a function $f(x)$ defined as:\nf(x) = 1, if $x$ is a vowel\nf(x) = 0, if $x$ is a constant\n\nYour task is to apply the above function on all the characters in the string s and convert \nthe obtained binary string in decimal number $M$.\nSince the number $M$ can be very large, compute it modulo $10^9+7$. \n\n-----Input:-----\n- The first line of the input contains a single integer $T$ i.e the no. of test cases. \n- Each test line contains one String $s$ composed of lowercase English alphabet letters. \n\n-----Output:-----\nFor each case, print a single line containing one integer $M$ modulo $10^9 + 7$.\n\n-----Constraints-----\n- $1 \u2264 T \u2264 50$\n- $|s|\u226410^5$\n\n-----Subtasks-----\n- 20 points : $|s|\u226430$\n- 80 points : $ \\text{original constraints}$\n\n-----Sample Input:-----\n1\nhello\n\n-----Sample Output:-----\n9\n\n Examples: \nInput: \n['1', 'hello']\nOutput: \n ['9']\n",
  "1288": "Problem: \nChef Shifu wanted to celebrate the success of his new restaurant with all his employees. He was willing to host a party and he had decided the location of the party as well. However, Chef Shifu was a shy person and wanted to communicate with the least possible employees to inform them about the party, and that these employees could inform their friends.\n\nNote that an employee could only inform his/her immediate friends about the party, not his/her friends\u2019 friends.\n\nChef Shifu has a list of all the friendships among his employees. Help him find the minimum number of employees he should inform, so that every employee knows about the celebration party.\n\n-----Input-----\nFirst line contains a single integer T - the total number of testcases.\n\nT testcases follow. For each testcase:\n\nThe first line contains 2 space-separated integers N and M - the total number of employees working under Chef Shifu and the number of friendship relations.\n\nM lines follow - each line contains 2 space-separated integers u and v, indicating that employee u is a friend of employee v and vice-versa.\n\nThe employees are numbered from 1 to N, and each employee is assigned a distinct integer.\n\n\n\n-----Output-----\nFor each testcase, print the minimum number of employees to be informed on a new line.\n\n-----Constraints-----\nSubtask 1: 5 points\n\n1 \u2264 T \u2264 5\n\n1 \u2264 N \u2264 4\n\n0 \u2264 M \u2264 N*(N-1)/2\n\n\n\nSubtask 2: 35 points\n\n1 \u2264 T \u2264 5\n\n1 \u2264 N \u2264 15\n\n0 \u2264 M \u2264 N*(N-1)/2\n\n\n\nSubtask 3: 60 points\n\n1 \u2264 T \u2264 5\n\n1 \u2264 N \u2264 20\n\n0 \u2264 M \u2264 N*(N-1)/2\n\n\n-----Example-----\nInput\n2\n3 3\n1 2\n2 3\n1 3\n4 3\n1 2\n2 3\n3 4\n\nOutput\n1\n2\n\nExplanation\n\nIn testcase 1, since every employee is a friend of every other employee, we just need to select 1 employee.\nIn testcase 2, selecting employees 2 and 4 would ensure that all 4 employees are represented.\n\nSimilarly, selecting employees 1 and 3 would also ensure that all 4 employees are selected.\n\nIn both cases, we must select 2 employees in the best case.\n\n Examples: \nInput: \n['2', '3 3', '1 2', '2 3', '1 3', '4 3', '1 2', '2 3', '3 4']\nOutput: \n ['1', '2']\n",
  "1289": "Problem: \nSo the Chef has become health conscious and is now lifting weights at the gym. But its his first time so the trainer gives him a simple job to do. \n\nHe has been given a weight lifting rod and N heavy weights, each weighing 20, 21, .... , 2n-1. He has to stick each of the \"N\" weights on the rod, one after another, in such a way that the right side is never heavier than the left side. At each step he chooses one of the weights that has not yet been fixed on the rod, and fix it on either the left side of the rod or the right, until all of the weights have been placed.\n\nNow help the chef and find out, in how many ways the chef can accomplish this?\n\n-----Input-----\nFirst line of input contains an integer T, the number of test cases. Then T test cases follow. Each line of test case contains one integer, N denoting the number of weights\n\n-----Output-----\nThe output contains T lines, each containing an integer denoting all possible combinations\n\n-----Example-----\nInput:\n3\n2\n5\n18\n\nOutput:\n3\n945\n221643095476699771875\n\n Examples: \nInput: \n['3', '2', '5', '18']\nOutput: \n ['3', '945', '221643095476699771875']\n",
  "1290": "Problem: \nWrite a program to obtain a number $(N)$ from the user and display whether the number is a one digit number, 2 digit number, 3 digit number or more than 3 digit number\n\n-----Input:-----\n- First line will contain the number $N$,\n\n-----Output:-----\nPrint \"1\" if N is a 1 digit number.\nPrint \"2\" if N is a 2 digit number.\nPrint \"3\" if N is a 3 digit number.\nPrint \"More than 3 digits\" if N has more than 3 digits.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000000$\n\n-----Sample Input:-----\n9\n\n-----Sample Output:-----\n1\n\n Examples: \nInput: \n['9']\nOutput: \n ['1']\n",
  "1293": "Problem: \nChef and his friend Miron were getting bored and decided to play a game. \nMiron thinks of a sequence of  N  integers (A1, A2, \u2026., AN) and gives Chef a matrix B, where Bi,j = |Ai - Aj|. He further tells Chef that A1 = 0. The game is for Chef to guess the sequence that Miron thought of. \nBut Miron is an adversarial player. Every time Chef tries to guess the sequence, he makes a change to the matrix. He makes such a change Q times. Each time, he replaces an entry in some row and the corresponding column with a new one leaving Chef to guess the sequence after each change. \nChef needs a friend to help him against such an adversarial player. Can you be that friend and help Chef find a suitable sequence A for the initial matrix B and also after each change Miron makes? \nNote that if several answers exist, then print the lexicographically smallest answer. Further, the numbers in the sequence can be negative.\n\n-----Input-----\n\nThe first line contains two space-separated integers N, Q. Each of the N subsequent lines contains N space-separated integers, denoting the matrix B.\n\nQ queries follow. Each query has two lines. The first line of each query contains an integer p, denoting the number of row and column that is changed. The second line of each query contains N space-separated integers F1, F2, F3, ... FN, denoting the new values to the corresponding cells of the matrix (you should make the following assignments Bi,p = Bp,i = Fi for all valid i). \n\n-----Output-----\nPrint Q + 1 lines which contain N space-separated integers, Miron's initial array and Miron's array after each query.\n\n-----Constraints-----\n- 3 \u2264 N \u2264  1000 \n- 1 \u2264 Q \u2264  1000 \n- 0 \u2264 Bi,j \u2264  5000 \n- 1 \u2264 p \u2264  n \n- 0 \u2264 Fi \u2264  5000 \n- it's guaranteed there's always an answer\n\n-----Example-----\nInput:\n3 2\n0 1 2\n1 0 1\n2 1 0\n1\n0 4 3\n2\n4 0 7\nOutput:\n0 -1 -2\n0 -4 -3\n0 -4 3\n\n-----Explanation-----\nExample case 1. Initially, sequence {0, 1, 2} is also suitable, but {0, -1, -2} is lexicografically smaller.\n\n Examples: \nInput: \n['3 2', '0 1 2', '1 0 1', '2 1 0', '1', '0 4 3', '2', '4 0 7']\nOutput: \n ['0 -1 -2', '0 -4 -3', '0 -4 3']\n",
  "1295": "Problem: \nIn the year 4242, the language Haskell has evolved so much that it has become an AI. It can solve very challenging problems, in very little time. Humanity is worried that Haskell will take over the world. All hopes remain tied to the Competitive Programming community as they are the expert in shaving milliseconds off code runtime. Haskell creators have found one particular task that if solved faster than Haskell itself, can be used to hack into Haskell's codebase and thus defeat it. The exact details of the task are as follows,\n\n\n\" Calculate the sum, S(N, K) = , for Q queries. Here Fi is ith Fibonacci number defined as: Fi = i if i = 0 or 1 and Fi = Fi-1 + Fi-2 if i >= 2. \"\n\n\nYou being a member of the Competitive Programming community are encouraged to make a submission to this task.\n\n-----Input-----\n\nThe first line contains a single integer Q, the number of queries.\n\nEach of the next Q lines contain two integers each, Ni and Ki.\n\n-----Output-----\n\nOutput Q lines with one integer each. The ith line should contain the value S(Ni, Ki).\n\n-----Constraints-----\n- 1 <= Q <= 5*104\n- 1 <= N <= 1018\n- 1 <= K <= 1018\n\n-----Example-----\nInput:\n1\n1 1\nOutput:\n1\n\n Examples: \nInput: \n['1', '1 1']\nOutput: \n ['1']\n",
  "1297": "Problem: \nChef has just started Programming, he is in first year of Engineering. Chef is reading about Relational Operators. \n\nRelational Operators are operators which check relatioship between two values. Given two numerical values A and B you need to help chef in finding the relationship between them that is, \n\n- First one is greater than second or,\n- First one is less than second or,\n- First and second one are equal.\n\n-----Input-----\nFirst line contains an integer T, which denotes the number of testcases. Each of the T lines contain two integers A and B. \n\n-----Output-----\nFor each line of input produce one line of output. This line contains any one of the relational operators\n\n'<' , '>' , '='.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10000\n- 1 \u2264 A, B \u2264 1000000001\n\n-----Example-----\nInput:\n3\n10 20\n20 10\n10 10\n\nOutput:\n<\n>\n=\n\n-----Explanation-----\nExample case 1. In this example 1 as 10 is lesser than 20.\n\n Examples: \nInput: \n['3', '10 20', '20 10', '10 10']\nOutput: \n ['<', '>', '=']\n",
  "1298": "Problem: \nBatman is about to face Superman so he decides to prepare for the battle by upgrading his Batmobile. He manufactures multiple duplicates of his standard Batmobile each tweaked in a different way such that the maximum speed of each is never less than that of the standard model.\nAfter carrying out this process, he wishes to know how many of his prototypes are faster than his standard Batmobile?\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow: \n- The first line of each test case contains a single integer N denoting the number of copies of the standard Batmobile.\n- The second line contains a sequence of N+1 space-separated integers, S0 to SN, sorted in non-decreasing order separated by space. S0 is the maximum speed of the standard Batmobile. S1 to SN denote the maximum speeds of the prototypes.\n\n-----Output-----\n- For each test case, output a single line containing an integer denoting the answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 Si \u2264 109\n\n-----Example-----\nInput:\n2\n4\n1 2 3 4 5\n5\n1 10 100 1000 10000 100000\n\nOutput:\n4\n5\n\n Examples: \nInput: \n['2', '4', '1 2 3 4 5', '5', '1 10 100 1000 10000 100000']\nOutput: \n ['4', '5']\n",
  "1299": "Problem: \nChef has $N$ dishes of different types arranged in a row: $A_1, A_2, \\ldots, A_N$, where $A_i$ denotes the type of the $i^{th}$ dish. He wants to choose as many dishes as possible from the given list but while satisfying two conditions: \n- He can choose only one type of dish.   \n- No two chosen dishes should be adjacent to each other. \nChef wants to know which type of dish he should choose from, so that he can pick the maximum number of dishes.\nExample:\n\nGiven $N$=$9$ and $A$=$[1, 2, 2, 1, 2, 1, 1, 1, 1]$.\n\nFor type 1, Chef can choose at most four dishes. One of the ways to choose four dishes of type 1 is $A_1$, $A_4$, $A_7$ and $A_9$.\n\nFor type 2, Chef can choose at most two dishes. One way is to choose $A_3$ and $A_5$.\n\nSo in this case, Chef should go for type 1, in which he can pick more dishes.\n\n-----Input:-----\n- The first line contains $T$, the number of test cases. Then the test cases follow.\n- For each test case, the first line contains a single integer $N$.\n- The second line contains $N$ integers $A_1, A_2, \\ldots, A_N$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the type of the dish that Chef should choose from. If there are multiple answers, print the smallest one.\n\n-----Constraints-----\n- $1 \\le T \\le 10^3$\n- $1 \\le N \\le 10^3$\n- $1 \\le A_i \\le 10^3$\n- Sum of $N$ over all test cases doesn't exceed $10^4$\n\n-----Sample Input:-----\n3\n5\n1 2 2 1 2\n6\n1 1 1 1 1 1\n8\n1 2 2 2 3 4 2 1\n\n-----Sample Output:-----\n1\n1\n2\n\n-----Explanation:-----\nTest case 1:\n\nFor both type 1 and type 2, Chef can pick at most two dishes. In the case of multiple answers, we pick the smallest one. Hence the answer will be $1$.\nTest case 2:\n\nThere are only dishes of type 1. So the answer is $1$.\nTest case 3:\n\nFor type 1, Chef can choose at most two dishes. For type 2, he can choose three dishes. For type 3 and type 4, Chef can choose the only dish available. Hence the maximum is in type 2 and so the answer is $2$.\n\n Examples: \nInput: \n['3', '5', '1 2 2 1 2', '6', '1 1 1 1 1 1', '8', '1 2 2 2 3 4 2 1']\nOutput: \n ['1', '1', '2']\n",
  "1300": "Problem: \nSunita has lots of tasks pending and she has no time to complete.  She needs your help and wants you complete the task.\nYou are given a list of integers and two values $N$ and $K$ $-$ the size of array of integers and the numbers of partitions to be made respectively.\nYou have to partition the list of integers without changing the order of elements ,into exactly $K$ parts. \nCalculate Greatest Common Divisor of all $K$ partition and sum up the gcd values for each partition.\nMaximize the sum obtained. \nCan you help Sunita ? \n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- Each test case contains of a single line of input, two integers $N, K$. \n- Next line contains $N$ integers $-$ the list of integers.\n\n-----Output:-----\nFor each test case, output in a single line integer $-$ the maximal result.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, K \\leq 250$\n- $1 \\leq K \\leq N$\n- $1 \\leq A[i] \\leq 1e5$\n\n-----Sample Input:-----\n1\n4 2\n5 6 3 2\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\n[5] [6 3 2] is the best partition [5 + GCD(6,3,2)] = 6\n\n Examples: \nInput: \n['1', '4 2', '5 6 3 2']\nOutput: \n ['6']\n",
  "1301": "Problem: \nThe chef has a number N, Cheffina challenges chef to form the largest number X from the digits of N.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n212\n\n-----Sample Output:-----\n2\n221\n\n Examples: \nInput: \n['2', '2', '212']\nOutput: \n ['2', '221']\n",
  "1302": "Problem: \nThe  Chef  has bought $N$ boxes of Tiles. The number of tiles present in  $i^{th}$ box is  $i$  ($i   $ varies from $1$ to $N$) . The Chef  has two houses  with  $N$  rooms  each, whose  floors  is a square with area $(i*i)$ ,i varies from $(1....N)$. He want to distribute equal number of tiles from $i^{th}$ box to any two rooms (each room must belong to one house ) such that all tiles  of $i^ { th}$  box is used and floor of  both rooms of different houses are tiled completely.\nSince chef is busy doing some other works so he wants your help to count the total number of rooms of both houses that will be tiled completely.\nNote $:$ size of  each tile present in boxes has length and breadth equal to $1$. It is not mandatory to use all the boxes.\nA room should be tilled completely from a single box.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains one integer $N$.\n\n-----Output:-----\nFor each testcase print  the total number of rooms of both houses that will be tiled completely.\n\n-----Constraints-----\n- $1 \\leq T \\leq 5000$\n- $1 \\leq N \\leq 10^{12}$\n\n-----Sample Input:-----\n1\n16\n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----\nThe room $1$ and $2$ of both the houses are completely tiled.\n\n Examples: \nInput: \n['1', '16']\nOutput: \n ['4']\n",
  "1303": "Problem: \nAfter the death of their mother, Alphonse and Edward now live with Pinako and Winry.\n\nPinako is worried about their obsession with Alchemy, and that they don't give attention to their studies.\nSo to improve their mathematical solving ability, every day she gives a mathematical problem to solve. They can go out to practice Alchemy only after they have solved the problem.\nHelp them by solving the given problem, so that they can go early today for their Alchemy practice.    \nGiven an array A$A$ of N$N$ non-negative integers and two integers K$K$ and M$M$. Find the number of subsequences of array A$A$ of length K$K$ which satisfies the following property:\n\nSuppose the subsequence is S=S1S2\u2026SK$S = S_1S_2 \\ldots S_K$, then for all i$i$ such that 1\u2264i\u2264K$1 \\leq i \\leq K$,\nSi%M=i%M S_i \\% M = i \\% M  \nshould hold true, where Si$S_i$ denotes the i$i$-th element of the subsequence, using 1-based indexing.\nAs the number of subsequences may be very large, output the answer modulo 1000000007$1000000007$.     \nPS: We also proposed the idea of making a look-alike clone through alchemy and keeping it in front of the study table. But it seems impossible to convince Edward to make a clone of his exact same height, and not taller than him. So solving the problem for him was a better choice.   \n\n-----Input:-----\n- The first line contains T$T$, the number of test cases. Then the test cases follow. \n- For every test case, the first line contains N$N$, K$K$ and M$M$.\n- For every test case, the second line contains N$N$ integers Ai$A_{i}$ ( 1\u2264i\u2264N$1 \\leq i \\leq N$).\n\n-----Output:-----\nFor every test case, output in a single line an integer denoting the number of valid subsequences modulo 109+7$10^9+7$\n\n-----Constraints-----\n- 1\u2264T\u2264100$1 \\leq T \\leq 100$ \n- 1\u2264N\u2264104$1 \\leq N \\leq 10^{4}$ \n- 1\u2264K\u2264N$1 \\leq K \\leq N$ \n- \u2308K100\u2309\u2264M\u2264100\u00d7K$\\lceil \\frac{K}{100}\\rceil \\leq M \\leq  100\\times K$ \n- 0\u2264Ai\u2264109$0 \\leq A_{i} \\leq 10^{9}$ \n\n-----Sample Input:-----\n1\n12 4 3\n4 5 6 7 1 4 6 9 0 0 10 2\n\n-----Sample Output:-----\n8\n\n-----Explanation:-----\nThe subsequences of length 4$4$, satisfying the given criteria are [4,5,6,7]$[4, 5, 6, 7]$, [4,5,6,10]$[4, 5, 6, 10]$, [4,5,6,10]$[4, 5, 6, 10]$, [4,5,6,1]$[4, 5, 6, 1]$, [4,5,9,10]$[4, 5, 9, 10]$ ,[4,5,6,4]$[4, 5, 6, 4]$ , [4,5,0,10]$[4, 5, 0, 10]$ and [4,5,0,10]$[4, 5, 0, 10]$. This accounts for a total of 8$8$ valid subsequences.\nLet us take one subsequence and see why it satisfies the given property. Consider [4,5,9,10]$[4, 5, 9, 10]$. \n- S1%M=4%3=1=1%3=1%M$ S_1 \\% M = 4 \\% 3 = 1 = 1 \\% 3 = 1 \\% M $\n- S2%M=5%3=2=2%3=2%M$ S_2 \\% M = 5 \\% 3 = 2 = 2 \\% 3 = 2 \\% M $\n- S3%M=9%3=0=3%3=3%M$ S_3 \\% M = 9 \\% 3 = 0 = 3 \\% 3 = 3 \\% M $\n- S4%M=10%3=1=4%3=4%M$ S_4 \\% M = 10 \\% 3 = 1 = 4 \\% 3 = 4 \\% M $\nAll the valid i$i$ satisfy the condition, and hence this is a valid subsequence.\n\n Examples: \nInput: \n['1', '12 4 3', '4 5 6 7 1 4 6 9 0 0 10 2']\nOutput: \n ['8']\n",
  "1304": "Problem: \nIt is an interesting exercise to write a program to print out all permutations of $1, 2, \u2026, n$. However, since there are $6227020800$ permutations of $1, 2, \u2026, 13$, it is unlikely that we would ever run this program on an input of size more than $10$.\nHowever, here is another interesting problem whose solution can also be used to generate permutations. We can order the permutations of $1, 2, \u2026, n$ under the lexicographic (or dictionary) order. Here are the permutations of $1,2,3$ in lexicographic order:\n123132213231312321123132213231312321 1 \\, 2 \\, 3 \\quad    1 \\, 3 \\, 2 \\quad     2 \\, 1 \\, 3 \\quad     2 \\, 3 \\, 1 \\quad     3 \\, 1 \\, 2 \\quad     3 \\, 2 \\, 1 \nThe problem we have is the following: given a permutation of $1,2, \u2026, n$, generate the next permutation in lexicographic order. For example, for $2 3 1 4$ the answer is $2 3 4 1$.\n\n-----Input:-----\nThe first line of the input contains two integers, $N$ and $K$. This is followed by $K$ lines, each of which contains one permutation of $1, 2,\u2026,N$.\n\n-----Output:-----\nThe output should consist of $K$ lines. Line $i$ should contain the lexicographically next permutation correponding to the permutation on line $i+1$ in the input.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 1000$.\n- $1 \\leq K \\leq 10$.\n\n-----Sample input-----\n3 2\n3 1 2\n2 3 1\n\n-----Sample output-----\n3 2 1\n3 1 2\n\n Examples: \nInput: \n['3 2', '3 1 2', '2 3 1', '']\nOutput: \n ['3 2 1', '3 1 2 ']\n",
  "1305": "Problem: \nDue to the COVID pandemic, there has been an increase in the number of cases if a hospital. The management has decided to clear a large square area for the patients and arrange for beds. But the beds can't be too near to each other.\nThe area is of dimension $N$ x $N$\nThe whole area is already divided into blocks. $1$ means there's a bed in the block, $0$ denotes there isn't. Note, beds placed on consecutive diagonal blocks are safe.\nThis is a SAFE example:\n1 0\n0 1\nThis is an UNSAFE example:\n0 1 1\n0 0 0\n1 0 0\nTo avoid spreading the virus even further, you have to make sure no two adjacent blocks have beds in them. This is done to maintain distance between beds.\nReturn an output of \"SAFE\" if you find the workers have arranged the beds with due consideration to the distance needed. Return \"UNSAFE\" otherwise.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Next line contains $N$.\n- Next $N$ lines will contain $N$ number of space-separated integers $Ai$ which make denote the beds in the area.\n\n-----Output:-----\nFor each test case, output in a single line whether the total arrangement is \"SAFE\" or \"UNSAFE\". Even if there's a single unsafe bed in the whole area, report the whole area as \"UNSAFE\".\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $0 \\leq Ai \\leq 1$\n- $2 \\leq N \\leq 100$\n\n-----Subtasks-----\n- 30 points : $1 \\leq N \\leq 7$\n- 70 points : Original constraints\n\n-----Sample Input:-----\n2\n4\n1 0 1 0\n0 0 0 1\n0 1 0 0\n1 0 0 1\n4\n1 0 1 0\n0 0 0 0\n1 0 1 1\n0 1 0 0\n\n-----Sample Output:-----\nSAFE\nUNSAFE\n\n-----EXPLANATION:-----\nBeds placed on blocks diagonally are not a problem.\n\n Examples: \nInput: \n['2', '4', '1 0 1 0', '0 0 0 1', '0 1 0 0', '1 0 0 1', '4', '1 0 1 0', '0 0 0 0', '1 0 1 1', '0 1 0 0']\nOutput: \n ['SAFE', 'UNSAFE']\n",
  "1306": "Problem: \nYou are given a string S constisting of uppercase Latin letters. Is it possible to reorder the characters in this string to get a string with prefix \"LTIME\" and suffix \"EMITL\"?\nWe remind you that a prefix of a string is any substring which contains its first character, while a suffix of a string is substring containing its last character.\n\n-----Input-----\nThe first line contains a single integer T, denoting the number of testcases. The descriptions of T test cases follow.\nThe first and only line of the test case description has one non-empty string S consisting of uppercase Latin letters only.\n\n-----Output-----\nFor each testcase output a single line containing the string \"YES\" (without quotes) if it's possible to reorder the characters to get the required prefix and suffix, or \"NO\" (without quotes) otherwise.\n\n-----Constraints-----\n- Subtask 1 (23 points) : 1 \u2264 T \u2264 100, 1 \u2264 |S| \u2264 9\n- Subtask 2 (77 points) : 1 \u2264 T \u2264 1000, 1 \u2264 |S| \u2264 100\n\n-----Example-----\nInput:3\nLTIMEAZAZAITLME\nLLLTTTIIIMMMEEEAHA\nLTIMEM\n\nOutput:YES\nYES\nNO\n\n-----Explanation-----\nTest case 1: we can permute the last 5 letters and get LTIMEAZAZAEMITL\nTest case 2: we have 3 copies of each of the letters 'L', 'T', 'I', 'M', 'E' so we can leave 5 of them in the beginning and move 5 of them to the end.\nTest case 3: we have only one letter 'L' so we can't make necessary prefix and suffix at the same time.\n\n Examples: \nInput: \n['3', 'LTIMEAZAZAITLME', 'LLLTTTIIIMMMEEEAHA', 'LTIMEM']\nOutput: \n ['YES', 'YES', 'NO']\n",
  "1307": "Problem: \nAs we all know, F.C. Barcelona is the best soccer team of our era! Their entangling and mesmerizing game style usually translates into very high ball possession, consecutive counter-attack plays and goals. Lots of goals, thanks to the natural talent of their attacker and best player in history, Lionel Andres Messi.\nHowever, at the most prestigious tournament of individual teams, the UEFA Champions League, there are no guarantees and believe it or not, Barcelona is in trouble.... They are tied versus Chelsea, which is a very defending team that usually relies on counter-strike to catch opposing teams off guard and we are in the last minute of the match. So Messi decided to settle things down for good and now he is conducting the ball on his teams' midfield and he will start a lethal counter-attack :D\nAfter dribbling the 2 strikers from Chelsea, he now finds himself near the center of the field and he won't be able to dribble the entire team on his own, so he will need to pass the ball to one of his teammates, run forward and receive the ball once again to score the final goal.\nExactly K players are with him on his counter-attack and the coach, Tito Villanova knows that this counter-attack will end in a goal only if after exactly N passes are performed between the players, Messi ends up with the ball.\n(Note that the ball only needs to end with Messi after exactly N passes are performed between all the K+1 players, i.e. Messi can receive the ball several times during the N passes. See the 2nd test case explanation for further clarification. ) \nHowever, he realized that there are many scenarios possible for this, so he asked you, his assistant coach, to tell him in how many ways can Messi score the important victory goal. So help him!!\n\n-----Input-----\nInput will contain a number T denoting the number of test cases.\nThen T test cases follow, each one consisting of two space-sparated integers N and K.\n\n-----Output-----\nFor each test case, output a single integer, the number of ways the winning play might happen modulo 1000000007 (109+7).\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100\n- 2 \u2264 N \u2264 1000\n- 1 \u2264 K \u2264 10\n\n-----Example-----\nInput:\n2\n2 4\n4 2\n\nOutput:\n4\n6\n\n-----Explanation-----\nIn the first test case, say four players with Messi are Xavi, Busquets, Iniesta and Jordi Alba. Then the ways of the winning play to happen when exactly  2 passes are to be performed are:\n1) Messi - Xavi - Messi\n2) Messi - Busquets - Messi\n3) Messi - Iniesta - Messi\n4) Messi - Alba - Messi\n\nIn the second test case, also say that two players with Messi are Xavi and Iniesta. There are 6 ways for the winning play to happen when exactly 4 passes are performed. All the examples of such winning play are:\n1) Messi - Xavi - Messi - Iniesta - Messi\n2) Messi - Xavi - Iniesta - Xavi - Messi\n3) Messi - Xavi - Messi - Xavi - Messi\n4) Messi - Iniesta - Messi - Iniesta - Messi\n5) Messi - Iniesta - Messi - Xavi - Messi\n6) Messi - Iniesta - Xavi - Iniesta - Messi\n\n Examples: \nInput: \n['2', '2 4', '4 2']\nOutput: \n ['4', '6']\n",
  "1308": "Problem: \nRaj is suffering from shot term memory loss so  he is unable to remember his laptop password  but he has a list of some string and the only thing that he remember about his password is alphanumeric and also that all the characters are unique.\nGiven a list of strings, your task is to find a valid password.\n\n-----Input-----\nEach String contains lower case alphabets and 0-9.\n\n-----Output-----\nprint \"Invalid\"(without quotes) if password is not valid else print \"Valid\"(without quotes) and stop processing input after it.\n\n-----Constraints-----\n1<=length of string <=100\n\n-----Example-----\nInput:\nabsdbads\nasdjenfef\ntyerbet\nabc564\n\nOutput:\nInvalid\nInvalid\nInvalid\nValid\n\n Examples: \nInput: \n['absdbads', 'asdjenfef', 'tyerbet', 'abc564']\nOutput: \n ['Invalid', 'Invalid', 'Invalid', 'Valid']\n",
  "1309": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n21\n*1\n321\n*21\n**1\n4321\n*321\n**21\n***1\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '21', '*1', '321', '*21', '**1', '4321', '*321', '**21', '***1']\n",
  "1310": "Problem: \nBohan loves milk tea so much and he drinks one cup of milk tea every day. The local shop sells milk tea in two sizes: a Medium cup for $3 and a Large cup for $4. For every cup of milk tea purchased Bohan receives a promotional stamp. Bohan may redeem 6 stamps for a free drink of milk tea regardless of the size. No stamp will be given for a free drink.\n\n\nDetermine the amount of money Bohan have spent on milk tea, given a sequence of milk tea sizes he got in the past a few days. Assume Bohan had no stamps in the beginning and he always redeemed the stamps for the next drink once he had collected 6 stamps.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium cup or a Large cup of milk tea Bohan got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars Bohan have spent on milk tea.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n-----Explanation-----\nExample 1: Bohan didn't redeem any stamps.\nExample 2: Bohan redeemed 6 stamps for the Large cup of milk tea on the 7th day.\nExample 3: Bohan redeemed 6 stamps for the Medium cup of milk tea on the 7th day.\n\n Examples: \nInput: \n['3', 'MLM', 'MMLLMMLL', 'MMMMMMML']\nOutput: \n ['10', '24', '22']\n",
  "1311": "Problem: \nYou are given two positive integers $N$ and $K$, where $K \\le N$. Find a sequence $A_1, A_2, \\ldots, A_N$ such that:\n- for each valid $i$, $A_i$ is either $i$ or $-i$\n- there are exactly $K$ values of $i$ such that $1 \\le i \\le N$ and $A_1 + A_2 + \\ldots + A_i > 0$\nIf there are multiple solutions, you may print any one of them. It can be proved that at least one solution always exists.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le K \\le N \\le 1,000$\n\n-----Subtasks-----\nSubtask #1 (10 points): $N \\le 10$\nSubtask #2 (90 points): original constraints\n\n-----Example Input-----\n1\n3 3\n\n-----Example Output-----\n1 2 3\n\n Examples: \nInput: \n['1', '3 3']\nOutput: \n ['1 2 3']\n",
  "1313": "Problem: \nThe Little Elephant from the Zoo of Lviv has an array A that consists of N positive integers. Let A[i] be the i-th number in this array (i = 1, 2, ..., N).\n\nFind the minimal number x > 1 such that x is a divisor of all integers from array A. More formally, this x should satisfy the following relations:\n\nA[1] mod x = 0, A[2] mod x = 0, ..., A[N] mod x = 0,\n\nwhere mod stands for the modulo operation. For example,  8 mod 3 = 2,  2 mod 2 = 0, 100 mod 5 = 0 and so on. If such number does not exist, output -1.\n\n-----Input-----\n\nThe first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the size of the array A for the corresponding test case. The second line contains N space separated integers A[1], A[2], ..., A[N].\n\n-----Output-----\n\nFor each test case output a single line containing the answer for the corresponding test case.\n\n-----Constraints-----\n1 \u2264 T \u2264 100000\n\n1 \u2264 N \u2264 100000\n\nThe sum of values of N in each test file does not exceed 100000\n\n1 \u2264 A[i] \u2264 100000\n\n-----Example-----\nInput:\n2\n3\n2 4 8\n3\n4 7 5\n\nOutput:\n2\n-1\n\n-----Explanation-----\nCase 1. Clearly 2 is a divisor of each of the numbers 2, 4 and 8. Since 2 is the least number greater than 1 then it is the answer.\n\nCase 2. Let's perform check for several first values of x.\n\nx4 mod x7 mod x5 mod x20113112403154206415740584759475\n\nAs we see each number up to 9 does not divide all of the numbers in the array. Clearly all larger numbers also will fail to do this. So there is no such number x > 1 and the answer is -1.\n\n Examples: \nInput: \n['2', '3', '2 4 8', '3', '4 7 5', '', '']\nOutput: \n ['2', '-1']\n",
  "1315": "Problem: \n-----\nRANJANA QUIZ\n-----\n\nProf. Ranjana decided to conduct a quiz in her class. She divided all the students of her\nclass into groups of three. Consider that no student was left out after the division. She gave\ndifferent sets of questions to every group. A set is said to be unique if there is no other team that\nreceived the same number of maths, science and english questions. In every set, maximum\nquestions for each group were related to maths, then science, and the least number of\nquestions were related to English. Total number of questions given to each team can be\ndifferent. \n\n\t\n\t\n\nAfter the test, the CR of the class asked every team to report the number of questions\nthey got on each subject. The CR wants to know the number of unique sets of questions that\nwere given to the teams, the problem is that all the students have just submitted the number of\nquestions of each subject but in no particular order. Help the CR to find the number of unique\nsets\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nLine 1 contains the number of teams \u2018n\u2019. In the next n lines, each line contains three space separated integers,i.e, the number of questions of each subject(in no particular order).\nemployee\n\n-----Output-----\n\nPrint the number of unique sets\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n5\n6 5 4\n2 3 7\n4 6 5\n7 2 3\n5 3 1\n\t\nOutput:\n1\n\t\t\n\n Examples: \nInput: \n['5', '6 5 4', '2 3 7', '4 6 5', '7 2 3', '5 3 1']\nOutput: \n ['1']\n",
  "1318": "Problem: \nYou are given an equilateral triangle \u0394ABC with the side BC being the base. Each side of the triangle is of length L. There are L-1 additional points on each of the sides dividing the sides into equal parts of unit lengths. Points on the sides of the triangle are called major points. Joining these points with lines parallel to the sides of \u0394ABC will produce some more equilateral triangles. The intersection points of these parallel lines are called minor points. \n\nLook at the picture below. It contains \n\n- Major points: A, B, C, P1, P2, Q1, Q3, R1, R4, S1, S2, S3 (note that we consider A, B, C as major points as well)\n- Minor points: Q2, R2, R3\n- Equilateral triangles \u0394P1Q1Q2, \u0394Q2S1S3, etc\n\nWe consider an equilateral triangle to be valid if\n\n- Each of its vertices is either a major or a minor point, and\n- The distance from its base (the base of a triangle is the side parallel to BC) to BC is less than the distance from the other vertex of the triangle (i.e. opposite vertex that doesn't lie on the base of triangle) to BC.\n\nIn the figure above, \u0394Q2P1P2 is not a valid triangle but \u0394Q2R2R3 is a valid triangle.\n\nYou will be given L, the length of the original triangle \u0394ABC. You need to find out the number of valid equilateral triangles with side length exactly K.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. The description of each testcase follows.\n- Each test case has one line containing two space-separated integers: L and K.\n\n-----Output-----\nFor each testcase, print \"Case i: \", and then the answer, where i is the testcase number, 1-indexed.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 500\n-  1 \u2264 L, K \u2264 5000\n\n-----Example-----\nInput:\n2\n4 3\n4 4\n\nOutput:\nCase 1: 3\nCase 2: 1\n\n-----Explanation-----\n\nThe figure presented in the problem description is a triangle with side length 4.\nIn testcase 1, the valid triangles are \u0394AR1R4, \u0394P1BS3, \u0394P2S1C\n\nIn testcase 2, the only valid triangle is \u0394ABC\n\n Examples: \nInput: \n['2', '4 3', '4 4']\nOutput: \n ['Case 1: 3', 'Case 2: 1']\n",
  "1319": "Problem: \nA despotic king decided that his kingdom needed to be rid of corruption and disparity. He called his prime minister and ordered that all corrupt citizens be put to death. Moreover, he wanted this done quickly.\nThe wily prime minister realised that investigating every citizen to decide who was corrupt and who was not was rather difficult. So he decided on the following plan: He ordered all the citizens to appear in the court one by one and declare their wealth.\nThe king does not sit in the court all the time (he has other important business to attend to - for instance, meet dignitaries from neighbouring kingdoms, spend time with his family \u2026) Whenever the king walks into the court, the prime minister pulls out the richest man who has appeared before the court so far and is still alive and beheads him for being corrupt. Since the rich are more likely to be corrupt, he hopes to get rid of most of the corrupt and the king is happy as he sees his policy being implemented enthusiastically.\nSuppose the wealth of the citizens trooping into the court is\n1376518911241376518911241\\; 3\\; 7\\; 6\\; 5\\; 18\\;  9\\; 11\\;  2\\; 4\nand the king walked in three times: the first time after the first four persons have seen the minister, the second time after the first five persons have seen the minister and, finally after the first nine persons have seen the minister.\nAt the king's first visit the richest person to have met the minister has wealth $7$ and he would be beheaded. At the second visit, the wealth of the richest person who has met the minister and is still alive has wealth $6$ and so he would be beheaded. At the third visit the richest person to have met the minister who is still alive has wealth $18$ and so he would be beheaded.\nYou may assume that the input is such that whenever the king walks in, it is always possible to behead someone.\nYour aim is to write a program that will enable the prime minister to identify the richest man to have met the minister and who is still alive quickly. You may assume that no two citizens have the same wealth.\n\n-----Input:-----\nThe first line of the input consists of two numbers $N$ and $M$, where $N$ is the number of citizens in the kingdom and M is the number of visits to the court by the king.\nThe next $N+M$ lines describe the order in which the $N$ citizens' appearances are interleaved with the $M$ visits by the king. A citizen's visit is denoted by a positive integer, signifying his wealth. You may assume that no two citizens have the same wealth. A visit by the king is denoted by $-1$.\n\n-----Output:-----\nYour output should consist of $M$ lines, where the $i^{th}$ line contains the wealth of the citizen who is beheaded at the $i^{th}$ visit of the king.\n\n-----Constraints:-----\n- $1 \\leq M \\leq 10000$.\n- $1 \\leq N \\leq 100000$.\n- You may assume that in $50 \\%$ of the inputs $1 \\leq M \\leq 1000$ and $1 \\leq N \\leq 8000$.\n\n-----Sample Input-----\n10 3\n1 \n3 \n7 \n6 \n-1 \n5 \n-1 \n18 \n9 \n11\n2\n-1\n4\n\n-----Sample Output-----\n7\n6\n18\n\n Examples: \nInput: \n['10 3', '1', '3', '7', '6', '-1', '5', '-1', '18', '9', '11', '2', '-1', '4']\nOutput: \n ['7', '6', '18']\n",
  "1320": "Problem: \nChef has many friends, but his best friend is Hemant. They both love to watch anime.\nIn fact, their weekends are meant for that only. Also, Hemant is highly into games, of which Chef is unaware. Hemant once gave a game to Chef and asked him to determine the winner of the game. Since the Chef is busy, and you are also his friend, he asked you to help him.\nThe Game is played between two players, $A$ and $B$. There are $N$ marbles. $A$ and $B$ plays alternately, and $A$ goes first. Each player can choose $1$ marble or $even$ number of marbles in his turn. The player who is not able to choose any marbles loses the game.\n\n-----Input:-----\n- The first line consists of a single integer $T$ denoting the number of test cases.\n- The Second line contains an integers $N$, denoting the number of marbles.\n\n-----Output:-----\nFor each test case, print the name of the player who loses the game.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n3\n1 \n3\n7 \n\n-----Sample Output:-----\nB\nA\nB\n\n Examples: \nInput: \n['3', '1', '3', '7']\nOutput: \n ['B', 'A', 'B']\n",
  "1321": "Problem: \nThe chef is trying to solve some series problems, Chef wants your help to code it. Chef has one number N. Help the chef to find N'th number in the series.\n0, 1, 5, 14, 30, 55 \u2026..\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $N$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^4$\n- $1 \\leq N \\leq 10^4$\n\n-----Sample Input:-----\n3\n1\n7\n8\n\n-----Sample Output:-----\n0\n91\n140\n\n Examples: \nInput: \n['3', '1', '7', '8']\nOutput: \n ['0', '91', '140']\n",
  "1322": "Problem: \nSnackdown 2019 is coming! There are two rounds (round A and round B) after the qualification round. From both of them, teams can qualify to the pre-elimination round. According to the rules, in each of these two rounds, teams are sorted in descending order by their score and each team with a score greater or equal to the score of the team at the $K=1500$-th place advances to the pre-elimination round (this means it is possible to have more than $K$ qualified teams from each round in the case of one or more ties after the $K$-th place).\nToday, the organizers ask you to count the number of teams which would qualify for the pre-elimination round from round A for a given value of $K$ (possibly different from $1500$). They provided the scores of all teams to you; you should ensure that all teams scoring at least as many points as the $K$-th team qualify.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $S_1, S_2, \\dots, S_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of qualified teams.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le K \\le N \\le 10^5$\n- $1 \\le S_i \\le 10^9$ for each valid $i$\n- the sum of $N$ for all test cases does not exceed $10^6$\n\n-----Example Input-----\n2\n5 1\n3 5 2 4 5\n6 4\n6 5 4 3 2 1\n\n-----Example Output-----\n2\n4\n\n Examples: \nInput: \n['2', '5 1', '3 5 2 4 5', '6 4', '6 5 4 3 2 1']\nOutput: \n ['2', '4']\n",
  "1324": "Problem: \nGru wants to distribute $N$ bananas to $K$ minions on his birthday.\nGru does not like to just give everyone the same number of bananas, so instead, he wants to distribute bananas in such a way that each minion gets a $distinct$ amount of bananas. That is, no two minions should get the same number of bananas.\nGru also loves $gcd$. The higher the $gcd$, the happier Gru and the minions get. So help Gru in distributing the bananas in such a way that each Minion gets a distinct amount of bananas and gcd of this distribution is highest possible. Output this maximum gcd. If such a distribution is not possible output $-1$.\nNote: You have to distribute $all$ $N$ bananas. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase consists of a single line of input, which has two integers: $N, K$. \n\n-----Output:-----\nFor each testcase, output in a single line the maximum gcd or -1.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, K \\leq 10^9$\n\n-----Sample Input:-----\n1\n6 3\n\n-----Sample Output:-----\n1\n\n-----EXPLANATION:-----\nThe only possible distribution is $[1, 2, 3]$. So the answer is 1.\n\n Examples: \nInput: \n['1', '6 3']\nOutput: \n ['1']\n",
  "1325": "Problem: \nTeacher brought a fruit basket for three students. The basket contains only Apples, Mangoes and Oranges. Student A knows a value $a$, the total number of Apples and Mangoes in the Basket, B knows a value $b$, the total number of Mangoes and Oranges in the basket and Student C knows a value $c$, the total number of Oranges and Apples in the Basket. Since the teacher brought it he knows a value $d$ , the total number of fruits in the basket. You have to determine the exact number of Apples , Mangoes and Oranges in the basket separately.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $a,b,c,d$. \n\n-----Output:-----\nFor each testcase, output in a single line the number of Apples , Mangoes and Oranges in this order.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $0 \\leq a \\leq 1000$\n- $0 \\leq b \\leq 1000$\n- $0 \\leq c \\leq 1000$\n- $0 \\leq d \\leq 1000$ \n-The Solution always exisits\n\n-----Sample Input:-----\n2\n\n7 9 8 12\n\n3 8 7 9\n\n-----Sample Output:-----\n3 4 5\n\n1 2 6\n\n Examples: \nInput: \n['2', '7 9 8 12', '3 8 7 9']\nOutput: \n ['3 4 5', '1 2 6']\n",
  "1326": "Problem: \nThere are $N$ cars (numbered $1$ through $N$) on a circular track with length $N$. For each $i$ ($2 \\le i \\le N$), the $i$-th of them is at a distance $i-1$ clockwise from car $1$, i.e. car $1$ needs to travel a distance $i-1$ clockwise to reach car $i$. Also, for each valid $i$, the $i$-th car has $f_i$ litres of gasoline in it initially.\nYou are driving car $1$ in the clockwise direction. To move one unit of distance in this direction, you need to spend $1$ litre of gasoline. When you pass another car (even if you'd run out of gasoline exactly at that point), you steal all its gasoline. Once you do not have any gasoline left, you stop.\nWhat is the total clockwise distance travelled by your car? \n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $f_1, f_2, \\ldots, f_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the total clockwise distance travelled.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $0 \\le f_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n5\n3 0 0 0 0\n5\n1 1 1 1 1\n5\n5 4 3 2 1\n\n-----Example Output-----\n3\n5\n15\n\n Examples: \nInput: \n['3', '5', '3 0 0 0 0', '5', '1 1 1 1 1', '5', '5 4 3 2 1']\nOutput: \n ['3', '5', '15']\n",
  "1327": "Problem: \nFirdavs is living on planet F. There are $N$ cities (numbered $1$ through $N$) on this planet; let's denote the value of city $i$ by $v_i$. Firdavs can travel directly from each city to any other city. When he travels directly from city $x$ to city $y$, he needs to pay $f(x, y) = |v_y-v_x|+y-x$ coins (this number can be negative, in which case he receives $-f(x, y)$ coins).\nLet's define a simple path from city $x$ to city $y$ with length $k \\ge 1$ as a sequence of cities $a_1, a_2, \\ldots, a_k$ such that all cities in this sequence are different, $a_1 = x$ and $a_k = y$. The cost of such a path is $\\sum_{i=1}^{k-1} f(a_i, a_{i+1})$.\nYou need to answer some queries for Firdavs. In each query, you are given two cities $x$ and $y$, and you need to find the minimum cost of a simple path from city $x$ to city $y$. Then, you need to find the length of the longest simple path from $x$ to $y$ with this cost.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $Q$.\n- The second line contains $N$ space-separated integers $v_1, v_2, \\ldots, v_N$.\n- The following $Q$ lines describe queries. Each of these lines contains two space-separated integers $x$ and $y$.\n\n-----Output-----\nFor each query, print a single line containing two space-separated integers \u2015 the minimum cost and the maximum length.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N, Q \\le 2 \\cdot 10^5$\n- $0 \\le v_i \\le 10^9$ for each valid $i$\n- $1 \\le x, y \\le N$\n- the sum of $N$ in all test cases does not exceed $5 \\cdot 10^5$\n- the sum of $Q$ in all test cases does not exceed $5 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\le N, Q \\le 1,000$\n- $v_1 < v_2 < \\ldots < v_N$\n- the sum of $N$ in all test cases does not exceed $5,000$\n- the sum of $Q$ in all test cases does not exceed $5,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n4 2\n4 2 5 7\n2 3\n3 4\n2 1\n1 1\n2 1\n\n-----Example Output-----\n4 3\n3 2\n-1 2\n\n-----Explanation-----\nExample case 1: For the first query, there are two paths with cost $4$ from city $2$ to city $3$:\n- $2 \\rightarrow 1 \\rightarrow 3$: cost $(|4-2|+1-2)+(|5-4|+3-1) = 4$, length $3$\n- $2 \\rightarrow 3$: cost $|5-2|+3-2 = 4$, length $2$\nAll other paths have greater costs, so the minimum cost is $4$. Among these two paths, we want the one with greater length, which is $3$.\n\n Examples: \nInput: \n['2', '4 2', '4 2 5 7', '2 3', '3 4', '2 1', '1 1', '2 1']\nOutput: \n ['4 3', '3 2', '-1 2']\n",
  "1328": "Problem: \nChef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nChef has a positive integer N. He can apply any of the following operations as many times as he want in any order:\n\n-  Add 1 to the number N.\n\n-  Take some digit of N and replace it by any non-zero digit.\n\n-  Add any non-zero leading digit to N.\n\nFind the minimum number of operations that is needed for changing N to the lucky number.\n\n-----Input-----\nThe first line contains a single positive integer T, the number of test cases. T test cases follow. The only line of each test case contains a positive integer N without leading zeros. \n\n-----Output-----\nFor each T test cases print one integer, the minimum number of operations that is needed for changing N to the lucky number.\n\n-----Constraints-----\n\n1 \u2264 T \u2264 10\n\n1 \u2264 N < 10100000\n\n-----Example-----\nInput:\n3\n25\n46\n99\n\nOutput:\n2\n1\n2\n\n Examples: \nInput: \n['3', '25', '46', '99', '', '']\nOutput: \n ['2', '1', '2']\n",
  "1330": "Problem: \nThe country of Siruseri has A\u2217B$A*B$ districts. You want to create A$A$ states from these districts, such that each state has exactly B$B$ districts, and each district is part of exactly one state. You don't care about the geographical location of the districts. You can pick any B$B$ districts and make it into a state.\nThere are only two parties contesting in the coming elections: P1$P_1$ and P2$P_2$. You know the number of votes that each party receives in each district. In the i-th district, P1$P_1$ gets ci$c_i$ votes and P2$P_2$ gets di$d_i$ votes. You are guaranteed that all these 2\u2217A\u2217B$2*A*B$ integers (the number of votes received by each party in the districts) are distinct. Also, both A$A$ and B$B$ are odd. \nSuppose you have chosen which districts belong to which states, then, to find out who wins any particular state, they follow a weird rule: Suppose the number of votes that P1$P_1$ gets in the B$B$ districts of a particular state are x1,x2,\u2026,xB$x_1, x_2, \\ldots, x_B$, and the number of votes that P2$P_2$ gets in the B$B$ districts of this state are y1,y2,\u2026,yB$y_1, y_2, \\ldots, y_B$. Then among all these 2\u2217B$2*B$ numbers, the largest number is chosen (note that we are guaranteed of an unique largest number). If that number is some xi$x_i$, then P1$P_1$ wins this state. If the largest number is some yj$y_j$, then P2$P_2$ wins this state.\nYou secretly support the party P1$P_1$, and hence you want to assign the districts to states, in such a way, that the number of states won by P1$P_1$ is maximized. Find this maximum number of states that P1$P_1$ can win.\nNote that ci$c_i$ and di$d_i$ will always remain associated with the i-th district. If the i-th district gets assigned to a particular state, then both ci$c_i$ and di$d_i$ will be considered when deciding who won that state.\n\n-----Input:-----\n- The first line of the input contains a single integer, T$T$, the number of testcases. The description of each testcase follows.\n- The first line of each testcase contains two integers, A$A$ and B$B$.\n- The second line of each testcase contains A\u2217B$A*B$ integers: c1,c2,\u2026,cA\u2217B$c_1, c_2, \\ldots, c_{A*B}$, the number of votes won by P1$P_1$ in the districts.\n- The third line of each testcase contains A\u2217B$A*B$ integers: d1,d2,\u2026,dA\u2217B$d_1, d_2, \\ldots, d_{A*B}$, the number of votes won by P2$P_2$ in the districts.\n\n-----Output:-----\nFor each testcase output a single line which contains the maximum number of states that P1$P_1$ can win.\n\n-----Constraints:-----\n- 1\u2264T\u22645$1 \\leq T \\leq 5$\n- 1\u2264A,B$1 \\leq A, B$\n- A\u2217B\u2264105$A*B \\leq 10^5$\n- A$A$, B$B$ are odd\n- 1\u2264ci,di\u2264109$1 \\leq c_i, d_i \\leq 10^9$\n- All the ci$c_i$ and di$d_i$ will be distinct.\n\n-----Sample Input:-----\n3\n1 3\n4 2 9\n5 6 7\n1 3\n4 2 9\n5 10 7\n3 3\n7 14 11 4 15 5 20 1 17\n2 13 16 9 19 6 12 8 10\n\n-----Sample Output:-----\n1\n0\n3\n\n-----Explanation:-----\nTestcase 1: Since you have to form only 1 state, there is no choice, but to put all the 3 districts in that same state. Now to figure out who wins that single state, we take the maximum among {4, 2, 9, 5, 6, 7}. The maximum is 9, and that belongs to P1$P_1$. Hence P1$P_1$ wins this state. And because they have won 1 state, the answer is 1.\nTestcase 2: Similarly, there is no choice here. To figure out who wins that single state, we take the maximum among {4, 2, 9, 5, 10, 7}. The maximum is 10, and that belongs to P2$P_2$. Hence P2$P_2$ wins this state. And because P1$P_1$ have won no states, the answer is 0.\nTestcase 3: We need to make three states with three districts each. Suppose we that the 3rd, 5th and 7th districts and form a state, the votes in them would be {11, 16, 15, 19, 20, 12}. The max among these is 20, and that belongs to P1$P_1$. Hence P1$P_1$ would win this state. \nSimilarly, suppose we make the second state with the 2nd, 4th and 8th districts, the votes in them would be {14, 13, 4, 9, 1, 8}. The max among these is 14, and that belongs to P1$P_1$. Hence P1$P_1$ would win this state. \nThe remaining three districts: 1st, 6th and 9th districts form the third state. The votes in them would be {7, 2, 5, 6, 17, 10}. The max among these is 17, and that belongs to P1$P_1$. Hence P1$P_1$ would win this state. \nIn this situation, P1$P_1$ wins three states. You obviously cannot do any better. Hence the answer is 3.\n\n Examples: \nInput: \n['3', '1 3', '4 2 9', '5 6 7', '1 3', '4 2 9', '5 10 7', '3 3', '7 14 11 4 15 5 20 1 17', '2 13 16 9 19 6 12 8 10']\nOutput: \n ['1', '0', '3']\n",
  "1331": "Problem: \nChef loves to play games. Now he plays very interesting game called \"Segment\". At the beginning Chef has segment [0, X] and no points on it. On each step Chef chooses the subsegment of maximal length possible such as it contains no points on it. If there are more than one such subsegment Chef chooses the one with the minimal left coordinate. Once Chef chosed the subsegment he put the point in it's middle and the step is over.\nHelp Chef to define the coordinate of the point he will put on the K-th step. \n\n-----Input-----\n- The first line contains integer T - number of test cases. \n- Each of next T lines contains two integers X and K. \n\n-----Output-----\n- For each test case in a single line print single double number - the coordinate of the K-th point Chef will put. Answer will be considered as correct if absolute difference between the answer and correct answer is less or equal 10^(-6). \n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^5\n- 1 \u2264 X \u2264 10^9\n- 1 \u2264 K \u2264 10^12\n\n-----Subtasks-----\n- Subtask 1: T \u2264 10; X, K \u2264 20. Points: 15 \n- Subtask 2: T \u2264 10; X \u2264 10^6, K \u2264 2*10^5. Points: 25\n- Subtask 3: T \u2264 10^5; X \u2264 10^9, K \u2264 10^12. Points: 60\n\n-----Example-----\nInput:\n4\n10 1\n10 2\n10 3\n1000000000 1234567\nOutput:\n5.0000\n2.5000\n7.5000\n177375316.6198730500000000\n\n-----Explanation-----\nYou can see the points coordinates for the third sample from first two samples.\n\n Examples: \nInput: \n['4', '10 1', '10 2', '10 3', '1000000000 1234567']\nOutput: \n ['5.0000', '2.5000', '7.5000', '177375316.6198730500000000']\n",
  "1332": "Problem: \nConsider an infinite full binary tree (each node has two children except the leaf nodes) defined as follows. For a node labelled v its left child will be labelled 2*v and its right child will be labelled 2*v+1. The root is labelled as 1.\nYou are given N queries of the form i j. For each query, you have to print the length of the shortest path between node labelled i and  node labelled j.\n\n-----Input-----\nFirst line contains N, the number of queries. Each query consists of two space separated integers i and j in one line.\n\n-----Output-----\nFor each query, print the required answer in one line.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 i,j \u2264 109\n\n-----Example-----\nInput:\n3\n1 2\n2 3\n4 3\n\nOutput:\n1\n2\n3\n\n-----Explanation-----\nFor first query, 1 is directly connected to 2 by an edge. Hence distance 1.\n\n Examples: \nInput: \n['3', '1 2', '2 3', '4 3']\nOutput: \n ['1', '2', '3']\n",
  "1333": "Problem: \nChef has invited Alice for his birthday party. Now, Alice is thinking about what to give Chef as a present. She should obviously choose a sequence \u2015 what could possibly be a better birthday gift than a sequence!\nAfter some thinking, Alice chose a sequence of integers $A_1, A_2, \\ldots, A_N$. However, she does not want to simply give this sequence to Chef. Instead, she decided to give Chef a sequence $B_1, B_2, \\ldots, B_N$, where $B_i = \\bigvee_{j=1}^i A_j$ for each valid $i$ and $\\bigvee$ denotes the bitwise OR operation. Chef can try to generate a sequence $A$ from $B$, but there could be more than one such possible sequence.\nNow, Alice is wondering how many sequences $A$ correspond to the given sequence $B$. Since this number could be very large, compute it modulo $10^9 + 7$. Note that it is not guaranteed that the given sequence $B$ was generated from some sequence $A$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $B_1, B_2, \\ldots, B_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of possible sequences $A$ modulo $10^9 + 7$.\n\n-----Constraints-----\n- $1 \\le T \\le 25$\n- $1 \\le N \\le 5 \\cdot 10^4$\n- $0 \\le B_i < 2^{30}$ for each valid $i$\n\n-----Example Input-----\n2\n2\n2 3\n4\n2 6 7 7\n\n-----Example Output-----\n2\n64\n\n-----Explanation-----\nExample case 1: There are two possible options for $A$: $(2, 1)$ and $(2, 3)$.\n\n Examples: \nInput: \n['2', '2', '2 3', '4', '2 6 7 7']\nOutput: \n ['2', '64']\n",
  "1334": "Problem: \nZonal Computing Olympiad 2014, 30 Nov 2013\n\nIn ICO School, all students have to participate regularly in SUPW.  There is a different SUPW activity each day, and each activity has its own duration.  The SUPW schedule for the next term has been announced, including information about the number of minutes taken by each activity.\n\nNikhil has been designated SUPW coordinator.  His task is to assign SUPW duties to students, including himself.  The school's rules say that no student can go three days in a row without any SUPW duty.\n\nNikhil wants to find an assignment of SUPW duty for himself that minimizes the number of minutes he spends overall on SUPW.\n\n-----Input format-----\nLine 1: A single integer N, the number of days in the future for which SUPW data is available.\nLine 2: N non-negative integers, where the integer in position i represents the number of minutes required for SUPW work on day i.\n\n-----Output format-----\nThe output consists of a single non-negative integer, the minimum number of minutes that Nikhil needs to spend on SUPW duties this term \n\n-----Sample Input 1-----\n10\n3 2 1 1 2 3 1 3 2 1\n\n-----Sample Output 1-----\n4\n\n(Explanation: 1+1+1+1)\n\n-----Sample Input 2-----\n8\n3 2 3 2 3 5 1 3\n\n-----Sample Output 2-----\n5\n\n(Explanation: 2+2+1)\n\n-----Test data-----\nThere is only one subtask worth 100 marks.  In all inputs:\n\n\u2022 1 \u2264 N \u2264 2\u00d7105\n\u2022 The number of minutes of SUPW each day is between 0 and\n104, inclusive.\n\n-----Live evaluation data-----\nThere are 12 test inputs on the server during the exam.\n\n Examples: \nInput: \n['10', '3 2 1 1 2 3 1 3 2 1']\nOutput: \n ['4', '(']\n",
  "1335": "Problem: \nDinesh is very fond of sweets recently his aunt Riya gifted him an array $a$ of sweets of size $N$. The ith sweet is of the type $a[i]$. His mother told him that he can choose one type of sweet in a day and eat at most 2 sweets of that type. Since he has to eat all the sweets as quickly as possible because his cousins are arriving. Find out the minimum number of days in which he can eat all the sweets gifted by his aunt Riya. \n\n-----Input:-----\n- First-line will contain $N$, the number of sweets.  \n- The next line will contain $N$ space integers denoting the type of sweets.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\n Examples: \nInput: \n['3', '1 2 2']\nOutput: \n ['2']\n",
  "1336": "Problem: \nA printer \u2013 who still uses moveable type \u2013 is preparing to print a set of pages for a book. These pages are to be numbered, as usual. The printer needs to know how many instances of each decimal digit will be required to set up the page numbers in the section of the book to be printed.\n\nFor example, if pages 10, 11, 12, 13, 14 and 15 are to be printed, computing the number of digits is relatively simple: just look at the page numbers that will appear, and count the number of times each digit appears. The digit 0 appears only once, the digit 1 appears 7 times, the digits 2, 3, 4 and 5 each appear once, and 6, 7, 8 and 9 don\u2019t appear at all.\n\nYour task in this problem is to provide the printer with the appropriate counts of the digits. You will be given the numbers of the two pages that identify the section of the book to be printed. You may safely assume that all pages in that section are to be numbered, that no leading zeroes will be printed, that page numbers are positive, and that no page will have more than three digits in its page number.\n\n-----Input-----\n\nThere will be multiple cases to consider. The input for each case has two integers, A and B, each of which is guaranteed to be positive. These identify the pages to be printed. That is, each integer P between A and B, including A and B, is to be printed. A single zero will follow the input for the last case.\n\n-----Output-----\n\nFor each input case, display the case number (1, 2, \u2026) and the number of occurrences of each decimal digit 0 through 9 in the specified range of page numbers. Display your results in the format shown in the examples below.\n\n-----Example-----\nInput:\n\n10 15\n912 912\n900 999\n0\n\nOutput:\n\nCase 1: 0:1 1:7 2:1 3:1 4:1 5:1 6:0 7:0 8:0 9:0\nCase 2: 0:0 1:1 2:1 3:0 4:0 5:0 6:0 7:0 8:0 9:1\nCase 3: 0:20 1:20 2:20 3:20 4:20 5:20 6:20 7:20 8:20 9:120\n\n Examples: \nInput: \n['10 15', '912 912', '900 999', '0', '', '']\nOutput: \n ['Case 1: 0:1 1:7 2:1 3:1 4:1 5:1 6:0 7:0 8:0 9:0', 'Case 2: 0:0 1:1 2:1 3:0 4:0 5:0 6:0 7:0 8:0 9:1', 'Case 3: 0:20 1:20 2:20 3:20 4:20 5:20 6:20 7:20 8:20 9:120']\n",
  "1337": "Problem: \nThe $String$ Family gave birth to a new $Tripartite$ $trio$ $sisters$ and named them $Hema$, $Rekha$ and $Sushma$. Hema and Rekha are very fond of parties whereas Sushma hates them. One day Hema and Rekha asked their parents to buy them candies to distribute to people in their birthday party. (Remember Hema, Rekha and Sushma were born on the same day). But Sushma was uninterested in the party and only wanted candies for herself.\nYou will be given a list $P$ of possible number of candidates coming to the party. Were $P[i]$ denotes the count of people coming in the i th possibility. In each case every person should get maximum possible equal number of candies  such that after distributing the candies, there are always $R$ candies remaining for Sushma. You have to calculate the minimum number of candies required to buy so that, in any possible situation of the given array, each person coming to party gets equal number of candies (at least 1 and maximum possible out of total) and there are always $R$ candies remaining for Sushma.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each test case contain  $N$, number of possible count of people coming to party\n- Next line contain $N$ spaced integers denoting the count of people \n- Next line contain $R$ the number of candies always remaining after maximum equal distribution\n\n-----Output:-----\nFor each testcase, output in a single line answer, the minimum number of candies required to buy.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^4$\n- $1 \\leq P[i] \\leq 41$\n- $0 \\leq R < min(P[i])$\n\n-----Sample Input:-----\n1\n2\n2 3\n1\n\n-----Sample Output:-----\n7\n\n Examples: \nInput: \n['1', '2', '2 3', '1']\nOutput: \n ['7']\n",
  "1338": "Problem: \n-----General Statement:-----\nRead a number in scientific notation and output its equivalent decimal value.\n\n-----Input:-----\nAll data is on a single line. The first integer indicates how many pairs of numbers follow. The first of each pair is A, the base number, and the second is E, the power of 10.\n\n-----Output:-----\nRound each answer to 2 decimal places. Trailing zeros to the right of the decimal point are required. A leading zero to the left of the decimal point is not required.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nE is in the range \u201310 .. 10. A is 1 or larger but less than 10.\nDiscussion: \nIf A = 3.926 and E = 4, the number represented is 3.926 X 104 or 39260, which is 39260.00 when rounded to 2 decimal places.\n\n-----Sample Input:-----\n4 4.296 3 3.8 -2 1.8 2 2.8678 1\n\n-----Sample Output:-----\n4296.00\n0.04\n180.00\n28.68\n\n Examples: \nInput: \n['4 4.296 3 3.8 -2 1.8 2 2.8678 1']\nOutput: \n ['4296.00', '0.04', '180.00', '28.68']\n",
  "1339": "Problem: \nVasya learned about integer subtraction in school. He is still not very good at it, so he is only able to subtract any single digit number from any other number (which is not necessarily single digit).\nFor practice, Vasya chose a positive integer n$n$ and wrote it on the first line in his notepad. After that, on the second line he wrote the result of subtraction of the first digit of n$n$ from itself. For example, if n=968$n = 968$, then the second line would contain 968\u22129=959$968 - 9 = 959$, while with n=5$n = 5$ the second number would be 5\u22125=0$5 - 5 = 0$. If the second number was still positive, then Vasya would write the result of the same operation on the following line, and so on. For example, if n=91$n = 91$, then the sequence of numbers Vasya would write starts as follows: 91,82,74,67,61,55,50,\u2026$91, 82, 74, 67, 61, 55, 50, \\ldots$. One can see that any such sequence eventually terminates with the number 0$0$.\nSince then, Vasya lost his notepad. However, he remembered the total number k$k$ of integers he wrote down (including the first number n$n$ and the final number 0$0$). What was the largest possible value of n$n$ Vasya could have started with?\n\n-----Input:-----\nThe first line contains T$T$ , number of test cases per file.\nThe only line in each testcase contains a single integer k\u2212$k-$ the total number of integers in Vasya's notepad (2\u2264k\u22641012$2 \\leq k \\leq 10^{12}$).\n\n-----Output:-----\nPrint a single integer\u2212$-$ the largest possible value of the starting number n$n$. It is guaranteed that at least one such number n$n$ exists, and the largest possible value is finite.\n\n-----Constraints-----\n- 1\u2264T\u226434$1 \\leq  T \\leq 34 $\n- 2\u2264k\u22641012$2 \\leq k \\leq 10^{12}$\n\n-----Sample Input-----\n3\n2\n3\n100\n\n-----Sample Output:-----\n9\n10\n170\n\n Examples: \nInput: \n['3', '2', '3', '100']\nOutput: \n ['9', '10', '170']\n",
  "1340": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. You should select a (not necessarily contiguous) subsequence of $A$ and reverse it. In other words, if you select a subsequence $A_{i_1}, A_{i_2}, \\ldots, A_{i_K}$ ($1 \\le i_1 < \\ldots < i_K \\le N$), then for each valid $j$, the $i_j$-th element of the resulting sequence is equal to the $i_{K+1-j}$-th element of the original sequence; all other elements are the same as in the original sequence.\nIn the resulting sequence, you want to calculate the maximum sum of a contiguous subsequence (possibly an empty sequence, with sum $0$). Find its maximum possible value and a subsequence which you should select in order to obtain this maximum value. If there are multiple solutions, you may find any one of them.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print two lines.\n- The first of these lines should contain a single integer \u2015 the maximum possible sum of a contiguous subsequence.\n- The second line should contain an integer $K$ followed by a space and $K$ space-separated integers $i_1, i_2, \\ldots, i_K$.\n\n-----Constraints-----\n- $1 \\le T \\le 2,000$\n- $2 \\le N \\le 10^5$\n- $|A_i| \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Example Input-----\n2\n5\n-4 2 -4 3 -5\n3\n-3 -2 -1\n\n-----Example Output-----\n5\n2 2 3\n0\n0\n\n Examples: \nInput: \n['2', '5', '-4 2 -4 3 -5', '3', '-3 -2 -1']\nOutput: \n ['5', '2 2 3', '0', '0']\n",
  "1341": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. Calculate the number of ways to remove a non-empty contiguous subsequence from it such that the resulting sequence is non-empty and strictly increasing.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of ways.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $|A_i| \\le 10^9$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $N \\le 1,000$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n2\n3\n1 1 2\n4\n2 4 3 5\n\n-----Example Output-----\n4\n7\n\n Examples: \nInput: \n['2', '3', '1 1 2', '4', '2 4 3 5']\nOutput: \n ['4', '7']\n",
  "1342": "Problem: \nChef is multi-talented. He has developed a cure for coronavirus called COVAC-19. Now that everyone in the world is infected, it is time to distribute it throughout the world efficiently to wipe out coronavirus from the Earth. Chef just cooks the cure, you are his distribution manager.\nIn the world, there are $N$ countries (numbered $1$ through $N$) with populations $a_1, a_2, \\ldots, a_N$. Each cure can be used to cure one infected person once. Due to lockdown rules, you may only deliver cures to one country per day, but you may choose that country arbitrarily and independently on each day. Days are numbered by positive integers. On day $1$, Chef has $x$ cures ready. On each subsequent day, Chef can supply twice the number of cures that were delivered (i.e. people that were cured) on the previous day. Chef cannot supply leftovers from the previous or any earlier day, as the cures expire in a day. The number of cures delivered to some country on some day cannot exceed the number of infected people it currently has, either.\nHowever, coronavirus is not giving up so easily. It can infect a cured person that comes in contact with an infected person again \u2015 formally, it means that the number of infected people in a country doubles at the end of each day, i.e. after the cures for this day are used (obviously up to the population of that country).\nFind the minimum number of days needed to make the world corona-free.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $x$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of days.\n\n-----Constraints-----\n- $1 \\le T \\le 10^3$\n- $1 \\le N \\le 10^5$\n- $1 \\le a_i \\le 10^9$ for each valid $i$\n- $1 \\le x \\le 10^9$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points): $a_1 = a_2 = \\ldots = a_N$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n3\n5 5\n1 2 3 4 5\n5 1\n40 30 20 10 50\n3 10\n20 1 110\n\n-----Example Output-----\n5\n9\n6\n\n Examples: \nInput: \n['3', '5 5', '1 2 3 4 5', '5 1', '40 30 20 10 50', '3 10', '20 1 110']\nOutput: \n ['5', '9', '6']\n",
  "1343": "Problem: \nOne day, Chef prepared D brand new dishes. He named the i-th dish by a string Si. After the cooking, he decided to categorize each of these D dishes as special or not.\n\nA dish Si is called special if it's name (i.e. the string Si) can be represented in the form of a double string by removing at most one (possibly zero) character from it's name from any position. \n\nA string is called a double string if it can be represented as a concatenation of two identical, non-empty strings. \ne.g. \"abab\" is a double string as it can be represented as \"ab\" + \"ab\" where + operation denotes concatenation. \nSimilarly, \"aa\", \"abcabc\" are double strings whereas \"a\", \"abba\", \"abc\" are not.\n\n-----Input-----\n- First line of the input contains an integer D denoting the number of dishes prepared by Chef on that day.\n- Each of the next D lines will contain description of a dish. \n\t\n- The i-th line contains the name of i-th dish Si.\n\t\n\n-----Output-----\nFor each of the D dishes, print a single line containing \"YES\" or \"NO\" (without quotes) denoting whether the dish can be called as a special or not.\n\n-----Constraints-----\n- 1 \u2264 D \u2264 106\n- 1 \u2264 |Si| \u2264 106.\n- Each character of string Si will be lower case English alphabet (i.e. from 'a' to 'z').\n\n-----Subtasks-----\nSubtask #1 : (20 points)\n- Sum of |Si| in an input file doesn't exceed 2 * 103\n\nSubtask 2 : (80 points) \n- Sum of |Si| in an input file doesn't exceed 2 * 106\n\n-----Example-----\nInput:\n3\naba\nabac\nabcd\n\nOutput:\nYES\nNO\nNO\n\n\n-----Explanation-----\nExample case 1.\nWe can remove the character at position 1 (0-based index) to get \"aa\" which is a double string. Hence, it is a special dish.\n\nExample case 2.\nIt is not possible to remove the character at any of the position to get the double string. Hence, it is not a special dish.\n\n Examples: \nInput: \n['3', 'aba', 'abac', 'abcd']\nOutput: \n ['YES', 'NO', 'NO']\n",
  "1344": "Problem: \nYou are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1 \u2264 i < j \u2264 N.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each description consists of a single integer N.\nThe second line of each description contains N space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing a single integer - the smallest possible sum for the corresponding test case.\n\n-----Constraints-----\n\n- T = 105, N = 2 : 13 points.\n- T = 105, 2 \u2264 N \u2264 10 : 16 points.\n- T = 1000, 2 \u2264 N \u2264 100 : 31 points.\n- T = 10, 2 \u2264 N \u2264 105 : 40 points.\n- 1 \u2264 ai \u2264 106\n\n-----Example-----\nInput:\n1\n4\n5 1 3 4\n\nOutput:\n4\n\n-----Explanation-----\nHere we pick a2 and a3. Their sum equals to 1 + 3 = 4.\n\n Examples: \nInput: \n['1', '4', '5 1 3 4']\nOutput: \n ['4']\n",
  "1345": "Problem: \nAt the legendary times of Nonsenso wars in ISM Dhanbad, there was a neck to neck competition between Barney Stinson and Sheldon Cooper. They both were on level 19. After trying too hard both of them could not decipher the nonsense, so they decided to play alongside. Sheldon Cooper had to pass a message to Barney Stinson. So he decided to convert each letter of the sentence to their corresponding to their ASCII codes. When Barney received the message he could not get anything. Now you have to design a code which converts the encrypted message to readable format.\n\n-----Input-----\nThe input will consist of the first line containing the number of test cases \u2018n\u2019 followed by n lines of test cases.\n\n-----Output-----\n\nFor each input print the decoded line.\n\n-----Example-----\nInput:\n2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n\nOutput:\nHello World\nWelcome to India\n\n Examples: \nInput: \n['2', '721011081081113287111114108100', '871011089911110910132116111327311010010597']\nOutput: \n ['Hello World', 'Welcome to India']\n",
  "1346": "Problem: \nVK gave a problem to Chef, but Chef is too lazy, so he asked you to solve the problem for him. The statement of the problem follows.\nConsider an integer with $N$ digits (in decimal notation, without leading zeroes) $D_1, D_2, D_3, \\dots, D_N$. Here, $D_1$ is the most significant digit and $D_N$ the least significant. The weight of this integer is defined as \u2211i=2N(Di\u2212Di\u22121).\u2211i=2N(Di\u2212Di\u22121).\\sum_{i=2}^N (D_i - D_{i-1})\\,.\nYou are given integers $N$ and $W$. Find the number of positive integers with $N$ digits (without leading zeroes) and weight equal to $W$. Compute this number modulo $10^9+7$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $W$ denoting the number of digits and the required weight.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of $N$-digit positive integers with weight $W$, modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $2 \\le N \\le 10^{18}$\n- $|W| \\le 300$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $1 \\le T \\le 10^3$\n- $2 \\le N \\le 10^3$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n\n1\n2 3\n\n-----Example Output-----\n\n6\n\n-----Explanation-----\nExample case 1: Remember that the digits are arranged from most significant to least significant as $D_1, D_2$. The two-digit integers with weight $3$ are $14, 25, 36, 47, 58, 69$. For example, the weight of $14$ is $D_2-D_1 = 4-1 = 3$. We can see that there are no other possible numbers.\n\n Examples: \nInput: \n['1', '2 3']\nOutput: \n ['6']\n",
  "1347": "Problem: \nChef Watson uses a social network called ChefBook, which has a new feed consisting of posts by his friends. Each post can be characterized by f - the identifier of the friend who created the post, p - the popularity of the post(which is pre-calculated by ChefBook platform using some machine learning algorithm) and s - the contents of the post which is a string of lower and uppercase English alphabets.\nAlso, Chef has some friends, which he has marked as special.\nThe algorithm used by ChefBook for determining the order of posts in news feed is as follows:\n\n- Posts of special friends should be shown first, irrespective of popularity. Among all such posts the popular ones should be shown earlier.\n- Among all other posts, popular posts should be shown earlier.\n\nGiven, a list of identifiers of Chef's special friends and a list of posts, you have to implement this algorithm for engineers of ChefBook and output the correct ordering of posts in the new feed. \n\n-----Input-----\nFirst line contains N, number of special friends of Chef and M, the number of posts. Next line contains N integers A1, A2, ..., AN denoting the identifiers of special friends of Chef. Each of the next M lines contains a pair of integers and a string denoting f, p and s, identifier of the friend who created the post, the popularity of the post and the contents of the post, respectively. It is guaranteed that no two posts have same popularity, but the same friend might make multiple posts.\n\n-----Output-----\nOutput correct ordering of posts in news feed in M lines. Output only the contents of a post.\n\n-----Constraints-----\n- 1 \u2264 N, M \u2264 103\n- 1 \u2264 Ai, f, p \u2264  105\n- 1 \u2264 length(s) \u2264  100\n\n-----Example-----\nInput:\n2 4\n1 2\n1 1 WhoDoesntLoveChefBook\n2 2 WinterIsComing\n3 10 TheseViolentDelightsHaveViolentEnds\n4 3 ComeAtTheKingBestNotMiss\n\nOutput:\nWinterIsComing\nWhoDoesntLoveChefBook\nTheseViolentDelightsHaveViolentEnds\nComeAtTheKingBestNotMiss\n\n-----Explanation-----\n\nFirst we should show posts created by friends with identifiers 1 and 2. Among the posts by these friends, the one with more popularity should be shown first.\n\nAmong remaining posts, we show those which are more popular first.\n\n Examples: \nInput: \n['2 4', '1 2', '1 1 WhoDoesntLoveChefBook', '2 2 WinterIsComing', '3 10 TheseViolentDelightsHaveViolentEnds', '4 3 ComeAtTheKingBestNotMiss']\nOutput: \n ['WinterIsComing', 'WhoDoesntLoveChefBook', 'TheseViolentDelightsHaveViolentEnds', 'ComeAtTheKingBestNotMiss']\n",
  "1349": "Problem: \nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 3. If any of the permutations is divisible by 3 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n18\n308\n\n-----Sample Output:-----\n1\n0\n\n Examples: \nInput: \n['2', '18', '308']\nOutput: \n ['1', '0']\n",
  "1351": "Problem: \nThe chef is having one array of N natural numbers(numbers may be repeated). i.e. All natural numbers must be less than N. Chef wants to rearrange the array and try to place a natural number on its index of the array, i.e array[i]=i. If multiple natural numbers are found for given index place one natural number to its index and ignore others.i.e. arr[i]=i and multiple i found in array ignore all remaining i's If any index in the array is empty place 0 at that place. i.e. if for arr[i], i is not present do arr[i]=0.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains two lines of input.\n- First-line has $N$ denoting the size of an array.\n- Second-line has $N$ space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line with the new rearranged array.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $2 \\leq N \\leq 10^3$\n- $arr[i] \\leq N-1$\n\n-----Sample Input:-----\n2\n2\n1 1\n4\n1 1 2 1\n\n-----Sample Output:-----\n0 1\n0 1 2 0\n\n-----EXPLANATION:-----\nFor 1) $1$ occurs twice in the array hence print 0 at 0th index and 1 at 1st index\nFor 2) $1$ occurs thrice and 2 once in the array hence print 0 at 0th index and 1 at 1st index, 2 at 2nd index and 0 at 3rd index.\n\n Examples: \nInput: \n['2', '2', '1 1', '4', '1 1 2 1']\nOutput: \n ['0 1', '0 1 2 0']\n",
  "1352": "Problem: \nChef is very organised in whatever he does and likes to maintain statistics of his work. Chef has expertise in web development and hence is a regular contributor on a forum. Chef sometimes makes multiple contributions in a single day.. Each day chef makes at least 1 contribution he is assigned a shade of green. The greater the number of contribution in a single day the darker shade of green he gets assigned and vice versa. Your job is to find out the number of days chef is assigned a same shade of green and print the number of times chef is assigned a unique shade of green.\n\n-----INPUT-----\nThe first line of input contains an integer T denoting the number of test cases. T test cases follow.\n\nThe first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum.\n\nThe next line contains N spaced integers the number of contributions chef has made if he has made any.\n\n-----OUTPUT-----\n\nThe output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green.\n\n-----CONSTRAINTS-----\n1 <= T <= 25\n\n5 <= N <= 50\n\n1 <= Ai <= 50\n\n-----EXAMPLE-----Input:\n\n1\n\n7\n\n20 6 5 3 3 1 1\nOutput:\n\n1: 2\n\n3: 2\n\n5: 1\n\n6: 1\n\n20: 1\n\n Examples: \nInput: \n['1', '7', '20 6 5 3 3 1 1']\nOutput: \n ['1: 2', '3: 2', '5: 1', '6: 1', '20: 1']\n",
  "1353": "Problem: \nYou are in the future. It's the time of autonomous cars. Switching lanes is a pretty difficult task for autonomous cars, and you have the logs from an experiment you had run with two cars. You want to verify whether the logs are corrupted, or could be valid.\nIn that experiment, you had a highway consisting of two lanes. These were represented by 2 rows of an infinite grid. The cell (1, 1) is the top left cell which is the starting point of the first lane. Cell (2, 1) is the bottom left cell of the grid which is the starting point of the second lane.\nThere are two cars, 1 and 2 that start from the cell (1, 1) and (2, 1). \nAt each instant, a car has the following choices.\n- Stay at the current position.\n- Move one cell to the right.\n- Switch Lanes. When a car switches its lane, it stays in the same column. That is, from (1, i) it could go to (2, i), or from (2, i) it could go to (1, i). But both both cars shouldn't end up at the same cell at any point. Note that there could have been a car which had moved at the very instant that you move into it.\nConsider one such scenario of driving cars.\nTime $t = 0$\n1.....\n2.....\n\nTime $t = 1$. Car 2 advances one cell right. Car 1 stays at the same place.\n1.....\n.2....\n\nTime $t = 2$. Car 2 stays at its place. Car 1 switches the lane.\n......\n12....\n\nTime $t = 3$. Car 2 moves one cell to the right.  Car 1 also moves one cell to the right.\n......\n.12...\n\nTime $t = 4$. Both the cars stay in the same place.\n......\n.12...\n\nYou are given positions of the car at $n$ instants. Your task is to check whether this situation is feasible or not.\n\n-----Input-----\n- The first line of the input contains an integer $T$ denoting the number of test cases. The description of the test cases follows.\n- The first line of each test case contains an integer $n$ denoting the number of instants where the positions of the cars were recorded.\n- Each of next $n$ lines contains 5 space separated integers denoting $t_i, x_i, y_i, X_i, Y_i$ denoting time, $x$ and $y$ coordinate of the first car, and that of second car.\n\n-----Output-----\nFor each test case, output either yes or no according to the answer to the problem.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le n \\leq 10^5$\n- $1 \\le t_i, y_i, X_i, Y_i \\leq 10^9$\n- $1 \\leq x_i \\leq 2$\n- $t_i < t_{i+1}$\n- Sum of $n$ over all the test cases doesn't exceed $10^6$\n\n-----Example Input-----\n2\n3\n1 1 1 2 2\n2 2 1 2 2\n4 2 2 2 3\n1\n1 1 3 2 2\n\n-----Example Output-----\nyes\nno\n\n Examples: \nInput: \n['2', '3', '1 1 1 2 2', '2 2 1 2 2', '4 2 2 2 3', '1', '1 1 3 2 2']\nOutput: \n ['yes', 'no']\n",
  "1354": "Problem: \nYou have a tree consisting of n vertices. You want to color each vertex of the tree in one of the k colors such that for any pair of vertices having same color, all the vertices belonging to the path joining them should also have same color. In other words, for any two vertices u, v with same color, all the vertices in the path joining them should also have color same as that of the u (or same as v, as u and v have same color). \n\nFind out possible number of ways in which you can color the tree satisfying the above property. As the answer could be large, print your answer modulo 109 + 7.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFor each test case, first line contains two space separated integers n, k denoting number of vertices in the tree and total number of colors, respectively\nEach of the next n - 1 lines contain two space separated integers ui, vi, denoting that there is an edge between vertices ui and vi in the tree.\n\n-----Output-----\nFor each test case, output a single line corresponding to number of ways of coloring the tree.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 n, k \u2264 50\n- 1 \u2264 ui, vi \u2264 n\n- ui \u2260 vi\n\n-----Example-----\nInput\n3\n3 2\n1 2\n2 3\n3 1\n1 2\n2 3\n4 3\n1 2\n2 3\n2 4\n\nOutput:\n6\n1\n39\n\n-----Explanation-----\nIn the first example, You can color the vertices in the following 6 ways - {1, 1, 1}, {2, 2, 2}, {1, 2, 2}, {1, 1, 2}, {2, 1, 1}, {2, 2, 1}. Note that you can't color the tree in {1, 2, 1} as the vertices in the path connecting vertex 1 and 3, (i.e. 1, 2, 3) don't have same color. You can see that the color of 2nd vertex is not same as that of 1st and 3rd.\nIn the second example, Only possible coloring you can do is to color all the vertices with color 1.\n\n Examples: \nInput: \n['3', '3 2', '1 2', '2 3', '3 1', '1 2', '2 3', '4 3', '1 2', '2 3', '2 4']\nOutput: \n ['6', '1', '39']\n",
  "1355": "Problem: \nChef likes to play with array elements. His teacher has given him an array problem. But now he is busy as Christmas is coming. So, he needs your help. Can you help him to solve this problem.\nYou are given an array $(A1,A2,A3\u2026\u2026AN)$ of length $N$. You have to create an another array using the given array in the following ways:\n\nFor each valid i, the ith element of the output array will be the sum of the ith element and (A[i])th element if $A[i]$ is less equal $N$.\n\nOther wise for each valid i following the step below\n\ni) Divide the value of $A[i]$ by 2 untill it will be less than$N$.\n\nii) then find the difference ($D$) between $N$ and $A[i]$.\n\niii) the ith element of the output array will be $Dth$ element.  \n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of T test cases follows.  \n- The first line of each test case contains a single integer $N$.  \n- The second line contains $N$ space-separated integers $A1,A2,\u2026,AN$.   \n\n-----Output:-----\n- For each testcase, print new array in each line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n- $1\\leq A1,A2.....AN \\leq 10^7$\n\n-----Sample Input:-----\n2\n\n5\n\n2 4 5 7 9\n\n4\n\n5 4 2 3\n\n-----Sample Output:-----\n6 11 14 4 2\n\n4 7 6 5\n\n-----EXPLANATION:-----\nFor 1st test case: A1 = 2+4 =6, A2 = 4+7 =11 , A3 = 5+9 =14 , A4 > N (5) ,So A4/2 = 3 then A4 = A[5 -3] , A4=A[2]=4, And A5 =A[1]=2. Then array becomes 6,11,14,4,2.\n\n Examples: \nInput: \n['2', '5', '2 4 5 7 9', '4', '5 4 2 3']\nOutput: \n ['6 11 14 4 2', '4 7 6 5']\n",
  "1356": "Problem: \nChef is good at making pancakes. Generally he gets requests to serve N pancakes at once.\nHe serves them in the form of a stack.\nA pancake can be treated as a circular disk with some radius.\nChef needs to take care that when he places a pancake on the top of the stack the radius of the pancake should not exceed the radius of the largest pancake in the stack by more than 1. \nAdditionally all radii should be positive integers, and the bottom most pancake should have its radius as 1.\nChef wants you to find out in how many ways can he create a stack containing N pancakes.\nInput\nFirst line of the input contains T (T <= 1000) denoting the number of test cases.\nT lines follow each containing a single integer N (1 <= N <= 1000) denoting the size of the required stack.\nOutput\nFor each case the output should be a single integer representing the number of ways a stack of size N can be created. As the answer can be large print it modulo 1000000007.\nExample\nInput\n2\n1\n2\n\nOutput\n1\n2\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['1', '2']\n",
  "1357": "Problem: \nChef owns an icecream shop in Chefland named scoORZ. There are only three types of coins in Chefland: Rs. 5, Rs. 10 and Rs. 15. An icecream costs Rs. 5.\nThere are $N$ people (numbered $1$ through $N$) standing in a queue to buy icecream from scoORZ. Each person wants to buy exactly one icecream. For each valid $i$, the $i$-th person has one coin with value $a_i$. It is only possible for someone to buy an icecream when Chef can give them back their change exactly \u2015 for example, if someone pays with a Rs. 10 coin, Chef needs to have a Rs. 5 coin that he gives to this person as change.\nInitially, Chef has no money. He wants to know if he can sell icecream to everyone in the queue, in the given order. Since he is busy eating his own icecream, can you tell him if he can serve all these people?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\nYES\nNO\nNO\n\n-----Explanation-----\nExample case 1: The first person pays with a Rs. 5 coin. The second person pays with a Rs. 10 coin and Chef gives them back the Rs. 5 coin (which he got from the first person) as change.\nExample case 2: The first person already cannot buy an icecream because Chef cannot give them back Rs. 5.\nExample case 3: The first person pays with a Rs. 5 coin. The second person cannot buy the icecream because Chef has only one Rs. 5 coin, but he needs to give a total of Rs. 10 back as change.\n\n Examples: \nInput: \n['3', '2', '5 10', '2', '10 5', '2', '5 15', '']\nOutput: \n ['YES', 'NO', 'NO']\n",
  "1358": "Problem: \nChef Al Gorithm was reading a book about climate and oceans when he encountered the word \u201cglaciological\u201d. He thought it was quite curious, because it has the following interesting property: For every two letters in the word, if the first appears x times and the second appears y times, then |x - y| \u2264 1.\nChef Al was happy about this and called such words 1-good words. He also generalized the concept: He said a word was K-good if for every two letters in the word, if the first appears x times and the second appears y times, then |x - y| \u2264 K.\nNow, the Chef likes K-good words a lot and so was wondering: Given some word w, how many letters does he have to remove to make it K-good?\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case consists of a single line containing two things: a word w and an integer K, separated by a space.\n\n-----Output-----\nFor each test case, output a single line containing a single integer: the minimum number of letters he has to remove to make the word K-good.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 |w| \u2264 105\n- 0 \u2264 K \u2264 105\n- w contains only lowercase English letters.\n\n-----Example-----\nInput:\n4\nglaciological 1\nteammate 0\npossessions 3\ndefenselessness 3\n\nOutput:\n0\n0\n1\n2\n\n-----Explanation-----\nExample case 1. The word \u201cglaciological\u201d is already 1-good, so the Chef doesn't have to remove any letter.\nExample case 2. Similarly, \u201cteammate\u201d is already 0-good.\nExample case 3. The word \u201cpossessions\u201d is 4-good. To make it 3-good, the Chef can remove the last s to make \u201cpossession\u201d.\nExample case 4. The word \u201cdefenselessness\u201d is 4-good. To make it 3-good, Chef Al can remove an s and an e to make, for example, \u201cdefenslesness\u201d. Note that the word doesn't have to be a valid English word.\n\n Examples: \nInput: \n['4', 'glaciological 1', 'teammate 0', 'possessions 3', 'defenselessness 3']\nOutput: \n ['0', '0', '1', '2']\n",
  "1359": "Problem: \nThere is a task in Among Us in which $N$ temperature scale with unique readings are given and you have to make all of them equal. In one second you can choose an odd number and add or subtract that number in any one temperature value. Find minimum time (in seconds) required to complete the task.\n$Note$: Equal value may or may not belong to array.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains single integer $N$, the number of temperature scales\n- Next line contain $A_i$ for $1 \\leq i \\leq N$, reading of temperature scales\n\n-----Output:-----\nFor each testcase, output a single line the time (in seconds) required to complete the task.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^3$\n- $0 \\leq A_i \\leq 10^9$\n\n-----Sample Input:-----\n3\n\n5\n\n1 2 3 4 5\n\n4\n\n5 2 3 8\n\n2\n\n50 53  \n\n-----Sample Output:-----\n5\n\n4\n\n1 \n\n-----EXPLANATION:-----\n- In the $2^{nd}$ test case we need $2$ seconds to change $2$ to $8$ , $1$ second to change $3$ and $5$ to $8$ . So total time required is $2+1+1=4$ seconds.\n\n Examples: \nInput: \n['3', '5', '1 2 3 4 5', '4', '5 2 3 8', '2', '50 53']\nOutput: \n ['5', '4', '1']\n",
  "1360": "Problem: \nWatson gives to Sherlock two strings S1 and S2 consisting of uppercase English alphabets. Next he wants Sherlock to build a flower in the following way:\n\nHe puts both strings perpendicular to each other in such a way that they overlap at the same character. For example, if he has two strings \"ABCDEF\" and \"XXBCZQ\", one possible way to make a flower is:\n\nLength of petals in the above flower are 2, 2, 3 and 3.\nA flower's ugliness is sum of absolute difference of adjacent petal lengths i.e. i.e. if adjacent petal lengths are L1, L2, L3, L4, then ugliness of flower is |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|. \nSherlock wants to find minimum value of ugliness if we consider all possible flower configurations. Note that a configuration is valid even if any of the petal length is 0.\n\n-----Input-----\nFirst line contains T, number of test cases. Each test case consists of string S1 in one line followed by string S2 in the next line. It is guaranteed that there exists at least one possible way to make a flower.\n\n-----Output-----\nFor each test case, output in one line the required answer.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 length(S1), length(S2) \u2264 105\n\n-----Example-----\nInput:\n2\nABCDE\nXXBCZQ\nBBB\nBBBBBB\n\nOutput: \n2\n6\n\n-----Explanation-----\n\nTest case 1:\n\nIf we keep the configuration shown in statement, the ugliness is 2, which is minimum possible.\n\nTest case 2:\n\nOne of the best configurations is\n\nB \nB B B  B  B B\nB\n\nwhere petal lengths are 1, 3, 1, 2.\n\n Examples: \nInput: \n['2', 'ABCDE', 'XXBCZQ', 'BBB', 'BBBBBB', '', '']\nOutput: \n ['2', '6']\n",
  "1361": "Problem: \nVision has finally made it to Wakanda to get his MindStone extracted. The MindStone was linked to his brain in a highly sophisticated manner and Shuri had to solve a complex problem to extract the stone. The MindStone had $n$ integers inscribed in it and Shuri needs to apply the prefix sum operation on the array $k$ times to extract the stone.\nFormally, given $n$ integers $A[1], A[2] ..... A[n]$ and a number $k$, apply the operation\n$A[i] = \\sum_{j=1}^{i} A[j]$\non the array $k$ times.\nFinally Shuri needs to apply $modulo$ $(10^9 + 7)$ operation to each element of the array. Can you help Shuri accomplish this task before Thanos gets to them?\n\n-----Input:-----\n- First line of the input consists of two space separated integers $n$ and $k$. \n- Second line contains $n$ space separated integers $A[1] .. A[n]$.\n\n-----Output:-----\nIn a single line print $n$ space separated integers, the values of the resultant array after applying all the operations.\n\n-----Constraints-----\n- $1 \\leq n \\leq 1000$\n- $1 \\leq k \\leq 10^{12}$\n- $1 \\leq A[i] \\leq 10^9$\n\n-----Subtasks-----\n- 20 Points: $1 \\leq k \\leq 1000$\n- 30 Points: $1 \\leq k \\leq 1000000$\n- 50 Points: Original Constraints\n\n-----Sample Input:-----\n$4$ $2$\n$3$ $4$ $1$ $5$\n\n-----Sample Output:-----\n$3$ $10$ $18$ $31$\n\n-----EXPLANATION:-----\nAfter applying the prefix sum operation once the array becomes -> $3$ $7$ $8$ $13$\nAfter applying the prefix sum operation for the second time, the array becomes -> $3$ $10$ $18$ $31$\nAfter applying $modulo$ $(10^9 +7)$ operation, array becomes -> $3$ $10$ $18$ $31$\n\n Examples: \nInput: \n['4   2', '3   4   1   5']\nOutput: \n ['3   10   18   31']\n",
  "1363": "Problem: \nA squarer is a simple and convenient device. You give it some positive integer X and it calculates its square.\nLeha is implementing a module of this device which is responsible for squaring the numbers consisting of multiple repetitions of one digit. But it turned out that it's not as simple as he thought.\nPlease help him now!\n\n-----Input-----\nThe first line contains one integer T denoting the number of testcases. The descriptions of T test cases follow.\nEach of the following T lines contain 2 space-separated integers - N and D, respectively. It means that the number X in the corresponding testcase consists of the digit D repeated N times (in decimal representation).\n\n-----Output-----\nAs the answer can be very large, we ask you to output its hash which is computed in the following way:\nLet's consider the integer answer Y as a 0-indexed array starting from its leftmost digit. The hash function is calculated as:\np0*Y[0] + p1*Y[1] + ... + pM-1*Y[M-1] modulo 109 + 7 \nwhere M is the length of the array representation of Y and p equals 23.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\n- 1 \u2264 D \u2264 9\n- Subtask 1 (16 points): 1 \u2264 N \u2264 9\n- Subtask 2 (25 points): 1 \u2264 N \u2264 100\n- Subtask 3 (27 points): 1 \u2264 N \u2264 2 \u00d7 104\n- Subtask 4 (32 points): 1 \u2264 N \u2264 106\n\n-----Example-----\nInput:3\n1 4\n3 6\n3 5\n\nOutput:139\n40079781\n32745632\n\n-----Explanation-----\nIn the first test case, X = 4 and Y = 16. Its hash equals 1*1 + 23*6 = 139.\n\n Examples: \nInput: \n['3', '1 4', '3 6', '3 5']\nOutput: \n ['139', '40079781', '32745632']\n",
  "1364": "Problem: \nChef has $N$ points (numbered $1$ through $N$) in a 2D Cartesian coordinate system. For each valid $i$, the $i$-th point is $(x_i, y_i)$. He also has a fixed integer $c$ and he may perform operations of the following type: choose a point $(x_i, y_i)$ and move it to $(x_i + c, y_i + c)$ or $(x_i - c, y_i - c)$.\nNow, Chef wants to set up one or more checkpoints (points in the same coordinate system) and perform zero or more operations in such a way that after they are performed, each of his (moved) $N$ points is located at one of the checkpoints.\nChef's primary objective is to minimise the number of checkpoints. Among all options with this minimum number of checkpoints, he wants to choose one which minimises the number of operations he needs to perform.\nCan you help Chef find the minimum number of required checkpoints and the minimum number of operations he needs to perform to move all $N$ points to these checkpoints?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $c$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $x_i$ and $y_i$.\n\n-----Output-----\nFor each test case, print a single line containing two integers \u2015 the minimum number of checkpoints and the minimum number of moves.\n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 5 \\cdot 10^5$\n- $|x_i|, |y_i| \\le 10^9$ for each valid $i$\n- $0 < c \\le 10^9$\n- the sum of $N$ over all test cases does not exceed $5 \\cdot 10^5$\n\n-----Example Input-----\n1\n3 1\n1 1\n1 0\n3 2\n\n-----Example Output-----\n2 2\n\n-----Explanation-----\nExample case 1: One optimal solution is to set up checkpoints at coordinates $(1, 1)$ and $(1, 0)$. Since the points $(1, 1)$ and $(1, 0)$ are already located at checkpoints, Chef can just move the point $(3, 2)$ to the checkpoint $(1, 0)$ in two moves: $(3, 2) \\rightarrow (2, 1) \\rightarrow (1, 0)$.\n\n Examples: \nInput: \n['1', '3 1', '1 1', '1 0', '3 2']\nOutput: \n ['2 2']\n",
  "1365": "Problem: \nThere exist certain strings, known as $Unique$ $Strings$. They possess a unique property: \n- The character 'c' gets converted to \"ff\" and the character 'k' gets converted to \"gg\". Any letter besides 'c' and 'k' does not get converted to any other character.\nYour job is to count the number of strings that could possibly be represented by a given unique string. Since the value could be very large, output the remainder when divided by $10^9+7$.\nNote that if the given string is not a unique string, i.e. it contains either 'c' or 'k', output $0$.\n\n-----Input:-----\n- The first line of input contains a string, $s$.\n\n-----Output:-----\n- Output in a single line the possible number of strings modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\leq |s| \\leq 10^5$\nwhere |s| denotes length of string.\n\n-----Sample Input 1:-----\nthing\n\n-----Sample Input 2:-----\nggdffn\n\n-----Sample Input 3:-----\nfff\n\n-----Sample Input 4:-----\ncat\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n3\n\n-----Sample Output 4:-----\n0\n\n-----EXPLANATION:-----\nThe possible strings that can be represented by the given string in each of the examples are as follows:\n$1)$ 'thing'\n$2)$ 'ggdffn','kdffn','ggdcn','kdcn'\n$3)$ 'fff','cf','fc'\n$4)$ Since the string 'cat' contains 'c', it is certain that this string is not a unique string. Hence, the output is $0$.\n\n Examples: \nInput: \n['thing', 'Sample Input 2:', 'ggdffn', 'Sample Input 3:', 'fff', 'Sample Input 4:', 'cat']\nOutput: \n ['1', 'Sample Output 2:', '4', 'Sample Output 3:', '3', 'Sample Output 4:', '0']\n",
  "1366": "Problem: \nMaster Shifu is training Po to become The Dragon Warrior and as a final assignment he must obtain maximum deliciousness from dumplings. There are  $N$ plates of dumplings in front of him with deliciousness $A_1, A_2, \\ldots, A_N$, Po can choose any number of continuous plates of  dumplings. The total deliciousness is the sum of deliciousness of all the  chosen dumplings.\nWhat is the minimum number of plates he must choose so that total deliciousness is maximum possible?\nNote: Po must choose atleast one plate.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 2 \\cdot 10^5$\n- $0 \\le A_i \\le 10^9$\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n5\n3 2 0 3 0\n\n-----Sample Output:-----\n4\n4\n\n Examples: \nInput: \n['2', '4', '1 2 3 4', '5', '3 2 0 3 0']\nOutput: \n ['4', '4']\n",
  "1367": "Problem: \nSebi lives in Chefland where the government is extremely corrupt that usually makes fool out of public by announcing eye catching but non-sustainable schemes. Recently there was a move to increase tourism in the country that was highly lauded. Sebi wants to examine whether the move has some potential or is a hogwash as usual.\nThe Chefland is a city with very old road infrastructure. The city has N tourist places. All the places are reachable from each other. The corrupt administrators of the city constructed as few roads as possible just ensuring that all the places are reachable from each other, and those too have now gone old with potholes every here and there. Upon this, there is a toll tax for each road too, which you have to pay once for using that road. Once you pay the tax for a road, you can visit it again as many times as possible.\nThe tourists coming to Chefland usually want to see all the N nice places. They usually have visit in their own vehicle and stay for few days. Also, they are usually not very rich, they want to pay as less toll tax as possible. For promoting tourism, the government offered their citizens a scheme. It was announced that citizens can choose any two places and the government will build a high class road between those two places and that too without any toll tax. Note that citizens may choose to have a high class road between two cities which already have an old road between them.\nSebi is very sceptical of the claims of the announcement. So, he wants to understand the expected toll tax a tourist has to pay to tour the entire city considering that the citizens of Chefland vote for the two cities for constructing high road uniformly randomly. Can you please him in finding this?\n\n-----Input-----\nThere is a single test case per test file.\nThe first line of the input contains an integer N denoting the number of tourist spots in Chefland.\nEach of the he next N - 1 lines contains three space separated integers u, v, c, denoting that there is a road between tourist spot u and v which has a toll tax of c Rs.\n\n-----Output-----\nOutput a single line containing the expected toll tax a tourist has to pay for visiting all the N spots after the construction of new road. Your answer will be considered correct if it has an absolute error less than or equal to 1e-2.\n\n-----Constraints-----\n- 2 \u2264 N \u2264 105\n- 1 \u2264 u, v \u2264 N\n- 0 \u2264 c \u2264 106\n\n-----Example-----\nInput:\n3\n1 2 3\n1 3 2\n\nOutput:\n2.333333\n\n-----Explanation-----\nAssume that the citizens construct the high class road between city 1 and 2. A tourist can visit all the places by just paying a toll tax of 2 Rs.\nIf the high class road is constructed between city 1 and 3. All the places then can be visited by just paying a toll tax of 3 Rs.\nIf the cities 2 and 3 are connected by the high class road. All the places can be visited by paying a toll tax of 2Rs. \nHence expected Rs. that a tourist has to pay in toll tax will be (2 + 3 + 2) / 3 = 7 / 3 = 2.333333\n\n Examples: \nInput: \n['3', '1 2 3', '1 3 2']\nOutput: \n ['2.333333']\n",
  "1368": "Problem: \nThe students of Codechef Middle School are visiting an amusement park. The children want to go on a ride, however, there is a minimum height requirement of $X$ cm. Determine if the children are eligible to go on the ride. \nPrint \"Yes\" if they are eligible, \"No\" otherwise.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $H$ which is a child's height in cm and $X$ which is the minimum permissible height. \n\n-----Output:-----\nFor each testcase, output in a single line $\"Yes\"$ or $\"No\"$. You cannot give your answer as \"YeS\", \"YES\", \"yes\" or any other variation.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^4$\n- $50 \\leq H \\leq 200$\n- $50 \\leq X \\leq 200$\n\n-----Sample Input:-----\n2\n120 100\n90 100\n\n-----Sample Output:-----\nYes\nNo\n\n-----EXPLANATION:-----\nThe first child has height more than minimum permissible height, so he can go on the ride while the other person cannot!\n\n Examples: \nInput: \n['2', '120 100', '90 100']\nOutput: \n ['Yes', 'No']\n",
  "1369": "Problem: \nChef Vivek is good in mathematics and likes solving problems on prime numbers. One day his friend Jatin told him about Victory numbers. Victory number can be defined as a number formed after summing up all the prime numbers till given number n. Now, chef Vivek who is very fond of solving questions on prime numbers got busy in some other tasks. Your task is to help him finding victory number.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- Each test case contains of a single line of input $N$ till which sum of all prime numbers between 1 to n has to be calculated.\n\n-----Output:-----\nFor each test case, output in a single line answer to the victory number.\n\n-----Constraints-----\n- $1 <= T <= 1000$\n- $1 <= N <= 10^6$\n\n-----Sample Input:-----\n3\n22\n13\n10\n\n-----Sample Output:-----\n77\n41\n17\n\n Examples: \nInput: \n['3', '22', '13', '10']\nOutput: \n ['77', '41', '17']\n",
  "1370": "Problem: \nYou were strolling outside the restaurant at the end of the universe. On a metaspiral path you stumble upon a weird device which takes a three-digit number as input and processes it. The Hitchhiker's guide to the galaxy explains that it processes the input in the following manner: \n- Multiplies it with 13, followed by 11 and then 7          \n- Outputs all the distinct three-digit numbers possible from the digits of the new number (each digit can only be used once)          \nYour friend Zaphod is in a playful mood, and does the following with the device-           \n- Given a three-digit positive number $K$, he feeds it to the device for processing.          \n- He then takes the numbers it gives as output, and send each of them through the device and again collect all the numbers sent out.          \n- Repeats the above step $N$ times.          \nTo test your wit, he challenges you to find the number of distinct 3-digit numbers which the device outputs over the $N$ steps. Can you?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow.\n- Each testcase contains of a single line of input, two integers $K, N$.\n\n-----Output:-----\nFor each testcase, output a single integer denoting the number of distinct 3-digit numbers which the device outputs over the $N$ steps.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$ \n- $5 \\leq N \\leq 10^9$ \n- Each digit of $K$ is non-zero           \n\n-----Sample Input:-----\n1\n\n123 5         \n\n-----Sample Output:-----\n27\n\n Examples: \nInput: \n['1', '123 5']\nOutput: \n ['27']\n",
  "1371": "Problem: \nGru has not been in the limelight for a long time and is, therefore, planning something particularly nefarious. Frustrated by his minions' incapability which has kept him away from the limelight, he has built a transmogrifier \u2014 a machine which mutates minions.\n\nEach minion has an intrinsic characteristic value (similar to our DNA), which is an integer. The transmogrifier adds an integer K to each of the minions' characteristic value. \n\nGru knows that if the new characteristic value of a minion is divisible by 7, then it will have Wolverine-like mutations.\n\nGiven the initial characteristic integers of N minions, all of which are then transmogrified, find out how many of them become Wolverine-like.\n\n-----Input Format:-----\nThe first line contains one integer, T, which is the number of test cases. Each test case is then described in two lines.\nThe first line contains two integers N and K, as described in the statement.\nThe next line contains N integers, which denote the initial characteristic values for the minions.\n\n-----Output Format:-----\nFor each testcase, output one integer in a new line, which is the number of Wolverine-like minions after the transmogrification.\n\n-----Constraints:-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 100\n- 1 \u2264 K \u2264 100\n- All initial characteristic values lie between 1 and 105, both inclusive.\n\n-----Example-----\nInput:\n1\n5 10\n2 4 1 35 1\n\nOutput:\n1\n\n-----Explanation:-----\nAfter transmogrification, the characteristic values become {12,14,11,45,11}, out of which only 14 is divisible by 7. So only the second minion becomes Wolverine-like.\n\n Examples: \nInput: \n['1', '5 10', '2 4 1 35 1']\nOutput: \n ['1']\n",
  "1372": "Problem: \nThe Jones Trucking Company tracks the location of each of its trucks on a grid similar to an (x, y) plane. The home office is at the location (0, 0). Read the coordinates of truck A and the coordinates of truck B and determine which is closer to the office.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 4 integers: the x-coordinate and then the \ny-coordinate of truck A followed by the x-coordinate and then the  y-coordinate of truck B.\n\n-----Output:-----\nAll letters are upper case.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nThe x-coordinate is in the range \u201320 .. 20. The y-coordinate is in the range \u201320 .. 20.\n\n-----Discussion:-----\nThe distance between point #1 with coordinates (x1, y1) and point #2 with coordinates (x2, y2) is:\n\n-----Sample Input:-----\n4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n\n-----Sample Output:-----\nA IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER\n\n Examples: \nInput: \n['4', '3 -2 -5 -3', '0 6 1 2', '-7 8 4 -1', '3 3 -2 2']\nOutput: \n ['A IS CLOSER', 'B IS CLOSER', 'B IS CLOSER', 'B IS CLOSER']\n",
  "1373": "Problem: \nChef made $N$ pieces of cakes, numbered them $1$ through $N$ and arranged them in a row in this order. There are $K$ possible types of flavours (numbered $1$ through $K$); for each valid $i$, the $i$-th piece of cake has a flavour $A_i$.\nChef wants to select a contiguous subsegment of the pieces of cake such that there is at least one flavour which does not occur in that subsegment. Find the maximum possible length of such a subsegment of cakes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum length of a valid subsegment.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $2 \\le K \\le 10^5$\n- $1 \\le A_i \\le K$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $N \\le 10^3$\n- $K = 2$\n- the sum of $N$ over all test cases does not exceed $10^4$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n6 2\n1 1 1 2 2 1\n5 3\n1 1 2 2 1\n\n-----Example Output-----\n3\n5\n\n Examples: \nInput: \n['2', '6 2', '1 1 1 2 2 1', '5 3', '1 1 2 2 1']\nOutput: \n ['3', '5']\n",
  "1374": "Problem: \nChef Hari has got a new obsession now: he has started playing chess (read about it here) and he is liking this game very much. Since Hari has spent several months playing chess with his friends, he has now decided to take part in some chess tournament in Cheftown.\n\nThere are currently two tournaments going on in Cheftown and each tournament has its own entry fee. Due to this economical restriction and his budget, Hari can take part in only one tournament.\n\nThe entry fee for first tournament is F1 units of money. The structure of tournament is as follows: first there will be group matches and then there will be finals. If Hari reaches in finals and wins it, he'll get R1 units of money. If after reaching in finals, Hari loses, he'll get R2 units of money. If Hari fails to reach in finals, he'll get nothing. The probability of reaching in finals of first tournament for Hari is p1 and probability of winning in finals after reaching is p2.\n\nThe entry fee for second tournament is F2 units of money. The structure of tournament is as follows: first there will be group matches and then there will be finals. If Hari reaches in finals, he'll immediately get R3 units of money, otherwise he'll get nothing. If after reaching in finals, Hari wins, he'll get R4 units of money. The probability of reaching in finals of second tournament for Hari is p3 and probability of winning in finals after reaching is p4.\n\nNow, Hari wants to maximise his profit. He wants to know which tournament he should participate in such that his expected profit is maximised. Help Hari in deciding this.\n\nNote:\nIn the tournaments of Cheftown, the game never ends with a draw. So, either Hari wins a game, or he loses.\n\n-----Input-----\n\nFirst line of the input contains T, the number of test cases. The description of each test case is as following:\n\nFirst line of each test case contains 6 integers F1, F2, R1, R2, R3 and R4.\n\nNext line of each test case contains 4 floating point numbers p1, p2, p3 and p4.\nEach number has exactly 2 digits after decimal point.\n\n-----Output-----\n\nFor each test case, output a single line having \"FIRST\" if expected profit of first tournament is maximum or \"SECOND\" if expected profit of second tournament is maximum or \"BOTH\" if expected profits of both the tournaments is exactly same.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 F1, F2, R1, R2, R3, R4 \u2264 100\n- 0.00 \u2264 p1, p2, p3, p4 \u2264 1.00\n\n-----Subtasks-----\nSubtask#1: 30 points\n- p1 = p3 and p2 = p4\n\nSubtask#2: 70 points\n- All usual constraints.\n\n-----Example-----\nInput:\n2\n30 50 70 10 40 30\n0.25 0.10 0.30 0.05\n50 36 80 38 65 32\n0.55 0.12 0.33 0.54\n\nOutput:\nFIRST\nSECOND\n\n-----Explanation-----\n\nIn the first case, the expected profit for first tournament is -26.00 and expected profit for second tournament is -37.55. So, first tournament has better expected profit.\n\nIn the second case, the expected profit for first tournament is -26.328 and expected profit for second tournament is -8.8476. So, second tournament has better expected profit.\n\n Examples: \nInput: \n['2', '30 50 70 10 40 30', '0.25 0.10 0.30 0.05', '50 36 80 38 65 32', '0.55 0.12 0.33 0.54']\nOutput: \n ['FIRST', 'SECOND']\n",
  "1375": "Problem: \n-----Problem description.-----\nThis problem deals with the I/O methods used in codechef. \nYou are supposed to print the integer in its reverse form , or in simple words, print the reverse of the given integer . For instance , reverse of  120 is 21  (not 021)  .\n\n-----Input-----\n- The first line of each test case contains an integer T .\n\n- following T lines contains distinct integers N .\n\n\n\n-----Output-----\n- Output should contain T line , each line with the distinct integer as asked in question . \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n\n- 1 \u2264 N \u2264 1018\n\nSubtask 1 :  N \u2264 105\nSubtask 2 :  N \u2264 109\nSubtask 3 :  N \u2264 1018\n\n\n\n-----Example-----\nInput:\n3\n1234\n4567\n1\n\nOutput:\n4321\n7654\n1\n\n-----Explanation-----\nreverse of 1234 is 4321 , 4567 is 7654 & of 1 is 1 \n\nNOTE: testcases may contain large range of data, use datatypes accordingly .\n\n Examples: \nInput: \n['3', '1234', '4567', '1']\nOutput: \n ['4321', '7654', '1']\n",
  "1377": "Problem: \n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\n Examples: \nInput: \n['3', '75 45 78 40', '50 32 45 30', '56 48 62 45']\nOutput: \n ['1.0 DEGREE(S) ABOVE NORMAL', '3.5 DEGREE(S) ABOVE NORMAL', '1.5 DEGREE(S) BELOW NORMAL']\n",
  "1378": "Problem: \nThere are K nuclear reactor chambers labelled from 0 to K-1. Particles are bombarded onto chamber 0. The particles keep collecting in the chamber 0. However if at any time, there are more than N particles in a chamber, a reaction will cause 1 particle to move to the immediate next chamber(if current chamber is 0, then to chamber number 1), and all the particles in the current    chamber will be be destroyed and same continues till no chamber has number of particles greater than N. Given K,N and the total number of particles bombarded (A), find the final distribution of particles in the K chambers. Particles are bombarded one at a time. After one particle is bombarded, the set of reactions, as described, take place. After all reactions are over, the next particle is bombarded. If a particle is going out from the last chamber, it has nowhere to go and is lost.\n\n-----Input-----\n\nThe input will consist of one line containing three numbers A,N and K separated by spaces.\nA will be between 0 and 1000000000 inclusive.\nN will be between 0 and 100 inclusive.\nK will be between 1 and 100 inclusive.\nAll chambers start off with zero particles initially.\n\n-----Output-----\n\nConsists of K numbers on one line followed by a newline. The first number is the number of particles in chamber 0, the second number is the number of particles in chamber 1 and so on.\n\n-----Example-----\nInput:\n3 1 3\nOutput:\n1 1 0\nExplanation\nTotal of 3 particles are bombarded. After particle 1 is bombarded, the chambers have particle distribution as\n\"1 0 0\". After second particle is bombarded, number of particles in chamber 0 becomes 2 which is greater\nthan 1. So, num of particles in chamber 0 becomes 0 and in chamber 1 becomes 1. So now distribution is\n\"0 1 0\". After the 3rd particle is bombarded, chamber 0 gets 1 particle and so distribution is \"1 1 0\" after all\nparticles are bombarded one by one.\n\n Examples: \nInput: \n['3 1 3']\nOutput: \n ['1 1 0']\n",
  "1379": "Problem: \nA simple string contains a large repetition of letters within it. This problem is related to string handling and manipulation.  An original message is sent from planet Earth to planet Cybertron in form of a string. However, the letter position and string size is not important. The number of time each letter has occurred in the string is important. So the original string which is sent to Cybertron is encrypted in the new string which comprises the letters followed by each time it has occurred in the original string. Eg- original message is- abcdabf. Then the encrypted string is- a2b2c1d1f1\n\n-----Input-----\nThe input consists of a single line string without any space or numeric or special characters.\n\n-----Output-----\nIt will consist of in the encrypted string which comprises the letters followed by each time it has occurred in the original string in order.\n\n-----Example-----\nInput:\ninformation\n\nOutput:\ni2n2f1o2r1m1a1t1\n\n Examples: \nInput: \n['information']\nOutput: \n ['i2n2f1o2r1m1a1t1']\n",
  "1380": "Problem: \nThe chef was searching for his pen in the garage but he found his old machine with a display and some numbers on it. If some numbers entered then some different output occurs on the display. Chef wants to crack the algorithm that the machine is following.\nExample to identify the pattern :\nInput                            Output\n9                                   36\n5                                   10\n1                                    0\n2                                    1\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer as displayed on the screen.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n1\n7\n\n-----Sample Output:-----\n21\n\n Examples: \nInput: \n['1', '7']\nOutput: \n ['21']\n",
  "1381": "Problem: \nChef works as a cook in a restaurant. Each morning, he has to drive down a straight road with length K$K$ to reach the restaurant from his home. Let's describe this road using a coordinate X$X$; the position of Chef's home is X=0$X = 0$ and the position of the restaurant is X=K$X = K$.\nThe road has exactly two lanes (numbered 1$1$ and 2$2$), but there are N$N$ obstacles (numbered 1$1$ through N$N$) on it. For each valid i$i$, the i$i$-th obstacle blocks the lane Li$L_i$ at the position X=Xi$X = X_i$ and does not block the other lane.\nWhen driving, Chef cannot pass through an obstacle. He can switch lanes in zero time at any integer X$X$-coordinate which does not coincide with the X$X$-coordinate of any obstacle. However, whenever he switches lanes, he cannot switch again until driving for at least D$D$ units of distance, and he can travel only in the direction of increasing X$X$. Chef can start driving in any lane he wants. He can not switch lanes at non-integer  X$X$-coordinate.\nSometimes, it is impossible to reach the restaurant without stopping at an obstacle. Find the maximum possible distance Chef can travel before he has to reach an obstacle which is in the same lane as him. If he can avoid all obstacles and reach the restaurant, the answer is K$K$.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains three space-separated integers N$N$, K$K$ and D$D$.\n- The second line contains N$N$ space-separated integers X1,X2,\u2026,XN$X_1, X_2, \\ldots, X_N$.\n- The third line contains N$N$ space-separated integers L1,L2,\u2026,LN$L_1, L_2, \\ldots, L_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum distance Chef can travel.\n\n-----Constraints-----\n- 1\u2264T\u22641,000$1 \\le T \\le 1,000$\n- 1\u2264N\u2264105$1 \\le N \\le 10^5$\n- 2\u2264K\u2264109$2 \\le K \\le 10^9$\n- 1\u2264D\u2264109$1 \\le D \\le 10^9$\n- 1\u2264Xi\u2264K\u22121$1 \\le X_i \\le K-1$ for each valid i$i$\n- Xi<Xi+1$X_i < X_{i+1}$ for each valid i$i$\n- 1\u2264Li\u22642$1 \\le L_i \\le 2$ for each valid i$i$\n- the sum of N$N$ over all test cases does not exceed 106$10^6$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n4\n2 10 20\n4 7\n1 2\n4 15 20\n4 6 9 13\n1 2 2 1\n5 10 1\n1 3 5 7 9\n1 2 1 2 1\n2 10 2\n4 5\n1 2\n\n-----Example Output-----\n10\n13\n10\n5\n\n-----Explanation-----\nExample case 1: Chef can start in lane 2$2$ and switch to lane 1$1$ at the position X=6$X = 6$, then continue until reaching the restaurant.\nExample case 2: Chef can start in lane 2$2$ and switch to lane 1$1$ at X=5$X = 5$. However, he cannot avoid the obstacle at X=13$X = 13$, because he has not driven for at least 20$20$ units since the last switch.\nExample case 3: Chef should start in lane 2$2$ and then switch lanes at the positions X=2$X=2$, X=4$X=4$, X=6$X=6$ and X=8$X=8$. This way, he can reach the restaurant.\nExample case 4: Chef can start in lane 2$2$ but he cannot escape the second obstacle at X$X$=5 since the first obstacle at X$X$=4 doesn't give enough space for Chef to switch lanes.\n\n Examples: \nInput: \n['4', '2 10 20', '4 7', '1 2', '4 15 20', '4 6 9 13', '1 2 2 1', '5 10 1', '1 3 5 7 9', '1 2 1 2 1', '2 10 2', '4 5', '1 2']\nOutput: \n ['10', '13', '10', '5']\n",
  "1382": "Problem: \nChef has an array of N integers. He wants to play a special game. In this game he needs to make all the integers in the array greater than or equal to 0. \nChef can use two types of operations. The first type is to  increase all the integers of the given array by 1, but it costs X coins. The operation of the second type is to add 1 to only one integer of the given array and to use this operation you need to pay 1 coin. You need to calculate the minimal cost to win this game (to make all integers greater than or equal to 0)  \n\n-----Input-----\n\nThe first line of the input contains an integer N denoting the number of elements in the given array. The second line contains N space-separated integers A1, A2, ..., AN denoting the given array. The third line contains number X - cost of the first type operation. \n\n\n-----Output-----\nFor each test case, output a single line containing minimal cost required to make all the integers greater than or equal to zero.\n\n-----Constraints-----\n\n- 1 \u2264 N \u2264 105\n- -109 \u2264 Ai \u2264  109 \n- 0 \u2264 X  \u2264 109\n\n-----Example-----\nInput:\n3\n-1 -2 -3\n2\n\nOutput:\n5\n\n-----Explanation-----\nExample case 1: Use the first type operation twice and the second type once.\n\n Examples: \nInput: \n['3', '-1 -2 -3', '2']\nOutput: \n ['5']\n",
  "1383": "Problem: \nDue to COVID19 all employees of chemical factory are quarantined in home. So, company is organized by automated robots. There are $N$ Containers in company, which are labelled with $1$ to $N$ numbers. There are Total $N$ robots in Company, which are labelled $1$ to $N$. \nEach Robot adds $1$ litter Chemical in containers whose labels are multiple of robots\u2019 label. (E.g. robot labelled 2 will add Chemical in containers labelled 2, 4, 6, \u2026.). \nRobots follow few rules mentioned below:\n- Chemical with $pH<7$ is acidic.\n- Chemical with $pH=7$ is neutral.\n- Chemical with $pH>7$ is basic.\n- Mixture of $1$ litter acid and $1$ litter base makes neutral solution.\n- If Container is empty or pH of Chemical in container is equal to \n- $7$ then robot adds $1$ litter acidic Chemical.\n- If pH of Chemical in container is less than $7$ then robots adds $1$ litter basic Chemical.\nNow Chemical is packed in $4$ ways:\n- Containers with exactly $2$ litter acid and $1$ litter base are packed at $P1$ cost. \n- Containers with acidic Chemical are packed at $P2$ cost. (Here Don\u2019t consider containers with exactly $2$ litter acid and $1$ litter base as we counted them in above rule)\n- Containers with $pH=7$ Chemical is packed at $P3$ cost.\n- Containers with Basic Chemical are packed at $P4$ cost.\nNow $1$ employee given task to find packing cost of containers with labels in range $[ k1, k2]$ (Inclusive). Help him out. As Cost can be large find cost in modulo of $100000007$\n\n-----Input:-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains $3$ space separated Integers $N$, $K1$ and $K2$.\n- The second and last line contains $4$ space separated Integers $P1$, $P2$, $P3$ and $P4$\n\n-----Output:-----\nFor each test case, print total cost of packing of containers modulo 100000007.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50000$\n- $1 \\leq P1, P2, P3, P4 \\leq 2*10^7$\n- $2 \\leq N \\leq 2*10^7$\n- $1 \\leq K1, K2 \\leq N$\n\n-----Subtasks-----Subtask #1 (20 points):\n- $1 \\leq T \\leq 10$\n- $1 \\leq P1, P2, P3, P4 \\leq 2*10^7$\n- $2 \\leq N \\leq 1000$\n- $1 \\leq K1, K2 \\leq N$Subtask #2 (80 points) :\n- Original Constraint\n\n-----Sample Input:-----\n1\n4 1 4\n2 2 2 2\n\n-----Sample Output:-----\n8\n\n-----Explanation:-----\nLet\u2019s use notation, \n0 for acidic Chemical, \n1 for Chemical with pH=7, \n2 for basic Chemical,\n3 for Containers with exactly 2 litter acid and 1 litter base,\n-1 for empty containers\nInitially 4 containers are empty so\n[-1, -1, -1, -1]\nRobot 1 adds 1 litter acid in all containers.\n[0, 0, 0, 0]\nRobot 2 adds base in containers labelled 2, 4\n[0, 1, 0, 1]\nRobot 3 adds base in containers labelled 3\n[0, 1, 1, 1]\nRobot 4 adds acid in containers labelled 4 because it contains Chemical with pH=7. After adding acid, it also contains exactly 2 litter acid and 1 litter base, so denoting it with 3.\n[0, 1, 1, 3]\nCorresponding cost of packing container\n[P2, P3, P3, P1]\nNow, calculate total cost,\nCost = P2+P3+P3+P1 = 2+2+2+2 = 8\n\n Examples: \nInput: \n['1', '4 1 4', '2 2 2 2']\nOutput: \n ['8']\n",
  "1384": "Problem: \nOn each of the following $N$ days (numbered $1$ through $N$), Chef is planning to cook either pizza or broccoli. He wrote down a string $A$ with length $N$, where for each valid $i$, if the character $A_i$ is '1', then he will cook pizza on the $i$-th day, while if $A_i$ is '0', he will cook broccoli on this day.\nChefu, his son, loves pizza but hates broccoli \u2015 just like most kids. He wants to select a substring of $A$ with length $K$ and change each character '0' in this substring to '1'. Afterwards, let's define pizza time as the maximum number of consecutive days where Chef will cook pizza. Find the maximum pizza time Chefu can achieve.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$. \n- The second line contains a string $A$ with length $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum pizza time.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le K \\le N \\le 10^5$\n- $A$ contains only characters '0' and '1'\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $N \\le 10^3$\n- the sum of $N$ over all test cases does not exceed $10^4$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n13 2\n0101110000101\n6 3\n100001\n\n-----Example Output-----\n5\n4\n\n-----Explanation-----\nExample case 1: Chefu can choose the substring $A[2, 3]$ = \"10\", and change the third character of $A$ to '1'. Then, the pizza time is $5$ days: from day $2$ to day $6$.\nExample case 2: Chefu can choose the substring $A[2, 4]$ = \"000\". Then, the pizza time is $4$ days: from day $1$ to day $4$.\n\n Examples: \nInput: \n['2', '13 2', '0101110000101', '6 3', '100001']\nOutput: \n ['5', '4']\n",
  "1386": "Problem: \n-----Problem description-----\nAs a holiday gift, Tojo received a probability problem. The problem read as follows\nConsider an N by M grid. Rows are numbered 1 to N, from top to bottom. Columns are numbered 1 to M, from left to right. You are initially at cell (1, 1) and want to go to cell (N, M). From any cell you can move to the cell below it or to the cell right to it. You should never go out of the grid. At any point you should consider all the possibilities of movement with equal probability\nLet P[i][j] be the probability of visiting cell (i, j). You need to calculate the sum of P[i][j] for 1 \u2264 i \u2264 N, 1 \u2264 i \u2264 M.\nAs we all know, Tojo really hates probability related problems. He wants you to solve this task\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.Only line of each test case has two integer N and M.\n\n-----Output-----\nFor each test case, output a single line containing the required answer. Answers within an absolute or relative error of 10-6 will be accepted.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 M \u2264 1000\n\n-----Example-----\nInput:\n2\n2 2\n1 6\n\nOutput:\n3.000000\n6.000000\n\n-----Explanation-----\nExample case 1\nProbability matrix P for N=2, M=2 is\n\n1.0 0.5\n\n0.5 1.0\n\nYou are at (1, 1) initially. So the probablity of visiting (1, 1) is 1. At (1, 1) you have 2 options, move below to (2, 1) or to right cell (1, 2). Probablity of going to (1, 2) is 0.5. Probability of going to (2, 1) is 0.5. You always end up at (2, 2), so P[2][2] is 1. Required sum = 1.0 + 0.5 + 0.5 + 1.0 = 3.0\nExample case 2\nProbability matrix P for N=1, M=6 is\n\n1.0 1.0 1.0 1.0 1.0 1.0\n\nBecause at any position there is only one possible next position.\n\n Examples: \nInput: \n['2', '2 2', '1 6']\nOutput: \n ['3.000000', '6.000000']\n",
  "1389": "Problem: \nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline). Your task is print the words in the text in reverse order without any punctuation marks.\nFor example consider the following candidate for the input text:\n$ $\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n$ $\nThe corresponding output would read as:\n$ $\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\n$ $\nThat is, the lines are printed in reverse order and in each line the words are printed in reverse order.\n\n-----Input:-----\nThe first line of input contains a single integer $N$, indicating the number of lines in the input. This is followed by $N$ lines of input text.\n\n-----Output:-----\n$N$ lines of output text containing the input lines in reverse order and where each line contains the words in reverse order as illustrated above.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\n Examples: \nInput: \n['2', 'This is a sample piece of text to illustrate this ', 'problem.  If you are smart you will solve this right.', '']\nOutput: \n ['right this solve will you smart are you If problem', 'this illustrate to text of piece sample a is This']\n",
  "1390": "Problem: \nOur Chef who was a renouned mathematician has recently got into diamonds' business. \nShe has accidentally misplaced $Q$ diamonds into a jar which already had $N$ chocolates. She then started wondering about an interesting question as following. \nIf we pick items one by one at random without replacement, what would be the expected number of picks required to get all diamonds out. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers $N$, $Q$. \n\n-----Output:-----\nFor each testcase, output the answer in a single line. Your answer is considered if its absolute or relative error doesn't exceed $10^{-6}$\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n\n-----Sample Input:-----\n1\n2 2\n\n-----Sample Output:-----\n3.3333333333\n\n-----EXPLANATION:-----\nHere there are 2 Diamonds, 2 chocolates in the jar. \nSay C is chocolate, D is diamond.\nIf the random order of picking them from left to right is \"CDDC\", after 3 picks (CDD) all diamonds are out.\nSimilarly, for the remaining orders it would be the following:\n\"CDCD\" => 4\n\"CCDD\" => 4\n\"DDCC\" => 2\n\"DCDC\" => 3\n\"DCCD\" => 4\nHence the expected number of picks would be (3+4+4+2+3+4)/6 = 3.333333\n\n Examples: \nInput: \n['1', '2 2']\nOutput: \n ['3.3333333333']\n",
  "1391": "Problem: \nOur chef has recently opened a new restaurant with a unique style. The restaurant is divided into K compartments (numbered from 1 to K) and each compartment can be occupied by at most one customer. \nEach customer that visits the restaurant has a strongly preferred compartment p (1 \u2264 p \u2264 K), and if that compartment is already occupied, then the customer simply leaves. Now obviously, the chef wants to maximize the total number of customers that dine at his restaurant and so he allows (or disallows) certain customers so as to achieve this task. You are to help him with this. \nGiven a list of N customers with their arrival time, departure time and the preferred compartment, you need to calculate the maximum number of customers that can dine at the restaurant. \n\n-----Input-----\nThe first line contains an integer T denoting the number of test cases. Each of the next T lines contains two integers N and  K , the number of customers that plan to visit the chef's restaurant and the number of compartments the restaurant is divided into respectively. Each of the next N lines contains three integers si, fi and pi , the arrival time, departure time and the strongly preferred compartment of the ith customer respectively.  \n\nNote that the ith customer wants to occupy the pith compartment from [si, fi)  i.e the ith customer leaves just before   fi  so that another customer can occupy that compartment from   fi  onwards.\n\n-----Output-----\nFor every test case, print in a single line the maximum number of customers that dine at the restaurant.\n\n-----Constraints-----\n-  1 \u2264  T \u2264   30 \n-  0  \u2264 N  \u2264  105 \n-  1  \u2264  K  \u2264  109 \n-  0  \u2264  si < fi \u2264   109 \n-  1  \u2264  pi  \u2264  K  \n\n-----Example-----\nInput:\n2\n3 3\n1 3 1\n4 6 2\n7 10 3\n4 2\n10 100 1\n100 200 2\n150 500 2\n200 300 2\n\nOutput:\n3\n3\n\n-----Explanation-----\nExample case 1.\n\nAll three customers want different compartments and hence all 3 can be accommodated.\n\nExample case 2.\n\nIf we serve the 1st, 2nd and 4th customers, then we can get a maximum of 3.\n\n Examples: \nInput: \n['2', '3 3', '1 3 1', '4 6 2', '7 10 3', '4 2', '10 100 1', '100 200 2', '150 500 2', '200 300 2']\nOutput: \n ['3', '3']\n",
  "1392": "Problem: \nChef and Chefina are best friends. Chefina wants to test the Problem Solving skills of chef so she provides Chef 2 integer number  $X$ and $Y$\nThe task of chef is to take the  two numbers $X$ and $Y$ and return their SUM.\nIdentify whether Chef can solve the problem or not? \n\n-----Input:-----\n- First line will contain the two integers $X$ and $Y$.\n\n-----Output:-----\nFor each testcase, output in a single line the SUM of these two numbers $X$ and $Y$.\n\n-----Constraints-----\n- $1 \\leq X \\leq 100$\n- $1 \\leq Y \\leq 100$\n\n-----Sample Input:-----\n6 70\n\n-----Sample Output:-----\n76\n\n Examples: \nInput: \n['6 70']\nOutput: \n ['76']\n",
  "1393": "Problem: \nMost problems on CodeChef highlight chef's love for food and cooking but little is known about his love for racing sports. He is an avid Formula 1 fan. He went to watch this year's Indian Grand Prix at New Delhi. He noticed that one segment of the circuit was a long straight road. It was impossible for a car to overtake other cars on this segment. Therefore, a car had to lower down its speed if there was a slower car in front of it. While watching the race, Chef started to wonder how many cars were moving at their maximum speed.\nFormally, you're given the maximum speed of N cars in the order they entered the long straight segment of the circuit. Each car prefers to move at its maximum speed. If that's not possible because of the front car being slow, it might have to lower its speed. It still moves at the fastest possible speed while avoiding any collisions. For the purpose of this problem, you can assume that the straight segment is infinitely long.\nCount the number of cars which were moving at their maximum speed on the straight segment.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases to follow. Description of each test case contains 2 lines. The first of these lines contain a single integer N, the number of cars. The second line contains N space separated integers, denoting the maximum speed of the cars in the order they entered the long straight segment.\n\n-----Output-----\nFor each test case, output a single line containing the number of cars which were moving at their maximum speed on the segment.\n\n-----Example-----\nInput:\n3\n1\n10\n3\n8 3 6\n5\n4 5 1 2 3\n\nOutput:\n1\n2\n2\n\n-----Constraints-----\n\n1 \u2264 T \u2264 100\n\n1 \u2264 N \u2264 10,000\n\nAll speeds are distinct positive integers that fit in a 32 bit signed integer.\n\nEach input file will not be larger than 4 MB (4,000,000,000 bytes) in size.\n\nWARNING! The input files are very large. Use faster I/O.\n\n Examples: \nInput: \n['3', '1', '10', '3', '8 3 6', '5', '4 5 1 2 3']\nOutput: \n ['1', '2', '2', 'Constraints', '1 \u2264 T \u2264 100', '1 \u2264 N \u2264 10,000', 'All speeds are distinct positive integers that fit in a 32 bit signed integer.', 'Each input file will not be larger than 4 MB (4,000,000,000 bytes) in size.', 'WARNING!  The input files are very large. Use faster I/O.']\n",
  "1394": "Problem: \nChef's pizza is the tastiest pizza to exist, and the reason for that is his special, juicy homegrown tomatoes. \nTomatoes can be grown in rectangular patches of any side lengths. However, Chef only has a limited amount of land. \nConsider the entire town of Chefville to be consisting of cells in a rectangular grid of positive coordinates. \nChef own all cells (x,y)$(x, y)$ that satisfy x\u2217y\u2264N$x*y \\leq N$\nAs an example if N=4$N = 4$, Chef owns the following cells: \n(1,1),(1,2),(1,3),(1,4),(2,1),(2,2),(3,1),(4,1)$(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (3, 1), (4, 1) $\nChef can only grow tomatoes in rectangular patches consisting only of cells which belong to him. Also, if he uses a cell, he must use it entirely. He cannot use only a portion of it. \nHelp Chef find the number of unique patches of rectangular land that he can grow tomatoes in! Since this number can be very large, output it modulo 1000000007$1000000007$.\n\n-----Input:-----\n- The first line of the input contains T$T$, the number of test cases.\n- The next T$T$ lines of input contains one integer N$N$.\n\n-----Output:-----\nFor each testcase, output the number of ways modulo 1000000007$1000000007$.\n\n-----Constraints-----\n- 1\u2264T\u22645$1 \\leq T \\leq 5$\n- 1\u2264N\u22641010$1 \\leq N \\leq 10^{10}$\n\n-----Sample Input:-----\n2\n4\n10000000000\n\n-----Sample Output:-----\n23\n227374950\n\n Examples: \nInput: \n['2', '4', '10000000000']\nOutput: \n ['23', '227374950']\n",
  "1395": "Problem: \nRam and Shyam are sitting next to each other, hoping to cheat on an exam. However, the examination board has prepared $p$ different sets of questions (numbered $0$ through $p-1$), which will be distributed to the students in the following way:\n- The students are assigned roll numbers \u2014 pairwise distinct positive integers.\n- If a student's roll number is $r$, this student gets the $((r-1)\\%p)$-th set of questions.\nObviously, Ram and Shyam can cheat only if they get the same set of questions.\nYou are given the roll numbers of Ram and Shyam: $A$ and $B$ respectively. Find the number of values of $p$ for which they can cheat, or determine that there is an infinite number of such values.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $A$ and $B$.\n\n-----Output-----\nFor each test case, print a single line \u2014 the number of values of $p$ for which Ram and Shyam can cheat, or $-1$ if there is an infinite number of such values.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le A, B \\le 10^8$\n\n-----Example Input-----\n1\n2 6\n\n-----Example Output-----\n3\n\n-----Explanation-----\nExample case 1: They can cheat for $p = 1$, $p = 2$ or $p = 4$.\n\n Examples: \nInput: \n['1', '2 6']\nOutput: \n ['3']\n",
  "1396": "Problem: \nMysterious Chefland\u2026 Recently, Chef realised that Discuss, the educational system of Chefland, is out of date. Therefore, he is trying to find ways to update the infrastructure in the country. One possible way is to move all materials from Discuss to Discourse.\nChef will have access to Discourse if his knowledge and power become exactly equal to $N$ and $M$ respectively. Initially, he has power $1$ and knowledge $1$.\nChef can perform actions of the following types to improve his skills:\n- solve a problem \u2014 increase his knowledge by $X$\n- do a push-up \u2014 increase his power by $Y$\n- install ShareChat to keep in touch with friends \u2014 increase both knowledge and power by $1$\nChef can only install ShareChat at most once. The remaining actions may be performed any number of times and the actions may be performed in any order.\nHelp Chef find out whether it is possible to move from Discuss to Discourse.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains four space-separated integers $N$, $M$, $X$ and $Y$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Chefirnemo\" if it is possible to reach the required knowledge and power or \"Pofik\" if it is impossible.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N, M, X, Y \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (30 points): $1 \\le N, M, X, Y \\le 100$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n5\n2 2 1 2\n11 10 5 9\n11 11 5 9\n12 11 5 9\n1 2 1 100\n\n-----Example Output-----\nChefirnemo\nChefirnemo\nPofik\nChefirnemo\nPofik\n\n-----Explanation-----\nExample case 2: We add $Y=9$ once to the power to get power $10$. We add $X=5$ twice to the knowledge to get knowledge $11$.\nExample case 3: We can see that it is impossible to reach power $M=11$ no matter which or how many operations we do. Note that the ShareChat operation will increase both knowledge and power by $1$, and hence it will still be impossible to attain the given values of knowledge and power at the same time.\nExample case 4: We can reach knowledge $11$ and power $10$ like in example case 2, the only difference is that we also use the ShareChat operation to increase both by $1$.\n\n Examples: \nInput: \n['5', '2 2 1 2', '11 10 5 9', '11 11 5 9', '12 11 5 9', '1 2 1 100']\nOutput: \n ['Chefirnemo', 'Chefirnemo', 'Pofik', 'Chefirnemo', 'Pofik']\n",
  "1397": "Problem: \nChef has a sequence $A_1, A_2, \\ldots, A_N$. For a positive integer $M$, sequence $B$ is defined as $B = A*M$ that is, appending $A$ exactly $M$ times. For example, If $A = [1, 2]$ and $M = 3$, then $B = A*M = [1, 2, 1, 2, 1, 2]$\nYou have to help him to find out the minimum value of $M$ such that the length of the longest strictly increasing subsequence is maximum possible.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum value of $M$.\n\n-----Constraints-----\n- $1 \\le T \\le 500$\n- $1 \\le N \\le 2*10^5$\n- $1 \\le A_i \\le 10^9$\n- It's guaranteed that the total length of the sequence $A$ in one test file doesn't exceed $2*10^6$\n\n-----Sample Input:-----\n3\n2\n2 1\n2\n1 2\n5\n1 3 2 1 2\n\n-----Sample Output:-----\n2\n1\n2\n\n-----Explanation:-----\nIn the first test case, Choosing $M = 2$ gives $B = [2, 1, 2, 1]$ which has a longest strictly increasing sequence of length $2$ which is the maximum possible.\nIn the second test case, Choosing $M = 1$ gives $B  = [1, 2]$ which has a longest strictly increasing sequence of length $2$ which is the maximum possible.\n\n Examples: \nInput: \n['3', '2', '2 1', '2', '1 2', '5', '1 3 2 1 2']\nOutput: \n ['2', '1', '2']\n",
  "1398": "Problem: \nYou have initially a string of N characters, denoted by A1,A2...AN. You have to print the size of the largest subsequence of string A such that all the characters in that subsequence are distinct ie. no two characters in that subsequence should be same.\n\nA subsequence of string A is a sequence that can be derived from A by deleting some elements  and without changing the order of the remaining elements.\n\n-----Input-----\nFirst line contains T, number of testcases. Each testcase consists of a single string in one line. Each character of the string will be a small alphabet(ie. 'a' to 'z').\n\n-----Output-----\nFor each testcase, print the required answer in one line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- Subtask 1 (20 points):1 \u2264 N \u2264 10\n- Subtask 2 (80 points):1 \u2264 N \u2264 105\n\n-----Example-----\nInput:\n2\nabc\naba\n\nOutput:\n3\n2\n\n-----Explanation-----\nFor first testcase, the whole string is a subsequence which has all distinct characters.\n\nIn second testcase, the we can delete last or first 'a' to get the required subsequence.\n\n Examples: \nInput: \n['2', 'abc', 'aba']\nOutput: \n ['3', '2']\n",
  "1400": "Problem: \nChandler has a list of non zero positive integers with him. He made a very interesting observation about the list. He noticed that the number of unique integers in an array of size $N$ is in the range $L$ to $R$ (both inclusive) and every element was either 1 or an even number x, in which case x/2 was also definitely present in the array. \nChandler has misplaced the list of integers but he wants to impress Monica with his problem solving skills by finding out the minimum and maximum possible sum of all elements of the list of integers.\nCan you also help him solve the problem so that he can win over Monica?\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. \n- The first line of each test case contains integers $N$, $L$, and $R$. \n\n-----Output:-----\nFor each test case print 2 space-separated integers, the minimum and the maximum possible sum of N elements based on the above facts.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n- $1 \\leq L \\leq R \\leq min(N,20)$\n\n-----Sample Input:-----\n2\n\n4 2 2\n\n5 1 5\n\n-----Sample Output:-----\n5 7\n\n5 31\n\n-----EXPLANATION:-----\n- \nExample 1: For an array of size 4, with minimum 2 unique integers and maximum 2 unique integers, the possible arrays are (1,1,1,2), (1,1,2,2), (1,2,2,2)\nOut of these, the minimum possible sum of elements is 5(1+1+1+2) and maximum possible sum is 7(1+2+2+2)\n- \nExample 2: For an array of size 5, with minimum 1 unique integer and maximum 5 unique integers, minimum possible sum of elements is 5(1+1+1+1+1) and maximum possible sum is 31(1+2+4+8+16)\n\n Examples: \nInput: \n['2', '4 2 2', '5 1 5']\nOutput: \n ['5 7', '5 31']\n",
  "1401": "Problem: \nGive me Chocolate\n\nAnushka wants to buy chocolates.there are many chocolates in front of her, tagged with their prices.\n\nAnushka has only a certain amount to spend, and she wants to maximize the number of chocolates she buys with this money.\n\nGiven a list of prices and an amount to spend, what is the maximum number of chocolates Anushka can buy? \n\nFor example, \n\nif prices =[1,2,3,4]\nand Anushka has k=7 to spend, she can buy items [1,2,3] for 6 , or [3,4] for 7 units of currency. she would choose the first group of 3 items.\n\nInput Format\n\nThe first line contains two integers, n and k , the number of priced chocolates and the amount Anushka has to spend.\n\nThe next line contains n space-separated integers prices[i]\n\nConstraints\n\n1<= n <= 105\n\n1<= k <= 109\n\n1<= prices[i] <= 109\n\n\n\nA chocolate can't be bought multiple times.\n\nOutput Format\n\nAn integer that denotes the maximum number of chocolates Anushka can buy for her.\n\nSample Input\n\n7 50\n\n1 12 5 111 200 1000 10\n\nSample Output\n\n4\n\nExplanation\n\nshe can buy only 4 chocolatess at most. These chocolates have the following prices: 1, 12, 5, 10.\n\n Examples: \nInput: \n['7 50', '1 12 5 111 200 1000 10']\nOutput: \n ['4']\n",
  "1402": "Problem: \nRecently, Chef studied the binary numeral system and noticed that it is extremely simple to perform bitwise operations like AND, XOR or bit shift on non-negative integers, while it is much more complicated to perform arithmetic operations (e.g. addition, multiplication or division).\nAfter playing with binary operations for a while, Chef invented an interesting algorithm for addition of two non-negative integers $A$ and $B$:\nfunction add(A, B):\nwhile B is greater than 0:\nU = A XOR B\nV = A AND B\nA = U\nB = V * 2\nreturn A\n\nNow Chef is wondering how fast this algorithm is. Given the initial values of $A$ and $B$ (in binary representation), he needs you to help him compute the number of times the while-loop of the algorithm is repeated.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single string $A$.\n- The second line contains a single string $B$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of iterations the algorithm will perform during addition of the given numbers $A$ and $B$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le |A|, |B| \\le 10^5$\n- $A$ and $B$ contain only characters '0' and '1'\n- the sum of $|A| + |B|$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points): $|A|, |B| \\le 30$\nSubtask #2 (30 points):\n- $|A|, |B| \\le 500$\n- the sum of $|A| + |B|$ over all test cases does not exceed $10^5$\nSubtask #3 (50 points): original constraints\n\n-----Example Input-----\n3\n100010\n0\n0\n100010\n11100\n1010\n\n-----Example Output-----\n0\n1\n3\n\n-----Explanation-----\nExample case 1: The initial value of $B$ is $0$, so while-loop is not performed at all.\nExample case 2: The initial values of $A$ and $B$ are $0_2 = 0$ and $100010_2 = 34$ respectively. When the while-loop is performed for the first time, we have:\n- $U = 34$\n- $V = 0$\n- $A$ changes to $34$\n- $B$ changes to $2 \\cdot 0 = 0$\nThe while-loop terminates immediately afterwards, so it is executed only once.\nExample case 3: The initial values of $A$ and $B$ are $11100_2 = 28$ and $1010_2 = 10$ respectively. After the first iteration, their values change to $22$ and $16$ respectively. After the second iteration, they change to $6$ and $32$, and finally, after the third iteration, to $38$ and $0$.\n\n Examples: \nInput: \n['3', '100010', '0', '0', '100010', '11100', '1010']\nOutput: \n ['0', '1', '3']\n",
  "1403": "Problem: \nDhruvil has always been a studious person and will be completing his Engineering soon. He is always kneen about solving problems and is preparing hard for his next interview at Hackerrank. He has practiced lots of problems and now he came across this problem.\nGiven a message containing English letters(A-Z), it is being encoded to numbers using the following mapping:\n'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nNow, given a non-empty string containing only digits, help Dhruvil determine the total number of ways to decode it.\nWhile decoding you need to choose a substring of charachters and not a subsequence. Also a chosen substring should not contain any leading \"0\"s, but can contain trailing \"0\"s. Since the output can be very large print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\nThere are 2 possible ways. It could be decoded as \"AB\" {1,2} or \"L\" {12}.\nThere are 3 possible ways. It could be decoded as \"BZ\" {2,26}, \"VF\" {22,6}, or \"BBF\" {2,2,6}.\n\n Examples: \nInput: \n['2', '12', '226']\nOutput: \n ['2', '3']\n",
  "1404": "Problem: \nToday a plane was hijacked by a maniac. All the passengers of the flight are taken as hostage. Chef is also one of them.\nHe invited one of the passengers to play a game with him. If he loses the game, he will release all the passengers, otherwise he will kill all of them. A high risk affair it is.\n\nChef volunteered for this tough task. He was blindfolded by Hijacker. Hijacker brought a big black bag from his pockets. The contents of the bag is not visible. He tells Chef that the bag contains R red, G green and B blue colored balloons.\n\nHijacker now asked Chef to take out some balloons from the box such that there are at least K balloons of the same color and hand him over. If the taken out balloons does not contain at least K balloons of the same color, then the hijacker will shoot everybody. Chef is very scared and wants to leave this game as soon as possible, so he will draw the minimum number of balloons so as to save the passengers. Can you please help scared Chef to find out the minimum number of balloons he should take out.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons Chef need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n-----Subtasks-----\n- Subtask 1 (44 points): 1 \u2264 R, G, B \u2264 10\n- Subtask 2 (56 points):  No additional constraints\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n-----Explanation-----\nExample case 2. In the worst-case scenario first three balloons will be of the three different colors and only after fourth balloon Chef will have two balloons of the same color. So, Chef might need to fetch 4 balloons\n\n Examples: \nInput: \n['2', '3 3 3', '1', '3 3 3', '2']\nOutput: \n ['1', '4']\n",
  "1405": "Problem: \nThere are $N$ sabotages available in the game Among Us, initially all at level $0$. \n$N$ imposters are allotted the task to upgrade the level of the sabotages. \nThe $i^{th}$ imposter $(1 \\leq i \\leq N)$ increases the level of $x^{th}$ sabotage $(1 \\leq x \\leq N)$ by one level  if $gcd(i,x)=i$.\nYou need to find the number of sabotages at LEVEL 5 after all the imposters have completed their tasks.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one integer $N$. \n\n-----Output:-----\nFor each testcase, output in a single line the number of sabotages at LEVEL 5.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^{18}$\n\n-----Sample Input:-----\n1\n6\n\n-----Sample Output:-----\n0\n\n-----EXPLANATION:-----\nThe $1^{st}$ sabotage is at level $1$, the $2^{nd}$, $3^{rd}$ and $5^{th}$ sabotages are at level $2$, the $4^{th}$ sabotage is at level $3$ and the $6^{th}$ sabotage is at level $4$.\nNone of them reach level $5$. Hence the output is $0$.\n\n Examples: \nInput: \n['1', '6']\nOutput: \n ['0']\n",
  "1406": "Problem: \nA sophomore Computer Science student is frustrated with boring college lectures. Professor X agreed to give him some questions; if the student answers all questions correctly, then minimum attendance criteria will not apply to him.\nProfessor X chooses a sequence $A_1, A_2, \\ldots, A_N$ and asks $Q$ queries. In each query, the student is given an integer $P$; he has to construct a sequence $B_1, B_2, \\ldots, B_N$, where $P \\oplus A_i = B_i$ for each valid $i$ ($\\oplus$ denotes bitwise XOR), and then he has to find the number of elements of this sequence which have an even number of $1$-s in the binary representation and the number of elements with an odd number of $1$-s in the binary representation. Help him answer the queries.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $Q$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n- $Q$ lines follow. Each of these lines contains a single integer $P$ describing a query.\n\n-----Output-----\nFor each query, print a single line containing two space-separated integers \u2015 the number of elements with an even number of $1$-s and the number of elements with an odd number of $1$-s in the binary representation.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N, Q \\le 10^5$\n- $ T \\cdot (N+Q) \\leq 4 \\cdot 10^6 $\n- $1 \\le A_i \\le 10^8$ for each valid $i$\n- $1 \\le P \\le 10^5$\nThe input/output is quite large, please use fast reading and writing methods.\n\n-----Subtasks-----\nSubtask #1 (30 points): $N, Q \\le 1,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n6 1\n4 2 15 9 8 8\n3\n\n-----Example Output-----\n2 4\n\n-----Explanation-----\nExample case 1: The elements of the sequence $B$ are $P \\oplus 4 = 7$, $P \\oplus 2 = 1$, $P \\oplus 15 = 12$, $P \\oplus 9 = 10$, $P \\oplus 8 = 11$ and $P \\oplus 8 = 11$. The elements which have an even number of $1$-s in the binary representation are $12$ and $10$, while the elements with an odd number of $1$-s are $7$, $1$, $11$ and $11$.\n\n Examples: \nInput: \n['1', '6 1', '4 2 15 9 8 8', '3']\nOutput: \n ['2 4']\n",
  "1408": "Problem: \nChef's loves his dog so much! Once his dog created two strings a and b each of length n consisting of digits 1 and 2, and even a problem about them!\nChef's Dog will tell by barking if a string x (also containing only digits 1 and 2 and with length N) is good or not by performing the following actions.\n\n- It starts at first digit of the string, i.e. at i = 1. \n- It can move from digit i to either i - 1 or i + 1 if xi equals 1 and the corresponding digits exist. \n- It can move from digit i to either i - 2 or i + 2 if xi equals 2 and the corresponding digits exist. \n- It must visit each digit exactly once. \n- It must finish at the last digit (XN). \n\nChef's dog wants to make both the strings a and b good by choosing some subset S (possibly empty) of indices of set {1, 2, ..., n} and swapping each index i \u03f5 S between string a and b, i.e. swapping ai and bi. Can you find how many such subsets S exist out there? As the answer could be large, output it modulo 109 + 7.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line contains string a.\nThe second line contains string b.\n\n-----Output-----\nFor each test case, output a single line containing answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 20\n- 1 \u2264 |a| = |b| \u2264 105\n- '1' \u2264 ai, bi \u2264 '2'\n\n-----Subtasks-----\n- Subtask #1 (30 points) |a|, |b| \u2264  10\n- Subtask #2 (70 points) original constraints\n\n-----Example-----\nInput:\n2\n1111\n2211\n222\n111\n\nOutput:\n8\n0\n\n-----Explanation-----\nTest case 1.\nPossible subsets are: \n{}, {1, 2}, {1, 2, 3}, {1, 2, 4}, {1, 2, 3, 4}, {3}, {4}, {3, 4}.\n\nTest case 2. There are no possible sets S which can make both the strings good.\n\n Examples: \nInput: \n['2', '1111', '2211', '222', '111']\nOutput: \n ['8', '0']\n",
  "1409": "Problem: \nChef solved so many hard questions, now he wants to solve some easy problems for refreshment. Chef asks Cheffina for the new question. Cheffina challanges the chef to print the total number of 1's in the binary representation of N(natural number).\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n5\n\n-----Sample Output:-----\n1\n2\n\n-----EXPLANATION:-----\nFor 1) Binary representation of 2 is 10. i.e. only one 1 present in it.\nFor 2) Binary representation of 5 is 101, i.e. two 1's present in it.\n\n Examples: \nInput: \n['2', '2', '5']\nOutput: \n ['1', '2']\n",
  "1410": "Problem: \nAlice's school is planning to take some students from her class on a field trip. Alice is really excited about it. There are a total of S students in her class. But due to budget constraints, the school is planning to take only N students for the trip. These students will be picked randomly. And each student has equal chance of being picked.\nAlice's friend circle has M students including her. Though she is excited about the field trip, she will enjoy it only if there are atleast K of her friends with her on the trip. She is wondering what are the chances of that happening. She needs your help. Tell her the probability that she will enjoy given that she goes on the trip.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n-----Explanation:-----Case #1:\nEvery student will be taken to the trip. So all her 4 friends will accompany her to the trip no matter what. \nCase #2:\nAlice wants 4 out of her 5 friends to come along with her which isn't possible because the school is willing to pick only 4 students for the trip.\n\n Examples: \nInput: \n['3', '10 10 5 3', '10 4 6 4', '3 2 2 1']\nOutput: \n ['1.000000', '0.000000', '0.500000']\n",
  "1411": "Problem: \nMotu and Patlu are racing against each other on a circular track of radius $R$. Initially they are at the same point on the track and will run in same direction .The coach ordered them to run $X$ rounds of the circular field. Patlu wants to know how many times they will meet after the race starts and  before any of them finishes $X$ rounds. But he is busy in warm up so he wants you to calculate this. You are given speed of both Motu and Patlu ($A$ and $B$). \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $X, R, A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq X \\leq 10^9$\n- $1 \\leq A \\leq 10^9$\n- $1 \\leq B \\leq 10^9$\n- Speed of both are different\n\n-----Sample Input:-----\n2\n3 10 2 5\n2 20 5 10\n\n-----Sample Output:-----\n1\n0\n\n Examples: \nInput: \n['2', '3 10 2 5', '2 20 5 10']\nOutput: \n ['1', '0']\n",
  "1412": "Problem: \nChef changed the password of his laptop a few days ago, but he can't remember it today. Luckily, he wrote the encrypted password on a piece of paper, along with the rules for decryption.\nThe encrypted password is a string S consists of ASCII printable characters except space (ASCII 33 - 126, in decimal notation, the same below). Read here for more details: ASCII printable characters.\nEach rule contains a pair of characters ci, pi, denoting that every character ci appears in the encrypted password should be replaced with pi. Notice that it is not allowed to do multiple replacements on a single position, see example case 1 for clarification.\nAfter all the character replacements, the string is guaranteed to be a positive decimal number. The shortest notation of this number is the real password. To get the shortest notation, we should delete all the unnecessary leading and trailing zeros. If the number contains only non-zero fractional part, the integral part should be omitted (the shortest notation of \"0.5\" is \".5\"). If the number contains zero fractional part, the decimal point should be omitted as well (the shortest notation of \"5.00\" is \"5\").\nPlease help Chef to find the real password.\n\n-----Input-----\nThe first line of the input contains an interger T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains a single interger N, denoting the number of rules.\nEach of the next N lines contains two space-separated characters ci and pi,\ndenoting a rule.\nThe next line contains a string S, denoting the encrypted password.\n\n-----Output-----\nFor each test case, output a single line containing the real password.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 N \u2264 94\n- All characters in S and ci may be any ASCII printable character except space. (ASCII 33 - 126)\n- All ci in a single test case are distinct.\n- pi is a digit (\"0\" - \"9\") or a decimal point \".\" (ASCII 46).\n- The total length of S in a single input file will not exceed 106.\n\n-----Example-----\nInput:\n4\n2\n5 3\n3 1\n5\n0\n01800.00\n0\n0.00100\n3\nx 0\nd 3\n# .\n0xd21#dd098x\n\nOutput:\n3\n1800\n.001\n321.33098\n\n Examples: \nInput: \n['4', '2', '5 3', '3 1', '5', '0', '01800.00', '0', '0.00100', '3', 'x 0', 'd 3', '# .', '0xd21#dd098x', '', '']\nOutput: \n ['3', '1800', '.001', '321.33098']\n",
  "1415": "Problem: \nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\nSubtask 2, 65 points \n- 2 \u2264  size of string s \u2264 10^5\n-  Sum of size of string s over all the input test cases won't exceed 10^6\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n-----Explanation-----\nExample case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome.\n\n Examples: \nInput: \n['4', 'aaa', 'abc', 'abdbca', 'abba']\nOutput: \n ['YES', 'NO', 'YES', 'YES']\n",
  "1417": "Problem: \nRaj loves to listen to songs in his free time. It\u2019s his birthday tomorrow and his friend Neelansh wants his gift to be the most unique. Being great at making music, he decides to produce a song for him. However, Raj likes songs according to their beauty. He determines the beauty of the song as the number of times all the octave musical tones are completed in ascending order.\n\nHe begins with a jumbled tone of length N and numbers each octave tone as 1,2,3\u2026.8.\n\nNeelansh wants to maximize the beauty of the song but since he uses the trial version of the software,\n- He cannot change the size of N.\n- He cannot introduce any new tone, but can choose any two tones and swap their positions\n\nHowever, Neelansh just received a mail that he needs to submit all his pending assignments by tomorrow. He has tons of assignments left to do, but he doesn\u2019t want to spoil the idea of his gift. Can you help him? \n\n-----INPUT-----\n- The first line contains a single integer T- the number of test cases  \n- The first line of each test case contains a single integer N- the length of the song  \n- The second line contains N- space separated integers ai,  ai+1,.....aN \n\n-----OUTPUT-----\nFor each test case, print a single line containing one integer- the maximum possible beauty of the song  \n\n-----CONSTRAINTS-----\n1<=T<=102\n1<=N<=105\n1<=a<=8\n\n-----EXAMPLE INPUT-----\n2\n\n8\n\n1 2 3 4 5 6 7 8\n\n16\n\n1 2 1 2 3 3 4 4 5 5 6 6 7 8 7 8\n\n-----EXAMPLE OUTPUT-----\n1\n\n2\n\n Examples: \nInput: \n['2', '8', '1 2 3 4 5 6 7 8', '16', '1 2 1 2 3 3 4 4 5 5 6 6 7 8 7 8']\nOutput: \n ['1', '2']\n",
  "1418": "Problem: \nYou are given a sequence $A_1, A_2, \\ldots, A_N$. You may perform the following operation an arbitrary number of times (including zero): choose two adjacent elements of this sequence, i.e. $A_i$, $A_{i+1}$ for some valid $i$, and swap them. However, for each valid $i$, it is not allowed to choose $A_i$ (the element with the index $i$, regardless of its value at any point in time) more than once in total during this process.\nFind the maximum of the sum $S = \\sum_{i=1}^N A_i \\cdot i$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum possible value of $S$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $N \\le 20$\n- the sum of $N$ over all test cases does not exceed $200$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n4\n2 1 4 3\n4\n7 6 3 2\n\n-----Example Output-----\n30\n39\n\n-----Explanation-----\nExample case 1: Swap the first and second element of the initial sequence. Then, swap the third and fourth element of the resulting sequence. The final sequence $A$ is $(1, 2, 3, 4)$.\nExample case 2: Swap the second and third element to make the sequence $(7, 3, 6, 2)$.\n\n Examples: \nInput: \n['2', '4', '2 1 4 3', '4', '7 6 3 2']\nOutput: \n ['30', '39']\n",
  "1419": "Problem: \nMr. Wilson was planning to record his new Progressive Rock music album called \"Digits. Cannot. Separate\". Xenny and PowerShell, popular pseudo-number-theoreticists from the Land of Lazarus were called by him to devise a strategy to ensure the success of this new album. Xenny and Powershell took their Piano Lessons and arrived at the Studio in different Trains.\nMr. Wilson, creative as usual, had created one single, long music track S. The track consisted of N musical notes. The beauty of each musical note was represented by a decimal digit from 0 to 9.\nMr. Wilson told them that he wanted to create multiple musical tracks out of this long song. Since Xenny and Powershell were more into the number theory part of music, they didn\u2019t know much about their real workings. Mr. Wilson told them that a separator could be placed between 2 digits. After placing separators, the digits between 2 separators would be the constituents of this new track and the number formed by joining them together would represent the Quality Value of that track. He also wanted them to make sure that no number formed had greater than M digits.\nMr. Wilson had Y separators with him. He wanted Xenny and PowerShell to use at least X of those separators, otherwise he would have to ask them to Drive Home.\nXenny and PowerShell knew straight away that they had to put place separators in such a way that the Greatest Common Divisor (GCD) of all the Quality Values would eventually determine the success of this new album. Hence, they had to find a strategy to maximize the GCD.\nIf you find the maximum GCD of all Quality Values that can be obtained after placing the separators, Xenny and PowerShell shall present you with a Porcupine Tree.\nNote:\n- \nYou can read about GCD here.\n\n- \nGreatest Common Divisor of 0 and 0 is defined as 0.\n\n-----Input-----\nThe first line of input consists of a single integer T - the number of testcases.\nEach test case is of the following format:\nFirst line contains a single integer N - the length of the long musical track.\nSecond line contains the string of digits S.\nThird line contains 3 space-separated integers - M, X and Y - the maximum number of digits in a number, the minimum number of separators to be used and the maximum number of separators to be used.\n\n-----Output-----\nFor each testcase, output a single integer on a new line - the maximum GCD possible after placing the separators.\n\n-----Constraints-----\nSubtask 1: 20 points\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 18\n- 1 \u2264 M \u2264 2\n- 1 \u2264 X \u2264 Y \u2264 (N - 1)\n\nSubtask 2: 80 points\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 300\n- 1 \u2264 M \u2264 10\n- 1 \u2264 X \u2264 Y \u2264 (N - 1)\n\nFor both Subtask 1 and Subtask 2:\n\n- 1 \u2264 X \u2264 Y \u2264 (N - 1)\n- M*(Y+1) \u2265 N\n- S may contain leading 0s.\n\n-----Example-----Input:\n2\n3\n474\n2 1 1\n34\n6311861109697810998905373107116111\n10 4 25\n\nOutput:\n2\n1\n\n-----Explanation-----\nTest case 1. \nSince only 1 separator can be placed, we can only have 2 possibilities:\n\na. 4 | 74\n\nThe GCD in this case is 2.\n\nb. 47 | 4\n\nThe GCD in this case is 1.\n\nHence, the maximum GCD is 2.\nTest case 2.\n\nOne of the optimal partitions is:\n63|118|61|109|69|78|109|98|90|53|73|107|116|111\nBonus: Decode the above partition to unlock a hidden treasure.\n\n Examples: \nInput: \n['2', '3', '474', '2 1 1', '34', '6311861109697810998905373107116111', '10 4 25']\nOutput: \n ['2', '1']\n",
  "1420": "Problem: \nIn an array, a $block$ is a maximal sequence of identical elements. Since blocks are maximal, adjacent blocks have distinct elements, so the array breaks up into a series of blocks.  For example, given the array $[3, 3, 2, 2, 2, 1, 5, 8, 4, 4]$, there are 6 blocks: $[3, 3], [2, 2, 2], [1], [5], [8], [4, 4]$ . \nIn this task, you are given two arrays, $A$ (of length $n$), and $B$ (of length $m$), and a number $K$. You have to interleave $A$ and $B$ to form an array $C$ such that $C$ has $K$ blocks. Each way of interleaving $A$ and $B$ can be represented as a $0-1$ array $X$ of length $n+m$ in which $X[j]$ is $0$ if $C[j]$ came from $A$ and $X[j]$ is $1$ if $C[j]$ came from $B$.\nA formal description of the interleaving process is given at the end.\nFor example, if $A = [1, 3]$ and $B = [3, 4]$, there are $6$ ways of interleaving $A$ and $B$.  With each interleaving $X$ of $A$ and $B$, we also count the number of blocks in the resulting interleaved array $C$.  The descriptions of the interleavings, $X$, and the outcomes, $C$, are given below.\n- $X = [0, 0, 1, 1]$, which corresponds to $C = [1, 3, 3, 4]$, $3$ blocks.\n- $X = [0, 1, 0, 1]$, which corresponds to $C = [1, 3, 3, 4]$, $3$ blocks.\n- $X = [0, 1, 1, 0]$, which corresponds to $C = [1, 3, 4, 3]$ , $4$ blocks.\n- $X = [1, 0, 0, 1]$, which corresponds to $C = [3, 1, 3, 4]$, $4$ blocks.\n- $X = [1, 0, 1, 0]$, which corresponds to $C = [3, 1, 4, 3]$, $4$ blocks.\n- $X = [1, 1, 0, 0]$, which corresponds to $C = [3, 4, 1, 3]$, $4$ blocks.\nObserve that different interleavings $X$ may produce the same array $C$, such as the first two interleavings in the example above.\nYour task is the following.  Given arrays $A$ and $B$ and a number $K$, find the number of different interleavings $X$ of $A$ and $B$ that produce an output array $C$ with exactly $K$ blocks.  Note that we are counting the number of interleavings, not the number of different output arrays after interleaving.  For instance, if the same output array C is produced via 2 different interleavings, it gets counted twice.\nSince the answer might be large, print the answer modulo $10^8 + 7$.\nHere is a formal definition of the interleaving process:\nSuppose $A = A_1, A_2, ..., A_n$ and $B = B_1, B_2, ..., B_m$. Then, the process of generating an interleaving $C$ can be described using an array $X$ of size $n + m$, with exactly $n$ $0's$ and $m$ $1's$.  Suppose we have such an array $X = X_1, X_2, ..., X_{n+m}$. Using this array $X$, we create the output array $C = C_1, C_2, ..., C_{n+m}$, using the following algorithm:\ni = 0, j = 0\nwhile( (i+j)<(n+m) )\nif(X[i+j+1] == 0)\nC[i+j+1] = A[i+1]\ni = i+1\nelse\nC[i+j+1] = B[j+1]\nj = j+1\n\nThus if the $X$ value is $0$, we pick the next available element from $A$ into $C$, and if it is $1$, we pick from $B$ instead. This creates an interleaving of the arrays $A$ and $B$.\n\n-----Input Format:-----\n- The first line contains a single integer, $T$, which is the number of testcases. The description of each testcase follows.\n- The first line of each testcase contains three integers: $n$, $m$, and $K$, which denote the size of array $A$, the size of array $B$, and the required number of blocks in $C$, respectively.\n- The next line contains $n$ integers, which represent the array $A$.\n- The next line contains $m$ integers, which represent the array $B$.\n\n-----Output Format:-----\n- You should print the answer in a new line for each testcase, which should be the number of valid interleaving arrays $X$ which correspond to an output array $C$ with $K$ blocks, modulo $10^8 + 7$.\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq n \\leq 100$\n- $1 \\leq m \\leq 100$\n- $1 \\leq K \\leq n+m$\n- $0 \\leq A_i, B_j \\leq 10^9$\n\n-----Subtasks:-----\n- Subtask 1: 10% points: $m = 1$\n- Subtask 2: 30% points: $0 \\leq A_i, B_j \\leq 1$\n- Subtask 3: 60% points: Original constraints.\n\n-----Sample Input:-----\n5\n2 2 4\n1 3\n3 4\n2 2 3\n1 3\n3 4\n2 2 2\n1 3\n3 4\n2 2 4\n4 7\n8 5\n2 2 2\n4 7\n8 5\n\n-----Sample Output:-----\n4\n2\n0\n6\n0\n\n-----Explanation:-----\n- The first three testcases correspond to the example given in the problem statement. Of the $6$ interleavings, $4$ produce outputs with $4$ blocks and $2$ produce outputs with $3$ blocks.  Hence, for $K = 4$, the answer is $4$, for $K = 3$, the answer is $2$, and for $K = 2$, the answer is $0$.\n- The fourth and fifth testcases have $A = [4, 7]$ and $B = [8, 5]$.  Here are the $6$ interleavings of these two arrays.\n- $X = [0, 0, 1, 1]$, which corresponds to $C= [4, 7, 8, 5]$, $4$ blocks.\n- $X = [0, 1, 0, 1]$, which corresponds to $C= [4, 8, 7, 5]$, $4$ blocks.\n- $X = [0, 1, 1, 0]$, which corresponds to $C= [4, 8, 5, 7]$, $4$ blocks.\n- $X = [1, 0, 0, 1]$, which corresponds to $C= [8, 4, 7, 5]$, $4$ blocks.\n- $X = [1, 0, 1, 0]$, which corresponds to $C= [8, 4, 5, 7]$, $4$ blocks.\n- $X = [1, 1, 0, 0]$, which corresponds to $C= [8, 5, 4, 7]$, $4$ blocks.\nAll $6$ interleavings produce outputs with $4$ blocks, so for $K = 4$ the answer is $6$ and for any other value of $K$, the answer is $0$.\n\n Examples: \nInput: \n['5', '2 2 4', '1 3', '3 4', '2 2 3', '1 3', '3 4', '2 2 2', '1 3', '3 4', '2 2 4', '4 7', '8 5', '2 2 2', '4 7', '8 5']\nOutput: \n ['4', '2', '0', '6', '0']\n",
  "1421": "Problem: \nPatlu has recently got a new problem based on Pallindromes. A Pallindrome is a number that is same from front and back, example $121$ is pallindrome but $123$ is not . He wants to calculate sum of all $N$ digit number which are Pallindromic in nature and divisible by $9$ and does not contain any zero in their decimal representation. As the answer can be very large so print the sum modulo $10^9 + 7$.\n\n-----Input:-----\n- First line of input contain $T$, number of testcases. Then the testcases follow.\n- Each testcase contains single line of input , one integer $N$.\n\n-----Output:-----\n- For each testcase, output in a single line answer having $N$ digits pallindromic string.\n\n-----Constraints-----\n- $1\\leq T \\leq 100$\n- $1\\leq N \\leq 10^5$\n\n-----Sample Input:-----\n2\n1\n2\n\n-----Sample Output:-----\n9\n99\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['9', '99']\n",
  "1422": "Problem: \nThe Little Elephant from the Zoo of Lviv currently is on the military mission. There are N enemy buildings placed in a row and numbered from left to right strating from 0. Each building i (except the first and the last) has exactly two adjacent buildings with indices i-1 and i+1. The first and the last buildings have just a single adjacent building.\n\nSome of the buildings contain bombs. When bomb explodes in some building it destroys it and all adjacent to it buildings.\n\nYou are given the string S of length N, where Si is 1 if the i-th building contains bomb, 0 otherwise. Find for the Little Elephant the number of buildings that will not be destroyed after all bombs explode. Please note that all bombs explode simultaneously.\n\n-----Input-----\nThe first line contains single integer T - the number of test cases. T test cases follow. The first line of each test case contains the single integer N - the number of buildings. The next line contains the string S of length N consisted only of digits 0 and 1.\n\n-----Output-----\nIn T lines print T inetgers - the answers for the corresponding test cases.\n\n-----Constraints-----\n\n1 <= T <= 100\n\n1 <= N <= 1000\n\n-----Example-----\nInput:\n3\n3\n010\n5\n10001\n7\n0000000\n\nOutput:\n0\n1\n7\n\n Examples: \nInput: \n['3', '3', '010', '5', '10001', '7', '0000000']\nOutput: \n ['0', '1', '7']\n",
  "1423": "Problem: \nVlad enjoys listening to music. He lives in Sam's Town. A few days ago he had a birthday, so his parents gave him a gift: MP3-player! Vlad was the happiest man in the world! Now he can listen his favorite songs whenever he wants!\nVlad built up his own playlist. The playlist consists of N songs, each has a unique positive integer length. Vlad likes all the songs from his playlist, but there is a song, which he likes more than the others. It's named \"Uncle Johny\".\nAfter creation of the playlist, Vlad decided to sort the songs in increasing order of their lengths. For example, if the lengths of the songs in playlist was {1, 3, 5, 2, 4} after sorting it becomes {1, 2, 3, 4, 5}. Before the sorting, \"Uncle Johny\" was on K-th position (1-indexing is assumed for the playlist) in the playlist.\nVlad needs your help! He gives you all the information of his playlist. Your task is to find the position of \"Uncle Johny\" in  the sorted playlist.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains one integer N denoting the number of songs in Vlad's playlist. The second line contains N space-separated integers A1, A2, ..., AN denoting the lenghts of Vlad's songs.\nThe third line contains the only integer K - the position of \"Uncle Johny\" in the initial playlist.\n\n-----Output-----\nFor each test case, output a single line containing the position of \"Uncle Johny\" in the sorted playlist.\n\n-----Constraints-----\n1 \u2264 T \u2264 1000\n\n1 \u2264 K \u2264 N \u2264 100\n\n1 \u2264 Ai \u2264 109\n\n-----Example-----\nInput:\n3\n4\n1 3 4 2\n2\n5\n1 2 3 9 4\n5\n5\n1 2 3 9 4 \n1\n\nOutput:\n3\n4\n1\n\n-----Explanation-----\nIn the example test there are T=3 test cases.\nTest case 1\nIn the first test case N equals to 4, K equals to 2, A equals to {1, 3, 4, 2}. The answer is 3, because {1, 3, 4, 2} -> {1, 2, 3, 4}. A2 now is on the 3-rd position.\nTest case 2\nIn the second test case N equals to 5, K equals to 5, A equals to {1, 2, 3, 9, 4}. The answer is 4, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A5 now is on the 4-th position.\nTest case 3\nIn the third test case N equals to 5, K equals to 1, A equals to {1, 2, 3, 9, 4}. The answer is 1, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A1 stays on the 1-th position.\n\n-----Note-----\n\"Uncle Johny\" is a real song performed by The Killers.\n\n Examples: \nInput: \n['3', '4', '1 3 4 2', '2', '5', '1 2 3 9 4', '5', '5', '1 2 3 9 4 ', '1', '', '']\nOutput: \n ['3', '4', '1']\n",
  "1424": "Problem: \nLittle Praneet loves experimenting with algorithms and has devised a new algorithm. The algorithm is performed on an integer as follows:\n- if the rearmost digit is $0$, he will erase it.\n- else, he will replace the rearmost digit $d$ with $d-1$.\nIf a point comes when the integer becomes $0$, the algorithm stops.\nYou are given an integer $n$. Praneet will perform the algorithm on it $a$ times. You have to print the result after $a$ operations.\n\n-----Input:-----\n- The first and only line of input contains two integers $n$ \u2014 initial number, and $a$ \u2014the number of operations.\n\n-----Output:-----\n- Print one integer \u2014 the result of performing the algorithm on $n$ $a$ times.\n\n-----Constraints-----\n- $2 \\leq n \\leq 10^9$\n- $1 \\leq a \\leq 50$\n\n-----Sample Input 1-----\n1001 2\n\n-----Sample Input 2-----\n5 2\n\n-----Sample Output 1-----\n100\n\n-----Sample Output 2-----\n3\n\n-----Explanation-----\n- In the first example, the transformation is as follows: $1001->1000->100$.\n- In the second example, the transformation is as follows: $5->4->3$.\n\n Examples: \nInput: \n['1001 2', 'Sample Input 2', '5 2']\nOutput: \n ['100', 'Sample Output 2', '3']\n",
  "1425": "Problem: \nChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:\n\n- Add some value to ith element of the array\n- Calculate sum of all elements on any prefix of the array\n\nBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.\n\nGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here \"&\" denotes bitwise AND operation.\nSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.\nSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.\n\n-----Output-----\nFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 300\n- 1 \u2264 Length(Li) \u2264 1000\n- 1 \u2264 N \u2264 106\n\n-----Subtasks-----\n- Subtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60\n- Subtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100\n- Subtask #3 (50 points): No additional constraints\n\n-----Example-----\nInput:\n4\n001 100 011 4\n1000 1101 100 3\n1010 001 101 4\n010 101 000 4\n\nOutput:\n6\n12\n8\n10\n\n Examples: \nInput: \n['4', '001 100 011 4', '1000 1101 100 3', '1010 001 101 4', '010 101 000 4']\nOutput: \n ['6', '12', '8', '10']\n",
  "1426": "Problem: \nChef is operating a slush machine. The machine produces slush drinks with $M$ flavors (numbered $1$ through $M$); for each valid $i$, the maximum number of drinks with flavour $i$ the machine can produce is $C_i$.\nChef expects $N$ customers to come buy slush drinks today. The customers are numbered $1$ through $N$ in the order in which they buy the drinks. For each valid $i$, the favorite flavour of the $i$-th customer is $D_i$ and this customer is willing to pay $F_i$ units of money for a drink with this flavour, or $B_i$ units of money for a drink with any other flavuor. Whenever a customer wants to buy a drink:\n- if it is possible to sell this customer a drink with their favourite flavour, Chef must sell them a drink with this flavour\n- otherwise, Chef must sell this customer a drink, but he may choose its flavour\nChef wants to make the maximum possible profit. He is asking you to help him decide the flavours of the drinks he should sell to the customers in order to maximise the profit.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $M$.\n- The second line contains $M$ space-separated integers $C_1, C_2, \\ldots, C_M$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains three space-separated integers $D_i$, $F_i$ and $B_i$.\n\n-----Output-----\nFor each test case, print two lines:\n- The first of these lines should contain a single integer \u2014 the maximum profit.\n- The second line should contain $N$ space-separated integers denoting the flavours of the drinks Chef should sell, in this order.\nIf there are multiple solutions, you may find any one.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\le N, M \\le 10^5$\n- $1 \\le D_i \\le M$ for each valid $i$\n- $1 \\le C_i \\le N$ for each valid $i$\n- $1 \\le B_i < F_i \\le 10^9$ for each valid $i$\n- $C_1+C_2+\\ldots+C_M \\ge N$\n- the sum of $N$ over all test cases does not exceed $10^6$\n- the sum of $M$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n1\n5 3\n1 2 3\n2 6 3\n2 10 7\n2 50 3\n1 10 5\n1 7 4\n\n-----Example Output-----\n33\n2 2 3 1 3\n\n Examples: \nInput: \n['1', '5 3', '1 2 3', '2 6 3', '2 10 7', '2 50 3', '1 10 5', '1 7 4']\nOutput: \n ['33', '2 2 3 1 3']\n",
  "1427": "Problem: \nToday, puppy Tuzik is going to a new dog cinema. He has already left his home and just realised that he forgot his dog-collar! This is a real problem because the city is filled with catchers looking for stray dogs.\nA city where Tuzik lives in can be considered as an infinite grid, where each cell has exactly four neighbouring cells: those sharing a common side with the cell. Such a property of the city leads to the fact, that the distance between cells (xA, yA) and (xB, yB) equals |xA - xB| + |yA - yB|.\nInitially, the puppy started at the cell with coordinates (0, 0). There are N dog-catchers located at the cells with the coordinates (xi, yi), where 1 \u2264 i \u2264 N. Tuzik's path can be described as a string S of M characters, each of which belongs to the set {'D', 'U', 'L', 'R'} (corresponding to it moving down, up, left, and right, respectively). To estimate his level of safety, Tuzik wants to know the sum of the distances from each cell on his path to all the dog-catchers. You don't need to output this sum for the staring cell of the path (i.e. the cell with the coordinates (0, 0)).\n\n-----Input-----\nThe first line of the input contains two integers N and M.\nThe following N lines contain two integers xi and yi each, describing coordinates of the dog-catchers.\nThe last line of the input contains string S of M characters on the set {'D', 'U', 'L', 'R'}.\n- 'D' - decrease y by 1\n- 'U' - increase y by 1\n- 'L' - decrease x by 1\n- 'R' - increase x by 1\n\n-----Output-----\nOutput M lines: for each cell of the path (except the starting cell), output the required sum of the distances.\n\n-----Constraints-----\n- 1 \u2264 N \u2264 3 \u2715 105\n- 1 \u2264 M \u2264 3 \u2715 105\n- -106 \u2264 xi, yi \u2264 106\n\n-----Example-----\nInput:\n2 3\n1 2\n0 1\nRDL\n\nOutput:\n4\n6\n6\n\n-----Explanation-----\n\nInitially Tuzik stays at cell (0, 0). Let's consider his path:\n\n- Move 'R' to the cell (1, 0). Distance to the catcher (1, 2) equals 2, distance to the catcher (0, 1) equals 2, so the total distance equals 4\n- Move 'D' to the cell (1, -1). Distance to the catcher (1, 2) equals 3, distance to the catcher (0, 1) equals 3, so the total distance equals 6\n- Move 'L' to the cell (0, -1). Distance to the catcher (1, 2) equals 4, distance to the catcher (0, 1) equals 2, so the total distance equals 6\n\n Examples: \nInput: \n['2 3', '1 2', '0 1', 'RDL']\nOutput: \n ['4', '6', '6']\n",
  "1428": "Problem: \nPied Piper is a startup company trying to build a new Internet called Pipernet. Currently, they have $A$ users and they gain $X$ users everyday. There is also another company called Hooli, which has currently $B$ users and gains $Y$ users everyday.\nWhichever company reaches $Z$ users first takes over Pipernet. In case both companies reach $Z$ users on the same day, Hooli takes over.\nHooli is a very evil company (like E-Corp in Mr. Robot or Innovative Online Industries in Ready Player One). Therefore, many people are trying to help Pied Piper gain some users.\nPied Piper has $N$ supporters with contribution values $C_1, C_2, \\ldots, C_N$. For each valid $i$, when the $i$-th supporter contributes, Pied Piper gains $C_i$ users instantly. After contributing, the contribution value of the supporter is halved, i.e. $C_i$ changes to $\\left\\lfloor C_i / 2 \\right\\rfloor$. Each supporter may contribute any number of times, including zero. Supporters may contribute at any time until one of the companies takes over Pipernet, even during the current day.\nFind the minimum number of times supporters must contribute (the minimum total number of contributions) so that Pied Piper gains control of Pipernet.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains six space-separated integers $N$, $A$, $B$, $X$, $Y$ and $Z$.\n- The second line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$ \u2014 the initial contribution values.\n\n-----Output-----\nFor each test case, if Hooli will always gain control of Pipernet, print a single line containing the string \"RIP\" (without quotes). Otherwise, print a single line containing one integer \u2014 the minimum number of times supporters must contribute.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $1 \\le A, B, X, Y, Z \\le 10^9$\n- $A, B < Z$\n- $0 \\le C_i \\le 10^9$ for each valid $i$\n\n-----Example Input-----\n3\n3 10 15 5 10 100\n12 15 18\n3 10 15 5 10 100\n5 5 10\n4 40 80 30 30 100\n100 100 100 100\n\n-----Example Output-----\n4\nRIP\n1\n\n-----Explanation-----\nExample case 1: After $8$ days, Pied Piper will have $50$ users and Hooli will have $95$ users. Then, if each supporter contributes once, Pied Piper will also have $95$ users. After that, they still need $5$ more users, so supporter $3$ can contribute again, with $18/2 = 9$ more users. So the answer will be $4$.\nExample case 2: There is no way to beat Hooli.\n\n Examples: \nInput: \n['3', '3 10 15 5 10 100', '12 15 18', '3 10 15 5 10 100', '5 5 10', '4 40 80 30 30 100', '100 100 100 100']\nOutput: \n ['4', 'RIP', '1']\n",
  "1429": "Problem: \nMonisha likes to paint. She has painted $N$ paintings (numbered $1$ through $N$) and wants to choose some subset of these paintings for an exhibition. For each valid $i$, the $i$-th painting has beauty $b_i$ and the probability that it will be displayed at the exhibition is $p_i$. Each painting is chosen or excluded from the exhibition independently randomly.\nThe beauty of the resulting exhibition is the bitwise XOR of the beauties of all displayed paintings. If no paintings are displayed, the XOR is $0$.\nMonisha wants to find out how beautiful her exhibition is going to be. Help her compute the expected value of the beauty of the exhibition.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $b_1, b_2, \\ldots, b_N$.\n- The third line contains $N$ space-separated real numbers $p_1, p_2, \\ldots, p_N$. Each of these numbers is given with at most five digits after the decimal point.\n\n-----Output-----\nFor each test case, print a single line containing one real number \u2014 the expected beauty of the exhibition. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-6}$.\n\n-----Constraints-----\n- $1 \\le N \\le 10^5$\n- $0 \\le b_i \\le 10^9$ for each valid $i$\n- $0 \\le p_i \\le 1$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $4 \\cdot 10^5$\n\n-----Example Input-----\n2\n3\n5 6 2\n1.0 0.0 0.5\n4\n2 2 2 2\n0.5 0.5 0.5 0.5\n\n-----Example Output-----\n6.000000000000000\n1.000000000000000\n\n-----Explanation-----\nExample case 1: The first painting must be displayed at the exhibition, the second one must be excluded. If the third painting is displayed (with probability $0.5$), the beauty is $5 \\oplus 2 = 7$; if it is excluded (with probability $0.5$), the beauty is $5$. The expected beauty is $0.5 \\cdot 5 + 0.5 \\cdot 7 = 6$.\nExample case 2: If there is an odd number of paintings at the exhibition, the beauty is $2$; this has a probability of $0.5$. If there is an even number of paintings, the beauty is $0$ (with probability $0.5$), so the expected beauty is $0.5 \\cdot 0 + 0.5 \\cdot 2 = 1$.\n\n Examples: \nInput: \n['2', '3', '5 6 2', '1.0 0.0 0.5', '4', '2 2 2 2', '0.5 0.5 0.5 0.5']\nOutput: \n ['6.000000000000000', '1.000000000000000']\n",
  "1430": "Problem: \nChef wants you to distribute candies among $N$ kids who are sitting in a circle. However, he wants to make some kids jealous of others. Thus, he wants you to distribute candies in such a way that there is a difference of at least $K$ candies between two adjacent kids. \nGiven the value of $N$ and $K$, you need to find the minimum number of candies you need to satisfy the given conditions, such that, each kid gets at least one candy.\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow. \n- The only line of each testcase contains two space-separated integers $N$ and $K$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of candies you need.\n\n-----Constraints-----\n- $1 \\leq T \\leq  10^6$\n- $2 \\leq  N \\leq  10^3$\n- $0 \\leq  K \\leq 10^4$ \n\n-----Sample Input:-----\n1 \n2 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nThe minimum number of candies required is $3$. One kid needs to have $1$ candy and the other needs to have $2$ candy to have a difference of $1$ candy between them.\n\n Examples: \nInput: \n['1', '2 1']\nOutput: \n ['3']\n",
  "1431": "Problem: \nAfter the hundred years of war started by the Fire Nation, its time for the Water Tribes to bring it to an end. Avatar asked Sokka to go to the Southern WarZone from The Northern WarZone and gave him some money in a bag for his journey. Sokka has the World Map to guide him during his journey . The World Map is described as a $N$x$N$ grid where the Northern WarZone is denoted by $(0,0)$ and the Southern WarZone is denoted by $(N-1,N-1)$. Each location on the world map is denoted in a similar way by two integers r and c. For each location having:  \n- $r = c$ denotes neutral land ( $(0,0)$ and $(N-1,N-1)$ also come under this category)       \n- $r < c$ denotes the land under the rule of Water Tribes     \n- $r > c$ denotes the land under the rule of Fire Kingdom   \nBeing wise Sokka travels only from one location to any other valid location (by valid location we mean a location which exists on the world map grid i.e. for that location $0 \\leq r < N$ and $0 \\leq c < N$ ) just to the right $(r,c+1)$ or below $(r+1,c)$ the current location randomly. Due to the times of war , Sokka has to pay one coin  each time he transitions from one nation to another. Here a transition is counted when Sokka is in Water Tribe land and moves to Fire Nation Land crossing the neutral land or vice versa .The first move is obviously never counted as a transition. Moreover , the coin is to be payed exactly once for one such transition (eg. if he makes this transition k times he has to pay k coins).  \nThe initial number of coins Sokka has is $2*N$. The probability that the coins he has when he reaches his destination is lesser than the number of coins he started his journey with can be expressed as a fraction $P/Q$, where P and Q are integers $(P \\geq 0, Q > 0)$  and Q is co-prime with $(10^9)+7$. You should compute $P/Q$ modulo $(10^9)+7$ for $T$ values of $N$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one integer $N$, the size of the world map grid. \n\n-----Output:-----\nFor each testcase, output in a single line , the Probability modulo (10^9)+7.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $2 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n2    \n\n5\n\n2    \n\n-----Sample Output:-----\n200000002     \n\n0  \n\n-----EXPLANATION:-----\nFor N=2, there is no possible path in which Sokka has to spend money, so the final number of coins in the bag is not lesser than the initial amount.\n\n Examples: \nInput: \n['2', '5', '2']\nOutput: \n ['200000002', '0']\n",
  "1432": "Problem: \nBandwidth of a matrix A is defined as the smallest non-negative integer K such that A(i, j) = 0 for |i - j| > K.\nFor example, a matrix with all zeros will have its bandwith equal to zero. Similarly bandwith of diagonal matrix will also be zero.\n\nFor example, for the below given matrix, the bandwith of this matrix is 2.\n\n1 0 0\n0 1 1\n1 1 0 \n\nBandwidth of the below matrix is 1. \n\nBandwidth of the below matrix is 2. \n\nBandwidth of the below matrix is also 2. \n\nYou will be a given a binary matrix A of dimensions N \u00d7 N. You are allowed to make following operation as many times as you wish (possibly zero or more). In a single operation, you can swap any two entries of the matrix. Your aim is to minimize the bandwidth of the matrix. Find the minimum bandwidth of the matrix A you can get after making as many operations of above type as you want.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.\nFirst line of each test case contains an integer N denoting the height/width of the matrix.\nNext N lines of each test case contain N space separated binary integers (either zero or one) corresponding to the entries of the matrix.\n\n-----Output-----\nFor each test case, output a single integer corresponding to the minimum bandwidth that you can obtain.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 500\n- 0 \u2264 A(i, j) \u2264 1\n\n-----Subtasks-----\n- Subtask #1 (40 points) : 1 \u2264 N \u2264 100\n- Subtask #2 (60 points) : original constraints\n\n-----Example-----\nInput:\n6\n2\n0 0\n0 0\n2\n1 0\n0 1\n2\n1 0\n1 0\n2\n1 0\n1 1\n3\n1 0 0\n0 1 1\n1 1 0\n4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n\nOutput:\n0\n0\n0\n1\n1\n3\n\n-----Explanation-----\nExample case 1. The bandwidth of a matrix will all zero entries will be zero. This is the minimum bandwidth you can get, so there is no need of performing any swap operation.\nExample case 2. The bandwidth of a diagonal matrix will also be zero.\nExample case 3. You can make the given matrix a diagonal matrix by swapping A(2, 1) and A(2, 2), which will have zero bandwidth.\nExample case 4. You can not make swaps in any way that can reduce the bandwidth of this matrix. Bandwidth of this matrix is equal to 1, which is the minimum bandwidth that you can get.\nExample case 5. Bandwidth of the given matrix is 2. You can make it equal to be 1 by swapping A(3, 1) and A(3, 3), i.e. the matrix after the operation will look like\n\n1 0 0\n0 1 1\n0 1 1\n\nThe bandwidth of this matrix is 1.\n\nExample case 6. The swap operations won't have any effect on the matrix. Its bandwidth is equal to 3.\n\n Examples: \nInput: \n['6', '2', '0 0', '0 0', '2', '1 0', '0 1', '2', '1 0', '1 0', '2', '1 0', '1 1', '3', '1 0 0', '0 1 1', '1 1 0', '4', '1 1 1 1', '1 1 1 1', '1 1 1 1', '1 1 1 1', '', '']\nOutput: \n ['0', '0', '0', '1', '1', '3']\n",
  "1436": "Problem: \nHarrenhal is the largest castle in the Seven Kingdoms and is the seat of House Whent in the Riverlands, on the north shore of the Gods Eye lake. Since the War of Conquest, however, it has become a dark and ruinous place.\n(c) A Wiki of Ice and Fire\n\nNow Harrenhal is too dangerous since it's a nice place for bandits to hide, or even for rebels to start planning overthrowing of the king. So, the current Lord of the Seven Kingdoms has decided, that it's time to completely ruin the castle. For that puposes, he's planning to send some military troops.\nIn this problem we assume, that Harrenhal can be described as a string H, which consists only of symbols 'a' and 'b'. Harrenhal is completely ruined if and only if the length of H is equal to zero.\nSo, how to make H empty? Send a military troop! When a military troop of the king reach the castle, they delete some palindromic subsequence S of H. For example, let H = 'abbabaab'. Then the current military troop can choose S = 'ababa'(Let's make symbols of S bold in H: 'abbabaab'). After deleting S, H will be equal to 'bab'. Military troops are free to choose any possible palindromic subsequence of H.\nYour task is pretty simple: determine the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal.\n\n-----Note-----\n\nMaybe, some of you aren't familiar with definitions from the statement. Here're some articles that could help you to understand the problem correctly:\n\n- Subsequence: http://en.wikipedia.org/wiki/Subsequence\n- Palindrome: http://en.wikipedia.org/wiki/Palindrome\n\n-----Input-----\nThe first line of the input contains an integer T, denoting the number of test cases.\nThe next T lines contain a string H each, denoting the string, that describes the current state of Harrenhal for the corresponding test cases.\nIt's guaranteed, that each H consists only of symbols 'a' and 'b'.\n\n-----Output-----\nThe output should contain exactly T lines. i'th line of the output should contain the only integer: the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal for the corresponding test cases.\n\n-----Constraints-----\n- 1 \u2264 |H| \u2264 100000, for each H.\n- Subtask 1(30 points): each H in the input is a palindrome, 1 \u2264 T \u2264 6;\n- Subtask 2(70 points): 1 \u2264 T \u2264 9.\n\n-----Example-----\nInput:\n1\nabbabaab\n\nOutput:\n2\n\n-----Explanation-----\nThere're multiple ways to ruin Harrenhal in the example test. Let's consider one of them.\nThe first troop can delete S = 'ababa'('abbabaab'). After that, H = 'bab'.\nThe second troop can delete S = 'bab'('bab'). After that, H is empty and that's it.\n\n Examples: \nInput: \n['1', 'abbabaab', '', '']\nOutput: \n ['2']\n",
  "1437": "Problem: \nA prime number is number x which has only divisors as 1 and x itself.\nHarsh is playing a game with his friends, where his friends give him a few numbers claiming that they are divisors of some number x but divisor 1 and the number x itself are not being given as divisors.\nYou need to help harsh find which number's divisors are given here.\nHis friends can also give him wrong set of divisors as a trick question for which no number exists.\nSimply, We are given the divisors of a number x ( divisors except 1 and x itself ) , you have to print the number if only it is possible.\nYou have to answer t queries.\n(USE LONG LONG TO PREVENT OVERFLOW)\n\n-----Input:-----\n- First line is T queires.\n- Next are T queries.\n- First line is N ( No of divisors except 1 and the number itself )\n- Next line has N integers or basically the divisors.\n\n-----Output:-----\nPrint the minimum possible x which has such divisors and print -1 if not possible.\n\n-----Constraints-----\n- 1<= T <= 30\n- 1<= N <= 350\n- 2<= Di <=10^6\n\n-----Sample Input:-----\n3\n2\n2 3\n2\n4 2\n3\n12 3 2\n\n-----Sample Output:-----\n6\n8\n-1\n\n-----EXPLANATION:-----\nQuery 1 : Divisors of 6 are ( 1,2,3,6) Therefore, Divisors except 1 and the number 6 itself are ( 2 , 3). Thus, ans = 6.\nQuery 2 : Divisors of 8 are ( 1,2,4,8) Therefore, Divisors except 1 and the number 8 itself are ( 2 , 4). Thus, ans = 8.\nQuery 3 : There is no such number x with only ( 1,2,3,12,x ) as the divisors.\n\n Examples: \nInput: \n['3', '2', '2 3', '2', '4 2', '3', '12 3 2']\nOutput: \n ['6', '8', '-1']\n",
  "1438": "Problem: \nMandarin chinese\n, Russian and Vietnamese as well.\nLet's denote $S(x)$ by the sum of prime numbers that divides $x$.\nYou are given an array $a_1, a_2, \\ldots, a_n$ of $n$ numbers, find the number of pairs $i, j$ such that $i \\neq j$, $a_i$ divides $a_j$ and $S(a_i)$ divides $S(a_j)$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- First line of each testcase contains one integer $n$ \u2014 number of elements of the array.\n- Second line of each testcase contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$.\n\n-----Output:-----\nFor each testcase, output in a single line number of pairs that each of it satisfies given conditions.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $2 \\leq n, a_i \\leq 10^6$\n- the sum of $n$ for all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #2 (20 points): $2 \\leq n \\leq 100$, $2 \\leq a_i \\leq 10^4$\nSubtask #2 (80 points): original contsraints\n\n-----Sample Input:-----\n1\n5\n2 30 2 4 3\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\n$S(2) = 2, S(30) = 2 + 3 + 5 = 10, S(4) = 2, S(3) = 3$. So using this information, the pairs of indicies are $(1,2)$, $(1, 3)$, $(1, 4)$, $(3, 1)$, $(3, 2)$, $(3, 4)$.\n\n Examples: \nInput: \n['1', '5', '2 30 2 4 3']\nOutput: \n ['6']\n",
  "1439": "Problem: \nChef has arrived in Dagobah to meet with Yoda to study cooking. Yoda is a very busy cook and he doesn't want to spend time with losers. So he challenges the Chef to a series of games, and agrees to teach the Chef if Chef can win at least P of the games. The total number of games is K. The games will be played on a chessboard of size N*M. That is, it has N rows, each of which has M squares. At the beginning of the game, a coin is on square (1, 1), which corresponds to the top-left corner, and every other square is empty. At every step, Yoda and Chef have to move the coin on the chessboard. The player who cannot make a move loses. Chef makes the first move. They can't move the coin to a square where it had been placed sometime before in the game, and they can't move outside chessboard.\n\nIn this game, there are two different sets of rules according to which the game can be played:\n\n-from (x, y) player can move coin to (x+1, y), (x-1, y), (x, y+1), (x, y-1) in his turn, if they are valid squares.\n\n-from (x, y) player can move coin to (x+1, y+1), (x-1, y-1), (x-1, y+1), (x+1, y-1) in his turn, if they are valid squares.\n\nBefore every game, the Power of the kitchen chooses one among the two sets of rules with equal probability of 0.5, and the game will be played according to those rules. Chef and Yoda are very wise, therefore they play optimally. You have to calculate the probability that Yoda will teach Chef.\n\n-----Input-----\n\nInput begins with an integer T, the number of test cases\n\nEach test case begins with 4 integers N, M, P, K.\n\n-----Output-----\n\nFor each test case, output a line containing the answer for task. The output must have an absolute error at most 0.000001 (10-6).  \n\n-----Constraints and Subtasks-----\n-  1 \u2264 T \u2264 50 \n-  1 \u2264 K \n\nSubtask 1 : 10 points \n\n-  2 \u2264 N, M \u2264 5 \n-  0 \u2264 P \u2264 K \u2264 5 \n\nSubtusk 2 : 10 points \n-  2 \u2264 N, M \u2264 10 \n-  0 \u2264 P \u2264 K \u2264 10^3 \n\nSubtusk 3 : 20 points \n-  2 \u2264 N, M \u2264 100 \n-  0 \u2264 P \u2264 K \u2264 10^3 \n\nSubtusk 4 : 60 points\n-  2 \u2264 N, M \u2264 100 \n-  0 \u2264 P \u2264 K \u2264 10^6 \n\n-----Example-----\nInput:\n2\n2 3 2 3\n2 2 5 5\nOutput:\n0.500000\n1.000000\n\n Examples: \nInput: \n['2', '2 3 2 3', '2 2 5 5']\nOutput: \n ['0.500000', '1.000000']\n",
  "1440": "Problem: \nYou are given an array $A$ of $N$ positive and pairwise distinct integers. \nYou can permute the elements in any way you want. \nThe cost of an ordering $(A_1, A_2, \\ldots, A_N)$ is defined as $ (((A_1 \\bmod A_2) \\bmod A_3)......) \\bmod A_N$ where $X \\bmod Y$ means the remainder when $X$ is divided by $Y$. \nYou need to find the maximum cost which can be attained through any possible ordering of the elements.\n\n-----Input:-----\n- The first line contains $T$ denoting the number of test cases.\n- The first line of each testcase contains a single integer $N$. \n- The second line of each testcase contains $N$ space-separated integers, the elements of $A$. \n\n-----Output:-----\n- For each testcase, output the maximum possible cost in a new line. \n\n-----Constraints-----\n- $1 \\leq T \\leq 5*10^5$\n- $2 \\leq N \\leq 5*10^5$\n- $1 \\leq A_i  \\leq 10^9$\n- Sum of $N$ over all testcases is less than or equal to $10^6$\n- All elements in a single testcase are distinct.\n\n-----Subtasks-----\n- 100 points : Original constraints.\n\n-----Sample Input:-----\n1\n2\n7 12\n\n-----Sample Output:-----\n7\n\n-----Explanation:-----\nThe two possible ways to order the elements are [7, 12] and [12, 7]. In the first case, the cost is $7 \\bmod 12 = 7$ and in the second case the cost is $12 \\bmod 7 = 5$. Clearly the answer is 7.\n\n Examples: \nInput: \n['1', '2', '7 12']\nOutput: \n ['7']\n",
  "1441": "Problem: \nChef is again playing a game with his best friend Garry. As usual, the rules of this game are extremely strange and uncommon.\nFirst, they are given a stack of $N$ discs. Each disc has a distinct, non-negative integer written on it. The players exchange turns to make a move. Before the start of the game, they both agree upon a set of positive integers  $S$ of size $K$. It is guaranteed that S contains the integer $1$. In a move, a player can select any value $x$ from $S$ and pop exactly $x$ elements from the top of the stack. The game ends when there are no discs remaining. Chef goes first.\nScoring: For every disc a player pops, his score increases by $2^p$ where $p$ is the integer written on the disc. For example, if a player pops the discs, with integers $p_1, p_2, p_3, \\dots, p_m$ written on it, during the entire course of the game, then his total score will be $2^{p_1} + 2^{p_2} + 2^{p_3} + \\dots + 2^{p_m}$.\nThe player with higher score wins the game. Determine the winner if both the players play optimally, or if the game ends in a draw.\n\n-----Input:-----\n- First line contains $T$, the number of testcases. Then the testcases follow.\n- The first line of each test case contains two space separated integers $N$ and $K$, denoting the size of the stack and the set S respectively.\n- Next line contains $N$ space separated integers $A_i$ where $A_1$ is the topmost element, denoting the initial arrangement of the stack.\n- The last line of each test case contains $K$ space separated integers each denoting $x_i$.\n\n-----Output:-----\nFor each testcase, output \"Chef\" (without quotes) if Chef wins, \"Garry\" (without quotes) if Garry wins, otherwise \"Draw\" (without quotes) in a separate line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq \\min(100, N)$\n- $0 \\leq A_i \\leq 10^9$\n- $1 \\leq x_i \\leq N$\n- $x_i \\neq x_j$ for all $i \\neq j$\n- $A_i \\neq A_j$ for all $i \\neq j$\n- Set $S$ contains integer $1$. \n- Sum of $N$ over all test cases does not exceed $10^5$.\n\n-----Sample Input:-----\n1\n3 2\n5 7 1\n1 2\n\n-----Sample Output:-----\nChef\n\n-----Explanation:-----\nChef can select 2 from the set and draw the top two discs (with integers 5 and 7 written on it) from the stack. Garry cannot select 2 from the set as there is only 1 disc left in the stack. However, he can select 1 from the set and pop the last disc.\nSo, Chef's score = $2^5$ + $2^7$ = $160$\n\nGarry's score = $2^1$ = $2$\n\nChef wins.\n\n Examples: \nInput: \n['1', '3 2', '5 7 1', '1 2']\nOutput: \n ['Chef']\n",
  "1442": "Problem: \nChef is baking a cake.\n\nWhile baking, in each minute the size of cake doubles as compared to its previous size.\n\nIn this cake, baking of cake is directly proportional to its size.\nYou are given $a$, the total time taken(in minutes) to bake the whole cake.\n\nLet cake be half baked at $k^{th}$ minute.         \nYour task is to find the value of $k+2$.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of T test cases follows.               \n- The first and only line of each test case contains a single integer $a$.\n\n-----Output:-----\nFor each testcase , print one line, the value of $k+2$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 8 $\n- $2 \\leq a \\leq 10^{128}$\n\n-----Sample Input:-----\n1\n\n2\n\n-----Sample Output:-----\n3\n\n-----Explaination-----\nTime was 1 min when cake was half baked by chef so answer is 1+2=3\n\n Examples: \nInput: \n['1', '2']\nOutput: \n ['3']\n",
  "1443": "Problem: \nOnce N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x.\nYou know that if there are two different boys x and y, who both like girl z, then there will be a collision.\nCan you calculate the number of different collisions at this party? Note that order of boys in the collision doesn't matter.\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions at the party.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n-----Explanation-----\nExample Case 1. All three boys like the first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her. Boys 1 and 3 both like the second girl so this is one more collision. Only one boy likes the third girl, so there are no collisions with her and thus we have 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes her, so there are no collisions at all.\n\n Examples: \nInput: \n['2', '4 3', '111', '100', '110', '000', '2 2', '10', '01']\nOutput: \n ['4', '0']\n",
  "1446": "Problem: \nGiven an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n-----Explanation-----First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3.\n\n Examples: \nInput: \n['1', '3']\nOutput: \n ['1']\n",
  "1447": "Problem: \nIn Chefland, types of ingredients are represented by integers and recipes are represented by sequences of ingredients that are used when cooking. One day, Chef found a recipe represented by a sequence $A_1, A_2, \\ldots, A_N$ at his front door and he is wondering if this recipe was prepared by him.\nChef is a very picky person. He uses one ingredient jar for each type of ingredient and when he stops using a jar, he does not want to use it again later while preparing the same recipe, so ingredients of each type (which is used in his recipe) always appear as a contiguous subsequence. Chef is innovative, too, so he makes sure that in each of his recipes, the quantity of each ingredient (i.e. the number of occurrences of this type of ingredient) is unique \u2015 distinct from the quantities of all other ingredients.\nDetermine whether Chef could have prepared the given recipe.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if the recipe could have been prepared by Chef or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $1 \\le A_i \\le 10^3$ for each valid $i$\n\n-----Example Input-----\n3\n6\n1 1 4 2 2 2\n8\n1 1 4 3 4 7 7 7\n8\n1 7 7 3 3 4 4 4\n\n-----Example Output-----\nYES\nNO\nNO\n\n-----Explanation-----\nExample case 1: For each ingredient type, its ingredient jar is used only once and the quantities of all ingredients are pairwise distinct. Hence, this recipe could have been prepared by Chef. \nExample case 2: The jar of ingredient $4$ is used twice in the recipe, so it was not prepared by Chef.\n\n Examples: \nInput: \n['3', '6', '1 1 4 2 2 2', '8', '1 1 4 3 4 7 7 7', '8', '1 7 7 3 3 4 4 4']\nOutput: \n ['YES', 'NO', 'NO']\n",
  "1448": "Problem: \nKshitij has recently started solving problems on codechef. As he is real problem solving enthusiast, he wants continuous growth in number of problems solved per day.\nHe started with $a$  problems on first day. \nHe solves $d$ problems more than previous day. But after every $k$ days , he increases $d$ by\n$inc$ .\nCan you guess how many questions he will solve on $nth $ day ?\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n-----EXPLANATION:-----\nThe number of questions solved in first 8 days is :\n$1$ $5$ $9$ $15$ $21$ $27$ $35$ $43$ .\nOn first day he solved 1 problem . Here $d$ is  4 for first 3 days.\nThen after 3 days $d$ increases by 2 (that is 6).\n\n Examples: \nInput: \n['1', '1 4 3 8 2']\nOutput: \n ['43']\n",
  "1449": "Problem: \nA Little Elephant from the Zoo of Lviv likes lucky strings, i.e., the strings that consist only of the lucky digits 4 and 7.\nThe Little Elephant calls some string T of the length M balanced if there exists at least one integer X (1 \u2264 X \u2264 M) such that the number of digits 4 in the substring T[1, X - 1] is equal to the number of digits 7 in the substring T[X, M]. For example, the string S = 7477447 is balanced since S[1, 4] = 7477 has 1 digit 4 and S[5, 7] = 447 has 1 digit 7. On the other hand, one can verify that the string S = 7 is not balanced.\nThe Little Elephant has the string S of the length N. He wants to know the number of such pairs of integers (L; R) that 1 \u2264 L \u2264 R \u2264 N and the substring S[L, R]  is balanced. Help him to find this number.\nNotes.\n\nLet S be some lucky string. Then\n\n- |S| denotes the length of the string S;\n\n- S[i] (1 \u2264 i \u2264 |S|) denotes the ith character of S (the numeration of characters starts from 1);\n\n-  S[L, R] (1 \u2264 L \u2264 R \u2264 |S|) denotes the string with the following sequence of characters: S[L], S[L + 1], ..., S[R], and is called a substring of S. For L > R we mean by S[L, R] an empty string.\n\n-----Input-----\nThe first line of the input file contains a single integer T, the number of test cases. Each of the following T lines contains one string, the string S for the corresponding test case. The input file does not contain any whitespaces.\n\n-----Output-----\nFor each test case output a single line containing the answer for this test case.\n\n-----Constraints-----\n1 \u2264 T \u2264 10\n\n1 \u2264 |S| \u2264 100000\n\nS consists only of the lucky digits 4 and 7.\n\n\n-----Example-----\nInput:\n4\n47\n74\n477\n4747477\n\nOutput:\n2\n2\n3\n23\n\n-----Explanation-----\n\nIn the first test case balance substrings are S[1, 1] = 4 and S[1, 2] = 47.\nIn the second test case balance substrings are S[2, 2] = 4 and S[1, 2] = 74.\nUnfortunately, we can't provide you with the explanations of the third and the fourth test cases. You should figure it out by yourself. Please, don't ask about this in comments.\n\n Examples: \nInput: \n['4', '47', '74', '477', '4747477', '', '']\nOutput: \n ['2', '2', '3', '23']\n",
  "1450": "Problem: \nCheffina challanges chef to rearrange the given array as arr[i] > arr[i+1] < arr[i+2] > arr[i+3].. and so on\u2026, i.e. also arr[i] < arr[i+2] and arr[i+1] < arr[i+3] and arr[i] < arr[i+3] so on.. Chef accepts the challenge, chef starts coding but his code is not compiling help him to write new code.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, First $N$ as the size of the array. \n- N space-separated distinct integers.\n\n-----Output:-----\nFor each test case, output in a single line answer given to the Chefffina.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n2\n4\n4 1 6 3\n5\n4 5 1 6 3\n\n-----Sample Output:-----\n3 1 6 4\n3 1 5 4 6\n\n Examples: \nInput: \n['2', '4', '4 1 6 3', '5', '4 5 1 6 3']\nOutput: \n ['3 1 6 4', '3 1 5 4 6']\n",
  "1452": "Problem: \nChef has bought N robots to transport cakes for a large community wedding. He has assigned unique indices, from 1 to N, to each of them. How it will happen?\nChef arranges the N robots in a row, in the (increasing) order of their indices. Then, he chooses the first M robots and moves them to the end of the queue. Now, Chef goes to the robot at the first position in the row and hands it one cake. He then notes this robot's index (say k) in his notebook, and goes to the kth position in the row. If the robot at this position does not have a cake, he give him one cake, notes his index in his notebook, and continues the same process. If a robot visited by Chef already has a cake with it, then he stops moving and the cake assignment process is stopped.\nChef will be satisfied if all robots have a cake in the end. In order to prepare the kitchen staff for Chef's wrath (or happiness :) ), you must find out if he will be satisfied or not? If not, you have to find out how much robots have a cake, so that the kitchen staff can prepare themselves accordingly.\n\n-----Input-----\n- The first line of input contains a single integer T denoting the number of test cases.\n- The single line of each test cases contains two space separated integers N and M.\n\n-----Output-----\nFor each of the T test cases, output a single line:\n\n- If all N robots have a cake, output \"Yes\" (without quotes).\n- Otherwise, output \"No\" (without quotes) followed by a space and the number of robots which have a cake.\n\n-----Constraints and Subtasks-----\n- 1 \u2264 T \u2264 10\n- 0 \u2264 M < NSubtask 1: 25 points\n- 1 \u2264 N \u2264 10^5Subtask 3: 75 points\n- 1 \u2264 N \u2264 10^9\n\n-----Example-----\nInput:\n3\n2 0\n2 1\n4 2\n\nOutput:\nNo 1\nYes\nNo 2\n\n-----Explanation-----\nIn test case 1, we have two robots indexed 1 and 2. They are arranged as (1 2). Chef goes to the first robot, gives him a cake, and moves to position 1. In the next step, he sees that robot at this position already has a has cake. So Chef stops moving, and our answer is \"No 1\".\nIn test case 2, we again have two robots indexed 1 and 2. Initially, they are arranged as (1 2). Then, Chef moves robot#1 to the end of the row, and thus the arrangement becomes (2 1). Chef goes to the robot at the first position, which is robot#2. Chef hands him a cake, and moves to position 2. Then, he hands a cake to robot#1 at position 2, and moves back to the first position. Since, robot#2 at the first position already ahs a cake, Chef stops moving. All N robots have cakes, so Chef is satisfied, and our answer is \"Yes\".\nIn the 3rd test case, we have the following arrangement of robots: (3 4 1 2). Only robots with indices 3 and 1 will get cakes. So our answer is \"No 2\".\n\n Examples: \nInput: \n['3', '2 0', '2 1', '4 2']\nOutput: \n ['No 1', 'Yes', 'No 2']\n",
  "1453": "Problem: \nChef has a sequence $A_1, A_2, \\ldots, A_N$; each element of this sequence is either $0$ or $1$. Appy gave him a string $S$ with length $Q$ describing a sequence of queries. There are two types of queries:\n- '!': right-shift the sequence $A$, i.e. replace $A$ by another sequence $B_1, B_2, \\ldots, B_N$ satisfying $B_{i+1} = A_i$ for each valid $i$ and $B_1 = A_N$\n- '?': find the length of the longest contiguous subsequence of $A$ with length $\\le K$ such that each element of this subsequence is equal to $1$\nAnswer all queries of the second type.\n\n-----Input-----\n- The first line of the input contains three space-separated integers $N$, $Q$ and $K$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n- The third line contains a string with length $Q$ describing queries. Each character of this string is either '?', denoting a query of the second type, or '!', denoting a query of the first type.\n\n-----Output-----\nFor each query of the second type, print a single line containing one integer \u2014 the length of the longest required subsequence.\n\n-----Constraints-----\n- $1 \\le K \\le N \\le 10^5$\n- $1 \\le Q \\le 3 \\cdot 10^5$\n- $0 \\le A_i \\le 1$ for each valid $i$\n- $S$ contains only characters '?' and '!'\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\le N \\le 10^3$\n- $1 \\le Q \\le 3 \\cdot 10^3$\nSubtask #2 (70 points): original constraints \n\n-----Example Input-----\n5 5 3\n1 1 0 1 1\n?!?!?    \n\n-----Example Output-----\n2\n3\n3\n\n-----Explanation-----\n- In the first query, there are two longest contiguous subsequences containing only $1$-s: $A_1, A_2$ and $A_4, A_5$. Each has length $2$.\n- After the second query, the sequence $A$ is $[1, 1, 1, 0, 1]$.\n- In the third query, the longest contiguous subsequence containing only $1$-s is $A_1, A_2, A_3$.\n- After the fourth query, $A = [1, 1, 1, 1, 0]$.\n- In the fifth query, the longest contiguous subsequence containing only $1$-s is $A_1, A_2, A_3, A_4$ with length $4$. However, we only want subsequences with lengths $\\le K$. One of the longest such subsequences is $A_2, A_3, A_4$, with length $3$.\n\n Examples: \nInput: \n['5 5 3', '1 1 0 1 1', '?!?!?']\nOutput: \n ['2', '3', '3']\n",
  "1454": "Problem: \nIt's Christmas time and Santa is in town. There are N children each having a bag with a mission to fill in as many toffees as possible. They are accompanied by a teacher whose ulterior motive is to test their counting skills. The toffees are of different brands (denoted by lowercase letters a-z). Santa picks up a child numbered m and gives n toffees of brand p to the child.\n\nThe teacher wishes to ask the children to calculate the number of toffees there are of a particular brand amongst a given range of children. Formally, there are 2 queries:\n\nInput:\n\nFirst line consists of Q queries.\n\nEach line follows and consists of four space separated values:\n\nType 1: It is of the form 1 m x p\n\n1 is the type no,\"m\" is the child to which \"x\" toffees of a brand \"p\" are given\n\nType 2: It is of the form 2 m n p\nwhere m - n is the range of children (inclusive) being queried for brand p\n\nOutput:\n\nReport the sum of toffees of brand p within the given range m - n for each query of type 2\n\nConstraints:\n\n1 <= Q <= 10^5\n\n1 <= N <= 10^6\n\n1 <= m <= n <= 10^6\n\n1 <= x <= 10^6\n\nall brand of toffees are lowercase letters\n\nSubtask 1: (30 points)\n\n1 <= Q <= 10^3\n\n1 <= m <= n <= 10^3\n\n1 <= x <= 10^3\n\nSubtask 2: (70 points)\n\nOriginal Constraints\n\nSample Input:\n\n5\n\n1 3 4 a\n\n1 5 8 a\n\n1 1 7 x\n\n2 1 6 a\n\n2 3 6 y\n\nSample Output:\n\n12\n\n0\n\nIn first case, there are two children between 3 and 5 between 0 - 6  having sum (4 + 8)\n\nThere's no toffee for y in given range\n\n Examples: \nInput: \n['5', '1 3 4 a', '1 5 8 a', '1 1 7 x', '2 1 6 a', '2 3 6 y']\nOutput: \n ['12', '0', 'In first case, there are two children between 3 and 5 between 0 - 6  having sum (4 + 8)', \"There's no toffee for y in given range\"]\n",
  "1455": "Problem: \nLeha is a usual student at 'The Usual University for Usual Students'. Sometimes he studies hard; at other times he plays truant and gets busy with other things besides academics. He has already studied at the university for N months. For the ith month (1 \u2264 i \u2264 N), he has received some non-negative integer grade A[i].\nNow he wants to analyse his progress for some periods of his university education. An arbitrary period, defined by two positive integers L and R, begins at Leha's Lth month at the university and ends at the Rth. The analysis is performed via the following steps.\n\n1. Write down all the grades for each month from L to R and sort them. Let's call the sorted list S.\n\n2. Calculate the sum of squared differences of consecutive elements in S, that is, (S[2] - S[1])2 + (S[3] - S[2])2 + ... + (S[R-L+1] - S[R-L])2.\n\n-----Input-----\nThe first line contains one integer N \u2014 the number of months Leha has already studied at the university.\nThe second line contains N integers \u2014 list A of Leha's grades.\nThe third line contains one integer M \u2014 the number of periods Leha is interested in analyzing.\nEach of the following M lines contain two integers L and R describing each period.\n\n-----Output-----\nFor each query, output one integer \u2014 the result of the progress analysis for the corresponding period.\n\n-----Constraints-----\n- 1 \u2264 N, M \u2264 5*104\n- 0 \u2264 A[i] \u2264 106\n\n-----Subtasks-----\n- Subtask 1 (19 points) 1 \u2264 N, M \u2264 200, time limit = 2 sec\n- Subtask 2 (31 points) 1 \u2264 N, M \u2264 10 000, time limit = 2 sec\n- Subtask 3 (26 points) 0 \u2264 A[i] \u2264 100, time limit = 5 sec\n- Subtask 4 (24 points) no additional constraints, , time limit = 5 sec\n\n-----Example-----\nInput:5\n1 3 2 4 5\n5\n1 5\n1 4\n2 4\n3 3\n3 5\n\nOutput:4\n3\n2\n0\n5\n\nExplanation\n\nThe first query: sorted array looks like (1, 2, 3, 4, 5) and the answer is calculated as (2-1)2 + (3-2)2 + (4-3)2 + (5-4)2 = 4\n\nThe second query: sorted array looks like (1, 2, 3, 4) and the answer is calculated as (2-1)2 + (3-2)2 + (4-3)2 = 3\n\nThe last query: sorted array looks like (2, 4, 5) and the answer is calculated as (4-2)2 + (5-4)2 = 5\n\n Examples: \nInput: \n['5', '1 3 2 4 5', '5', '1 5', '1 4', '2 4', '3 3', '3 5']\nOutput: \n ['4', '3', '2', '0', '5']\n",
  "1456": "Problem: \nThe XOR pair representation (XPR) of a positive integer $N$ is defined as a pair of integers $(A, B)$ such that:\n- $1 \\le A \\le B \\le N$\n- $A \\oplus B = N$\n- if there is no way to choose $A$ and $B$ satisfying the above conditions, $A = B = -1$\n- otherwise, the value of $A$ should be the smallest possible\nThese conditions uniquely define the XPR. Next, we define a function $F(N)$ = the value of $B$ in $XPR(N)$, and a function $G(L, R) = \\sum\\limits_{i=L}^R F(i)$.\nYou are given $L$ and $R$. Compute $G(L, R)$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $L$ and $R$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the value of the function $G(L, R)$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le L \\le R \\le 10^9$\n\n-----Example Input-----\n5\n1 10\n3 6\n4 10\n10 17\n100 159\n\n-----Example Output-----\n28\n9\n28\n79\n7485\n\n Examples: \nInput: \n['5', '1 10', '3 6', '4 10', '10 17', '100 159']\nOutput: \n ['28', '9', '28', '79', '7485']\n",
  "1457": "Problem: \nThe purpose of this problem is to verify whether the method you are using to read input data is sufficiently fast to handle problems branded with the enormous Input/Output warning. You are expected to be able to process at least 2.5MB of input data per second at runtime.\n\n-----Input-----\nThe input begins with two positive integers n k (n, k<=107). The next n lines of input contain one positive integer ti, not greater than 109, each.\n\n-----Output-----\nWrite a single integer to output, denoting how many integers ti are divisible by k.\n\n-----Example-----\nInput:\n7 3\n1\n51\n966369\n7\n9\n999996\n11\n\nOutput:\n4\n\n Examples: \nInput: \n['7 3', '1', '51', '966369', '7', '9', '999996', '11']\nOutput: \n ['4']\n",
  "1458": "Problem: \nChef has recently been playing a lot of chess in preparation for the ICCT (International Chef Chess Tournament).\nSince putting in long hours is not an easy task, Chef's mind wanders elsewhere. He starts counting the number of squares with odd side length on his chessboard..\nHowever, Chef is not satisfied. He wants to know the number of squares of odd side length on a generic $N*N$ chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\n Examples: \nInput: \n['2', '3', '8']\nOutput: \n ['10', '120']\n",
  "1459": "Problem: \nToday, Chef has a fencing job at hand and has to fence up a surface covering N$N$ points. \nTo minimize his work, he started looking for an algorithm that had him fence the least amount of length. \nHe came up with the Convex Hull algorithm, but soon realized it gave him some random shape to fence. However, Chef likes rectangles and has a favourite number M$M$. \nHelp him find the minimum perimeter he has to fence if he wants to fence a rectangle, with slope of one of the sides as M$M$, to cover all the points.\n\n-----Input:-----\n- The first line contains two integers N$N$ and M$M$, the number of points and the Chef's favourite Number.\n- The next n lines contain two space separated integers X$X$ and Y$Y$, the coordinates of the point.\n\n-----Output:-----\nPrint a single decimal number, denoting the perimeter of the rectangle. Answer will considered correct if it has absolute error less than 10\u22126$10^{-6}$.\n\n-----Constraints-----\n- 2\u2264N\u22641000000$2 \\leq N \\leq 1000000$\n- \u22121000\u2264M\u22641000$-1000 \\leq M \\leq 1000$\n- \u22121000000\u2264X\u22641000000$-1000000 \\leq X \\leq 1000000$\n- \u22121000000\u2264Y\u22641000000$-1000000 \\leq Y \\leq 1000000$\n\n-----Sample Input:-----\n4 1\n0 1\n0 -1\n1 0\n-1 0\n\n-----Sample Output:-----\n5.656854249492380\n\n-----Note:-----\n- As the input size is large, it is recommended to use Fast IO.\n\n Examples: \nInput: \n['4 1', '    0 1', '    0 -1', '    1 0', '   -1 0', '']\nOutput: \n ['5.656854249492380']\n",
  "1460": "Problem: \nMia is working as a waitress at a breakfast diner. She can take up only one shift from 6 shifts a day i.e. from 10 am to 4 pm. She needs to save 300$ after completion of the month. She works only for $D$ days in the month. She estimates that she gets her highest tip in the first shift and the tip starts decreasing by 2% every hour as the day prolongs. She gets a minimum wage of $X$ $ for every shift. And her highest tip in the first shift is $Y$ $. Determine whether Mia will be able to save 300$ from her wages and tips after working $D$ days of the month. If she can, print YES, else print NO.\n\n-----Constraints-----\n- 8 <= D <=30\n- 7 <= X <=30\n- 4 <= Y <= 20\n\n-----Input:-----\n- First line has three parameters $D$, $X$ and $Y$ i.e. number of days worked, minimum wage and highest tip.\n- Second line contains D integers indicating her shifts every $i$-th day she has worked.\n\n-----Output:-----\n- Print YES, if Mia has saved 300$, NO otherwise.\n\n-----Sample Input:-----\n9 17 5\n1 3 2 4 5 6 1 2 2\n\n-----Sample Output:-----\nNO\n\n-----Explanation:-----\nNo. of days Mia worked (D) is 9, so minimum wage she earns (X) is 17 dollars. Highest tip at first hour (Y) = 5 dollars, 1st day she took 1st shift and 2nd day she took 3rd shift and so on. Upon calculation we will find that Mia was not able to save 300 dollars.\n\n Examples: \nInput: \n['9 17 5', '1 3 2 4 5 6 1 2 2']\nOutput: \n ['NO']\n",
  "1461": "Problem: \nConsider the fraction, $a/b$, where $a$ and $b$ are positive integers. If $a < b$ and $GCD(a,b) = 1$, it is called a reduced proper fraction.\nIf we list the set of a reduced proper fraction for $d \\leq 8$, (where $d$ is the denominator) in ascending order of size, we get:\n$1/8$, $1/7$, $1/6$, $1/5$, $1/4$, $2/7$, $1/3$, $3/8$, $2/5$ , $3/7$, $1/2$, $4/7$, $3/5$, $5/8$, $2/3$, $5/7$, $3/4$, $4/5$,  $5/6$, $6/7$, $7/8$\nIt can be seen that $2/5$ is the fraction immediately to the left of $3/7$.\nBy listing the set of reduced proper fractions for $d \\leq N$ in ascending order of value, find the numerator and denominator of the fraction immediately to the left of $a/b$ when $a$ and $b$ are given.\n\n-----Input:-----\n- First line of input contains an integer $T$, number of test cases\n- Next $T$ lines contain $a$ $b$ $N$ separated by space\n\n-----Output:-----\nPrint the numerator and denominator separated by a space corresponding to each test case on a new line\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq a < b \\leq 10^9$\n- $GCD(a,b) = 1$\n- $b < N \\leq 10^{15}$\n\n-----Subtasks-----\n- 10 points: $1 \\leq N \\leq 100$\n- 30 points : $1 \\leq N \\leq 10^6$\n- 60 points : $1 \\leq N \\leq 10^{15}$\n\n-----Sample Input:-----\n5\n3 7 8\n3 5 8\n4 5 8\n6 7 8\n1 5 8\n\n-----Sample Output:-----\n2 5\n4 7\n3 4\n5 6\n1 6\n\n Examples: \nInput: \n['5', '3 7 8', '3 5 8', '4 5 8', '6 7 8', '1 5 8']\nOutput: \n ['2 5', '4 7', '3 4', '5 6', '1 6']\n",
  "1462": "Problem: \nThe name of our college is \"Government College of Engineering and Textile Technology Berhampore\". There is another college named \"Government College of Engineering and Textile Technology Serampore\". As the names are quite similar, those who are unaware of existence of both the colleges, often get confused. And mistake one with other.\n\nGiven a string, if it contains the word berhampore (case insensitive), print GCETTB or if it contains serampore(case-insensitive), print GCETTS . If the string contains neither print Others. If it contains both Berhampore and Serampore print Both \nInput \n- First line contains single integer T, No. of test case  \n- Next line for every test contain case a string S \nOutput\n\nPrint GCETTB or GCETTS or Others or Both on a new line\nConstraints \n- 1 <= T <= 10 \n- 0 <= len(S) <= 100  \n- S contain a-z and A-Z and space only\nSample Input\n3\nGovernment clg Berhampore\nSeRaMporE textile college \nGirls college Kolkata\n\nSample Output\n\nGCETTB\n\nGCETTS\n\nOthers       \nExplanation\n\nSelf-Explanatory\n\n Examples: \nInput: \n['3', 'Government clg Berhampore', 'SeRaMporE textile college', 'Girls college Kolkata']\nOutput: \n ['GCETTB', 'GCETTS', 'Others']\n",
  "1463": "Problem: \nChef has a recipe book. He wishes to read it completely as soon as possible so that he could try to cook the dishes mentioned in the book.\nThe pages of the book are numbered $1$ through $N$. Over a series of days, Chef wants to read each page. On each day, Chef can choose to read any set of pages such that there is no prime that divides the numbers of two or more of these pages, i.e. the numbers of pages he reads on the same day must be pairwise coprime. For example, Chef can read pages $1$, $3$ and $10$ on one day, since $(1, 3)$, $(3, 10)$ and $(1, 10)$ are pairs of coprime integers; however, he cannot read pages $1$, $3$ and $6$ on one day, as $3$ and $6$ are both divisible by $3$. Since chef might get bored by reading the same recipe again and again, Chef will read every page exactly once.\nGiven $N$, determine the minimum number of days Chef needs to read the entire book and the pages Chef should read on each of these days.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$.\n\n-----Output-----\nFor each test case:\n- First, print a line containing a single integer $D$ \u2015 the minimum number of days required to read the book. Let's number these days $1$ through $D$.\n- Then, print $D$ lines describing the pages Chef should read. For each valid $i$, the $i$-th of these lines should contain an integer $C_i$ followed by a space and $C_i$ space-separated integers \u2015 the numbers of pages Chef should read on the $i$-th day.\nIf there are multiple solutions with the minimum number of days, you may print any one.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points): $N \\le 100$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n5\n\n-----Example Output-----\n2\n3 1 2 5\n2 3 4\n\n-----Explanation-----\nExample case 1:\n- On the first day, Chef should read three pages: $1$, $2$ and $5$.\n- On the second day, Chef should read the remaining two pages: $3$ and $4$.\nThere are other valid solutions as well.\n\n Examples: \nInput: \n['1', '5', '']\nOutput: \n ['2', '3 1 2 5', '2 3 4']\n",
  "1464": "Problem: \nYou visit a doctor on a date given in the format $yyyy:mm:dd$. Your doctor suggests you to take pills every alternate day starting from that day. You being a forgetful person are pretty sure won\u2019t be able to remember the last day you took the medicine and would end up in taking  the medicines on wrong days. \nSo you come up with the idea of taking medicine on the dates whose day is odd or even depending on whether $dd$ is odd or even. Calculate the number of pills you took on right time before messing up for the first time.\n\n-----Note:-----\nEvery year that is exactly divisible by four is a leap year, except for years that are exactly divisible by 100; the centurial years that are exactly divisible by 400 are still leap years. For example, the year 1900 is not a leap year; the year 2000 is a leap year.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, in the format $yyyy:mm:dd$\n\n-----Output:-----\nFor each testcase, output in a single line the required answer.\n\n-----Constraints-----\n- $ 1 \\leq T \\leq 1000 $\n- $ 1900 \\leq yyyy \\leq\u20092038 $\n- $yyyy:mm:dd$ is a valid date\n\n-----Sample Input:-----\n1\n2019:03:31\n\n-----Sample Output:-----\n1\n\n-----EXPLANATION:-----\nYou can take pill on the right day only on 31st March. Next you will take it on 1st April which is not on the alternate day.\n\n Examples: \nInput: \n['1', '2019:03:31']\nOutput: \n ['1']\n",
  "1466": "Problem: \nVietnamese and Bengali as well.\nAn $N$-bonacci sequence is an infinite sequence $F_1, F_2, \\ldots$ such that for each integer $i > N$, $F_i$ is calculated as $f(F_{i-1}, F_{i-2}, \\ldots, F_{i-N})$, where $f$ is some function. A XOR $N$-bonacci sequence is an $N$-bonacci sequence for which $f(F_{i-1}, F_{i-2}, \\ldots, F_{i-N}) = F_{i-1} \\oplus F_{i\u22122} \\oplus \\ldots \\oplus F_{i\u2212N}$, where $\\oplus$ denotes the bitwise XOR operation.\nRecently, Chef has found an interesting sequence $S_1, S_2, \\ldots$, which is obtained from prefix XORs of a XOR $N$-bonacci sequence $F_1, F_2, \\ldots$. Formally, for each positive integer $i$, $S_i = F_1 \\oplus F_2 \\oplus \\ldots \\oplus F_i$. You are given the first $N$ elements of the sequence $F$, which uniquely determine the entire sequence $S$.\nYou should answer $Q$ queries. In each query, you are given an index $k$ and you should calculate $S_k$. It is guaranteed that in each query, $S_k$ does not exceed $10^{50}$.\n\n-----Input-----\n- The first line of the input contains two space-separated integers $N$ and $Q$.\n- The second line contains $N$ space-separated integers $F_1, F_2, \\ldots, F_N$.\n- The following $Q$ lines describe queries. Each of these lines contains a single integer $k$.\n\n-----Output-----\nFor each query, print a single line containing one integer $S_k$.\n\n-----Constraints-----\n- $1 \\le N, Q \\le 10^5$\n- $0 \\le F_i \\le 10^9$ for each $i$ such that $1 \\le i \\le N$\n- $1 \\le k \\le 10^9$\n\n-----Example Input-----\n3 4\n0 1 2\n7\n2\n5\n1000000000\n\n-----Example Output-----\n3\n1\n0\n0\n\n Examples: \nInput: \n['3 4', '0 1 2', '7', '2', '5', '1000000000']\nOutput: \n ['3', '1', '0', '0']\n",
  "1468": "Problem: \nMs. E.T. came from planet Hex. She has 8 fingers in each hand which makes her count in hexadecimal way. When she meets you, she tells you that she came from 7E light years from the planet Earth. You see she means that it is 126 light years far away and she is telling you the numbers in hexadecimal. Now, you are in trouble to understand what those numbers really mean. Therefore, you have to convert the hexadecimal numbers to decimals.\n\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given nunmber\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\n Examples: \nInput: \n['3', 'A', '1A23', '2C2A']\nOutput: \n ['10', '6691', '11306']\n",
  "1469": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n2\n23\n34\n234\n345\n456\n2345\n3456\n4567\n5678\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['2', '23', '34', '234', '345', '456', '2345', '3456', '4567', '5678']\n",
  "1470": "Problem: \nAhmed Gafer failed to pass the test, but he got the job because of his friendship with Said and Shahhoud. After working in the kitchen for a while, he blew it. The customers didn't like the food anymore and one day he even burned the kitchen. Now the master Chef is very upset.\nAhmed isn't useful anymore at being a co-Chef, so S&S decided to give him a last chance. They decided to give Ahmed a new job, and make him work as the cashier of the restaurant. Nevertheless, in order not to repeat their previous mistake, they decided to give him a little test to check if his counting skills are good enough for the job. The problem is as follows: \nGiven a string A of lowercase English letters, Ahmad was asked to find the number of good substrings.\nA substring A[L,\u2009R] is good if:\n\n-  The length of the substring is exactly 2 and AL = AR, OR\n- The length of the substring is greater than 2,AL = AR and the substring A[L\u2009+\u20091,\u2009R\u2009-\u20091] has only one distinct letter.\n\nAnyways, Ahmed struggled trying to find a solution for the problem. Since his mathematical skills are very poor as it turned out, he decided to cheat and contacted you asking for your help. Can you help him in this challenge?\n\n-----Input-----\nThe first line of the input contains the integer T, indicating the number of test cases.\nEach of the following T lines, contains a string A.\n\n-----Output-----\nFor each test case, output a single line containing a single number, indicating the number of good substrings.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100 \n- 1 \u2264  |A|  \u2264 105 \n-  It's guaranteed that the sum of  |A|  over all test cases doesn't exceed 5x105. \n\n-----Example-----\nInput:\n2\na\nabba\n\nOutput:\n0\n2\n\n\n-----Explanation-----\nExample case 2. The good substrings of abba are: { bb } and { abba }.\n\n Examples: \nInput: \n['2', 'a', 'abba']\nOutput: \n ['0', '2']\n",
  "1472": "Problem: \n$Neha$  is given a number $N$. She always looks for special thing , this time she is looking for $Special$ $Number$ and $Partial$ $Special$ $Number$. A $Special$ $Number$ is a number whose product of its digits is equal to number itself i.e. $N $, and in this number there is no digit $1$. $Partial$ $Special$ is a number having all the condition same as $Special$ except that it can also have digit $1$ in it .Neha have to count the number of $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$ . She is not so good in programming , so go and help her.\n\n-----Input:-----\n- Integers $N$ is taken as input from input stream. \n\n-----Output:-----\n- Print the number of  $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$ numbers to be count will be less then 10^6\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n1 20\n\n-----EXPLANATION:-----\nThere are only one natural numbers, the product of the digits of which is 3  :- {3}.\nThere are 20 natural numbers with digit 1 , whose  product of the digits  is 3 :-{13, 31, 113 ,131 311 ,1113 ,1131 ,1311, 3111 ,11113, 11131, 11311 ,13111, 31111, 111113, 111131, 111311,113111, 131111 ,311111}\n\n Examples: \nInput: \n['3']\nOutput: \n ['1 20']\n",
  "1474": "Problem: \nStuart is obsessed to numbers. He like all type of numbers in fact he is having a great collection of numbers in his room. His collection includes N different large numbers. But today he is searching for a number which is having maximum frequency of digit X. Numbers are large so he can\u2019t do the task on his own. Help him to find a number having maximum frequency of digit X.\n\n-----Input-----\nFirst Line contains number of test cases T. First Line of each test case contains N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer indicates ith number in Stuart's room. Next Line contains digit X.\n\n-----Output-----\nOutput the number which is having maximum frequency of digit X. If two or more numbers are having same maximum frequency then output the first occurred number among them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10200\n- 0 \u2264 X \u2264 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n-----Explanation-----\nExample case 1. 1323 number is having maximum occurrence of digit 3.\nExample case 2. 335 & 1323 are having maximum occurrence of digit 3 so output must be first occurred number in the array i.e. 335.\n\n Examples: \nInput: \n['2', '5', '345 1323 165 98 456', '3', '5', '335 876 98 1323 349', '3']\nOutput: \n ['1323', '335']\n",
  "1475": "Problem: \nAbhiram needs to search for an antidote. He comes to know that clue for finding the antidote is carefully hidden by KrishnaMurthy in the form of a puzzle.\n\nThe puzzle consists of a string S and a keywordK. Abhiram needs to find the string of position of anagrams R of the keyword in the string which is the clue. \nThe antidote is found in the box numbered R. Help him find his clue R.\nAnagram: A word or phrase that is made by arranging the letters of another word or phrase in a different order. Eg: 'elvis' and 'lives' are both anagrams of each other.\nNote: Consider, Tac and act are not anagrams(case sensitive).\n\n-----Input:-----\nThe first line contains a string S of length land the second line contains a keyword K.\n\n-----Output:-----\n\nOutput contains a line\"The antidote is found in R.\" Where R= string of positions of anagrams.(the position of the first word in the string is 1).\n\n-----Constraints:-----\n1<=l<=500\n\n1<=k<=50\n\n-----Example:-----\nInput:\ncat is the act of tac\ncat\n\nOutput:\nThe antidote is found in 46.\n\n Examples: \nInput: \n['cat is the act of tac', 'cat']\nOutput: \n ['The antidote is found in 46.']\n",
  "1476": "Problem: \nChef has decided to retire and settle near a peaceful beach. He had always been interested in literature & linguistics. Now when he has leisure time, he plans to read a lot of novels and understand structure of languages. Today he has decided to learn a difficult language called Smeagolese. Smeagolese is an exotic  language whose alphabet is lowercase and uppercase roman letters. Also every word on this alphabet is a meaningful word in Smeagolese. Chef, we all know is a fierce learner - he has given himself a tough exercise. He has taken a word and wants to determine all possible anagrams of the word which mean something in Smeagolese.  Can you help him ?\n\n-----Input-----\nInput begins with a single integer T, denoting the number of test cases. After that T lines follow each containing a single string S - the word chef has chosen. You can assume that 1 <= T <= 500 and 1 <= |S| <= 500. You can also assume that no character repeats more than 10 times in the string. \n\n-----Output-----\nOutput one line per test case - the number of different words that are anagrams of the word that chef has chosen. As answer can get huge, print it modulo 10^9 + 7\n\n-----Example-----\nInput:\n4\nab\naa\naA\nAAbaz\n\nOutput:\n2\n1\n2\n60\nDescription:\nIn first case \"ab\" & \"ba\" are two different words. In third case, note that A & a are different alphabets and hence \"Aa\" & \"aA\" are different words.\n\n Examples: \nInput: \n['4', 'ab', 'aa', 'aA', 'AAbaz']\nOutput: \n ['2', '1', '2', '60', 'Description:', 'In first case \"ab\" & \"ba\" are two different words. In third case, note that A & a are different alphabets and hence \"Aa\" & \"aA\" are different words.']\n",
  "1477": "Problem: \nYou have a string S consisting of N uppercase English letters. You are allowed to perform at most one operation of following kind: Choose any position in the string, remove the character at that position and insert it back to any other place in the string.\n\nFind the  lexicographically smallest  string you can achieve.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 50\n- S will consist of uppercase English letters.\n\n-----Example-----\nInput:\n2\n4\nDCBA\n7\nXYZZYZZ\n\nOutput:\nADCB\nXYYZZZZ\n\n-----Explanation-----\nExample case 1. The optimal solution here is to choose the last character and put it in the beginning of the string. So the answer will be ADCB\nExample case 2. The optimal solution here is to choose the 5-th character (1-based index) and put it between the 2-nd and the 3-rd characters. So the answer will be XYYZZZZ\n\n Examples: \nInput: \n['2', '4', 'DCBA', '7', 'XYZZYZZ']\nOutput: \n ['ADCB', 'XYYZZZZ']\n",
  "1478": "Problem: \nLet's define a periodic infinite sequence S$S$ (0$0$-indexed) with period K$K$ using the formula Si=(i%K)+1$S_i = (i \\% K) + 1$.\nChef has found a sequence of positive integers A$A$ with length N$N$ buried underground. He suspects that it is a contiguous subsequence of some periodic sequence. Unfortunately, some elements of A$A$ are unreadable. Can you tell Chef the longest possible period K$K$ of an infinite periodic sequence which contains A$A$ (after suitably filling in the unreadable elements) as a contiguous subsequence?\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first line of each test case contains a single integer N$N$. \n- The second line contains N$N$ space-separated integers A1,A2,\u2026,AN$A_1, A_2, \\dots, A_N$. Unreadable elements are denoted by \u22121$-1$.\n\n-----Output-----\nFor each test case, print a single line.\n- If the period can be arbitrarily large, this line should contain a single string \"inf\".\n- Otherwise, if A$A$ cannot be a contiguous subsequence of a periodic sequence, it should contain a single string \"impossible\".\n- Otherwise, it should contain a single integer \u2014 the maximum possible period.\n\n-----Constraints-----\n- 1\u2264T\u2264100$1 \\le T \\le 100$\n- 2\u2264N\u2264105$2 \\le N \\le 10^5$\n- the sum of N$N$ over all test cases does not exceed 106$10^6$\n- for each valid i$i$, 1\u2264Ai\u2264106$1 \\le A_i \\le 10^6$ or Ai=\u22121$A_i = -1$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- 2\u2264N\u22641,000$2 \\le N \\le 1,000$\n- the sum of N$N$ over all test cases does not exceed 10,000$10,000$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n3\n3\n-1 -1 -1\n5\n1 -1 -1 4 1\n4\n4 6 7 -1\n\n-----Example Output-----\ninf\n4\nimpossible\n\n Examples: \nInput: \n['3', '3', '-1 -1 -1', '5', '1 -1 -1 4 1', '4', '4 6 7 -1']\nOutput: \n ['inf', '4', 'impossible']\n",
  "1479": "Problem: \nYou are participating in a contest which has $11$ problems (numbered $1$ through $11$). The first eight problems (i.e. problems $1, 2, \\ldots, 8$) are scorable, while the last three problems ($9$, $10$ and $11$) are non-scorable \u2015 this means that any submissions you make on any of these problems do not affect your total score.\nYour total score is the sum of your best scores for all scorable problems. That is, for each scorable problem, you look at the scores of all submissions you made on that problem and take the maximum of these scores (or $0$ if you didn't make any submissions on that problem); the total score is the sum of the maximum scores you took.\nYou know the results of all submissions you made. Calculate your total score.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$ denoting the number of submissions you made.\n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains two space-separated integers $p_i$ and $s_i$, denoting that your $i$-th submission was on problem $p_i$ and it received a score $s_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 your total score.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 1,000$\n- $1 \\le p_i \\le 11$ for each valid $i$\n- $0 \\le s_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (15 points): all submissions are on the same problem, i.e. $p_1 = p_2 = \\ldots = p_N$\nSubtask #2 (15 points): there is at most one submission made on each problem, i.e. $p_i \\neq p_j$ for each valid $i, j$ ($i \\neq j$)\nSubtask #3 (70 points): original constraints\n\n-----Example Input-----\n2\n5\n2 45\n9 100\n8 0\n2 15\n8 90\n1\n11 1\n\n-----Example Output-----\n135\n0\n\n-----Explanation-----\nExample case 1: The scorable problems with at least one submission are problems $2$ and $8$. For problem $2$, there are two submissions and the maximum score among them is $45$. For problem $8$, there are also two submissions and the maximum score is $90$. Hence, the total score is $45 + 90 = 135$.\nExample case 2: No scorable problem is attempted, so the total score is $0$.\n\n Examples: \nInput: \n['2', '5', '2 45', '9 100', '8 0', '2 15', '8 90', '1', '11 1']\nOutput: \n ['135', '0']\n",
  "1480": "Problem: \nThere are n cabs in a city numbered from 1 to n. The city has a rule that only one cab can run in the city at a time. Cab picks up the customer and drops him to his destination. Then the cab gets ready to pick next customer. There are m customers in search of cab. First customer will get the taxi first. You have to find the nearest cab for each customer. If two cabs have same distance then the cab with lower number is preferred.\n\nYour task is to find out minimum distant cab for each customer.\n\nInput:\n\nThe first line of the input contains an integer T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and M, denoting the number of cabs and the number of customers.\n\nThe next N lines contain two space-separated integers x[i] and y[i], denoting the initial position of the ith cab.\n\nNext line contains an integer M denoting number of customers.\nThe next M lines contain four space seperated integers sx[i], sy[i], dx[i], dy[i], denoting the current location and the destination of the ith customer.\n\nOutput:\n\nOutput the nearest cab number for each customer.\n\nConstraints:\n\n1<=t<=10\n\n1<=n,m<=1000\n\n-10^9<=x[i] , y[i] , sx[i] , sy[i] , dx[i] , dy[i]<=10^9\n\nExample:\nInput:\n\n1\n\n3 2\n\n1 3\n\n3 2\n\n3 5\n\n2 3 3 4\n\n5 3 4 1\n\nOutput:\n\n1\n\n1\n\nExplanation:\n\nThe distance of cab1 from customer1 = sqrt((1-2)^2 + (3-3)^2) = 1\n\nThe distance of cab2 from customer1 = sqrt(2)\n\nThe distance of cab3 from customer1 = sqrt(5)\n\nSo output for customer1 is 1\n\nNow location of cab1 is (3,4)\n\nThe distance of cab1 from customer2 = sqrt((3-5)^2 + (4-3)^2) = sqrt(5)\n\nThe distance of cab2 from customer2 = sqrt(5)\n\nThe distance of cab3 from customer2 = sqrt(8)\n\nSo output for customer2 is 1\n\n Examples: \nInput: \n['1', '3 2', '1 3', '3 2', '3 5', '2 3 3 4', '5 3 4 1']\nOutput: \n ['1', '1']\n",
  "1481": "Problem: \nA binary string is called a self-destructing string if it can reduced to an empty string by performing the following operation some number of times (possibly zero): Choose a valid integer $i$ such that the $i$-th character of the current string is different from the $i+1$-th character, and remove these two characters from the string.\nYou are given a binary string $s$. Your task is to convert $s$ to a self-destructing string. To do that, you may perform the following operation any number of times (possibly zero): Choose an integer $i$ ($1 \\le i \\le |s|-1$) such that the $i$-th character of $s$ is different from the $i+1$-th character, and invert one of these characters (inverting a character means changing '0' to '1' or '1' to '0', e.g. the string \"01\" can be changed to \"00\").\nFind the smallest number of operations required to convert $s$ to a self-destructing string or determine that it is impossible.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $s$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the smallest required number of operations or $-1$ if it is impossible to convert $s$ to a self-destructing string.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le |s| \\le 10^6$\n- $s$ contains only characters '0' and '1'\n- the sum of $|s|$ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n3\n001101\n1101\n110\n\n-----Example Output-----\n0\n1\n-1\n\n-----Explanation-----\nExample case 1: We already have a self-destructing string because \"001101\" can be converted to \"0101\", to \"01\" and finally to an empty string.\nExample case 2: We can choose $i=3$ (since $s_3 \\neq s_4$) and then invert $s_4$ to obtain \"1100\", which is a self-destructing string.\nExample case 3: It can be shown that \"110\" cannot be converted to a self-destructing string.\n\n Examples: \nInput: \n['3', '001101', '1101', '110']\nOutput: \n ['0', '1', '-1']\n",
  "1482": "Problem: \nChef's company wants to make ATM PINs for its users, so that they could use the PINs for withdrawing their hard-earned money. One of these users is Reziba, who lives in an area where a lot of robberies take place when people try to withdraw their money. \nChef plans to include a safety feature in the PINs: if someone inputs the reverse of their own PIN in an ATM machine, the Crime Investigation Department (CID) are immediately informed and stop the robbery. However, even though this was implemented by Chef, some people could still continue to get robbed. The reason is that CID is only informed if the reverse of a PIN is different from that PIN (so that there wouldn't be false reports of robberies).\nYou know that a PIN consists of $N$ decimal digits. Find the probability that Reziba could get robbed. Specifically, it can be proven that this probability can be written as a fraction $P/Q$, where $P \\ge 0$ and $Q > 0$ are coprime integers; you should compute $P$ and $Q$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single integer $N$ denoting the length of each PIN. \n\n-----Output-----\nFor each test case, print a single line containing two space-separated integers \u2014 the numerator $P$ and denominator $Q$ of the probability.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^5$\n\n-----Subtasks-----\nSubtask #1 (10 points): $N \\le 18$\nSubtask #2 (20 points): $N \\le 36$\nSubtask #3 (70 points): original constraints\n\n-----Example Input-----\n1\n1\n\n-----Example Output-----\n1 1\n\n-----Explanation-----\nExample case 1: A PIN containing only one number would fail to inform the CID, since when it's input in reverse, the ATM detects the same PIN as the correct one. Therefore, Reziba can always get robbed \u2014 the probability is $1 = 1/1$.\n\n Examples: \nInput: \n['1', '1']\nOutput: \n ['1 1']\n",
  "1483": "Problem: \nAs we all know caterpillars love to eat leaves. Usually, a caterpillar sits on leaf, eats as much of it as it can (or wants), then stretches out to its full length to reach a new leaf with its front end, and finally \"hops\" to it by contracting its back end to that leaf.\nWe have with us a very long, straight branch of a tree with leaves distributed uniformly along its length, and a set of caterpillars sitting on the first leaf. (Well, our leaves are big enough to accommodate upto $20$ caterpillars!). As time progresses our caterpillars eat and hop repeatedly, thereby damaging many leaves. Not all caterpillars are of the same length, so different caterpillars may eat different sets of leaves. We would like to find out the number of leaves that will be undamaged at the end of this eating spree. We assume that adjacent leaves are a unit distance apart and the length of the caterpillars is also given in the same unit.\nFor example suppose our branch had $20$ leaves (placed $1$ unit apart) and $3$ caterpillars of length $3, 2$ and $5$ units respectively. Then, first caterpillar would first eat leaf $1$, then hop to leaf $4$ and eat it and then hop to leaf $7$ and eat it and so on. So the first caterpillar would end up eating the leaves at positions $1,4,7,10,13,16$ and $19$. The second caterpillar would eat the leaves at positions $1,3,5,7,9,11,13,15,17$ and $19$. The third caterpillar would eat the leaves at positions $1,6,11$ and $16$. Thus we would have undamaged leaves at positions $2,8,12,14,18$ and $20$. So the answer to this example is $6$.\n\n-----Input:-----\nThe first line of the input contains two integers $N$ and $K$, where $N$ is the number of leaves and $K$ is the number of caterpillars. Lines $2,3,...,K+1$ describe the lengths of the $K$ caterpillars. Line $i+1$ ($1 \\leq i \\leq K$) contains a single integer representing the length of the $i^{th}$ caterpillar.\n\n-----Output:-----\nA line containing a single integer, which is the number of leaves left on the branch after all the caterpillars have finished their eating spree.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 1000000000$.\n- $1 \\leq K \\leq 20$.\n- The length of the caterpillars lie between $1$ and $N$.\n- $50 \\%$ of test cases will also satisfy $1 \\leq N \\leq 10000000$ and $1 \\leq K \\leq 16$.\n\n-----Sample Input:-----\n20 3\n3\n2\n5\n\n-----Sample Output:-----\n6\n\n-----Hint:-----\nYou may use $64$-bit integers (long long in C/C++) to avoid errors while multiplying large integers. The maximum value you can store in a $32$-bit integer is $2^{31}-1$, which is approximately $2 \\cdot 10^9$. $64$-bit integers can store values greater than $10^{18}$.\n\n Examples: \nInput: \n['20 3', '3', '2', '5']\nOutput: \n ['6', 'Hint:', 'You may use  64 -bit integers ( long long  in C/C++) to avoid errors while multiplying large integers. The maximum value you can store in a  32 -bit integer is  2 31 \u2212 1 , which is approximately  2 \u22c5 10 9 .  64 -bit integers can store values greater than  10 18 .']\n",
  "1484": "Problem: \nYoung Sheldon is given the task to teach Chemistry to his brother Georgie. After teaching him how to find total atomic weight, Sheldon gives him some formulas which consist of $x$, $y$ and $z$ atoms as an assignment. \nYou already know that Georgie doesn't like Chemistry, so he want you to help him solve this assignment.\nLet the chemical formula be given by the string $S$. It consists of any combination of x, y and z with some value associated with it as well as parenthesis to encapsulate any combination. Moreover, the atomic weight of x, y and z are 2, 4 and 10 respectively.\nYou are supposed to find the total atomic weight of the element represented by the given formula.\nFor example, for the formula $(x_2y_2)_3z$, given string $S$ will be: $(x2y2)3z$. Hence, substituting values of x, y and z, total atomic weight will be \n$(2*2+4*2)*3 + 10 = 46$.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input $S$. \n\n-----Output:-----\nFor each testcase, output in a single line, the total atomic weight.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- Length of string $S \\leq 100$\n- String contains $x, y, z, 1, 2,..., 9$ and parenthesis\n\n-----Sample Input:-----\n2\n(xy)2\nx(x2y)3(z)2\n\n-----Sample Output:-----\n12\n46\n\n Examples: \nInput: \n['2', '(xy)2', 'x(x2y)3(z)2']\nOutput: \n ['12', '46']\n",
  "1485": "Problem: \nChef has a pepperoni pizza in the shape of a $N \\times N$ grid; both its rows and columns are numbered $1$ through $N$. Some cells of this grid have pepperoni on them, while some do not. Chef wants to cut the pizza vertically in half and give the two halves to two of his friends. Formally, one friend should get everything in the columns $1$ through $N/2$ and the other friend should get everything in the columns $N/2+1$ through $N$.\nBefore doing that, if Chef wants to, he may choose one row of the grid and reverse it, i.e. swap the contents of the cells in the $i$-th and $N+1-i$-th column in this row for each $i$ ($1 \\le i \\le N/2$).\nAfter the pizza is cut, let's denote the number of cells containing pepperonis in one half by $p_1$ and their number in the other half by $p_2$. Chef wants to minimise their absolute difference. What is the minimum value of $|p_1-p_2|$?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains a string with length $N$ describing the $i$-th row of the grid; this string contains only characters '1' (denoting a cell with pepperonis) and '0' (denoting a cell without pepperonis).\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the minimum absolute difference between the number of cells with pepperonis in the half-pizzas given to Chef's friends.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\le N \\le 1,000$\n- $N$ is even\n- the sum of $N \\cdot N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Example Input-----\n2\n6\n100000\n100000\n100000\n100000\n010010\n001100\n4\n0011\n1100\n1110\n0001\n\n-----Example Output-----\n2\n0\n\n-----Explanation-----\nExample case 1: Initially, $|p_1-p_2| = 4$, but if Chef reverses any one of the first four rows from \"100000\" to \"000001\", $|p_1-p_2|$ becomes $2$.\nExample case 2: Initially, $|p_1-p_2| = 0$. We cannot make that smaller by reversing any row.\n\n Examples: \nInput: \n['2', '6', '100000', '100000', '100000', '100000', '010010', '001100', '4', '0011', '1100', '1110', '0001']\nOutput: \n ['2', '0']\n",
  "1486": "Problem: \nYou are provided with the marks of entire class in Data structures exam out of 100. You need to calculate the number of students having backlog (passing marks is >=31) and the average of the class. But this average is not a normal average, for this average marks of students having backlog are not considered but they will be considered in number of students. Also print the index of topper\u2019s marks and print the difference of everyone\u2019s marks with respect to the topper. \nIn first line print the number of students having backlog and average of the class. In second line print indices of all the toppers(in case of more than 1 topper print index of all toppers in reverse order). Next N lines print the difference of everyone\u2019s marks with respect to topper(s).\nNote- if all students have backlog than average will be 0.\nINPUT\nThe first line of the input contains an integer T denoting the number of test cases.\nNext line contains N denoting the no of students in the class.\nThe line contains N space seprated integers A1,A2,A3\u2026.AN denoting the marks of each student in exam.\nOUTPUT\nFirst line contains the number of students having backlog and the special average of marks as described above. Average must have 2 decimal places.\nNext line contains the indices of all the toppers in given array in reverse order.\nNext N lines contain the difference of every student\u2019s marks with respect to toppers.\nConstraints\n1<= T <= 100\n1<= N <= 30\n0<= Ai<= 100\nExample\nInput\n1\n9\n56 42 94 25 74 99 27 52 83\nOutput\n2 55.55\n5 \n43\n57\n5\n74\n25\n0\n72\n47\n16\n\n Examples: \nInput: \n['1', '9', '56 42 94 25 74 99 27 52 83']\nOutput: \n ['2 55.56', '5', '43', '57', '5', '74', '25', '0', '72', '47', '16']\n",
  "1487": "Problem: \nChef has  $N$ boxes arranged in a line.Each box has some candies in it,say $C[i]$. Chef wants to distribute all the candies between of his friends: $A$ and $B$, in the following way:\n$A$ starts eating candies kept in the leftmost box(box at $1$st place) and $B$ starts eating candies kept in the rightmost box(box at $N$th place). $A$ eats  candies $X$ times faster than $B$ i.e. $A$ eats $X$ candies when $B$ eats only $1$. Candies in each box can be eaten by only the person who reaches that box first. If both reach a box at the same time, then the one who has eaten from more number of BOXES till now will eat the candies in that box. If both have eaten from the same number of boxes till now ,then $A$ will eat the candies in that box.\nFind the number of boxes finished by both $A$ and $B$.\nNOTE:- We assume that it does not take any time to switch from one box to another.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains three lines of input.\nThe first line of each test case contains $N$, the number of boxes.\n- The second line of each test case contains a sequence,$C_1$ ,$C_2$ ,$C_3$ . . . $C_N$ where $C_i$ denotes the number of candies in the i-th box.  \n- The third line of each test case contains an integer $X$ .\n\n-----Output:-----\nFor each testcase, print two space separated integers in a new line - the number of boxes eaten by $A$  and  $B$ respectively. \n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 200000$\n- $1 \\leq C_i \\leq 1000000$\n- $1 \\leq X \\leq 10$\n- Sum of $N$ over all test cases does not exceed $300000$\n\n-----Subtasks-----\nSubtask 1(24 points):\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 1000$\n- $1 \\leq C_i \\leq 1000$\n- $1 \\leq X \\leq 10$\nSubtask 2(51 points): original constraints\n\n-----Sample Input:-----\n1\n5\n2 8 8 2 9\n2\n\n-----Sample Output:-----\n4 1\n\n-----EXPLANATION:-----\n$A$ will start eating candies in the 1st box(leftmost box having 2 candies) . $B$ will start eating candies in the  5th box(rightmost box having 9 candies) .As $A's$ speed is 2 times as that of $B's$, $A$ will start eating candies in the  2nd box while $B$ would still be eating candies in the 5th box.$A$ will now start eating candies from the 3rd box while $B$ would still be eating candies in the 5th box.Now both $A$ and $B$ will finish candies in their respective boxes at the same time($A$ from the 3rd box and $B$ from 5th box). Since $A$ has eaten more number of boxes($A$ has eaten 3 boxes while $B$ has eaten 1 box) till now,so $A$ will be eating candies in the 4th box.\nHence $A$ has eaten 4 boxes and $B$ has eaten 1 box.\n\n Examples: \nInput: \n['1', '5', '2 8 8 2 9', '2']\nOutput: \n ['4 1']\n",
  "1488": "Problem: \nYou have a sequence $a$ with length $N$ created by removing some elements (possibly zero) from a permutation of numbers $(1, 2, \\dots, N)$. When an element is removed, the length of the sequence doesn't change, but there is an empty spot left where the removed element was. You also have an integer $K$.\nLet's call a permutation $p_1, p_2, \\dots, p_N$ good if:\n- it is possible replace empty spots in $a$ by numbers in such a way that we obtain the permutation $p$\n- the number of positions $i$ ($1 < i \\le N$) such that $p_i > p_{i-1}$ is equal to $K$\nYour task is to find the number of good permutations.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\dots, a_N$. Each element of this sequence is either $0$ (indicating an empty spot previously occupied by a removed element) or an integer between $1$ and $N$ inclusive.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of good permutations.\n\n-----Constraints-----\n- $1 \\le T \\le 300$\n- $0 \\le K < N \\le 8$\n- each integer between $1$ and $N$ inclusive appears in $a$ at most once\n\n-----Example Input-----\n1\n3 1\n2 0 0\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: The two possible good permutations are $(2,3,1)$ and $(2,1,3)$.\n\n Examples: \nInput: \n['1', '3 1', '2 0 0']\nOutput: \n ['2']\n",
  "1489": "Problem: \n$Harshad$ $Mehta$ is planning  a new scam with the stocks he is given a stock of  integer price S and a number K . $harshad$ has got the power to change the number $S$ at most $K$ times\nIn order to raise the price of stock and now cash it for his benefits\nFind the largest price at which $harshad$ can sell the stock in order to maximize his profit \n\n-----Input:-----\n- First line will contain $S$ and  $K$ , the price of the stock and the number K \n\n-----Output:-----\nPrint the largest profit  he can make in a single line.\n\n-----Constraints-----\n- S can take value upto 10^18\nNOTE: use 64 int number to fit range\n- K can take value from [0.. 9]\n\n-----Sample Input:-----\n4483 2\n\n-----Sample Output:-----\n9983\n\n-----EXPLANATION:-----\nFirst two digits of the number are changed to get the required number.\n\n Examples: \nInput: \n['4483 2']\nOutput: \n ['9983']\n",
  "1490": "Problem: \nRahul is a serial killer. Rahul has been betrayed by his lover in the past and now he want to eliminate entire Universe.He has already Eliminated majority of the population and now only a handful number of people are left. Like other Serial killers, he has an interesting pattern of killing people. \nHe either kill one individual at a time or if he find two individuals of different heights,he eliminates both of them simultaneously. Now Rahul wants to eliminate them as quickly as he can.\nSo given $N$ as the number of people left and an array containing height of those $N$ people,tell the minimum number of kills Rahul require to eliminate the entire universe.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each test case constitutes of Two lines. \n- First line contains $N$, representing the number of people left in the universe\n- The second line contains an array $a[i]$ of size $N$ containing heights of those $N$ people.\n\n-----Output:-----\nFor each testcase, you have to output a Single line Containing the minimum number of kills required by Rahul to eliminate the Universe.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50000$\n- $1 \\leq N \\leq 50000$\n- $100 \\leq a[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n10\n178 184 178 177 171 173 171 183 171 175\n\n-----Sample Output:-----\n5\n\n Examples: \nInput: \n['1', '10', '178 184 178 177 171 173 171 183 171 175']\nOutput: \n ['5']\n",
  "1491": "Problem: \nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n-----Explanation-----\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"\n\n Examples: \nInput: \n['1 2 4 2']\nOutput: \n ['Possible']\n",
  "1492": "Problem: \nDevu is a disastrous oracle: his predictions about various events of your life are horrifying. Instead of providing good luck, he \"blesses\" you with bad luck. The secret behind his wickedness is a hidden omen which is a string of length m. On your visit to him, you can ask a lot of questions about your future, each of which should be a string of length m. In total you asked him n such questions, denoted by strings s1, s2, ... , sn of length m each. Each of the question strings is composed of the characters 'a' and 'b' only.\n\nAmount of bad luck this visit will bring you is equal to the length of longest common subsequence (LCS) of all the question strings and the hidden omen string. Of course, as the omen string is hidden, you are wondering what could be the least value of bad luck you can get.\n\nCan you find out what could be the least bad luck you can get? Find it fast, before Devu tells you any bad omens.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFirst line of each test case contains a single integer n denoting number of strings.\nFor each of next n lines, the ith line contains the string si.\n\n-----Output-----\nFor each test case, output a single integer corresponding to the answer of the problem. \n\n\n-----Constraints-----\n- All the strings (including the hidden omen) contain the characters 'a' and 'b' only.\n\nSubtask #1: (40 points) \n\n- 1 \u2264 T, n, m \u2264 14\n\nSubtask #2: (60 points) \n\n- 1 \u2264 T, n, m \u2264 100\n\n-----Example-----\nInput:3\n2\nab\nba\n2\naa\nbb\n3\naabb\nabab\nbaab\n\nOutput:1\n0\n2\n\n-----Explanation-----\nIn the first example, the minimum value of LCS of all the strings is 1, the string by oracle can be one of these {aa, ab, ba, bb}. \n\nIn the second example, whatever string oracle has does not matter, LCS will always be zero.\n\n Examples: \nInput: \n['3', '2', 'ab', 'ba', '2', 'aa', 'bb', '3', 'aabb', 'abab', 'baab']\nOutput: \n ['1', '0', '2']\n",
  "1494": "Problem: \nRohit has n empty boxes lying on the ground in a line. The size of the boxes is given in the form of an array $a$. The size of the ith box is denoted by $a[i]$. Since Rohit has a tiny room, there is a shortage of space. Therefore, he has to reduce the number of boxes on the ground by putting a box into another box that is at least twice the size of the current box i.e if we have to put the ith box into the jth box then $( 2*a[i] ) <= a[j]$.\nEach box can contain a maximum of one box and the box which is kept in another box cannot\nhold any box itself.\nFind the minimum number of boxes that will remain on the ground after putting boxes into each other.\n\n-----Input:-----\n- The first line contains a single integer n.\n- The next n lines contain the integer a[i] - the size of the i-th box.\n\n-----Output:-----\nOutput a single integer denoting the minimum number of boxes remaining on the ground.\n\n-----Constraints-----\n- $1 \\leq n \\leq 5*10^5$\n- $1 \\leq a[i] \\leq 10^5$\n\n-----Subtasks-----\n- 30 points : $1 \\leq n \\leq 10^2$\n- 70 points : $1 \\leq n \\leq 5*10^5$\n\n-----Sample Input:-----\n5\n16\n1\n4\n8\n2\n\n-----Sample Output:-----\n3\n\n Examples: \nInput: \n['5', '16', '1', '4', '8', '2']\nOutput: \n ['3']\n",
  "1496": "Problem: \nChef has a nice complete binary tree in his garden. Complete means that each node has exactly two sons, so the tree is infinite. Yesterday he had enumerated the nodes of the tree in such a way: \n- Let's call the nodes' level a number of nodes that occur on the way to this node from the root, including this node. This way, only the root has the level equal to 1, while only its two sons has the level equal to 2.\n- Then, let's take all the nodes with the odd level and enumerate them with consecutive odd numbers, starting from the smallest levels and the leftmost nodes, going to the rightmost nodes and the highest levels.\n- Then, let's take all the nodes with the even level and enumerate them with consecutive even numbers, starting from the smallest levels and the leftmost nodes, going to the rightmost nodes and the highest levels.\n- For the better understanding there is an example: \n1\n/           \\\n2                   4\n/   \\                /       \\\n3       5           7        9\n/ \\      /  \\          /  \\       /  \\\n6  8 10 12      14 16   18 20 \n\nHere you can see the visualization of the process. For example, in odd levels, the root was enumerated first, then, there were enumerated roots' left sons' sons and roots' right sons' sons.\nYou are given the string of symbols, let's call it S. Each symbol is either l or r. Naturally, this sequence denotes some path from the root, where l means going to the left son and r means going to the right son.\nPlease, help Chef to determine the number of the last node in this path.\n\n-----Input-----\nThe first line contains single integer T number of test cases.\nEach of next T lines contain a string S consisting only of the symbols l and r.\n\n-----Output-----\nPer each line output the number of the last node in the path, described by S, modulo 109+7.\n\n-----Constraints-----\n- 1 \u2264 |T| \u2264 5\n- 1 \u2264 |S| \u2264 10^5\n- Remember that the tree is infinite, so each path described by appropriate S is a correct one.\n\n-----Example-----\nInput:\n4\nlrl\nrll\nr\nlllr\nOutput:\n10\n14\n4\n13\n\n-----Explanation-----\nSee the example in the statement for better understanding the samples.\n\n Examples: \nInput: \n['4', 'lrl', 'rll', 'r', 'lllr', '']\nOutput: \n ['10', '14', '4', '13']\n",
  "1497": "Problem: \nDivya's watch of worth Rs10 cr is abducted by N thieves(1,2....i...N). The fight over the watch leads to a final decision that it should belong to the thief who wins a simple game. The rules of the game state that every thief  registers a time in the format HH:MM:SS . Accordingly the average A of three clockwise angles  between the hours , minutes and seconds hands is calculated . Thus the ith thief  with the maximum A wins the game and gets to keep the watch.\n\nThe thieves are poor in mathematics and will need your help . Given the number of thieves and their registered time resolves the conflict and help them in choosing the winner \n\n-----Input-----\nFirst line of input contains T which denotes the number of test cases.\n\nThe first line of each test case consists of an integer which denotes the number of thieves thereby N line follow which give the time choosen by each thieve in the format HH:MM:SS.\n\n-----Output:-----\nOutput single integer i which denotes the ith thief.\n\n-----Constraints:-----\n\n1<=T<=100\n\n1<=N<=50\n\n01<=HH<=12\n\n00<=MM<=60\n\n00<=SS<=60\n\n-----Example:-----\nInput:\n2\n3\n12:28:26\n07:26:04\n11:23:17\n2\n07:43:25\n06:23:34\n\nOutput:\n3\n1\n\n Examples: \nInput: \n['2', '3', '12:28:26', '07:26:04', '11:23:17', '2', '07:43:25', '06:23:34']\nOutput: \n ['3', '1']\n",
  "1498": "Problem: \nAsh is on his way to becoming the Pokemon Master. His pokemon can perform the following moves:  \n- Tackle - Deal damage worth $X$ points  \n- Grow - Increase damage by $Y$ points i.e. $X$ = $X$ + $Y$ \nBut, it can only perform Grow first (0 or more times) and then tackle (0 or more) times after which it cannot perform Grow again.\n\nThat is, it cannot perform the Grow operation once it has performed the tackle operation.  \nA pokemon can be caught only if it\u2019s health is exactly 1. A wild pokemon has appeared and has health worth $H$ points. Find the minimum number of moves required to catch it or say that it is not possible.  \n\n-----Input:-----\n- \nThe first line of the input consists of a single integer $T$ denoting the number of test cases.\n- \nEach test case consists of 3 space-separated integers $H$, $X$ and $Y$.\n\n-----Output:-----\n- For each test case, print a single line containing one integer - the minimum number of moves required to catch the pokemon if it is possible to catch it else print -1.\n\n-----Constraints-----\n- \n1 <= $T$ <= 103\n- \n1 <=  $X$, $Y$ < $H$ <= 109\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- 1 <=  $X$, $Y$ < $H$ <= 1000\nSubtask #2 (70 points):\n- Original Constraints\n\n-----Sample Input:-----\n2\n\n101 10 10\n\n11 3 3  \n\n-----Sample Output:-----\n6\n\n-1  \n\n-----EXPLANATION:-----\n- \nExample Case 1:\n\nAsh can make use of Grow once. So $X$ = 10 + 10 = 20\n\nThen he can do Tackle 5 times to decrease $H$ to 1.\n\nOR\n\nAsh can make use of Grow 4 times. So $X$ = 10 + 4*10 = 50\n\nThen he can do Tackle 2 times to decrease $H$ to 1.\n\nHence, a total of 6 moves are required either way which is minimum.  \n- \nExample Case 2:\n\nNo matter how many times Ash uses Grow or Tackle, pokemon can never be caught.\n\n Examples: \nInput: \n['2', '101 10 10', '11 3 3']\nOutput: \n ['6', '-1']\n",
  "1499": "Problem: \nGiven $N *M$ matrix containing elements either $1$ or $0$ and string S of length $N+M-1$ containing characters $0$ or $1$. Your task is to make all the  paths from top left corner to the  bottom right corner of the matrix same as the  given string .You can perform two types of operations any time .Path means you can only allow it to take right or down. \nOperations :\n- Changing the matrix elements from $1$ to $0$ or vice versa  will cost P rupees per element.\n- Changing the character of string  from $1$ to $0$ or vice versa  will cost Q rupees per character.\nYou have to  minimize the cost, (possibly 0) .\n\n-----Input:-----\n- First line of input contains the total no. of test cases $T$. \n- For every test case, first line of input contains two spaced positive integers, $N$ and $M$.\n- Next $N$ lines contains $M$-spaced integers which can be only $0$ or $1$.\n- Next line of input contains a string $S$ of length $N+M-1$.\n- Last line of input contains two spaced integers, $P$ and $Q$.\n\n-----Output:-----\n- $You$ $have$ $to$ $print$ $the$ $minimum$ $cost .$\n\n-----Constraints-----\n- $1 \\leq T \\leq 20$\n- $1 \\leq N, M \\leq 1000$\n- $|S| = N+M-1$\n- $0 \\leq P, Q \\leq 1000$The input/output is quite large, please use fast reading and writing methods.\n\n-----Sample Input-----\n2\n3 3\n1 0 1\n0 1 1\n1 1 0\n10111\n10 5\n3 3 \n0 0 1\n0 1 1\n0 1 1\n00011\n2 9\n\n-----Sample Output-----\n5\n4\n\n-----Explanation-----\n- You can  change the last element of the matrix and also can change the last element of string but the minimum cost will produce by changing string element , therefore it will cost 5 rupees.\n\n Examples: \nInput: \n['2', '3 3', '1 0 1', '0 1 1', '1 1 0', '10111', '10 5', '3 3', '0 0 1', '0 1 1', '0 1 1', '00011', '2 9']\nOutput: \n ['5', '4']\n",
  "1500": "Problem: \n\tA valid parentheses sequence is a non-empty string where each character is either '(' or ')', which satisfies the following constraint:\n\nYou can find a way to repeat erasing adjacent pairs of parentheses '()' until it becomes empty.\n\n\tFor example, '(())' and '()((()()))' are valid parentheses sequences, but ')()(' and '(()' are not.\n\n\tMike has a valid parentheses sequence. He really likes everything about his sequence, except the fact that it is quite long. So Mike has recently decided that he will replace his parentheses sequence with a new one in the near future. But not every valid parentheses sequence will satisfy him. To help you understand his requirements we'll introduce the pseudocode of function F(S):\n\n\tFUNCTION F( S - a valid parentheses sequence )\n\tBEGIN\n\t\tbalance = 0\n\t\tmax_balance = 0\n\t\tFOR index FROM 1 TO LENGTH(S)\n\t\tBEGIN\n\t\t\tif S[index] == '(' then balance = balance + 1\n\t\t\tif S[index] == ')' then balance = balance - 1\n\t\t\tmax_balance = max( max_balance, balance )\n\t\tEND\n\t\tRETURN max_balance\n\tEND\n\n\tIn other words, F(S) is equal to the maximal balance over all prefixes of S.\n\n\tLet's denote A as Mike's current parentheses sequence, and B as a candidate for a new one. Mike is willing to replace A with B if F(A) is equal to F(B). He would also like to choose B with the minimal possible length amongst ones satisfying the previous condition. If there are several such strings with the minimal possible length, then Mike will choose the least one lexicographically, considering '(' to be less than ')'.\n\n\tHelp Mike!\n\n-----Input-----\n\n\tThe first line of the input contains one integer T denoting the number of testcases to process.\n\n\tThe only line of each testcase contains one string A denoting Mike's parentheses sequence. It is guaranteed that A only consists of the characters '(' and ')'. It is also guaranteed that A is a valid parentheses sequence.\n\n-----Output-----\n\n\tThe output should contain exactly T lines, one line per each testcase in the order of their appearance. The only line of each testcase should contain one string B denoting the valid parentheses sequence that should be chosen by Mike to replace A.\n\n-----Constraints-----\n1 \u2264 T \u2264 5;\n1 \u2264 |A| \u2264 100000(105).\n\n-----Example-----\nInput:\n1\n()((()()))\n\nOutput:\n((()))\n\n Examples: \nInput: \n['1', '()((()()))', '', '']\nOutput: \n ['((()))']\n",
  "1501": "Problem: \nGiven a Complete Binary Tree of \u2018n\u2019 depth, you can perform 4 types of mirror operation on the tree:-\n\nMirror on the right. The tree is mirrored to the right and rightmost node on every level is connected with the mirrored corresponding node.\n\nMirror on the left. The tree is mirrored to the left and leftmost node on every level is connected with the mirrored corresponding node.\n\nMirror on the top. The tree is mirrored to the top and topmost nodes are connected with corresponding nodes.\n\nMirror on the bottom. The tree is mirrored to the bottom and bottom most nodes are connected with the corresponding nodes.\n\nSee the image for details.   \nMirror Right:  \n\nMirror Bottom:   \n\nYou are given \u2018q\u2019 queries, each performing this type of operation or asking for the no of edges in the produced graph.\n\nQueries are of the form \u201c1 x\u201d or \u201c2\u201d where x is 1 for right, 2 for left, 3 for top or 4 for bottom.\n\n1 x:  Perform x operation on the result graph.\n\n2:     Print the no of edges in the graph. Since it can be very large, print it modulo 1000000007.   \n\n-----Input:-----\n- First line will contain $n$, the depth of the initial tree and $q$, the number of queries.    \n- Next $q$ lines contain queries of the form \"1 $x$\" or \"2\".\n\n-----Output:-----\nFor each query of type \"2\", output a single line containing the no of edges in the graph modulo 1000000007.\n\n-----Constraints-----\n- $1 \\leq n \\leq 1000$\n- $1 \\leq q \\leq 10^5$\n- $1 \\leq x \\leq 4$\n\n-----Sample Input:-----\n2 3\n1 1\n1 4\n2\n\n-----Sample Output:-----\n38\n\n-----EXPLANATION:-----\nInitial no of edges = 6\n\nAfter the operation 1 1, no of edges = 15\n\nAfter the operation 1 4, no of edges = 38\n\nAt operation 2, we print the no of edges that is 38.\n\n Examples: \nInput: \n['2 3', '1 1', '1 4', '2']\nOutput: \n ['38']\n",
  "1502": "Problem: \nYour are given a string $S$ containing only lowercase letter and a array of character $arr$. Find whether the given string only contains characters from the given character array. \nPrint $1$ if the string contains characters from the given array only else print $0$.\nNote: string contains characters in lower case only.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains- \na string $S$ of lowercase letter\na integer $n$ denoting length of character array $arr$\nnext line contains $n$ space separated characters.\n\n-----Output:-----\nFor each testcase, Print $1$ if the string contains characters from the given array only else print $0$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq n \\leq 10^5$\n\n-----Sample Input:-----\n3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n\n-----Sample Output:-----\n1\n1\n0\n\n Examples: \nInput: \n['3', 'abcd', '4', 'a b c d', 'aabbbcccdddd', '4', 'a b c d', 'acd', '3', 'a b d']\nOutput: \n ['1', '1', '0']\n",
  "1503": "Problem: \nSantosh has a farm at Byteland. He has a very big family to look after.  His life takes a sudden turn and he runs into a financial crisis. After giving all the money he has in his hand, he decides to sell his plots. The speciality of his land is that it is rectangular in nature. Santosh comes to know that he will get more money if he sells square shaped plots. So keeping this in mind, he decides to divide his land into minimum possible number of square plots, such that each plot has the same area, and  the plots divide the land perfectly. He does this in order to get the maximum profit out of this.   \nSo your task is to find the minimum number of square plots with the same area, that can be formed out of the rectangular land, such that they divide it perfectly.\n\n-----Input-----\n- The first line of the input contains $T$, the number of test cases. Then $T$ lines follow.\n- The first and only line of each test case contains two space-separated integers, $N$ and $M$, the length and the breadth of the land, respectively.\n\n-----Output-----\nFor each test case, print the minimum number of square plots with equal area, such that they divide the farm land perfectly, in a new line.\n\n-----Constraints-----\n$1 \\le T \\le 20$\n$1 \\le M \\le 10000$\n$1 \\le N \\le 10000$ \n\n-----Sample Input:-----\n2\n10 15\n4 6\n\n-----SampleOutput:-----\n6\n6\n\n Examples: \nInput: \n['2', '10 15', '4 6']\nOutput: \n ['6', '6']\n",
  "1505": "Problem: \nZonal Computing Olympiad 2012, 26 Nov 2011\n\nA sequence of opening and closing brackets is well-bracketed if we can pair up each opening bracket with a matching closing bracket in the usual sense.  For instance, the sequences (), (()) and ()(()) are well-bracketed, while (, ()), (()(), and )(  are not well-bracketed.\n\nThe nesting depth of a well-bracketed sequence tells us the maximum number of levels of inner matched brackets enclosed within outer matched brackets.  For instance, the nesting depth of () and ()()() is 1, the nesting depth of (()) and ()(()) is 2, the nesting depth of ((())) is 3, and so on.  \n\nGiven a well-bracketed sequence, we are interested in computing the following: \n-  The nesting depth, and the first position where it occurs\u2013this will be the position of the first opening bracket at this nesting depth, where the positions are numbered starting with 1.\n-  The maximum number of symbols between any pair of matched  brackets, including both the outer brackets, and the first position where this occurs\u2013that is, the position of the first opening bracket of this segment\n\nFor instance, the nesting depth of ()(())()(()())(()()) is 2 and the first position where this occurs is 4.  The opening bracket at position 10 is also at nesting depth 2 but we have to report the first position where this occurs, which is 4.\n\nIn this sequence, the maximum number of symbols between a pair of matched bracket is 6, starting at position 9. There is another such sequence of length 6 starting at position 15, but this is not the first such position.\n\n-----Input format-----\nThe input consists of two lines. The first line is a single integer N, the length of the bracket sequence. Positions in the sequence are numbered 1,2,\u2026,N. The second line is a sequence of N space-separated integers that encode the bracket expression as follows: 1 denotes an opening bracket ( and 2 denotes a closing bracket ).  Nothing other than 1 or 2 appears in the second line of input and the corresponding expression is guaranteed to be well-bracketed.\n\n-----Output format-----\nYour program should print 4 space-separated integers in a line, denoting the four quantities asked for in the following order: nesting depth, first position that achieves the nesting depth, length of the maximum sequence between matching brackets and the first position where such a maximum length sequence occurs.  \n\n-----Testdata-----\n\nYou may assume that 2 \u2264 N \u2264 105.  In 30% of the test cases, 2 \u2264 N \u2264 103.\n\n- Subtask 1 (30 marks)\n- Subtask 2 (70 marks)\n\n-----Sample Input-----\n20\n1 2 1 1 2 2 1 2 1 1 2 1 2 2 1 1 2 1 2 2\n\n-----Sample Output-----\n2 4 6 9\n\n Examples: \nInput: \n['20', '1 2 1 1 2 2 1 2 1 1 2 1 2 2 1 1 2 1 2 2']\nOutput: \n ['2 4 6 9']\n",
  "1508": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n0\n01\n10\n012\n101\n210\n0123\n1012\n2101\n3210\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['0', '01', '10', '012', '101', '210', '0123', '1012', '2101', '3210']\n",
  "1510": "Problem: \nYou are playing a game where you have been sent in a town to collect 10 types of coin and their symbol are defined with $A, B, C, D, E, F, G, H , I, J$. In that town every enemy have a coin. By killing one you will get a coin from that enemy. Each enemy have only a unique coin.\nThe challange of the game is You have to collect all the coin and only then you will get the victory. You are a brave gamer so you took this hard challange and successfully finished it. After finishing, you are thinking of the game. You know the order off collecting coin. Now you are thinking how many enemy did you have killed?\nCan you solve that out?\n\n-----Input:-----\nFirst line of the input is an integer $T$.Next T line consists of a string which denotes the order of your collecting coins. The string consists of Uppercase latin latter only and from A to J.\n\n-----Output:-----\nPrint T line, in each line an integer with the number of enemy you have killed in the operation.\n\n-----Constraints-----\n- $1 \\leq T \\leq 5000$\n\n-----Sample Input:-----\n1\nABCDEFGHIJ\n\n-----Sample Output:-----\n10\n\n Examples: \nInput: \n['1', 'ABCDEFGHIJ']\nOutput: \n ['10']\n",
  "1511": "Problem: \nChef loves to play with iron (Fe) and magnets (Ma). He took a row of $N$ cells (numbered $1$ through $N$) and placed some objects in some of these cells. You are given a string $S$ with length $N$ describing them; for each valid $i$, the $i$-th character of $S$ is one of the following:\n- 'I' if the $i$-th cell contains a piece of iron\n- 'M' if the $i$-th cell contains a magnet\n- '_' if the $i$-th cell is empty\n- ':' if the $i$-th cell contains a conducting sheet\n- 'X' if the $i$-th cell is blocked\nIf there is a magnet in a cell $i$ and iron in a cell $j$, the attraction power between these cells is $P_{i,j} = K+1 - |j-i| - S_{i,j}$, where $S_{i,j}$ is the number of cells containing sheets between cells $i$ and $j$. This magnet can only attract this iron if $P_{i, j} > 0$ and there are no blocked cells between the cells $i$ and $j$.\nChef wants to choose some magnets (possibly none) and to each of these magnets, assign a piece of iron which this magnet should attract. Each piece of iron may only be attracted by at most one magnet and only if the attraction power between them is positive and there are no blocked cells between them. Find the maximum number of magnets Chef can choose.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains a single string $S$ with length $N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum number of magnets that can attract iron.\n\n-----Constraints-----\n- $1 \\le T \\le 2,000$\n- $1 \\le N \\le 10^5$\n- $0 \\le K \\le 10^5$\n- $S$ contains only characters 'I', 'M', '_', ':' and 'X'\n- the sum of $N$ over all test cases does not exceed $5 \\cdot 10^6$\n\n-----Subtasks-----\nSubtask #1 (30 points): there are no sheets, i.e. $S$ does not contain the character ':'\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n4 5\nI::M\n9 10\nMIM_XII:M\n\n-----Example Output-----\n1\n2\n\n-----Explanation-----\nExample case 1: The attraction power between the only magnet and the only piece of iron is $5+1-3-2 = 1$. Note that it decreases with distance and the number of sheets.\nExample case 2:\nThe magnets in cells $1$ and $3$ can attract the piece of iron in cell $2$, since the attraction power is $10$ in both cases. They cannot attract iron in cells $6$ or $7$ because there is a wall between them.\nThe magnet in cell $9$ can attract the pieces of iron in cells $7$ and $6$; the attraction power is $8$ and $7$ respectively.\n\n Examples: \nInput: \n['2', '4 5', 'I::M', '9 10', 'MIM_XII:M']\nOutput: \n ['1', '2']\n",
  "1512": "Problem: \nTuzik and Vanya are playing the following game.\nThey have an N \u00d7 M board and a chip to indicate the current game position. The chip can be placed on any one cell of the game board, each of which is uniquely identified by an ordered pair of positive integers (r, c), where 1 \u2264 r \u2264 N is the row number and 1 \u2264 c \u2264 M is the column number.\nInitially, the chip is placed at the cell identified as (1, 1). For his move, a player can move it either 1, 2 or 3 cells up, or 1 or 2 cells to the right. The player who can not move the chip loses. In other words, a player suffers defeat if the chip is placed in the cell (N, M) at the start of his turn.\nTuzik starts the game. You have to determine who will win the game if both players play optimally.\n\n-----Input-----\nThe first line contains an integer T denoting the number of tests. Each of the following T lines contain two integers N and M.\n\n-----Output-----\nFor each test output \"Tuzik\" or \"Vanya\" on a separate line, indicating who will win the game.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 106\n\n-----Example-----\nInput:\n2\n4 4\n2 2\n\nOutput:\nTuzik\nVanya\n\n\n-----Explanation-----Test case 1: On his first turn Tuzik moves chip 3 cells up to the cell (4, 1). On his turn Vanya can move chip only right to the cell (4, 2) or to the cell (4, 3) and after that Tuzik moves it to (4, 4) and finishes the game.\n\nTest case 2: On his first Turn Tuzik can move chip to the cell (2, 1) or (1, 2), but on his next turn Vanya moves it to (2, 2) and wins the game.\n\n Examples: \nInput: \n['2', '4 4', '2 2']\nOutput: \n ['Tuzik', 'Vanya']\n",
  "1514": "Problem: \nRaj is a math pro and number theory expert. One day, he met his age-old friend Chef. Chef claimed to be better at number theory than Raj, so Raj gave him some fuzzy problems to solve. In one of those problems, he gave Chef a 3$3$-tuple of non-negative integers (a0,b0,c0)$(a_0, b_0, c_0)$ and told Chef to convert it to another tuple (x,y,z)$(x, y, z)$.\nChef may perform the following operations any number of times (including zero) on his current tuple (a,b,c)$(a, b, c)$, in any order:\n- Choose one element of this tuple, i.e. a$a$, b$b$ or c$c$. Either add 1$1$ to that element or subtract 1$1$ from it. The cost of this operation is 1$1$.\n- Merge: Change the tuple to (a\u22121,b\u22121,c+1)$(a-1, b-1, c+1)$, (a\u22121,b+1,c\u22121)$(a-1, b+1, c-1)$ or (a+1,b\u22121,c\u22121)$(a+1, b-1, c-1)$, i.e. add 1$1$ to one element and subtract 1$1$ from the other two. The cost of this operation is 0$0$.\n- Split: Change the tuple to (a\u22121,b+1,c+1)$(a-1, b+1, c+1)$, (a+1,b\u22121,c+1)$(a+1, b-1, c+1)$ or (a+1,b+1,c\u22121)$(a+1, b+1, c-1)$, i.e. subtract 1$1$ from one element and add 1$1$ to the other two. The cost of this operation is also 0$0$.\nAfter each operation, all elements of Chef's tuple must be non-negative. It is not allowed to perform an operation that would make one or more elements of this tuple negative.\nCan you help Chef find the minimum cost of converting the tuple (a0,b0,c0)$(a_0, b_0, c_0)$ to the tuple (x,y,z)$(x, y, z)$? It can be easily proved that it is always possible to convert any tuple of non-negative integers to any other.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first and only line of each test case contains six space-separated integers a0$a_0$, b0$b_0$, c0$c_0$, x$x$, y$y$ and z$z$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the minimum cost.\n\n-----Constraints-----\n- 1\u2264T\u2264105$1 \\le T \\le 10^5$\n- 0\u2264a0,b0,c0,x,y,z\u22641018$0 \\le a_0, b_0, c_0, x, y, z \\le 10^{18}$\n\n-----Subtasks-----\nSubtask #1 (20 points): 0\u2264a0,b0,c0,x,y,z\u2264100$0 \\le a_0, b_0, c_0, x, y, z \\le 100$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\n1 1 1 2 2 2\n1 2 3 2 4 2\n\n-----Example Output-----\n0\n1\n\n-----Explanation-----\nExample case 1: The tuple (1,1,1)$(1, 1, 1)$ can be converted to (2,2,2)$(2, 2, 2)$ using only three Split operations, with cost 0$0$: (1,1,1)\u2192(2,0,2)\u2192(1,1,3)\u2192(2,2,2)$(1, 1, 1) \\rightarrow (2, 0, 2) \\rightarrow (1, 1, 3) \\rightarrow (2, 2, 2)$.\nExample case 2: We can use one addition operation and one Split operation: (1,2,3)\u2192(1,3,3)\u2192(2,4,2)$(1, 2, 3) \\rightarrow (1, 3, 3) \\rightarrow (2, 4, 2)$.\n\n Examples: \nInput: \n['2', '1 1 1 2 2 2', '1 2 3 2 4 2']\nOutput: \n ['0', '1']\n",
  "1515": "Problem: \nChefina  is  always interested to play with string. But due to exam pressure she has no time to solve a string problem. She wants your help. Can you help her to solve that problem?\nYou are given a string. You have to find out the $Wonder$ $Sum$ of the string. $Wonder$ $Sum$ of a string is defined as the sum of the value of each character of the string. \nThe value of each character means:\n- If the string is started with \"a\" , then the value of each character of the string is like \"a\"=100, \"b\"=101, \"c\"=\"102\" \u2026\u2026\u2026\"z\"=125.\n- If the string is started with \"z\" , then the value of each character of the string is like \"a\"=2600, \"b\"=2601, \"c\"=\"2602\" \u2026\u2026\u2026\"z\"=2625.\nSince even the $Wonder$ $Sum$ can be large, output $Wonder$ $Sum$ modulo  ($10^9 + 7$).\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, a string $S$ with lower case alphabet \nonly.\n\n-----Output:-----\nFor each testcase, output in a single line integer i.e.  $Wonder$ $Sum$ modulo  ($10^9 + 7$).\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq |S| \\leq 10^5$\n\n-----Sample Input:-----\n$2$$cab$\n$sdef$\n\n-----Sample Output:-----\n$903$\n$7630$\n\n-----EXPLANATION:-----\ni) For the first test case, since the string is started with \"$c$\", so output is ($302$+$300$+$301$)=$903$\nii)For the second test case, since the string is started with \"$s$\", so output is ($1918$+$1903$+$1904$+$1905$)=$7630$\n\n Examples: \nInput: \n['2', 'cab', 'sdef']\nOutput: \n ['903', '7630']\n",
  "1516": "Problem: \nChef wants to make a feast. In order to do that, he needs a lot of different ingredients. Each ingredient has a certain tastiness; the tastiness of each ingredient may be any positive integer. Initially, for each tastiness between $K$ and $K+N-1$ (inclusive), Chef has an infinite supply of ingredients with this tastiness.\nThe ingredients have a special property: any two of them can be mixed to create a new ingredient. If the original ingredients had tastiness $x$ and $y$ (possibly $x = y$), the new ingredient has tastiness $x+y$. The ingredients created this way may be used to mix other ingredients as well. Chef is free to mix ingredients in any way he chooses any number of times.\nLet's call a tastiness $v$ ($v > 0$) unreachable if there is no way to obtain an ingredient with tastiness $v$; otherwise, tastiness $v$ is reachable. Chef wants to make ingredients with all reachable values of tastiness and he would like to know the number of unreachable values. Help him solve this problem. Since the answer may be large, compute it modulo $1,000,000,007$ ($10^9+7$).\nNote that there is an infinite number of reachable values of tastiness, but it can be proven that the number of unreachable values is always finite for $N \\ge 2$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of unreachable values of tastiness, modulo $1,000,000,007$.\n\n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $2 \\le N \\le 10^{18}$\n- $1 \\le K \\le 10^{18}$\n\n-----Subtasks-----\nSubtask #1 (20 points): $N = 2$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n2\n2 1\n3 3\n\n-----Example Output-----\n0\n2\n\n-----Explanation-----\nExample case 1: It is possible to obtain ingredients with all values of tastiness.\nExample case 2: Ingredients with tastiness $1$ and $2$ cannot be made.\n\n Examples: \nInput: \n['2', '2 1', '3 3']\nOutput: \n ['0', '2']\n",
  "1517": "Problem: \nConsider a number X on which K Mag-Inc operations are to be performed. In a Mag-Inc operation, the number X undergoes an increment of A/B times of X where A and B are two integers.\n\nThere is a numerator and a denominator array of size K which contain the ith values of A and B. After K Mag-Inc operations, the number X turns to M.\n\nNow your job is to find what percentage of M is to be decremented from M if it has to be converted back to X. Let this percentage be denoted by Z.\n\nPrint the integral part of Z.\n\n-----Input:-----\n\nFirst line contains an integer T denoting the number of test cases.\n\nFirst line of every test case contains two space separated integers X and K.\n\nThe second and third line of every test case will contain K space separated integers \n\ndenoting the Numerator and Denominator array.\n\n-----Output:-----\n\nFor each test case, print the required result in a single line.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 K, A, B \u2264 40000\n1\u2264X\u226410^100\n\n-----Example:-----Input:\n2\n100 1\n1 \n4\n100 2\n1 1\n2 3Output:\n20\n50\n\n-----Explanation:-----\n\nCase 2: 100 undergoes an increment of (1/2)*100. Therefore M = 100 + 50.\n\nNow M = 150.\n\nNow again, \n\nM undergoes an increment of (1/3)*150. Therefore, M = 150 + 50. \n\nNow as we want to revert back M = 200 to X i.e. 100, we need to decrement it by a value \n\nof 100 and we know that 100 is 50% of 200.\n\nHence, we print 50.\n\n Examples: \nInput: \n['2', '100 1', '1', '4', '100 2', '1 1', '2 3']\nOutput: \n ['20', '50']\n",
  "1518": "Problem: \nThe chef was busy in solving algebra, he found some interesting results, that there are many numbers which can be formed by sum of some numbers which are prime. Chef wrote those numbers in dairy. Cheffina came and saw what the chef was doing. Cheffina immediately closed chef's dairy and for testing chef's memory, she starts asking numbers and chef needs to answer wheater given number N can be formed by the sum of K prime numbers if it yes then print 1 else print 0. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N, K$.\n\n-----Output:-----\nFor each test case, output in a single line answer as 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $2 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n-----Sample Input:-----\n2\n12 2\n11 2\n\n-----Sample Output:-----\n1\n0\n\n Examples: \nInput: \n['2', '12 2', '11 2']\nOutput: \n ['1', '0']\n",
  "1519": "Problem: \nIn order to win over and get noticed by his favorite streamer Daenerys, Jon decides to donate a significant amount of money . Every donation made to Daenerys is of $at$ $least$ $1$ $beastcoin$ and is displayed on Daenerys's stream alongside any message written and is visible to every viewer.\nAfter spotting that Daenerys had set out a target for the streaming day at minimum $X$   beastcoins, all her viewers would only donate amounts less than $X$ beastcoins. Jon decided to better all of them by straight out donating more than or equal to $X$ beastcoins. Further, he decides to write a message along with his special donation to leave her in awe. His message would be : \"Crossing my donation with any other donation will only increase the value of my donation\". By Crossing, he means to take the $XOR$ . \nBut even for all his intellectual brilliance, money doesn't grow on trees for Jon. After all he is an underpaid employee in his fancy big name MNC. Unlike Daenerys's daily cash cow who makes videos of how she donated carelessly to other people, Jon has a budget and in this case too, he is looking for the minimum donation he needs to make.\nCan you tell Jon the minimum amount he needs to donate to Daenerys so that he is able to credibly put out the above comment alongside the donation in order to HOPEFULLY win her over.\n\n-----Input Format-----\n- First line contain an interger $T$, which denotes number of testcases. Next $T$ lines contain single interger $X$.    \n\n-----Output Format-----\n- For every testcase print one integer, i.e. minimum donation Jon needs to make.\n\n-----Constriants-----\n- $ 1 \\leq T \\leq 100000 $ \n- $ 2 \\leq X \\leq 10^{18} $ \n\n-----Sample Input-----\n2\n\n3\n\n7 \n\n-----Sample Output-----\n4\n\n8\n\n Examples: \nInput: \n['2', '3', '7']\nOutput: \n ['4', '8']\n",
  "1520": "Problem: \nGiven an array of n$n$ integers : A1,A2,...,An$ A_1, A_2,... , A_n$, find the longest size subsequence which satisfies the following property: The xor of adjacent integers in the subsequence must be non-decreasing.\n\n-----Input:-----\n- First line contains an integer n$n$, denoting the length of the array. \n- Second line will contain n$n$ space separated integers, denoting the elements of the array.\n\n-----Output:-----\nOutput a single integer denoting the longest size of subsequence with the given property.\n\n-----Constraints-----\n- 1\u2264n\u2264103$1 \\leq n \\leq 10^3$\n- 0\u2264Ai\u22641018$0 \\leq A_i \\leq 10^{18}$\n\n-----Sample Input:-----\n8\n1 200 3 0 400 4 1 7\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nThe subsequence of maximum length is {1, 3, 0, 4, 1, 7} with Xor of adjacent indexes as {2,3,4,5,6} (non-decreasing)\n\n Examples: \nInput: \n['8', '1 200 3 0 400 4 1 7']\nOutput: \n ['6']\n",
  "1521": "Problem: \nThe Siruseri Singing Championship is going to start, and Lavanya wants to figure out the outcome before the tournament even begins! Looking at past tournaments, she realizes that the judges care only about the pitches that the singers can sing in, and so she devises a method through which she can accurately predict the outcome of a match between any two singers. \nShe represents various pitches as integers and has assigned a lower limit and an upper limit for each singer, which corresponds to their vocal range. For any singer, the lower limit will always be less than the upper limit. If a singer has lower limit $L$ and upper limit $U$ ($L < U$), it means that this particular singer can sing in all the pitches between $L$ and $U$, that is they can sing in the pitches {$L, L+1, L+2, \\ldots, U$}. \nThe lower bounds and upper bounds of all the singers are distinct. When two singers $S_i$ and $S_j$ with bounds ($L_i$, $U_i)$ and ($L_j$, $U_j$) compete against each other, $S_i$ wins if they can sing in every pitch that $S_j$ can sing in, and some more pitches. Similarly, $S_j$ wins if they can sing in every pitch that $S_i$ can sing in, and some more pitches. If neither of those two conditions are met, the match ends up as a draw. \n$N$ singers are competing in the tournament. Each singer competes in $N$-1 matches, one match against each of the other singers. The winner of a match scores 2 points, and the loser gets no points. But in case of a draw, both the singers get 1 point each.\nYou are given the lower and upper bounds of all the $N$ singers. You need to output the total scores of each of the $N$ singers at the end of the tournament.\n\n-----Input-----\n- The first line contains a single integer, $T$, which is the number of testcases. The description of each testcase follows.\n- The first line of every testcase contains a single integer, $N$, which is the number of singers.\n- $N$ lines follow, the i-th of which contains two integers: $L_i$ and $U_i$, which correspond to the lower bound and upper bound of the i-th singer.\n\n-----Output-----\nFor each testcase output a single line containing $N$ integers, the i-th of which should be score of the i-th singer at the end of the tournament. \n\n-----Constraints-----\n- $1 \\le T \\le 5$\n- $2 \\le N \\le 10^5$\n- $1 \\le L_i < U_i \\le 10^9$\n- All the $2*N$ integers (lower bounds and upper bounds) are distinct.\n\n-----Subtasks-----\nSubtask #1 (15 points): $1 \\le N \\le 10^3$\nSubtask #2 (25 points):\n- $1 \\le N \\le 10^5$\n- It is guaranteed that no match ends in a draw.\nSubtask #3 (60 points): Original constraints.\n\n-----Sample Input-----\n2\n3\n10 20\n13 18\n15 19\n3\n10 22\n13 21\n15 20\n\n-----Sample Output-----\n4 1 1\n4 2 0\n\n-----Explanation-----\nTestcase 1: There are three singers, with the lower bounds and upper bounds as (10, 20), (13, 18) and (15, 19).\nWhen the first singer and second singer compete against each other in a match, we see that the second singer can sing in the pitches {13, 14, 15, 16, 17, 18}. Whereas the first singer can sing in the pitches {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}. So, we see that the first singer can sing everything that the second singer can, and also some other pitches. Hence the first singer wins this match, and gets 2 points. The second singer gets no points from this match.\nWhen the first singer and third singer compete against each other in a match, we see that the third singer can sing in the pitches {15, 16, 17, 18, 19}. So again, we see that the first singer can sing everything that the third singer can. Hence the first singer wins this match, and gets 2 points. The third singer gets no points from this match.\nWhen the second singer and third singer compete against each other in a match, we see that the second singer can sing in the pitches {13, 14, 15, 16, 17, 18}, whereas the third singer can sing in the pitches {15, 16, 17, 18, 19}. In particular, the second singer can sing in the pitch 14, which the third singer cannot sing in. And the third singer can sing in the pitch 19, which the second singer cannot sing in. So neither of the two conditions are met, and hence this match ends in a draw. Both the second and third singer get 1 point each.\nThus at the end of the tournament, the total score of first player is 2 + 2 = 4.\nTotal score of the second player is 0 + 1 = 1.\nTotal score of the third player is 0 + 1 = 1.\nHence the output is 4 1 1\nTestcase 2: There are three singers, with the lower bounds and upper bounds as (10, 22), (13, 21) and (15, 20).\nWe see that the first singer wins against both second and third singers. And the second singer wins against the third singer. So the final total scores are (2 + 2), (0 + 2), (0 + 0), which is 4 2 0. Note that this would be a valid testcase in Subtask 2, because no match ends in a draw.\n\n Examples: \nInput: \n['2', '3', '10 20', '13 18', '15 19', '3', '10 22', '13 21', '15 20']\nOutput: \n ['4 1 1', '4 2 0']\n",
  "1523": "Problem: \nZonal Computing Olympiad 2014, 30 Nov 2013\n\nIn IPL 2025, the amount that each player is paid varies from match to match.  The match fee depends on the quality of opposition, the venue etc.\n\nThe match fees for each match in the new season have been announced in advance.  Each team has to enforce a mandatory rotation policy so that no player ever plays three matches in a row during the season.\n\nNikhil is the captain and chooses the team for each match. He wants to allocate a playing schedule for himself to maximize his earnings through match fees during the season.  \n\n-----Input format-----\nLine 1: A single integer N, the number of games in the IPL season.\nLine 2: N non-negative integers, where the integer in\nposition i represents the fee for match i.\n\n-----Output format-----\nThe output consists of a single non-negative integer, the\nmaximum amount of money that Nikhil can earn during this IPL\nseason. \n\n-----Sample Input 1-----\n5 \n10 3 5 7 3 \n\n-----Sample Output 1-----\n23\n\n(Explanation: 10+3+7+3)\n\n-----Sample Input 2-----\n8\n3 2 3 2 3 5 1 3\n\n-----Sample Output 2-----\n17\n\n(Explanation: 3+3+3+5+3)\n\n-----Test data-----\nThere is only one subtask worth 100 marks.  In all inputs:\n\n\u2022 1 \u2264 N \u2264 2\u00d7105\n\u2022 The fee for each match is between 0 and 104, inclusive.\n\n-----Live evaluation data-----\nThere are 12 test inputs on the server during the exam.\n\n Examples: \nInput: \n['5', '10 3 5 7 3']\nOutput: \n ['23', '(']\n",
  "1524": "Problem: \nZombies zombies everywhere!! \nIn a parallel world of zombies, there are N zombies. There are infinite number of unused cars, each of same model only differentiated by the their colors. The cars are of K colors.\n\nA zombie parent can give birth to any number of zombie-children (possibly zero), i.e. each zombie will have its parent except the head zombie which was born in the winters by combination of ice and fire.\n\nNow, zombies are having great difficulties to commute to their offices without cars, so they decided to use the cars available. Every zombie will need only one car. Head zombie called a meeting regarding this, in which he will allow each zombie to select a car for him.\n\nOut of all the cars, the head zombie chose one of cars for him. Now, he called his children to choose the cars for them. After that they called their children and so on till each of the zombie had a car. Head zombie knew that it won't be a good idea to allow children to have cars of same color as that of parent, as they might mistakenly use that. So, he enforced this rule during the selection of cars.\n\nProfessor James Moriarty is a criminal mastermind and has trapped Watson again in the zombie world. Sherlock somehow manages to go there and met the head zombie. Head zombie told Sherlock that they will let Watson free if and only if Sherlock manages to tell him the maximum number of ways in which the cars can be selected by N Zombies among all possible hierarchies. A hierarchy represents parent-child relationships among the N zombies. Since the answer may be large, output the answer modulo 109 + 7. Sherlock can not compute big numbers, so he confides you to solve this for him.\n\n-----Input-----\nThe first line consists of a single integer T, the number of test-cases.\n\nEach test case consists of two space-separated integers N and K, denoting number of zombies and the possible number of colors of the cars respectively.\n\n-----Output-----\nFor each test-case, output a single line denoting the answer of the problem.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 10^9\n- 1 \u2264 K \u2264 10^9\n\n-----Subtasks-----\nSubtask #1 : (10 points)\n- 1 \u2264 T \u2264 20\n- 1 \u2264 N, K \u2264 10\n\nSubtask 2 : (20 points) \n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N, K \u2264 10000\n\nSubtask 3 : (70 points) \n\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, K \u2264 10^9\n\n-----Example-----\nInput\n2\n2 2\n3 3\nOutput:\n2\n12\n\n-----Explanation\nIn the first sample test case, there are 2 zombies. Let us name them Z1 and Z2. Let one hierarchy be one in which Z1 is parent of Z2. There are 2 colors, suppose red and blue. If Z1 takes red, then Z2 should take a blue. If Z1 takes blue, then Z2 should take red. \nNote that one other possible hierarchy could be one in which Z2 is a parent of Z1. In that hierarchy also, number of possible ways of assigning cars is 2.\nSo there maximum number of possible ways is 2.\n\nIn the second example, we have 3 Zombies say Z1, Z2, Z3 and cars of 3 colors, suppose red, blue and green.\nA hierarchy to maximize the number of possibilities is Z1 is the parent of Z2, Z2 is the parent of Z3.\nZombie Z1 can choose one of red, blue or green cars. Z2 can choose one of the remaining two colors (as its car's color can not be same as its parent car.). Z3 can also choose his car in two colors, (one of them could be color same as Z1, and other being the color which is not same as cars of both Z1 and Z2.). This way, there can be 12 different ways of selecting the cars.\n\n-----\nIn the first sample test case, there are 2 zombies. Let us name them Z1 and Z2. Let one hierarchy be one in which Z1 is parent of Z2. There are 2 colors, suppose red and blue. If Z1 takes red, then Z2 should take a blue. If Z1 takes blue, then Z2 should take red. \n\nNote that one other possible hierarchy could be one in which Z2 is a parent of Z1. In that hierarchy also, number of possible ways of assigning cars is 2.\n\nSo there maximum number of possible ways is 2.\n\nIn the second example, we have 3 Zombies say Z1, Z2, Z3 and cars of 3 colors, suppose red, blue and green.\n\nA hierarchy to maximize the number of possibilities is Z1 is the parent of Z2, Z2 is the parent of Z3.\n\nZombie Z1 can choose one of red, blue or green cars. Z2 can choose one of the remaining two colors (as its car's color can not be same as its parent car.). Z3 can also choose his car in two colors, (one of them could be color same as Z1, and other being the color which is not same as cars of both Z1 and Z2.). This way, there can be 12 different ways of selecting the cars.\n\n Examples: \nInput: \n['2', '2 2', '3 3']\nOutput: \n ['2', '12']\n",
  "1527": "Problem: \nToday is Chef's birthday. His mom decided to surprise him with a truly fantastic gift: his favourite binary string B. But, unfortunately, all the stocks of binary string B have been sold out, and only a binary string A (A \u2260 B) is available in the market.\nShe purchases the string A and tries to convert it to string B by applying any of following three operations zero or more times.\nAND Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n-  result = Ai & Aj \n-  Ai = result & Ai \n-  Aj = result & Aj \n\nOR Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n-  result = Ai | Aj \n-  Ai = result | Ai \n-  Aj = result | Aj \n\nXOR Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n-  result = Ai ^ Aj \n-  Ai = result ^ Ai \n-  Aj = result ^ Aj \n\nChef's mom is eagerly waiting to surprise him with his favourite gift and therefore, she wants to convert string A to string B as fast as possible. Can you please help her by telling her the minimum number of operations she will require? If it is impossible to do so, then let Chef's mom know about it.\n\n-----Input-----\nFirst line of input contains a single integer T denoting the number of test cases. T test cases follow.\nFirst line of each test case, will contain binary string A.\nSecond line of each test case, will contain binary string B.\n\n-----Output-----\nFor each test case, Print \"Lucky Chef\" (without quotes) in first line and minimum number of operations required to convert string A to sting B in second line if conversion is possible. Print \"Unlucky Chef\" (without quotes) in a new line otherwise.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n- 1 \u2264 |A| \u2264 106\n- 1 \u2264 |B| \u2264 106\n- A != B\n- |A| = |B|\n- sum of |A| over all test cases does not exceed 106\n- sum of |B| over all test cases does not exceed 106\n\n-----Subtasks-----\n-  Subtask #1 (40 points) : Sum of |A| & |B| over all test cases does not exceed 103\n-  Subtask #2 (60 points) : Sum of |A| & |B| over all test cases does not exceed 106\n\n-----Example-----\nInput\n2\n101\n010\n1111\n1010\nOutput\nLucky Chef\n2\nUnlucky Chef\n\n-----Explanation-----\nExample case 1.\n- Applying XOR operation with indices i = 1 and j = 2. Resulting string will be 011.\n- Then, Applying AND operation with indices i = 1 and j = 3. Resulting string will be 010.\n\nExample case 2.\n- It is impossible to convert string A to string B.\n\n Examples: \nInput: \n['2', '101', '010', '1111', '1010']\nOutput: \n ['Lucky Chef', '2', 'Unlucky Chef']\n",
  "1528": "Problem: \nYou are Dastan, the great Prince of Persia!\nAfter searching long for the mysterious 'Sands of Time', you have finally arrived at the gates of the city that hosts the ancient temple of the gods. However, the gate is locked and it can only be opened with a secret code, which you need to obtain by solving the following puzzle:\nThere is a table in front of you, with $N$ coins placed in a row and numbered $1$ through $N$ from left to right. For each coin, you know whether it is initially showing heads or tails. You have to perform exactly $K$ operations. In one operation, you should remove the rightmost coin present on the table, and if this coin was showing heads right before it was removed, then you should also flip all the remaining coins. (If a coin was showing heads, then after it is flipped, it is showing tails, and vice versa.)\nThe code needed to enter the temple is the number of coins which, after these $K$ operations are performed, have not been removed and are showing heads. Can you find this number? The fate of Persia lies in your hands\u2026\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated characters. For each valid $i$, the $i$-th of these characters is 'H' if the $i$-th coin is initially showing heads or 'T' if it is showing tails.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the number of coins that are showing heads after $K$ operations.\n\n-----Constraints-----\n- $1 \\le T \\le 200$\n- $1 \\le K < N \\le 100$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n5 3\nH T T H T\n7 4\nH H T T T H H\n6 1\nT H T H T T\n\n-----Example Output-----\n1\n2\n2\n\n Examples: \nInput: \n['3', '5 3', 'H T T H T', '7 4', 'H H T T T H H', '6 1', 'T H T H T T']\nOutput: \n ['1', '2', '2']\n",
  "1529": "Problem: \nDuring Quarantine Time Chef is at home and he was quite confused about what to cook so, he went to his son and asked about what would he prefer to have? He replied, cakes.\nNow, chef cook $N$ number of cake and number of layers for every cake is different. After cakes are baked, Chef arranged them in a particular order and then generates a number by putting number of layers of cakes as digit in sequence (e.g., if chef arranges cakes with layers in sequence $2$, $3$ and $5$ then generated number is $235$).\nChef has to make his son powerful in mathematics, so he called his son and ask him to arrange the cakes in all the possible ways and every time when different sequence is generated he has to note down the number. At the end he has to find sum of all the generated numbers. So, help him to complete this task.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- The first line of each test case contains a single integer $N$ denoting number of cakes.\n- The second line contains $N$ space-separated integers $L1$ $L2$ \u2026 $LN$ layers of the cake.\n\n-----Output:-----\nFor each test case, print a single line containing sum of all the possible numbers which is generated by arranging cake in different sequence.\n\n-----Constraints :-----\n- $1 \\leq T  \\leq 2*10^5$\n- $1 \\leq N, L1, L2, L3,\u2026, LN \\leq 9$\n\n-----Sample Input:-----\n1\n3\n2 3 5\n\n-----Sample Output:-----\n2220\n\n-----Explanation:-----\nSum of all possibilities :\n$235 + 532 + 253 + 352 + 523 + 325 = 2220 $\n\n Examples: \nInput: \n['1', '3', '2 3 5']\nOutput: \n ['2220']\n",
  "1530": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output:-----\n1\n1\n32\n1\n32\n654\n1\n32\n654\n10987\n1\n32\n654\n10987\n1514131211\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '5']\nOutput: \n ['1', '1', '32', '1', '32', '654', '1', '32', '654', '10987', '1', '32', '654', '10987', '1514131211']\n",
  "1531": "Problem: \nBobby has decided to hunt some Parrots. There are n horizontal branch of trees aligned parallel to each other. Branches are numbered 1 to n from top to bottom. On each branch there are some parrots sitting next to each other. Supposed there are a[i]$a[i]$ parrots sitting on the i\u2212th$ i-th$ branch.  \nSometimes Bobby shots one of the parrot and the parrot dies (suppose that this parrots sat at the i\u2212th$i-th$ branch). Consequently all the parrots on the i\u2212th$i-th$ branch to the left of the dead parrot get scared and jump up on the branch number i\u2009\u2212\u20091$i\u2009-\u20091$, if there exists no upper branch they fly away. Also all the parrots to the right of the dead parrot jump down on branch number i\u2009+\u20091$i\u2009+\u20091$, if there exists no such branch they fly away.  \nBobby has shot m parrots. You're given the initial number of parrots on each branch, tell him how many parrots are sitting on each branch after the shots.  \n\n-----Input:-----\nThe first line of the input contains an integer N$N$. The next line contains a list of space-separated integers a1,\u2009a2,\u2009\u2026,\u2009an.\nThe third line contains an integer M$M$. Each of the next M$M$ lines contains two integers x[i]$x[i]$ and y[i]$y[i]$. The integers mean that for the i-th time Bobby shoot the y[i]-th (from left) parrot on the x[i]-th branch. It's guaranteed there will be at least y[i] parrot on the x[i]-th branch at that moment.   \n\n-----Output:-----\nOn the i\u2212th$i-th$ line of the output print the number of parrots on the i\u2212th$i-th$ branch.\n\n-----Constraints-----\n- 1\u2264N\u2264100$1 \\leq N \\leq 100$\n- 0\u2264a[i]\u2264100$0 \\leq a[i] \\leq 100$\n- 0\u2264M\u2264100$0 \\leq M \\leq 100$\n- 1\u2264x[i]\u2264n$1 \\leq x[i] \\leq n$, 1\u2264y[i]$1 \\leq y[i] $\n\n-----Sample Input:-----\n5\n\n10 10 10 10 10\n\n5\n\n2 5\n\n3 13\n\n2 12\n\n1 13\n\n4 6   \n3\n\n2 4 1\n\n1\n\n2 2   \n\n-----Sample Output:-----\n0\n\n12\n\n5\n\n0\n\n16   \n3\n\n0\n\n3\n\n Examples: \nInput: \n['5', '10 10 10 10 10', '5', '2 5', '3 13', '2 12', '1 13', '4 6', '3', '2 4 1', '1', '2 2']\nOutput: \n ['0', '12', '5', '0', '16', '3', '0', '3']\n",
  "1532": "Problem: \nAs you know America\u2019s Presidential Elections are about to take place and the most popular leader of the Republican party Donald Trump is famous for throwing allegations against anyone he meets.\n\nHe goes to a rally and meets n people which he wants to offend. For each person i he can choose an integer between 1 to max[i].\n\nHe wants to decide in how many ways he can offend all these persons (N) given the condition that all numbers chosen by him for each person are distinct.\nSo he needs your help to find out the number of ways in which he can do that. If no solution is possible print 0\n\n-----Input-----\nThe first line of the input contains an integer T (1<=T<=100) denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case contains a single integer N denoting the number of people Trump wants to offend. The second line contains N space-separated integers maxnumber[0], maxnumber[1], ..., maxnumber[n-1] denoting the maxnumber that trump can choose for each person. \n\n-----Output-----\nFor each test case, output a single line containing the number of ways Trump can assign numbers to the people, modulo 1,000,000,007. If it's impossible to assign distinct integers to the people, print 0\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 50\n- 1 \u2264 Maxnumber[i] \u2264 3000\n\n-----Example-----\nInput:\n3\n1\n4\n2\n10 5\n4\n2 3 1 3\n\nOutput:\n4\n45\n0\n\n\n-----Explanation-----\nIn case 1, He can choose any number from 1 to 4\n\nIn case 2,Out of the total 50 combination he can not take (1,1) ,(2,2) , (3,3) ,(4,4) or (5,5).\n\n Examples: \nInput: \n['3', '1', '4', '2', '10 5', '4', '2 3 1 3']\nOutput: \n ['4', '45', '0']\n",
  "1533": "Problem: \nYou are given a weighted graph with $N$ nodes and $M$ edges. Some of the nodes are marked as special nodes. Your task is to find the shortest pairwise distance between any two different special nodes.\n\n-----Input-----\n- The first line of the input contains three space-separated integers $N$, $M$ and $K$ denoting the number of nodes, the number of edges, and the number of special nodes. \n- The next line contains $K$ space-separated distinct integers $A_{1}$, $A_{2}$, $\\ldots$, $A_{K}$, denoting the special nodes.\n- The next $M$ lines each contain three space-separated integers - $X$, $Y$, $Z$, denoting an edge connecting the nodes $X$ and $Y$, with weight $Z$.\n\n-----Output-----\nOutput the shortest pairwise distance between any two different special nodes.\n\n-----Constraints-----\n- The given graph is connected.\n- The given graph doesn't contain self loops and multiple edges.\n- $1 \\leq A_{i} \\leq N$\n- $1 \\leq Z_{j} \\leq 10^{4}$\n- $1 \\leq X_{j}, Y_{j} \\leq N$\n\n-----Subtasks-----\nSubtask #1 (20 points): \n- $2 \\leq N \\leq 300$\n- $N-1 \\leq M \\leq \\frac{N \\cdot (N-1)}{2}$\n- $2 \\leq K \\leq N$\nSubtask #2 (25 points):\n- $2 \\leq N \\leq 10^5$\n- $N-1 \\leq M \\leq 10^5$\n- $2 \\leq K \\leq 10$\nSubtask #3 (55 points):\n- $2 \\leq N \\leq 10^5$\n- $N-1 \\leq M \\leq 3 \\cdot 10^5$\n- $2 \\leq K \\leq 10^4$\n\n-----Example Input-----\n5 5 3\n1 3 5\n1 2 3\n2 3 4\n3 4 1\n4 5 8\n1 5 19\n\n-----Example Output-----\n7\n\n-----Explanation-----\nNodes $1$, $3$, and $5$ are special nodes. Shortest distance between nodes $1$ and $3$ is $7$, and that between nodes $3$ and $5$ is $9$. Shortest distance between nodes $1$ and $5$ is $16$. Minimum of these distances is $7$. Hence answer is $7$.\n\n Examples: \nInput: \n['5 5 3', '1 3 5', '1 2 3', '2 3 4', '3 4 1', '4 5 8', '1 5 19']\nOutput: \n ['7']\n",
  "1536": "Problem: \nIstiak is learning about arithmetic progressions. Today, he wrote an arithmetic sequence on a piece of paper. Istiak was very happy that he managed to write an arithmetic sequence and went out for lunch.\nIstiak's friend Rafsan likes to irritate him by playing silly pranks on him. This time, he could have chosen one element of Istiak's sequence and changed it. When Istiak came back, he was devastated to see his sequence ruined \u2014 it became a sequence $a_1, a_2, \\ldots, a_N$ (possibly identical to the original sequence, if Rafsan did not change anything, in which case Istiak is just overreacting). Help him recover the original sequence.\nFormally, you have to find an arithmetic sequence $b_1, b_2, \\ldots, b_N$ which differs from $a$ in at most one position. $b$ is said to be an arithmetic sequence if there is a real number $d$ such that $b_i - b_{i-1} = d$ for each $i$ ($2 \\le i \\le N$). If there are multiple valid solutions, you may find any one.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing $N$ space-separated integers $b_1, b_2, \\ldots, b_N$. It is guaranteed that a valid solution exists.\n\n-----Constraints-----\n- $4 \\le N \\le 10^5$\n- $|a_i| \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $5 \\cdot 10^5$\n\n-----Example Input-----\n3\n4\n1 3 10 7\n5\n-10 -5 0 5 10\n4\n2 2 2 10\n\n-----Example Output-----\n1 3 5 7\n-10 -5 0 5 10\n2 2 2 2\n\n-----Explanation-----\nExample case 1: Rafsan changed the third element from $5$ to $10$.\nExample case 2: No elements were changed.\nExample case 3: Rafsan changed the fourth element from $2$ to $10$.\n\n Examples: \nInput: \n['3', '4', '1 3 10 7', '5', '-10 -5 0 5 10', '4', '2 2 2 10']\nOutput: \n ['1 3 5 7', '-10 -5 0 5 10', '2 2 2 2']\n",
  "1537": "Problem: \nPrime numbers are arranged in a ordered list U$U$, in increasing order. Let S$S$ be a sublist of U$U$ with a unique property that for every element A$A$ belonging to list S$S$, if i$i$ denotes the index of A$A$ in list U$U$, than i$i$ also belongs to list U$U$.\nGiven N$N$, find sum of first N$N$ elements of list S$S$, assuming 1-based indexing.\nAs the sum can be very large, print the sum modulo 109+7$10^{9}+7$.\n\n-----Input:-----\n-The first line of the input contains a single integer T$T$ denoting the number of test cases.\n-Only line of each test case has an integer N$N$ .\n\n-----Output:-----\nFor each test case, print a single integer denoting the sum of first N$N$ elements of set S$S$ modulo 109+7$10^{9}+7$.\n\n-----Constraints-----\n- 1\u2264T\u226410000$1 \\leq T \\leq 10000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n\n-----Subtasks-----\n- \n20 points : \n- \n1\u2264T\u226410000$1 \\leq T \\leq 10000$\n- \n1\u2264N\u226410$1 \\leq N \\leq 10$\n- \n20 points :\n- \n1\u2264T\u2264100$1 \\leq T \\leq 100$\n- \n1\u2264N\u2264100$1 \\leq N \\leq 100$\n- \n60 points : Original Constraints\n\n-----Sample Input:-----\n2\n\n1\n2\n\n-----Sample Output:-----\n3\n8\n\n-----EXPLANATION:-----\nExample case 1: \nFirst few elements of set S$S$ are  {3,5,11\u2026}  , so sum is 3.\nExample case 2: \nSum is 3+5=8.\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['3', '8']\n",
  "1538": "Problem: \nTwo integers A and B are the inputs. Write a program to find GCD and LCM of A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\n Examples: \nInput: \n['3', '120 140', '10213 312', '10 30']\nOutput: \n ['20 840', '1 3186456', '10 30']\n",
  "1539": "Problem: \nSoma is a fashionable girl. She absolutely loves shiny stones that she can put on as jewellery accessories. She has been collecting stones since her childhood - now she has become really good with identifying which ones are fake and which ones are not.  Her King requested for her help in mining precious stones, so she has told him which all stones are jewels and which are not. Given her description, your task is  to count the number of jewel stones. \n\nMore formally, you're given a string J composed of latin characters where each character is a jewel. You're also given a string S composed of latin characters where each character is a mined stone. You have to find out how many characters of S are in J as well. \n\n-----Input-----\n\nFirst line contains an integer T denoting the number of test cases. Then follow T test cases. Each test case consists of two lines, each of which contains a string composed of English lower case and upper characters. First of these is the jewel string J and the second one is stone string S. \nYou can assume that  1 <= T <= 100, 1 <= |J|, |S| <= 100\n\n\n-----Output-----\nOutput for each test case, a single integer, the number of jewels mined. \n\n-----Example-----\nInput:\n4\nabc\nabcdef\naA\nabAZ\naaa\na\nwhat\nnone\n\nOutput:\n3\n2\n1\n0\n\n Examples: \nInput: \n['4', 'abc', 'abcdef', 'aA', 'abAZ', 'aaa', 'a', 'what', 'none']\nOutput: \n ['3', '2', '1', '0']\n",
  "1540": "Problem: \nThere are total N friends went to Chef's Pizza shop. There they bought a pizza. Chef divided the pizza into K equal slices. Now you have to check whether these K pizza slices can be distributed equally among the friends. Also given that every person should get at least one slice. If the above conditions are possible then print \"YES\" otherwise print \"NO\".\n\n-----Input:-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a integers N.\nThe second line of each test case contains K.\n\n-----Output:-----\nFor each test case, print a single line containing \"YES\" if the given conditions are true else \"NO\" if the given conditions are false.\n\n-----Constraints-----\n1<=T<=10\n1<=N<=10^6\n1<=K<=10^6\n\n-----Sample Input:-----\n2\n10\n20\n12\n5\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\nExplanation case 1: since there are 10 friends and 20 pizza slice, so each can get 2 slices, so \"YES\".\nExplanation case 2: Since there are 12 friends and only 5 pizza slice, so there is no way pizza slices can be distributed equally and each friend gets at least one pizza slice, so \"NO\".\n\n Examples: \nInput: \n['2', '10', '20', '12', '5']\nOutput: \n ['YES', 'NO']\n",
  "1542": "Problem: \nEvery character in the string \u201cIITMANDI\u201d is given a certain number of points. You are given a scrabble board with only one row. The input contains the positions of score modifiers such as: Double Letter, Triple Letter, Double Word and Triple Word. You need to find the best position to place the string \u201cIITMANDI\u201d such that your score is maximized. \nDouble Letter - Doubles the number of points you get for the letter placed on the double letter.\nTriple Letter - Triples the number of points you get for the letter placed on the triple letter.\nDouble Word - Doubles the number of points you get for the word. Applied after applying above modifiers.\nTriple Word - Triples the number of points you get for the word. Applied after applying the above modifiers.\nThe word has to be read from left to right. You can\u2019t place it in the reverse direction.\n\nThe letters have to be placed continuously on the board.\n\nIf there is no modifier or a double word or triple word modifier before a tile, it's score is added to the total score. The double word and triple modifiers are applied at the end.\n\n-----Input Format-----\n- First line containes a single integer $T$ - the number of test cases.\n- First line of each test case contains a single integer $N$ - the size of the board.    \n- Second line of each test case contains a string of size $N$ representing the board according to the following convention:\n\n'.' - No modifier\n\n'd' - Double letter\n\n't' - Triple letter\n\n'D' - Double word\n\n'T' - Triple word     \n- Third line of each test case contains 8 integers corresponding to the points associated with each letter of the string \"IITMANDI\". Note that the 3 'I's in IITMANDI cannot be interchanged freely. The score of the first 'I' will be equal to the first integer, score of the second 'I' will be equal to the second integer and the score of the last 'I' will be equal to the last integer.\n\n-----Output Format-----\nFor each test case, output a single integer in a new line, the maximum possible score. \n\n-----Constraints-----\n$ 1 \\leq T \\leq 1000 $\n$ 8 \\leq N \\leq 100 $\n$ 0 \\leq $ Points for each character $ \\leq 10^5 $ \n\n-----Sample Input-----\n2\n\n10\n\n..d.t.D..d\n\n10 11 12 9 8 10 11 15\n\n22\n\ndtDtTD..ddT.TtTdDT..TD\n\n12297 5077 28888 17998 12125 27400 31219 21536\n\n-----Sample Output-----\n270\n\n35629632\n\n Examples: \nInput: \n['2', '10', '..d.t.D..d', '10 11 12 9 8 10 11 15', '22', 'dtDtTD..ddT.TtTdDT..TD', '12297 5077 28888 17998 12125 27400 31219 21536']\nOutput: \n ['270', '35629632']\n",
  "1543": "Problem: \nLet X be the set of all integers between 0 and n-1. Suppose we have a collection S1, S2, ..., Sm of subsets of X. Say an atom A is a subset of X such that for each Si we have either A is a subset of Si or A and Si do not have any common elements.\n\nYour task is to find a collection A1, ..., Ak of atoms such that every item in X is in some Ai and no two Ai, Aj with i \u2260 j share a common item. Surely such a collection exists as we could create a single set {x} for each x in X. A more interesting question is to minimize k, the number of atoms.\n\n-----Input-----\n\nThe first line contains a single positive integer t \u2264 30 indicating the number of test cases. Each test case begins with two integers n,m where n is the size of X and m is the number of sets Si. Then m lines follow where the i'th such line begins with an integer vi between 1 and n (inclusive) indicating the size of Si. Following this are vi distinct integers between 0 and n-1 that describe the contents of Si.\n\nYou are guaranteed that 1 \u2264 n \u2264 100 and 1 \u2264 m \u2264 \n30. Furthermore, each number between 0 and n-1 will appear in at least one set Si.\n\n-----Output-----\n\nFor each test case you are to output a single integer indicating the minimum number of atoms that X can be partitioned into to satisfy the constraints.\n\n-----Example-----\nInput:\n2\n5 2\n3 0 1 2\n3 2 3 4\n4 3\n2 0 1\n2 1 2\n2 2 3\n\nOutput:\n3\n4\n\n Examples: \nInput: \n['2', '5 2', '3 0 1 2', '3 2 3 4', '4 3', '2 0 1', '2 1 2', '2 2 3']\nOutput: \n ['3', '4']\n",
  "1544": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n5\n1\n2\n3\n4\n5\n\n-----Sample Output:-----\n*\n*\n**\n*\n**\n***\n*\n**\n* *\n****\n*\n**\n* *\n*  *\n*****\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['5', '1', '2', '3', '4', '5']\nOutput: \n ['*', '*', '**', '*', '**', '***', '*', '**', '* *', '****', '*', '**', '* *', '*  *', '*****']\n",
  "1545": "Problem: \nThe Quark Codejam's number QC(n, m) represents the number of ways to partition a set of n things into m nonempty subsets. For example, there are seven ways to split a four-element set into two parts:\n\n{1, 2, 3} \u222a {4}, {1, 2, 4} \u222a {3}, {1, 3, 4} \u222a {2}, {2, 3, 4} \u222a {1},\n\n{1, 2} \u222a {3, 4}, {1, 3} \u222a {2, 4}, {1, 4} \u222a {2, 3}.\n\nWe can compute QC(n, m) using the recurrence,\n\nQC(n, m) = mQC(n \u2212 1, m) + QC(n \u2212 1, m \u2212 1), for integers 1 < m < n.\n\nbut your task is a somewhat different: given integers n and m, compute the parity of QC(n, m), i.e. QC(n, m) mod 2.\n\nExample : \n\nQC(4, 2) mod 2 = 1. \nWrite a program that reads two positive integers n and m, computes QC(n, m) mod 2, and writes the\n\nresult.\n\n-----Input-----\nThe input begins with a single positive integer on a line by itself indicating the number of the cases. This line is followed by the input cases.\n\nThe input consists two integers n and m separated by a space, with 1 \u2264 m \u2264 n \u2264 1000000000.\n\n-----Output-----\nFor each test case, print the output.\n\nThe output should be the integer S(n, m) mod 2.\nSample Input\n1\n\n4 2\nSample Output\n1\n\n Examples: \nInput: \n['1', '4 2']\nOutput: \n ['1']\n",
  "1546": "Problem: \nChef loves triangles. But the chef is poor at maths. Given three random lengths Chef wants to find if the three sides form a right-angled triangle or not. Can you help Chef in this endeavour?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\n Examples: \nInput: \n['2', '3 4 5', '1 3 4']\nOutput: \n ['YES', 'NO']\n",
  "1547": "Problem: \nIncreasing COVID cases have created panic amongst the people of Chefland, so the government is starting to push for production of a vaccine. It has to report to the media about the exact date when vaccines will be available.\nThere are two companies which are producing vaccines for COVID. Company A starts producing vaccines on day $D_1$ and it can produce $V_1$ vaccines per day. Company B starts producing vaccines on day $D_2$ and it can produce $V_2$ vaccines per day. Currently, we are on day $1$.\nWe need a total of $P$ vaccines. How many days are required to produce enough vaccines? Formally, find the smallest integer $d$ such that we have enough vaccines at the end of the day $d$.\n\n-----Input-----\n- The first and only line of the input contains five space-separated integers $D_1$, $V_1$, $D_2$, $V_2$ and $P$.\n\n-----Output-----\nPrint a single line containing one integer \u2015 the smallest required number of days.\n\n-----Constraints-----\n- $1 \\le D_1, V_1, D_2, V_2 \\le 100$\n- $1 \\le P \\le 1,000$\n\n-----Subtasks-----\nSubtask #1 (30 points): $D_1 = D_2$\nSubtask #2 (70 points): original constraints\n\n-----Example Input 1-----\n1 2 1 3 14\n\n-----Example Output 1-----\n3\n\n-----Explanation-----\nSince $D_1 = D_2 = 1$, we can produce $V_1 + V_2 = 5$ vaccines per day. In $3$ days, we produce $15$ vaccines, which satisfies our requirement of $14$ vaccines.\n\n-----Example Input 2-----\n5 4 2 10 100\n\n-----Example Output 2-----\n9\n\n-----Explanation-----\nThere are $0$ vaccines produced on the first day, $10$ vaccines produced on each of days $2$, $3$ and $4$, and $14$ vaccines produced on the fifth and each subsequent day. In $9$ days, it makes a total of $0 + 10 \\cdot 3 + 14 \\cdot 5 = 100$ vaccines.\n\n Examples: \nInput: \n['1 2 1 3 14']\nOutput: \n ['3']\n",
  "1548": "Problem: \n\u201cJesse, you asked me if I was in the meth business, or the money business\u2026 Neither. I\u2019m in the empire business.\u201d\nWalter\u2019s sold his stack in Gray Matter Technologies, a company which he deserved half a credit, for peanuts. Now this company is worth a billion dollar company. Walter wants to get it's shares to have his Empire Business back and he founds an opportunity.  \nThere are $N$ persons having shares $A_1, A_2, A_3, \u2026 A_N$ in this company. Walter can buy these shares with their minimum Sold Values. \nSold Values of a person's share $ i $ $(1 \\leq i \\leq N) $ with another person's share $ j $ $ (1 \\leq j \\leq N) $ is equal to $ A_j+|i-j| $. So, a person's share can have $ N $ possible sold values and Walter has to find minimum sold value among them for each person.\nSince Walter has to run his meth business also he asks you to find minimum sold value for each person.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the testcases follow. \n- The First line of each test case contains a integer $N$.\n- The Second line of each test case contains $N$ space integers namely $A_1,A_2,\u2026A_N$.\n\n-----Output:-----\nFor each test case, output in single line $N$ space integers denoting minimum sold value for each person.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 2*10^6 $\n- $1 \\leq A_i \\leq 10^9 $\nSum of $N$ over all test cases will not exceed $2*10^6$.\n\n-----Sample Input:-----\n2\n5\n6 5 5 5 2\n5\n1 2 3 4 5\n\n-----Sample Output:-----\n6 5 4 3 2\n1 2 3 4 5\n\n-----Explanation-----\nFor first case:\n- Sold value for index $1$:  $6,6,7,8,6$\n- Sold value for index $2$:  $7,5,6,7,5$\n- Sold value for index $3$:  $8,6,5,6,4$\n- Sold value for index $4$:  $9,7,6,5,3$\n- Sold value for index $5$:  $10,8,7,6,2$\nMinimum sold value for each index will be $6,5,4,3,2$.\n\n Examples: \nInput: \n['2', '5', '6 5 5 5 2', '5', '1 2 3 4 5']\nOutput: \n ['6 5 4 3 2', '1 2 3 4 5']\n",
  "1549": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one integer $K$. \n\n-----Output:-----\nFor each testcase, output as pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n12\n012\n12\n2\n\n4\n34\n234\n1234\n01234\n1234\n234\n34\n4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['2', '2', '4']\nOutput: \n ['2', '12', '012', '12', '2', '4', '34', '234', '1234', '01234', '1234', '234', '34', '4']\n",
  "1551": "Problem: \n\"I don't have any fancy quotes.\" - vijju123\nChef was reading some quotes by great people. Now, he is interested in classifying all the fancy quotes he knows. He thinks that all fancy quotes which contain the word \"not\" are Real Fancy; quotes that do not contain it are regularly fancy.\nYou are given some quotes. For each quote, you need to tell Chef if it is Real Fancy or just regularly fancy.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains a single string $S$ denoting a quote.\n\n-----Output-----\nFor each test case, print a single line containing the string \"Real Fancy\" or \"regularly fancy\" (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $1 \\le |S| \\le 100$\n- each character of $S$ is either a lowercase English letter or a space\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n2\ni do not have any fancy quotes\nwhen nothing goes right go left\n\n-----Example Output-----\nReal Fancy\nregularly fancy\n\n-----Explanation-----\nExample case 1: \"i do not have any fancy quotes\"\nExample case 2: The word \"not\" does not appear in the given quote.\n\n Examples: \nInput: \n['2', 'i do not have any fancy quotes', 'when nothing goes right go left']\nOutput: \n ['Real Fancy', 'regularly fancy']\n",
  "1552": "Problem: \nChef has two piles of stones with him, one has n1 stones and the other has n2 stones. Fired up by boredom, he invented a game with the two piles.\n\nBefore the start of the game Chef chooses an integer m.\n\nIn the j-th move: \n\n-  He chooses a number xj such that 1 \u2264 xj \u2264 m, and removes xj stones from both the piles (this is only possible when both the piles have \u2265 xj stones).\n-  The number chosen must be unique over all the moves in the game. That is, for all k < j, xj \u2260 xk. \n\nThe game stops when Chef is unable to make any more moves.\n\nChef wants to make the moves in such a way that the sum of the number of stones remaining in the two piles is minimized. Please help Chef find this.\n\n-----Input-----\n- The first line of input contains an integer T denoting the number of test cases.\n- Each test case consists of 1 line with three integers \u2014 n1, n2 and m \u2014 separated by single spaces.\n\n-----Output-----\nFor each test case, output a single line containing the minimum sum of the number of stones of two piles.\n\n-----Constraints-----\nSubtask 1 : (5 pts)\n- 1 \u2264 T \u2264 100\n- 0 \u2264 m \u2264 18\n- 0 \u2264 n1, n2 \u2264 100\nSubtask 2 : (25 pts)\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 m \u2264 10000\n- 0 \u2264 n1, n2 \u2264 10000\nSubtask 3 : (70 pts)\n- 1 \u2264 T \u2264 105\n- 0 \u2264 m \u2264 109\n- 0 \u2264 n1, n2 \u2264 1018\n\n-----Example-----\nInput:3\n1 1 1\n1 2 1\n4 5 2\n\nOutput:0\n1\n3\n\n-----Explanation-----\nExample case 1. : Remove 1 stone from each of the piles. Now 0 stones are remaining, so chef cannot remove any more stones from the piles. Hence, answer is 0+0 = 0\nExample case 2. : Again, remove 1 stone from both the piles to get (0,1) stones. Now chef cannot remove any more stones from pile 1, so he stops. Hence, answer is 0+1 = 1.\nExample case 3. : First remove 1 stone from both the piles to get (3,4) stones. Now, remove 2 stones from both the piles so that (1,2) stones are remaining. Now chef cannot remove any more stones owing to the condition that he cannot remove the same number of stones twice. So, the answer is 1+2 = 3.\n\n Examples: \nInput: \n['3', '1 1 1', '1 2 1', '4 5 2']\nOutput: \n ['0', '1', '3']\n",
  "1553": "Problem: \nThe GoC Timber Mafia is notorious for its deforestation\nactivities in the forests near Siruseri. These activities have\nincreased multifold after the death of the bandit who used to\nlord over these jungles.  Having lost the battle to prevent the\nMafia from illegally felling the teak trees in this forest, the\ngovernment of Siruseri came up with a novel idea.  Why not\nlegalise the deforestation activity and at least make some money\nin the process? So the Government decided to lease out parts of\nthe forest to the Timber Mafia.\nMost of the teak trees in the forests of Siruseri were planted\nduring the colonial times, after the native trees had been cut.\nLike everything European, the forest is very regular and\norderly. It is rectangular in shape and the trees are arranged in\nuniformly spaced rows and coloumns.\nSince the trees differ in height and girth, the timber value\ndiffers from tree to tree.  The forest department has collected\ndata on each tree and knows the volume of wood (in cubic feet)\navailable in each tree in the forest.\nThe forest department maintains this information in the form of\nan $M \\times N$ array of integers, where the\n$(i, j)$th entry is the volume, in cubic feet, of the\n$i^{th}$ tree on the $i^{th}$ row (or, equivalently, the\n$i^{th}$ tree on the $i^{th}$ column).  We assume that\nour rows are numbered top to bottom and the columns are numbered\nfrom left to right.  For example, such an array could look like\n\nThis array tells us that  the volume of the tree at position $(3,4)$ is $15$\ncubic feet and so on.\nAny rectangular piece of land with trees at each corner can be\nleased out.  In order to fix the lease price for any rectangular\nplot of the forest the forest department needs to know the amount\nof wood available inside the plot.\nA rectangular plot is described by the positions of the trees in\nits top left corner and the bottom right corner. For example the\npositions $(2,2)$ and $(3,4)$ describes the following part\nrectangular part of the above forest.\n\nThe total amount of wood available in this rectangular plot is $76$\ncubic feet.  Similarly $(4,2)$ and $(4,2)$ describes the rectangle\nwith just one tree and its volume is $20$ cubic feet.\nYour task is to write a program that helps the forest department\nto compute the total volume of the trees insides any specfied\nrectangular plot.\n\n-----Input:-----\n- The first line of the input contains two integers $M$ and $N$ indicating the number of rows and columns of trees in the forest. \n- The following $M$ lines have $N$ integers each. The $j^{th}$ integer on line $i+1$ denotes the volume (in cubic feet) of the $j^{th}$  tree on the $i^{th}$  row. \n- Line $M+2$ contains a single integer $C$ indicating the number of rectangles for which the total volume is to be computed. \n- Each of the following $C$ lines (line $M+2+1 ... M+2+C$) contain four integers $x_1, y_1, x_2$ and $y_2$ (with $x_1 \\leq x_2$ and $y_1 \\leq y_2$) and describes a rectangle. The rectangle has its top left corner at the tree in position $(x_1,y_1)$ and its bottom right corner at the tree at position $(x_2,y_2)$.\n\n-----Output:-----\nYour output must contain $C$ lines with one integer on each line. Line $i$ must contain the total volume of wood in the rectangle described on line $M+2+i$ in the input.\n\n-----Constraints-----\n- In $30 \\%$ of inputs, $1 \\leq C \\leq 100$.\n- In all inputs, $2 \\leq N, M \\leq 1000$ and $1 \\leq C \\leq 1000000$\n- $0 \\leq$ volume of wood in each tree $\\leq 1000$\n- $1 \\leq x_1 \\leq x_2 \\leq M$\n- $1 \\leq y_1 \\leq y_2 \\leq N$\n\n-----Sample Input-----\n4 4 \n3 4 15 23 \n14 20 12 9\n3 8 12 15\n12 20 7 5\n2\n2 2 3 4 \n4 2 4 2\n\n-----Sample Output-----\n76\n20\n\n Examples: \nInput: \n['4 4', '3 4 15 23', '14 20 12 9', '3 8 12 15', '12 20 7 5', '2', '2 2 3 4', '4 2 4 2']\nOutput: \n ['76', '20']\n",
  "1554": "Problem: \nMeliodas and Ban are fighting over chocolates. Meliodas has $X$ chocolates, while Ban has $Y$. Whoever has lesser number of chocolates eats as many chocolates as he has from the other's collection. This eatfest war continues till either they have the same number of chocolates, or atleast one of them is left with no chocolates.\n\nCan you help Elizabeth predict the total no of chocolates they'll be left with at the end of their war?\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, which contains two integers $X, Y$, the no of chocolates Meliodas and Ban have, respectively. \n\n-----Output:-----\nFor each testcase, output in a single line the no of chocolates that remain after Ban and Meliodas stop fighting.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $0 \\leq X,Y \\leq 10^9$\n\n-----Sample Input:-----\n3\n\n5 3\n\n10 10\n\n4 8  \n\n-----Sample Output:-----\n2\n\n20\n\n8  \n\n-----EXPLANATION:-----\nDenoting Meliodas as $M$, Ban as $B$.\nTestcase 1:\n$M$=5, $B$=3\n\nBan eates 3 chocolates of Meliodas.\n$M$=2, $B$=3\n\nMeliodas eats 2 chocolates of Ban.\n$M$=2, $B$=1\n\nBan eates 1 chocolate of Meliodas.\n$M$=1, $B$=1\n\nSince they have the same no of candies, they stop quarreling.\n\nTotal candies left: 2  \nTestcase 2:\n$M$=10, $B$=10\n\nSince both of them had the same candies to begin with, there was no point in fighting.\n\nTotal candies left: 20  \nTestcase 3:\n$M$=4, $B$=8\n\nMeliodas eats 4 chocolates of Ban.\n$M$=4, $B$=4\n\nSince they have the same no of candies, they stop quarreling.\n\nTotal candies left: 8\n\n Examples: \nInput: \n['3', '5 3', '10 10', '4 8']\nOutput: \n ['2', '20', '8']\n",
  "1555": "Problem: \nChef is interested to solve series problems. Chef wants to solve a series problem but he can't \nsolve it till now.Can you help Chef to solve the series problem?\n- In series problem, the series goes as follows 1,9,31,73,141 . . . . . . . . \nYour task is to find the Nth term of series. For larger value of $N$ answer becomes very large, So your output should be performed $N$th term modulo 1000000007 ($10^9+7$ ).\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single integer $N$. \n\n-----Output:-----\nFor each testcase,  output in a single line answer i.e. The $N$th term of series modulo 1000000007.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\n2\n\n8\n\n10\n\n-----Sample Output:-----\n561\n\n1081\n\n Examples: \nInput: \n['2', '8', '10']\nOutput: \n ['561', '1081']\n",
  "1556": "Problem: \nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n10\n10\n101\n101\n101\n1010\n1010\n1010\n1010\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '10', '10', '101', '101', '101', '1010', '1010', '1010', '1010']\n",
  "1557": "Problem: \nChef usually likes to play cricket, but now, he is bored of playing it too much, so he is trying new games with strings. Chef's friend Dustin gave him binary strings $S$ and $R$, each with length $N$, and told him to make them identical. However, unlike Dustin, Chef does not have any superpower and Dustin lets Chef perform only operations of one type: choose any pair of integers $(i, j)$ such that $1 \\le i, j \\le N$ and swap the $i$-th and $j$-th character of $S$. He may perform any number of operations (including zero).\nFor Chef, this is much harder than cricket and he is asking for your help. Tell him whether it is possible to change the string $S$ to the target string $R$ only using operations of the given type.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains a binary string $S$.\n- The third line contains a binary string $R$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if it is possible to change $S$ to $R$ or \"NO\" if it is impossible (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 400$\n- $1 \\le N \\le 100$\n- $|S| = |R| = N$\n- $S$ and $R$ will consist of only '1' and '0'\n\n-----Example Input-----\n2\n5\n11000\n01001\n3\n110\n001\n\n-----Example Output-----\nYES\nNO\n\n-----Explanation-----\nExample case 1: Chef can perform one operation with $(i, j) = (1, 5)$. Then, $S$ will be \"01001\", which is equal to $R$.\nExample case 2: There is no sequence of operations which would make $S$ equal to $R$.\n\n Examples: \nInput: \n['2', '5', '11000', '01001', '3', '110', '001']\nOutput: \n ['YES', 'NO']\n",
  "1558": "Problem: \nAnas is playing an amazing game on a grid with $N$ rows and $M$ columns. The rows are numbered $1$ through $N$ from top to bottom and the columns are numbered $1$ through $M$ from left to right.\nAnas wants to destroy this grid. To do that, he wants to send two heroes from the top left cell to the bottom right cell:\n- The first hero visits cells in row-major order: $(1,1) \\rightarrow (1,2) \\rightarrow \\ldots \\rightarrow (1,M) \\rightarrow (2,1) \\rightarrow (2,2) \\rightarrow \\ldots \\rightarrow (2,M) \\rightarrow \\ldots \\rightarrow (N,M)$.\n- The second hero visits cells in column-major order: $(1,1) \\rightarrow (2,1) \\rightarrow \\ldots \\rightarrow (N,1) \\rightarrow (1,2) \\rightarrow (2,2) \\rightarrow \\ldots \\rightarrow (N,2) \\rightarrow \\ldots \\rightarrow (N,M)$.\nWe know that each hero destroys the first cell he visits, rests in the next $K$ cells he visits without destroying them, then destroys the next cell he visits, rests in the next $K$ cells, destroys the next cell, and so on until he reaches (and rests in or destroys) the last cell he visits.\nAnas does not know the value of $K$. Therefore, for each value of $K$ between $0$ and $N \\cdot M - 1$ inclusive, he wants to calculate the number of cells that will be destroyed by at least one hero. Can you help him?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $M$.\n\n-----Output-----\nFor each test case, print a single line containing $N \\cdot M$ space-separated integers as described above.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N, M \\le 1,000$\n- the sum of $N \\cdot M$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $2 \\le N, M \\le 50$\n- the sum of $N \\cdot M$ over all test cases does not exceed $5,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n1\n2 3\n\n-----Example Output-----\n6 4 3 3 2 1\n\n-----Explanation-----\nExample case 1:\n- $K = 0$: All cells will be destroyed by the heroes.\n- $K = 1$: The first hero will destroy the cells $[(1,1), (1,3), (2,2)]$, while the second one will destroy the cells $[(1,1), (1,2), (1,3)]$.\n- $K = 2$: The first hero will destroy the cells $[(1,1), (2,1)]$, while the second one will destroy the cells $[(1,1), (2,2)]$.\n- $K = 3$: The first hero will destroy the cells $[(1,1), (2,2)]$, while the second one will destroy the cells $[(1,1), (1,3)]$.\n- $K = 4$: The first hero will destroy the cells $[(1,1), (2,3)]$ and the second one will also destroy the cells $[(1,1), (2,3)]$.\n- $K = 5$ : The first hero will destroy the cell $(1,1)$ and the second one will also destroy the cell $(1,1)$.\n\n Examples: \nInput: \n['1', '2 3']\nOutput: \n ['6 4 3 3 2 1']\n",
  "1559": "Problem: \nScheme? - Too loudly said. Just a new idea. Now Chef is expanding his business. He wants to make some new restaurants in the big city of Lviv. To make his business competitive he should interest customers. Now he knows how. But don't tell anyone -  it is a secret plan. Chef knows four national Ukrainian dishes - salo, borsch, varenyky and galushky. It is too few, of course, but enough for the beginning. Every day in his restaurant will be a dish of the day among these four ones. And dishes of the consecutive days must be different. To make the scheme more refined the dish of the first day and the dish of the last day must be different too. Now he wants his assistant to make schedule for some period. Chef suspects that there is more than one possible schedule. Hence he wants his assistant to prepare all possible plans so that he can choose the best one among them. He asks you for help. At first tell him how many such schedules exist. Since the answer can be large output it modulo 109 + 7, that is, you need to output the remainder of division of the actual answer by 109 + 7.\n\n-----Input-----\n\nThe first line of the input contains an integer T, the number of test cases. Each of the following T lines contains a single integer N denoting the number of days for which the schedule should be made.\n\n-----Output-----\n\nFor each test case output a single integer in a separate line, the answer for the corresponding test case.\n\n-----Constraints-----1 \u2264 T \u2264 100\n2 \u2264 N \u2264 109\n\n-----Example-----\nInput:\n3\n2\n3\n5\n\nOutput:\n12\n24\n240\n\n-----Explanation-----\nCase 1. For N = 2 days we have the following 12 schedules:\nFirst day Second day  salo   borsch    salo   varenyky    salo   galushky    borsch   salo    borsch   varenyky    borsch   galushky    varenyky   salo    varenyky   borsch    varenyky   galushky    galushky   salo    galushky   borsch    galushky   varenyky  \n\nCase 2. For N = 3 we have the following 24 schedules:\nFirst daySecond dayThird day  salo   borsch   varenyky    salo   borsch   galushky    salo   varenyky   borsch    salo   varenyky   galushky    salo   galushky   borsch    salo   galushky   varenyky    borsch   salo   varenyky    borsch   salo   galushky    borsch   varenyky   salo    borsch   varenyky   galushky    borsch   galushky   salo    borsch   galushky   varenyky    varenyky   salo   borsch    varenyky   salo   galushky    varenyky   borsch   salo    varenyky   borsch   galushky    varenyky   galushky   salo    varenyky   galushky   borsch    galushky   salo   borsch    galushky   salo   varenyky    galushky   borsch   salo    galushky   borsch   varenyky    galushky   varenyky   salo    galushky   varenyky   borsch  \n\nCase 3. Don't be afraid. This time we will not provide you with a table of 240 schedules. The only thing we want to mention here is that apart from the previous two cases schedules for other values of N can have equal dishes (and even must have for N > 4). For example the schedule (salo, borsch, salo, borsch) is a correct schedule for N = 4 while the schedule (varenyky, salo, galushky, verynky, salo) is a correct schedule for N = 5.\n\n Examples: \nInput: \n['3', '2', '3', '5']\nOutput: \n ['12', '24', '240']\n",
  "1561": "Problem: \nChef Tobby asked Bhuvan to brush up his knowledge of statistics for a test. While studying some distributions, Bhuvan learns the fact that for symmetric distributions, the mean and the median are always the same.\nChef Tobby asks Bhuvan out for a game and tells him that it will utilize his new found knowledge. He lays out a total of 109 small tiles in front of Bhuvan. Each tile has a distinct number written on it from 1 to 109.\nChef Tobby gives Bhuvan an integer N and asks him to choose N distinct tiles and arrange them in a line such that the mean of median of all subarrays lies between [N-1, N+1], both inclusive. The median of subarray of even length is the mean of the two numbers in the middle after the subarray is sorted\nBhuvan realizes that his book didn\u2019t teach him how to solve this and asks for your help. Can you solve the problem for him?\nIn case, no solution exists, print -1.\n\n-----Input section-----\nFirst line contains, T, denoting the number of test cases.\nEach of the next T lines, contain a single integer N.\n\n-----Output section-----\nIf no solution, exists print -1.\nIf the solution exists, output N space separated integers denoting the elements of the array A such that above conditions are satisfied. In case, multiple answers exist, you can output any one them.\n\n-----Input constraints-----\n1 \u2264 T \u2264 20\n1 \u2264 N \u2264 100\n\n-----Sample Input-----\n3\n1\n2\n3\n\n-----Sample Output-----\n1\n1 2\n1 2 3\n\n-----Explanation-----\nFor test case 3, the subarrays and their median are as follows: \n- {1}, median = 1\n- {2}, median = 2\n- {3}, median = 3\n- {1, 2}, median = 1.5\n- {2, 3}, median = 2.5\n- {1, 2, 3}, median = 2\nThe mean of the medians is 2 which lies in the range [2, 4]\n\n Examples: \nInput: \n['3', '1', '2', '3']\nOutput: \n ['1', '1 2', '1 2 3']\n",
  "1562": "Problem: \n\"I'm a fan of anything that tries to replace actual human contact.\" - Sheldon.\nAfter years of hard work, Sheldon was finally able to develop a formula which would diminish the real human contact.  \nHe found k$k$ integers n1,n2...nk$n_1,n_2...n_k$ . Also he found that if he could minimize the value of m$m$ such that  \u2211ki=1$\\sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$ is even, where m$m$ = \u2211ki=1$\\sum_{i=1}^k$mi$m_i$, he would finish the real human contact.  \nSince Sheldon is busy choosing between PS-4 and XBOX-ONE, he want you to help him to calculate the minimum value of m$m$. \n\n-----Input:-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The \ndescription of T$T$ test cases follows.\n- The first line of each test case contains a single integer k$k$.\n- Next line contains k space separated integers n1,n2...nk$n_1,n_2...n_k$ .\n\n-----Output:-----\nFor each test case output the minimum value of m for which \u2211ki=1$\\sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$ is even, where  m$m$=m1$m_1$+m2$m_2$+. . . mk$m_k$   and  0$0$ <= mi$m_i$<= ni$n_i$ .  If no such answer exists print -1.\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264k\u22641000$1 \\leq k \\leq 1000$\n- 1\u2264ni\u226410$1 \\leq n_i \\leq 10$18$18$\n\n-----Sample Input:-----\n1\n1\n5\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\n5$5$C$C$2$2$ = 10 which is even and m is minimum.\n\n Examples: \nInput: \n['1', '1', '5']\nOutput: \n ['2']\n",
  "1563": "Problem: \nA reversed arabic no is one whose digits have been written in the reversed order. However in this any trailing zeroes are omitted. The task at hand here is a simple one. You need to add two numbers which have been written in reversed arabic and return the output back in reversed arabic form, assuming no zeroes were lost while reversing.\n\n\n-----Input-----\nThe input consists of N cases. The first line of the input contains only a positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers seperated by space. These are the reversednumbers you are to add.\n\n\n-----Output-----\nFor each case, print exactly one line containing only one integer- the reversed sum of two reversed numbers. Omit any leading zeroes in the output.\n\n\n-----Example-----\nInput:\n1\n24 1\n\nOutput:\n34\n\n Examples: \nInput: \n['1', '24 1']\nOutput: \n ['34']\n",
  "1564": "Problem: \nSergey recently learned about country codes - two letter strings, denoting countries. For example, BY stands for Belarus and IN stands for India. Mesmerized by this new discovery, Sergey now looks for country codes everywhere!\nSergey has recently found a string S consisting of uppercase Latin letters. He wants to find the number of different country codes that appear in S as contiguous substrings. For the purpose of this problem, consider that every 2-letter uppercase string is a valid country code.\n\n-----Input-----\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a string S, consisting of uppercase Latin letters.\n\n-----Output-----\nFor each test case, output a single line containing the number of different country codes appearing in the given string.\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 100\n- Subtask 1 (35 points): 2 \u2264 |S| \u2264 3\n- Subtask 2 (65 points): 2 \u2264 |S| \u2264 104\n\n-----Example-----\nInput:2\nINBY\nBYBY\n\nOutput:3\n2\n\n-----Explanation-----\nExample case 1. The codes are IN, NB and BY.\nExample case 2. The codes are BY and YB.\n\n Examples: \nInput: \n['2', 'INBY', 'BYBY']\nOutput: \n ['3', '2']\n",
  "1565": "Problem: \nSuppose there is a X x Y x Z 3D matrix A of numbers having coordinates (i, j, k) where 0 \u2264 i < X, 0 \u2264 j < Y, 0 \u2264 k < Z. Now another X x Y x Z matrix B is defined from A such that the (i, j, k) element of B is the sum of all the the numbers in A in the cuboid defined by the (0, 0, 0) and (i, j, k) elements as the diagonally opposite vertices. In other word (i, j, k) in B is the sum of numbers of A having coordinates (a, b, c) such that 0 \u2264 a \u2264 i, 0 \u2264 b \u2264 j, 0 \u2264 c \u2264 k. The problem is that given B, you have to find out A.\n\n-----Input-----\nThe first line of input will contain the number of test cases ( \u2264 10). That many test cases will follow in subsequent lines. The first line of each test case will contain the numbers X Y Z (0 \u2264 X, Y, Z \u2264 100). After that there will be X x Y lines each containing Z numbers of B. The first line contains the numbers (0, 0, 0), (0, 0, 1)..., (0, 0, Z-1). The second line has the numbers (0, 1, 0), (0, 1, 1)..., (0, 1, Z-1) and so on. The (Y+1)th line will have the numbers (1, 0, 0), (1, 0, 1)..., (1, 0, Z-1) and so on.\n\n-----Output-----\nFor each test case print the numbers of A in exactly the same fashion as the input.\n\n-----Example-----\nInput:\n2\n3 1 1\n1 \n8 \n22 \n1 2 3\n0 9 13 \n18 45 51 \n\nOutput:\n1 \n7 \n14 \n0 9 4 \n18 18 2\n\n Examples: \nInput: \n['2', '3 1 1', '1', '8', '22', '1 2 3', '0 9 13', '18 45 51']\nOutput: \n ['1', '7', '14', '0 9 4', '18 18 2']\n",
  "1567": "Problem: \nAshley likes playing with strings.\n\nShe gives Mojo a fun problem to solve. In her imaginary string world, a string of even length is called as \"Doublindrome\" if both halves of the string are palindromes (both halves have length equal to half of original string).\n\nShe gives Mojo a string and asks him if he can form a \"Doublindrome\" by rearranging the characters of the given string or keeping the string as it is.\n\nAs Mojo is busy playing with cats, solve the problem for him.\n\nPrint \"YES\" (without quotes) if given string can be rearranged to form a \"Doublindrome\" else print \"NO\" (without quotes).\n\n-----Input:-----\n- First line will contain a single integer $T$, the number of testcases. \n- Each testcase consists of two lines, first line consists of an integer $N$ (length of the string) and second line consists of  the string $S$. \n\n-----Output:-----\nFor each testcase, print \"YES\"(without quotes) or \"NO\"(without quotes) on a new line.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 100$\n- $N$ is always even.\n- String $S$ consists only of lowercase English alphabets.\n\n-----Sample Input:-----\n1\n8\nabbacddc\n\n-----Sample Output:-----\nYES\n\n-----EXPLANATION:-----\nThe given string is a Doublindrome as its 2 halves \"abba\" and \"cddc\" are palindromes.\n\n Examples: \nInput: \n['1', '8', 'abbacddc']\nOutput: \n ['YES']\n",
  "1568": "Problem: \nDhote and Shweta went on a tour by plane for the first time.Dhote was surprised by the conveyor belt  at the airport.As Shweta was getting bored Dhote had an idea of playing a game with her.He asked Shweta to count the number of bags whose individual weight is greater than or equal to the half of the total number of bags on the conveyor belt.Shweta got stuck in the puzzle! Help Shweta. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, one  integers N$N$.\n- next line conatins N$N$ integers that represents weight of bag \n\n-----Output:-----\nFor each testcase, print required answer in new line .\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u2264105$1 \\leq N \\leq 10^5$\n- 1\u2264weightofbag\u2264105$ 1\\leq  weight of bag   \\leq 10^5$ \n\n-----Sample Input:-----\n1\n4 \n1 2 3 4\n\n-----Sample Output:-----\n3\n\n Examples: \nInput: \n['1', '4', '1 2 3 4']\nOutput: \n ['3']\n",
  "1570": "Problem: \nThe chef is placing the laddus on the large square plat. The plat has the side of length N. Each laddu takes unit sq.unit area. Cheffina comes and asks the chef one puzzle to the chef as, how many squares can be formed in this pattern with all sides of new square are parallel to the original edges of the plate.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer as maximum squares on plate satisfying the condition.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n2\n1\n2 \n\n-----Sample Output:-----\n1\n5\n\n-----EXPLANATION:-----\nFor 1) Only 1 Square\nFor 2) 4 squares with area 1 sq.unit\n1 square with area 4 sq.unit\n\n Examples: \nInput: \n['2', '1', '2']\nOutput: \n ['1', '5']\n",
  "1571": "Problem: \nChef is making polygon cakes in his kitchen today! \nSince the judge panel is very strict, Chef's cakes must be beautiful and have sharp and precise $internal$ angles in arithmetic progression. \nGiven the number of sides, $N$, of the cake Chef is baking today and also the measure of its first angle(smallest angle), $A$, find the measure of the $K^{th}$ angle.\n\n-----Input:-----\n- The first line contains a single integer $T$, the number of test cases. \n- The next $T$ lines contain three space separated integers $N$, $A$ and $K$, the number of sides of polygon, the first angle and the $K^{th}$ angle respectively. \n\n-----Output:-----\nFor each test case, print two space separated integers $X$ and $Y$, such that the $K^{th}$ angle can be written in the form of $X/Y$ and $gcd(X, Y) = 1$\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n- $3 \\leq N \\leq 1000$\n- $1 \\leq A \\leq 1000000000$\n- $1 \\leq K \\leq N$\n- It is guaranteed the answer is always valid.\n\n-----Sample Input:-----\n1\n3 30 2\n\n-----Sample Output:-----\n60 1\n\n Examples: \nInput: \n['1', '3 30 2']\nOutput: \n ['60 1']\n",
  "1572": "Problem: \nIndian National Olympiad in Informatics 2016\n\tBoing Inc, has N employees, numbered 1 ... N. Every employee other than Mr. Hojo (the head of the company) has a manager (P[i] denotes the manager of employee i). Thus an employee may manage any number of other employees but he reports only to one manager, so that the organization forms a tree with Mr. Hojo at the root. We say that employee B is a subordinate of employee A if B appears in the subtree rooted at A.\n\n\tMr. Hojo, has hired Nikhil to analyze data about the employees to suggest how to identify faults in Boing Inc. Nikhil, who is just a clueless consultant, has decided to examine wealth disparity in the company. He has with him the net wealth of every employee (denoted A[i] for employee i). Note that this can be negative if the employee is in debt. He has already decided that he will present evidence that wealth falls rapidly as one goes down the organizational tree. He plans to identify a pair of employees i and j, j a subordinate of i, such A[i] - A[j] is maximum. Your task is to help him do this.\n\n\tSuppose, Boing Inc has 4 employees and the parent (P[i]) and wealth information (A[i]) for each employee are as follows:\n\ni\t\t1\t2\t3\t4\nA[i]\t\t5\t10\t6\t12\nP[i]\t\t2\t-1\t4\t2\n\nP[2] = -1 indicates that employee 2 has no manager, so employee 2 is Mr. Hojo.\n\nIn this case, the possible choices to consider are (2,1) with a difference in wealth of 5, (2,3) with 4, (2,4) with -2 and (4,3) with 6. So the answer is 6.\n\n\n-----Input format-----\n\tThere will be one line which contains (2*N + 1) space-separate integers. The first integer is N, giving the number of employees in the company. The next N integers A[1], .., A[N] give the wealth of the N employees. The last N integers are P[1], P[2], .., P[N], where P[i] identifies the manager of employee i. If Mr. Hojo is employee i then, P[i] = -1, indicating that he has no manager.\n\n\n-----Output format-----\n\tOne integer, which is the needed answer.\n\n\n-----Test data-----\n-108 \u2264 A[i] \u2264 108, for all i.\nSubtask 1 (30 Marks) 1 \u2264 N \u2264 500.\nSubtask 2 (70 Marks) 1 \u2264 N \u2264 105.\n\n\n-----Sample Input-----\n4 5 10 6 12 2 -1 4 2\n\n-----Sample Output-----\n6\n\n Examples: \nInput: \n['4 5 10 6 12 2 -1 4 2']\nOutput: \n ['6']\n",
  "1573": "Problem: \nA tennis tournament is about to take place with $N$ players participating in it.\nEvery player plays with every other player exactly once and there are no ties. That is, every match has a winner and a loser. \nWith Naman's birthday approaching, he wants to make sure that each player wins the same number of matches so that nobody gets disheartened.  \nYour task is to determine if such a scenario can take place and if yes find one such scenario.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single integer $N$ denoting number of players.\n\n-----Output:-----\n- If it's impossible for everyone to win the same number of matches, print \"NO\" (without quotes).\n- Otherwise print \"YES\" (without quotes) and then print $N$ lines , each line should consist of a string containing only 0s and 1s and should be of size $N$. \n- If the jth character in the ith line is 1 then it means in the match between $i$ and $j$ , $i$ wins. \n- You will get a WA if the output does not correspond to a valid tournament, or if the constraints are not satisfied.\n- You will get also WA verdict if any 2 lines have contradicting results or if a player beats himself.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $2 \\leq N \\leq 100$\n\n-----Subtasks-----\n- 10 points : $2 \\leq N \\leq 6$\n- 90 points :  Original Constraints. \n\n-----Sample Input:-----\n2\n3\n2\n\n-----Sample Output:-----\nYES\n010\n001\n100\nNO\n\n-----Explanation:-----\nOne such scenario for $N$ = $3$ is when player $1$ beats player $2$, player $2$ to beats player $3$ and player $3$ beats player $1$. Here all players win exactly $1$ match.\n\n Examples: \nInput: \n['2', '3', '2']\nOutput: \n ['YES', '010', '001', '100', 'NO']\n",
  "1574": "Problem: \nYou like tracking airplane flights a lot. Specifically, you maintain history of an airplane\u2019s flight at several instants and record them in your notebook. Today, you have recorded N such records h1, h2, ..., hN, denoting the heights of some airplane at several instants. These records mean that airplane was first flying on height h1, then started changing its height to h2, then from h2 to h3 and so on. The airplanes are usually on cruise control while descending or ascending, so \nyou can assume that plane will smoothly increase/decrease its height from hi to hi + 1 with a constant speed. You can see that during this period, the airplane will cover all possible heights in the range [min(hi, hi+1), max(hi, hi+1)] (both inclusive). It is easy to see that the plane will be at all possible heights in the range exactly a single instant of time during this ascend/descend.\n\nYou are interested in finding the maximum integer K such that the plane was at some height exactly K times during the flight.\n\n-----Input-----\nThere is a single test case.\nFirst line of the input contains an integer N denoting the number of records of heights of the plane.\nSecond line contains N space separated integers denoting h1, h2, ..., hN.\n\n-----Output-----\nOutput a single maximum integer K in one line, such that the plane was at some height exactly K times during the flight.\n\n-----Constraints-----\n- hi \u2260 hi+1\n\n-----Subtasks-----\nSubtask #1: (30 points)\n- 1 \u2264 N \u2264 1000\n- 1 \u2264 hi \u2264 1000\n\nSubtask #2: (70 points)\n- 1 \u2264 N \u2264 105\n- 1 \u2264 hi \u2264 109\n\n-----Example-----\nInput:\n5\n1 2 3 2 3\n\nOutput:\n3\n\n-----Explanation-----\n\nThe flight can be draw as:\n\n3  /\\/\n2 /\n1\n\nThere are infinitely many heights at which the plane was 3 times during the flight, for example 2.5, 2.1. Notice that the plane was only 2 times at height 2. Moreover, there are no height at which the plane was more than 3 times, so the answer is 3.\n\n Examples: \nInput: \n['5', '1 2 3 2 3']\nOutput: \n ['3']\n",
  "1575": "Problem: \nYou must have tried to solve the Rubik\u2019s cube. You might even have succeeded at it. Rubik\u2019s cube is a 3x3x3 cube which has 6 different color for each face.The Rubik\u2019s cube is made from 26 smaller pieces which are called cubies. There are 6 cubies at the centre of each face and these comprise of a single color. There are 8 cubies at the 8 corners which comprise of exactly 3 colors. The 12 reamaining cubies comprise of exactly 2 colors.\n\nApple has come up with a variation of the Rubik\u2019s Cube, it\u2019s the Rubik\u2019s cuboid which has different colors on its 6 faces. The Rubik\u2019s Cuboid comes in various sizes represented by M x N x O (M,N,O are natural numbers). Apple is giving away 100 Rubik\u2019s cuboid for free to people who can answer a simple questions. Apple wants to know, in a Rubik\u2019s cuboid with arbitrary dimensions, how many cubies would be there, which comprise of exactly 2 color.\n\n-----Input-----\nThe input contains several test cases.The first line of the input contains an integer T denoting the number of test cases.\n\nEach test case comprises of 3 natural numbers, M,N & O, which denote the dimensions of the Rubiks Cuboid.\n\n-----Output-----\nFor each test case you are required to output the number of  cubies which comprise of 2 squares, each of which is of a different color.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 <1000\n- 1 \u2264 M \u2264 <100000\n- 1 \u2264 N \u2264 <100000\n- 1 \u2264 O \u2264 <100000\n\n-----Example-----\nInput:\n1\n3\n3\n3\n\nOutput:\n\n12\n\n Examples: \nInput: \n['1', '3', '3', '3']\nOutput: \n ['12']\n",
  "1576": "Problem: \nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n12\n21\n123\n231\n312\n1234\n2341\n3412\n4123\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\n Examples: \nInput: \n['3', '2', '3', '4']\nOutput: \n ['12', '21', '123', '231', '312', '1234', '2341', '3412', '4123']\n",
  "1578": "Problem: \nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n-----Explanation-----\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.\n\n Examples: \nInput: \n['1', 'ab1231da']\nOutput: \n ['7']\n",
  "1579": "Problem: \nYou are given an integer sequence $A_1, A_2, \\ldots, A_N$. For any pair of integers $(l, r)$ such that $1 \\le l \\le r \\le N$, let's define $\\mathrm{OR}(l, r)$ as $A_l \\lor A_{l+1} \\lor \\ldots \\lor A_r$. Here, $\\lor$ is the bitwise OR operator.\nIn total, there are $\\frac{N(N+1)}{2}$ possible pairs $(l, r)$, i.e. $\\frac{N(N+1)}{2}$ possible values of $\\mathrm{OR}(l, r)$. Determine if all these values are pairwise distinct.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all values of $\\mathrm{OR}(l, r)$ are pairwise distinct or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 300$\n- $1 \\le N \\le 10^5$\n- $0 \\le A_i \\le 10^{18}$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $3 \\cdot 10^5$\n\n-----Example Input-----\n4\n3\n1 2 7\n2\n1 2\n3\n6 5 8\n5\n12 32 45 23 47\n\n-----Example Output-----\nNO\nYES\nYES\nNO\n\n-----Explanation-----\nExample case 1: The values of $\\mathrm{OR}(l, r)$ are $1, 2, 7, 3, 7, 7$ (corresponding to the contiguous subsequences $[1], [2], [7], [1,2], [2,7], [1,2,7]$ respectively). We can see that these values are not pairwise distinct.\nExample case 2: The values of $\\mathrm{OR}(l, r)$ are $1, 2, 3$ (corresponding to the contiguous subsequences $[1], [2], [1, 2]$ respectively) and they are pairwise distinct.\n\n Examples: \nInput: \n['4', '3', '1 2 7', '2', '1 2', '3', '6 5 8', '5', '12 32 45 23 47']\nOutput: \n ['NO', 'YES', 'YES', 'NO']\n",
  "1580": "Problem: \nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline).\nYour task is print the words in the text in lexicographic order (that is, dictionary order). Each word should appear exactly once in your list. You can ignore the case (for instance, \"The\" and \"the\" are to be treated as the same word). There should be no uppercase letters in the output.\nFor example, consider the following candidate for the input text: \nThis is a sample piece of text to illustrate this \nproblem.\n\nThe corresponding output would read as:\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\n-----Input format-----\n- The first line of input contains a single integer $N$, indicating the number of lines in the input.\n- This is followed by $N$ lines of input text.\n\n-----Output format-----\n- The first line of output contains a single integer $M$ indicating the number of distinct words in the given text. \n- The next $M$ lines list out these words in lexicographic order.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- There are at most 80 characters in each line.\n- There are at the most 1000 distinct words in the given text.\n\n-----Sample Input-----\n2\nThis is a sample piece of text to illustrate this \nproblem. \n\n-----Sample Output-----\n10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\n Examples: \nInput: \n['2', 'This is a sample piece of text to illustrate this', 'problem.']\nOutput: \n ['10', 'a', 'illustrate', 'is', 'of', 'piece', 'problem', 'sample', 'text', 'this', 'to']\n",
  "1581": "Problem: \nKajaria has an empty bag and 2 types of tiles - \ntiles of type $1$ have the number $X$ written and those of type $2$ have the number $Y$ written on them. He has an infinite supply of both type of tiles.\nIn one move, Kajaria adds exactly $1$ tile to the bag. He adds a tile of type $1$ with probability $p$ and a tile of type $2$ with probability $(1 - p)$.\nIf $2$ tiles in the bag have the same number written on them (say $Z$), they are merged into a single tile of twice that number ($2Z$).\nFind the expected number of moves to reach the first tile with number $S$ written on it.\nNotes on merging: \n- Consider that the bag contains tiles $(5, 10, 20, 40)$ and if the new tile added is $5$, then it would merge with the existing $5$ and the bag would now contain $(10, 10, 20, 40)$. The tiles $10$ (already present) and $10$ (newly formed) would then merge in the same move to form $(20, 20, 40)$, and that will form $(40, 40)$, which will form $(80)$.\nKajaria guarantees that:\n- $X$ and $Y$ are not divisible by each other.\n- A tile with number $S$ can be formed.\n\n-----Input-----\n- First line contains a single integer $T$ - the total no. of testcases\n- Each testcase is described by $2$ lines:\n- $X, Y, S$ - $3$ space-separated natural numbers\n- $u, v$ - $2$ space-separated natural numbers describing the probability $p$\nThe value of $p$ is provided as a fraction in its lowest form $u/v$ ($u$ and $v$ are co-prime)\n\n-----Output-----\n- For each testcase, if the expected number of moves can be expressed as a fraction $p/q$ in its lowest form, print $(p * q^{-1})$ modulo $10^9 + 7$, where $q^{-1}$ denotes the modular inverse of $q$ wrt $10^9 + 7$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $2 \\leq X, Y \\leq 5 * 10^{17}$\n- $1 \\leq S \\leq 10^{18}$\n- $1 \\leq u < v \\leq 10^{9}$\n\n-----Sample Input-----\n1\n5 3 96\n1 3\n\n-----Sample Output-----\n48\n\n Examples: \nInput: \n['1', '5 3 96', '1 3']\nOutput: \n ['48']\n",
  "1582": "Problem: \nThere are n cards of different colours placed in a line, each of them can be either red, green or blue cards. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n-----Constraints-----\n- $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\n Examples: \nInput: \n['5', 'RGGBG', 'Sample Input 2:', '5', 'RRRRR', 'Sample Input 3:', '2', 'BB']\nOutput: \n ['1', 'Sample Output 2:', '4', 'Sample Output 3:', '1']\n",
  "1584": "Problem: \n-----Problem Statement-----\nYou all must have played the game candy crush. So here is a bomb which works much the fruit bomb in candy crush. A designer, Anton, designed a very powerful bomb. The bomb, when placed on a location $(x, y)$ in a $R \\times C$ grid, wipes out the row $x$ and column $y$ completely.\nYou are given a $R\\times C$ grid with $N$ targets. You have only one bomb. Your aim is to maximize the damage and hence destroy most number of targets. Given the location of targets on the grid, find out the number of targets that can destroyed.\nThe grid system uses index starting with $0$.\n\n-----Input-----\n- First line contains three space separated integers, $R$, $C$ and $N$. Then, $N$ lines follow.\n- Each line contains space separated integers $r$ and $c$ mentioning the location of the target.\n\n-----Output-----\nA single integer giving the number of targets that can be destroyed.\n\n-----Constraints-----\n- $1 \\leq R, C \\leq 3 \\times 10^5$\n- $1 \\leq N \\leq min(R \\times C,  3 \\times 10^5)$\n- $0 \\leq r < R$\n- $0 \\leq c < C$\n- Any input pair $(r, c)$ is not repeated.\n\n-----Subtasks-----\nThe total marks will be divided into:\n- 20% : $R, C \\leq 10^3$\n- 80% : Original Constraints\n\n-----Sample Input-----\n2 3 3\n1 1\n0 0\n0 2\n\n-----Sample Output-----\n3\n\n-----EXPLANATION-----\nIt is possible to destroy all the targets if we place the bomb at $(0, 1)$. Hence, total number of targets destroyed is $3$, which is our answer.\n\n Examples: \nInput: \n['2 3 3', '1 1', '0 0', '0 2']\nOutput: \n ['3']\n",
  "1585": "Problem: \nChef is now a corporate person. He has to attend office regularly. But chef does not want to go to office, rather he wants to stay home and discover different recipes and cook them. \nIn the office where chef works, has two guards who count how many times a person enters into the office building. Though the duty of a guard is 24 hour in a day, but sometimes they fall asleep during their duty and could not track the entry of a person in the office building. But one better thing is that they never fall asleep at the same time. At least one of them remains awake and counts who enters into the office.\nNow boss of Chef wants to calculate how many times Chef has entered into the building. He asked to the guard and they give him two integers A and B, count of first guard and second guard respectively.\nHelp the boss to count the minimum and maximum number of times Chef could have entered into the office building.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of the T test cases follows. \nEach test case consists of a line containing two space separated integers A and B.\n\n-----Output-----\nFor each test case, output a single line containing two space separated integers, the minimum and maximum number of times Chef could have entered into the office building.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 0 \u2264 A, B \u2264 1000000\n\n-----Example-----\nInput:\n1\n19 17\n\nOutput:\n19 36\n\n Examples: \nInput: \n['1', '19 17']\nOutput: \n ['19 36']\n",
  "1586": "Problem: \nIndian National Olympiad in Informatics 2012\nYou are given a table with 2 rows and N columns. Each cell has an integer in it. The score of such a table is defined as follows: for each column, consider the sum of the two numbers in the column; the maximum of the N numbers so obtained is the score. For example, for the table\n7162\n1234\n\nthe score is max(7 + 1, 1 + 2, 6 + 3, 2 + 4) = 9.\n\nThe first row of the table is fixed, and given as input. N possible ways to fill the second row are considered:\n1,2,...,N\n2,3,...,N,1\n3,4,...,N,1,2\n\u00b7\u00b7\u00b7\nN, 1, ... , ,N \u2212 1\n\nFor instance, for the example above, we would consider each of the following as possibilities for the second row.\n1234\n2341\n3412\n4123\n\nYour task is to find the score for each of the above choices of the second row. In the example above, you would evaluate the following four tables,\n7162 7162 7162 7162\n1234 2341 3412 4123\n\nand compute scores 9, 10, 10 and 11, respectively.\n\n-----Input format -----\nThe first line of the input has a single integer, N. The second line of the input has N integers, representing the first row, from left to right.\n\n-----Output format -----\nThe output should consist of a single line with N integers. For 1 \u00b2 k \u00b2 N, the kth number in the output should be the score when the second row of the table is taken to be k,k+1,...,N,1,...,k\u22121.\n\n-----Test Data -----\nThe testdata is grouped into two subtasks with the following constraints on the inputs.\n\u2022 Subtask 1 [30 points] : 1 \u2264 N \u2264 3000.\n\u2022 Subtask 2 [70 points] : 1 \u2264 N \u2264 200000.\nIn both the subtasks, all the integers in the first row of the table are between 1 and 100000, inclusive.\n\n-----Example -----\nHere is the sample input and output corresponding to the example above.\n\n-----Sample input -----\n4\n7 1 6 2\n\n-----Sample output-----\n9 10 10 11\n\nNote: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\n\n Examples: \nInput: \n['and output corresponding to the example above.', 'Sample input', '4', '7 1 6 2', 'Sample output', '9 10 10 11', 'Note:  Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!']\nOutput: \n []\n",
  "1587": "Problem: \nChef likes problems on geometry a lot. Please help him to solve one such problem.\nFind all possible triangles with integer sides which has the radius of inscribed circle (also known as incircle) equal to R.\nTwo triangles are said to be different if they have at least one different side lengths. Formally, let there be two triangles T1, T2. Let a, b, c denote the sides of triangle T1, such that a \u2264 b \u2264 c. Similarly, Let d, e, f denote the sides of triangle T2, such that d \u2264 e \u2264 f. Then T1 will said to be different from T2 if either a \u2260 d, or b \u2260 e or c \u2260 f.\n\n-----Input-----\nThere is a single test case per test file.\nThe only line of input contains an integer R.\n\n-----Output-----\nOutput in first line single number - number of triangles satisfying statement.\nOrder the sides of triangles in non-decreasing order. Output all triangles in non-decreasing order, i.e. order first by smallest sides, otherwise by second smallest sides, if first and second sides equal, then by third.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 100 \n\n-----Subtasks-----\n- Subtask #1: (20 points)  1 \u2264 R \u2264 3\n- Subtask #2: (30 points)  1 \u2264 R \u2264 20\n- Subtask #3: (50 points)  Original constraints\n\n-----Example-----\nInput:2\n\nOutput:5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17\n\n Examples: \nInput: \n['2']\nOutput: \n ['5', '5 12 13', '6 8 10', '6 25 29', '7 15 20', '9 10 17']\n",
  "1588": "Problem: \nLucy had recently learned the game, called Natural Numbers.\nThe rules of the game are really simple. There are N players. At the same time, every player says one natural number. Let's call the number said by the i-th player Ai. The person with the smallest unique number (that is, the smallest number that was not said by anybody else) wins. Sometimes, there is a case when there are no unique numbers at all. Then the game is obviously a draw, so nobody wins it.\nSometimes, it's hard to determine the winner, especially, when the number of players is enormous. So in this problem, your assignment will be: given the names of the players and the numbers every of them have said. Please, tell the name of the winner, or determine that nobody wins.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of every test case consists of a single integer N - the number of players. Then, N lines will follow. Each of these N lines will consist of the player's name and the number Ai said by her, separated by a single space.\n\n-----Output-----\nFor each test case, output a single line containing an answer to the corresponding test case - the name of the winner, or a string \"Nobody wins.\", if nobody wins the game.\n\n-----Example-----\nInput:\n2\n5\nKouta 1\nYuka 1\nMayu 3\nLucy 2\nNana 5\n2\nLucy 2\nNana 2\n\nOutput:\nLucy\nNobody wins.\n\n-----Scoring-----\nSubtask 1 (17 points): T = 10000, 1 <= N <= 10, 1 <= Ai <= 10 \n\nSubtask 2 (19 points): T = 10000, 1 <= N <= 10, 1 <= Ai <= 2*109\n\nSubtask 3 (30 points): T = 100, 1 <= N <= 1000, 1<= Ai <= 2*109\n\nSubtask 4 (34 points): T = 10, 1 <= N <= 10000, 1 <= Ai <= 2*109\n\nYou can safely assume that in all the test cases the length of any name will not exceed five letters. All the players'  names  are unique.\n\n Examples: \nInput: \n['2', '5', 'Kouta 1', 'Yuka 1', 'Mayu 3', 'Lucy 2', 'Nana 5', '2', 'Lucy 2', 'Nana 2', '', '']\nOutput: \n ['Lucy', 'Nobody wins.']\n",
  "1589": "Problem: \nWrite a program that reads numbers until -1 is not given.\nThe program finds how many of the given numbers are more than 30, $N$.\nIt also finds the average weighted sum of even numbers, $A$.\nThe weight of the $i$th number is defined as the position of the number (1 based indexing) times the number. To find the average weighted sum, you need to add all these weights for the even numbers, then divide the sum by the sum of the positions of the numbers.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains some numbers, terminated by -1\n\n-----Output:-----\nFor each testcase, output in a single line the count of numbers that are greater than 30, $N$, and the average weighted sum of the even numbers, $A$, separated by a space. Make sure to set the precision of the average weighted sum to 2 places after the decimal point.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n1\n33 100 77 42 12 -1\n\n-----Sample Output:-----\n4 38.91\n\n-----EXPLANATION:-----\nIn the series of numbers 33 100 77 42 12 -1, the count of numbers greater than 30 is 4\nThe average weighted sum of the even numbers is given by:\n((2 * 100) + (4 * 42) + (5 * 12)) / (2 + 4 + 5)\n\n Examples: \nInput: \n['1', '33 100 77 42 12 -1']\nOutput: \n ['4 38.91']\n",
  "1590": "Problem: \nMance Rayder, the King-Beyond-the-Wall, has always wanted to lead the largest army the North has ever seen against the NIght\u2019s Watch. For this humungous feat he has banded the waring tribes, the Giants, Thenns and Wildings, together by going to great extents. But the King is facing with an issue he always saw it coming.\nThe huge army is divided into smaller divisions and each division can be of the type $G, T$ or $W$ standing for Giants, Thenns and Wildings respectively. Mance doesn\u2019t want two divisions of the same type standing together as he fears it might lead to a mutiny or an unorganised charge or retreat. \nFor a given numbers of $G, T$ and $W$, find whether an army can be organised in accordance to the rules set by Mance. Not to forget that Mance has to include all the divisions in his battle formation in order to stand a chance against the Wall\u2019s defences.\n\n-----Input:-----\n- First line will contain $N$, the number of test cases.\n- Each of the next $N$ lines will contain three integers $G$, $T$ and $W$ - the number of Giant, Thenn and Wildling divisions respectively.\n\n-----Output:-----\nFor each testcase, output in a single line $Yes$ if a battle formation is possible or $No$ otherwise.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$\n- $1 \\leq G,T,W \\leq 10^9$\n\n-----Sample Input:-----\n1\n1 2 1\n\n-----Sample Output:-----\nYes\n\n-----Explanation:-----\nThe first case can be formed as : $ TGWT $. Hence the answer is $ Yes $.\n\n Examples: \nInput: \n['1', '1 2 1']\nOutput: \n ['Yes']\n",
  "1591": "Problem: \nMaster Oogway has forseen that a panda named Po will be the dragon warrior, and the master of Chi. But he did not tell anyone about the spell that would make him the master of Chi, and has left Po confused. Now Po has to defeat Kai, who is the super villian, the strongest of them all. Po needs to master Chi, and he finds a spell which unlocks his powerful Chi. But the spell is rather strange. It asks Po to calculate the factorial of a number! Po is very good at mathematics, and thinks that this is very easy. So he leaves the spell, thinking it's a hoax. But little does he know that this can give him the ultimate power of Chi. Help Po by solving the spell and proving that it's not a hoax.\n\n-----Input-----\nFirst line of input contains an integer T denoting the number of test cases.\nThe next T lines contain an integer N.\n\n-----Output-----\nFor each test case, print a single line containing the solution to the spell which is equal to factorial of N, i.e. N!. Since the output could be large, output it modulo 1589540031(Grand Master Oogway's current age).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000\n- 1 \u2264 N \u2264 100000\n\n-----Example-----\nInput:\n4\n1\n2\n3\n4\n\nOutput:\n1\n2\n6\n24\n\n Examples: \nInput: \n['4', '1', '2', '3', '4']\nOutput: \n ['1', '2', '6', '24']\n",
  "1592": "Problem: \nChef is in need of money, so he decided to play a game with Ramsay. In this game, there are $N$ rows of coins (numbered $1$ through $N$). For each valid $i$, the $i$-th row contains $C_i$ coins with values $A_{i, 1}, A_{i, 2}, \\ldots, A_{i, C_i}$.\nChef and Ramsay alternate turns; Chef plays first. In each turns, the current player can choose one row that still contains coins and take one of the coins remaining in this row. Chef may only take the the first (leftmost) remaining coin in the chosen row, while Ramsay may only take the last (rightmost) remaining coin in the chosen row. The game ends when there are no coins left.\nEach player wants to maximise the sum of values of the coins he took. Assuming that both Chef and Ramsay play optimally, what is the maximum amount of money (sum of values of coins) Chef can earn through this game?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains an integer $C_i$, followed by a space and $C_i$ space-separated integers $A_{i, 1}, A_{i, 2}, \\ldots, A_{i, C_i}$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2015 the maximum amount of money Chef can earn.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^4$\n- $1 \\le C_i \\le 10$ for each valid $i$\n- $1 \\le A_{i, j} \\le 10^5$ for each valid $i$ and $j$\n\n-----Subtasks-----\nSubtask #1 (20 points): $N = 1$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n2\n4 5 2 3 4\n2 1 6\n\n-----Example Output-----\n8\n\n-----Explanation-----\nExample case 1: One optimal sequence of moves is: Chef takes the coin with value $5$, Ramsay takes $4$, Chef takes $2$, Ramsay takes $3$, Chef takes $1$ and Ramsay takes $6$. At the end, Chef has $5+2+1 = 8$ units of money.\n\n Examples: \nInput: \n['1', '2', '4 5 2 3 4', '2 1 6']\nOutput: \n ['8']\n",
  "1593": "Problem: \nConsider a currency system in which there are notes of six denominations, namely, Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 50, Rs. 100.\nIf the sum of Rs. N is input, write a program to computer smallest number of notes that will combine to give Rs. N.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the smallest number of notes that will combine to give N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1200\n500\n242\n\nOutput\n12\n5\n7\n\n Examples: \nInput: \n['3', '1200', '500', '242']\nOutput: \n ['12', '5', '7']\n",
  "1594": "Problem: \nAfter fixing the mercury leak, Kim has arrived in the planning room, where he finds a square map of a field, with $N$ rows and $N$ columns. Each cell in the field is either empty, or has a lookout tower on it. Using his notes, he immediately realises that this field is where the JSA will build their new base!\nKim knows that Soum is a fan of symmetric base design, and will only approve of a base to be built if it is square. Furthermore, Soum also requires that all the rows in the base, and all the columns in the base have exactly one tower square in them. \nThis means that a base plan is valid if and only if:\n- It is square in shape\n- Every row in the base has exactly one lookout tower in it.\n- Every column in the base has exactly one lookout tower in it.\nKim notices that all the rows and all the columns in the field have exactly one tower square in them, but he knows that some of them could have been built to throw him off! Can you help Kim find how many valid base plans are possible in this field? Two base plans are considered different if one contains a cell in the grid that the other does not.\nPlease refer to the samples for more details.\n\n-----Input:-----\n- The first line of input contains $T$, the number of testcases.\n- The first line of each testcase contains a single integer, $N$, representing the side length of the field.\n- The next $N$ lines of each testcase contain a string of length $N$, consisting of only 0 and 1. If position $j$ in string $i$ is 0, it means that this the field has no tower at $[i][j]$, and if it is 1, then this cell does have a tower at $[i][j]$.\nIt is guaranteed that every row in the input will have exactly one tower, and every column in the input will also have exactly one tower.\n\n-----Output:-----\nFor each testcase, output a single integer $K$, representing the number of different base plans possible.\n\n-----Subtasks-----\n- For all subtasks, $N \\leq 2500$ and $T \\leq 10$. \n- In addition, the sum of $N$ in any testfile is at most $2500$.\nSubtask 1 [28 points] : All the towers will be on the diagonal from the top-left to the bottom-right positions. Formally, all positions where $i = j$ have a tower. And no other position has a tower\nSubtask 2 [39 points] : $N \\leq 600$\nSubtask 3 [33 points] : $N \\leq 2500$\n\n-----Sample Input:-----\n2\n2\n10\n01\n4\n1000\n0010\n0100\n0001\n\n-----Sample Output:-----\n3\n8\n\n-----Explanation:-----\n\nIn the first testcase, there are three valid base plans: The entire 2x2 square, the 1x1 square which contains only the cell (1, 1) and the 1x1 square which contains only the cell (2, 2).\n\nIn the second testcase, \n\nThere are eight valid base plans:\n- The 4x4 square with top left corner at (1, 1)\n- The 3x3 square with top left corner at (1, 1)\n- The 3x3 square with top left corner at (2, 2)\n- The 3x3 square with top left corner at (1, 1)\n- The 2x2 square with top left corner at (2, 2)\n- The 1x1 square which contains only the cell (1, 1)\n- The 1x1 square which contains only the cell (2, 3)\n- The 1x1 square which contains only the cell (3, 2)\n- The 1x1 square which contains only the cell (4, 4)\n\n Examples: \nInput: \n['2', '2', '10', '01', '4', '1000', '0010', '0100', '0001']\nOutput: \n ['3', '8']\n",
  "1596": "Problem: \nDuring quarantine chef\u2019s friend invented a game. In this game there are two players, player 1 and Player 2. In center of garden there is one finish circle and both players are at different distances respectively $X$ and $Y$ from finish circle.\nBetween finish circle and Player 1 there are $X$ number of circles and between finish circle and Player 2 there are $Y$ number of circles. Both player wants to reach finish circle with minimum number of jumps. Player can jump one circle to another circle.\nBoth players can skip $2^0-1$ or $2^1- 1$ or \u2026. or $2^N-1$ circles per jump. A player cannot skip same number of circles in a match more than once. If both players uses optimal way to reach finish circle what will be the difference of minimum jumps needed to reach finish circle by both players. \nIf both players reach finish circle with same number of jumps answer will be $0$ $0$.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The \ndescription of $T$ test cases follows.\n- The first line of each test case contains 2 space separated integers $X$ and $Y$.\n\n-----Output:-----\nFor each test case, print a single line containing 2 space-separated integers which player win and what is the difference between number of minimum jump required by both players to reach finish circle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq X,Y \\leq 2*10^7$\n\n-----Sample Input:-----\n2\n4 5\n3 5\n\n-----Sample Output:-----\n0 0\n1 1\n\n-----Explanation:-----\nTest Case 1:\n\nTest Case 2:\n\n Examples: \nInput: \n['2', '4 5', '3 5']\nOutput: \n ['0 0', '1 1']\n",
  "1597": "Problem: \nChef is playing a game with his brother Chefu. He asked Chefu to choose a positive integer $N$, multiply it by a given integer $A$, then choose a divisor of $N$ (possibly $N$ itself) and add it to the product. Let's denote the resulting integer by $M$; more formally, $M = A \\cdot N + d$, where $d$ is some divisor of $N$.\nChefu told Chef the value of $M$ and now, Chef should guess $N$. Help him find all values of $N$ which Chefu could have chosen.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $A$ and $M$.\n\n-----Output-----\nFor each test case, print two lines. The first line should contain a single integer $C$ denoting the number of possible values of $N$. The second line should contain $C$ space-separated integers denoting all possible values of $N$ in increasing order.\nIt is guaranteed that the sum of $C$ over all test cases does not exceed $10^7$.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le M \\le 10^{10}$\n- $1 \\le A < M$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $M \\le 10^6$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n3\n3 35\n5 50\n4 65\n\n-----Example Output-----\n1\n10\n0\n\n3\n13 15 16\n\n Examples: \nInput: \n['3', '3 35', '5 50', '4 65']\nOutput: \n ['1', '10', '0', '3', '13 15 16']\n",
  "1598": "Problem: \nMr. Das is a teacher teaching for several years in a school. He is not computer savvy. Due to lockdown, now he has to take classes online. Recently he took an online exam for students of different classes. Now, he will call parents of all the students who scored lower than average marks for the class. He has requested you to give the name $X$, parent's phone number $P$, and marks obtained $M$ to him.\n\n-----Input:-----\n- First line contains $T$ no. of test cases\n- for every test case, first line contains an integer $N$, no. of students of his class \n- Next $N$ lines contain $X$, $P$ , and $M$ separated by space\n\n-----Output:-----\nFor every test case, find details of the students who scored below average, then print $X, P, M$  separated by space on a new line as per the increasing order of their marks. In case there are multiple students with the same marks, print them as per the order of their occurrence in the input\n\n-----Constraints-----\n- $1 \\leq T \\leq 20$\n- X contains characters between a-z and A-Z  with a maximum length of 20\n- $1 \\leq N \\leq 100$\n- P is 10 digits\n- $0 \\leq M \\leq 100$\n\n-----Sample Input:-----\n2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n\n-----Sample Output:-----\nPriya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n\n-----EXPLANATION:-----\nIn #1, Priya and Rahul's number was lower than average.\nIn #2, Akash's number was lower than average\n\n Examples: \nInput: \n['2', '3', 'Rahul 1345964789 47', 'Rupendra 1457856987 58', 'Priya 1478569820 45', '2', 'Tanuja 4310779415 97', 'Akash 3689781245 43']\nOutput: \n ['Priya 1478569820 45', 'Rahul 1345964789 47', 'Akash 3689781245 43']\n",
  "1599": "Problem: \nChef and his mother are going travelling. Chef's world consists of $N$ cities (numbered $1$ through $N$) connected by $N-1$ bidirectional roads such that each city can be reached from any other city using roads. For each city, we know its age \u2014 the number of years elapsed since the foundation of the city; let's denote the age of city $i$ by $a_i$.\nFirst of all, Chef and his mother have to decide what city they should visit first. Suppose that Chef chooses a city $c_c$ and his mother chooses a (not necessarily different) city $c_m$. The difference of their choices is the number of different bits in the binary representations of $a_{c_c}$ and $a_{c_m}$.\nChef will not argue with his mother if the parity of this difference is not equal to the parity of the length of the shortest path between cities $c_c$ and $c_m$ (the number of roads on the shortest path between them). Find the number of ways to choose the cities $c_c$ and $c_m$ such that Chef avoids quarreling with his mother.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$. \n- Each of the following $N-1$ lines contains two space-separated integers $A$ and $B$ denoting a road between cities $A$ and $B$.\n- The last line contains $N$ space-separated integers $a_1, a_2, \\dots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of valid pairs $c_c, c_m$.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $1 \\le A, B \\le N$\n- $0 \\le a_i \\le 10^9$ for each valid $i$\n\n-----Sample Input-----\n1\n3\n1 2\n1 3\n1 2 3\n\n-----Sample Output-----\n2\n\n-----Explanation-----\nExample case 1: The two possible choices are $c_c=2, c_m=3$ (their binary representations differ by one bit, the shortest path has length $2$) and $c_c=1, c_m=2$ (there are two different bits in their binary representations and the shortest path has length $1$).\n\n Examples: \nInput: \n['1', '3', '1 2', '1 3', '1 2 3']\nOutput: \n ['2']\n",
  "1600": "Problem: \nShivam owns a gambling house, which has a special wheel called The Wheel of Fortune. \nThis wheel is meant for giving free coins to people coming in the house. \n\nThe wheel of fortune is a game of chance. It uses a spinning wheel with exactly N numbered pockets and a coin is placed in between every consecutive pocket. The wheel is spun in either of the two ways.\nBefore the wheel is turned, all the coins are restored and players bet on a number K.\nThen a needle is made to point to any one of the pocket which has number K written on it.\nWheel is then spun till the needle encounters number K again and the player gets all the coins the needle has encountered.\n\nShivam being the owner of the gambling house, has the authority to place the needle on any of the K numbered pockets and also he could rotate the wheel in either of the two ways.\nShivam has to figure out a way to minimize number of coins that he has to spend on every given bet.\nYou are given a wheel having N elements and Q players. Each player bets on a number K from the wheel. For each player you have to print minimum number of coins Shivam has to spend.\n\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases . The description of T testcases follow.\n\n- The first line of each test case contains single integer N .\n\n- The second line of each test case contains N space seperated integers denoting the numbers on the wheel.\n\n- The third line of each test case contains a single integer Q denoting the number of players.\n- Then, Q lines follow a single integer K from the N numbers of the wheel \n\n-----Output-----\nFor each player, output the minimum number of coins Shivam has to spend.\n\n\n-----Constraints-----\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 100000\n- 1 \u2264 Number written on the Wheel \u2264 1000\n- 1 \u2264 Q \u2264 10000\n- 1 \u2264 K \u2264 1000\n-  It is guaranteed that K belongs to the N numbers written on the wheel.\n\n-----Example-----\nInput:\n\n2\n\n3\n\n1 2 3\n\n3\n\n1\n\n2\n\n3\n\n6\n\n2 1 5 3 2 1\n\n4\n\n1\n\n2\n\n3\n\n5\nOutput:\n\n3\n\n3\n\n3\n\n2\n\n2\n\n6\n\n6\n\n Examples: \nInput: \n['2', '3', '1 2 3', '3', '1', '2', '3', '6', '2 1 5 3 2 1', '4', '1', '2', '3', '5']\nOutput: \n ['3', '3', '3', '2', '2', '6', '6']\n",
  "1601": "Problem: \nChef is playing a game with two of his friends. In this game, each player chooses an integer between $1$ and $P$ inclusive. Let's denote the integers chosen by Chef, friend 1 and friend 2 by $i$, $j$ and $k$ respectively; then,  Chef's score is\n(((Nmodi)modj)modk)modN.(((Nmodi)modj)modk)modN.(((N\\,\\mathrm{mod}\\,i)\\,\\mathrm{mod}\\,j)\\,\\mathrm{mod}\\,k)\\,\\mathrm{mod}\\,N\\,.\n\nChef wants to obtain the maximum possible score. Let's denote this maximum score by $M$. Find the number of ways to choose the triple $(i,j,k)$ so that Chef's score is equal to $M$.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers $N$ and $P$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of ways to obtain the maximum score.\n\n-----Constraints-----\n- $1 \\le T \\le 10^6$\n- $1 \\le N \\le P \\le 10^6$\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- $1 \\le T \\le 100$\n- $1 \\le N \\le P \\le 100$\nSubtask #2 (90 points): original constraints\n\n-----Example Input-----\n2\n4 4\n3 4\n\n-----Example Output-----\n9\n13\n\n-----Explanation-----\nExample case 1: Chef's maximum possible score is $M = 1$. All possible values of $(i, j, k)$ such that the score is $1$ are\n$(3, 2, 2)$,\n$(3, 2, 3)$,\n$(3, 2, 4)$,\n$(3, 3, 2)$,\n$(3, 3, 3)$,\n$(3, 3, 4)$,\n$(3, 4, 2)$,\n$(3, 4, 3)$,\n$(3, 4, 4)$.\n\n Examples: \nInput: \n['2', '4 4', '3 4']\nOutput: \n ['9', '13']\n",
  "1602": "Problem: \nThere is a girl named ''Akansha''. She is very fond of eating chocolates but she has a weak immune system due to which she gets cold after eating chocolate during morning, evening and night and can only eat at most $x$ number of chocolate each afternoon. A friend of hers gifted her some $n$ number of chocolates that she doesn't want to share with anyone. Those chocolate have to be finished before they expire. (no. of days in which they are going to expire from the day she has been gifted the chocolate is given for each chocolate)   $Note:$ Chocolate cannot be consumed on the day it expires.\n\nHelp Akansha to know if it is possible for her to finish all the chocolates before they expire or not.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- First line contains $n$,the number of chocolates gifted to her\n- Second line contains $x$,the number of chocolates she can eat each afternoon\n- Third line contains $n$ space separated integers $A1,A2...An$,denoting the expiry of each of the $n$ chocolates\n\n-----Output:-----\nFor each testcase, print $Possible$, if she can complete all the chocolates gifted to her. Otherwise, print $Impossible$, if she can not finish all the chocolates.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq n \\leq 1500$\n- $1 \\leq x \\leq 1500$\n- $1 \\leq Ai \\leq 1500$\n\n-----Subtasks-----\n- 100 points : $Original Constraints$\n\n-----Sample Input:-----\n3\n\n3\n\n5\n\n4 1 2\n\n5\n\n2\n\n4 4 3 2 2\n\n5\n\n1\n\n4 2 3 1 1   \n\n-----Sample Output:-----\nImpossible\n\nPossible\n\nImpossible   \n\n-----EXPLANATION:-----\n- \nExample case 1\n\n1st and 3rd chocolate on the 1st afternoon as she can consume at most 5. one chocolate will be wasted.\n$Note:$ she cannot eat the 2nd chocolate because chocolates cannot be consumed on the day of expiry.\n- \nExample case 2\n\n4th and 5th chocolate on 1st afternoon, 3rd and 1st chocolate on 2nd afternoon. And 2nd chocolate on the 3rd afternoon.\nIt will take a total of 3 days to finish the chocolate.\n- \nExample case 3\n\nShe cannot eat 4th and 5th chocolate as they will expire on the very 1st day, she can eat 2nd chocolate on 1st afternoon, then 3rd chocolate on 2nd afternoon, then 1st chocolate on 3rd afternoon, and 2 chocolates 4th and 5th will expire.\n\n Examples: \nInput: \n['3', '3', '5', '4 1 2', '5', '2', '4 4 3 2 2', '5', '1', '4 2 3 1 1']\nOutput: \n ['Impossible', 'Possible', 'Impossible']\n",
  "1603": "Problem: \nThere are some websites that are accessible through several different addresses. For example, for a long time Codeforces was accessible with two hostnames codeforces.com and codeforces.ru.\n\nYou are given a list of page addresses being queried. For simplicity we consider all addresses to have the form http://<hostname>[/<path>], where:\n\n  <hostname>\u00a0\u2014 server name (consists of words and maybe some dots separating them),  /<path>\u00a0\u2014 optional part, where <path> consists of words separated by slashes. \n\nWe consider two <hostname> to correspond to one website if for each query to the first <hostname> there will be exactly the same query to the second one and vice versa\u00a0\u2014 for each query to the second <hostname> there will be the same query to the first one. Take a look at the samples for further clarifications.\n\nYour goal is to determine the groups of server names that correspond to one website. Ignore groups consisting of the only server name.\n\nPlease note, that according to the above definition queries http://<hostname> and http://<hostname>/ are different.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of page queries. Then follow n lines each containing exactly one address. Each address is of the form http://<hostname>[/<path>], where:\n\n  <hostname> consists of lowercase English letters and dots, there are no two consecutive dots, <hostname> doesn't start or finish with a dot. The length of <hostname> is positive and doesn't exceed 20.  <path> consists of lowercase English letters, dots and slashes. There are no two consecutive slashes, <path> doesn't start with a slash and its length doesn't exceed 20. \n\nAddresses are not guaranteed to be distinct.\n\n\n-----Output-----\n\nFirst print k\u00a0\u2014 the number of groups of server names that correspond to one website. You should count only groups of size greater than one.\n\nNext k lines should contain the description of groups, one group per line. For each group print all server names separated by a single space. You are allowed to print both groups and names inside any group in arbitrary order.\n\n\n-----Examples-----\nInput\n10\nhttp://abacaba.ru/test\nhttp://abacaba.ru/\nhttp://abacaba.com\nhttp://abacaba.com/test\nhttp://abacaba.de/\nhttp://abacaba.ru/test\nhttp://abacaba.de/test\nhttp://abacaba.com/\nhttp://abacaba.com/t\nhttp://abacaba.com/test\n\nOutput\n1\nhttp://abacaba.de http://abacaba.ru \n\nInput\n14\nhttp://c\nhttp://ccc.bbbb/aba..b\nhttp://cba.com\nhttp://a.c/aba..b/a\nhttp://abc/\nhttp://a.c/\nhttp://ccc.bbbb\nhttp://ab.ac.bc.aa/\nhttp://a.a.a/\nhttp://ccc.bbbb/\nhttp://cba.com/\nhttp://cba.com/aba..b\nhttp://a.a.a/aba..b/a\nhttp://abc/aba..b/a\n\nOutput\n2\nhttp://cba.com http://ccc.bbbb \nhttp://a.a.a http://a.c http://abc\n\n Examples: \nInput: \n10\nhttp://abacaba.ru/test\nhttp://abacaba.ru/\nhttp://abacaba.com\nhttp://abacaba.com/test\nhttp://abacaba.de/\nhttp://abacaba.ru/test\nhttp://abacaba.de/test\nhttp://abacaba.com/\nhttp://abacaba.com/t\nhttp://abacaba.com/test\n\nOutput: \n 1\nhttp://abacaba.de http://abacaba.ru \n\nInput: \n14\nhttp://c\nhttp://ccc.bbbb/aba..b\nhttp://cba.com\nhttp://a.c/aba..b/a\nhttp://abc/\nhttp://a.c/\nhttp://ccc.bbbb\nhttp://ab.ac.bc.aa/\nhttp://a.a.a/\nhttp://ccc.bbbb/\nhttp://cba.com/\nhttp://cba.com/aba..b\nhttp://a.a.a/aba..b/a\nhttp://abc/aba..b/a\n\nOutput: \n 2\nhttp://cba.com http://ccc.bbbb \nhttp://a.a.a http://a.c http://abc \n\nInput: \n10\nhttp://tqr.ekdb.nh/w\nhttp://p.ulz/ifw\nhttp://w.gw.dw.xn/kpe\nhttp://byt.mqii.zkv/j/xt\nhttp://ovquj.rbgrlw/k..\nhttp://bv.plu.e.dslg/j/xt\nhttp://udgci.ufgi.gwbd.s/\nhttp://l.oh.ne.o.r/.vo\nhttp://l.oh.ne.o.r/w\nhttp://tqr.ekdb.nh/.vo\n\nOutput: \n 2\nhttp://l.oh.ne.o.r http://tqr.ekdb.nh \nhttp://bv.plu.e.dslg http://byt.mqii.zkv \n\nInput: \n12\nhttp://ickght.ck/mr\nhttp://a.exhel/.b\nhttp://a.exhel/\nhttp://ti.cdm/\nhttp://ti.cdm/x/wd/lm.h.\nhttp://ickght.ck/a\nhttp://ickght.ck\nhttp://c.gcnk.d/.b\nhttp://c.gcnk.d/x/wd/lm.h.\nhttp://ti.cdm/.b\nhttp://a.exhel/x/wd/lm.h.\nhttp://c.gcnk.d/\n\nOutput: \n 1\nhttp://a.exhel http://c.gcnk.d http://ti.cdm \n\nInput: \n14\nhttp://jr/kgb\nhttp://ps.p.t.jeua.x.a.q.t\nhttp://gsqqs.n/t/\nhttp://w.afwsnuc.ff.km/cohox/u.\nhttp://u.s.wbumkuqm/\nhttp://u.s.wbumkuqm/cohox/u.\nhttp://nq.dzjkjcwv.f.s/bvm/\nhttp://zoy.shgg\nhttp://gsqqs.n\nhttp://u.s.wbumkuqm/b.pd.\nhttp://w.afwsnuc.ff.km/\nhttp://w.afwsnuc.ff.km/b.pd.\nhttp://nq.dzjkjcwv.f.s/n\nhttp://nq.dzjkjcwv.f.s/ldbw\n\nOutput: \n 2\nhttp://ps.p.t.jeua.x.a.q.t http://zoy.shgg \nhttp://u.s.wbumkuqm http://w.afwsnuc.ff.km \n\nInput: \n15\nhttp://l.edzplwqsij.rw/\nhttp://m.e.mehd.acsoinzm/s\nhttp://yg.ttahn.xin.obgez/ap/\nhttp://qqbb.pqkaqcncodxmaae\nhttp://lzi.a.flkp.lnn.k/o/qfr.cp\nhttp://lzi.a.flkp.lnn.k/f\nhttp://p.ngu.gkoq/.szinwwi\nhttp://qqbb.pqkaqcncodxmaae/od\nhttp://qqbb.pqkaqcncodxmaae\nhttp://wsxvmi.qpe.fihtgdvi/e./\nhttp://p.ngu.gkoq/zfoh\nhttp://m.e.mehd.acsoinzm/xp\nhttp://c.gy.p.h.tkrxt.jnsjt/j\nhttp://wsxvmi.qpe.fihtgdvi/grkag.z\nhttp://p.ngu.gkoq/t\n\nOutput: \n 0\n\nInput: \n15\nhttp://w.hhjvdn.mmu/.ca.p\nhttp://m.p.p.lar/\nhttp://lgmjun.r.kogpr.ijn/./t\nhttp://bapchpl.mcw.a.lob/d/ym/./g.q\nhttp://uxnjfnjp.kxr.ss.e.uu/jwo./hjl/\nhttp://fd.ezw.ykbb.xhl.t/\nhttp://i.xcb.kr/.ca.p\nhttp://jofec.ry.fht.gt\nhttp://qeo.gghwe.lcr/d/ym/./g.q\nhttp://gt\nhttp://gjvifpf.d/d/ym/./g.q\nhttp://oba\nhttp://rjs.qwd/v/hi\nhttp://fgkj/\nhttp://ivun.naumc.l/.ca.p\n\nOutput: \n 4\nhttp://gt http://jofec.ry.fht.gt http://oba \nhttp://fd.ezw.ykbb.xhl.t http://fgkj http://m.p.p.lar \nhttp://i.xcb.kr http://ivun.naumc.l http://w.hhjvdn.mmu \nhttp://bapchpl.mcw.a.lob http://gjvifpf.d http://qeo.gghwe.lcr \n\nInput: \n20\nhttp://gjwr/xsoiagp/\nhttp://gdnmu/j\nhttp://yfygudx.e.aqa.ezh/j\nhttp://mpjxue.cuvipq/\nhttp://a/\nhttp://kr/..n/c.\nhttp://a/xsoiagp/\nhttp://kr/z\nhttp://kr/v.cv/rk/k\nhttp://lvhpz\nhttp://qv.v.jqzhq\nhttp://y.no/\nhttp://kr/n\nhttp://y.no/xsoiagp/\nhttp://kr/ebe/z/\nhttp://olsvbxxw.win.n/j\nhttp://p.ct/j\nhttp://mpjxue.cuvipq/xsoiagp/\nhttp://kr/j\nhttp://gjwr/\n\nOutput: \n 3\nhttp://lvhpz http://qv.v.jqzhq \nhttp://a http://gjwr http://mpjxue.cuvipq http://y.no \nhttp://gdnmu http://olsvbxxw.win.n http://p.ct http://yfygudx.e.aqa.ezh \n\nInput: \n1\nhttp://a\n\nOutput: \n 0\n\nInput: \n1\nhttp://a.a.a.f.r.f.q.e.w.a/fwe..sdfv....\n\nOutput: \n 0\n\nInput: \n3\nhttp://abacaba.com/test\nhttp://abacaba.de/test\nhttp://abacaba.de/test\n\nOutput: \n 1\nhttp://abacaba.com http://abacaba.de \n\n",
  "1605": "Problem: \nDreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if $\\operatorname{mod}(x, b) \\neq 0$ and $\\frac{\\operatorname{div}(x, b)}{\\operatorname{mod}(x, b)} = k$, where k is some integer number in range [1, a].\n\nBy $\\operatorname{div}(x, y)$ we denote the quotient of integer division of x and y. By $\\operatorname{mod}(x, y)$ we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.\n\nThe answer may be large, so please print its remainder modulo 1 000 000 007 (10^9 + 7). Can you compute it faster than Dreamoon?\n\n\n-----Input-----\n\nThe single line of the input contains two integers a, b (1 \u2264 a, b \u2264 10^7).\n\n\n-----Output-----\n\nPrint a single integer representing the answer modulo 1 000 000 007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n0\n\nInput\n2 2\n\nOutput\n8\n\n\n\n-----Note-----\n\nFor the first sample, there are no nice integers because $\\operatorname{mod}(x, 1)$ is always zero.\n\nFor the second sample, the set of nice integers is {3, 5}.\n\n Examples: \nInput: \n1 1\n\nOutput: \n 0\n\nInput: \n2 2\n\nOutput: \n 8\n\nInput: \n4 1\n\nOutput: \n 0\n\nInput: \n4 2\n\nOutput: \n 24\n\nInput: \n4 3\n\nOutput: \n 102\n\nInput: \n4 4\n\nOutput: \n 264\n\nInput: \n3 4\n\nOutput: \n 162\n\nInput: \n2 4\n\nOutput: \n 84\n\nInput: \n1 4\n\nOutput: \n 30\n\nInput: \n1000 1000\n\nOutput: \n 247750000\n\nInput: \n10000000 10000000\n\nOutput: \n 425362313\n\nInput: \n10000000 9999999\n\nOutput: \n 930564389\n\nInput: \n2 10000000\n\nOutput: \n 990423507\n\nInput: \n10000000 2\n\nOutput: \n 19300000\n\nInput: \n9999999 2\n\nOutput: \n 999300006\n\nInput: \n9999999 9999999\n\nOutput: \n 957764103\n\nInput: \n10000000 10000\n\nOutput: \n 723127969\n\nInput: \n10000 10000000\n\nOutput: \n 372369289\n\nInput: \n2 9999999\n\nOutput: \n 48573499\n\nInput: \n123456 123456\n\nOutput: \n 417111819\n\nInput: \n6407688 3000816\n\nOutput: \n 895399645\n\nInput: \n9956532 1084240\n\nOutput: \n 554368769\n\nInput: \n3505377 9167664\n\nOutput: \n 80435138\n\nInput: \n7054221 7251088\n\nOutput: \n 7849970\n\nInput: \n346169 367216\n\nOutput: \n 358144298\n\nInput: \n3895014 8450640\n\nOutput: \n 627604019\n\nInput: \n861392 6200826\n\nOutput: \n 180835815\n\nInput: \n4410236 9316955\n\nOutput: \n 602743722\n\nInput: \n2926377 2367675\n\nOutput: \n 395740917\n\nInput: \n1507925 5483803\n\nOutput: \n 727607740\n\nInput: \n9832578 8599931\n\nOutput: \n 428281878\n\nInput: \n8348718 6683355\n\nOutput: \n 275994807\n\nInput: \n1897562 4766779\n\nOutput: \n 148050609\n\nInput: \n413703 2850203\n\nOutput: \n 76966774\n\nInput: \n8995251 5966331\n\nOutput: \n 451718548\n\nInput: \n7319903 9017051\n\nOutput: \n 975259203\n\nInput: \n9253578 1799941\n\nOutput: \n 868664771\n\nInput: \n7835126 9883365\n\nOutput: \n 119844544\n\nInput: \n6351267 7966789\n\nOutput: \n 683811063\n\nInput: \n9900111 1082917\n\nOutput: \n 539539383\n\nInput: \n1 10000000\n\nOutput: \n 995024507\n\nInput: \n123456 234567\n\nOutput: \n 93010021\n\nInput: \n888888 888888\n\nOutput: \n 456888843\n\nInput: \n1001 1500126\n\nOutput: \n 45074025\n\nInput: \n9243243 432434\n\nOutput: \n 203891513\n\nInput: \n3 10000000\n\nOutput: \n 986197007\n\nInput: \n4108931 211273\n\nOutput: \n 142398939\n\nInput: \n999999 92321\n\nOutput: \n 286549418\n\nInput: \n999999 999999\n\nOutput: \n 691690639\n\nInput: \n191919 123123\n\nOutput: \n 358196438\n\nInput: \n999999 1000000\n\nOutput: \n 725921292\n\nInput: \n31623 10000000\n\nOutput: \n 382702377\n\nInput: \n1000023 1000043\n\nOutput: \n 175442768\n\nInput: \n666666 666666\n\nOutput: \n 869302791\n\nInput: \n7672285 753250\n\nOutput: \n 461773059\n\nInput: \n1000000 1000000\n\nOutput: \n 249917764\n\nInput: \n6340794 6874449\n\nOutput: \n 930977735\n\nInput: \n9998486 9998486\n\nOutput: \n 988877388\n\nInput: \n9999997 9999998\n\nOutput: \n 946983076\n\n",
  "1606": "Problem: \nTavak and Seyyed are good friends. Seyyed is very funny and he told Tavak to solve the following problem instead of longest-path.\n\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\n\n-----Input-----\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 10^9).\n\n\n-----Output-----\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n19 29\n\nOutput\n2\n\nInput\n3 6\n\nOutput\n3\n\n\n\n-----Note-----\n\nDefinition of a divisor: https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.\n\n Examples: \nInput: \n19 29\n\nOutput: \n 2\n\nInput: \n3 6\n\nOutput: \n 2\n\nInput: \n39 91\n\nOutput: \n 2\n\nInput: \n76 134\n\nOutput: \n 2\n\nInput: \n93 95\n\nOutput: \n 2\n\nInput: \n17 35\n\nOutput: \n 2\n\nInput: \n94 95\n\nOutput: \n 2\n\nInput: \n51 52\n\nOutput: \n 2\n\nInput: \n47 52\n\nOutput: \n 2\n\nInput: \n38 98\n\nOutput: \n 2\n\nInput: \n30 37\n\nOutput: \n 2\n\nInput: \n56 92\n\nOutput: \n 2\n\nInput: \n900000000 1000000000\n\nOutput: \n 2\n\nInput: \n37622224 162971117\n\nOutput: \n 2\n\nInput: \n760632746 850720703\n\nOutput: \n 2\n\nInput: \n908580370 968054552\n\nOutput: \n 2\n\nInput: \n951594860 953554446\n\nOutput: \n 2\n\nInput: \n347877978 913527175\n\nOutput: \n 2\n\nInput: \n620769961 988145114\n\nOutput: \n 2\n\nInput: \n820844234 892579936\n\nOutput: \n 2\n\nInput: \n741254764 741254768\n\nOutput: \n 2\n\nInput: \n80270976 80270977\n\nOutput: \n 2\n\nInput: \n392602363 392602367\n\nOutput: \n 2\n\nInput: \n519002744 519002744\n\nOutput: \n 519002744\n\nInput: \n331900277 331900277\n\nOutput: \n 331900277\n\nInput: \n419873015 419873018\n\nOutput: \n 2\n\nInput: \n349533413 349533413\n\nOutput: \n 349533413\n\nInput: \n28829775 28829776\n\nOutput: \n 2\n\nInput: \n568814539 568814539\n\nOutput: \n 568814539\n\nInput: \n720270740 720270743\n\nOutput: \n 2\n\nInput: \n871232720 871232722\n\nOutput: \n 2\n\nInput: \n305693653 305693653\n\nOutput: \n 305693653\n\nInput: \n634097178 634097179\n\nOutput: \n 2\n\nInput: \n450868287 450868290\n\nOutput: \n 2\n\nInput: \n252662256 252662260\n\nOutput: \n 2\n\nInput: \n575062045 575062049\n\nOutput: \n 2\n\nInput: \n273072892 273072894\n\nOutput: \n 2\n\nInput: \n770439256 770439256\n\nOutput: \n 770439256\n\nInput: \n2 1000000000\n\nOutput: \n 2\n\nInput: \n6 8\n\nOutput: \n 2\n\nInput: \n2 879190747\n\nOutput: \n 2\n\nInput: \n5 5\n\nOutput: \n 5\n\nInput: \n999999937 999999937\n\nOutput: \n 999999937\n\nInput: \n3 3\n\nOutput: \n 3\n\nInput: \n5 100\n\nOutput: \n 2\n\nInput: \n2 2\n\nOutput: \n 2\n\nInput: \n3 18\n\nOutput: \n 2\n\nInput: \n7 7\n\nOutput: \n 7\n\nInput: \n39916801 39916801\n\nOutput: \n 39916801\n\nInput: \n3 8\n\nOutput: \n 2\n\nInput: \n13 13\n\nOutput: \n 13\n\nInput: \n4 8\n\nOutput: \n 2\n\nInput: \n3 12\n\nOutput: \n 2\n\nInput: \n6 12\n\nOutput: \n 2\n\nInput: \n999999103 999999103\n\nOutput: \n 999999103\n\nInput: \n100000007 100000007\n\nOutput: \n 100000007\n\nInput: \n3 99\n\nOutput: \n 2\n\nInput: \n999999733 999999733\n\nOutput: \n 999999733\n\nInput: \n5 10\n\nOutput: \n 2\n\nInput: \n982451653 982451653\n\nOutput: \n 982451653\n\nInput: \n999900001 1000000000\n\nOutput: \n 2\n\nInput: \n999727999 999727999\n\nOutput: \n 999727999\n\nInput: \n2 999999999\n\nOutput: \n 2\n\nInput: \n242 244\n\nOutput: \n 2\n\nInput: \n3 10\n\nOutput: \n 2\n\nInput: \n15 27\n\nOutput: \n 2\n\nInput: \n998244353 998244353\n\nOutput: \n 998244353\n\nInput: \n5 15\n\nOutput: \n 2\n\nInput: \n999999797 999999797\n\nOutput: \n 999999797\n\nInput: \n2 3\n\nOutput: \n 2\n\nInput: \n999999929 999999929\n\nOutput: \n 999999929\n\nInput: \n3 111111\n\nOutput: \n 2\n\nInput: \n12 18\n\nOutput: \n 2\n\nInput: \n479001599 479001599\n\nOutput: \n 479001599\n\nInput: \n10000019 10000019\n\nOutput: \n 10000019\n\nInput: \n715827883 715827883\n\nOutput: \n 715827883\n\nInput: \n999992977 999992977\n\nOutput: \n 999992977\n\nInput: \n11 11\n\nOutput: \n 11\n\nInput: \n29 29\n\nOutput: \n 29\n\nInput: \n1000003 1000003\n\nOutput: \n 1000003\n\nInput: \n6 15\n\nOutput: \n 2\n\nInput: \n1200007 1200007\n\nOutput: \n 1200007\n\nInput: \n3 1000000000\n\nOutput: \n 2\n\nInput: \n990000023 990000023\n\nOutput: \n 990000023\n\nInput: \n1717 1717\n\nOutput: \n 1717\n\nInput: \n141650963 141650963\n\nOutput: \n 141650963\n\nInput: \n1002523 1002523\n\nOutput: \n 1002523\n\nInput: \n900000011 900000011\n\nOutput: \n 900000011\n\nInput: \n104729 104729\n\nOutput: \n 104729\n\nInput: \n4 12\n\nOutput: \n 2\n\nInput: \n100003 100003\n\nOutput: \n 100003\n\nInput: \n17 17\n\nOutput: \n 17\n\nInput: \n10 100\n\nOutput: \n 2\n\n",
  "1607": "Problem: \n\"QAQ\" is a word to denote an expression of crying. Imagine \"Q\" as eyes with tears and \"A\" as a mouth.\n\nNow Diamond has given Bort a string consisting of only uppercase English letters of length n. There is a great number of \"QAQ\" in the string (Diamond is so cute!). $8$ illustration by \u732b\u5c4b https://twitter.com/nekoyaliu \n\nBort wants to know how many subsequences \"QAQ\" are in the string Diamond has given. Note that the letters \"QAQ\" don't have to be consecutive, but the order of letters should be exact.\n\n\n-----Input-----\n\nThe only line contains a string of length n (1 \u2264 n \u2264 100). It's guaranteed that the string only contains uppercase English letters.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of subsequences \"QAQ\" in the string.\n\n\n-----Examples-----\nInput\nQAQAQYSYIOIWIN\n\nOutput\n4\n\nInput\nQAQQQZZYNOIWIN\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example there are 4 subsequences \"QAQ\": \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\", \"QAQAQYSYIOIWIN\".\n\n Examples: \nInput: \nQAQAQYSYIOIWIN\n\nOutput: \n 4\n\nInput: \nQAQQQZZYNOIWIN\n\nOutput: \n 3\n\nInput: \nQA\n\nOutput: \n 0\n\nInput: \nIAQVAQZLQBQVQFTQQQADAQJA\n\nOutput: \n 24\n\nInput: \nQQAAQASGAYAAAAKAKAQIQEAQAIAAIAQQQQQ\n\nOutput: \n 378\n\nInput: \nAMVFNFJIAVNQJWIVONQOAOOQSNQSONOASONAONQINAONAOIQONANOIQOANOQINAONOQINAONOXJCOIAQOAOQAQAQAQAQWWWAQQAQ\n\nOutput: \n 1077\n\nInput: \nAAQQAXBQQBQQXBNQRJAQKQNAQNQVDQASAGGANQQQQTJFFQQQTQQA\n\nOutput: \n 568\n\nInput: \nKAZXAVLPJQBQVQQQQQAPAQQGQTQVZQAAAOYA\n\nOutput: \n 70\n\nInput: \nW\n\nOutput: \n 0\n\nInput: \nDBA\n\nOutput: \n 0\n\nInput: \nRQAWNACASAAKAGAAAAQ\n\nOutput: \n 10\n\nInput: \nQJAWZAAOAAGIAAAAAOQATASQAEAAAAQFQQHPA\n\nOutput: \n 111\n\nInput: \nQQKWQAQAAAAAAAAGAAVAQUEQQUMQMAQQQNQLAMAAAUAEAAEMAAA\n\nOutput: \n 411\n\nInput: \nQQUMQAYAUAAGWAAAQSDAVAAQAAAASKQJJQQQQMAWAYYAAAAAAEAJAXWQQ\n\nOutput: \n 625\n\nInput: \nQORZOYAQ\n\nOutput: \n 1\n\nInput: \nQCQAQAGAWAQQQAQAVQAQQQQAQAQQQAQAAATQAAVAAAQQQQAAAUUQAQQNQQWQQWAQAAQQKQYAQAAQQQAAQRAQQQWBQQQQAPBAQGQA\n\nOutput: \n 13174\n\nInput: \nQQAQQAKQFAQLQAAWAMQAZQAJQAAQQOACQQAAAYANAQAQQAQAAQQAOBQQJQAQAQAQQQAAAAABQQQAVNZAQQQQAMQQAFAAEAQAQHQT\n\nOutput: \n 10420\n\nInput: \nAQEGQHQQKQAQQPQKAQQQAAAAQQQAQEQAAQAAQAQFSLAAQQAQOQQAVQAAAPQQAWAQAQAFQAXAQQQQTRLOQAQQJQNQXQQQQSQVDQQQ\n\nOutput: \n 12488\n\nInput: \nQNQKQQQLASQBAVQQQQAAQQOQRJQQAQQQEQZUOANAADAAQQJAQAQARAAAQQQEQBHTQAAQAAAAQQMKQQQIAOJJQQAQAAADADQUQQQA\n\nOutput: \n 9114\n\nInput: \nQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n\nOutput: \n 35937\n\nInput: \nAMQQAAQAAQAAAAAAQQQBOAAANAAKQJCYQAE\n\nOutput: \n 254\n\nInput: \nAYQBAEQGAQEOAKGIXLQJAIAKQAAAQPUAJAKAATFWQQAOQQQUFQYAQQMQHOKAAJXGFCARAQSATHAUQQAATQJJQDQRAANQQAE\n\nOutput: \n 2174\n\nInput: \nAAQXAAQAYQAAAAGAQHVQYAGIVACADFAAQAAAAQZAAQMAKZAADQAQDAAQDAAAMQQOXYAQQQAKQBAAQQKAXQBJZDDLAAHQQ\n\nOutput: \n 2962\n\nInput: \nAYQQYAVAMNIAUAAKBBQVACWKTQSAQZAAQAAASZJAWBCAALAARHACQAKQQAQAARPAQAAQAQAAZQUSHQAMFVFZQQQQSAQQXAA\n\nOutput: \n 2482\n\nInput: \nLQMAQQARQAQBJQQQAGAAZQQXALQQAARQAQQQQAAQQAQQQAQQCAQQAQQAYQQQRAAZATQALYQQAAHHAAQHAAAAAAAAQQMAAQNAKQ\n\nOutput: \n 7768\n\nInput: \nMAQQWAQOYQMAAAQAQPQZAOAAQAUAQNAAQAAAITQSAQAKAQKAQQWSQAAQQAGUCDQMQWKQUXKWQQAAQQAAQQZQDQQQAABXQUUXQOA\n\nOutput: \n 5422\n\nInput: \nQTAAQDAQXAQQJQQQGAAAQQQQSBQZKAQQAQQQQEAQNUQBZCQLYQZQEQQAAQHQVAORKQVAQYQNASZQAARZAAGAAAAOQDCQ\n\nOutput: \n 3024\n\nInput: \nQQWAQQGQQUZQQQLZAAQYQXQVAQFQUAQZUQZZQUKBHSHTQYLQAOQXAQQGAQQTQOAQARQADAJRAAQPQAQQUQAUAMAUVQAAAQQAWQ\n\nOutput: \n 4527\n\nInput: \nQQAAQQAQVAQZQQQQAOEAQZPQIBQZACQQAFQQLAAQDATZQANHKYQQAQTAAFQRQAIQAJPWQAQTEIRXAEQQAYWAAAUKQQAQAQQQSQQH\n\nOutput: \n 6416\n\nInput: \nAQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAAAA\n\nOutput: \n 14270\n\nInput: \nAQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQ\n\nOutput: \n 13136\n\nInput: \nAQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAA\n\nOutput: \n 14270\n\nInput: \nAQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQQAA\n\nOutput: \n 14231\n\nInput: \nQQQQQAQAAQQAQAQAAAAAAAAAQAQAAAAAQAQAQQQAQQQAAAQQQAAAAAAAQAAAAQQQQQQQAQQQQAQAAAQAAAAAQAQAAAAAQAQAA\n\nOutput: \n 15296\n\nInput: \nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n\nOutput: \n 0\n\nInput: \nQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n\nOutput: \n 0\n\nInput: \nQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\n\nOutput: \n 0\n\nInput: \nQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQA\n\nOutput: \n 20825\n\nInput: \nAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQAQ\n\nOutput: \n 20825\n\nInput: \nQ\n\nOutput: \n 0\n\nInput: \nA\n\nOutput: \n 0\n\nInput: \nFFF\n\nOutput: \n 0\n\nInput: \nAAAAAA\n\nOutput: \n 0\n\n",
  "1608": "Problem: \nWrite a function that accepts a square matrix (`N x N` 2D array) and returns the determinant of the matrix.\n\nHow to take the determinant of a matrix -- it is simplest to start with the smallest cases:\n\nA 1x1 matrix `|a|` has determinant `a`.\n\nA 2x2 matrix `[ [a, b], [c, d] ]` or\n```\n|a  b|\n|c  d|\n```\nhas determinant: `a*d - b*c`.\n\nThe determinant of an `n x n` sized matrix is calculated by reducing the problem to the calculation of the determinants of `n` matrices of`n-1 x n-1` size.\n\nFor the 3x3 case, `[ [a, b, c], [d, e, f], [g, h, i] ]` or\n```\n|a b c|  \n|d e f|  \n|g h i|  \n```\nthe determinant is: `a * det(a_minor) - b * det(b_minor) + c * det(c_minor)` where `det(a_minor)` refers to taking the determinant of the 2x2 matrix created by crossing out the row and column in which the element a occurs:\n```\n|- - -|\n|- e f|\n|- h i|  \n```\nNote the alternation of signs. \n\nThe determinant of larger matrices are calculated analogously, e.g. if M is a 4x4 matrix with first row `[a, b, c, d]`, then:\n\n`det(M) = a * det(a_minor) - b * det(b_minor) + c * det(c_minor) - d * det(d_minor)`\n\n Examples: \nInput: \n[[[5]]]\nOutput: \n [5]\n",
  "1609": "Problem: \nWrite a function called `sumIntervals`/`sum_intervals()` that accepts an array of intervals, and returns the sum of all the interval lengths. Overlapping intervals should only be counted once.\n\n### Intervals\n\nIntervals are represented by a pair of integers in the form of an array. The first value of the interval will always be less than the second value. Interval example: `[1, 5]` is an interval from 1 to 5. The length of this interval is 4.\n\n### Overlapping Intervals\n\nList containing overlapping intervals:\n\n```\n[\n   [1,4],\n   [7, 10],\n   [3, 5]\n]\n```\n\nThe sum of the lengths of these intervals is 7. Since [1, 4] and [3, 5] overlap, we can treat the interval as [1, 5], which has a length of 4.\n\n### Examples:\n\n```C#\n// empty intervals\nIntervals.SumIntervals(new (int, int)[]{ });  // => 0\nIntervals.SumIntervals(new (int, int)[]{ (2, 2), (5, 5)});  // => 0\n\n// disjoined intervals\nIntervals.SumIntervals(new (int, int)[]{\n  (1, 2), (3, 5)\n});  // => (2-1) + (5-3) = 3\n\n// overlapping intervals\nIntervals.SumIntervals(new (int, int)[]{\n  (1, 4), (3, 6), (2, 8)\n});  // (1,8) => 7\n```\n\n Examples: \nInput: \n[[[1, 5]]]\nOutput: \n [4]\n",
  "1610": "Problem: \n# Task\n You are given integer `n` determining set S = {1, 2, ..., n}. Determine if the number of k-element subsets of S is `ODD` or `EVEN` for given integer k.\n\n# Example\n\n For `n = 3, k = 2`, the result should be `\"ODD\"`\n \n In this case, we have 3 2-element subsets of {1, 2, 3}:\n \n `{1, 2}, {1, 3}, {2, 3}`\n\n For `n = 2, k = 1`, the result should be `\"EVEN\"`.\n \n In this case, we have 2 1-element subsets of {1, 2}:\n \n `{1}, {2}`\n\n `Don't bother with naive solution - numbers here are really big.`\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n    `1 <= n <= 10^9`\n\n\n - `[input]` integer `k`\n\n    `1 <= k <= n`\n\n\n - `[output]` a string\n\n    `\"EVEN\"` or `\"ODD\"` depending if the number of k-element subsets of S = {1, 2, ..., n} is ODD or EVEN.\n\n Examples: \nInput: \n[3, 2]\nOutput: \n ['ODD']\nInput: \n[2, 1]\nOutput: \n ['EVEN']\nInput: \n[1, 1]\nOutput: \n ['ODD']\nInput: \n[20, 10]\nOutput: \n ['EVEN']\nInput: \n[48, 12]\nOutput: \n ['EVEN']\n",
  "1611": "Problem: \n# 'Magic' recursion call depth number\n\nThis Kata was designed as a Fork to the one from donaldsebleung Roboscript series with a reference to:\n\nhttps://www.codewars.com/collections/roboscript\n\nIt is not more than an extension of Roboscript infinite \"single-\" mutual recursion handling to a \"multiple-\" case.\n\nOne can suppose that you have a machine that works through a specific language. It uses the script, which consists of 3 major commands:\n\n - `F` - Move forward by 1 step in the direction that it is currently pointing.\n\n - `L` - Turn \"left\" (i.e. rotate 90 degrees anticlockwise).\n\n - `R` - Turn \"right\" (i.e. rotate 90 degrees clockwise).\n\nThe number n afterwards enforces the command to execute n times.\n\nTo improve its efficiency machine language is enriched by patterns that are containers to pack and unpack the script.\n\nThe basic syntax for defining a pattern is as follows:\n\n`pnq`\n\nWhere:\n\n - `p` is a \"keyword\" that declares the beginning of a pattern definition \n\n - `n` is a non-negative integer, which acts as a unique identifier for the pattern (pay attention, it may contain several digits).\n\n - `` is a valid RoboScript code (without the angled brackets)\n\n - `q` is a \"keyword\" that marks the end of a pattern definition \n\nFor example, if you want to define `F2LF2` as a pattern and reuse it later:\n\n```\np333F2LF2q\n```\n\nTo invoke a pattern, a capital `P` followed by the pattern identifier `(n)` is used:\n\n```\nP333\n```\n\nIt doesn't matter whether the invocation of the pattern or the pattern definition comes first. Pattern definitions should always be parsed first.\n\n```\nP333p333P11F2LF2qP333p11FR5Lq\n```\n\n\n\n# ___Infinite recursion___\n\nAs we don't want a robot to be damaged or damaging someone else by becoming uncontrolable when stuck in an infinite loop, it's good to considere this possibility in the programs and to build a compiler that can detect such potential troubles before they actually happen.\n\n* ### Single pattern recursion infinite loop\n\nThis is the simplest case, that occurs when the pattern is invoked inside its definition:\n\n    p333P333qP333 => depth = 1: P333 -> (P333)\n\n\n* ### Single mutual recursion infinite loop\n\nOccurs when a pattern calls to unpack the mutual one, which contains a callback to the first:\n\n    p1P2qp2P1qP2  => depth = 2: P2 -> P1 -> (P2)\n\n\n* ### Multiple mutual recursion infinite loop\n\nOccurs within the combo set of mutual callbacks without termination: \n\n    p1P2qp2P3qp3P1qP3 => depth = 3: P3 -> P1 -> P2 -> (P3)\n\n* ### No infinite recursion: terminating branch\n\nThis happens when the program can finish without encountering an infinite loop. Meaning the depth will be considered 0. Some examples below:\n\n    P4p4FLRq      => depth = 0\n    p1P2qp2R5qP1  => depth = 0\n    p1P2qp2P1q    => depth = 0 (no call)\n\n\n\n\n\n# Task\n\n\nYour interpreter should be able to analyse infinite recursion profiles in the input program, including multi-mutual cases.\n\nThough, rather than to analyse only the first encountered infinite loop and get stuck in it like the robot would be, your code will have continue deeper in the calls to find the depth of any infinite recursion or terminating call. Then it should return the minimal and the maximal depths encountered, as an array `[min, max]`.\n\n\n### About the exploration of the different possible branches of the program:\n\n* Consider only patterns that are to be executed:\n\n```\np1P1q                 => should return [0, 0], there is no execution\np1P2P3qp2P1qp3P1q     => similarly [0, 0]\np1P1qP1               => returns [1, 1]\n```\n\n* All patterns need to be executed, strictly left to right. Meaning that you may encounter several branches:\n\n```\np1P2P3qp2P1qp3P1qP3   => should return [2, 3]\n\nP3 -> P1 -> P2 -> (P1)    depth = 3 (max)\n        \\-> (P3)          depth = 2 (min)\n```\n\n\n\n# Input\n\n* A valid RoboScript program, as string.\n* Nested definitions of patterns, such as `p1...p2***q...q` will not be tested, even if that could be of interest as a Roboscript improvement.\n* All patterns will have a unique identifier.\n* Since the program is valid, you won't encounter calls to undefined pattern either.\n\n\n# Output\n\n* An array `[min, max]`, giving what are the minimal and the maximal recursion depths encountered.\n\n### Examples\n```\np1F2RF2LqP1         =>  should return [0, 0], no infinite recursion detected\n\np1F2RP1F2LqP1       =>  should return [1, 1], infinite recursion detection case\n\nP2p1P2qp2P1q        =>  should return [2, 2], single mutual infinite recursion case\n\np1P2qP3p2P3qp3P1q   =>  should return [3, 3], twice mutual infinite recursion case\n\np1P2P1qp2P3qp3P1qP1 =>  should return [1, 3], mixed infinite recursion case\n```\n\n Examples: \nInput: \n['p0F2LF2RqP0']\nOutput: \n [[0, 0]]\nInput: \n['p1P2P3qp2P1qp3P1qP3']\nOutput: \n [[2, 3]]\nInput: \n['p1P2qp2P3qP4p3P4qp4P1q']\nOutput: \n [[4, 4]]\nInput: \n['p1P2P4qp2P3qp3P4qP1p4P1q']\nOutput: \n [[2, 4]]\nInput: \n['p1P2P3qP2P1p2P3qp3P4qp4P1q']\nOutput: \n [[3, 4]]\nInput: \n['p1P2qp2P3qp3P4qP6p4P1qp5P7qp6P5qp7P6qP1']\nOutput: \n [[3, 4]]\nInput: \n['P1P2P7p1P2qp2P3qp3P4qp4P1qp5P7qp6P5qp7P5q']\nOutput: \n [[2, 4]]\nInput: \n['P2P7P6p1P2qp2P3qp3P4qp4P1qp5P8qp6P5qp7P5qp8P7q']\nOutput: \n [[3, 4]]\nInput: \n['P9P1P7P5P4p1P2qp2P3qp3P4qp4P1qp5P8qp7P5qp8P7qp9F2q']\nOutput: \n [[0, 4]]\nInput: \n['p6023R6F95L64R98P3321L15qP8886P8063P2161p3321P6023P6023F86L64qp8886F12F3L33P3321P3321R57qp8063P3321L35P3321P8886P6023F51qp2161P8063P8063F32R6F46q']\nOutput: \n [[3, 5]]\nInput: \n['p5048L50R23P2998R9qp2125P3445R41R48qp1776R41P392qP2904p2998R4P2125P1776qp3445F57P1776F37R70qp392P2998R28P3445F55qp2904P3445L14L42R29P392q']\nOutput: \n [[4, 6]]\n",
  "1613": "Problem: \nComplete the solution so that it strips all text that follows any of a set of comment markers passed in. Any whitespace at the end of the line should also be stripped out. \n\n**Example:**\n\nGiven an input string of:\n```\napples, pears # and bananas\ngrapes\nbananas !apples\n```\n\nThe output expected would be:\n```\napples, pears\ngrapes\nbananas\n```\n\nThe code would be called like so:\n\n```python\nresult = solution(\"apples, pears # and bananas\\ngrapes\\nbananas !apples\", [\"#\", \"!\"])\n# result should == \"apples, pears\\ngrapes\\nbananas\"\n\n```\n\n Examples: \nInput: \n['apples, pears # and bananas\\ngrapes\\nbananas !apples', ['#', '!']]\nOutput: \n ['apples, pears\\ngrapes\\nbananas']\nInput: \n['a #b\\nc\\nd $e f g', ['#', '$']]\nOutput: \n ['a\\nc\\nd']\nInput: \n['apples, pears # and bananas\\ngrapes\\nbananas !#apples', ['#', '!']]\nOutput: \n ['apples, pears\\ngrapes\\nbananas']\nInput: \n['apples, pears # and bananas\\ngrapes\\nbananas #!apples', ['#', '!']]\nOutput: \n ['apples, pears\\ngrapes\\nbananas']\nInput: \n['apples, pears # and bananas\\ngrapes\\navocado @apples', ['@', '!']]\nOutput: \n ['apples, pears # and bananas\\ngrapes\\navocado']\nInput: \n['apples, pears \u00a7 and bananas\\ngrapes\\navocado *apples', ['*', '\u00a7']]\nOutput: \n ['apples, pears\\ngrapes\\navocado']\nInput: \n['', ['#', '!']]\nOutput: \n ['']\nInput: \n['#', ['#', '!']]\nOutput: \n ['']\nInput: \n['\\n\u00a7', ['#', '\u00a7']]\nOutput: \n ['\\n']\nInput: \n['apples, pears # and bananas\\ngrapes\\nbananas !apples', []]\nOutput: \n ['apples, pears # and bananas\\ngrapes\\nbananas !apples']\n",
  "1614": "Problem: \n# Connect Four\n\nTake a look at wiki description of Connect Four game:\n\n[Wiki Connect Four](https://en.wikipedia.org/wiki/Connect_Four)\n\nThe grid is 6 row by 7 columns, those being named from A to G.\n\nYou will receive a list of strings showing the order of the pieces which dropped in columns:\n\n```python\n  pieces_position_list = [\"A_Red\",\n                          \"B_Yellow\",\n                          \"A_Red\",\n                          \"B_Yellow\",\n                          \"A_Red\",\n                          \"B_Yellow\",\n                          \"G_Red\",\n                          \"B_Yellow\"]\n```\n\nThe list may contain up to 42 moves and shows the order the players are playing.\n\nThe first player who connects four items of the same color is the winner.\n\nYou should return \"Yellow\", \"Red\" or \"Draw\" accordingly.\n\n Examples: \nInput: \n[['C_Yellow', 'E_Red', 'G_Yellow', 'B_Red', 'D_Yellow', 'B_Red', 'B_Yellow', 'G_Red', 'C_Yellow', 'C_Red', 'D_Yellow', 'F_Red', 'E_Yellow', 'A_Red', 'A_Yellow', 'G_Red', 'A_Yellow', 'F_Red', 'F_Yellow', 'D_Red', 'B_Yellow', 'E_Red', 'D_Yellow', 'A_Red', 'G_Yellow', 'D_Red', 'D_Yellow', 'C_Red']]\nOutput: \n ['Yellow']\nInput: \n[['C_Yellow', 'B_Red', 'B_Yellow', 'E_Red', 'D_Yellow', 'G_Red', 'B_Yellow', 'G_Red', 'E_Yellow', 'A_Red', 'G_Yellow', 'C_Red', 'A_Yellow', 'A_Red', 'D_Yellow', 'B_Red', 'G_Yellow', 'A_Red', 'F_Yellow', 'B_Red', 'D_Yellow', 'A_Red', 'F_Yellow', 'F_Red', 'B_Yellow', 'F_Red', 'F_Yellow', 'G_Red', 'A_Yellow', 'F_Red', 'C_Yellow', 'C_Red', 'G_Yellow', 'C_Red', 'D_Yellow', 'D_Red', 'E_Yellow', 'D_Red', 'E_Yellow', 'C_Red', 'E_Yellow', 'E_Red']]\nOutput: \n ['Yellow']\nInput: \n[['F_Yellow', 'G_Red', 'D_Yellow', 'C_Red', 'A_Yellow', 'A_Red', 'E_Yellow', 'D_Red', 'D_Yellow', 'F_Red', 'B_Yellow', 'E_Red', 'C_Yellow', 'D_Red', 'F_Yellow', 'D_Red', 'D_Yellow', 'F_Red', 'G_Yellow', 'C_Red', 'F_Yellow', 'E_Red', 'A_Yellow', 'A_Red', 'C_Yellow', 'B_Red', 'E_Yellow', 'C_Red', 'E_Yellow', 'G_Red', 'A_Yellow', 'A_Red', 'G_Yellow', 'C_Red', 'B_Yellow', 'E_Red', 'F_Yellow', 'G_Red', 'G_Yellow', 'B_Red', 'B_Yellow', 'B_Red']]\nOutput: \n ['Red']\nInput: \n[['A_Yellow', 'B_Red', 'B_Yellow', 'C_Red', 'G_Yellow', 'C_Red', 'C_Yellow', 'D_Red', 'G_Yellow', 'D_Red', 'G_Yellow', 'D_Red', 'F_Yellow', 'E_Red', 'D_Yellow']]\nOutput: \n ['Red']\nInput: \n[['A_Red', 'B_Yellow', 'A_Red', 'B_Yellow', 'A_Red', 'B_Yellow', 'G_Red', 'B_Yellow']]\nOutput: \n ['Yellow']\n",
  "1615": "Problem: \n### Lyrics...\n\nPyramids are amazing! Both in architectural and mathematical sense. If you have a computer, you can mess with pyramids even if you are not in Egypt at the time. For example, let's consider the following problem. Imagine that you have a pyramid built of numbers, like this one here:\n\n```\n   /3/\n  \\7\\ 4 \n 2 \\4\\ 6 \n8 5 \\9\\ 3\n```\n\n### Here comes the task...\n\nLet's say that the *'slide down'* is the maximum sum of consecutive numbers from the top to the bottom of the pyramid. As you can see, the longest *'slide down'* is `3 + 7 + 4 + 9 = 23`\n\nYour task is to write a function `longestSlideDown` (in ruby: `longest_slide_down`) that takes a pyramid representation as argument and returns its' __largest__ *'slide down'*. For example,\n\n```python\nlongestSlideDown([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]) => 23\n```\n\n### By the way...\n\nMy tests include some extraordinarily high pyramids so as you can guess, brute-force method is a bad idea unless you have a few centuries to waste. You must come up with something more clever than that.\n\n(c) This task is a lyrical version of the __Problem 18__ and/or __Problem 67__ on [ProjectEuler](https://projecteuler.net).\n\n Examples: \nInput: \n[[[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]]\nOutput: \n [23]\nInput: \n[[[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]]\nOutput: \n [1074]\nInput: \n[[[59], [73, 41], [52, 40, 9], [26, 53, 6, 34], [10, 51, 87, 86, 81], [61, 95, 66, 57, 25, 68], [90, 81, 80, 38, 92, 67, 73], [30, 28, 51, 76, 81, 18, 75, 44], [84, 14, 95, 87, 62, 81, 17, 78, 58], [21, 46, 71, 58, 2, 79, 62, 39, 31, 9], [56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15], [78, 53, 4, 21, 84, 93, 32, 13, 97, 11, 37, 51], [45, 3, 81, 79, 5, 18, 78, 86, 13, 30, 63, 99, 95], [39, 87, 96, 28, 3, 38, 42, 17, 82, 87, 58, 7, 22, 57], [6, 17, 51, 17, 7, 93, 9, 7, 75, 97, 95, 78, 87, 8, 53], [67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28], [76, 40, 41, 4, 87, 16, 9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87], [12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35], [70, 39, 6, 5, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86], [66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 5, 98, 3, 2, 60], [38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 2, 90, 45, 13, 31, 61, 83, 73, 47], [36, 10, 63, 96, 60, 49, 41, 5, 37, 42, 14, 58, 84, 93, 96, 17, 9, 43, 5, 43, 6, 59], [66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18], [54, 42, 5, 79, 30, 49, 99, 73, 46, 37, 50, 2, 45, 9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45], [71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 9, 2], [33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 7, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 5], [92, 9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 5, 57, 7, 54, 69, 21, 67, 43, 17, 63, 12], [24, 59, 6, 8, 98, 74, 66, 26, 61, 60, 13, 3, 9, 9, 24, 30, 71, 8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34], [66, 82, 67, 4, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 4, 53, 22, 83, 41, 9, 74, 90], [48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 8, 19, 54, 89, 29, 73, 68, 42, 14, 8, 16, 70, 37], [37, 60, 69, 70, 72, 71, 9, 59, 13, 60, 38, 13, 57, 36, 9, 30, 43, 89, 30, 39, 15, 2, 44, 73, 5, 73, 26, 63, 56, 86, 12], [55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 3, 21, 27, 22, 19, 26, 82, 69, 54, 4, 13, 7, 85, 14, 1, 15, 70, 59, 89, 95, 10, 19], [4, 9, 31, 92, 91, 38, 92, 86, 98, 75, 21, 5, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 3, 43, 22], [75, 63, 2, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 8, 65, 78, 3, 85, 41, 57, 79, 39, 52, 33, 48], [78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 7, 4, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93], [42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 5, 94, 7, 69, 51, 96, 3, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 4, 53, 85, 92, 25, 65], [52, 9, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 6, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 3, 3, 19, 11, 28, 42, 75, 45, 45], [61, 31, 61, 68, 96, 34, 49, 39, 5, 71, 76, 59, 62, 67, 6, 47, 96, 99, 34, 21, 32, 47, 52, 7, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46], [1, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63], [93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 1, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 2, 62, 2, 65, 94, 42, 14, 94], [32, 73, 9, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 6, 2, 83, 50, 60, 66], [32, 1, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 6, 69, 84, 14, 22, 56, 43, 9, 48, 66, 69, 83, 91, 60, 40, 36, 61], [92, 48, 22, 99, 15, 95, 64, 43, 1, 16, 94, 2, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 8, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 9], [91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 6, 1, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 7, 42, 38, 42, 74, 83, 2, 5], [46, 19, 77, 66, 24, 18, 5, 32, 2, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 2, 7, 3, 76, 86], [99, 98, 84, 93, 7, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 5, 37, 29, 24, 96, 3, 27, 70, 62, 13, 4, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 4, 71, 66, 78, 70, 53, 99], [67, 60, 38, 6, 88, 4, 17, 72, 10, 99, 71, 7, 42, 25, 54, 5, 26, 64, 91, 50, 45, 71, 6, 30, 67, 48, 69, 82, 8, 56, 80, 67, 18, 46, 66, 63, 1, 20, 8, 80, 47, 7, 91, 16, 3, 79, 87], [18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 2, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 2, 5, 49, 3, 50, 77, 6, 32, 84, 27, 18, 38], [68, 1, 50, 4, 3, 21, 42, 94, 53, 24, 89, 5, 92, 26, 52, 36, 68, 11, 85, 1, 4, 42, 2, 45, 15, 6, 50, 4, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 4, 40, 46, 2, 58, 87], [94, 10, 2, 78, 88, 52, 21, 3, 88, 60, 6, 53, 49, 71, 20, 91, 12, 65, 7, 49, 21, 22, 11, 41, 58, 99, 36, 16, 9, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 2, 99, 43, 76, 81, 71, 29, 39, 49, 17], [64, 39, 59, 84, 86, 16, 17, 66, 3, 9, 43, 6, 64, 18, 63, 29, 68, 6, 23, 7, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 5, 54, 41, 39, 66], [43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 8, 76, 35, 11, 4, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 7, 31, 38, 26, 8, 15, 56, 88, 86, 1, 52, 62, 10, 24, 32, 5, 60, 65, 53, 28, 57, 99], [3, 50, 3, 52, 7, 73, 49, 92, 66, 80, 1, 46, 8, 67, 25, 36, 73, 93, 7, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 9, 79, 94, 83, 53, 9, 40, 69, 62, 10, 79, 49, 47, 3, 81, 30], [71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 3, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 9, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 9, 69, 20, 36], [73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 7, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 2, 56, 47, 7, 49, 2], [76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16], [3, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 4, 13, 82, 4, 91, 43, 40, 12, 52, 29, 99, 7, 76, 60, 25, 1, 7, 61, 71, 37, 92, 40, 47, 99, 66, 57, 1, 43, 44, 22, 40, 53, 53, 9, 69, 26, 81, 7], [49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 4, 79, 96, 3, 31, 45, 71, 81, 6, 14, 18, 17, 5, 31, 50, 92, 79, 23, 47, 9, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85], [37, 18, 62, 85, 87, 28, 64, 5, 77, 51, 47, 26, 30, 65, 5, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 1, 30, 63, 15, 49, 48, 41, 17, 67, 47, 3, 68, 20, 90, 98, 32, 4, 40, 68], [90, 51, 58, 60, 6, 55, 23, 68, 5, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 5, 17, 70, 83, 96, 93, 6, 4, 78, 47, 80, 6, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38], [57, 95, 64, 6, 53, 36, 82, 51, 40, 33, 47, 14, 7, 98, 78, 65, 39, 58, 53, 6, 50, 53, 4, 69, 40, 68, 36, 69, 75, 78, 75, 60, 3, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11], [18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 2, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83], [81, 72, 93, 19, 69, 52, 48, 1, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 5, 42, 28, 89, 90, 99, 32, 72, 84, 17, 8, 87, 36, 3, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 8, 23, 11, 87, 99, 33, 47, 2, 14, 44, 73, 70, 99, 43, 35, 33], [90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 1, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 4, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 3, 84, 23, 44, 89, 72, 35, 8, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 4, 71, 32, 95], [37, 13, 4, 22, 64, 37, 37, 28, 56, 62, 86, 33, 7, 37, 10, 44, 52, 82, 52, 6, 19, 52, 57, 75, 90, 26, 91, 24, 6, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 3, 64, 56, 97, 87, 63, 22, 34, 3, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47], [77, 23, 26, 70, 72, 76, 77, 4, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 6, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 1, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 5, 45, 73, 82, 47, 74, 44], [22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 3, 24, 59, 27, 98, 77, 4, 9, 37, 40, 12, 26, 87, 9, 71, 70, 7, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 7, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69], [72, 23, 63, 66, 1, 11, 7, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 1, 88, 66, 99, 21, 41, 95, 80, 2, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88], [8, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 5, 16, 23, 27, 10, 67, 2, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 9, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 3, 60, 94, 42, 47, 9, 34, 94, 93, 72], [56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 6, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 8, 22, 97, 32, 85, 27], [91, 53, 40, 28, 13, 34, 91, 25, 1, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 8, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 7, 46, 94, 22, 20, 5, 53, 64, 56, 30, 5, 56, 61, 88, 27], [23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 7, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 2, 22, 5, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 9, 3, 40, 38, 12, 3, 32], [9, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 5, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 7, 79, 9, 19, 56, 36, 42, 30, 23, 69, 73, 72, 7, 5, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 8, 52, 23, 70], [47, 81, 28, 9, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 7, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 8, 9, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 8, 73, 34, 99, 6, 49, 24, 6, 83, 51, 40, 14, 15, 10, 25, 1], [54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 3, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 5, 9, 97, 70, 1, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 8, 97, 1, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 8, 32, 46, 34], [96, 80, 82, 7, 59, 71, 92, 53, 19, 20, 88, 66, 3, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 8, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 6, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 2, 1, 22, 52, 47, 96, 64, 58, 52, 39], [88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 9, 2, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 5, 96, 75, 95, 4, 43, 28, 81, 39, 81, 1, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51], [29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 6, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 8, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 1, 57, 80, 23, 81, 90, 79, 58, 1, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69], [37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 4, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 3, 48, 5, 98, 91, 86, 94, 35, 90, 90, 8, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 7, 9, 49, 34, 31, 77, 49, 43, 6, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 7, 98, 86, 1, 17, 10, 46, 64, 24, 18, 56], [51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 5, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 5, 56, 5, 98, 73, 67, 46, 74, 69, 34, 8, 30, 5, 52, 7, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57], [19, 23, 61, 36, 9, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 5, 99, 66, 81, 86, 38, 26, 6, 25, 13, 60, 54, 55, 23, 53, 27, 5, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 6], [13, 40, 57, 72, 21, 15, 60, 8, 4, 19, 11, 98, 34, 45, 9, 97, 86, 71, 3, 15, 56, 19, 15, 44, 97, 31, 90, 4, 87, 87, 76, 8, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 6, 65, 97, 86, 9, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 7, 78, 27, 80, 36, 69, 41, 6, 92, 32, 78, 37, 82, 30, 5, 18, 87, 99, 72, 19, 99], [44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 2, 7, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 7, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 8, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 2, 52, 99, 51, 33, 26, 4, 87, 2, 8, 18, 96], [54, 42, 61, 45, 91, 6, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 4, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 3, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 8, 92, 84, 42, 61, 40, 38, 9, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39], [52, 92, 3, 71, 89, 7, 9, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 2, 6, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 9, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 2, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 9, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59], [54, 96, 80, 15, 91, 90, 99, 70, 10, 9, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 3, 1, 33, 27, 61, 28, 66, 8, 4, 70, 49, 46, 48, 83, 1, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 5], [92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 5, 79, 16, 93, 97, 89, 38, 89, 42, 83, 2, 88, 94, 95, 82, 21, 1, 97, 48, 39, 31, 78, 9, 65, 50, 56, 97, 61, 1, 7, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 5, 31, 57, 9, 38, 94, 7, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35], [41, 63, 89, 76, 87, 31, 86, 9, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 9, 37, 76, 5, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 6, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 6, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72], [63, 40, 78, 8, 52, 9, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 5, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 4, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92], [12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 1, 18, 56, 12, 1, 58, 37, 91, 22, 42, 66, 83, 25, 19, 4, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 4, 72, 91, 4, 27, 73, 7, 34, 37, 71, 60, 59, 31, 1, 54, 54, 44, 96, 93, 83, 36, 4, 45], [30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 2, 99, 34, 67, 99, 76, 16, 14, 15, 93, 8, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 5, 93, 48, 17, 31, 70, 80, 59, 9, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23], [51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 2, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 4, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 5, 31, 17, 86, 42, 49, 1, 44, 63, 28, 60, 7, 78, 95, 40], [44, 61, 89, 59, 4, 49, 51, 27, 69, 71, 46, 76, 44, 4, 9, 34, 56, 39, 15, 6, 94, 91, 75, 90, 65, 27, 56, 23, 74, 6, 23, 33, 36, 69, 14, 39, 5, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 9, 16, 69, 4, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 7, 11, 62, 66, 47, 22, 67], [65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 4, 4, 67, 99, 81, 74, 70, 74, 36, 96, 68, 9, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 6, 35, 78, 20, 71, 6, 85, 66, 57, 2, 58, 91, 72, 5, 29, 56, 73, 48, 86, 52, 9, 93, 22, 57, 79, 42, 12, 1, 31, 68, 17, 59, 63, 76, 7, 77], [73, 81, 14, 13, 17, 20, 11, 9, 1, 83, 8, 85, 91, 70, 84, 63, 62, 77, 37, 7, 47, 1, 59, 95, 39, 69, 39, 21, 99, 9, 87, 2, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 5, 26, 26, 48, 61, 50, 90, 65, 1, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 5, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 8, 44, 2, 71, 7, 63, 22, 5, 52, 19, 8, 20], [17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 3, 13, 91, 65, 85, 2, 40, 5, 42, 31, 77, 42, 5, 36, 6, 54, 4, 58, 7, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 3, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 5, 33, 36, 79, 39], [60, 85, 59, 39, 60, 7, 57, 76, 77, 92, 6, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 3, 99, 28, 83, 15, 75, 99, 1, 89, 85, 79, 50, 3, 95, 32, 67, 44, 8, 7, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 1, 48, 74, 12, 98, 7], [64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 4, 79, 51, 8, 19, 60, 52, 95, 6, 68, 46, 86, 35, 97, 27, 58, 4, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 4, 46, 7, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15], [30, 11, 85, 31, 34, 71, 13, 48, 5, 14, 44, 3, 19, 67, 23, 73, 19, 57, 6, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 7, 87, 97, 80, 89, 5, 71, 5, 5, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 4, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 8, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68], [23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 3, 28, 94, 32, 6, 49, 65, 41, 34, 18, 23, 8, 47, 62, 60, 3, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 3, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 7, 25, 70, 7, 77, 43, 53, 64, 3, 94, 42, 95, 39, 18, 1, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 6, 25, 61, 41, 26, 15, 59, 63, 35]]]\nOutput: \n [7273]\n",
  "1616": "Problem: \nIn this kata we want to convert a string into an integer. The strings simply represent the numbers in words.\n\nExamples:\n\n* \"one\" => 1\n* \"twenty\" => 20\n* \"two hundred forty-six\" => 246\n* \"seven hundred eighty-three thousand nine hundred and nineteen\" => 783919\n\nAdditional Notes:\n\n* The minimum number is \"zero\" (inclusively)\n* The maximum number, which must be supported is 1 million (inclusively)\n* The \"and\" in e.g. \"one hundred and twenty-four\" is optional, in some cases it's present and in others it's not\n* All tested numbers are valid, you don't need to validate them\n\n Examples: \nInput: \n['zero']\nOutput: \n [0]\nInput: \n['one']\nOutput: \n [1]\nInput: \n['two']\nOutput: \n [2]\nInput: \n['three']\nOutput: \n [3]\nInput: \n['four']\nOutput: \n [4]\nInput: \n['five']\nOutput: \n [5]\nInput: \n['six']\nOutput: \n [6]\nInput: \n['seven']\nOutput: \n [7]\nInput: \n['eight']\nOutput: \n [8]\nInput: \n['nine']\nOutput: \n [9]\nInput: \n['ten']\nOutput: \n [10]\nInput: \n['twenty']\nOutput: \n [20]\nInput: \n['twenty-one']\nOutput: \n [21]\nInput: \n['thirty-seven']\nOutput: \n [37]\nInput: \n['forty-six']\nOutput: \n [46]\nInput: \n['fifty-nine']\nOutput: \n [59]\nInput: \n['sixty-eight']\nOutput: \n [68]\nInput: \n['seventy-two']\nOutput: \n [72]\nInput: \n['eighty-three']\nOutput: \n [83]\nInput: \n['ninety-four']\nOutput: \n [94]\nInput: \n['one hundred']\nOutput: \n [100]\nInput: \n['one hundred one']\nOutput: \n [101]\nInput: \n['one hundred and one']\nOutput: \n [101]\nInput: \n['one hundred sixty-nine']\nOutput: \n [169]\nInput: \n['two hundred and ninety-nine']\nOutput: \n [299]\nInput: \n['seven hundred thirty-six']\nOutput: \n [736]\nInput: \n['two thousand']\nOutput: \n [2000]\nInput: \n['one thousand three hundred and thirty-seven']\nOutput: \n [1337]\nInput: \n['ten thousand']\nOutput: \n [10000]\nInput: \n['twenty-six thousand three hundred and fifty-nine']\nOutput: \n [26359]\nInput: \n['thirty-five thousand']\nOutput: \n [35000]\nInput: \n['ninety-nine thousand nine hundred and ninety-nine']\nOutput: \n [99999]\nInput: \n['six hundred sixty-six thousand six hundred sixty-six']\nOutput: \n [666666]\nInput: \n['seven hundred thousand']\nOutput: \n [700000]\nInput: \n['two hundred thousand three']\nOutput: \n [200003]\nInput: \n['two hundred thousand and three']\nOutput: \n [200003]\nInput: \n['two hundred three thousand']\nOutput: \n [203000]\nInput: \n['five hundred thousand three hundred']\nOutput: \n [500300]\nInput: \n['eight hundred eighty-eight thousand eight hundred and eighty-eight']\nOutput: \n [888888]\nInput: \n['one million']\nOutput: \n [1000000]\n",
  "1617": "Problem: \nI started this as a joke among friends, telling that converting numbers to other integer bases is for n00bs, while an actual coder at least converts numbers to more complex bases like [pi (or \u03c0 or however you wish to spell it in your language)](http://en.wikipedia.org/wiki/Pi), so they dared me proving I was better.\n\nAnd I did it in few hours, discovering that what I started as a joke actually has [some math ground and application (particularly the conversion to base pi, it seems)](http://en.wikipedia.org/wiki/Non-integer_representation).\n\nThat said, now I am daring you to do the same, that is to build a function so that it takes a **number** (any number, you are warned!) and optionally the **number of decimals** (default: 0) and a **base** (default: pi), returning the proper conversion **as a string**:\n\n#Note\nIn Java there is no easy way with optional parameters so all three parameters will be given; the same in C# because, as of now, the used version is not known. \n\n```python\nconverter(13) #returns '103'\nconverter(13,3) #returns '103.010'\nconverter(-13,0,2) #returns '-1101'\n```\n\nI know most of the world uses a comma as a [decimal mark](http://en.wikipedia.org/wiki/Decimal_mark), but as English language and culture are *de facto* the Esperanto of us coders, we will stick to our common glorious traditions and uses, adopting the trivial dot (\".\") as decimal separator; if the absolute value of the result is <1, you have of course to put one (and only one) leading 0 before the decimal separator.\n\nFinally, you may assume that decimals if provided will always be >= 0 and that no test base will be smaller than 2 (because, you know, converting to base 1 is pretty lame) or greater than 36; as usual, for digits greater than 9 you can use uppercase alphabet letter, so your base of numeration is going to be: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n\nThat is my first 3-languages-kata, so I count on you all to give me extensive feedback, no matter how harsh it may sound, so to improve myself even further :)\n\n Examples: \nInput: \n[13]\nOutput: \n ['103']\nInput: \n[10]\nOutput: \n ['100']\nInput: \n[13, 3]\nOutput: \n ['103.010']\nInput: \n[13, 0, 8]\nOutput: \n ['15']\nInput: \n[10, 0, 16]\nOutput: \n ['A']\nInput: \n[10000, 4, 13]\nOutput: \n ['4723.0000']\nInput: \n[7, 0, 19]\nOutput: \n ['7']\nInput: \n[13.5, 4, 16]\nOutput: \n ['D.8000']\nInput: \n[10.81, 0, 16]\nOutput: \n ['A']\nInput: \n[1, 2, 2]\nOutput: \n ['1.00']\nInput: \n[-10, 0, 23]\nOutput: \n ['-A']\nInput: \n[0, 4, 26]\nOutput: \n ['0.0000']\nInput: \n[-15.5, 2, 23]\nOutput: \n ['-F.BB']\nInput: \n[13, 0, 10]\nOutput: \n ['13']\nInput: \n[5.5, 1, 10]\nOutput: \n ['5.5']\n",
  "1618": "Problem: \nCreate a function that differentiates a polynomial for a given value of `x`.\n\nYour function will receive 2 arguments: a polynomial as a string, and a point to evaluate the equation as an integer.\n\n## Assumptions:\n\n* There will be a coefficient near each `x`, unless the coefficient equals `1` or `-1`.\n* There will be an exponent near each `x`, unless the exponent equals `0` or `1`.\n* All exponents will be greater or equal to zero\n\n## Examples:\n\n```python\ndifferenatiate(\"12x+2\", 3)      ==>   returns 12\ndifferenatiate(\"x^2+3x+2\", 3)   ==>   returns 9\n```\n\n Examples: \nInput: \n['12x+2', 3]\nOutput: \n [12]\nInput: \n['x-66', 3]\nOutput: \n [1]\nInput: \n['x^2-x', 3]\nOutput: \n [5]\nInput: \n['-5x^2+10x+4', 3]\nOutput: \n [-20]\nInput: \n['x^2+3x+3', 3]\nOutput: \n [9]\nInput: \n['1000x^2+300x+200', 531]\nOutput: \n [1062300]\nInput: \n['21x^2+35x+3', 2071]\nOutput: \n [87017]\nInput: \n['66x^3+3x^2+3', 441]\nOutput: \n [38509884]\nInput: \n['21x^4+3x^3', 414]\nOutput: \n [5962009860]\nInput: \n['-21x^5+3x^3', 12398]\nOutput: \n [-2480823269890144044]\nInput: \n['-x^2+3x-3', 1234567908]\nOutput: \n [-2469135813]\nInput: \n['-7x^5+22x^4-55x^3-94x^2+87x-56', -3]\nOutput: \n [-6045]\nInput: \n['-123x^5+3x', 8559]\nOutput: \n [-3300404885229567012]\nInput: \n['x^2', 59884848483559]\nOutput: \n [119769696967118]\n",
  "1619": "Problem: \nMy little sister came back home from school with the following task:\ngiven a squared sheet of paper she has to cut it in pieces\nwhich, when assembled, give squares the sides of which form\nan increasing sequence of numbers.\nAt the beginning it was lot of fun but little by little we were tired of seeing the pile of torn paper.\nSo we decided to write a program that could help us and protects trees.\n\n## Task\n\nGiven a positive integral number n, return a **strictly increasing** sequence (list/array/string depending on the language) of numbers, so that the sum of the squares is equal to n\u00b2.\n\nIf there are multiple solutions (and there will be), return as far as possible the result with the largest possible values:\n\n## Examples\n\n`decompose(11)` must return `[1,2,4,10]`. Note that there are actually two ways to decompose 11\u00b2,\n11\u00b2 = 121 = 1 + 4 + 16 + 100 = 1\u00b2 + 2\u00b2 + 4\u00b2 + 10\u00b2 but don't return `[2,6,9]`, since 9 is smaller than 10.\n\nFor `decompose(50)` don't return `[1, 1, 4, 9, 49]` but `[1, 3, 5, 8, 49]` since `[1, 1, 4, 9, 49]`\ndoesn't form a strictly increasing sequence.\n\n## Note\nNeither `[n]` nor `[1,1,1,\u2026,1]` are valid solutions. If no valid solution exists, return `nil`, `null`, `Nothing`, `None` (depending on the language) or `\"[]\"` (C) ,`{}` (C++), `[]` (Swift, Go).\n\nThe function \"decompose\" will take a positive integer n \nand return the decomposition of N = n\u00b2 as:\n\n- [x1 ... xk]\nor\n- \"x1 ... xk\"\nor\n- Just [x1 ... xk]\nor\n- Some [x1 ... xk]\nor\n- {x1 ... xk}\nor\n- \"[x1,x2, ... ,xk]\"\n\ndepending on the language (see \"Sample tests\")\n\n# Note for Bash\n```\ndecompose 50 returns \"1,3,5,8,49\"\ndecompose 4  returns \"Nothing\"\n```\n# Hint\n\nVery often `xk` will be `n-1`.\n\n Examples: \nInput: \n[12]\nOutput: \n [[1, 2, 3, 7, 9]]\nInput: \n[6]\nOutput: \n [None]\nInput: \n[50]\nOutput: \n [[1, 3, 5, 8, 49]]\nInput: \n[44]\nOutput: \n [[2, 3, 5, 7, 43]]\nInput: \n[625]\nOutput: \n [[2, 5, 8, 34, 624]]\nInput: \n[5]\nOutput: \n [[3, 4]]\nInput: \n[7100]\nOutput: \n [[2, 3, 5, 119, 7099]]\nInput: \n[123456]\nOutput: \n [[1, 2, 7, 29, 496, 123455]]\nInput: \n[1234567]\nOutput: \n [[2, 8, 32, 1571, 1234566]]\nInput: \n[7654321]\nOutput: \n [[6, 10, 69, 3912, 7654320]]\nInput: \n[4]\nOutput: \n [None]\nInput: \n[7654322]\nOutput: \n [[1, 4, 11, 69, 3912, 7654321]]\n",
  "1620": "Problem: \nThis kata generalizes [Twice Linear](https://www.codewars.com/kata/5672682212c8ecf83e000050). You may want to attempt that kata first.\n\n## Sequence\n\nConsider an integer sequence `U(m)` defined as:\n\n1. `m` is a given non-empty set of positive integers.\n2. `U(m)[0] = 1`, the first number is always 1.\n3. For each `x` in `U(m)`, and each `y` in `m`, `x * y + 1` must also be in `U(m)`.\n4. No other numbers are in `U(m)`.\n5. `U(m)` is sorted, with no duplicates.\n\n### Sequence Examples\n\n#### `U(2, 3) = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]`\n\n1 produces 3 and 4, since `1 * 2 + 1 = 3`, and `1 * 3 + 1 = 4`.\n\n3 produces 7 and 10, since `3 * 2 + 1 = 7`, and `3 * 3 + 1 = 10`.\n\n#### `U(5, 7, 8) = [1, 6, 8, 9, 31, 41, 43, 46, 49, 57, 64, 65, 73, 156, 206, ...]`\n\n1 produces 6, 8, and 9.\n\n6 produces 31, 43, and 49.\n\n## Task:\n\nImplement `n_linear` or `nLinear`: given a set of postive integers `m`, and an index `n`, find `U(m)[n]`, the `n`th value in the `U(m)` sequence.\n\n### Tips\n\n* Tests use large n values. Slow algorithms may time-out.\n* Tests use large values in the m set. Algorithms which multiply further than neccessary may overflow.\n* Linear run time and memory usage is possible.\n* How can you build the sequence iteratively, without growing extra data structures?\n\n Examples: \nInput: \n[[2, 3], 0]\nOutput: \n [1]\nInput: \n[[3, 2, 5], 0]\nOutput: \n [1]\nInput: \n[[2, 3], 1]\nOutput: \n [3]\nInput: \n[[2, 3], 2]\nOutput: \n [4]\nInput: \n[[2, 3], 3]\nOutput: \n [7]\nInput: \n[[2, 3], 4]\nOutput: \n [9]\nInput: \n[[2, 3], 5]\nOutput: \n [10]\nInput: \n[[2, 3], 6]\nOutput: \n [13]\nInput: \n[[2, 3], 7]\nOutput: \n [15]\nInput: \n[[2, 3], 8]\nOutput: \n [19]\nInput: \n[[2, 3], 9]\nOutput: \n [21]\nInput: \n[[2, 3], 10]\nOutput: \n [22]\nInput: \n[[2, 3], 11]\nOutput: \n [27]\nInput: \n[[2, 3], 12]\nOutput: \n [28]\nInput: \n[[2, 3], 13]\nOutput: \n [31]\nInput: \n[[2, 3], 14]\nOutput: \n [39]\nInput: \n[[2, 3], 15]\nOutput: \n [40]\nInput: \n[[2, 3], 16]\nOutput: \n [43]\nInput: \n[[2, 3], 17]\nOutput: \n [45]\nInput: \n[[2, 3], 18]\nOutput: \n [46]\nInput: \n[[2, 3], 19]\nOutput: \n [55]\nInput: \n[[2, 3], 20]\nOutput: \n [57]\nInput: \n[[2, 3], 30]\nOutput: \n [91]\nInput: \n[[2, 3], 50]\nOutput: \n [175]\nInput: \n[[2, 3], 97]\nOutput: \n [406]\nInput: \n[[2, 3], 100]\nOutput: \n [447]\nInput: \n[[2, 3], 144]\nOutput: \n [706]\nInput: \n[[2, 3], 200]\nOutput: \n [1051]\nInput: \n[[2, 3], 951]\nOutput: \n [8013]\nInput: \n[[2, 3], 1000]\nOutput: \n [8488]\nInput: \n[[5, 7, 8], 10]\nOutput: \n [64]\nInput: \n[[5, 7, 8], 11]\nOutput: \n [65]\nInput: \n[[2, 3, 4, 5], 33]\nOutput: \n [46]\nInput: \n[[2, 3, 4, 5], 100]\nOutput: \n [139]\nInput: \n[[3, 5, 7, 9, 11], 50]\nOutput: \n [154]\nInput: \n[[3, 5, 7, 9, 11], 70]\nOutput: \n [226]\nInput: \n[[3, 5, 7, 9, 11], 90]\nOutput: \n [316]\nInput: \n[[3, 2], 10]\nOutput: \n [22]\nInput: \n[[3, 2], 234]\nOutput: \n [1339]\nInput: \n[[3, 2], 923]\nOutput: \n [7537]\nInput: \n[[3, 2], 445]\nOutput: \n [2983]\nInput: \n[[1, 3], 999]\nOutput: \n [1000]\nInput: \n[[1, 5], 1000]\nOutput: \n [1001]\nInput: \n[[5, 12], 519]\nOutput: \n [32961973]\nInput: \n[[14, 10], 56]\nOutput: \n [304795]\nInput: \n[[2, 6], 416]\nOutput: \n [37339]\nInput: \n[[10, 13], 741]\nOutput: \n [3172655773]\nInput: \n[[3, 5], 351]\nOutput: \n [58596]\nInput: \n[[5, 9], 246]\nOutput: \n [1553901]\nInput: \n[[8, 13], 864]\nOutput: \n [1727528929]\nInput: \n[[6, 5], 779]\nOutput: \n [5833116]\nInput: \n[[8, 7], 738]\nOutput: \n [80282057]\nInput: \n[[12, 2], 752]\nOutput: \n [349957]\nInput: \n[[8, 4, 2], 386]\nOutput: \n [1359]\nInput: \n[[5, 11, 7], 475]\nOutput: \n [79399]\nInput: \n[[3, 8, 5], 190]\nOutput: \n [2346]\nInput: \n[[2, 5, 6], 415]\nOutput: \n [2733]\nInput: \n[[4, 2, 5], 315]\nOutput: \n [987]\nInput: \n[[4, 8, 7], 354]\nOutput: \n [16724]\nInput: \n[[13, 9, 2], 377]\nOutput: \n [7127]\nInput: \n[[14, 12, 8], 297]\nOutput: \n [246387]\nInput: \n[[12, 14, 2], 181]\nOutput: \n [4789]\nInput: \n[[12, 4, 7], 370]\nOutput: \n [35965]\nInput: \n[[4, 9, 6, 7, 19, 17, 10, 13], 835]\nOutput: \n [3071]\nInput: \n[[10, 5, 9, 17, 6, 12], 71]\nOutput: \n [427]\nInput: \n[[14, 4, 9, 16, 3], 239]\nOutput: \n [1387]\nInput: \n[[8, 11, 14, 7, 5, 9, 3, 17], 809]\nOutput: \n [1941]\nInput: \n[[11, 15, 19, 5, 14, 12], 210]\nOutput: \n [3095]\nInput: \n[[10, 4, 14, 11, 3], 639]\nOutput: \n [3364]\nInput: \n[[7, 12, 19, 2, 15, 9, 4], 634]\nOutput: \n [1156]\nInput: \n[[9, 19, 7, 12, 16, 18], 273]\nOutput: \n [6175]\nInput: \n[[16, 5, 18, 13, 11, 8, 14, 4], 891]\nOutput: \n [3401]\nInput: \n[[9, 2, 3, 10, 11, 4, 6, 18], 503]\nOutput: \n [724]\nInput: \n[[2, 3, 6, 17, 13, 5], 570]\nOutput: \n [1006]\nInput: \n[[12, 13, 5, 4], 136]\nOutput: \n [1631]\nInput: \n[[8, 4, 7, 2, 18, 17], 46]\nOutput: \n [79]\nInput: \n[[13, 12, 19, 3], 784]\nOutput: \n [62321]\nInput: \n[[17, 14, 9, 16, 11, 8, 13, 19, 7], 185]\nOutput: \n [1090]\nInput: \n[[18, 12, 16, 15, 10, 17, 6, 8, 7], 534]\nOutput: \n [2601]\nInput: \n[[3, 18, 10, 9, 19, 6, 7, 17, 4], 195]\nOutput: \n [361]\nInput: \n[[18, 12, 5, 11], 136]\nOutput: \n [6049]\nInput: \n[[12, 9, 4, 18, 13, 19], 566]\nOutput: \n [8949]\nInput: \n[[12, 2, 6, 5, 4], 243]\nOutput: \n [527]\nInput: \n[[2, 3], 200000]\nOutput: \n [7202134]\nInput: \n[[2, 3, 5], 300000]\nOutput: \n [1092439]\nInput: \n[[2, 3, 10000002], 200000]\nOutput: \n [7202134]\nInput: \n[[2, 3, 5, 10000000], 200000]\nOutput: \n [719671]\n",
  "1621": "Problem: \nWrite a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: \n```\n1+1+1+1, 1+1+2, 2+2.\n```\nThe order of coins does not matter:\n```\n1+1+2 == 2+1+1\n```\nAlso, assume that you have an infinite amount of coins.\n\nYour function should take an amount to change and an array of unique denominations for the coins:\n\n```python\n  count_change(4, [1,2]) # => 3\n  count_change(10, [5,2,3]) # => 4\n  count_change(11, [5,7]) # => 0\n```\n\n Examples: \nInput: \n[4, [1, 2]]\nOutput: \n [3]\nInput: \n[10, [5, 2, 3]]\nOutput: \n [4]\nInput: \n[11, [5, 7]]\nOutput: \n [0]\nInput: \n[98, [3, 14, 8]]\nOutput: \n [19]\nInput: \n[199, [3, 5, 9, 15]]\nOutput: \n [760]\nInput: \n[300, [5, 10, 20, 50, 100, 200, 500]]\nOutput: \n [1022]\nInput: \n[301, [5, 10, 20, 50, 100, 200, 500]]\nOutput: \n [0]\nInput: \n[419, [2, 5, 10, 20, 50]]\nOutput: \n [18515]\n",
  "1622": "Problem: \n# Ten-Pin Bowling\n\nIn the game of ten-pin bowling, a player rolls a bowling ball down a lane to knock over pins. There are ten pins set at the end of the bowling lane. Each player has 10 frames to roll a bowling ball down a lane and knock over as many pins as possible. The first nine frames are ended after two rolls or when the player knocks down all the pins. The last frame a player will receive an extra roll every time they knock down all ten pins; up to a maximum of three total rolls. \n\n## The Challenge\n\nIn this challenge you will be given a string representing a player's ten frames. It will look something like this: `'X X 9/ 80 X X 90 8/ 7/ 44'` (in Java: `\"X X 9/ 80 X X 90 8/ 7/ 44\"`), where each frame is space-delimited, `'X'` represents strikes, and `'/'` represents spares. Your goal is take in this string of frames into a function called `bowlingScore` and return the players total score.\n\n## Scoring\n\nThe scoring for ten-pin bowling can be difficult to understand, and if you're like most people, easily forgotten if you don't play often. Here is a quick breakdown:\n\n### Frames\n\nIn Ten-Pin Bowling there are ten frames per game. Frames are the players turn to bowl, which can be multiple rolls. The first 9 frames you get 2 rolls maximum to try to get all 10 pins down. **On the 10th or last frame a player will receive an extra roll each time they get all ten pins down to a maximum of three total rolls. Also on the last frame bonuses are not awarded for strikes and spares moving forward.**\n\nIn this challenge, three frames might be represented like this: `54 72 44`. In this case, the player has had three frames. On their first frame they scored 9 points (5 + 4), on their second frame they scored 9 points (7 + 2) and on their third frame they scored 8 points (4 + 4). This is a very simple example of bowling scoring. It gets more complicated when we introduce strikes and spares.\n\n### Strikes \nRepresented in this challenge as `'X'`\n\nA strike is scored when a player knocks all ten pins down in one roll. In the first 9 frames this will conclude the players turn and it will be scored as 10 points plus the points received from the next two rolls. So if a player were to have two frames `X 54`, the total score of those two frames would be 28. The first frame would be worth 19 (10 + 5 + 4) and the second frame would be worth 9 (5 + 4).\n\nA perfect game in bowling is 12 strikes in a row and would be represented like this `'X X X X X X X X X XXX'` (in Java: `\"X X X X X X X X X XXX\"`). This adds up to a total score of 300.\n\n### Spares\nRepresented in this challenge as `'/'`\n\nA spare is scored when a player knocks down all ten pins in two rolls. In the first 9 frames this will be scored as 10 points plus the next roll. So if a player were to have two frames `9/ 54`, the total score of the two frames would be 24. The first frame would be worth 15 (10 + 5) and the second frame would be worth 9 (5 + 4).\n\nFor a more detailed explanation see Wikipedia: \n\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n\n Examples: \nInput: \n['11 11 11 11 11 11 11 11 11 11']\nOutput: \n [20]\nInput: \n['X X X X X X X X X XXX']\nOutput: \n [300]\nInput: \n['00 5/ 4/ 53 33 22 4/ 5/ 45 XXX']\nOutput: \n [115]\nInput: \n['5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 8/8']\nOutput: \n [150]\nInput: \n['5/ 4/ 3/ 2/ 1/ 0/ X 9/ 4/ 7/2']\nOutput: \n [143]\nInput: \n['X X 9/ 80 X X 90 8/ 7/ 44']\nOutput: \n [171]\nInput: \n['6/ 5/ 6/ 2/ 3/ 0/ 1/ 8/ 3/ 6/5']\nOutput: \n [139]\nInput: \n['00 00 00 00 00 00 00 00 00 0/X']\nOutput: \n [20]\nInput: \n['00 00 00 00 00 00 00 00 X 0/X']\nOutput: \n [40]\n",
  "1623": "Problem: \n## Story\n\nBefore we dive into the exercise, I would like to show you why these numbers are so important in computer programming today.\n\nIt all goes back to the time of 19th century. Where computers we know today were non-existing. The first ever **computer program** was for the Analytical Engine to compute **Bernoulli numbers**. A woman named Ada Lovelace wrote the very first program. The sad part is the engine was never fully build so her code was never tested. She also predicted the start of **AI** (artificial intelligence).\n\nComputers will be able to compose music by themselves, solve problems (not only numbers) ... So in her honor reproduce what was done back in 1842. The Bernoulli numbers are a sequence of rational numbers with deep connections to number theory. The Swiss mathematician Jakob Bernoulli and the Japanese mathematician Seki Kowa discovered the numbers around the same time at the start of the 18th Century. If you want to read more about her or Bernoulli numbers follow these links:\n\nhttps://en.wikipedia.org/wiki/Ada_Lovelace\n\nhttps://en.wikipedia.org/wiki/Bernoulli_number\n\nhttp://mathworld.wolfram.com/BernoulliNumber.html\n\n## Exercise\n\nYour job is to write a function `bernoulli_number(n)` which outputs the n-th Bernoulli number. The input will always be a non-negative integer so you do not need to worry about exceptions. How you will solve the problem is none of my business but here are some guidelines.  \nYou can make pascal triangle and then with the basic formula generate all Bernoulli numbers. Look example below.\n\nFor the sake of floating numbers, just use `Fractions` so there will be no problems with rounding.\n\n\n0 = 1 + 2b1 ............................................................... \n  b1 = - 1/2\n\n0 = 1 + 3b1 + 3b2 ...................................................    b2        = 1/6\n\n0 = 1 + 4b1 + 6b2 + 4b3 .......................................  b3 = 0\n\n0 = 1 + 5b1 + 10b2 + 10b3 + 5b4 ...................... b4 = - 1/30\n\n... and so on.\n\n```\nbernoulli_number(0) # return 1\nbernoulli_number(1) # return Fraction(-1,2) or Rational(-1,2) or \"1/2\"\nbernoulli_number(6) # return Fraction(1,42) or ...\nbernoulli_number(42) # return Fraction(1520097643918070802691,1806) or ...\nbernoulli_number(22) # return Fraction(854513,138) or ... \"854513/138\"\n```\n\n## Note\n\nSee \"Sample Tests\" to see the return type for each language.\n\nGood luck and happy coding! \n\nPS: be careful some numbers might exceed `1000`.\nIf this kata is too hard for you try to solve pascal triangle and something similar to this and then come back :).\n\n Examples: \nInput: \n[0]\nOutput: \n [1]\nInput: \n[3]\nOutput: \n [0]\nInput: \n[1337]\nOutput: \n [0]\n",
  "1626": "Problem: \nConsider the following array:\n\n```\n[1, 12, 123, 1234, 12345, 123456, 1234567, 12345678, 123456789, 12345678910, 1234567891011...]\n```\n\nIf we join these blocks of numbers, we come up with an infinite sequence which starts with `112123123412345123456...`. The list is infinite.\n\nYou will be given an number (`n`) and your task will be to return the element at that index in the sequence, where `1 \u2264 n \u2264 10^18`. Assume the indexes start with `1`, not `0`.  For example:\n\n```\nsolve(1) = 1, because the first character in the sequence is 1. There is no index 0. \nsolve(2) = 1, because the second character is also 1.\nsolve(3) = 2, because the third character is 2.\n```\n\nMore examples in the test cases. Good luck!\n\n Examples: \nInput: \n[1]\nOutput: \n [1]\nInput: \n[2]\nOutput: \n [1]\nInput: \n[3]\nOutput: \n [2]\nInput: \n[100]\nOutput: \n [1]\nInput: \n[2100]\nOutput: \n [2]\nInput: \n[31000]\nOutput: \n [2]\nInput: \n[55]\nOutput: \n [1]\nInput: \n[123456]\nOutput: \n [6]\nInput: \n[123456789]\nOutput: \n [3]\nInput: \n[999999999999999999]\nOutput: \n [4]\nInput: \n[1000000000000000000]\nOutput: \n [1]\nInput: \n[999999999999999993]\nOutput: \n [7]\n",
  "1627": "Problem: \n### Background\n\nI was reading a [book](http://www.amazon.co.uk/Things-Make-Do-Fourth-Dimension/dp/1846147646/) recently, \"Things to Make and Do in the Fourth Dimension\" by comedian and mathematician Matt Parker, and in the first chapter of the book Matt talks about problems he likes to solve in his head to take his mind off the fact that he is in his dentist's chair, we've all been there!\n\nThe problem he talks about relates to polydivisible numbers, and I thought a kata should be written on the subject as it's quite interesting. (Well it's interesting to me, so there!)\n\n### Polydivisib... huh what?\n\nSo what are they?\n\nA polydivisible number is divisible in an unusual way. The first digit is cleanly divisible by `1`, the first two digits are cleanly divisible by `2`, the first three by `3` and so on.\n\nThe interesting thing about polydivisiblity is that it relates to the underlying number, but not the base it is written in, so if aliens came to Earth and used base `23` (`11` fingers on one hand and `12` on the other), no matter what squiggles they use to write numbers, they would find the same numbers polydivisible!\n\n### Polydivisibilty Example:\n\nLet's do a worked example to clear up any questions ...\n\nStarting wih the number `1,232` in base `10` then:\n\n```\n 1232\n 1    /1 = 1    Yay!\n 12   /2 = 6    Yay!\n 123  /3 = 41   Yay!\n 1232 /4 = 308  Yay!\n```\n\nThus `1,232` is a polydivisible number in base `4` and above.\n\nHowever starting wih the number `123,220` and using base `10` then:\n\n```\n 123220\n 1      /1 = 1            Yay!\n 12     /2 = 6            Yay!\n 123    /3 = 41           Yay!\n 1232   /4 = 308          Yay!\n 12322  /5 = 2464.4       Oh no, that's not a round number!\n 123220 /6 = 220536.333r  Oh no, that's not a round number!\n```\n\nThus `123,220` is not a polydivisible base 10 number, but what about in another base?\n\nAgain starting wih the number `123,220` and using base `6` then:\n\n```\n base 6   base 10\n 1      = 1       -> 1     /1 = 1     Yay!\n 12     = 8       -> 8     /2 = 4     Yay!\n 123    = 51      -> 51    /3 = 17    Yay!\n 1232   = 308     -> 308   /4 = 77    Yay!\n 12322  = 1850    -> 1850  /5 = 370   Yay!\n 123220 = 11100   -> 11100 /6 = 1850  Yay!\n```\n\nThus `123,220` is a polydivisible base `6` number (and a polydivisible base `10` number when converted to `11100` in base `10`).\n\n### Kata\n\nIn this kata you must implement two methods: `is_polydivisible(n, b)` and `get_polydivisible(n, b)`.\n\nThe first `is_polydivisible(n, b)` will return `True` if `n` is polydivisible in base `b` or `False` if not.\n\nThe second `get_polydivisible(n, b)` will return the `n`th polydivisible number using base `b`, the first polydivisible number is of course always `0`.\n\nYou can assume that all inputs are valid.\n\n```if:haskell\nAll necessary arithmetic can be done in `Int` range.\n```\n\n### Kata Examples:\n\n```python\n    is_polydivisible(\"1232\", 10)   # => True\n    is_polydivisible(\"123220\", 10) # => False\n    is_polydivisible(\"123220\", 6)  # => True\n    get_polydivisible(22, 10)      # => \"32\"\n    get_polydivisible(22, 16)      # => \"1A\"\n    get_polydivisible(42, 16)      # => \"42\"\n```\n\n#### A Note on Bases\n\nThe maximum base used is base `62`, and uses characters in the following order `[0-9][A-Z][a-z]` to denote its digits, base `n` will use the first `n` characters of this sequence.\n```if-not:haskell\nA constant CHARS has been declared with this sequence for you.\n```\n\n Examples: \nInput: \n['123', 10]\nOutput: \n [True]\nInput: \n['1234', 10]\nOutput: \n [False]\nInput: \n['12345', 10]\nOutput: \n [False]\nInput: \n['12365', 10]\nOutput: \n [True]\nInput: \n['123220', 10]\nOutput: \n [False]\nInput: \n['50041', 6]\nOutput: \n [True]\nInput: \n['140410', 6]\nOutput: \n [True]\nInput: \n['203230', 6]\nOutput: \n [True]\nInput: \n['30043052', 6]\nOutput: \n [True]\n",
  "1628": "Problem: \nIf n is the numerator and d the denominator of a fraction, that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.\n\nFor example `5/16` is a proper fraction, while `6/16` is not, as both 6 and 16 are divisible by 2, thus the fraction can be reduced to `3/8`.\n\nNow, if you consider a given number d, how many proper fractions can be built using d as a denominator?\n\nFor example, let's assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.\n\nYou are to build a function that computes how many proper fractions you can build with a given denominator:\n```python\nproper_fractions(1)==0\nproper_fractions(2)==1\nproper_fractions(5)==4\nproper_fractions(15)==8\nproper_fractions(25)==20\n```\n\nBe ready to handle big numbers.\n\nEdit: to be extra precise, the term should be \"reduced\" fractions, thanks to [girianshiido](http://www.codewars.com/users/girianshiido) for pointing this out and sorry for the use of an improper word :)\n\n Examples: \nInput: \n[1]\nOutput: \n [0]\nInput: \n[2]\nOutput: \n [1]\nInput: \n[5]\nOutput: \n [4]\nInput: \n[15]\nOutput: \n [8]\nInput: \n[25]\nOutput: \n [20]\nInput: \n[9999999]\nOutput: \n [6637344]\nInput: \n[500000003]\nOutput: \n [500000002]\nInput: \n[1532420]\nOutput: \n [608256]\nInput: \n[123456789]\nOutput: \n [82260072]\nInput: \n[9999999999]\nOutput: \n [5890320000]\n",
  "1629": "Problem: \n# Task\n Sorting is one of the most basic computational devices used in Computer Science. \n \n Given a sequence (length \u2264 1000) of 3 different key values (7, 8, 9), your task is to find the minimum number of exchange operations necessary to make the sequence sorted. \n\n One operation is the switching of 2 key values in the sequence.\n\n# Example\n\n For `sequence = [7, 7, 8, 8, 9, 9]`, the result should be `0`.\n \n It's already a sorted sequence.\n\n For `sequence = [9, 7, 8, 8, 9, 7]`, the result should be `1`.\n \n We can switching `sequence[0]` and `sequence[5]`.\n \n For `sequence = [8, 8, 7, 9, 9, 9, 8, 9, 7]`, the result should be `4`.\n \n We can:\n```\n [8, 8, 7, 9, 9, 9, 8, 9, 7] \n switching sequence[0] and sequence[3]\n --> [9, 8, 7, 8, 9, 9, 8, 9, 7]\n switching sequence[0] and sequence[8]\n --> [7, 8, 7, 8, 9, 9, 8, 9, 9]\n switching sequence[1] and sequence[2]\n --> [7, 7, 8, 8, 9, 9, 8, 9, 9]\n switching sequence[5] and sequence[7]\n --> [7, 7, 8, 8, 8, 9, 9, 9, 9] \n```\nSo `4` is the minimum number of operations for the sequence to become sorted.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n  The Sequence.\n\n\n - `[output]` an integer\n\n  the minimum number of operations.\n\n Examples: \nInput: \n[[7, 7, 8, 8, 9, 9]]\nOutput: \n [0]\nInput: \n[[9, 7, 8, 8, 9, 7]]\nOutput: \n [1]\nInput: \n[[8, 8, 7, 9, 9, 9, 8, 9, 7]]\nOutput: \n [4]\nInput: \n[[9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7]]\nOutput: \n [6]\nInput: \n[[9, 9, 9, 7, 7, 8, 9, 7, 8, 9, 7, 9]]\nOutput: \n [4]\nInput: \n[[9, 9, 7, 7, 8, 8]]\nOutput: \n [4]\nInput: \n[[9, 7, 9]]\nOutput: \n [1]\nInput: \n[[8, 7, 8]]\nOutput: \n [1]\nInput: \n[[7, 8, 7, 8]]\nOutput: \n [1]\nInput: \n[[8, 8, 7, 8]]\nOutput: \n [1]\nInput: \n[[8, 8, 7, 7, 8]]\nOutput: \n [2]\n",
  "1630": "Problem: \nStory:\nIn the realm of numbers, the apocalypse has arrived. Hordes of zombie numbers have infiltrated and are ready to turn everything into undead. The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly and freely interact with each other. Anyone who equals them is doomed. Out of an infinite number of natural numbers, only a few remain. This world needs a hero who leads remaining numbers in hope for survival: The highest number to lead those who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find the largest number that cannot be represented as the sum of this numbers, given that each number can be added unlimited times. Return this number, either 0 if there are no such numbers, or -1 if there are an infinite number of them.\n\nExample:\n```\nLet's say [3,4] are given numbers. Lets check each number one by one:\n1 - (no solution) - good\n2 - (no solution) - good\n3 = 3 won't go\n4 = 4 won't go\n5 - (no solution) - good\n6 = 3+3 won't go\n7 = 3+4 won't go\n8 = 4+4 won't go\n9 = 3+3+3 won't go\n10 = 3+3+4 won't go\n11 = 3+4+4 won't go\n13 = 3+3+3+4 won't go\n```\n...and so on. So 5 is the biggest 'good'. return 5\n\nTest specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\nSpecial thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy assistance. And to everyone who tried and beaten the kata ^_^\n\n Examples: \nInput: \n[[7, 11]]\nOutput: \n [59]\nInput: \n[[1, 7, 15]]\nOutput: \n [0]\nInput: \n[[2, 10]]\nOutput: \n [-1]\nInput: \n[[687, 829, 998]]\nOutput: \n [45664]\nInput: \n[[]]\nOutput: \n [-1]\nInput: \n[[1]]\nOutput: \n [0]\n",
  "1631": "Problem: \n## Snail Sort\n\nGiven an `n x n` array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.\n\n```\narray = [[1,2,3],\n         [4,5,6],\n         [7,8,9]]\nsnail(array) #=> [1,2,3,6,9,8,7,4,5]\n```\n\nFor better understanding, please follow the numbers of the next array consecutively:\n\n```\narray = [[1,2,3],\n         [8,9,4],\n         [7,6,5]]\nsnail(array) #=> [1,2,3,4,5,6,7,8,9]\n```\n\nThis image will illustrate things more clearly:\n\n\n\nNOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.\n\nNOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array `[[]]`.\n\n Examples: \nInput: \n[[[]]]\nOutput: \n [[]]\nInput: \n[[[1]]]\nOutput: \n [[1]]\nInput: \n[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\nOutput: \n [[1, 2, 3, 6, 9, 8, 7, 4, 5]]\nInput: \n[[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]]\nOutput: \n [[1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13]]\nInput: \n[[[1, 2, 3, 4, 5, 6], [20, 21, 22, 23, 24, 7], [19, 32, 33, 34, 25, 8], [18, 31, 36, 35, 26, 9], [17, 30, 29, 28, 27, 10], [16, 15, 14, 13, 12, 11]]]\nOutput: \n [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]\n",
  "1632": "Problem: \nGiven two numbers: 'left' and 'right' (1 <= 'left' <= 'right' <= 200000000000000)\nreturn sum of all '1' occurencies in binary representations of numbers between 'left' and 'right' (including both)\n\n``` \nExample:\ncountOnes 4 7 should return 8, because:\n4(dec) = 100(bin), which adds 1 to the result.\n5(dec) = 101(bin), which adds 2 to the result.\n6(dec) = 110(bin), which adds 2 to the result.\n7(dec) = 111(bin), which adds 3 to the result.\nSo finally result equals 8.\n```\nWARNING: Segment may contain billion elements, to pass this kata, your solution cannot iterate through all numbers in the segment!\n\n Examples: \nInput: \n[1, 1000000000]\nOutput: \n [14846928141]\n",
  "1633": "Problem: \nCreate a function that takes a Number as its argument and returns a Chinese numeral string. You don't need to validate the input argument, it will always be a Number in the range `[-99999.999, 99999.999]`, rounded to 8 decimal places.\n\nSimplified Chinese numerals have characters representing each number from 0 to 9 and additional numbers representing larger numbers like 10, 100, 1000, and 10000. \n\n```\n0 l\u00edng \u96f6\n1 y\u012b \u4e00\n2 \u00e8r \u4e8c\n3 s\u0101n \u4e09\n4 s\u00ec \u56db\n5 w\u01d4 \u4e94\n6 li\u00f9 \u516d\n7 q\u012b \u4e03\n8 b\u0101 \u516b\n9 ji\u01d4 \u4e5d\n10 sh\u00ed \u5341\n100 b\u01cei \u767e\n1000 qi\u0101n \u5343\n10000 w\u00e0n \u4e07\n```\n\nMultiple-digit numbers are constructed by first the digit value (1 to 9) and then the place multiplier (such as 10, 100, 1000), starting with the most significant digit. A special case is made for 10 - 19 where the leading digit value (y\u012b \u4e00) is dropped. Note that this special case is only made for the actual values 10 - 19, not any larger values.\n\n```\n10 \u5341\n11 \u5341\u4e00\n18 \u5341\u516b\n21 \u4e8c\u5341\u4e00\n110 \u4e00\u767e\u4e00\u5341\n123 \u4e00\u767e\u4e8c\u5341\u4e09\n24681 \u4e8c\u4e07\u56db\u5343\u516d\u767e\u516b\u5341\u4e00\n```\n\nTrailing zeros are omitted, but interior zeros are grouped together and indicated by a single \u96f6 character without giving the place multiplier.\n\n```\n10 \u5341\n20 \u4e8c\u5341\n104 \u4e00\u767e\u96f6\u56db\n1004 \u4e00\u5343\u96f6\u56db\n10004 \u4e00\u4e07\u96f6\u56db\n10000 \u4e00\u4e07\n```\n\nDecimal numbers are constructed by first writing the whole number part, and then inserting a point (di\u01cen \u70b9), followed by the decimal portion. The decimal portion is expressed using only the digits 0 to 9, without any positional characters and without grouping zeros.\n\n```\n0.1 \u96f6\u70b9\u4e00\n123.45 \u4e00\u767e\u4e8c\u5341\u4e09\u70b9\u56db\u4e94\n```\n\nNegative numbers are the same as other numbers, but add a \u8d1f (f\u00f9) before the number.\n\nFor more information, please see http://en.wikipedia.org/wiki/Chinese_numerals.\n\n Examples: \nInput: \n[0]\nOutput: \n ['\u96f6']\nInput: \n[9]\nOutput: \n ['\u4e5d']\nInput: \n[99]\nOutput: \n ['\u4e5d\u5341\u4e5d']\nInput: \n[999]\nOutput: \n ['\u4e5d\u767e\u4e5d\u5341\u4e5d']\nInput: \n[9999]\nOutput: \n ['\u4e5d\u5343\u4e5d\u767e\u4e5d\u5341\u4e5d']\nInput: \n[99999]\nOutput: \n ['\u4e5d\u4e07\u4e5d\u5343\u4e5d\u767e\u4e5d\u5341\u4e5d']\nInput: \n[-5]\nOutput: \n ['\u8d1f\u4e94']\nInput: \n[-54]\nOutput: \n ['\u8d1f\u4e94\u5341\u56db']\nInput: \n[-543]\nOutput: \n ['\u8d1f\u4e94\u767e\u56db\u5341\u4e09']\nInput: \n[-5432]\nOutput: \n ['\u8d1f\u4e94\u5343\u56db\u767e\u4e09\u5341\u4e8c']\nInput: \n[-54321]\nOutput: \n ['\u8d1f\u4e94\u4e07\u56db\u5343\u4e09\u767e\u4e8c\u5341\u4e00']\nInput: \n[0.5]\nOutput: \n ['\u96f6\u70b9\u4e94']\nInput: \n[0.25]\nOutput: \n ['\u96f6\u70b9\u4e8c\u4e94']\nInput: \n[0.125]\nOutput: \n ['\u96f6\u70b9\u4e00\u4e8c\u4e94']\nInput: \n[0.0625]\nOutput: \n ['\u96f6\u70b9\u96f6\u516d\u4e8c\u4e94']\nInput: \n[0.03125]\nOutput: \n ['\u96f6\u70b9\u96f6\u4e09\u4e00\u4e8c\u4e94']\nInput: \n[10]\nOutput: \n ['\u5341']\nInput: \n[14]\nOutput: \n ['\u5341\u56db']\nInput: \n[18]\nOutput: \n ['\u5341\u516b']\nInput: \n[20]\nOutput: \n ['\u4e8c\u5341']\nInput: \n[24]\nOutput: \n ['\u4e8c\u5341\u56db']\nInput: \n[50]\nOutput: \n ['\u4e94\u5341']\nInput: \n[100]\nOutput: \n ['\u4e00\u767e']\nInput: \n[110]\nOutput: \n ['\u4e00\u767e\u4e00\u5341']\nInput: \n[111]\nOutput: \n ['\u4e00\u767e\u4e00\u5341\u4e00']\nInput: \n[-10]\nOutput: \n ['\u8d1f\u5341']\nInput: \n[-14]\nOutput: \n ['\u8d1f\u5341\u56db']\nInput: \n[-18]\nOutput: \n ['\u8d1f\u5341\u516b']\nInput: \n[-20]\nOutput: \n ['\u8d1f\u4e8c\u5341']\nInput: \n[-100]\nOutput: \n ['\u8d1f\u4e00\u767e']\nInput: \n[-110]\nOutput: \n ['\u8d1f\u4e00\u767e\u4e00\u5341']\nInput: \n[-111]\nOutput: \n ['\u8d1f\u4e00\u767e\u4e00\u5341\u4e00']\nInput: \n[1000]\nOutput: \n ['\u4e00\u5343']\nInput: \n[10000]\nOutput: \n ['\u4e00\u4e07']\nInput: \n[10306]\nOutput: \n ['\u4e00\u4e07\u96f6\u4e09\u767e\u96f6\u516d']\nInput: \n[10006]\nOutput: \n ['\u4e00\u4e07\u96f6\u516d']\nInput: \n[10006.005]\nOutput: \n ['\u4e00\u4e07\u96f6\u516d\u70b9\u96f6\u96f6\u4e94']\nInput: \n[-10306.005]\nOutput: \n ['\u8d1f\u4e00\u4e07\u96f6\u4e09\u767e\u96f6\u516d\u70b9\u96f6\u96f6\u4e94']\nInput: \n[-10.000001]\nOutput: \n ['\u8d1f\u5341\u70b9\u96f6\u96f6\u96f6\u96f6\u96f6\u4e00']\nInput: \n[99999.999]\nOutput: \n ['\u4e5d\u4e07\u4e5d\u5343\u4e5d\u767e\u4e5d\u5341\u4e5d\u70b9\u4e5d\u4e5d\u4e5d']\nInput: \n[-99999.999]\nOutput: \n ['\u8d1f\u4e5d\u4e07\u4e5d\u5343\u4e5d\u767e\u4e5d\u5341\u4e5d\u70b9\u4e5d\u4e5d\u4e5d']\n",
  "1634": "Problem: \nLet's define `increasing` numbers as the numbers whose digits, read from left to right, are never less than the previous ones: 234559 is an example of increasing number.\n\nConversely, `decreasing` numbers have all the digits read from left to right so that no digits is bigger than the previous one: 97732 is an example of decreasing number.\n\nYou do not need to be the next Gauss to figure that all numbers with 1 or 2 digits are either increasing or decreasing: 00, 01, 02, ..., 98, 99 are all belonging to one of this categories (if not both, like 22 or 55): 101 is indeed the first number which does NOT fall into either of the categories. Same goes for all the numbers up to 109, while 110 is again a decreasing number.\n\nNow your task is rather easy to declare (a bit less to perform): you have to build a function to return the total occurrences of all the increasing or decreasing numbers *below* 10 raised to the xth power (x will always be >= 0).\n\nTo give you a starting point, there are a grand total of increasing and decreasing numbers as shown in the table:\n\n|Total  | Below\n|---------------\n|1      | 1\n|10     | 10\n|100    | 100\n|475    | 1000\n|1675   | 10000\n|4954   | 100000\n|12952  | 1000000\n\nThis means that your function will have to behave like this:\n```python\ntotal_inc_dec(0)==1\ntotal_inc_dec(1)==10\ntotal_inc_dec(2)==100\ntotal_inc_dec(3)==475\ntotal_inc_dec(4)==1675\ntotal_inc_dec(5)==4954\ntotal_inc_dec(6)==12952\n```\n\n**Tips:** efficiency and trying to figure out how it works are essential: with a brute force approach, some tests with larger numbers may take more than the total computing power currently on Earth to be finished in the short allotted time.\n\nTo make it even clearer, the increasing or decreasing numbers between in the range 101-200 are: [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179, 188, 189, 199, 200], that is 47 of them. In the following range, 201-300, there are 41 of them and so on, getting rarer and rarer.\n\n**Trivia:** just for the sake of your own curiosity, a number which is neither decreasing of increasing is called a `bouncy` number, like, say, 3848 or 37294; also, usually 0 is not considered being increasing, decreasing or bouncy, but it will be for the purpose of this kata\n\n Examples: \nInput: \n[0]\nOutput: \n [1]\nInput: \n[1]\nOutput: \n [10]\nInput: \n[2]\nOutput: \n [100]\nInput: \n[3]\nOutput: \n [475]\nInput: \n[4]\nOutput: \n [1675]\nInput: \n[5]\nOutput: \n [4954]\nInput: \n[6]\nOutput: \n [12952]\nInput: \n[10]\nOutput: \n [277033]\nInput: \n[20]\nOutput: \n [40059819]\nInput: \n[50]\nOutput: \n [87959698326]\n",
  "1635": "Problem: \n# Task\n You are given a string `s`. Every letter in `s` appears once. \n \n Consider all strings formed by rearranging the letters in `s`. After ordering these strings in dictionary order, return the middle term. (If the sequence has a even length `n`, define its middle term to be the `(n/2)`th term.)\n\n# Example\n\n For `s = \"abc\"`, the result should be `\"bac\"`.\n```\nThe permutations in order are:\n\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\nSo, The middle term is \"bac\".```\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  unique letters (`2 <= length <= 26`)\n\n - `[output]` a string\n\n  middle permutation.\n\n Examples: \nInput: \n['abc']\nOutput: \n ['bac']\nInput: \n['abcd']\nOutput: \n ['bdca']\nInput: \n['abcdx']\nOutput: \n ['cbxda']\nInput: \n['abcdxg']\nOutput: \n ['cxgdba']\nInput: \n['abcdxgz']\nOutput: \n ['dczxgba']\n",
  "1636": "Problem: \nA product-sum number is a natural number N which can be expressed as both the product and the sum of the same set of numbers.\n\nN = a1 \u00d7 a2 \u00d7 ... \u00d7 ak = a1 + a2 + ... + ak\n\nFor example, 6 = 1 \u00d7 2 \u00d7 3 = 1 + 2 + 3.\n\nFor a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.\n```\nk=2: 4 = 2 \u00d7 2 = 2 + 2\nk=3: 6 = 1 \u00d7 2 \u00d7 3 = 1 + 2 + 3\nk=4: 8 = 1 \u00d7 1 \u00d7 2 \u00d7 4 = 1 + 1 + 2 + 4\nk=5: 8 = 1 \u00d7 1 \u00d7 2 \u00d7 2 \u00d7 2 = 1 + 1 + 2 + 2 + 2\nk=6: 12 = 1 \u00d7 1 \u00d7 1 \u00d7 1 \u00d7 2 \u00d7 6 = 1 + 1 + 1 + 1 + 2 + 6\n```\n\nHence for 2 \u2264 k \u2264 6, the sum of all the minimal product-sum numbers is 4+6+8+12 = 30; note that 8 is only counted once in the sum.\n\nYour task is to write an algorithm to compute the sum of all minimal product-sum numbers where 2 \u2264 k \u2264 n.\n\nCourtesy of ProjectEuler.net\n\n Examples: \nInput: \n[3]\nOutput: \n [10]\nInput: \n[6]\nOutput: \n [30]\nInput: \n[12]\nOutput: \n [61]\nInput: \n[2]\nOutput: \n [4]\n",
  "1637": "Problem: \nMotivation\n---------\n\nWhen compressing sequences of symbols, it is useful to have many equal symbols follow each other, because then they can be encoded with a run length encoding. For example, RLE encoding of `\"aaaabbbbbbbbbbbcccccc\"` would give something like `4a 11b 6c`.\n\n(Look [here](http://www.codewars.com/kata/run-length-encoding/) for learning more about the run-length-encoding.)\n\nOf course, RLE is interesting only if the string contains many identical consecutive characters. But what bout human readable text? Here comes the Burrows-Wheeler-Transformation.\n\nTransformation\n-------------\nThere even exists a transformation, which brings equal symbols closer together, it is called the **Burrows-Wheeler-Transformation**. The forward transformation works as follows: Let's say we have a sequence with length n, first write every shift of that string into a *n x n* matrix:\n```\nInput: \"bananabar\"\n\nb a n a n a b a r\nr b a n a n a b a\na r b a n a n a b\nb a r b a n a n a\na b a r b a n a n\nn a b a r b a n a\na n a b a r b a n\nn a n a b a r b a\na n a n a b a r b\n```\nThen we sort that matrix by its rows. The output of the transformation then is the **last column** and the **row index** in which the original string is in:\n```\n               .-.\na b a r b a n a n\na n a b a r b a n\na n a n a b a r b\na r b a n a n a b\nb a n a n a b a r <- 4\nb a r b a n a n a\nn a b a r b a n a\nn a n a b a r b a\nr b a n a n a b a\n               '-'\n\nOutput: (\"nnbbraaaa\", 4)\n```\n\n```if:java\nTo handle the two kinds of output data, we will use the preloaded class `BWT`, whose contract is the following:\n\n    public class BWT {\n        \n        public String s;\n        public int n;\n        \n        public BWT(String s, int n)\n        \n        @Override public String  toString()\n        @Override public boolean equals(Object o)\n        @Override public int     hashCode()\n    }\n\n```\n\nOf course we want to restore the original input, therefore you get the following hints:\n\n1. The output contains the last matrix column.\n2. The first column can be acquired by sorting the last column.\n3. **For every row of the table:** Symbols in the first column follow on symbols in the last column, in the same way they do in the input string.\n4. You don't need to reconstruct the whole table to get the input back.\n\nGoal\n----\n\nThe goal of this Kata is to write both, the `encode` and `decode` functions. Together they should work as the identity function on lists. (*Note:* For the empty input, the row number is ignored.)\n\nFurther studies\n--------------\nYou may have noticed that symbols are not always consecutive, but just in proximity, after the transformation. If you're interested in how to deal with that, you should have a look at [this Kata](http://www.codewars.com/kata/move-to-front-encoding/).\n\n Examples: \nInput: \n['bananabar']\nOutput: \n [['nnbbraaaa', 4]]\nInput: \n['Humble Bundle']\nOutput: \n [['e emnllbduuHB', 2]]\nInput: \n['Mellow Yellow']\nOutput: \n [['ww MYeelllloo', 1]]\n",
  "1638": "Problem: \n# Longest Palindromic Substring (Linear)\n\nA palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g.,\n'madam' or 'racecar'. Even the letter 'x' is considered a palindrome. \n\nFor this Kata, you are given a string ```s```. Write a function that returns the longest _contiguous_ palindromic substring in ```s``` (it could be the entire string). In the event that there are multiple longest palindromic substrings, return the first to occur.\n\nI'm not trying to trick you here:\n- You can assume that all inputs are valid strings.\n- Only the letters a-z will be used, all lowercase (your solution should, in theory, extend to more than just the letters a-z though). \n\n**NOTE:** Quadratic asymptotic complexity _(O(N^2))_ or above will __NOT__ work here.\n\n-----\n\n## Examples\n\n### Basic Tests\n\n```\nInput: \"babad\"\nOutput: \"bab\"\n(Note: \"bab\" occurs before \"aba\")\n```\n```\nInput: \"abababa\"\nOutput: \"abababa\"\n```\n```\nInput: \"cbbd\"\nOutput: \"bb\"\n```\n\n### Edge Cases\n\n```\nInput: \"ab\"\nOutput: \"a\"\n```\n```\nInput: \"\"\nOutput: \"\"\n```\n-----\n\n## Testing\n\nAlong with the example tests given:\n\n - There are **500** tests using strings of length in range [1 - 1,000]\n - There are **50** tests using strings of length in range [1,000 - 10,000]\n - There are **5** tests using strings of length in range [10,000 - 100,000]\n \nAll test cases can be passed within 10 seconds, but non-linear solutions will time out every time. _Linear performance is essential_. \n\n## Good Luck!\n\n-----\n\nThis problem was inspired by [this](https://leetcode.com/problems/longest-palindromic-substring/) challenge on LeetCode. Except this is the performance version :^)\n\n Examples: \nInput: \n['babad']\nOutput: \n ['bab']\nInput: \n['madam']\nOutput: \n ['madam']\nInput: \n['dde']\nOutput: \n ['dd']\nInput: \n['ababbab']\nOutput: \n ['babbab']\nInput: \n['abababa']\nOutput: \n ['abababa']\nInput: \n['banana']\nOutput: \n ['anana']\nInput: \n['abba']\nOutput: \n ['abba']\nInput: \n['cbbd']\nOutput: \n ['bb']\nInput: \n['zz']\nOutput: \n ['zz']\nInput: \n['dddd']\nOutput: \n ['dddd']\nInput: \n['']\nOutput: \n ['']\nInput: \n['abcdefghijklmnopqrstuvwxyz']\nOutput: \n ['a']\nInput: \n['ttaaftffftfaafatf']\nOutput: \n ['aaftffftfaa']\nInput: \n['bbaaacc']\nOutput: \n ['aaa']\nInput: \n['m']\nOutput: \n ['m']\n",
  "1640": "Problem: \nGiven two strings s1 and s2, we want to visualize how different the two strings are.\nWe will only take into account the *lowercase* letters (a to z).\nFirst let us count the frequency of each *lowercase* letters in s1 and s2.\n\n`s1 = \"A aaaa bb c\"`\n\n`s2 = \"& aaa bbb c d\"`\n\n`s1 has 4 'a', 2 'b', 1 'c'`\n\n`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`\n\nSo the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2.\nIn the following we will not consider letters when the maximum of their occurrences\nis less than or equal to 1.\n\nWe can resume the differences between s1 and s2 in the following string:\n`\"1:aaaa/2:bbb\"`\nwhere `1` in `1:aaaa` stands for string s1 and `aaaa` because the maximum for `a` is 4.\nIn the same manner `2:bbb` stands for string s2 and `bbb` because the maximum for `b` is 3.\n\nThe task is to produce a string in which each *lowercase* letters of s1 or s2 appears as many times as\nits maximum if this maximum is *strictly greater than 1*; these letters will be prefixed by the \nnumber of the string where they appear with their maximum value and `:`. \nIf the maximum is in s1 as well as in s2 the prefix is `=:`.\n\nIn the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and \"Example Tests\".\n\nHopefully other examples can make this clearer.\n\n```\ns1 = \"my&friend&Paul has heavy hats! &\"\ns2 = \"my friend John has many many friends &\"\nmix(s1, s2) --> \"2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1=\"Are the kids at home? aaaaa fffff\"\ns2=\"Yes they are here! aaaaa fffff\"\nmix(s1, s2) --> \"=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\"\n```\n# Note for Swift, R, PowerShell\nThe prefix `=:` is replaced by `E:`\n``` \ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\"\n```\n\n Examples: \nInput: \n['Are they here', 'yes, they are here']\nOutput: \n ['2:eeeee/2:yy/=:hh/=:rr']\nInput: \n['looping is fun but dangerous', 'less dangerous than coding']\nOutput: \n ['1:ooo/1:uuu/2:sss/=:nnn/1:ii/2:aa/2:dd/2:ee/=:gg']\nInput: \n[' In many languages', \" there's a pair of functions\"]\nOutput: \n ['1:aaa/1:nnn/1:gg/2:ee/2:ff/2:ii/2:oo/2:rr/2:ss/2:tt']\nInput: \n['Lords of the Fallen', 'gamekult']\nOutput: \n ['1:ee/1:ll/1:oo']\nInput: \n['codewars', 'codewars']\nOutput: \n ['']\nInput: \n['A generation must confront the looming ', 'codewarrs']\nOutput: \n ['1:nnnnn/1:ooooo/1:tttt/1:eee/1:gg/1:ii/1:mm/=:rr']\n",
  "1641": "Problem: \n# The Kata\nYour task is to transform an input nested list into an hypercube list, which is a special kind of nested list where each level must have the very same size,\nThis Kata is an exercise on recursion and algorithms. You will need to visualize many aspects of this question to be able to solve it efficiently, as such there is a section on definitions of the terms that will be used in the Kata, make sure to fully understand them before attempting. A naive brute-force-ish answer will most likely fail the tests. There will be tests on  nested lists of dimension and size up to 10. Good luck.\n\n\n# Definitions\n### Nested List\nA nested list is a list that may contain either non-list items or more nested lists as items in the list. Here are a few examples of nested lists.\n\n    [[2, 3], 4, 5, 6, [2, [2, 3, 4, 5], 2, 1, 2], [[[[1]]]], []]\n    [[[]]]\n    [1, 2]\n    [[], []]\n    [4, 5, 6, 7, [], 2]\n    []\n\n\n- A *basic element* refers to any non-list element of a nested list.\n\n\n- A nested list's *dimension* is defined as the deepest the list goes.  \n\n\n- A nested list's *size* is defined as the longest the list or any of its sublists go.  \n\nFor example, the *dimension* and *size* of the above nested lists is as follows.\n\n    [[2, 3], 4, 5, 6, [2, [2, 3, 4, 5], 2, 1, 2], [[[[1]]]], []]  # dimension: 5, size: 7\n    [[[]]]                                                        # dimension: 3, size: 1\n    [1, 2]                                                        # dimension: 1, size: 2\n    [[], []]                                                      # dimension: 2, size: 2\n    [4, 5, 6, 7, [], 2]                                           # dimension: 2, size: 6\n    []                                                            # dimension: 1, size: 0\n\n\n### Hypercube List\n- A `1`-dimensional **hypercube list** of size `n` is a nested list of dimension `1` and size `n`.  \n\n\n- A `d`-dimensional hypercube list of size `n` is a nested list of dimension `d` and size `n` such that the nested list has `n` elements each of which is a `d - 1`-dimensional hypercube list of size `n`.  \n\n\nHere are some examples of hypercube lists.\n\n    [1]                                                       # dimension: 1, size: 1\n    [[1, 2], [3, 4]]                                          # dimension: 2, size: 2\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]                         # dimension: 2, size: 3\n    [[0]]                                                     # dimension: 2, size: 1\n    [[[0, 0], [1, 1]], [[2, 2], [3, 3]]]                      # dimension: 3, size: 2\n    [1, 2, 3, 4]                                              # dimension: 1, size: 4\n    [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]  # dimension: 2, size: 4\n\n\n# The Task\nYour task is to implement `normalize` which converts any given `nested_list` to be in hypercube format with the same dimension and size as the given nested list, extending and growing with the given `growing_value`. The default growing value is the integer `0`.\n\n### The Algorithm\nIn most scenarios you will encounter a nested list that does not have the same size throughout. When working on such a list the algorithm should behave as follows.\n\n * If a hypercube list of dimension 1 needs extra elements, append the required number of growing value elements.\n * If a hypercube list of dimension greater than 1 has a direct basic element as a child, replace it with the required hypercube list with its basic elements all being the replaced item.\n * If a hypercube list of dimension greater than 1 needs extra elements, append the required hypercube list with its basic elements all being the growing value.\n\n\nTake note of the given example, it will be very helpful in understanding the intricacies of the algorithm.\n\n    >>> normalize(\n            [\n                [\n                    [2, 3, 4],\n                    [1, 2],\n                    2,\n                    [1]\n                ],\n                [\n                    2,\n                    [2, 3],\n                    1,\n                    4,\n                    [2, 2, 6, 7]\n                ],\n                5\n            ]\n        )\n        \nGives the following result.\n\n    [\n        [\n            [2, 3, 4, 0, 0],\n            [1, 2, 0, 0, 0],\n            [2, 2, 2, 2, 2],\n            [1, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ],\n        [\n            [2, 2, 2, 2, 2],\n            [2, 3, 0, 0, 0],\n            [1, 1, 1, 1, 1],\n            [4, 4, 4, 4, 4],\n            [2, 2, 6, 7, 0]\n        ],\n        [\n            [5, 5, 5, 5, 5],\n            [5, 5, 5, 5, 5],\n            [5, 5, 5, 5, 5],\n            [5, 5, 5, 5, 5],\n            [5, 5, 5, 5, 5]\n        ],\n        [\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ],\n        [\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ]\n    ]\n\n\nGood luck!\n\n Examples: \nInput: \n[[]]\nOutput: \n [[]]\n",
  "1642": "Problem: \n## Task\n\nGiven a positive integer, `n`, return the number of possible ways such that `k` positive integers multiply to `n`. Order matters.\n\n**Examples**\n```\nn = 24\nk = 2\n(1, 24), (2, 12), (3, 8), (4, 6), (6, 4), (8, 3), (12, 2), (24, 1) -> 8\n\nn = 100\nk = 1\n100 -> 1\n\nn = 20\nk = 3\n(1, 1, 20), (1, 2, 10), (1, 4, 5), (1, 5, 4), (1, 10, 2), (1, 20, 1),\n(2, 1, 10), (2, 2, 5), (2, 5, 2), (2, 10, 1), (4, 1, 5), (4, 5, 1),\n(5, 1, 4), (5, 2, 2), (5, 4, 1), (10, 1, 2), (10, 2, 1), (20, 1, 1) -> 18\n```\n**Constraints**\n`1 <= n <= 500_000_000`\nand `1 <= k <= 1000`\n\n Examples: \nInput: \n[24, 2]\nOutput: \n [8]\nInput: \n[100, 1]\nOutput: \n [1]\nInput: \n[20, 3]\nOutput: \n [18]\nInput: \n[1, 2]\nOutput: \n [1]\nInput: \n[1000000, 3]\nOutput: \n [784]\nInput: \n[10, 2]\nOutput: \n [4]\nInput: \n[36, 4]\nOutput: \n [100]\n",
  "1643": "Problem: \nYou are given 2 numbers is `n` and `k`. You need to find the number of integers between 1 and n (inclusive) that contains exactly `k` non-zero digit.\n\nExample1 \n\n`\nalmost_everywhere_zero(100, 1) return 19`\n\nby following condition we have 19 numbers that have k = 1 digits( not count zero ) \n` [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100]`\n\n\nExample2  \n\n`\nalmost_everywhere_zero(11, 2) return 1`\n\nwe have only `11` that has 2 digits(ten not count because zero is not count) \n` 11`\n\n\n\n\n\nconstrains\n\n\n`1\u2264n<pow(10,100)`\n\n\n`1\u2264k\u2264100`\n\n Examples: \nInput: \n[100, 1]\nOutput: \n [19]\nInput: \n[11, 2]\nOutput: \n [1]\nInput: \n[20, 2]\nOutput: \n [9]\nInput: \n[101, 2]\nOutput: \n [82]\nInput: \n[10001, 2]\nOutput: \n [487]\nInput: \n[10001000, 2]\nOutput: \n [1729]\nInput: \n[500309160, 2]\nOutput: \n [2604]\nInput: \n[10000000000000000000000, 3]\nOutput: \n [1122660]\nInput: \n[10000000000000000000000, 21]\nOutput: \n [2407217760893271902598]\nInput: \n[1203, 4]\nOutput: \n [81]\n",
  "1645": "Problem: \nThe task is simply stated. Given an integer n (3 < n < 10^(9)), find the length of the smallest list of [*perfect squares*](https://en.wikipedia.org/wiki/Square_number) which add up to n. Come up with the best algorithm you can; you'll need it!\n\nExamples:\n\nsum_of_squares(17) = 2  17 = 16 + 1 (4 and 1 are perfect squares).\nsum_of_squares(15) = 4  15 = 9 + 4 + 1 + 1. There is no way to represent 15 as the sum of three perfect squares.\nsum_of_squares(16) = 1  16 itself is a perfect square.\n\nTime constraints:\n\n5 easy (sample) test cases: n < 20\n\n5 harder test cases: 1000 < n < 15000\n\n5 maximally hard test cases: 5 * 1e8 < n < 1e9\n\n```if:java\n300 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:c#\n350 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:python\n15 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:ruby\n25  random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:javascript\n100 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:crystal\n250 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:cpp\nRandom maximally hard test cases: 1e8 < n < 1e9\n```\n\n Examples: \nInput: \n[15]\nOutput: \n [4]\nInput: \n[16]\nOutput: \n [1]\nInput: \n[17]\nOutput: \n [2]\nInput: \n[18]\nOutput: \n [2]\nInput: \n[19]\nOutput: \n [3]\nInput: \n[2017]\nOutput: \n [2]\nInput: \n[1008]\nOutput: \n [4]\nInput: \n[3456]\nOutput: \n [3]\nInput: \n[4000]\nOutput: \n [2]\nInput: \n[12321]\nOutput: \n [1]\nInput: \n[661915703]\nOutput: \n [4]\nInput: \n[999887641]\nOutput: \n [1]\nInput: \n[999950886]\nOutput: \n [3]\nInput: \n[999951173]\nOutput: \n [2]\nInput: \n[999998999]\nOutput: \n [4]\n",
  "1646": "Problem: \nThis is a very simply formulated task. Let's call an integer number `N` 'green' if `N\u00b2` ends with all of the digits of `N`. Some examples:\n\n`5` is green, because `5\u00b2 = 25` and `25` ends with `5`.\n\n`11` is not green, because `11\u00b2 = 121` and `121` does not end with `11`.\n\n`376` is green, because `376\u00b2 = 141376` and `141376` ends with `376`.\n\nYour task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`\n\n---\n\n## Data range\n\n```if:haskell\n`n <= 4000` for Haskell\n```\n```if:java\n`n <= 5000` for Java\n```\n```if:python\n`n <= 5000` for Python\n```\n```if:javascript\n`n <= 3000` for JavaScript\n\nReturn values should be `String`s, and should be exact. A BigNum library is recommended.\n```\n\n Examples: \nInput: \n[1]\nOutput: \n [1]\nInput: \n[2]\nOutput: \n [5]\nInput: \n[3]\nOutput: \n [6]\nInput: \n[4]\nOutput: \n [25]\nInput: \n[12]\nOutput: \n [2890625]\nInput: \n[13]\nOutput: \n [7109376]\nInput: \n[100]\nOutput: \n [6188999442576576769103890995893380022607743740081787109376]\nInput: \n[110]\nOutput: \n [9580863811000557423423230896109004106619977392256259918212890625]\n",
  "1647": "Problem: \nCreate a function that takes a positive integer and returns the next bigger number that can be formed by rearranging its digits. For example:\n\n```\n12 ==> 21\n513 ==> 531\n2017 ==> 2071\n```\n\nIf the digits can't be rearranged to form a bigger number, return `-1` (or `nil` in Swift):\n\n```\n9 ==> -1\n111 ==> -1\n531 ==> -1\n```\n\n Examples: \nInput: \n[12]\nOutput: \n [21]\nInput: \n[513]\nOutput: \n [531]\nInput: \n[2017]\nOutput: \n [2071]\nInput: \n[414]\nOutput: \n [441]\nInput: \n[144]\nOutput: \n [414]\nInput: \n[123456789]\nOutput: \n [123456798]\nInput: \n[1234567890]\nOutput: \n [1234567908]\nInput: \n[9876543210]\nOutput: \n [-1]\nInput: \n[9999999999]\nOutput: \n [-1]\nInput: \n[59884848459853]\nOutput: \n [59884848483559]\n",
  "1648": "Problem: \nThis is the performance version of [this kata](https://www.codewars.com/kata/59afff65f1c8274f270020f5).\n\n---\n\nImagine two rings with numbers on them. The inner ring spins clockwise and the outer ring spins anti-clockwise. We start with both rings aligned on 0 at the top, and on each move we spin each ring by 1. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n```\ne.g. if innerMax is 2 and outerMax is 3 then after\n1 move: inner = 2, outer = 1\n2 moves: inner = 1, outer = 2\n3 moves: inner = 0, outer = 3\n4 moves: inner = 2, outer = 0\n5 moves: inner = 1, outer = 1\nTherefore it takes 5 moves for the two rings to reach the same number\nTherefore spinningRings(2, 3) = 5\n```\n```\ne.g. if innerMax is 3 and outerMax is 2 then after\n1 move: inner = 3, outer = 1\n2 moves: inner = 2, outer = 2\nTherefore it takes 2 moves for the two rings to reach the same number\nspinningRings(3, 2) = 2\n```\n\n---\n\nTest input range:\n\n- `100` tests with `1 <= innerMax, outerMax <= 10000`\n- `400` tests with `1 <= innerMax, outerMax <= 2^48`\n\n Examples: \nInput: \n[5, 5]\nOutput: \n [3]\nInput: \n[2, 10]\nOutput: \n [13]\nInput: \n[10, 2]\nOutput: \n [10]\nInput: \n[7, 9]\nOutput: \n [4]\nInput: \n[1, 1]\nOutput: \n [1]\nInput: \n[16777216, 14348907]\nOutput: \n [23951671]\n",
  "1650": "Problem: \nWe want to generate all the numbers of three digits where:\n\n- the sum of their digits is equal to 10.\n\n- their digits are in increasing order (the numbers may have two or more equal contiguous digits)\n\nThe numbers that fulfill the two above constraints are: ```118, 127, 136, 145, 226, 235, 244, 334```\n\nMake a function that receives two arguments:\n\n- the sum of digits value \n\n- the desired number of digits for the numbers\n\nThe function should output an array with three values: \\[1,2,3\\]\n\n1 - the total number of possible numbers\n\n2 - the minimum number\n\n3 - the maximum number\n\nThe example given above should be:\n\n```python\nfind_all(10, 3) == [8, 118, 334]\n```\n\nIf we have only one possible number as a solution, it should output a result like the one below:\n\n```python\nfind_all(27, 3) == [1, 999, 999]\n```\n\nIf there are no possible numbers, the function should output the empty array.\n\n```python\nfind_all(84, 4) == []\n```\n\nThe number of solutions climbs up when the number of digits increases.\n\n```python\nfind_all(35, 6) == [123, 116999, 566666]\n```\n\nFeatures of the random tests:\n\n* Number of tests: `112`\n* Sum of digits value between `20` and `65`\n* Amount of digits between `2` and `17`\n\n Examples: \nInput: \n[10, 3]\nOutput: \n [[8, 118, 334]]\nInput: \n[27, 3]\nOutput: \n [[1, 999, 999]]\nInput: \n[84, 4]\nOutput: \n [[]]\nInput: \n[35, 6]\nOutput: \n [[123, 116999, 566666]]\n",
  "1651": "Problem: \nA format for expressing an ordered list of integers is to use a comma separated list of either\n\n* individual integers\n* or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, '-'. The range includes all integers in the interval including both endpoints.  It is not considered a range unless it spans at least 3 numbers. For example \"12,13,15-17\"\n\nComplete the solution  so that it takes a list of integers in increasing order and returns a correctly formatted string in the range format. \n\n**Example:**\n\n```python\nsolution([-6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20])\n# returns \"-6,-3-1,3-5,7-11,14,15,17-20\"\n```\n\n```C#\nRangeExtraction.Extract(new[] {-6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20});\n# returns \"-6,-3-1,3-5,7-11,14,15,17-20\"\n```\n\n*Courtesy of rosettacode.org*\n\n Examples: \nInput: \n[[-6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]]\nOutput: \n ['-6,-3-1,3-5,7-11,14,15,17-20']\nInput: \n[[-3, -2, -1, 2, 10, 15, 16, 18, 19, 20]]\nOutput: \n ['-3--1,2,10,15,16,18-20']\nInput: \n[[1, 2, 3, 4, 5]]\nOutput: \n ['1-5']\n",
  "1652": "Problem: \nYour task in order to complete this Kata is to write a function which formats a duration, given as a number of seconds, in a human-friendly way.\n\nThe function must accept a non-negative integer. If it is zero, it just returns `\"now\"`. Otherwise,  the duration is expressed as a combination of `years`, `days`, `hours`, `minutes` and `seconds`.\n\nIt is much easier to understand with an example:\n\n```Fortran\nformatDuration (62)    // returns \"1 minute and 2 seconds\"\nformatDuration (3662)  // returns \"1 hour, 1 minute and 2 seconds\"\n```\n```python\nformat_duration(62)    # returns \"1 minute and 2 seconds\"\nformat_duration(3662)  # returns \"1 hour, 1 minute and 2 seconds\"\n```\n\n**For the purpose of this Kata, a year is 365 days and a day is 24 hours.**\n\nNote that spaces are important.\n\n### Detailed rules\n\nThe resulting expression is made of components like `4 seconds`, `1 year`, etc.  In general, a positive integer and one of the valid units of time, separated by a space. The unit of time is used in plural if the integer is greater than 1.\n\nThe components are separated by a comma and a space (`\", \"`). Except the last component, which is separated by `\" and \"`, just like it would be written in English. \n\nA more significant units of time will occur before than a least significant one. Therefore, `1 second and 1 year` is not correct, but `1 year and 1 second` is.\n\nDifferent components have different unit of times. So there is not repeated units like in `5 seconds and 1 second`.\n\nA component will not appear at all if its value happens to be zero.  Hence, `1 minute and 0 seconds` is not valid, but it should be just `1 minute`.\n\n A unit of time must be used \"as much as possible\". It means that the function should not return `61 seconds`, but `1 minute and 1 second` instead.  Formally, the duration specified by  of a component must not be greater than any valid more significant unit of time.\n\n Examples: \nInput: \n[0]\nOutput: \n ['now']\nInput: \n[1]\nOutput: \n ['1 second']\nInput: \n[62]\nOutput: \n ['1 minute and 2 seconds']\nInput: \n[120]\nOutput: \n ['2 minutes']\nInput: \n[3600]\nOutput: \n ['1 hour']\nInput: \n[3662]\nOutput: \n ['1 hour, 1 minute and 2 seconds']\nInput: \n[15731080]\nOutput: \n ['182 days, 1 hour, 44 minutes and 40 seconds']\nInput: \n[132030240]\nOutput: \n ['4 years, 68 days, 3 hours and 4 minutes']\nInput: \n[205851834]\nOutput: \n ['6 years, 192 days, 13 hours, 3 minutes and 54 seconds']\nInput: \n[253374061]\nOutput: \n ['8 years, 12 days, 13 hours, 41 minutes and 1 second']\nInput: \n[242062374]\nOutput: \n ['7 years, 246 days, 15 hours, 32 minutes and 54 seconds']\nInput: \n[101956166]\nOutput: \n ['3 years, 85 days, 1 hour, 9 minutes and 26 seconds']\nInput: \n[33243586]\nOutput: \n ['1 year, 19 days, 18 hours, 19 minutes and 46 seconds']\n",
  "1653": "Problem: \nThis kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fibfusc-function-part-1). The `fibfusc` function is defined recursively as follows:\n\n    fibfusc(0) = (1, 0)\n    fibfusc(1) = (0, 1)\n    fibfusc(2n) = ((x + y)(x - y), y(2x + 3y)), where (x, y) = fibfusc(n)\n    fibfusc(2n + 1) = (-y(2x + 3y), (x + 2y)(x + 4y)), where (x, y) = fibfusc(n)\n\nYour job is to produce the code for the `fibfusc` function. In this kata, your function will be tested with large values of n (up to 2000 bits), so you should be concerned about stack overflow and timeouts. Moreover, since the `fibfusc` function grows exponentially, your function should take an extra argument `num_digits` with a default value of `None`. When not `None`, `num_digits` takes a positive `int` value and the returned values shall be truncated to the last `num_digits` digits. \n\nFor example, let `n = 101`. With `num_digits` not set or set to `None`, `fibfusc` should return: \n`(-280571172992510140037611932413038677189525L, 734544867157818093234908902110449296423351L)`. If `num_digits = 12`, the function should return `(-38677189525L, 449296423351L)`. Notice in particular, that for any value of `n` greater than 1, `x` is negative, and the truncated value of `x` should also be negative.\n\nHint 1: Use modulo `10 ** num_digits` arithmetic to keep all intermediary results small.\n\nHint 2: Consider using an iterative [\"number climber\"](http://www.codewars.com/kata/number-climber) to avoid stack overflows.\n\n Examples: \nInput: \n[0]\nOutput: \n [[1, 0]]\nInput: \n[1]\nOutput: \n [[0, 1]]\n",
  "1654": "Problem: \nTo give credit where credit is due: This problem was taken from the ACMICPC-Northwest Regional Programming Contest. Thank you problem writers.\n\nYou are helping an archaeologist decipher some runes. He knows that this ancient society used a Base 10 system, and that they never start a number with a leading zero. He's figured out most of the digits as well as a few operators, but he needs your help to figure out the rest.\n\nThe professor will give you a simple math expression, of the form\n\n```\n[number][op][number]=[number]\n```\n\nHe has converted all of the runes he knows into digits. The only operators he knows are addition (`+`),subtraction(`-`), and multiplication (`*`), so those are the only ones that will appear. Each number will be in the range from -1000000 to 1000000, and will consist of only the digits 0-9, possibly a leading -, and maybe a few ?s. If there are ?s in an expression, they represent a digit rune that the professor doesn't know (never an operator, and never a leading -). All of the ?s in an expression will represent the same digit (0-9), and it won't be one of the other given digits in the expression. No number will begin with a 0 unless the number itself is  0, therefore 00 would not be a valid number. \n\nGiven an expression, figure out the value of the rune represented by the question mark. If more than one digit works, give the lowest one. If no digit works, well, that's bad news for the professor - it means that he's got some of his runes wrong. output -1 in that case.\n\nComplete the method to solve the expression to find the value of the unknown rune. The method takes a string as a paramater repressenting the expression and will return an int value representing the unknown rune or -1 if no such rune exists.\n\n~~~if:php\n**Most of the time, the professor will be able to figure out most of the runes himself, but sometimes, there may be exactly 1 rune present in the expression that the professor cannot figure out (resulting in all question marks where the digits are in the expression) so be careful ;)**\n~~~\n\n Examples: \nInput: \n['123?45*?=?']\nOutput: \n [0]\nInput: \n['?*123?45=?']\nOutput: \n [0]\nInput: \n['??605*-63=-73???5']\nOutput: \n [1]\nInput: \n['123?45+?=123?45']\nOutput: \n [0]\nInput: \n['?8?170-1?6256=7?2?14']\nOutput: \n [9]\nInput: \n['?38???+595???=833444']\nOutput: \n [2]\nInput: \n['123?45-?=123?45']\nOutput: \n [0]\nInput: \n['-7715?5--484?00=-28?9?5']\nOutput: \n [6]\nInput: \n['50685?--1?5630=652?8?']\nOutput: \n [4]\nInput: \n['??+??=??']\nOutput: \n [-1]\nInput: \n['-?56373--9216=-?47157']\nOutput: \n [8]\n",
  "1655": "Problem: \n```if:java\n___Note for Java users:___ Due to type checking in Java, inputs and outputs are formated quite differently in this language. See the footnotes of the description.\n\n\n```\n\nYou have the following lattice points with their corresponding coordinates and each one with an specific colour.\n\n ```\nPoint   [x ,  y]     Colour\n----------------------------\n  A     [ 3,  4]     Blue\n  B     [-7, -1]     Red\n  C     [ 7, -6]     Yellow\n  D     [ 2,  5]     Yellow\n  E     [ 1, -5]     Red\n  F     [-1,  4]     Red\n  G     [ 1,  7]     Red\n  H     [-3,  5]     Red\n  I     [-3, -5]     Blue\n  J     [ 4,  1]     Blue\n```\nWe want to count the triangles that have the three vertices with the same colour. The following picture shows the distribution of the points in the plane with the required triangles.\n\n![source: imgur.com](http://i.imgur.com/sP0l1i1.png)\n\nThe input that we will have for the field of lattice points described above is:\n\n```\n[[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"], \n [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ]\n```\nWe see the following result from it:\n\n```\nColour   Amount of Triangles       Triangles\nYellow         0                    -------\nBlue           1                      AIJ\nRed            10                   BEF,BEG,BEH,BFG,BFH,BGH,EFG,EFH,EHG,FGH\n```\nAs we have 5 different points in red and each combination of 3 points that are not aligned.\n\nWe need a code that may give us the following information in order:\n\n```\n1) Total given points\n2) Total number of colours\n3) Total number of possible triangles\n4) and 5) The colour (or colours, sorted alphabetically) with the highest amount of triangles\n```\n\nIn Python our function will work like:\n\n```\n[10, 3, 11, [\"red\",10]]) == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], \n                                              [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"],     [[-3, 5], \"red\"],\n                                              [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nIn the following case we have some points that are aligned and we have less triangles that can be formed:\n\n```\n[10, 3, 7, [\"red\", 6]] == count_col_triang([[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n                                            [[1, -5], \"red\"],   [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"], \n                                            [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nJust to see the change with the previous case we have this:\n\n![source: imgur.com](http://i.imgur.com/cCgO7ql.png)\n\nIn the special case that the list of points does not generate an even single triangle, the output will be like this case:\n\n```\n[9, 3, 0, []] == count_col_triang([[[1, -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"],\n                                  [[1, 1], \"red\"],   [[1, 7], \"red\"],     [[1, 4], \"red\"],    [[-3, -5], \"blue\"], \n                                  [[4, 1], \"blue\"] ])\n```\nIt will be this case:\n\n![source: imgur.com](http://i.imgur.com/VB7t7Ij.png)\n\nIf in the result we have two or more colours with the same maximum amount of triangles, the last list should be like (e.g)\n\n```\n[35, 6, 35, [\"blue\", \"red\", \"yellow\", 23]]     # having the names of the colours sorted alphabetically\n```\nFor the condition of three algined points A, B, C, you should know that the the following determinant should be 0.\n\n```\n | xA    yA    1|\n | xB    yB    1|    = 0\n | xC    yC    1|\n\n```\nAssumptions:\n\n- In the list you have unique points, so a point can have only one colour.\n\n- All the inputs are valid\n\nEnjoy it!\n\n````if:java\n---\n\n___For java users:___\n\nTwo immutable objects, `ColouredPoint` and `TriangleResult`, have been designed for you in the preloaded part. You will receive inputs as lists of ColouredPoint objects and will return a TriangleResult object. For the last one, you may note the organization of the arguments of the constructor which differs a bit from the description above.\n\nYou may find below the signatures of the available methods of these objects:\n\n````\n\n Examples: \nInput: \n[[[[3, -4], 'blue'], [[-7, -1], 'red'], [[7, -6], 'yellow'], [[2, 5], 'yellow'], [[1, -5], 'red'], [[-1, 4], 'red'], [[1, 7], 'red'], [[-3, 5], 'red'], [[-3, -5], 'blue'], [[4, 1], 'blue']]]\nOutput: \n [[10, 3, 11, ['red', 10]]]\nInput: \n[[[[3, -4], 'blue'], [[-7, -1], 'red'], [[7, -6], 'yellow'], [[2, 5], 'yellow'], [[1, -5], 'red'], [[1, 1], 'red'], [[1, 7], 'red'], [[1, 4], 'red'], [[-3, -5], 'blue'], [[4, 1], 'blue']]]\nOutput: \n [[10, 3, 7, ['red', 6]]]\nInput: \n[[[[1, -2], 'red'], [[7, -6], 'yellow'], [[2, 5], 'yellow'], [[1, -5], 'red'], [[1, 1], 'red'], [[1, 7], 'red'], [[1, 4], 'red'], [[-3, -5], 'blue'], [[4, 1], 'blue']]]\nOutput: \n [[9, 3, 0, []]]\n",
  "1656": "Problem: \nWith your birthday coming up soon, your eccentric friend sent you a message to say \"happy birthday\":\n\n    hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu\n    hhapppyyyy biirtttthdaaay too youuu\n    happy birrrthdayy to youuu\n    happpyyyy birrtthdaaay tooooo youu\n\nAt first it looks like a song, but upon closer investigation, you realize that your friend hid the phrase \"happy birthday\" thousands of times inside his message. In fact, it contains it more than 2 million times! To thank him, you'd like to reply with exactly how many times it occurs.\n\nTo count all the occurences, the procedure is as follows: look through the paragraph and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'` after that, and so on. Now count the number of ways in which you can choose letters in this way to make the full phrase.\n\nMore precisely, given a text string, you are to determine how many times the search string appears as a sub-sequence of that string.\n\nWrite a function called `countSubsequences` that takes two arguments: `needle`, the string to be search for and `haystack`, the string to search in. In our example, `\"happy birthday\"` is the needle and the birthday message is the haystack. The function should return the number of times `needle` occurs as a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\nSince the answers can be very large, return only the last 8 digits of the answer in case it exceeds 8 digits. The answers to the test cases will all be shorter than 8 digits.\n\n Examples: \nInput: \n['happy birthday', 'appyh appy birth day']\nOutput: \n [1]\nInput: \n['happy birthday', 'hhaappyy bbiirrtthhddaayy']\nOutput: \n [2048]\nInput: \n['happy birthday', 'happy holidays']\nOutput: \n [0]\nInput: \n['happy birthday', 'happy birthday']\nOutput: \n [1]\nInput: \n['happy', 'hhhappy']\nOutput: \n [3]\nInput: \n['happy birthday', 'hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu']\nOutput: \n [7680]\n",
  "1657": "Problem: \nThis kata is  blatantly copied from  inspired by This Kata\nWelcome\n\nthis is the second in the series of the string iterations kata!\n\nHere we go!\n\n---------------------------------------------------------------------------------\n\nWe have a string s\n\nLet's say you start with this: \"String\"\n\nThe first thing you do is reverse it: \"gnirtS\"\n\nThen you will take the string from the 1st position and reverse it again: \"gStrin\"\n\nThen you will take the string from the 2nd position and reverse it again: \"gSnirt\"\n\nThen you will take the string from the 3rd position and reverse it again: \"gSntri\"\n\nContinue this pattern until you have done every single position, and then you will return the string you have created. For this particular string, you would return: \n\"gSntir\"\n\nnow,\n\nThe Task:\n\nIn this kata, we also have a number x\n\ntake that reversal function, and apply it to the string x times.\n\n\nreturn the result of the string after applying the reversal function to it x times.\n\n    example where s = \"String\" and x = 3:\n\n    after 0 iteration  s = \"String\"\n    after 1 iteration  s = \"gSntir\"\n    after 2 iterations s = \"rgiStn\"\n    after 3 iterations s = \"nrtgSi\"\n    \n    so you would return \"nrtgSi\".\n\n Note \n\nString lengths may exceed 2 million\n\n\nx exceeds a billion\n\n\nbe read to optimize\n\n\n\nif this is too hard, go here https://www.codewars.com/kata/string-%3E-n-iterations-%3E-string/java\n\n Examples: \nInput: \n['This is a string exemplification!', 0]\nOutput: \n ['This is a string exemplification!']\nInput: \n['String for test: incommensurability', 1]\nOutput: \n ['ySttirliinbga rfuosrn etmemsotc:n i']\nInput: \n['Ohh Man God Damn', 7]\nOutput: \n [' nGOnmohaadhMD  ']\nInput: \n['Ohh Man God Damnn', 19]\nOutput: \n ['haG mnad MhO noDn']\nInput: \n['I like it!', 1234]\nOutput: \n ['iitkIl !e ']\nInput: \n['codingisfornerdsyounerd', 10101010]\nOutput: \n ['fonroisreinrddgdneyscou']\nInput: \n['this_test_will_hurt_you', 12345678987654321]\nOutput: \n ['tt_rt_swuhyeihiotl_su_l']\n",
  "1658": "Problem: \nThe aim is to calculate `exponential(x)` (written `exp(x)` in most math libraries) as an irreducible fraction, the numerator of this fraction having a given number of digits.\n\nWe call this function `expand`, it takes two parameters, `x` of which we want to evaluate the exponential, `digits` which is the required number of digits for the numerator. \n\nThe function `expand` will return an array of the form `[numerator, denominator]`; we stop the loop in the Taylor expansion (see references below) when the numerator has a number of digits `>=` the required number of digits\n\n# Examples:\n```\nexpand(1, 2) --> 65/24 (we will write this [65, 24] or (65, 24) in Haskell; \n65/24 ~ 2.708...)\n\nexpand(2, 5) --> [20947, 2835]\n\nexpand(3, 10) --> [7205850259, 358758400]\n\nexpand(1.5, 10) --> [36185315027,8074035200]\n```\n**Note**\n```expand(1,5) = [109601, 40320]``` is the same as ```expand(1, 6)```\n\n#Method:\nAs said above the way here is to use `Taylor expansion` of the exponential function though it is not always the best approximation by a rational.\n\n#References:\nhttps://en.wikipedia.org/wiki/Exponential_function#Formal_definition\n\nhttp://www.efunda.com/math/taylor_series/exponential.cfm\n\n Examples: \nInput: \n[1, 2]\nOutput: \n [[65, 24]]\nInput: \n[1, 5]\nOutput: \n [[109601, 40320]]\nInput: \n[1, 6]\nOutput: \n [[109601, 40320]]\nInput: \n[10, 3]\nOutput: \n [[683, 3]]\nInput: \n[10, 4]\nOutput: \n [[1933, 3]]\nInput: \n[10, 40]\nOutput: \n [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]\nInput: \n[10, 39]\nOutput: \n [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]\nInput: \n[10, 38]\nOutput: \n [[1239343290542858204293897268755807211243, 56266098342252742161373730812700463]]\nInput: \n[1.5, 10]\nOutput: \n [[36185315027, 8074035200]]\nInput: \n[1.6, 10]\nOutput: \n [[27425286391, 5537109375]]\nInput: \n[1.7, 10]\nOutput: \n [[3933851989, 720000000]]\nInput: \n[1.7, 12]\nOutput: \n [[22069373989681, 4032000000000]]\nInput: \n[1.7, 15]\nOutput: \n [[1986362246947787, 362880000000000]]\nInput: \n[1.8, 20]\nOutput: \n [[13246837419514181887, 2189687500000000000]]\nInput: \n[2.0, 20]\nOutput: \n [[355236915407681299637, 48076088562799171875]]\nInput: \n[1.95, 60]\nOutput: \n [[12382830214749612215651955187527316512224932853910667762866497, 1761755672416929554471321600000000000000000000000000000000000]]\n",
  "1660": "Problem: \nWhen we attended middle school were asked to simplify mathematical expressions like \"3x-yx+2xy-x\" (or usually bigger), and that was easy-peasy (\"2x+xy\"). But tell that to your pc and we'll see! \n\nWrite a function: `simplify`, that takes a string in input, representing a *multilinear non-constant polynomial in integers coefficients* (like `\"3x-zx+2xy-x\"`), and returns another string as output where the same expression has been simplified in the following way ( `->` means application of `simplify`):\n\n- All possible sums and subtraction of equivalent monomials (\"xy==yx\") has been done, e.g.: `\"cb+cba\" -> \"bc+abc\"`, `\"2xy-yx\" -> \"xy\"`, `\"-a+5ab+3a-c-2a\" -> \"-c+5ab\"`\n\n- All monomials appears in order of increasing number of variables, e.g.: `\"-abc+3a+2ac\" -> \"3a+2ac-abc\"`, `\"xyz-xz\" -> \"-xz+xyz\"`\n \n- If two monomials have the same number of variables, they appears in lexicographic order, e.g.: `\"a+ca-ab\" -> \"a-ab+ac\"`, `\"xzy+zby\" ->\"byz+xyz\"`\n  \n- There is no leading `+` sign if the first coefficient is positive, e.g.: `\"-y+x\" -> \"x-y\"`, but no restrictions for `-`:  `\"y-x\" ->\"-x+y\"`\n\n---\n\n__N.B.__ to keep it simplest, the string in input is restricted to represent only *multilinear non-constant polynomials*, so you won't find something like `-3+yx^2'. **Multilinear** means in this context: **of degree 1 on each variable**.\n\n**Warning**: the string in input can contain arbitrary variables represented by lowercase characters in the english alphabet.\n\n__Good Work :)__\n\n Examples: \nInput: \n['dc+dcba']\nOutput: \n ['cd+abcd']\nInput: \n['2xy-yx']\nOutput: \n ['xy']\nInput: \n['-a+5ab+3a-c-2a']\nOutput: \n ['-c+5ab']\nInput: \n['-abc+3a+2ac']\nOutput: \n ['3a+2ac-abc']\nInput: \n['xyz-xz']\nOutput: \n ['-xz+xyz']\nInput: \n['a+ca-ab']\nOutput: \n ['a-ab+ac']\nInput: \n['xzy+zby']\nOutput: \n ['byz+xyz']\nInput: \n['-y+x']\nOutput: \n ['x-y']\nInput: \n['y-x']\nOutput: \n ['-x+y']\nInput: \n['3a+b+4ac+bc-ab+3a-cb-a-a']\nOutput: \n ['4a+b-ab+4ac']\nInput: \n['+n-5hn+7tjhn-4nh-3n-6hnjt+2jhn+9hn']\nOutput: \n ['-2n+2hjn+hjnt']\nInput: \n['-8fk+5kv-4yk+7kf-qk+yqv-3vqy+4ky+4kf+yvqkf']\nOutput: \n ['3fk-kq+5kv-2qvy+fkqvy']\n",
  "1662": "Problem: \nYou are given a binary tree:\n\n```python\nclass Node:\n    def __init__(self, L, R, n):\n        self.left = L\n        self.right = R\n        self.value = n\n```\n\nYour task is to return the list with elements from tree sorted by levels, which means the root element goes first, then root children (from left to right) are second and third, and so on.\n```if:ruby\nReturn empty array if root is `nil`.\n```\n```if:haskell\nReturn empty list if root is `Nothing`.\n```\n```if:python\nReturn empty list if root is `None`.\n```\n```if:csharp\nReturn empty list if root is 'null'.\n```\n```if:java\nReturn empty list is root is 'null'.\n```\n\nExample 1 - following tree:\n\n                     2\n                8        9\n              1  3     4   5\n\nShould return following list:\n\n    [2,8,9,1,3,4,5]\n\nExample 2 - following tree:\n\n                     1\n                8        4\n                  3        5\n                             7\nShould return following list:\n\n    [1,8,4,3,5,7]\n\n Examples: \nInput: \n[None]\nOutput: \n [[]]\n",
  "1663": "Problem: \nIn this Kata we focus on finding a sum S(n) which is the total number of divisors taken for all natural numbers less or equal to n. More formally, we investigate the sum of n components denoted by d(1) + d(2) + ... + d(n) in which for any i starting from 1 up to n the value of d(i) tells us how many distinct numbers divide i without a remainder. \n\nYour solution should work for possibly large values of n without a timeout.\nAssume n to be greater than zero and not greater than 999 999 999 999 999.\nBrute force approaches will not be feasible options in such cases. It is fairly simple to conclude that for every n>1 there holds a recurrence S(n) = S(n-1) + d(n) with initial case S(1) = 1.\n\nFor example:\nS(1) = 1\nS(2) = 3\nS(3) = 5\nS(4) = 8\nS(5) = 10\n\nBut is the fact useful anyway? If you find it is rather not, maybe this will help: \n\nTry to convince yourself that for any natural k, the number S(k) is the same as the number of pairs (m,n) that solve the inequality mn <= k in natural numbers.\nOnce it becomes clear, we can think of a partition of all the solutions into classes just by saying that a pair (m,n) belongs to the class indexed by n.\nThe question now arises if it is possible to count solutions of n-th class. If f(n) stands for the number of solutions that belong to n-th class, it means that S(k) = f(1) + f(2) + f(3) + ...\n\nThe reasoning presented above leads us to some kind of a formula for S(k), however not necessarily the most efficient one. Can you imagine that all the solutions to inequality mn <= k can be split using sqrt(k) as pivotal item?\n\n Examples: \nInput: \n[5]\nOutput: \n [10]\nInput: \n[10]\nOutput: \n [27]\nInput: \n[20]\nOutput: \n [66]\nInput: \n[59]\nOutput: \n [249]\nInput: \n[105]\nOutput: \n [510]\nInput: \n[785]\nOutput: \n [5364]\nInput: \n[1001]\nOutput: \n [7077]\nInput: \n[8009]\nOutput: \n [73241]\nInput: \n[9999999999999]\nOutput: \n [300880375389561]\nInput: \n[9999999999998]\nOutput: \n [300880375389537]\nInput: \n[9999999999995]\nOutput: \n [300880375389493]\nInput: \n[9999999949950]\nOutput: \n [300880373832097]\n",
  "1665": "Problem: \nComplete the function/method (depending on the language) to return `true`/`True` when its argument is an array that has the same nesting structures and same corresponding length of nested arrays as the first array.\n\nFor example:\n\n```python\n# should return True\nsame_structure_as([ 1, 1, 1 ], [ 2, 2, 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ 2, [ 2, 2 ] ] )\n\n# should return False \nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2, 2 ], 2 ] )\nsame_structure_as([ 1, [ 1, 1 ] ], [ [ 2 ], 2 ] )\n\n# should return True\nsame_structure_as([ [ [ ], [ ] ] ], [ [ [ ], [ ] ] ] )\n\n# should return False\nsame_structure_as([ [ [ ], [ ] ] ], [ [ 1, 1 ] ] )\n```\n\n~~~if:javascript\nFor your convenience, there is already a function 'isArray(o)' declared and defined that returns true if its argument is an array, false otherwise.\n~~~\n\n~~~if:php\nYou may assume that all arrays passed in will be non-associative.\n~~~\n\n Examples: \nInput: \n[[1, [1, 1]], [[2, 2], 2]]\nOutput: \n [False]\nInput: \n[[1, [1, 1]], [2, [2]]]\nOutput: \n [False]\nInput: \n[[[[], []]], [[[], []]]]\nOutput: \n [True]\nInput: \n[[[[], []]], [[1, 1]]]\nOutput: \n [False]\nInput: \n[[1, [[[1]]]], [2, [[[2]]]]]\nOutput: \n [True]\nInput: \n[[], 1]\nOutput: \n [False]\nInput: \n[[], {}]\nOutput: \n [False]\nInput: \n[[1, '[', ']'], ['[', ']', 1]]\nOutput: \n [True]\n",
  "1666": "Problem: \n## Description\n\nGiven an array X of positive integers, its elements are to be transformed by running the following operation on them as many times as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations are possible, return its sum (\"smallest possible sum\").\n\nFor instance, the successive transformation of the elements of input X = [6, 9, 21] is detailed below:\n```\nX_1 = [6, 9, 12] # -> X_1[2] = X[2] - X[1] = 21 - 9\nX_2 = [6, 9, 6]  # -> X_2[2] = X_1[2] - X_1[0] = 12 - 6\nX_3 = [6, 3, 6]  # -> X_3[1] = X_2[1] - X_2[0] = 9 - 6\nX_4 = [6, 3, 3]  # -> X_4[2] = X_3[2] - X_3[1] = 6 - 3\nX_5 = [3, 3, 3]  # -> X_5[1] = X_4[0] - X_4[1] = 6 - 3\n```\nThe returning output is the sum of the final transformation (here 9).\n\n## Example\n\n## Solution steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very big numbers and arrays of size at least 30000. Please write an efficient algorithm to prevent timeout.\n\n Examples: \nInput: \n[[6, 9, 21]]\nOutput: \n [9]\nInput: \n[[9]]\nOutput: \n [9]\nInput: \n[[30, 12]]\nOutput: \n [12]\nInput: \n[[11, 22]]\nOutput: \n [22]\nInput: \n[[1, 21, 55]]\nOutput: \n [3]\nInput: \n[[4, 16, 24]]\nOutput: \n [12]\nInput: \n[[3, 13, 23, 7, 83]]\nOutput: \n [5]\nInput: \n[[60, 12, 96, 48, 60, 24, 72, 36, 72, 72, 48]]\nOutput: \n [132]\nInput: \n[[71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]]\nOutput: \n [923]\n",
  "1667": "Problem: \n# Unflatten a list (Harder than easy)\n\nThis is the harder version of Unflatten a list (Easy)\n\nSo you have again to build a method, that creates new arrays, that can be flattened!\n\n# Shorter: You have to unflatten a list/an array.\n\nYou get an array of integers and have to unflatten it by these rules:\n```\n- You have to do several runs. The depth is the number of runs, you have to do.\n- In every run you have to switch the direction. First run from left, next run from right. Next left...\nEvery run has these rules:\n- You start at the first number (from the direction).\n- Take for every number x the remainder of the division by the number of still available elements (from \n  this position!) to have the number for the next decision.\n- If the remainder-value is smaller than 3, take this number x (NOT the remainder-Value) direct\n  for the new array and continue with the next number.\n- If the remainder-value (e.g. 3) is greater than 2, take the next remainder-value-number (e.g. 3)\n  elements/numbers (inclusive the number x, NOT the remainder-value) as a sub-array in the new array.\n  Continue with the next number/element AFTER this taken elements/numbers.\n- Every sub-array in the array is independent and is only one element for the progress on the array. \n  For every sub-array you have to follow the same rules for unflatten it.\n  The direction is always the same as the actual run.\n```\n\nSounds complicated? Yeah, thats why, this is the harder version...\nMaybe an example will help.\n\n```\n Array: [4, 5, 1, 7, 1] Depth: 2 -> [[ 4, [ 5, 1, 7 ] ], 1]\n \nSteps: \nFirst run: (start from left side!)\n1. The first number is 4. The number is smaller than the number of remaining elements, so it is the remainder-value (4 / 5 -> remainder 4).\n   So 4 numbers (4, 5, 1, 7) are added as sub-array in the new array.\n2. The next number is 1. It is smaller than 3, so the 1 is added direct to the new array.\nNow we have --> [[4, 5, 1, 7], 1]\n\nSecond run: (start from right side!)\n1. The last number (first from other side) is 1. So the 1 is added direct to the new array.\n2. The next element is the sub-array. So we use the rules for this.\n2a.The last number is 7. There are 4 elements in the array. So for the next decision you have to\n   take the remainder from 7 / 4 -> 3. So 3 numbers (5, 1, 7) are added as sub-array in the \n   new array.\n2b.Now there is the 4 and only one element last in this array. 4 / 1 -> remainder 0. It is smaller\n   than 3. So the 4 is added direct to the new array.\nNow we have --> [[ 4, [ 5, 1, 7 ] ], 1]\n```\n\nThe given array will always contain numbers. There will only be numbers > 0.\n\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\n Examples: \nInput: \n[[4, 5, 1, 7, 1], 2]\nOutput: \n [[[4, [5, 1, 7]], 1]]\nInput: \n[[12, 1, 5, 3, 1, 55, 2, 3, 7, 8, 1], 3]\nOutput: \n [[12, 1, [5, [3, 1, 55], 2], [3, 7, 8], 1]]\n",
  "1668": "Problem: \nWrite a function that takes a positive integer and returns the next smaller positive integer containing the same digits.\n\nFor example:\n\n```python\nnext_smaller(21) == 12\nnext_smaller(531) == 513\nnext_smaller(2071) == 2017\n```\n\nReturn -1 (for `Haskell`: return `Nothing`, for `Rust`: return `None`), when there is no smaller number that contains the same digits. Also return -1 when the next smaller number with the same digits would require the leading digit to be zero.\n\n```python \nnext_smaller(9) == -1\nnext_smaller(135) == -1\nnext_smaller(1027) == -1  # 0721 is out since we don't write numbers with leading zeros\n```\n```ruby \nnext_smaller(9) == -1\nnext_smaller(135) == -1\nnext_smaller(1027) == -1  # 0721 is out since we don't write numbers with leading zeros\n```\n\n * some tests will include very large numbers.\n * test data only employs positive integers.\n\n*The function you write for this challenge is the inverse of this kata: \"[Next bigger number with the same digits](http://www.codewars.com/kata/next-bigger-number-with-the-same-digits).\"*\n\n Examples: \nInput: \n[21]\nOutput: \n [12]\nInput: \n[907]\nOutput: \n [790]\nInput: \n[531]\nOutput: \n [513]\nInput: \n[1027]\nOutput: \n [-1]\nInput: \n[441]\nOutput: \n [414]\nInput: \n[123456798]\nOutput: \n [123456789]\nInput: \n[513]\nOutput: \n [351]\nInput: \n[351]\nOutput: \n [315]\nInput: \n[315]\nOutput: \n [153]\nInput: \n[153]\nOutput: \n [135]\nInput: \n[135]\nOutput: \n [-1]\nInput: \n[100]\nOutput: \n [-1]\nInput: \n[2071]\nOutput: \n [2017]\nInput: \n[1207]\nOutput: \n [1072]\nInput: \n[414]\nOutput: \n [144]\nInput: \n[123456789]\nOutput: \n [-1]\nInput: \n[29009]\nOutput: \n [20990]\nInput: \n[1234567908]\nOutput: \n [1234567890]\nInput: \n[9999999999]\nOutput: \n [-1]\nInput: \n[59884848483559]\nOutput: \n [59884848459853]\nInput: \n[1023456789]\nOutput: \n [-1]\nInput: \n[51226262651257]\nOutput: \n [51226262627551]\nInput: \n[202233445566]\nOutput: \n [-1]\nInput: \n[506789]\nOutput: \n [-1]\n",
  "1669": "Problem: \nAlice has a hand of cards, given as an array of integers.\nNow she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.\nReturn true if and only if she can.\n\u00a0\n\n\nExample 1:\nInput: hand = [1,2,3,6,2,3,4,7,8], W = 3\nOutput: true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8].\nExample 2:\nInput: hand = [1,2,3,4,5], W = 4\nOutput: false\nExplanation: Alice's hand can't be rearranged into groups of 4.\n\n\u00a0\nConstraints:\n\n1 <= hand.length <= 10000\n0 <= hand[i]\u00a0<= 10^9\n1 <= W <= hand.length\n\nNote: This question is the same as\u00a01296:\u00a0https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\n\n Examples: \nInput: \n[[1, 2, 3, 6, 2, 3, 4, 7, 8], 3]\nOutput: \n True\n",
  "1670": "Problem: \nFinally the clowns of Synapse have decided to take their site online. The convener of the clowns has heard from somewhere that knowing URI's is very important for their website, so kindly help him with this task.\n\nUniform Resource Identifiers (or URIs) are strings like\nhttp://synapse.daiict.ac.in/codemutants/, mailto:clown_convener@synapse.daiict.ac.in,\nftp://10.100.93.93/night_halters, or even just output.txt that are\nused to identify a resource, usually on the Internet or a local computer.\nCertain characters are reserved within URIs, and if a reserved character is\npart of an identifier then it must be percent-encoded by\nreplacing it with a percent sign followed by two hexadecimal digits\nrepresenting the ASCII code of the character. A table of seven reserved\ncharacters and their encodings is shown below. Your job is to write a\nprogram that can percent-encode a string of characters.CharacterEncoding\" \" (space)%20\"!\" (exclamation point)%21\"$\" (dollar sign)%24\"%\" (percent sign)%25\"(\" (left parenthesis)%28\")\" (right parenthesis)%29\"*\" (asterisk)%2a\nInput: The input consists of one or more strings, each\n1\u201379 characters long and on a line by itself, followed by a line\ncontaining only \"#\" that signals the end of the input. The character \"#\" is\nused only as an end-of-input marker and will not appear anywhere else in the\ninput. A string may contain spaces, but not at the beginning or end of the\nstring, and there will never be two or more consecutive spaces.\nOutput: For each input string, replace every occurrence of a\nreserved character in the table above by its percent-encoding, exactly as\nshown, and output the resulting string on a line by itself. Note that the\npercent-encoding for an asterisk is %2a (with a lowercase \"a\") rather than\n%2A (with an uppercase \"A\").\n\n-----Example-----\nInput:\nHappy Joy Joy!\nhttp://synapse.daiict.ac.in/\nplain_vanilla\n(**)\n?\nthe 7% solution\n#\n\nOutput:\nHappy%20Joy%20Joy%21\nhttp://synapse.daiict.ac.in/\nplain_vanilla\n%28%2a%2a%29\n?\nthe%207%25%20solution\n\n Examples: \nInput: \n['Happy Joy Joy!', 'http://synapse.daiict.ac.in/', 'plain_vanilla', '(**)', '?', 'the 7% solution', '#']\nOutput: \n ['Happy%20Joy%20Joy%21', 'http://synapse.daiict.ac.in/', 'plain_vanilla', '%28%2a%2a%29', '?', 'the%207%25%20solution']\n",
  "1673": "Problem: \nGiven a square grid\u00a0of integers\u00a0arr, a falling path with non-zero shifts\u00a0is a choice of\u00a0exactly one element from each row of arr, such that no two elements chosen in adjacent rows are in\u00a0the same column.\nReturn the\u00a0minimum\u00a0sum of a falling path with non-zero shifts.\n\u00a0\nExample 1:\nInput: arr = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013.\n\n\u00a0\nConstraints:\n\n1 <= arr.length == arr[i].length <= 200\n-99 <= arr[i][j] <= 99\n\n Examples: \nInput: \n[[[1, 2, 3], [6, 6, 7], [7, 8, 9], [], []]]\nOutput: \n 13\n",
  "1674": "Problem: \nAlex\u00a0and Lee continue their\u00a0games with piles of stones.\u00a0 There are a number of\u00a0piles\u00a0arranged in a row, and each pile has a positive integer number of stones\u00a0piles[i].\u00a0 The objective of the game is to end with the most\u00a0stones.\u00a0\nAlex and Lee take turns, with Alex starting first.\u00a0 Initially, M = 1.\nOn each player's turn, that player\u00a0can take all the stones in the first X remaining piles, where 1 <= X <= 2M.\u00a0 Then, we set\u00a0M = max(M, X).\nThe game continues until all the stones have been taken.\nAssuming Alex and Lee play optimally, return the maximum number of stones Alex can get.\n\u00a0\nExample 1:\nInput: piles = [2,7,9,4,4]\nOutput: 10\nExplanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n\n\u00a0\nConstraints:\n\n1 <= piles.length <= 100\n1 <= piles[i]\u00a0<= 10 ^ 4\n\n Examples: \nInput: \n[[26, 24, 17, 8, 4]]\nOutput: \n 10\n",
  "1675": "Problem: \nYou are given a set of points in the 2D plane. You start at the point with the least X and greatest Y value, and end at the point with the greatest X and least Y value. The rule for movement is that you can not move to a point with a lesser X value as compared to the X value of the point you are on. Also for points having the same X value, you need to visit the point with the greatest Y value before visiting the next point with the same X value. So, if there are 2 points: (0,4 and 4,0) we would start with (0,4) - i.e. least X takes precedence over greatest Y. You need to visit every point in the plane.\n\n-----Input-----\nYou will be given an integer t(1<=t<=20) representing the number of test cases. A new line follows; after which the t test cases are given. Each test case starts with a blank line followed by an integer n(2<=n<=100000), which represents the number of points to follow. This is followed by a new line. Then follow the n points, each being a pair of integers separated by a single space; followed by a new line. The X and Y coordinates of each point will be between 0 and 10000 both inclusive.\n\n-----Output-----\nFor each test case, print the total distance traveled by you from start to finish; keeping in mind the rules mentioned above, correct to 2 decimal places. The result for each test case must be on a new line.\n\n-----Example-----\nInput:\n3\n\n2\n0 0\n0 1\n\n3\n0 0\n1 1\n2 2\n\n4\n0 0\n1 10\n1 5\n2 2\n\nOutput:\n1.00\n2.83\n18.21\n\nFor the third test case above, the following is the path you must take:\n0,0 -> 1,10  \n1,10 -> 1,5\n1,5 -> 2,2\n= 18.21\n\n Examples: \nInput: \n['3', '', '2', '0 0', '0 1', '', '3', '0 0', '1 1', '2 2', '', '4', '0 0', '1 10', '1 5', '2 2', '', '']\nOutput: \n ['1.00', '2.83', '18.21', '', 'For the third test case above, the following is the path you must take:', '0,0 -> 1,10  ', '1,10 -> 1,5', '1,5 -> 2,2', '= 18.21']\n",
  "1678": "Problem: \nChef has two integer sequences $A_1, A_2, \\ldots, A_N$ and $B_1, B_2, \\ldots, B_M$. You should choose $N+M-1$ pairs, each in the form $(A_x, B_y)$, such that the sums $A_x + B_y$ are all pairwise distinct.\nIt is guaranteed that under the given constraints, a solution always exists. If there are multiple solutions, you may find any one.\n\n-----Input-----\n- The first line of the input contains two space-separated integers $N$ and $M$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n- The third line contains $M$ space-separated integers $B_1, B_2, \\ldots, B_M$.\n\n-----Output-----\nPrint $N+M-1$ lines. Each of these lines should contain two space-separated integers $x$ and $y$ denoting that you chose a pair $(A_{x+1}, B_{y+1})$.\n\n-----Constraints-----\n- $1 \\le N, M \\le 2 \\cdot 10^5$\n- $|A_i| \\le 10^9$ for each valid $i$\n- $|B_i| \\le 10^9$ for each valid $i$\n- $A_1, A_2, \\ldots, A_N$ are pairwise distinct\n- $B_1, B_2, \\ldots, B_M$ are pairwise distinct\n\n-----Subtasks-----\nSubtask #1 (25 points): $1 \\le N, M \\le 10^3$\nSubtask #2 (75 points): original constraints\n\n-----Example Input-----\n3 2\n10 1 100\n4 3\n\n-----Example Output-----\n2 1\n0 0\n1 0\n0 1\n\n-----Explanation-----\nThe chosen pairs and their sums are:\n- $A_3 + B_2 = 100+3 = 103$\n- $A_1 + B_1 = 10+4 = 14$\n- $A_2 + B_1 = 1+4 = 5$\n- $A_1 + B_2 = 10+3 = 13$\nSince all sums are distinct, this is a correct output.\n\n Examples: \nInput: \n['3 2', '10 1 100', '4 3', '']\nOutput: \n ['2 1', '0 0', '1 0', '0 1']\n",
  "1679": "Problem: \nRaavan gave a problem to his son, Indrajeet, and asked him to solve the problem to prove his intelligence and power. The Problem was like: Given 3 integers, $N$, $K$, and $X$, produce an array $A$ of length $N$, in which the XOR of all elements of each contiguous sub-array, of length $K$, is exactly equal to $X$. Indrajeet found this problem very tricky and difficult, so, help him to solve this problem.\n\n-----Note:-----\n- $A$i must be an integer between $0$ to $10$$18$ (both inclusive), where $A$i denotes the $i$$th$ element of the array, $A$.\n- If there are multiple solutions, satisfying the problem condition(s), you can print any \"one\" solution.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then, the testcases follow. \n- Each testcase, contains a single line of input, of 3 integers, $N$, $K$, and $X$.\n\n-----Output:-----\nFor each testcase, output in a single line, an array $A$ of $N$ integers, where each element of the array is between $0$ to $10$$18$ (both inclusive), satisfying the conditions of the problem, given by Raavan to his son.\n\n-----Constraints:-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq K \\leq N$\n- $0 \\leq X \\leq 10$$18$\n\n-----Sample Input:-----\n3\n5 1 4\n5 2 4\n5 3 4\n\n-----Sample Output:-----\n4 4 4 4 4\n3 7 3 7 3\n11 6 9 11 6\n\n-----Explanation:-----\n$Sample$ $Case$ $-$ $1$: Since, we can see, the XOR of all elements of all sub-arrays of length $1$, is equal to $4$, hence, the array {$4,4,4,4,4$}, is a valid solution to the $Sample$ $Case$ $-$ $1$. All contiguous sub-arrays of length $1$, of the output array $A$, are as follows:\n[1,1]: {4} - XOR([1,1]) = $4$\n[2,2]: {4} - XOR([2,2]) = $4$\n[3,3]: {4} - XOR([3,3]) = $4$\n[4,4]: {4} - XOR([4,4]) = $4$\n[5,5]: {4} - XOR([5,5]) = $4$\n\n Examples: \nInput: \n['3', '5 1 4', '5 2 4', '5 3 4', '']\nOutput: \n ['4 4 4 4 4', '3 7 3 7 3', '11 6 9 11 6']\n",
  "1680": "Problem: \n-----Description-----\nThe Antique Comedians of India prefer comedies to tragedies. Unfortunately, most of the ancient plays are tragedies. Therefore the dramatic advisor of ACI has decided to transfigure some tragedies into comedies. Obviously, this work is very hard because the basic sense of the play must be kept intact, although all the things change to their opposites. For example the numbers: if any number appears in the tragedy, it must be converted to its reversed form before being accepted into the comedy play. A reversed number is a number written in Arabic numerals but the order of digits is reversed. The first digit becomes last and vice versa. For example, if the main hero had 1245 strawberries in the tragedy, he has 5421 of them now. Note that all the leading zeros are omitted. That means if the number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21). Also, note that the reversed number never has any trailing zeros. ACI needs to calculate with reversed numbers. Your task is to add two reversed numbers and output their reversed sum. Of course, the result is not unique because any particular number is a reversed form of several numbers (e.g. 23 could be 32, 320, or 3200 before reversing). Thus we must assume that no zeros were lost by reversing (e.g. assume that the original number was 23).\n\n-----Input-----\nThe input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add. Numbers will be at most 200 characters long.\n\n-----Output-----\nFor each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.\n\n-----Sample Input-----\n3\n24 1\n4358 754\n305 794\n\n-----Sample Output-----\n34\n1998\n1\n\n Examples: \nInput: \n['3', '24 1', '4358 754', '305 794']\nOutput: \n ['34', '1998', '1']\n",
  "1681": "Problem: \nYou are given two integers N$N$ and M$M$. You have to construct a matrix with N$N$ rows and M$M$ columns. Consider a multiset S$S$ which contains N+M$N + M$ integers: for each row and each column of this matrix, the MEX of the elements of this row/column belongs to S$S$. Then, in the matrix you construct, the MEX of S$S$ must be maximum possible. \nNote: The MEX of a multiset of integers is the smallest non-negative integer that is not present in this multiset. For example, MEX({4,9,0,1,1,5})=2$\\mathrm{MEX}(\\{4,9,0,1,1,5\\}) = 2$ and MEX({1,2,3})=0$\\mathrm{MEX}(\\{1,2,3\\}) = 0$.\n\n-----Input-----\n- The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\n- The first and only line of each test case contains two space-separated integers N$N$ and M$M$.\n\n-----Output-----\nFor each test case, print N$N$ lines. For each i$i$ (1\u2264i\u2264N$1 \\le i \\le N$), the i$i$-th of these lines should contain M$M$ space-separated integers \u2015 the elements in the i$i$-th row of your matrix. Each element of the matrix must be non-negative and must not exceed 109$10^9$.\nIf there are multiple solutions, you may find any one of them.\n\n-----Constraints-----\n- 1\u2264T\u2264400$1 \\le T \\le 400$\n- 1\u2264N,M\u2264100$1 \\le N, M \\le 100$\n- the sum of N\u22c5M$N \\cdot M$ over all test cases does not exceed 105$10^5$\n\n-----Example Input-----\n2\n3 3\n4 2\n\n-----Example Output-----\n9 1 0\n1 0 2\n7 5 8\n2 2\n3 0\n1 1\n0 1\n\n-----Explanation-----\nExample case 1: The MEXs of the rows {9,1,0}$\\{9, 1, 0\\}$, {1,0,2}$\\{1, 0, 2\\}$ and {7,5,8}$\\{7, 5, 8\\}$ are 2$2$, 3$3$ and 0$0$ respectively. The MEXs of the columns {9,1,7}$\\{9, 1, 7\\}$, {1,0,5}$\\{1, 0, 5\\}$ and {0,2,8}$\\{0, 2, 8\\}$ are 0$0$, 2$2$ and 1$1$ respectively. Therefore, the multiset which contains the MEX of each row and each column is S={0,0,1,2,2,3}$S = \\{0, 0, 1, 2, 2, 3\\}$ and MEX(S)=4$\\mathrm{MEX}(S) = 4$. We can show that this is the largest MEX that can be obtained for a 3\u00d73$3 \\times 3$ matrix.\n\n Examples: \nInput: \n['2', '3 3', '4 2', '']\nOutput: \n ['9 1 0', '1 0 2', '7 5 8', '2 2', '3 0', '1 1', '0 1']\n",
  "1682": "Problem: \nYou are provided with an input containing a number. Implement a solution to find the largest sum of consecutive increasing digits , and present the output with the largest sum and the positon of start and end of the consecutive digits.\nExample :\nInput :> 8789651\nOutput :> 24:2-4\nwhere 24 is the largest sum and 2-4 is start and end of the consecutive increasing digits.\n\n Examples: \nInput: \n[':', 'Input :> 8789651']\nOutput: \n ['where 24 is the largest sum and 2-4 is start and end of the consecutive increasing digits.']\n",
  "1684": "Problem: \nLaxman, a great Mathematician and Thinker, gives Sugreev an integer, $N$, and asks him to make an array $A$ of length $N$, such that  $\\sum A$i$^3 = X^2$, to prove the purity of the bond of his friendship with Ram. Sugreev is facing difficulty in forming the array. So, help Sugreev to form this array.\n\n-----Note:-----\n- $A$i must be an integer between $1$ to $10^3$ (both inclusive), where $A$i denotes the $i$$th$ element of the array, $A$.\n- $X$ must be an integer (Any Integer).\n- If there are multiple solutions, satisfying the condition, you can print any \"one\" solution.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then, the testcases follow. \n- Each testcase contains a single line of input, integer $N$. \n\n-----Output:-----\nFor each testcase, output in a single line, array $A$ of $N$ integers, where each element is between $1$ to $1000$ (both inclusive), satisfying the equation $\\sum A$i$^3 = X^2$, where $X$ is \"any\" integer.\n\n-----Constraints:-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^3$\n\n-----Sample Input:-----\n2\n1\n6\n\n-----Sample Output:-----\n4\n5 10 5 10 5 5\n\n Examples: \nInput: \n['2', '1', '6', '']\nOutput: \n ['4', '5 10 5 10 5 5']\n",
  "1688": "Problem: \nRecently Chef learned about Longest Increasing Subsequence. To be precise, he means longest strictly increasing subsequence, when he talks of longest increasing subsequence.  To check his understanding, he took his favorite n-digit number and for each of its n digits, he computed the length of the longest increasing subsequence of digits ending with that digit. Then he stored these lengths in an array named LIS.\nFor example, let us say that Chef's favourite 4-digit number is 1531, then the LIS array would be [1, 2, 2, 1]. The length of longest increasing subsequence ending at first digit is 1 (the digit 1 itself) and at the second digit is 2 ([1, 5]), at third digit is also 2 ([1, 3]), and at the 4th digit is 1 (the digit 1 itself).\nNow Chef wants to give you a challenge. He has a valid LIS array with him, and wants you to find any n-digit number having exactly the same LIS array? You are guaranteed that Chef's LIS array is valid, i.e. there exists at least one n-digit number corresponding to the given LIS array.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. \nFor each test case, the first line contains an integer n denoting the number of digits in Chef's favourite number.\nThe second line will contain n space separated integers denoting LIS array, i.e. LIS1, LIS2, ..., LISn.\n\n-----Output-----\nFor each test case, output a single n-digit number (without leading zeroes) having exactly the given LIS array. If there are multiple n-digit numbers satisfying this requirement, any of them will be accepted.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30 000\n- 1 \u2264 n \u2264 9\n- It is guaranteed that at least one n-digit number having the given LIS array exists\n\n-----Example-----\nInput:\n5\n1 \n1\n2 \n1 2\n2 \n1 1\n4\n1 2 2 1\n7 \n1 2 2 1 3 2 4\n\nOutput:\n7\n36\n54\n1531\n1730418\n\n-----Explanation-----\nExample case 1. All one-digit numbers have the same LIS array, so any answer from 0 to 9 will be accepted.\nExample cases 2 & 3. For a two digit number we always have LIS1 = 1, but the value of LIS2 depends on whether the first digit is strictly less than the second one. If this is the case (like for number 36), LIS2 = 2, otherwise (like for numbers 54 or 77) the values of LIS2 is 1.\nExample case 4. This has already been explained in the problem statement.\nExample case 5. 7-digit number 1730418 has LIS array [1, 2, 2, 1, 3, 2, 4]:\nindexLISlength117304181217304182317304182417304181517304183617304182717304184\n\n Examples: \nInput: \n['5', '1 ', '1', '2 ', '1 2', '2 ', '1 1', '4', '1 2 2 1', '7 ', '1 2 2 1 3 2 4', '', '']\nOutput: \n ['7', '36', '54', '1531', '1730418']\n",
  "1690": "Problem: \nIndian National Olympiad in Informatics 2013\nN people live in Sequence Land. Instead of a name, each person is identified by a sequence of integers, called his or her id. Each id is a sequence with no duplicate elements. Two people are said to be each other\u2019s relatives if their ids have at least K elements in common. The extended family of a resident of Sequence Land includes herself or himself, all relatives, relatives of relatives, relatives of relatives of relatives, and so on without any limit.\nGiven the ids of all residents of Sequence Land, including its President, and the number K, find the number of people in the extended family of the President of Sequence Land.\nFor example, suppose N = 4 and K = 2. Suppose the President has id (4, 6, 7, 8) and the other three residents have ids (8, 3, 0, 4), (0, 10), and (1, 2, 3, 0, 5, 8). Here, the President is directly related to (8, 3, 0, 4), who in turn is directly related to (1, 2, 3, 0, 5, 8). Thus, the President\u2019s extended family consists of everyone other than (0, 10) and so has size 3.\n\n-----Input format-----\n\u2022 Line 1: Two space-separated integers, N followed by K.\n\u2022 Lines 2 to N + 1: Each line describes an id of one of the residents of Sequence Land, beginning with the President on line 2. Each line consists of an integer p, followed by p distinct integers, the id.\n\n-----Output format-----\nThe output consists of a single integer, the number of people in the extended family of the President.\n\n-----Test Data-----\nThe testdata is grouped into two subtasks. In both subtasks, 1 \u2264 N \u2264 300 and 1 \u2264 K \u2264 300. Each number in each id is between 0 and 109 inclusive.\n\u2022 Subtask 1 [30 points]: The number of elements in each id is between 1 and 10 inclusive.\n\u2022 Subtask 2 [70 points]: The number of elements in each id is between 1 and 300 inclusive.\n\n-----Example-----\nHere is the sample input and output corresponding to the example above.\n\n-----Sample input -----\n4 2\n4 4 6 7 8\n4 8 3 0 4\n2 0 10\n6 1 2 3 0 5 8\n\n-----Sample output-----\n3\n\nNote: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!\n\n Examples: \nInput: \n['4 2', '4 4 6 7 84 8 3 0 42 0 106 1 2 3 0 5 8']\nOutput: \n ['3']\n",
  "1691": "Problem: \nChef has a rectangular matrix A of nxm integers. Rows are numbered by integers from 1 to n from top to bottom, columns - from 1 to m from left to right. Ai, j denotes the j-th integer of the i-th row.\nChef wants you to guess his matrix. To guess integers, you can ask Chef questions of next type: \"How many integers from submatrix iL, iR, jL, jR are grater than or equal to x and less than or equal to y?\". By submatrix iL, iR, jL, jR we mean all elements Ai, j for all iL \u2264 i \u2264 iR and jL \u2264 j \u2264 jR. \nAlso Chef can answer not more than C questions of next type: \"What is the sum of integers from submatrix iL, iR, jL, jR?\"\nAs soon as you think you know the Chefs matrix, you can stop asking questions and tell to the Chef your variant of the matrix. Please see \"Scoring\" part to understand how your solution will be evaluated. \n\n-----Input-----\nThe first line of the input contains three space-separated integers n, m and C denoting the sizes of the matrix and the maximum number of the second-type questions. After that the judge will answer your questions and evaluate the resuts. Read more about that in the \"Interaction with the judge\" part of the statement. \n\n-----Interaction with the judge-----\nTo ask a first-type question you should print to the standard output one line containing seven space-separated integers 1 iL iR jL jR x y. To ask a second-type question you should print one line containing five space-separated integers 2 iL iR jL jR. After that you should read from the standard input one integer - answer to the question. To end the game you should print 3 and starting from next line print n lines, each of them contains m space-separated integers - your variant of the matrix A. After that your program must stop. Remember to flush the output after every line you print.\n\n-----Constraints-----\n- 1 \u2264 n, m \u2264 2.5 * 105\n- 1 \u2264 n * m \u2264 2.5 * 105\n- 103 \u2264 C \u2264 104\n- 1 \u2264 Ai, j \u2264 50\n- 1 \u2264 iL \u2264 iR \u2264 n\n- 1 \u2264 jL \u2264 jR \u2264 m\n- 1 \u2264 x \u2264 y \u2264 50\n- 0 \u2264 number of asked questions \u2264 5 * 105\n- 1 \u2264 Bi, j \u2264 50\n- 1 \u2264 a1, a2, a3 \u2264 10\n\n----- Scoring -----\nLet B will be the matrix you output and diff = \u2211 |Ai, j - Bi, j| for all 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m. The number of questions you asked is questions. The number of integers, you correctly guessed is correct(i. e. the number of elements i, j such that Ai, j = Bi, j). \nThe score for each test case will be: score = a1 * questions +  a2 * diff +  a3 * (n * m - correct).\nYour goal is to minimize this score.\nYour total score for the problem will be the sum of scores on all the test cases.\n\n-----Example-----\nInput:\n3 3 10\n4\n0\n3\n1\n6\n\nOutput:\n1 1 2 1 2 1 3\n1 3 3 1 3 1 1\n1 3 3 1 3 2 2\n1 1 2 3 3 1 1\n2 3 3 1 3\n3\n2 2 1\n2 2 1\n2 2 2\n\n\n-----Explanation-----\n\n[1, 2, 3]\nA = [3, 2, 1]\n[2, 2, 2]\n\nFor this test case a1 = 1, a2 = 1 and a3 = 1.\nThe score for this test case will be 1 * 5 + 1 * 4 + 1 * (9 - 6) = 12.\n\n----- Test data generation -----\nThere will be four types of the test files.\n- Type #1: n = 10,  m = 25000\n- Type #2: n = 100,  m = 2500\n- Type #3: n = 250,  m = 1000\n- Type #4: n = 500,  m = 500\nThere will be 5 test files of each type. During the contest, you will be shown the score for only one test file of each type.\nAll elements of matrix A are randomly chosen.\nFor each test case C is randomly chosen from interval [103 .. 104].\nFor each test case values a1, a2 and a3 are manually chosen. \n\n Examples: \nInput: \n['3 3 10', '4', '0', '3', '1', '6', '', '']\nOutput: \n ['1 1 2 1 2 1 3', '1 3 3 1 3 1 1', '1 3 3 1 3 2 2', '1 1 2 3 3 1 1', '2 3 3 1 3', '3', '2 2 1', '2 2 1', '2 2 2']\n",
  "1692": "Problem: \nMartha \u2014 as a professional problemsetter \u2014 proposed a problem for a world-class contest. This is the problem statement:\n\nTomorrow is Nadia's birthday, and Bardia (her brother) is assigned to make the balloons ready!\n\nThere are n balloons (initially empty) that are tied to a straight line on certain positions x_1, x_2, ..., x_{n}. Bardia inflates the balloons from left to right. As a result, i-th balloon gets bigger and bigger until its radius reaches the pressure endurance p_{i} or it touches another previously-inflated balloon. [Image] \n\nWhile Bardia was busy with the balloons, he wondered \"What will be the sum of radius of balloons after all of the balloons are inflated?\". Being a nerdy type of guy, he is now thinking about the problem instead of preparing his sister's birthday. Calculate the answer to Bardia's problem so that Nadia's birthday won't be balloon-less.\n\nArtha \u2014 Martha's student \u2014 claimed his solution got accepted. Martha (being his teacher for a long time!) knew he couldn't have solved the problem for real and thus thinks there is something wrong with the testcases. Artha isn't anyhow logical, which means there is no way for Martha to explain the wrong point in his algorithm. So, the only way is to find a testcase to prove him wrong!\n\nArtha's pseudo-code is shown below: [Image] \n\nYou should output a small testcase for the problem such that Artha's algorithm is incorrect. The algorithm's output is considered correct if it differs from the correct value by no more than 1.\n\n\n-----Input-----\n\nPlease pay attention! No input will be given to your program for this problem. So you do not have to read from the input anything.\n\n\n-----Output-----\n\nYou should output the generated small testcase (which Artha's solution doesn't get it right). It should be in the following format:  First line must contain the only number n (1 \u2264 n \u2264 500).  The i-th of the next n lines should contain the description of the i-th balloon \u2014 two space-separated integers x_{i}, p_{i} (1 \u2264 p_{i} \u2264 10^6, 0 \u2264 x_1 < x_2 < ... < x_{n} \u2264 10^6). \n\n\n-----Examples-----\n\n\n-----Note-----\n\nThe testcase depicted in the figure above (just showing how output should be formatted):\n\n4\n\n0 9\n\n6 3\n\n12 7\n\n17 1\n\n Examples: \n",
  "1693": "Problem: \nHeidi is a statistician to the core, and she likes to study the evolution of marmot populations in each of V (1 \u2264 V \u2264 100) villages! So it comes that every spring, when Heidi sees the first snowdrops sprout in the meadows around her barn, she impatiently dons her snowshoes and sets out to the Alps, to welcome her friends the marmots to a new season of thrilling adventures.\n\nArriving in a village, Heidi asks each and every marmot she comes across for the number of inhabitants of that village. This year, the marmots decide to play an April Fools' joke on Heidi. Instead of consistently providing the exact number of inhabitants P (10 \u2264 P \u2264 1000) of the village, they respond with a random non-negative integer k, drawn from one of two types of probability distributions:\n\n  Poisson (d'avril) distribution: the probability of getting an answer k is $\\frac{p^{k} e^{-P}}{k !}$ for k = 0, 1, 2, 3, ...,  Uniform distribution: the probability of getting an answer k is $\\frac{1}{2 P + 1}$ for k = 0, 1, 2, ..., 2P. \n\nHeidi collects exactly 250 answers per village. Every village follows either the Poisson or the uniform distribution. Heidi cannot tell marmots apart, so she may query some marmots several times, and each time the marmot will answer with a new number drawn from the village's distribution.\n\nCan you help Heidi to find out whether a village follows a Poisson or a uniform distribution?\n\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\n\n\n-----Note-----\n\nThe full example input is visually represented below, along with the probability distribution function it was drawn from (the y-axis is labeled by its values multiplied by 250).\n\n[Image]\n\n Examples: \n",
  "1694": "Problem: \nGood job! Now that Heidi is able to distinguish between Poisson and uniform distributions, she is in a good position to actually estimate the populations.\n\nCan you help Heidi estimate each village's population?\n\n\n-----Input-----\n\nSame as the easy version.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input, containing your (integer) population estimate.\n\nYour answer is considered correct if it is an integer that falls into the interval $[ \\lfloor 0.95 \\cdot P \\rfloor, \\lceil 1.05 \\cdot P \\rceil ]$, where P is the real population of the village, used to create the distribution (either Poisson or uniform) from which the marmots drew their answers.\n\n Examples: \n",
  "1695": "Problem: \nThere was a big bank robbery in Tablecity. In order to catch the thief, the President called none other than Albert \u2013 Tablecity\u2019s Chief of Police. Albert does not know where the thief is located, but he does know how he moves.\n\nTablecity can be represented as 1000 \u00d7 2 grid, where every cell represents one district. Each district has its own unique name \u201c(X, Y)\u201d, where X and Y are the coordinates of the district in the grid. The thief\u2019s movement is as \n\nEvery hour the thief will leave the district (X, Y) he is currently hiding in, and move to one of the districts: (X - 1, Y), (X + 1, Y), (X - 1, Y - 1), (X - 1, Y + 1), (X + 1, Y - 1), (X + 1, Y + 1) as long as it exists in Tablecity. \n\nBelow is an example of thief\u2019s possible movements if he is located in district (7,1):\n\n[Image]\n\nAlbert has enough people so that every hour he can pick any two districts in Tablecity and fully investigate them, making sure that if the thief is located in one of them, he will get caught. Albert promised the President that the thief will be caught in no more than 2015 hours and needs your help in order to achieve that.\n\n\n-----Input-----\n\nThere is no input for this problem. \n\n\n-----Output-----\n\nThe first line of output contains integer N \u2013 duration of police search in hours. Each of the following N lines contains exactly 4 integers X_{i}1, Y_{i}1, X_{i}2, Y_{i}2 separated by spaces, that represent 2 districts (X_{i}1, Y_{i}1), (X_{i}2, Y_{i}2) which got investigated during i-th hour. Output is given in chronological order (i-th line contains districts investigated during i-th hour) and should guarantee that the thief is caught in no more than 2015 hours, regardless of thief\u2019s initial position and movement.  N \u2264 2015  1 \u2264 X \u2264 1000  1 \u2264 Y \u2264 2 \n\n\n-----Examples-----\nInput\n\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430.\nThis problem doesn't have sample input and output.\nOutput\n\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043d\u0438\u0436\u0435.\nSee the note below.\n\n\n-----Note-----\n\nLet's consider the following output:\n\n2\n\n5 1 50 2\n\n8 1 80 2\n\nThis output is not guaranteed to catch the thief and is not correct. It is given to you only to show the expected output format. There exists a combination of an initial position and a movement strategy such that the police will not catch the thief.\n\nConsider the following initial position and thief\u2019s movement:\n\nIn the first hour, the thief is located in district (1,1). Police officers will search districts (5,1) and (50,2) and will not find him.\n\nAt the start of the second hour, the thief moves to district (2,2). Police officers will search districts (8,1) and (80,2) and will not find him.\n\nSince there is no further investigation by the police, the thief escaped!\n\n Examples: \n",
  "1696": "Problem: \nYour task is the exact same as for the easy version. But this time, the marmots subtract the village's population P from their random number before responding to Heidi's request.\n\nAlso, there are now villages with as few as a single inhabitant, meaning that $1 \\leq P \\leq 1000$.\n\nCan you help Heidi find out whether a village follows a Poisson or a uniform distribution?\n\n\n-----Input-----\n\nSame as for the easy and medium versions. But remember that now 1 \u2264 P \u2264 1000 and that the marmots may provide positive as well as negative integers.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answers came from a uniform distribution.\n\n Examples: \n",
  "1698": "Problem: \nConsider a sequence `u` where u is defined as follows:\n\n1. The number `u(0) = 1` is the first one in `u`.\n2. For each `x` in `u`, then `y = 2 * x + 1` and `z = 3 * x + 1` must be in `u` too.\n3. There are no other numbers in `u`.\n\nEx: \n`u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]`\n\n1 gives 3 and 4, then 3 gives 7 and 10, 4 gives 9 and 13, then 7 gives 15 and 22 and so on...\n\n## Task: \nGiven parameter `n` the function `dbl_linear` (or dblLinear...) returns the element `u(n)` of \nthe ordered (with <) sequence `u` (so, there are no duplicates).\n\n## Example:\n`dbl_linear(10) should return 22`\n\n## Note:\nFocus attention on efficiency\n\n Examples: \n",
  "1699": "Problem: \nProfessor Chambouliard hast just discovered a new type of magnet material. He put particles of this material in a box made of small boxes arranged \nin K rows and N columns as a kind of **2D matrix** `K x N` where `K` and `N` are postive integers.\nHe thinks that his calculations show that the force exerted by the particle in the small box `(k, n)` is:\n\n\n\n\n\n\nThe total force exerted by the first row with `k = 1` is:\n\n\n\n\n\n\nWe can go on with `k = 2` and then `k = 3` etc ... and consider:\n\n\n\n\n\n\n## Task: \nTo help Professor Chambouliard can we calculate the function `doubles` that will take as parameter `maxk` and `maxn` such that `doubles(maxk, maxn) = S(maxk, maxn)`?\nExperiences seems to show that this could be something around `0.7` when `maxk` and `maxn` are big enough.\n\n### Examples:\n```\ndoubles(1, 3)  => 0.4236111111111111\ndoubles(1, 10) => 0.5580321939764581\ndoubles(10, 100) => 0.6832948559787737\n```\n\n### Notes: \n- In `u(1, N)` the dot is the *multiplication operator*.\n- Don't truncate or round: \nHave a look in \"RUN EXAMPLES\" at \"assertFuzzyEquals\".\n\n- [link to symbol Sigma](https://en.wikipedia.org/wiki/Summation)\n\n Examples: \n",
  "1700": "Problem: \nThe Dynamic Connectivity Problem\n\nGiven a set of of N objects, is there a path connecting the two objects?\n\nImplement an class that implements the following API:\n\n  *  Takes n as input, initializing a data-structure with N objects (0...N-1)\n  *  Implements a Union command that adds a connection between point p and point q\n  *  Implements a Connected command that returns a boolean and asks is there a connection between point p and point q\n\nAs a simple example: \nImagine you initialize an data structure filled with integers from 0 to 9 (N = 10)\n```python\n  results1 = DynamicConnectivity(10)\n```\nYou will receive a series of union commands linking various points\n```python\n  results1.union(4,3)\n  results1.union(3,8)\n  results1.union(6,5)\n  results1.union(9,4)\n  results1.union(2,1)\n```\nThis should result in 5 groups of connections:\n  \n  * 3,4,8,9\n  * 5,6\n  * 2,1\n  * 0\n  * 7\n\nAll members of a groups (set) are conected to every other member\nIf you asked is 0 connected to 7, it should return False\nIf you asked is 8 connected to 9 you should return True even if 8,9 wern't directly joined.\n(8 is connected to 3 which is connected to 4 which is connected to 9)\n```python\n  results1.connected(0,7) == False\n  results1.connected(8,9) == True\n```\n\nFor the purposes of this problem, you do not have to mainatin the order of the connections, you just have to know that the connection is there.\n\nHint:\n  There is a naive implenetation that takes time proportional to O(n^2) (Quadratic Funtion)\n  **This will time out the problem**\n  (Because every time you double the input like from 50 nodes to 100 nodes, the function takes **4** times as long)\n  Test will check that you are able to outrun this naive implementation. If you can't that means that your code is too slow\n  \n  There is a solution that takes linearitmic time or faster O(n * lg n)\n\nHint Two: (Take it or leave it)\n  If you find yourself nesting a loop inside a loop, you are creating a quadratic function\n\nImplementation must be able to handle initializing 1 million nodes, and creating connections between those nodes.\n\nFull Tests before submission generate random connections to make sure you can't hard code the connections into your class.\n\n Examples: \n",
  "1702": "Problem: \nGiven a Sudoku data structure with size `NxN, N > 0 and \u221aN == integer`, write a method to validate if it has been filled out correctly.\n\n\nThe data structure is a multi-dimensional Array, i.e:\n```\n[\n  [7,8,4,  1,5,9,  3,2,6],\n  [5,3,9,  6,7,2,  8,4,1],\n  [6,1,2,  4,3,8,  7,5,9],\n  \n  [9,2,8,  7,1,5,  4,6,3],\n  [3,5,7,  8,4,6,  1,9,2],\n  [4,6,1,  9,2,3,  5,8,7],\n  \n  [8,7,6,  3,9,4,  2,1,5],\n  [2,4,3,  5,6,1,  9,7,8],\n  [1,9,5,  2,8,7,  6,3,4]\n]\n```\n\n**Rules for validation**\n\n- Data structure dimension: `NxN` where `N > 0` and `\u221aN == integer`\n- Rows may only contain integers: `1..N (N included)`\n- Columns may only contain integers: `1..N (N included)`\n- *'Little squares'* (`3x3` in example above) may also only contain integers: `1..N (N included)`\n\n Examples: \n",
  "1704": "Problem: \nA famous casino is suddenly faced with a sharp decline of their revenues. They decide to offer Texas hold'em also online. Can you help them by writing an algorithm that can rank poker hands? \n\n## Task\n\nCreate a poker hand that has a method to compare itself to another poker hand:\n\n```python\ncompare_with(self, other_hand)\n```\n\nA poker hand has a constructor that accepts a string containing 5 cards:\n```python\nPokerHand(\"KS 2H 5C JD TD\")\n```\n\nThe characteristics of the string of cards are:\n* Each card consists of two characters, where\n * The first character is the value of the card: `2, 3, 4, 5, 6, 7, 8, 9, T(en), J(ack), Q(ueen), K(ing), A(ce)`\n * The second character represents the suit: `S(pades), H(earts), D(iamonds), C(lubs)`\n* A space is used as card separator between cards\n\nThe result of your poker hand compare can be one of these 3 options:\n\n```python\n[ \"Win\", \"Tie\", \"Loss\" ]\n```\n\n## Notes\n* Apply the [Texas Hold'em](https://en.wikipedia.org/wiki/Texas_hold_%27em) rules for ranking the cards.\n* Low aces are **NOT** valid in this kata.\n* There is no ranking for the suits.\n\nIf you finished this kata, you might want to continue with [Sortable Poker Hands](https://www.codewars.com/kata/sortable-poker-hands)\n\n Examples: \n",
  "1706": "Problem: \n# Task\n A rectangle with sides equal to even integers a and b is drawn on the Cartesian plane. Its center (the intersection point of its diagonals) coincides with the point (0, 0), but the sides of the rectangle are not parallel to the axes; instead, they are forming `45 degree` angles with the axes.\n\n How many points with integer coordinates are located inside the given rectangle (including on its sides)?\n\n# Example\n\n For `a = 6 and b = 4`, the output should be `23`\n\n The following picture illustrates the example, and the 23 points are marked green.\n\n ![](https://files.gitter.im/myjinxin2015/raYf/blob)\n\n# Input/Output\n\n\n - `[input]` integer `a`\n\n    A positive `even` integer.\n\n    Constraints: `2 \u2264 a \u2264 10000`.\n\n\n - `[input]` integer `b`\n\n    A positive `even` integer.\n\n    Constraints: `2 \u2264 b \u2264 10000`.\n\n\n - `[output]` an integer\n\n    The number of inner points with integer coordinates.\n\n Examples: \n",
  "1707": "Problem: \n-----\n__CLEAR CUTTER'S NEEDS YOUR HELP!__\n-----\n\nThe logging company Clear Cutter's makes its money by optimizing the price-to-length of each log they cut before selling them. An example of one of their price tables is included:\n\n```python\n# So a price table p\np = [ 0,  1,  5,  8,  9, 10]\n\n# Can be imagined as:\n# length i | 0  1  2  3  4  5 *in feet*\n# price pi | 0  1  5  8  9 10 *in money*\n```\n\nThey hired an intern last summer to create a recursive function for them to easily calculate the most profitable price for a log of length _n_ using price table _p_ as follows:\n\n```python\ndef cut_log(p, n):\n   if (n == 0):\n      return 0\n   q = -1\n   for i in range(1, n+1)\n      q = max(q, p[i] + cut_log(p, n-i))\n   return q\n```\n\nAn example of the working code:\n```python\ncut_log(p, 5) # => 13\n# 5ft = $10, BUT 2ft + 3ft = 5ft -> $5 + $8 = $13 which is greater in value\n```\n\nHowever, their senior software engineer realized that the number of recursive calls in the function gives it an awful running time of 2^n (as this function iterates through ALL 2^n-1 possibilities for a log of length n).\n\nHaving discovered this problem just as you've arrived for your internship, he responsibly delegates the issue to you.\n\nUsing the power of Stack Overflow and Google, he wants you to create a solution that runs in \u0398(n^2) time so that it doesn't take 5 hours to calculate the optimal price for a log of size 50. (He also suggests to research the problem using the keywords in the tags)\n\n__(Be aware that if your algorithm is not efficient, it will attempt to look at 2^49 = 562949953421312 nodes instead of 49^2 = 2401... The solution will automatically fail if it takes longer than 6 seconds... which occurs at right around Log 23)__\n\n Examples: \n",
  "1709": "Problem: \nGiven an array of positive or negative integers \n\n I= [i1,..,in]\n\nyou have to produce a sorted array P of the form \n\n[ [p, sum of all ij of I for which p is a prime factor (p positive) of ij] ...]\n\nP will be sorted by increasing order of the prime numbers.\nThe final result has to be given as a string in Java, C#, C, C++ and as an array of arrays in other languages.\n\nExample:\n\n```python\nI = [12, 15] # result = [[2, 12], [3, 27], [5, 15]]\n```\n\n[2, 3, 5] is the list of all prime factors of the elements of I, hence the result.\n\n**Notes:**\n- It can happen that a sum is 0 if some numbers are negative!\n\nExample: I = [15, 30, -45]\n5 divides 15, 30 and (-45) so 5 appears in the result, the sum of the numbers for which 5 is a factor is 0 so we have [5, 0] in the result amongst others. \n\n- In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.\n\n Examples: \n",
  "1711": "Problem: \n### Context and Definitions\n\nYou are in charge of developing a new cool JavaScript library that provides functionality similar to that of [Underscore.js](http://underscorejs.org/).\n\nYou have started by adding a new  **list data type** to your library. You came up with a design of a data structure that represents an [algebraic data type](http://en.wikipedia.org/wiki/Algebraic_data_type) as a pair of elements:\n\n```python\nclass Cons:\n  def __init__(self, head, tail):\n    self.head = head\n    self.tail = tail\n```\n\nYou are pretty smart, because using this new data type, we can easily build a list of elements. For instance, a list of numbers:\n\n```python\nnumbers = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, None)))))\n```\n\nIn a code review with your boss, you explained him how every *cons cell* contains a \"value\" in its head, and in its tail it contains either another cons cell or null. We know we have reached the end of the data structure when the tail is null.\n\nSo, your boss is pretty excited about this new data structure and wants to know if you will be able to build some more  functionality around it. In a demo you did this week for the rest of your team, in order to illustrate how this works, you showed them a method to transform a list of items of your list data type into a JavaScript array:\n\n```python\n  # added to the class implementation:\n  def to_array(self):\n    tail = self.tail\n    new_tail = (tail.to_array() if tail is not None else [])\n    return [self.head] + new_tail\n```\n\nAnd they were amazed when you simply did this:\n\n```python\nprint(numbers.to_array())  # yields [1,2,3,4,5]\n```\n\n### The New Requirements\n\nNow, the team is convinced that this is the way to go and they would like to build the library around this cool new data type, but they want you to provide a few more features for them so that they can start using this type in solving some real world problems.\n\nYou have been reading about a technique called  [applicative programming](http://quod.lib.umich.edu/s/spobooks/bbv9810.0001.001/1:15?rgn=div1;view=fulltext) which basically consists in applying a function to every element in a list.  So, you gave it some thought and you have decided to start adding features  like **filter**, **map** and **reduce**. Basically you want to provide equivalent functionality to that of JavaScript arrays and in the future even more.\n\nSo, you will now add:\n\n - [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2Ffilter): create a new algebraic list containing only the elements that satisfy a predicate function. \n - [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2Ffilter) : create a new list in which every element is the result of applying a function provided as argument.\n - fromArray:  a convenient complementary method  that creates a list out of a JavaScript array.\n\nFor this Kata, the definition of `Cons` and the prototypal/class method `toArray`/`to_array`/`into_vec` are already loaded in your environment.\n\n### Examples of Usage\n\n```python\nnumbers = Cons.from_array([1,2,3,4,5])\nnumbers.filter(lambda x: x % 2 == 0).to_array()  # yields [2,4]\nnumbers.map(lambda x: x * x).to_array()  # yields [1,4,9,16,25]\n\ndigits = Cons.from_array([\"1\",\"2\",\"3\",\"4\",\"5\"])\nintegers = digits.map(int) \\\n                 .filter(lambda n: n > 3) \\\n                 .to_array()  # yields [4,5]\n```\n\nIn other words:\n\n - The static method `Cons.fromArray` (or `from_array`, `from_iter`) produces `Cons(1, Cons(2, Cons(3, Cons 4, Cons 5, null)))))`.\n  - Above filter creates a new list: `Cons(2, Cons(4, null))`.\n -  So does above map:  `Cons(1, Cos(4, Cons(9, Cons(16, Cons(25, null)))))`.\n\n Examples: \n",
  "1712": "Problem: \n# Overview\n\nThe goal here is to solve a puzzle (the \"pieces of paper\" kind of puzzle). You will receive different pieces of that puzzle as input, and you will have to find in what order you have to rearrange them so that the \"picture\" of the puzzle is complete.\n\n\n\n## Puzzle pieces\n\nAll the pieces of the puzzle will be represented in the following way:\n\n* 4 numbers, grouped in 2 tuples, which are representing the \"picture\" on the piece. Every piece has a 2x2 size.\n* 1 id number. All id numbers are unique in a puzzle, but their value may be random.\n* Note that all numbers will be non-negative integers (except for outer border \"picture\" numbers in C#)\n\nFor example, \n                \n    ((1, 2), (3, 4), 1) \n     Puzzle piece id ^  \n\nis equivalent the the following square piece of puzzle, having the id number `1`:\n\n    +---+\n    |1 2|\n    |3 4|\n    +---+\n\nIf the piece is on a border or is a corner, some numbers will be replaced with `None` (`-1` in C#):\n```python\n((None, None), (1, 2), 10)       -->   upper border\n((9, None), (None, None), 11)   -->   bottom right corner\n```\n\n \n\nNote that you cannot flip or rotate the pieces (_would you like to change the picture!?_)\n\n\n\n## Solving the puzzle\n\n* You'll get an array of pieces as well as the size of the puzzle (width and height).  \n* Two pieces can be assembled if they share the same pattern on the border where they are in contact (see example below).\n* Puzzle pieces being unique, you'll never encounter two different pieces that could be assembled with the same third one. So to say: borders are unique.\n* Once you found the proper arrangment for all the pieces, return the solved puzzle as a list of tuples (height * width) of the id number of the piece at its correct position. (For C#, return the solved puzzle as a 2-dimensional array of integers.)\n\n## Example:\n\nInputs:\n\n```python\nwidth, height = 3,3\npieces = [ ((None, 5), (None, None), 3), \n           ((17, None), (None, None), 9),\n           ((None, 4), (None, 5), 8),\n           ((4, 11), (5, 17), 5),\n           ((11, None), (17, None), 2),   \n           ((None, None), (None, 4), 7),\n           ((5, 17), (None, None), 1), \n           ((None, None), (11, None), 4),\n           ((None, None), (4, 11), 6) ]`\n```\n\nIn this case, the expected output would be:\n\n```python\nexpected = [(7, 6, 4), (8, 5, 2), (3, 1, 9)]\n```\n\n... the solved puzzle looking like this:\n\n```python\n         Puzzle Solved:                     Related id numbers:\n -----------------------------                  7    6    4\n|None None|None None|None None|                 \n|None   4 | 4    11 | 11  None|                 8    5    2\n|-----------------------------|\n|None   4 | 4    11 | 11  None|                 3    1    9\n|None   5 | 5    17 | 17  None|\n|-----------------------------| \n|None   5 | 5    17 | 17  None| \n|None None|None None|None None|\n -----------------------------\n```\n\n### Notes:\n\n* Be careful about performances, you'll have to handle rather big puzzles.\n* Width and height will be between 2 and 100 (inclusive)\n* The puzzle may be rectangular too\n\n Examples: \n",
  "1713": "Problem: \nThe aim of this kata is to determine the number of sub-function calls made by an unknown function.\n\nYou have to write a function named `count_calls` which:\n\n* takes as parameter a function and its arguments (args, kwargs)\n* calls the function\n* returns a tuple containing:\n\n * the number of function calls made inside it and inside all the sub-called functions recursively\n * the function return value.\n\nNB: The call to the function itself is not counted.\n\nHINT: The sys module may come in handy.\n\n Examples: \n",
  "1714": "Problem: \n### The Problem\n\nConsider a flat board with pegs sticking out of one side. If you stretched a rubber band across the outermost pegs what is the set of pegs such that all other pegs are contained within the shape formed by the rubber band?\n\n![alt text](https://upload.wikimedia.org/wikipedia/commons/b/bc/ConvexHull.png)\n\nMore specifically, for this kata you will be given a list of points represented as ```[x,y]``` co-ordinates. Your aim will be to return a sublist containing points that form the perimeter of a polygon that encloses all other points contained within the original list.\n\n### Notes:\n\nThe tests may include duplicate and/or co-linear points. Co-linear points are a set of points which fall on the same straight line. Neither should be included in your returned sublist\n\nFor simplicity, there will always be at least 3 points\n\n### Help:\n\nCheck out wikipedia's page on [convex hulls](https://en.wikipedia.org/wiki/Convex_hull)\n\n```if:python\nNote for python users: `scipy` module has been disabled.\n```\n\n Examples: \n",
  "1715": "Problem: \nYour task in this Kata is to emulate text justification in monospace font. You will be given a single-lined text and the expected justification width. The longest word will never be greater than this width.\n\nHere are the rules:\n\n  * Use spaces to fill in the gaps between words.\n  * Each line should contain as many words as possible.\n  * Use '\\n' to separate lines.\n  * Gap between words can't differ by more than one space.\n  * Lines should end with a word not a space.\n  * '\\n' is not included in the length of a line.\n  * Large gaps go first, then smaller ones ('Lorem--ipsum--dolor--sit-amet,' (2, 2, 2, 1 spaces)).\n  * Last line should not be justified, use only one space between words.\n  * Last line should not contain '\\n'\n  * Strings with one word do not need gaps ('somelongword\\n').\n\nExample with width=30:\n\n```\nLorem  ipsum  dolor  sit amet,\nconsectetur  adipiscing  elit.\nVestibulum    sagittis   dolor\nmauris,  at  elementum  ligula\ntempor  eget.  In quis rhoncus\nnunc,  at  aliquet orci. Fusce\nat   dolor   sit   amet  felis\nsuscipit   tristique.   Nam  a\nimperdiet   tellus.  Nulla  eu\nvestibulum    urna.    Vivamus\ntincidunt  suscipit  enim, nec\nultrices   nisi  volutpat  ac.\nMaecenas   sit   amet  lacinia\narcu,  non dictum justo. Donec\nsed  quam  vel  risus faucibus\neuismod.  Suspendisse  rhoncus\nrhoncus  felis  at  fermentum.\nDonec lorem magna, ultricies a\nnunc    sit    amet,   blandit\nfringilla  nunc. In vestibulum\nvelit    ac    felis   rhoncus\npellentesque. Mauris at tellus\nenim.  Aliquam eleifend tempus\ndapibus. Pellentesque commodo,\nnisi    sit   amet   hendrerit\nfringilla,   ante  odio  porta\nlacus,   ut   elementum  justo\nnulla et dolor.\n```\n\nAlso you can always take a look at how justification works in your text editor or directly in HTML (css: text-align: justify).\n\nHave fun :)\n\n Examples: \n",
  "1716": "Problem: \nThis is the simple version of [Fastest Code : Equal to 24](http://www.codewars.com/kata/574e890e296e412a0400149c). \n\n## Task\n\nA game I played when I was young: Draw 4 cards from playing cards, use ```+ - * / and ()``` to make the final results equal to 24.\n\nYou will coding in function ```equalTo24```. Function accept 4 parameters ```a b c d```(4 cards), value range is 1-13.\n\nThe result is a string such as ```\"2*2*2*3\"``` ,```(4+2)*(5-1)```; If it is not possible to calculate the 24, please return \"It's not possible!\"\n\nAll four cards are to be used, only use three or two cards are incorrect; Use a card twice or more is incorrect too.\n\nYou just need to return one correct solution, don't need to find out all the possibilities.\n\n## Examples\n\n Examples: \n",
  "1717": "Problem: \nWrite a function that, given a string of text (possibly with punctuation and line-breaks),\nreturns an array of the top-3 most occurring words, in descending order of the number of occurrences.\n\nAssumptions:\n------------\n\n- A word is a string of letters (A to Z) optionally containing one or more apostrophes (') in ASCII. (No need to handle fancy punctuation.)\n- Matches should be case-insensitive, and the words in the result should be lowercased.\n- Ties may be broken arbitrarily.\n- If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.\n\nExamples:\n------------\n\n```\ntop_3_words(\"In a village of La Mancha, the name of which I have no desire to call to\nmind, there lived not long since one of those gentlemen that keep a lance\nin the lance-rack, an old buckler, a lean hack, and a greyhound for\ncoursing. An olla of rather more beef than mutton, a salad on most\nnights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra\non Sundays, made away with three-quarters of his income.\")\n# => [\"a\", \"of\", \"on\"]\n\ntop_3_words(\"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e\")\n# => [\"e\", \"ddd\", \"aa\"]\n\ntop_3_words(\"  //wont won't won't\")\n# => [\"won't\", \"wont\"]\n```\n\n```if:java\nFor java users, the calls will actually be in the form: `TopWords.top3(String s)`, expecting you to return a `List`.\n```\n\nBonus points (not really, but just for fun):\n------------\n\n1. Avoid creating an array whose memory footprint is roughly as big as the input text.\n2. Avoid sorting the entire array of unique words.\n\n Examples: \n",
  "1718": "Problem: \nKate constantly finds herself in some kind of a maze. Help her to find a way out!.\n\nFor a given maze and Kate's position find if there is a way out. Your function should return True or False.\n\nEach maze is defined as a list of strings, where each char stays for a single maze \"cell\". ' ' (space) can be stepped on, '#' means wall and 'k' stays for Kate's starting position. Note that the maze may not always be square or even rectangular.\n\nKate can move left, up, right or down only.\n\nThere should be only one Kate in a maze. In any other case you have to throw an exception.\n\n\nExample input\n=============\n```\n['# ##',\n '# k#',\n '####']\n```\n\nExample output\n==============\nTrue\n\nExample input\n=============\n```\n['####'.\n '# k#',\n '####']\n```\n\nExample output\n==============\nFalse\n\n Examples: \n",
  "1719": "Problem: \n### The problem\n\nHow many zeroes are at the **end** of the [factorial](https://en.wikipedia.org/wiki/Factorial) of `10`? 10! = 3628800, i.e. there are `2` zeroes.\n16! (or 0x10!) in [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) would be 0x130777758000, which has `3` zeroes.\n\n### Scalability\n\nUnfortunately, machine integer numbers has not enough precision for larger values. Floating point numbers drop the tail we need. We can fall back to arbitrary-precision ones - built-ins or from a library, but calculating the full product isn't an efficient way to find just the _tail_ of a factorial. Calculating `100'000!` in compiled language takes around 10 seconds. `1'000'000!` would be around 10 minutes, even using efficient [Karatsuba algorithm](https://en.wikipedia.org/wiki/Karatsuba_algorithm)\n\n### Your task\n\nis to write a function, which will find the number of zeroes at the end of `(number)` factorial in arbitrary [radix](https://en.wikipedia.org/wiki/Radix) = `base` for larger numbers.\n\n- `base` is an integer from 2 to 256\n- `number` is an integer from 1 to 1'000'000\n\n**Note** Second argument: number is always declared, passed and displayed as a regular _decimal_ number. If you see a test described as `42! in base 20` it's 4210 **not** 4220 = 8210.\n\n Examples: \n",
  "1720": "Problem: \n## Task\n\nCreate a RomanNumerals class that can convert a roman numeral to and from an integer value.  It should follow the API demonstrated in the examples below. Multiple roman numeral values will be tested for each helper method. \n\nModern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.\n\n## Examples\n\n```python\nRomanNumerals.to_roman(1000) # should return 'M'\nRomanNumerals.from_roman('M') # should return 1000\n```\n\n## Help\n\n| Symbol | Value |\n|----------------|\n| I          | 1     |\n| V          | 5     |\n| X          | 10    |\n| L          | 50    |\n| C          | 100   |\n| D          | 500   |\n| M          | 1000  |\n\n Examples: \n",
  "1721": "Problem: \nYour task in this kata is to implement the function `create_number_class` which will take a string parameter `alphabet` and return a class representing a number composed of this alphabet.\n\nThe class number will implement the four classical arithmetic operations (`+`, `-`, `*`, `//`), a method to convert itself to string, and a `convert_to` method which will take another class number as parameter and will return the value of the actual class number converted to the equivalent value with tha alphabet of the parameter class (return a new instance of this one).\n\nExample:\n\n```python\nBinClass = create_number_class('01')\nHexClass = create_number_class('0123456789ABCDEF')\n\nx = BinClass('1010')\ny = BinClass('10')\n\nprint(x+y)                   => '1100'\nisinstance(x+y, BinClass)    => True\nprint(x.convert_to(HexClass) => 'A'\n```\n\n___Notes:___\n\n* Only positives integers will be used (either as parameters or results of calculations).\n* You'll never encounter invalid calculations (divisions by zero or things like that).\n* Alphabets will contain at least 2 characters.\n\n Examples: \n",
  "1722": "Problem: \n# The learning game - Machine Learning #1\nGrowing up you would have learnt a lot of things like not to stand in fire, to drink food and eat water and not to jump off very tall things But Machines have it difficult they cannot learn for themselves we have to tell them what to do, why don't we give them a chance to learn it for themselves?\n\n### Task\nYour task is to finish the Machine object. What the machine object must do is learn from its mistakes! The Machine will be given a command and a number you will return a random action. After the command has returned you will be given a response (true/false) if the response is true then you have done good, if the response is false then the action was a bad one. You must program the machine to learn to apply an action to a given command using the reponse given. Note: It must take no more than 20 times to teach an action to a command also different commands can have the same action.\n\n### Info\n- In the preloaded section there is a constant called ```ACTIONS``` it is a function that returns the 5 possible actions.\n- In Java, this a constant ```Actions.FUNCTIONS``` of type ```List>```. \n- In C++, the actions can be accessed by ```get_action(i)(unsigned int num)``` where i chooses the function (and therefore can range from 0 to 4) and num is its argument.\n- In python ```ACTIONS()``` returns a list of lambdas.\n- In Golang ```Actions()``` retruns a function slice ```[]func(int) int```\n\n Examples: \n",
  "1723": "Problem: \n## Bezier curves\n\nWhen a shape is described using vector graphics, its outline is often described as a sequence of linear, quadratic, and cubic Bezier curves. You can read about [B\u00e9zier curves](https://en.wikipedia.org/wiki/B%C3%A9zier_curve) on Wikipedia. \n\nYou don't need to know much about Bezier curves to solve this kata. Just know that the equations of the linear, quadratic, and cubic curves are given by (respectively):\n\n1. `P(t) = (1 - t) * P0 + t * P1`\n2. `P(t) = (1 - t)**2 * P0 + 2 * (1 - t) * t * P1 + t**2 * P2`\n3. `P(t) = (1 - t)**3 * P0 + 3 * (1 - t)**2 * t * P1 + 3 * (1 - t) * t**2 * P2 + t**3 * P3`\n\nThe points `P0`, `P1`, `P2`, `P3` are called the control points of the curve, and `t` is a variable, which, when taking values from `0` to `1`, will cause `P(t)` to trace the curve.\n\nThis should suffice to implement the `point_at(t)` method of the classes you are to implement.\n\nTo implement the `sub_segment(t)` method, see, in particular, the section on Constructing B\u00e9zier Curves of the above referenced Wikipedia article.\n\nThis section shows animations of how the B\u00e9zier curves grow. The animations are showing longer and longer subsegments, hence showing how subsegments are constructed. If you look closely at the quad curve animation, you can see how the control points move from starting all at P0 and ending up at P0, P1 and P2 respectively. Now look closely at the animation of the cubic curve. See how the control points of the growing subsection start at P0 and end up at P0, P1, P2, and P3. No need to read anything, just look. At the end of the referenced subsection there is a link to de Casteljau's algorithm, which you might find helpful, but I wouldn't go there. Just look carefully at the animations.\n\nIn this kata, you are asked to implement a class for each of the linear, quadratic, and cubic B\u00e9zier curves. These classes must extend the following abstract base class and implement the abstract methods:\n\n```Python\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Segment(metaclass=ABCMeta):\n\n    @property\n    @abstractmethod\n    def control_points(self):\n        pass\n\n    @abstractmethod\n    def point_at(self, t):\n        pass\n\n    @abstractmethod\n    def sub_segment(self, t):\n        pass\n```\n\n`control_points` is a property that returns the coordinates of the points that define the curve. Since the linear curve has two control points (the start and end of the segment), `control_points` will hold 4 floats, which are the x- and y-coordinates of the first point followed by the x- and y-coordinates of the second point.  For the quadratic and cubic curves there are 6 and 8 control points respectively.\n\nThe method `point_at(t)` should return the point obtained when inserting `t` in the equation for the curve. This method will be tested for values of `t` in the interval `[0, 1]` only (although it's possible to extrapolate the curve). \n\nThe method `sub_segment(t_0)` should return the curve that starts at the first point and ends at the point returned by `point_at(t_0)` and follows the curve of the object that this method is invoked on otherwise. For example, if `quad` is a quadratic curve, then `quad.sub_segment(t_0)` is a quadratic curve that starts at `quad`'s first point and ends at `quad.point_at(t_0)` and follows `quad`'s curve. More precisely, \n\n```\nquad.point_at(t_0 * t) == quad.sub_segment(t_0).point_at(t)\n```\nfor all values of `t` in the interval `[0, 1]`.\n\n Examples: \n",
  "1725": "Problem: \n# Problem Description\n\nLet's imagine a function `F(n)`, which is defined over the integers\nin the range of `1 <= n <= max_n`, and `0 <= F(n) <= max_fn` for every `n`.\n\nThere are `(1 + max_fn) ** max_n` possible definitions of `F` in total.\n\nOut of those definitions, how many `F`s satisfy the following equations?\nSince your answer will be very large, please give your answer **modulo 12345787**.\n\n* `F(n) + F(n + 1) <= max_fn` for `1 <= n < max_n`\n* `F(max_n) + F(1) <= max_fn`\n\n# Constraints\n\n`1 <= max_n <= 100`\n\n`1 <= max_fn <= 5`\n\nThe inputs will be always valid integers.\n\n# Examples\n\n```python\n# F(1) + F(1) <= 1, F(1) = 0\ncircular_limited_sums(1, 1) == 1\n\n# F = (0, 0), (0, 1), (1, 0)\ncircular_limited_sums(2, 1) == 3\n\n# F = (0, 0, 0), (0, 0, 1), (0, 1, 0), (1, 0, 0)\ncircular_limited_sums(3, 1) == 4\n\n# F = (0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 1, 0, 0),\n# (0, 1, 0, 1), (1, 0, 0, 0), (1, 0, 1, 0)\ncircular_limited_sums(4, 1) == 7\n\n# F = (0), (1)\ncircular_limited_sums(1, 2) == 2\n# F = (0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (2, 0)\ncircular_limited_sums(2, 2) == 6\n# F = (0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 0), (0, 1, 1),\n# (0, 2, 0), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (2, 0, 0)\ncircular_limited_sums(3, 2) == 11\ncircular_limited_sums(4, 2) == 26\n```\n\n# Acknowledgement\n\nThis problem was designed as a hybrid of [Project Euler #209: Circular Logic](https://projecteuler.net/problem=209) and [Project Euler #164: Numbers for which no three consecutive digits have a sum greater than a given value](https://projecteuler.net/problem=164).\n\nIf you enjoyed this Kata, please also have a look at [my other Katas](https://www.codewars.com/users/Bubbler/authored)!\n\n Examples: \n",
  "1726": "Problem: \n## Task\n\nYou are at position [0, 0] in maze NxN and you can **only** move in one of the four cardinal directions (i.e. North, East, South, West).  Return `true` if you can reach position [N-1, N-1] or `false` otherwise.\n\nEmpty positions are marked `.`. Walls are marked `W`. Start and exit positions are empty in all test cases.\n\n## Path Finder Series:\n-       [#1: can you reach the exit?](https://www.codewars.com/kata/5765870e190b1472ec0022a2)\n-       [#2: shortest path](https://www.codewars.com/kata/57658bfa28ed87ecfa00058a)\n-       [#3: the Alpinist](https://www.codewars.com/kata/576986639772456f6f00030c)\n-       [#4: where are you?](https://www.codewars.com/kata/5a0573c446d8435b8e00009f)\n-       [#5: there's someone here](https://www.codewars.com/kata/5a05969cba2a14e541000129)\n\n Examples: \n",
  "1727": "Problem: \nWrite a function that determines whether a string is a valid guess in a Boggle board, as per the rules of Boggle. A Boggle board is a 2D array of individual characters, e.g.:\n```python\n[ [\"I\",\"L\",\"A\",\"W\"],\n  [\"B\",\"N\",\"G\",\"E\"],\n  [\"I\",\"U\",\"A\",\"O\"],\n  [\"A\",\"S\",\"R\",\"L\"] ]\n```\nValid guesses are strings which can be formed by connecting adjacent cells (horizontally, vertically, or diagonally) without re-using any previously used cells.\n\nFor example, in the above board \"BINGO\", \"LINGO\", and \"ILNBIA\" would all be valid guesses, while \"BUNGIE\", \"BINS\", and \"SINUS\" would not.\n\nYour function should take two arguments (a 2D array and a string) and return true or false depending on whether the string is found in the array as per Boggle rules.\n\nTest cases will provide various array and string sizes (squared arrays up to 150x150 and strings up to 150 uppercase letters). You do not have to check whether the string is a real word or not, only if it's a valid guess.\n\n Examples: \n",
  "1729": "Problem: \nHey, Path Finder, where are you?\n\n## Path Finder Series:\n-       [#1: can you reach the exit?](https://www.codewars.com/kata/5765870e190b1472ec0022a2)\n-       [#2: shortest path](https://www.codewars.com/kata/57658bfa28ed87ecfa00058a)\n-       [#3: the Alpinist](https://www.codewars.com/kata/576986639772456f6f00030c)\n-       [#4: where are you?](https://www.codewars.com/kata/5a0573c446d8435b8e00009f)\n-       [#5: there's someone here](https://www.codewars.com/kata/5a05969cba2a14e541000129)\n\n Examples: \n",
  "1730": "Problem: \n### Please also check out other katas in [Domino Tiling series](https://www.codewars.com/collections/5d19554d13dba80026a74ff5)!\n\n---\n\n# Task\n\nA domino is a rectangular block with `2` units wide and `1` unit high. A domino can be placed on a grid in two ways: horizontal or vertical.\n\n```\n## or #\n      #\n```\n\nYou have infinitely many dominoes, and you want to fill a board that is `N` units wide and `2` units high:\n\n```\n<---   N   --->\n###############\n###############\n```\n\nThe task is to find **the number of ways** you can fill the given grid with dominoes.\n\n# The Twist\n\nHowever, you can quickly find that the answer is exactly the Fibonacci series (and yeah, CW has already too many of them), so here is a twist:\n\nNow you have infinite supply of dominoes in `K` colors, and you have to fill the given grid **without any two adjacent dominoes having the same color**. Two dominoes are adjacent if they share an edge.\n\nA valid filling of a 2 x 10 board with three colors could be as follows (note that two same-colored dominoes can share a point):\n\n```\n1131223312\n2231332212\n```\n\nSince the answer will be very large, please give your answer **modulo 12345787**.\n\n# Examples\n\n```python\n# K == 1: only one color\ntwo_by_n(1, 1) == 1\ntwo_by_n(3, 1) == 0\n\n# K == 2: two colors\ntwo_by_n(1, 2) == 2\ntwo_by_n(4, 2) == 4\ntwo_by_n(7, 2) == 2\n\n# K == 3: three colors\ntwo_by_n(1, 3) == 3\ntwo_by_n(2, 3) == 12\ntwo_by_n(5, 3) == 168 # yes, the numbers grow quite quickly\n\n# You must handle big values\ntwo_by_n(10, 5) == 7802599\ntwo_by_n(20, 10) == 4137177\n```\n\n# Constraints\n\n`1 <= N <= 10000`\n\n`1 <= K <= 100`\n\nAll inputs are valid integers.\n\n Examples: \n",
  "1733": "Problem: \nGiven two different positions on a chess board, find the least number of moves it would take a knight to get from one to the other.\nThe positions will be passed as two arguments in algebraic notation.\nFor example, `knight(\"a3\", \"b5\")` should return 1.\n\nThe knight is not allowed to move off the board.\nThe board is 8x8.\n\nFor information on knight moves, see https://en.wikipedia.org/wiki/Knight_%28chess%29\n\nFor information on algebraic notation, see\nhttps://en.wikipedia.org/wiki/Algebraic_notation_%28chess%29\n\n(Warning: many of the tests were generated randomly. If any do not work, the test cases will return the input, output, and expected output; please post them.)\n\n Examples: \n",
  "1734": "Problem: \nWrite a class called User that is used to calculate the amount that a user will progress through a ranking system similar to the one Codewars uses.  \n\n##### Business Rules:\n\n* A user starts at rank -8 and can progress all the way to 8.\n* There is no 0 (zero) rank. The next rank after -1 is 1.\n* Users will complete activities. These activities also have ranks.\n* Each time the user completes a ranked activity the users rank progress is updated based off of the activity's rank\n* The progress earned from the completed activity is relative to what the user's current rank is compared to the rank of the activity\n* A user's rank progress starts off at zero, each time the progress reaches 100 the user's rank is upgraded to the next level\n* Any remaining progress earned while in the previous rank will be applied towards the next rank's progress (we don't throw any progress away). The exception is if there is no other rank left to progress towards (Once you reach rank 8 there is no more progression). \n* A user cannot progress beyond rank 8. \n* The only acceptable range of rank values is -8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8. Any other value should raise an error. \n\nThe progress is scored like so:\n\n* Completing an activity that is ranked the same as that of the user's will be worth 3 points\n* Completing an activity that is ranked one ranking lower than the user's will be worth 1 point\n* Any activities completed that are ranking 2 levels or more lower than the user's ranking will be ignored\n* Completing an activity ranked higher than the current user's rank will accelerate the rank progression. The greater the difference between rankings the more the progression will be increased. The formula is `10 * d * d` where `d` equals the difference in ranking between the activity and the user.  \n\n##### Logic Examples:\n* If a user ranked -8 completes an activity ranked -7 they will receive 10 progress\n* If a user ranked -8 completes an activity ranked -6 they will receive 40 progress\n* If a user ranked -8 completes an activity ranked -5 they will receive 90 progress\n* If a user ranked -8 completes an activity ranked -4 they will receive 160 progress, resulting in the user being upgraded to rank -7 and having earned 60 progress towards their next rank\n* If a user ranked -1 completes an activity ranked 1 they will receive 10 progress (remember, zero rank is ignored)\n\n##### Code Usage Examples:\n```python\nuser = User()\nuser.rank # => -8\nuser.progress # => 0\nuser.inc_progress(-7)\nuser.progress # => 10\nuser.inc_progress(-5) # will add 90 progress\nuser.progress # => 0 # progress is now zero\nuser.rank # => -7 # rank was upgraded to -7\n```\n\n~~~if:java\n**Note:** In **Java** some methods may throw an `IllegalArgumentException`.\n~~~\n~~~if:csharp\n**Note:** In **C#** some methods may throw an `ArgumentException`.\n~~~\n\n**Note**: Codewars no longer uses this algorithm for its own ranking system. It uses a pure Math based solution that gives consistent results no matter what order a set of ranked activities are completed at.\n\n Examples: \n",
  "1736": "Problem: \n> \"7777...*8?!??!*\", exclaimed Bob, \"I missed it again!  Argh!\"  Every time there's an interesting number coming up, he notices and then promptly forgets.  Who *doesn't* like catching those one-off interesting mileage numbers?\n\nLet's make it so Bob **never** misses another interesting number.  We've hacked into his car's computer, and we have a box hooked up that reads mileage numbers.  We've got a box glued to his dash that lights up yellow or green depending on whether it receives a `1` or a `2` (respectively).\n\nIt's up to you, intrepid warrior, to glue the parts together.  Write the function that parses the mileage number input, and returns a `2` if the number is \"interesting\" (see below), a `1` if an interesting number occurs within the next two miles, or a `0` if the number is not interesting.\n\n**Note:** In Haskell, we use `No`, `Almost` and `Yes` instead of `0`, `1` and `2`.\n\n## \"Interesting\" Numbers\n\nInteresting numbers are 3-or-more digit numbers that meet one or more of the following criteria:\n\n```if-not:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n* Every digit is the same number: `1111`\n* The digits are sequential, incementing\u2020: `1234`\n* The digits are sequential, decrementing\u2021: `4321`\n* The digits are a palindrome: `1221` or `73837`\n* The digits match one of the values in the `awesomePhrases` array\n```\n```if:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n* Every digit is the same number: `1111`\n* The digits are sequential, incementing\u2020: `1234`\n* The digits are sequential, decrementing\u2021: `4321`\n* The digits are a palindrome: `1221` or `73837`\n* The digits match one of the values in the `awesome_phrases` array\n```\n\n> \u2020 For incrementing sequences, `0` should come after `9`, and not before  `1`, as in `7890`.\n> \u2021 For decrementing sequences, `0` should come after `1`, and not before  `9`, as in `3210`.\n\nSo, you should expect these inputs and outputs:\n\n```python\n# \"boring\" numbers\nis_interesting(3, [1337, 256])    # 0\nis_interesting(3236, [1337, 256]) # 0\n\n# progress as we near an \"interesting\" number\nis_interesting(11207, []) # 0\nis_interesting(11208, []) # 0\nis_interesting(11209, []) # 1\nis_interesting(11210, []) # 1\nis_interesting(11211, []) # 2\n\n# nearing a provided \"awesome phrase\"\nis_interesting(1335, [1337, 256]) # 1\nis_interesting(1336, [1337, 256]) # 1\nis_interesting(1337, [1337, 256]) # 2\n```\n\n## Error Checking\n\n* A number is only interesting if it is greater than `99`!\n* Input will *always* be an integer greater than `0`, and less than `1,000,000,000`. \n* The `awesomePhrases` array will always be provided, and will always be an array, but may be empty.  (Not *everyone* thinks numbers spell funny words...)\n* You should only ever output `0`, `1`, or `2`.\n\n Examples: \n",
  "1737": "Problem: \nYour task is to implement a function that calculates an election winner from a list of voter selections using an [Instant Runoff Voting](http://en.wikipedia.org/wiki/Instant-runoff_voting) algorithm. If you haven't heard of IRV, here's a basic overview (slightly altered for this kata):\n\n- Each voter selects several candidates in order of preference.\n- The votes are tallied from the each voter's first choice.\n- If the first-place candidate has more than half the total votes, they win.\n- Otherwise, find the candidate who got the least votes and remove them from each person's voting list.\n- In case of a tie for least, remove all of the tying candidates.\n- In case of a complete tie between every candidate, return nil(Ruby)/None(Python)/undefined(JS).\n- Start over.\n- Continue until somebody has more than half the votes; they are the winner.\n\nYour function will be given a list of voter ballots; each ballot will be a list of candidates (symbols) in descending order of preference. You should return the symbol corresponding to the winning candidate. See the default test for an example!\n\n Examples: \n",
  "1739": "Problem: \nPart of Series 2/3\n\n\nThis kata is part of a series on the Morse code. Make sure you solve the [previous part](/kata/decode-the-morse-code) before you try this one. After you solve this kata, you may move to the [next one](/kata/decode-the-morse-code-for-real).\n\n\nIn this kata you have to write a Morse code decoder for wired electrical telegraph.\n\nElectric telegraph is operated on a 2-wire line with a key that, when pressed, connects the wires together, which can be detected on a remote station. The Morse code encodes every character being transmitted as a sequence of \"dots\" (short presses on the key) and \"dashes\" (long presses on the key).\n\nWhen transmitting the Morse code, the international standard specifies that:\n\"Dot\" \u2013 is 1 time unit long.\n\"Dash\" \u2013 is 3 time units long.\nPause between dots and dashes in a character \u2013 is 1 time unit long.\nPause between characters inside a word \u2013 is 3 time units long.\nPause between words \u2013 is 7 time units long.\n\nHowever, the standard does not specify how long that \"time unit\" is. And in fact different operators would transmit at different speed. An amateur person may need a few seconds to transmit a single character, a skilled professional can transmit 60 words per minute, and robotic transmitters may go way faster.\n\nFor this kata we assume the message receiving is performed automatically by the hardware that checks the line periodically, and if the line is connected (the key at the remote station is down), 1 is recorded, and if the line is not connected (remote key is up), 0 is recorded. After the message is fully received, it gets to you for decoding as a string containing only symbols 0 and 1.\n\nFor example, the message HEY JUDE, that is \u00b7\u00b7\u00b7\u00b7 \u00b7 \u2212\u00b7\u2212\u2212 \u00a0 \u00b7\u2212\u2212\u2212 \u00b7\u00b7\u2212 \u2212\u00b7\u00b7 \u00b7 may be received as follows:\n\n1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011\n\nAs you may see, this transmission is perfectly accurate according to the standard, and the hardware sampled the line exactly two times per \"dot\".\n\nThat said, your task is to implement two functions:\n\n1. Function decodeBits(bits), that should find out the transmission rate of the message, correctly decode the message to dots ., dashes - and spaces (one between characters, three between words) and return those as a string. Note that some extra 0's may naturally occur at the beginning and the end of a message, make sure to ignore them. Also if you have trouble discerning if the particular sequence of 1's is a dot or a dash, assume it's a dot.\n\n2.\u00a0Function decodeMorse(morseCode), that would take the output of the previous function and return a human-readable string.\n\n**NOTE:** For coding purposes you have to use ASCII characters `.` and `-`, not Unicode characters.\n\nThe Morse code table is preloaded for you (see the solution setup, to get its identifier in your language).\n\nAll the test strings would be valid to the point that they could be reliably decoded as described above, so you may skip checking for errors and exceptions, just do your best in figuring out what the message is!\n\nGood luck!\n\nAfter you master this kata, you may try to Decode the Morse code, for real.\n\n Examples: \n",
  "1741": "Problem: \n### Please also check out other katas in [Domino Tiling series](https://www.codewars.com/collections/5d19554d13dba80026a74ff5)!\n\n---\n\n# Task\n\nA domino is a rectangular block with `2` units wide and `1` unit high. A domino can be placed on a grid in two ways: horizontal or vertical.\n\n```\n## or #\n      #\n```\n\nYou have infinitely many dominoes, and you want to fill a board that is `2*N` units wide and `5` units high:\n\n```\n<---   2N   --->\n################\n################\n################\n################\n################\n```\n\nThe task is to find **the number of ways** you can fill the given grid with dominoes.\n\nSince the answer will be very large, please give your answer **modulo 12345787**.\n\n# Examples\n\n```python\nfive_by_2n(1) == 8\nfive_by_2n(2) == 95\nfive_by_2n(3) == 1183\nfive_by_2n(5) == 185921\n\nfive_by_2n(10) == 8228892\nfive_by_2n(20) == 9942990\nfive_by_2n(50) == 2308182\nfive_by_2n(100) == 334896\n\nfive_by_2n(1000) == 6032838\nfive_by_2n(10000) == 2392948\n```\n\n# Constraints\n\n`1 <= N <= 10000`\n\nAll inputs are valid integers.\n\n# Hint\n\nThe reference solution uses eleven mutual recurrence equations.\n\n Examples: \n",
  "1742": "Problem: \nJon and Joe have received equal marks in the school examination. But, they won't reconcile in peace when equated with each other. To prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number. While unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge. Being Joe's friend, your task is to help him out.\n\n# Task\n\nCreate a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\n# Notes\n1. Sub-arrays may or may not have their elements sorted.\n2. The order of sub-arrays inside the main array does not matter.\n3. For an optimal solution, the following operation should complete within 6000ms.\n\n# Sample\n\n Examples: \n",
  "1743": "Problem: \n# Background\n\nThe famous Collatz Sequence is generated with the following rules:\n\n* Start with a positive integer `a[0] = n`.\n* If `a[i]` is even, `a[i+1] = a[i] / 2`.\n* Otherwise, `a[i+1] = a[i] * 3 + 1`.\n\nHowever, for the purpose of this Kata, I give a **slightly modified definition**:\n\n* If `a[i]` is even, `a[i+1] = a[i] / 2`. This step is a step-down, or `D`.\n* Otherwise, `a[i+1] = (a[i] * 3 + 1) / 2`. This step is a step-up, or `U`.\n\nAlso, for any starting number, the sequence is generated indefinitely, not ending at 1.\n\n# Problem Description\n\nFor any given starting number, we can record the types of steps(`D` or `U`) from it.\nFor example, if we start with the number 11, the Collatz steps look like this:\n```\na[0] = 11\na[1] = (11 * 3 + 1) / 2 = 17 -> U\na[2] = (17 * 3 + 1) / 2 = 26 -> U\na[3] = 26 / 2 = 13           -> D\na[4] = (13 * 3 + 1) / 2 = 20 -> U\na[5] = 20 / 2 = 10           -> D\na[6] = 10 / 2 = 5            -> D\na[7] = (5 * 3 + 1) / 2 = 8   -> U\na[8] = 8 / 2 = 4             -> D\na[9] = 4 / 2 = 2             -> D\na[10] = 2 / 2 = 1            -> D\na[11] = (1 * 3 + 1) / 2 = 2  -> U\na[12] = 2 / 2 = 1            -> D\n...\n```\n\n```\n11 -> 17 -> 26 -> 13 -> 20 -> 10 -> 5 -> 8 -> 4 -> 2 -> 1 -> 2 -> 1 -> ...\n   U     U     D     U     D     D    U    D    D    D    U    D\n```\n\nBased on the steps shown above, the first four Collatz steps of 11 is `UUDU`.\nAlso, 107 is the smallest number over 100 whose Collatz steps start with `UUDU`, and\n1003 is the smallest number over 1000 with the property.\n\nA special example is the number 1, which can generate any number of `UD`.\n\nFind the smallest integer exceeding or equal to `n` whose Collatz steps start with the given string `steps`.\n\n# Constraints\n\n`1 <= n <= 10 ** 9`\n\n`n` is always a valid integer.\n\n`1 <= length(steps) <= 25`\n\nThe string `steps` will entirely consist of `U`s and `D`s.\n\n# Examples\n\n```python\ncollatz_steps(1, 'UUDU') == 11\ncollatz_steps(100, 'UUDU') == 107\ncollatz_steps(1000, 'UUDU') == 1003\n\ncollatz_steps(1, 'UD') == 1\ncollatz_steps(1, 'UDUD') == 1\ncollatz_steps(1, 'UDUDUD') == 1\n```\n\n# Hint\n\nIf you are completely lost, start by answering the following question:\n\n* After applying the given steps (e.g. `UUDU`) to an initial number `x`,\n  what fraction do you get?\n  \nAfter that, you might want to study about [modular inverse](https://en.wikipedia.org/wiki/Modular_multiplicative_inverse).\n\n# Acknowledgement\n\nThis problem was inspired by [Project Euler #277: A Modified Collatz sequence](https://projecteuler.net/problem=277).\n\nIf you enjoyed this Kata, please also have a look at [my other Katas](https://www.codewars.com/users/Bubbler/authored)!\n\n Examples: \n",
  "1744": "Problem: \nThis Kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fusc-function-part-1). The `fusc` function is defined recursively as follows:\n\n    fusc(0) = 0\n    fusc(1) = 1\n    fusc(2n) = fusc(n)\n    fusc(2n + 1) = fusc(n) + fusc(n + 1)\n    \nYour job is to produce the code for the `fusc` function. In this kata, your function will be tested with large values of `n` more than 1000 bits (in JS and PHP: at most 52 bits), so you should be concerned about stack overflow and timeouts.\n\nMethod suggestion:\n\nImagine that instead of `fusc(n)`, you were to implement `fib(n)`, which returns the n'th Fibonacci number.\n\nThe function is recursively defined by:\n\n```\n1.    fib(0) = 1\n2.    fib(1) = 1\n3.    fib(n + 2) = fib(n) + fib(n + 1), if n + 2 > 1\n```\nIf one translates the above definition directly into a recursive function, the result is not very efficient. One can try memoization, but that requires lots of space and is not necessary. So, first step is to try and find a _tail recursive_ definition. In order to do that we try to write both sides of equation 3) on the same form. Currently, the left side of the equation contains a single term, whereas the right side is the sum of two terms. A first attempt is to add `fib(n + 1)` to both sides of the equation:\n```\n3.    fib(n + 1) + fib(n + 2) = fib(n) + 2 * fib(n + 1)\n```\nThe two sides of the equation look much more alike, but there is still an essential difference, which is the coefficient of the second term of each side. On the left side of the equation, it is `1`  and, on the right, it is `2`. To remedy this, we can introduce a variable `b`:\n```\n3.    fib(n + 1) + b * fib(n + 2) = b * fib(n) + (b + 1) * fib(n + 1)\n```\nWe notice that the coefficients of the first term are not the same (`1` on the left and `b` on the right), so we introduce a variable `a`:\n```\n3.    a * fib(n + 1) + b * fib(n + 2) = b * fib(n) + (a + b) * fib(n + 1)\n```\nNow the two sides have the same form (call it `F`), which we can define as: \n\n```F(a, b, n) = a * fib(n) + b * fib(n + 1)```\n\nIn fact, we can write equation 3) as:\n```\n3.    F(a, b, n + 1) = F(b, a + b, n)\n```\nWe also have, by definition of `F` and `fib`:\n```\n4.    F(a, b, 0) = a * fib(0) + b * fib(1) = a + b\n```\nAlso, by definition of `F`: \n```\n5.    fib(n) = F(1, 0, n)\n```\n\nThe next step is to translate the above into code:\n```\ndef fib(n):\n\n    def F(a, b, n):\n        if n == 0: return a + b    # see 4. above\n        return F(b, a + b, n - 1)  # see 3. above\n\n    return F(1, 0, n)              # see 5. above\n```\n\nThe final step (optional for languages that support tail call optimization) is to replace the tail recursive function `F` with a loop:\n```\ndef fib(n):\n    a, b = 1, 0                    # see 5. above\n    while n > 0:\n        a, b, n = b, a + b, n - 1  # see 3. above\n    return a + b .                 # see 4. above\n```\nVoila! Now, go do the same with `fusc`.\n\n Examples: \n",
  "1745": "Problem: \nThis calculator takes values that could be written in a browsers route path as a single string. It then returns the result as a number (or an error message).\n\nRoute paths use the '/' symbol so this can't be in our calculator. Instead we are using the '$' symbol as our divide operator.\n\nYou will be passed a string of any length containing numbers and operators:\n\n* '+' = add        \n* '-' = subtract  \n* '*' = multiply \n* '$' = divide   \n\nYour task is to break the string down and calculate the expression using this order of operations. (division => multiplication => subtraction => addition)\n\nIf you are given an invalid input (i.e. any character except `.0123456789+-*$`) you should return the error message:`'400: Bad request'`\n\n### Remember:\n\n1. Operations are infinite\n2. Order of operations is imperitive\n3. No `eval` or equivalent functions\n\n**Examples:**\n```python\ncalculate('1+1')     => '2'\ncalculate('10$2')    => '5'\ncalculate('1.5*3')   => '4.5'\n\ncalculate('5+5+5+5') => '20'\n\ncalculate('1000$2.5$5+5-5+6$6') =>'81'\n\ncalculate('10-9p')   =>  '400: Bad request'\n```\n\n### Further Notes - Parameters outside of this challenge:\n\n- Brackets e.g. 10*(1+2)\n- Square root, log, % or any other operators\n- Unary minus (10*-1)\n- Bad mathematical input (10**$10 or 5+5$)\n- You may have to deal with floats\n\nIf enjoy this and want something harder please see http://www.codewars.com/kata/evaluate-mathematical-expression/ for making a much more complicated calculator. This is a good kata leading up to that.\n\n Examples: \n",
  "1750": "Problem: \nThe `mystery` function is defined over the non-negative integers. The more common name of this function is concealed in order to not tempt you to search the Web for help in solving this kata, which most definitely would be a very dishonorable thing to do.\n\nAssume `n` has `m` bits. Then `mystery(n)` is the number whose binary representation is the entry in the table `T(m)` at index position `n`, where `T(m)` is defined recursively as follows:\n\n```\nT(1) = [0, 1]\n```\n\n`T(m + 1)` is obtained by taking two copies of `T(m)`, reversing the second copy, prepending each entry of the first copy with `0` and each entry of the reversed copy with `1`, and then concatenating the two. For example:\n\n```\nT(2) = [ 00, 01, 11, 10 ]\n```\n\nand\n\n```\nT(3) = [ 000, 001, 011, 010, 110, 111, 101, 100 ]\n```\n\n`mystery(6)` is the entry in `T(3)` at index position 6 (with indexing starting at `0`), i.e., `101` interpreted as a binary number. So, `mystery(6)` returns `5`.\n\nYour mission is to implement the function `mystery`, where the argument may have up to 63 bits. Note that `T(63)` is far too large to compute and store, so you'll have to find an alternative way of implementing `mystery`. You are also asked to implement `mystery_inv` ( or `mysteryInv` ), the inverse of `mystery`. Finally, you are asked to implement a function `name_of_mystery` ( or `nameOfMystery` ), which shall return the name that `mystery` is more commonly known as. After passing all tests you are free to learn more about this function on Wikipedia or another place.\n\nHint: If you don't know the name of `mystery`, remember there is information in passing as well as failing a test.\n\n Examples: \n",
  "1752": "Problem: \nAlright, detective, one of our colleagues successfully observed our target person, Robby the robber. We followed him to a secret warehouse, where we assume to find all the stolen stuff. The door to this warehouse is secured by an electronic combination lock. Unfortunately our spy isn't sure about the PIN he saw, when Robby entered it.\n\nThe keypad has the following layout:\n```\n\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 2 \u2502 3 \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502 4 \u2502 5 \u2502 6 \u2502\n\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502 7 \u2502 8 \u2502 9 \u2502\n\u2514\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2518\n    \u2502 0 \u2502\n    \u2514\u2500\u2500\u2500\u2518\n```\nHe noted the PIN `1357`, but he also said, it is possible that each of the digits he saw could actually be another adjacent digit (horizontally or vertically, but not diagonally). E.g. instead of the `1` it could also be the `2` or `4`. And instead of the `5` it could also be the `2`, `4`, `6` or `8`.\n\nHe also mentioned, he knows this kind of locks. You can enter an unlimited amount of wrong PINs, they never finally lock the system or sound the alarm. That's why we can try out all possible (*) variations.\n\n\\* possible in sense of: the observed PIN itself and all variations considering the adjacent digits\n\nCan you help us to find all those variations? It would be nice to have a function, that returns an array (or a list in Java and C#)  of all variations for an observed PIN with a length of 1 to 8 digits. We could name the function `getPINs` (`get_pins` in python, `GetPINs` in C#). But please note that all PINs, the observed one and also the results, must be strings, because of potentially leading '0's. We already prepared some test cases for you.\n\nDetective, we are counting on you!\n\nFor C# user: Do not use Mono. Mono is too slower when run your code.\n\n Examples: \n",
  "1753": "Problem: \nYou are in the capital of Far, Far Away Land, and you have heard about this museum where the royal family's crown jewels are on display. Before you visit the museum, a friend tells you to bring some extra money that you'll need to bribe the guards. You see, he says, the crown jewels are in one of 10 rooms numbered from 1 to 10. The doors to these room are kept closed, and each is guarded by a very intimidating guard.\n\nFor security purposes, the jewels are moved every night to a different room. To find out which room they are in, you'll have to ask one of the guards. But first you have to pay him a bribe. After paying him:\n  \n  1. If the jewels are behind the door he's guarding, he'll let you in.\n  2. Otherwise, he'll point you in the direction of the correct room by telling you if the room has a higher or lower room number than the room he's guarding.\n\nThe guards have a special rank system, and, depending on rank, the size of the bribe that you'll need to pay to each guard may vary. For example, you may have to pay $1 to the guard at room 1, $2 to the guard at room 2, and so on, up to $10 to the guard at room 10. The bribe amounts are specified by an array/list sorted by room number in ascending order. Hence, in this example, the bribes are given by `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`.\n\nThe problem you need to solve is to determine the minimum amount you may need _in the worst case_ to get into the room with the crown jewels. As a seasoned programmer, you might try doing a binary search. Let's assume that the bribes are as specified in the example above. You first go to the guard standing in front of room 5, and pay him $5. In the worst case the crown jewels are in room 10 and you'll end up paying: $5 + $8 + $9 + $10 = $32. It turns out that a regular binary search is not optimal in this case. You are better off if you first go to room 7. In the worst case the guard will direct you to the right(i.e., higher numbered rooms) and then you go to room 9. Again, in the worst case the guard will direct you to the right, and you go to room 10. In all, you'll have to pay $7 + $9 + $10 = $26. You can easily verify that if the first guard (at room 7) had directed you to the left, you would have ended up paying less than $26. So for this problem, the maximum you will need to pay is $26. There are no other solutions where you would need less in the worst case, so 26 is the solution to this problem instance. \n\nYou are asked to define function `least_bribes(bribes)` that takes as argument an array that contains the bribes that each guard will accept in ascending room number and returns the minumum amount you'll need to spend on bribes _in the worst case_. The problem is not limited to 10 rooms only, so the array `bribes` can be of any length greater or equal to 1. Your code will have to handle arrays up to 100 in length and bribes between $1 and $1000.\n\n Examples: \n",
  "1754": "Problem: \nA group of N golfers wants to play in groups of G players for D days in such a way that no golfer plays more than once with any other golfer. For example, for N=20, G=4, D=5, the solution at Wolfram MathWorld is\n\n```\n Mon:   ABCD    EFGH    IJKL    MNOP    QRST\n Tue:   AEIM    BJOQ    CHNT    DGLS    FKPR\n Wed:   AGKO    BIPT    CFMS    DHJR    ELNQ\n Thu:   AHLP    BKNS    CEOR    DFIQ    GJMT\n Fri:   AFJN    BLMR    CGPQ    DEKT    HIOS\n```\n\nWrite a function that validates a proposed solution, a list of list of strings, as being a solution to the social golfer problem. Each character represents a golfer, and each string is a group of players. Rows represent days. The solution above would be encoded as:\n\n```\n [\n  ['ABCD', 'EFGH', 'IJKL', 'MNOP', 'QRST'],\n  ['AEIM', 'BJOQ', 'CHNT', 'DGLS', 'FKPR'],\n  ['AGKO', 'BIPT', 'CFMS', 'DHJR', 'ELNQ'],\n  ['AHLP', 'BKNS', 'CEOR', 'DFIQ', 'GJMT'],\n  ['AFJN', 'BLMR', 'CGPQ', 'DEKT', 'HIOS']\n ]\n```\n\nYou need to make sure (1) that each golfer plays exactly once every day, (2) that the number and size of the groups is the same every day, and (3) that each player plays with every other player *at most* once.\n\nSo although each player must play every day, there can be particular pairs of players that never play together.\n\nIt is not necessary to consider the case where the number of golfers is zero; no tests will check for that. If you do wish to consider that case, note that you should accept as valid all possible solutions for zero golfers, who (vacuously) can indeed play in an unlimited number of groups of zero.\n\n Examples: \n",
  "1755": "Problem: \nThis is the second part of a two-part challenge. See [part I](https://www.codewars.com/kata/587387d169b6fddc16000002) if you haven't done so already.\nThe problem is the same, only with longer lists and larger values.\n\nImagine you have a number of jobs to execute. Your workers are not permanently connected to your network, so you have to distribute all your jobs in the beginning. Luckily, you know exactly how long each job is going to take. \n\nLet \n```\nx = [2,3,4,6,8,2]\n```\nbe the amount of time each of your jobs is going to take.\n\nYour task is to write a function ```splitlist(x)```, that will return two lists ```a``` and ```b```, such that ```abs(sum(a)-sum(b))``` is minimised.\n\nOne possible solution to this example would be \n```\na=[2, 4, 6]\nb=[3, 8, 2]\n```\nwith  ```abs(sum(a)-sum(b)) == 1```.\n\nThe order of the elements is not tested, just make sure that you minimise ```abs(sum(a)-sum(b))``` and that ```sorted(a+b)==sorted(x)```.\n\nYou may assume that ```len(x)<=40``` and ```0<=x[i]<=1000```.\n\n Examples: \n",
  "1756": "Problem: \nWe all know how to handle exceptions in Python. Just use:\n\n    try:\n        num = float(input())\n    except ValueError:\n        print(\"That's not a number!\")\n    else:\n        print(num)\n\nCode such as this\n\n    def factorial(x, n = 1):\n        if x == 0:\n          raise ValueError(n)\n        factorial(x - 1, n * x)\n\nrelies on ridiculous exception misuse, but you can't change it because that would require a complete refactor. Code such as this\n\n    try:\n        return int(input(\"Input a number: \")\n    except ValueError:\n        return 4 # random number\n\nrelies on reasonable exception use - almost all of the Python documentation examples are written in this way.\n\nWhat if you are using a faulty implementation of Embedded Python that doesn't implement the `try` statement? Where `sys.excepthook` is a hard-coded, unoverrideable value? Where even `__file__` is not defined? How do you use basic functions like `list.index`?\n\nYour task is to write a function that can handle exceptions raised in a program or function _without_ using `try` or `except`. Somehow.\n\nThe first argument of your function `handle` will be a `lambda` requiring no parameters. You will call this function and handle any exceptions raised. The second argument will be a callable `success`:\n\n    def success(func, val):\n        pass\n\nThe third argument will be a callable `failure`:\n\n    def failure(func, exc):\n        pass\n\nSubsequent arguments will be exceptions. If instances of these exceptions are raised, you must call the handler and no error message must be printed to `stderr`. If the exception raised is not provided as an argument, it should appear as though the exception was never caught.\n\nPass the return value of `func` to `success` unless it raises an exception. If it raises an exception that `isinstance` of an exception class passed to `handle`, call `failure` with an instance of the raised exception.\n\nDon't worry about the little things like dealing with the extra arguments to exceptions or maintaining the call stack. Whoever writes code like _that_ deserves the extra work.\n\n## What does \"catching an exception\" mean?\nIt means:\n\n  * The exception will not be printed to `stderr`.\n  * Code can continue to be executed.\n  * The `failure` callable knows what the exception was.\n\n Examples: \n",
  "1758": "Problem: \nIn this kata you have to create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders.\n\nExamples:\n\n```python\npermutations('a'); # ['a']\npermutations('ab'); # ['ab', 'ba']\npermutations('aabb'); # ['aabb', 'abab', 'abba', 'baab', 'baba', 'bbaa']\n```\n\nThe order of the permutations doesn't matter.\n\n Examples: \n",
  "1759": "Problem: \n_yet another easy kata!_\n\n_Bored of usual python katas? me too;_\n\n\n\n## Overview\n\n\u2002\u2002\u2002\u2002 As you have guessed from the title of the kata you are going to implement a class that supports ***function overloading***. You might be thinking python doesn't support that thing... Of course python doesn't support that! So you have to implement that missing functionality.\n\n\u2002\u2002\u2002\u2002 To achieve that You have to implement the `Meta` class which will be the metaclass of `Overload` class (see sample tests) and class that use `Meta` should work as usual at other things.\n\n\n\n## The Goal\n\n```python\n    \nclass Overload(metaclass=Meta):\n    \n    CLS_VAR = 42\n    \n    def __init__(self):\n        self.a = 1\n        self.no = 'This is \"No parameter\" function.'\n        self.single = 'This is \"Single parameter\" function'\n        self.two = 'This is \"Two parameter\" function'\n        self.three = 'This is \"Three parameter\" function'\n\n    def foo(self):\n        return self.no\n\n    def foo(self, x):\n        return self.single + ':' + str(x)\n\n    def foo(self, x, y):\n        return self.two + ':' + str(x) + ',' + str(y)\n\n    def foo(self, x, y, z):\n        return self.three + ':' + str(x) + ',' + str(y) + ',' + str(z)\n    \n    def extra(self):\n        return 'This is extra method.'\n            \n  \n\n  obj = Overload()\n\n  Overload.foo=lambda self,a,b,c,d: 'from outside!'\n\n  obj.foo()            # 'This is \"No parameter\" function.'\n  obj.foo(1, 2)        # 'This is \"Two parameter\" function:1,2'\n  obj.foo(1, 2, 3)     # 'This is \"Three parameter\" function:1,2,3'\n  obj.foo(1, 2, 3, 4)  # 'from outside!'\n```\n\n\n\n## Specifications\n   \n   * The Overload base class will always be the same as above. It will be regenerated different times in the tests, for testing purpose.\n   * All the other methods will be added and tested **after instanciation** the class like shown in the example above (***Focus on this point; you will need this***).\n   * Only instance methods will be tested, no static or class level methods.\n   * There is no testing for either `*varargs` or `**kwargs`.\n   * Aside from overloading, the class should behave just like usual. Talking here about variable assginment or reassignment, at class or instance level, reassigning a method to a var or the opposite, ...\n   * If there is neither a method (overloaded or not) which satisfies the expected number of arguments nor a property or class level property that cn be found when calling for an attribute, raise an exception of type `AttributeError` (\"just like usual\", as said above...)\n   * Last but not least, different classes must not share overloaded method. Hence:\n   \n```python\nCls1 = generate_Overload()\nobj = Cls1()\nCls1.foo=lambda self,a,b,c,d: 'from Cls1'\n\nCls2 = generate_Overload()\nobj2 = Cls2()\nCls2.foo=lambda self,a,b,c,d: 'from Cls2'\n\nobj.foo(1,2,3,4)    # -> 'from Cls1'\nobj2.foo(1,2,3,4)   # -> 'from Cls2'\n\nCls2.foo=lambda self: 'updated'\n\nobj.foo()           # -> 'This is \"No parameter\" function.'\nobj2.foo()          # -> 'updated'\n```\n   \n## Notes\n\n   * If there are any flaw in testing then report me.\n   * If you need some hints then ping me in discourse.\n\n_Enjoy!_\n\n_Thanks to B4B for his contribution._\n\n_I can assure you that this can be done without using any library/modules._\n\n Examples: \n",
  "1760": "Problem: \n# Task\n\nYou are given a `chessBoard`, a 2d integer array that contains only `0` or `1`. `0` represents a chess piece and `1` represents a empty grid. It's always square shape.\n\nYour task is to count the number of squares made of empty grids.\n\nThe smallest size of the square is `2 x 2`. The biggest size of the square is `n x n`, where `n` is the size of chess board. \n\nA square can overlap the part of other squares. For example:\n\nIf\n\n```\nchessBoard=[\n  [1,1,1],\n  [1,1,1],\n  [1,1,1]\n]\n```\n\n...there are four 2 x 2 squares in the chess board:\n\n```\n[1,1, ]  [ ,1,1]  [ , , ]  [ , , ]\n[1,1, ]  [ ,1,1]  [1,1, ]  [ ,1,1]\n[ , , ]  [ , , ]  [1,1, ]  [ ,1,1]\n```\n\nAnd one 3 x 3 square:\n```\n[1,1,1]\n[1,1,1]\n[1,1,1]\n```\n\nYour output should be an object/dict. Each item in it should be: `size:number`, where size is the square's size, and number is the number of squares. \n\nFor example, if there are four `2 x 2` squares and one `3 x 3` square in the chess board, the output should be: `{2:4,3:1}` (or any equivalent hash structure in your language). The order of items is not important, `{3:1,2:4}` is also a valid output.\n\nIf there is no square in the chess board, just return `{}`.\n\n# Note\n\n```if:javascript\n- `2 <= chessBoard.length <= 400`\n```\n```if:python\n- `2 <= chessBoard.length <= 120`\n```\n```if:ruby\n- `2 <= chessBoard.length <= 130`\n```\n```if:java\n- `2 <= chessBoard.length <= 250`\n```\n```if:haskell\n- `2 <= chessBoard.length <= 120`\n```\n```if:csharp\n- `2 <= chessBoard.Length <= 220`\n```\n\n- `5` fixed testcases\n\n- `100` random testcases, testing for correctness of solution\n\n- `100` random testcases, testing for performance of code\n\n- All inputs are valid.\n\n- Pay attention to code performance.\n\n- If my reference solution gives the wrong result in the random tests, please let me know(post an issue). \n\n# Example\n\nFor \n```\nchessBoard = [\n  [1,1],\n  [1,1]\n]\n```\n\nthe output should be `{2:1}`.\n\n\nFor \n```\nchessBoard = [\n  [0,1],\n  [1,1]\n]\n```\n\nthe output should be `{}`.\n\nFor \n```\nchessBoard = [\n  [1,1,1],\n  [1,1,1],\n  [1,1,1]\n]\n```\n\nthe output should be `{2:4,3:1}`.\n\nFor \n```\nchessBoard = [\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n```\n\nthe output should be `{}`.\n\n Examples: \n",
  "1761": "Problem: \n_Yet another easy kata!_\n\n\n# Task:\n  \n  \n  - Let's write a sequence starting with `seq = [0, 1, 2, 2]` in which\n      - 0 and 1 occurs 1 time\n      - 2 occurs 2 time\n  \n  \n  and sequence advances with adding next natural number `seq[natural number]` times so now, 3 appears \n  2 times and so on.\n  \n  ### Input\n   - You are given input `n`  and return nth(0-based) value of this list.\n  \n  \n  let;s take example:\n  \n  seq = [0, 1, 2, 2]\\\n  i = 3 and as seq[i]=2, seq = [0, 1, 2, 2, 3, 3]\\\n  i = 4 and as seq[i]=3, seq = [0, 1, 2, 2, 3, 3, 4, 4, 4]\\\n  i = 5 and as seq[i]=3, seq = [0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]\n  and so on.\n  \n  Some elements of list:\n  ```\n[0, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21]\n  ```\n  \n  \n  # Constraint :\n  \n  \n  * Python\n    - 0 <= n <= `$2^{41}$`\n  * Javascript\n    - 0 <= n <= `$2^{49}$`\n  \n  \n  \n\n##### Have fun!\n\n_tip: you can solve this using smart brute-force._\n\n Examples: \n",
  "1763": "Problem: \n# Disclaimer\n\nThis Kata is an insane step-up from [GiacomoSorbi's Kata](https://www.codewars.com/kata/total-increasing-or-decreasing-numbers-up-to-a-power-of-10/python),\nso I recommend to solve it first before trying this one.\n\n# Problem Description\n\nA positive integer `n` is called an *increasing number* if its digits are in increasing order\n(e.g. 123, 144568, 56799).\n\nSimilarly, `n` is called a *decreasing number* if its digits are in decreasing order\n(e.g. 210, 76642, 998500).\n\nNote that the numbers whose digits are all the same (e.g. 1111, 22222) are both increasing and decreasing.\n\nGiven the maximum number of digits (`max_digits`), how many positive integers in the range are either increasing or decreasing (or both)?\nSince your answer will be very large, please give your answer **modulo 12345787**.\n\nAlso note that, unlike Giacomo's version, the number zero is excluded from the counts\n(because it's not positive).\n\n# Constraints\n\n`1 <= max_digits <= 10 ** 9`\n\n**Note the input size!**\n\nThe input will be always a valid integer.\n\n# Examples\n\n```python\n# Up to two digits, all numbers are either increasing or decreasing\ninsane_inc_or_dec(1) == 9\ninsane_inc_or_dec(2) == 99\ninsane_inc_or_dec(3) == 474\ninsane_inc_or_dec(4) == 1674\ninsane_inc_or_dec(5) == 4953\ninsane_inc_or_dec(6) == 12951\n```\n\n# Acknowledgement\n\nThis problem was inspired by [Project Euler #113: Non-bouncy Numbers](https://projecteuler.net/problem=113).\n\nIf you enjoyed this Kata, please also have a look at [my other Katas](https://www.codewars.com/users/Bubbler/authored)!\n\n Examples: \n",
  "1764": "Problem: \nIn this kata you must determine the lowest floor in a building from which you cannot drop an egg without it breaking. You may assume that all eggs are the same; if one egg breaks when dropped from floor `n`, all eggs will. If an egg survives a drop from some floor, it will survive a drop from any floor below too. \n\nYou are given `num_eggs` eggs and are allowed to make a maximum of `num_drops` drops. If an egg does not break when dropped, it may be reused. You may assume that it is feasible to determine the floor with the given number of eggs and drops.\n\nExample 1: \nYou are given 1 egg and 10 drops. You start by dropping the egg from the first floor (floor numbering starts at 1). If it breaks, the answer is 1. If it does not break, you drop it from the second floor. If it breaks, the answer is 2. Otherwise you continue in the same manner until you reach a floor where the egg breaks. You may assume that you will reach that floor before you have exhausted your drops (i.e., in this example, the egg will break when dropped from floor 10 or lower).\n\nExample 2: You are given 2 eggs and 10 drops. The highest floor for which this problem has a solution is floor 55, so you may assume that the answer is floor 55 or a lower floor. You will have to determine how the number 55 is derived and generalize it for any number of eggs and drops.\n\nTo solve this problem, you need to write a function `solve` that takes an argument `emulator` and returns the lowest floor from which an egg will break if dropped. The `emulator` object has the following properties and method which you may invoke:\n\n  1. `emulator.eggs` returns the number of eggs you have left. You may use this property to detemine the number of eggs you are given initially.\n  2. `emulator.drops` returns the the number of drops you have left. You may use this property to detemine the number of drops you are given initially.\n  3. `emulator.drop(n)` returns `True` if an egg dropped from floor `n` breaks and `False` if it does not break. The number of times that you may invoke this method is limited to the number of drops you were given. If invoked after no drops are left, it will throw an exception. Same happens if you invoke this method after all your eggs are broken. \n\nYou are not allowed to access any other method or state attribute of the `emulator` object, even if you can. This is considered cheating and is a very dishonorable thing to do! Note that `emulator.__dict__` has been disabled. \n\nNote: [This kata](http://www.codewars.com/kata/faberge-easter-eggs-crush-test) is similar although not the same.\n\n Examples: \n",
  "1765": "Problem: \nAn integer partition of n is a weakly decreasing list of positive integers which sum to n.\n\nFor example, there are 7 integer partitions of 5:\n\n[5], [4,1], [3,2], [3,1,1], [2,2,1], [2,1,1,1], [1,1,1,1,1].\n\nWrite a function named partitions which returns the number of integer partitions of n.  The function should be able to find the number of integer partitions of n for n as least as large as 100.\n\n Examples: \n",
  "1766": "Problem: \n#SKRZAT\n\n\n\nGeek Challenge [SKRZAT] is an old, old game from Poland that uses a game console with two buttons plus a joy stick. As is true to its name, the game communicates in binary, so that one button represents a zero and the other a one. Even more true to its name, the game chooses to communicate so that the base of the number system is minus two, not plus two, so we'll call this representation \"Weird Binary\". Thus the bit positions label the powers of minus two, as seen in the following five-bit tables:\n\n    | ------------------------------------------------------------------------- |\n    |  Bits  |  Value  |  Bits  |  Value  |  Bits  |  Value  |  Bits  |  Value  |\n    | ------ | ------- | ------ | ------- | ------ | ------- | ------ | ------- |\n    | 00000  |    0    | 01000  |    -8   | 10000  |    16   | 11000  |    8    |\n    | 00001  |    1    | 01001  |    -7   | 10001  |    17   | 11001  |    9    |\n    | 00010  |   -2    | 01010  |   -10   | 10010  |    14   | 11010  |    6    |\n    | 00011  |   -1    | 01011  |    -9   | 10011  |    15   | 11011  |    7    |\n    | 00100  |    4    | 01100  |    -4   | 10100  |    20   | 11100  |    12   |\n    | 00101  |    5    | 01101  |    -3   | 10101  |    21   | 11101  |    13   |\n    | 00110  |    2    | 01110  |    -6   | 10110  |    18   | 11110  |    10   |\n    | 00111  |    3    | 01111  |    -5   | 10111  |    19   | 11111  |    11   |\n    | ------------------------------------------------------------------------- |\n\n    | ------------------------------------------------------------------------- |\n    |  Bits  |  Value  |  Bits  |  Value  |  Bits  |  Value  |  Bits  |  Value  |\n    | ------ | ------- | ------ | ------- | ------ | ------- | ------ | ------- |\n    | 01010  |   -10   | 00010  |    -2   | 11010  |    6    | 10010  |    14   |\n    | 01011  |    -9   | 00011  |    -1   | 11011  |    7    | 10011  |    15   |\n    | 01000  |    -8   | 00000  |    0    | 11000  |    8    | 10000  |    16   |\n    | 01001  |    -7   | 00001  |    1    | 11001  |    9    | 10001  |    17   |\n    | 01110  |    -6   | 00110  |    2    | 11110  |    10   | 10110  |    18   |\n    | 01111  |    -5   | 00111  |    3    | 11111  |    11   | 10111  |    19   |\n    | 01100  |    -4   | 00100  |    4    | 11100  |    12   | 10100  |    20   |\n    | 01101  |    -3   | 00101  |    5    | 11101  |    13   | 10101  |    21   |\n    | ------------------------------------------------------------------------- |\n\nNumbers are presented on the screen in Weird Binary, and then numbers are accepted in response from the console as a stream of zeroes and ones, terminated by a five-second pause.  You are writing a computer program to support the novice geek in playing the game by translating numbers between decimal and Weird Binary.\n\n#Input\n\nThe `skrzat` function will either convert into Weird Binary or out of Weird Binary: The first parameter will be either the letter `\"b\"`, which indicates that the second parameter is written in Weird Binary and needs to be converted to decimal; the letter `\"d\"` indicates that the second parameter is a decimal and needs to be converted to Weird Binary.  The second parameter will be in the range to fit within a 15-bit Weird Binary number, which represents the decimal number range -10922 to 21845, inclusive.\n\n#Output\n\nFor each conversion problem, return the type of problem, its input string, and the converted result in the format shown below, replicating even the spacing exactly as shown. Leading zeroes are not allowed.\n\nreturn format: `'From {binary || decimal}: {non-converted value} is {converted value}'`\n\n#Sample Input\n\n    skrzat('b', '1001101')\n    skrzat('b', '0111111')\n    skrzat('b', '101001000100001')\n    skrzat('b', '010010001000010')\n    skrzat('b', '100110100110100')\n    skrzat('d', -137)\n    skrzat('d', 137)\n    skrzat('d', 8191)\n    skrzat('d', -10000)\n    skrzat('d', 21000)\n\n#Sample Output\n\n    'From binary: 1001101 is 61'\n    'From binary: 0111111 is -21'\n    'From binary: 101001000100001 is 19937'\n    'From binary: 010010001000010 is -7106'\n    'From binary: 100110100110100 is 15604'\n    'From decimal: -137 is 10001011'\n    'From decimal: 137 is 110011001'\n    'From decimal: 8191 is 110000000000011'\n    'From decimal: -10000 is 10100100110000'\n    'From decimal: 21000 is 101011000011000'\n\n Examples: \n",
  "1767": "Problem: \n### **[Mahjong Series](/collections/mahjong)**\n\n**Mahjong** is based on draw-and-discard card games that were popular in 18th and 19th century China and some are still popular today.\n\nIn each deck, there are three different suits numbered `1` to `9`, which are called **Simple tiles**. To simplify the problem, we talk about only one suit of *simple tiles* in this kata (and that's what the term **Pure Hand** means). Note that there are **EXACTLY** 4 identical copies of each kind of tiles in a deck.\n\nIn each of Mahjong games, each of the 4 players around the table has 13 tiles. They take turns drawing a tile from the tile walls and then discarding one of the tiles from their hands. One wins the game if that player holds a combination of tiles as defined below:\n\nA regular winning hand consists of 4 *Melds* and 1 *Pair*. Each *meld* of tiles can be 3 identical or consecutive tiles of a suit, *e.g.* `222` or `456`.\n\n\n\n![t2](https://upload.wikimedia.org/wikipedia/commons/6/61/MJt2.png)\n![t2](https://upload.wikimedia.org/wikipedia/commons/6/61/MJt2.png)\n![t2](https://upload.wikimedia.org/wikipedia/commons/6/61/MJt2.png)\n\n\n![t4](https://upload.wikimedia.org/wikipedia/commons/7/72/MJt4.png)\n![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)\n![t6](https://upload.wikimedia.org/wikipedia/commons/7/72/MJt6.png)\n\n\nNow let's consider a hand of `1113335557779`.\n\n\n\n![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t9](https://upload.wikimedia.org/wikipedia/commons/a/a1/MJt9.png)\n\n\nIn this hand, there are already 4 *melds* (each of 3 identical tiles), leaving a `9` alone. So we need another `9` to form a *pair*.\n\n\n\n\n![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)\n\n\n![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)\n\n\n![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)\n\n\n![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)\n\n\n![t9](https://upload.wikimedia.org/wikipedia/commons/a/a1/MJt9.png)![t9](https://upload.wikimedia.org/wikipedia/commons/a/a1/MJt9.png)\n\n\nAdditionally, there is another option. Regardless of the 3 *melds* ahead (`111`, `333`, `555`), drawing an `8` produces `77789`, which gives a *pair* of `7`'s and a *meld* (`789`). Therefore, the required tiles to win with `1113335557779` are `8` and `9`.\n\n\n\n\n![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)![t1](https://upload.wikimedia.org/wikipedia/commons/4/4a/MJt1.png)\n\n\n![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)![t3](https://upload.wikimedia.org/wikipedia/commons/a/a4/MJt3.png)\n\n\n![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)![t5](https://upload.wikimedia.org/wikipedia/commons/5/5c/MJt5.png)\n\n\n![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)\n\n\n![t7](https://upload.wikimedia.org/wikipedia/commons/6/6f/MJt7.png)![t8](https://upload.wikimedia.org/wikipedia/commons/1/18/MJt8.png)![t9](https://upload.wikimedia.org/wikipedia/commons/a/a1/MJt9.png)\n\n\nNow Sakura wonders which tiles will form a hand with 13 tiles of the same suit (**Pure Hand**). Can you help her?\n\n### **Task**\nComplete a function to work out all the optional tiles to form a regular winning hand with the given tiles.\n\n- **Input**\n  - A string of 13 non-zero digits in non-decreasing order, denoting different tiles of a suit.\n\n\n- **Output**\n  - A string of unique non-zero digits in ascending order.\n\n### **Examples**\n\n```\n\"1335556789999\" => \"\"\n  (None of the tiles in a deck makes up a winning hand)\n\"1113335557779\" => \"89\"\n  (\"8\" => \"111 333 555 77 789\",\n   \"9\" => \"111 333 555 777 99\")\n\"1223334455678\" => \"258\"\n  (\"2\" => \"123 22 345 345 678\",\n   \"5\" => \"123 234 345 55 678\",\n   \"8\" => \"123 234 345 678 88\")\n```\n\n Examples: \n",
  "1768": "Problem: \npre.handle{\n      height: 2em;\n      width: 4em;\n      margin: auto;\n      margin-bottom: 0 !important;\n      background: none !important;\n      \n      border-radius: 0.5em 0.5em 0 0; \n      border-top: 5px solid saddlebrown;\n      border-left: 5px solid saddlebrown;\n      border-right: 5px solid saddlebrown;\n  }\n\n  table.example-piece{\n      width: fit-content;\n      height: fit-content;\n      \n      margin: auto;\n  }\n\n  pre.piece{\n      font-size: 1.75em;\n      line-height: 1.4;\n      letter-spacing: 0.1em;\n      \n      background: none !important;\n  }\n\n  pre.bag{\n      border-radius: 0.5em; \n      border:5px solid saddlebrown; \n      width: fit-content; \n      background: burlywood;\n      \n      font-size: 1.75em;\n      line-height: 1.4;\n      letter-spacing: 0.1em;\n      color: white;\n      text-align: center;\n      \n      margin: auto;\n      padding: 0.2em;\n      \n  }\n  \n  pre b{\n      padding: 0.1em;  \n  }\n  \n  .a{ background: darkolivegreen; }\n  .b{ background: seagreen;}\n  .c{ background: limegreen; }\n  .d{ background: darkgreen; }\n\n\n# On a business trip, again...\n\nI love traveling, just like everyone else. If only they were not business trips... They force me to go to places I don't want to go and listen to people that I don't care about. But, by far, the thing I hate the most is **packing my bag**.\n\nThe thing is, I can only carry one bag in the plane and I **NEED** to bring some important items. Every item is numbered and has a specific shape. Here is an example of a well-sorted bag:\n\n\n\n11112233\n14444233\n14442223\n\n\n\nWill I be able to fit all the items I need in the bag?\n\n# Your task\n\nWrite a funtion `fit_bag(height: int, width: int, items: List[List[List[int]]]) -> List[List[int]]` that takes a bag height and width and a list of items and returns a bag with all the items in a correct place.\n\n\nThe pieces will be given as a square bidimensional array that represents items as follows:\n\n\n\n\n1111\n1\n1\n\n\n \u2192 \n\n\n[\n  [1, 1, 1, 1],\n  [1, 0, 0, 0],\n  [1, 0, 0, 0]\n]\n\n\n\n\n4444\n444\n\n\n \u2192 \n\n\n[\n  [4, 4, 4, 4],\n  [4, 4, 4, 0],\n]\n\n\n\n\nAnd, as you may have guessed, the output is represented the same way as the pieces, but it will contain the numbers of all the pieces and zeroes in the case of empty spaces. The thing is, **you cannot rotate the pieces nor flip them**.\n\n\n\n\n4444\n444\n\n\n \u2192 \n\n\n4\n44\n44\n44\n\n\n \u2716 \n\n\n\n\n**Technical notes:**\n* Items will only contain zeroes (for empty spaces) and another number that identifies the item.\n* Items will not have rows or columns of zeros at the borders. If an item's matrix is of size *n*x*m*, this means the object has a bounding box of *n*x*m*.\n* There will be no two items with the same number.\n* There will never be more than 9 items.\n* Items do not necessarily have to be one connected component.\n* The only condition for your solution to be valid is that there has to be at least one instance of each requested item. There can be empty spaces (represented by zeroes) or repeated items.\n* Every test case **is solvable**.\n\n# Preloaded code\n\nYou are given two functions for debugging purposes:\n\n* `only_show_wrong()`: disable the bag print of the test cases that you solved successfully. Use this only once at the beginning or your code.\n* `print_bag(bag)`: this function prints a bag in a human-readable format for debugging purposes. It is done by default in every test case unless it is disabled.\n\n# Tests\n\nHere are the tests that will be done:\n* **Fixed tests (respectively):** bags of sizes 3x8, 3x6, 3x5, 3x7, 3x8 and 5x9. Six tests of each with 4 to 8 items.\n* **Random tests:** 300 5x9 bags tests with 7 to 9 items.\n\n Examples: \n",
  "1769": "Problem: \nThe professional Russian, Dmitri, from the popular youtube channel FPSRussia has hired you to help him move his arms cache between locations without detection by the authorities.  Your job is to write a Shortest Path First (SPF) algorithm that will provide a route with the shortest possible travel time between waypoints, which will minimize the chances of detection.  One exception is that you can't travel through the same waypoint twice.  Once you've been seen there is a higher chance of detection if you travel through that waypoint a second time.\n\nYour function shortestPath will take three inputs, a topology/map of the environment, along with a starting point, and an ending point.  The topology will be a dictionary with the keys being the different waypoints.  The values of each entry will be another dictionary with the keys being the adjacent waypoints, and the values being the time it takes to travel to that waypoint.\n\nTake the following topology as an example:\n\n     topology = {'a' : {'b': 10, 'c': 20},\n                 'b' : {'a': 10, 'c': 20},\n                 'c' : {'a': 10, 'b': 20} }\n\nIn this example, waypoint 'a' has two adjacent waypoints, 'b' and 'c'.  And the time it takes to travel from 'a' to 'b' is 10 minutes, and from 'a' to 'c' is 20 minutes.  It's important to note that the time between these waypoints is one way travel time and can be different in opposite directions.  This is highlighted in the example above where a->c takes 20 minutes, but c->a takes 10 minutes.\n\nThe starting and ending points will passed to your function as single character strings such as 'a' or 'b', which will match a key in your topology.\n\nThe return value should be in the form of a list of lists of waypoints that make up the shortest travel time.  If there multiple paths that have equal travel time, then you should choose the path with the least number of waypoints.  If there are still multiple paths with equal travel time and number of waypoints, then you should return a list of lists with the multiple options. For multiple solutions, the list of paths should be sorted in lexicographic (alphabetical) order. If there is only one shortest path, you should still return a list of that list.\n\nHere are a few examples:\n    #Topology\n    #      b--d--g   \n    #     /   |   \\  \n    #    /    |    \\ \n    #   a-----e     h\n    #    \\     \\   / \n    #     \\     \\ /  \n    #      c-----f  \n    topology = {'a' : {'b': 10, 'c': 20, 'e':20},\n                'b' : {'a': 10, 'd': 20},\n                'c' : {'a': 10, 'f': 20},\n                'd' : {'b': 10, 'e': 20, 'g': 20},\n                'e' : {'a': 10, 'd': 20, 'f': 20},                      \n                'f' : {'c': 10, 'e': 20, 'h': 20},\n                'g' : {'d': 10, 'h': 20},\n                'h' : {'g': 10, 'f': 20},\n    }\n    \n    Two solutions with a time of 40:\n    shortestPath(topology, 'a', 'f') == [['a', 'c', 'f'], ['a', 'e', 'f']] \n     \n    One solution with a time of 20:\n    shortestPath(topology, 'a', 'e') == [['a', 'e']]\n\n Examples: \n",
  "1770": "Problem: \n## Task\n\nYou are at position `[0, 0]` in maze NxN and you can **only** move in one of the four cardinal directions (i.e. North, East, South, West). Return the minimal number of steps to exit position `[N-1, N-1]` *if* it is possible to reach the exit from the starting position.  Otherwise, return `false` in **JavaScript**/**Python** and `-1` in **C++**/**C#**/**Java**.\n\nEmpty positions are marked `.`.  Walls are marked `W`.  Start and exit positions are guaranteed to be empty in all test cases.\n\n## Path Finder Series:\n\n-       [#1: can you reach the exit?](https://www.codewars.com/kata/5765870e190b1472ec0022a2)\n-       [#2: shortest path](https://www.codewars.com/kata/57658bfa28ed87ecfa00058a)\n-       [#3: the Alpinist](https://www.codewars.com/kata/576986639772456f6f00030c)\n-       [#4: where are you?](https://www.codewars.com/kata/5a0573c446d8435b8e00009f)\n-       [#5: there's someone here](https://www.codewars.com/kata/5a05969cba2a14e541000129)\n\n Examples: \n",
  "1771": "Problem: \nGiven a set of integers _S_, the _closure of S under multiplication_ is the smallest set that contains _S_ and such that for any _x, y_ in the closure of _S_, the product _x * y_ is also in the closure of _S_. \n\nExample 1: Given `S = {2}`, the closure of `S` is the set `{2, 4, 8, 16, 32, 64, ... }`.\n\nExample 2: Given `S = {1, 2, 3}`, the closure of `S` is the set `{1, 2, 3, 4, 6, 8, 9, 12, 16, 18, 24, 27, 32, 36, ...}`. This set contains, e.g, `6` because `6 = 2 * 3`. It further contains `12` and `18` because `12 = 2 * 6` and `18 = 3 * 6`. Etc. \n\nExample 3: Given `S` the set of prime numbers, the closure of `S` is the set of all positive integers greater than or equal to `2`. \n\nYour task is two write a generator function that generates the members of the closure of any given _finite_ set of positive numbers `S` in _ascending order_.\n\n Examples: \n",
  "1772": "Problem: \nThe Vigen\u00e8re cipher is a classic cipher originally developed by Italian cryptographer Giovan Battista Bellaso and published in 1553. It is named after a later French cryptographer Blaise de Vigen\u00e8re, who had developed a stronger autokey cipher (a cipher that incorporates the message of the text into the key). \n\nThe cipher is easy to understand and implement, but survived three centuries of attempts to break it, earning it the nickname \"le chiffre ind\u00e9chiffrable\" or \"the indecipherable cipher.\"\n\n[From Wikipedia](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher):\n\n> The Vigen\u00e8re cipher is a method of encrypting alphabetic text by using a series of different Caesar ciphers based on the letters of a keyword. It is a simple form of polyalphabetic substitution.\n>\n> . . .\n>\n> In a Caesar cipher, each letter of the alphabet is shifted along some number of places; for example, in a Caesar cipher of shift `3`, `A` would become `D`, `B` would become `E`, `Y` would become `B` and so on. The Vigen\u00e8re cipher consists of several Caesar ciphers in sequence with different shift values.\n\nAssume the key is repeated for the length of the text, character by character. Note that some implementations repeat the key over characters only if they are part of the alphabet -- **this is not the case here.**\n\nThe shift is derived by applying a Caesar shift to a character with the corresponding index of the key in the alphabet.\n\nVisual representation:\nWrite a class that, when given a key and an alphabet, can be used to encode and decode from the cipher.\n\n## Example\nAny character not in the alphabet must be left as is. For example (following from above):\n\n Examples: \n",
  "1773": "Problem: \n### Sudoku Background\n\nSudoku is a game played on a 9x9 grid. The goal of the game is to fill all cells of the grid with digits from 1 to 9, so that each column, each row, and each of the nine 3x3 sub-grids (also known as blocks) contain all of the digits from 1 to 9. \n(More info at: http://en.wikipedia.org/wiki/Sudoku)\n\n### Sudoku Solution Validator\n\nWrite a function `validSolution`/`ValidateSolution`/`valid_solution()` that accepts a 2D array representing a Sudoku board, and returns true if it is a valid solution, or false otherwise. The cells of the sudoku board may also contain 0's, which will represent empty cells. Boards containing one or more zeroes are considered to be invalid solutions.\n\nThe board is always 9 cells by 9 cells, and every cell only contains integers from 0 to 9.\n \n\n### Examples\n\n```\nvalidSolution([\n  [5, 3, 4, 6, 7, 8, 9, 1, 2],\n  [6, 7, 2, 1, 9, 5, 3, 4, 8],\n  [1, 9, 8, 3, 4, 2, 5, 6, 7],\n  [8, 5, 9, 7, 6, 1, 4, 2, 3],\n  [4, 2, 6, 8, 5, 3, 7, 9, 1],\n  [7, 1, 3, 9, 2, 4, 8, 5, 6],\n  [9, 6, 1, 5, 3, 7, 2, 8, 4],\n  [2, 8, 7, 4, 1, 9, 6, 3, 5],\n  [3, 4, 5, 2, 8, 6, 1, 7, 9]\n]); // => true\n```\n\n```\nvalidSolution([\n  [5, 3, 4, 6, 7, 8, 9, 1, 2], \n  [6, 7, 2, 1, 9, 0, 3, 4, 8],\n  [1, 0, 0, 3, 4, 2, 5, 6, 0],\n  [8, 5, 9, 7, 6, 1, 0, 2, 0],\n  [4, 2, 6, 8, 5, 3, 7, 9, 1],\n  [7, 1, 3, 9, 2, 4, 8, 5, 6],\n  [9, 0, 1, 5, 3, 7, 2, 1, 4],\n  [2, 8, 7, 4, 1, 9, 6, 3, 5],\n  [3, 0, 0, 4, 8, 1, 1, 7, 9]\n]); // => false\n```\n\n Examples: \n",
  "1775": "Problem: \ntable {\n        width: 236px;\n    }\n\n    table, tr, td {\n        border: 0px;\n    }\n\nIn a grid of 4 by 4 squares you want to place a skyscraper in each square with only some clues:\n\nThe height of the skyscrapers is between 1 and 4\nNo two skyscrapers in a row or column may have the same number of floors\nA clue is the number of skyscrapers that you can see in a row or column from the outside\nHigher skyscrapers block the view of lower skyscrapers located behind them\n\n\nCan you write a program that can solve this puzzle?\n\n\nExample:\n\n\nTo understand how the puzzle works, this is an example of a row with 2 clues. Seen from the left side there are 4 buildings visible while seen from the right side only 1:\n\n\n\n\n\u00a04\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a01\n\n\n\nThere is only one way in which the skyscrapers can be placed. From left-to-right all four buildings must be visible and no building may hide behind another building:\n\n\n\n\n\u00a04\n\u00a01\n\u00a02\n\u00a03\n\u00a04\n\u00a01\n\n\n\nExample of a 4 by 4 puzzle with the solution:\n\n\n\n\n\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\n\u00a01\n\u00a02\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a02\n\n\n\u00a01\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a03\n\u00a0\u00a0\n\u00a0\u00a0\n\n\n\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a01\n\u00a02\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a02\n\u00a01\n\u00a04\n\u00a03\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a03\n\u00a04\n\u00a01\n\u00a02\n\u00a02\n\n\n\u00a01\n\u00a04\n\u00a02\n\u00a03\n\u00a01\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a01\n\u00a03\n\u00a02\n\u00a04\n\u00a0\u00a0\n\n\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a0\u00a0\n\u00a03\n\u00a0\u00a0\n\u00a0\u00a0\n\n\n\nTask:\n\n\n\nFinish:\n\n Examples: \n",
  "1776": "Problem: \nStacey is a big [AD&D](https://en.wikipedia.org/wiki/Dungeons_%26_Dragons) games nerd. Moreover, she's a munchkin. Not a [cat breed](https://en.wikipedia.org/wiki/Munchkin_cat), but a person who likes to get maximum efficiency of their character.\n\nAs you might know, many aspects of such games are modelled by rolling dice and checking it against a threshold value determined by various aspects.\nStacey wants to always control the situation and know whether she can beat the foe with certain special ability or not. Unfortunately she doesn't know probabilty theory well enough. Help Stacey by providing a calculating utility for her.\n\nP.S.: Stacey says that she has tried to implement a calculator by Monte-Carlo modelling: calling rand() in a loop, but she hasn't been satisfied with precision of this method.\n\n### Examples\n\n`P(1d6 >= 4)` means the chance of getting 4 points or higher on a regular cubic die. Obviously the chance is `3/6` cause there're 6 possibilities in total (1, 2, 3, 4, 5, 6) and only three of them are >= 4: (4, 5, 6)\n\n`P(2d6 >= 3)` gives us `35/36`, cause the only possibility to get < 3 is rolling exactly 1+1.\nExactly 2 as sum of two dice appears only if both have 1. While total amount of different outcomes is 6\\*6 = 36. Hence resulting probability is 1-1/36, which is 35/36\n\n### Your task\n\nis to write a function, which will calculate the probability of that a die with `N` sides rolled `M` times (`MdN` in AD&D notation) will get at least `T` points. We don't add modifiers cause they are already incorporated into the threshold.\n\nInput arguments will be valid integers with the following limits:\n\n- `rolls` 1..20\n- `sides` 2..100\n- `threshold` 1..2000\n\n Examples: \n",
  "1778": "Problem: \n[The Vigen\u00e8re cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher) is a classic cipher that was thought to be \"unbreakable\" for three centuries. We now know that this is not so and it can actually be broken pretty easily.\n\n**How the Vigen\u00e8re cipher works**:\n\nThe basic concept is that you have a `message` and a `key`, and each character in the `message` is encrypted using a character in the `key`, by applying a Caesar shift. The key is recycled as many times as needed.\n\nYou might want to try [this kata](https://www.codewars.com/kata/vigenere-cipher-helper) first, which focuses on the encryption and decryption processes.\n\n\n## Well how do we break it?\n\nThe first thing we have to do is determine the **length of the key** that was used to encrypt the message.\n\nWrite a function that takes some cipher text and a maximum possible key length and returns the length of the key that was used in the encryption process.\n\n**Note:** We don't care about what characters are in the key -- only how many of them there are.\n\n---\n\nAny feedback (and suggestions) would be much appreciated\n\n*This kata is based on one of the programming assignments in [Prof. Jonathan Katz's course on cryptography](https://www.coursera.org/course/cryptography) given on Coursera*\n\n Examples: \n",
  "1779": "Problem: \nWrite a function which makes a list of strings representing all of the ways you can balance `n` pairs of parentheses\n\n### Examples\n\n```python\nbalanced_parens(0) => [\"\"]\nbalanced_parens(1) => [\"()\"]\nbalanced_parens(2) => [\"()()\",\"(())\"]\nbalanced_parens(3) => [\"()()()\",\"(())()\",\"()(())\",\"(()())\",\"((()))\"]\n```\n\n Examples: \n",
  "1780": "Problem: \nFrom wikipedia  \n\nIn number theory and combinatorics, a partition of a positive integer n, also called an integer partition, \nis a way of writing n as a sum of positive integers. \nTwo sums that differ only in the order of their summands are considered the **same** partition.\n\nFor example, 4 can be partitioned in five distinct ways:\n\n`4, 3 + 1, 2 + 2, 2 + 1 + 1, 1 + 1 + 1 + 1`.\n\nWe can write:\n\n`enum(4) -> [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]]` and\n\n`enum(5) -> [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]]`.\n\nThe number of parts in a partition grows very fast.\nFor n = 50 number of parts is `204226`, for 80 it is `15,796,476`\nIt would be too long to tests answers with arrays of such size. So our task is the following:\n\n1 - n being given (n integer, 1 <= n <= 50) calculate enum(n) ie the partition of n.\nWe will obtain something like that:  \n`enum(n) -> [[n],[n-1,1],[n-2,2],...,[1,1,...,1]]` (order of array and sub-arrays\ndoesn't matter). This part is not tested.\n\n2 - For each sub-array of enum(n) calculate its product. \nIf n = 5 we'll obtain **after removing duplicates and sorting**:\n\n`prod(5) -> [1,2,3,4,5,6]`\n\n`prod(8) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18]`\n\nIf n = 40 prod(n) has a length of `2699` hence the tests will not verify such arrays.\nInstead our task number 3 is:\n\n3 - return the range, the average and the median of prod(n) in the following form \n(example for n = 5):\n\n`\"Range: 5 Average: 3.50 Median: 3.50\"`\n\nRange is an integer, Average and Median are float numbers rounded to two decimal \nplaces (\".2f\" in some languages).\n\n#Notes:\n`Range` : difference between the highest and lowest values. \n\n`Mean or Average` : To calculate mean, add together all of the numbers \nin a set and then divide the sum by the total count of numbers.\n\n`Median` : The median is the number separating the higher half \nof a data sample from the lower half. \n(https://en.wikipedia.org/wiki/Median)\n\n#Hints:\nTry to optimize your program to avoid timing out.\n\nMemoization can be helpful but it is not mandatory for being successful.\n\n Examples: \n",
  "1781": "Problem: \n## Description\n\nBeggar Thy Neighbour is a card game taught to me by my parents when I was a small child, and is a game I like to play with my young kids today.\n\nIn this kata you will be given two player hands to be played.  And must return the index of the player who will win.\n\n## Rules of the game\n\n- Special cards are: Jacks, Queens, Kings and Aces\n- The object of the game is to win all the cards.\n- Any player that cannot play a card is out of the game.\n\nTo start:\n\n- The 52 cards in a standard deck are shuffled.\n- The cards are dealt equally between all players.\n\nTo play:\n\n- The first player turns over and plays the top card from their hand into a common pile.\n- If the card is not special - then the second player plays their next card onto the pile, and play continues back to the first player.\n- If the card is a Jack, Queen, King or Ace, the other player must play 1, 2, 3 or 4 penalty cards respectively.\n- If no special cards are played during a penalty, then the player that played the special card, takes the common pile.\n- If a special card is played during a penalty, then the penalty moves back to the previous player immediately with the size of the new penalty defined by the new special card.  It is possible for this process to repeat several times in one play.  Whoever played the last special card, wins the common pile.\n- The winner of the common pile, places it on the bottom of their hand, and then starts the next common pile.\n\nIt is theorised that an initial deal may never end, though so far all of my games have ended!  For that reason, if 10,000 cards are played and no one has won, return `None`.\n\n## Card Encoding\n\nCards are represented with a two character code.  The first characater will be one of A23456789TJQK representing Ace, 2 though 9, Ten, Jack, Queen, King respectively.  The second character is the suit, 'S', 'H', 'C', or 'D' representing Spades, Hearts, Clubs and Diamonds respectively.  \n\nFor example a hand of `[\"TD\", \"AC\", \"5H\"]` would represent 10 of Diamonds, Ace of Clubs, and 5 of hearts.\n\n## Mini Example Game\n\nGiven the following hands:\n\n`Player 1: [9C, JC, 2H, QC], Player 2: [TD, JH, 6H, 9S]`\n\nPlay would flow as follows:\n\n```\nStart   - P1: [9C, JC, 2H, QC],   P2: [TD, JH, 6H, 9S],           Common: []\nTurn  1 - P1: [JC, 2H, QC],       P2: [TD, JH, 6H, 9S],           Common: [9C]\nTurn  2 - P1: [JC, 2H, QC],       P2: [JH, 6H, 9S],               Common: [9C, TD]\nTurn  3 - P1: [2H, QC],           P2: [JH, 6H, 9S],               Common: [9C, TD, JC]\n```\nPlayer 1 plays a Jack, player 2 pays 1 penalty\n```\nTurn  4 - P1: [2H, QC],           P2: [6H, 9S],                   Common: [9C, TD, JC, JH]\n```\nPlayer 2 plays a Jack, player 1 pays 1 penalty\n```\nTurn  5 - P1: [QC],               P2: [6H, 9S],                   Common: [9C, TD, JC, JH, 2H]\n```\nPlayer 2 wins the common pool and starts the next game\n```\nTurn  6 - P1: [QC],               P2: [9S, 9C, TD, JC, JH, 2H],   Common: [6H]\nTurn  7 - P1: [],                 P2: [9S, 9C, TD, JC, JH, 2H],   Common: [6H, QC]\n```\nPlayer 1 plays a Queen, player 2 pays 2 penalties\n```\nTurn  8 - P1: [],                 P2: [9C, TD, JC, JH, 2H],       Common: [6H, QC, 9S]\nTurn  9 - P1: [],                 P2: [TD, JC, JH, 2H],           Common: [6H, QC, 9S, 9C]\n```\nPlayer 1 wins the common pool and starts the next game\n```\nTurn 10 - P1: [QC, 9S, 9C],       P2: [TD, JC, JH, 2H],           Common: [6H]\n\n```\nAnd so on... with player 2 eventually winning.\n\n\nGood luck!\n\n Examples: \n",
  "1782": "Problem: \nThe Challenge\n-------------\nYou'll need to implement a simple lexer type. It should take in an input string through the constructor (or the parameter, for Javascript), and break it up into typed-tokens (in python, C# and Java, you'll have to manage `null/None` input too, resulting in the same behavior than an empty string). You'll need to implement the necessary methods (aaccording to your language) to make the Simplexer object behave like an iterator, Meaning that it returns a token (assuming one is available) object each time it a `next` (`Current` field in C#) method would be called. If no tokens are available, an exception should be thrown (idealy: `StopIteration` in python, `InvalidOperationException` in C# and `NoSuchElementException` in Java).\n\nTokens are represented by Token objects, which define two properties as strings: `text`, and `type`. Constructor is `Token(text, type)`.\n\n**C# Notes**:\n`Iterator` is an extension of `IEnumerator` with default implementations for `Reset()`, `Dispose()` and `IEnumerator.Current` as these are not need to pass the challenge. You only need to override `MoveNext()` and `Current { get; }`.\n\nToken Types\n-----------\nThere are 7 tokens types that your lexer will need to produce: `identifier`, `string`, `integer`, `boolean`, `keyword`, `operator`, and `whitespace`. To create the token, you'd need to pass in the token value (the text) and the token type as strings, so for example, a simple integer token could be created with `new Token(\"1\", \"integer\")` (Note: no default values or default constructor are provided, so use `new Token(\"\",\"\")` if you want a default Token object).\n\nToken Grammar\n--------------\nHere's a table of the grammars for the various token types:\n```\ninteger : Any sequence of one or more digits.\n\nboolean : true or false.\n\nstring : Any sequence of characters surrounded by \"double quotes\".\n\noperator : The characters +, -, *, /, %, (, ), and =.\n\nkeyword : The following are keywords: if, else, for, while, return, func, and break.\n\nwhitespace : Matches standard whitespace characters (space, newline, tab, etc.)\nConsecutive whitespace characters should be matched together.\n\nidentifier : Any sequence of alphanumber characters, as well as underscore and dollar sign,\nand which doesn't start with a digit. Make sure that keywords aren't matched as identifiers!\n```\n\n Examples: \n",
  "1783": "Problem: \nA famous casino is suddenly faced with a sharp decline of their revenues. They decide to offer Texas hold'em also online. Can you help them by writing an algorithm that can rank poker hands? \n\nTask:\n\nCreate a poker hand that has a constructor that accepts a string containing 5 cards:\n\n```python\nhand = PokerHand(\"KS 2H 5C JD TD\")\n```\n\nThe characteristics of the string of cards are:\n\nA space is used as card seperator\nEach card consists of two characters\nThe first character is the value of the card, valid characters are:\n`2, 3, 4, 5, 6, 7, 8, 9, T(en), J(ack), Q(ueen), K(ing), A(ce)`\nThe second character represents the suit, valid characters are: \n`S(pades), H(earts), D(iamonds), C(lubs)`\n\n\n\nThe poker hands must be sortable by rank, the highest rank first:\n\n```python\nhands = []\nhands.append(PokerHand(\"KS 2H 5C JD TD\"))\nhands.append(PokerHand(\"2C 3C AC 4C 5C\"))\nhands.sort() (or sorted(hands))\n```\n\nApply the Texas Hold'em rules for ranking the cards. \nThere is no ranking for the suits.\nAn ace can either rank high or rank low in a straight or straight flush. Example of a straight with a low ace:\n`\"5C 4D 3C 2S AS\"`\n\n\n\n\nNote:  there are around 25000 random tests, so keep an eye on performances.\n\n Examples: \n",
  "1784": "Problem: \n[Currying and partial application](http://www.2ality.com/2011/09/currying-vs-part-eval.html) are two ways of transforming a function into another function with a generally smaller arity. While they are often confused with each other, they work differently. The goal is to learn to differentiate them.\n\n## Currying\n\n> Is the technique of transforming a function that takes multiple arguments in such a way that it can be called as a chain of functions each with a single argument.\n\nCurrying takes a function:\n\n```\nf: X \u00d7 Y \u2192 R\n```\n\nand turns it into a function:\n\n```\nf': X \u2192 (Y \u2192 R)\n```\n\nInstead of calling `f` with two arguments, we invoke `f'` with the first argument. The result is a function that we then call with the second argument to produce the result. Thus, if the uncurried `f` is invoked as:\n\n```\nf(3, 5)\n```\n\nthen the curried `f'` is invoked as:\n\n`f'(3)(5)`\n\n### Example\n\nGiven this function:\n\n```python\ndef add(x, y, z):\n  return x + y + z\n```\n\nWe can call in a normal way:\n\n```python\nadd(1, 2, 3) # => 6\n```\n\nBut we can create a curried version of `add(a, b, c)`function:\n\n```python\ncurriedAdd = lambda a: (lambda b: (lambda c: add(a,b,c)))\ncurriedAdd(1)(2)(3) # => 6\n```\n\n## Partial application\n\n> Is the process of fixing a number of arguments to a function, producing another function of smaller arity.\n\nPartial application takes a function:\n\n```\nf: X \u00d7 Y \u2192 R\n```\n\nand a fixed value `x` for the first argument to produce a new function\n\n```\nf': Y \u2192 R\n```\n\n`f'` does the same as `f`, but only has to fill in the second parameter which is why its arity is one less than the arity of `f`. One says that the first argument is bound to `x`.\n\n### Example\n\n```python\npartialAdd = lambda a: (lambda *args: add(a,*args))\npartialAdd(1)(2, 3) # => 6\n```\n\n-------------\n\nYour work is to implement a generic `curryPartial()` function allows either currying or partial application.\n\nFor example:\n\n```python\ncurriedAdd = curryPartial(add)\ncurriedAdd(1)(2)(3) # => 6\n\npartialAdd = curryPartial(add, 1)\npartialAdd(2, 3) # => 6\n```\n\nWe want the function be very flexible.\n\nAll these examples should produce the same result:\n\n```python\ncurryPartial(add)(1)(2)(3) # =>6 \ncurryPartial(add, 1)(2)(3) # =>6 \ncurryPartial(add, 1)(2, 3) # =>6 \ncurryPartial(add, 1, 2)(3) # =>6 \ncurryPartial(add, 1, 2, 3) # =>6 \ncurryPartial(add)(1, 2, 3) # =>6 \ncurryPartial(add)(1, 2)(3) # =>6 \ncurryPartial(add)()(1, 2, 3) # =>6 \ncurryPartial(add)()(1)()()(2)(3) # =>6 \n\ncurryPartial(add)()(1)()()(2)(3, 4, 5, 6) # =>6 \ncurryPartial(add, 1)(2, 3, 4, 5) # =>6 \n```\n\nAnd also all of these:\n\n```python\ncurryPartial(curryPartial(curryPartial(add, 1), 2), 3) # =>6\ncurryPartial(curryPartial(add, 1, 2), 3) # =>6\ncurryPartial(curryPartial(add, 1), 2, 3) # =>6\ncurryPartial(curryPartial(add, 1), 2)(3) # =>6\ncurryPartial(curryPartial(add, 1)(2), 3) # =>6\ncurryPartial(curryPartial(curryPartial(add, 1)), 2, 3) # =>6\n```\n\n Examples: \n",
  "1785": "Problem: \nA pixmap shall be turned from black to white, turning all pixels to white in the process.  But for optical reasons this shall *not* happen linearly, starting at the top and continuing line by line to the bottom:\n\n```python\nfor y in range(height):\n  for x in range(width):\n     setBit(x, y)\n```\n\nInstead it shall be done by a systematic dithering routine which selects the coordinates on which pixels are to be set in a precise pattern so that the geometrical distance between two consecutive pixels is large and a specific optical effect results.\n\nThe following diagrams show the order of the coordinates the algorithm shall produce:\n\n2\u00d72:\n```\n1 3\n4 2\n```\n4\u00d74:\n```\n 1  9  3 11\n13  5 15  7\n 4 12  2 10\n16  8 14  6\n```\n8\u00d78:\n```\n 1  33   9  41   3  35  11  43 \n49  17  57  25  51  19  59  27 \n13  45   5  37  15  47   7  39 \n61  29  53  21  63  31  55  23 \n 4  36  12  44   2  34  10  42 \n52  20  60  28  50  18  58  26 \n16  48   8  40  14  46   6  38 \n64  32  56  24  62  30  54  22 \n```\nThe pattern continues like that for each square pixmap with a width and height of a power of two (16, 32, 64, \u2026).\n\nBut the width and the height of the pixmap can be arbitrary positive numbers.  If the pixmap's width and/or height are not a power of two, the coordinates the algorithm  would produce outside of the pixmap are skipped:\n\n3\u00d73:\n```\n1 6 3\n8 5 9\n4 7 2   \n```\n6\u00d75:\n```\n 1 16  6 21  3 18\n25 10 28 13 26 11\n 8 23  5 20  9 24\n29 14 27 12 30 15\n 4 19  7 22  2 17\n```\nWrite an algorithm which produces the coordinates of the dithering for a given width and height.\n\nTo pass the Python test cases, write a *generator* ```dithering()``` which yields coordinate tuples:\n```python\ng = dithering(6, 5)\nfor i in range(7):\n  print g.next()\n```\nWill print:\n```\n(0, 0)\n(4, 4)\n(4, 0)\n(0, 4)\n(2, 2)\n(2, 0)\n(2, 4)\n```\n\n Examples: \n",
  "1787": "Problem: \nYour task is to build a model^(1) which can predict y-coordinate.\nYou can pass tests if predicted y-coordinates are inside error margin.\n\nYou will receive train set which should be used to build a model. \nAfter you build a model tests will call function ```predict``` and pass x to it. \n\nError is going to be calculated with RMSE.\n\n\nSide note: Points in test cases are from different polynomials (up to 5th degree).\n\n\n\nEasier version: Data mining #1\n\n\nBlocked libraries: sklearn, pandas, tensorflow, numpy, scipy\n\nExplanation\n[1] A mining model is created by applying an algorithm to data, but it is more than an algorithm or a metadata container: it is a set of data, statistics, and patterns that can be applied to new data to generate predictions and make inferences about relationships.\n\n Examples: \n",
  "1788": "Problem: \nThis kata explores writing an AI for a two player, turn based game called *NIM*.\n\nThe Board\n--------------\n\nThe board starts out with several piles of straw.  Each pile has a random number of straws.\n\n```\nPile 0: ||||\n\nPile 1: ||\n\nPile 2: |||||\n\nPile 3: |\n\nPile 4: ||||||\n\n...or more concisely: [4,2,5,1,6]\n```\n\nThe Rules\n--------------\n\n- The players take turns picking a pile, and removing any number of straws from the pile they pick\n- A player must pick at least one straw\n- If a player picks the last straw, she wins!\n\nThe Task\n------------\n\nIn this kata, you have to write an AI to play the straw picking game.\n\nYou have to encode an AI in a function `choose_move` (or `chooseMove`, or `choose-move`) that takes a board, represented as a list of positive integers, and returns\n\n```python\n(pile_index, number_of_straws)\n```\n\nWhich refers to an index of a pile on the board, and some none-zero number of straws to draw from that pile.\n\nThe test suite is written so that your AI is expected to play 50 games and win every game it plays.\n\n Examples: \n",
  "1792": "Problem: \n### Please also check out other katas in [Domino Tiling series](https://www.codewars.com/collections/5d19554d13dba80026a74ff5)!\n\n---\n\n# Task\n\nA domino is a rectangular block with `2` units wide and `1` unit high. A domino can be placed on a grid in two ways: horizontal or vertical.\n\n```\n## or #\n      #\n```\n\nYou have infinitely many dominoes, and you want to fill a board that is `N` units wide and `3` units high:\n\n```\n<---   N   --->\n###############\n###############\n###############\n```\n\nThe task is to find **the number of ways** you can fill the given grid with dominoes.\n\n# The Twist\n\nBut you quickly realize that the answer is zero for any odd `N`, because (obviously) you can't cover odd number of cells with dominoes! So you decide to introduce one **unit block** (1 unit wide and 1 unit high) to cover the final gap when needed (you don't need this block when `N` is even).\n\nThe following shows some possible tilings for `N = 5`. Note that, unlike my previous Kata, the numbers do not represent the colors (they are just for convenience). Also note that the unit block (marked as 'X') can be placed **anywhere on the board**, making the answers for odd numbers way higher than even ones.\n\n```\n11255   1122X   14456\n3X267   33447   13356\n34467   55667   22X77\n```\n\nSince the answer will be very large, please give your answer **modulo 12345787**.\n\n# Examples\n\n```python\n# Even input\nthree_by_n(2) == 3\nthree_by_n(4) == 11\nthree_by_n(10) == 571\nthree_by_n(20) == 413403\n\n# Odd input (the numbers grow much faster than even inputs)\nthree_by_n(1) == 2\nthree_by_n(3) == 18\nthree_by_n(5) == 106\nthree_by_n(11) == 11542\nthree_by_n(21) == 3287999\n\n# You must handle big values\nthree_by_n(9999) == 6311027\nthree_by_n(10000) == 12003229\n```\n\n# Constraints\n\n`1 <= N <= 10000`\n\nAll inputs are valid integers.\n\n Examples: \n",
  "1794": "Problem: \nAlice, Samantha, and Patricia are relaxing on the porch, when Alice suddenly says: _\"I'm thinking of two numbers, both greater than or equal to 2. I shall tell Samantha the sum of the two numbers and Patricia the product of the two numbers.\"_ \n\nShe takes Samantha aside and whispers in her ear the sum so that Patricia cannot hear it. Then she takes Patricia aside and whispers in her ear the product so that Samantha cannot hear it.\n\nAfter a moment of reflection, Samantha says:\n\n **Statement 1:** _\"Patricia cannot know what the two numbers are.\"_\n\nAfter which Patricia says:\n\n **Statement 2:**  _\"In that case, I do know what the two numbers are.\"_\n\nTo which Samantha replies:\n\n **Statement 3:**  _\"Then I too know what the two numbers are.\"_\n\nYour first task is to write a function `statement1(s)` that takes an `int` argument `s` and returns `True` if and only if Samantha could have made statement 1 if given the number `s`. You may assume that `s` is the sum of two numbers both greater than or equal to 2.  \n\nYour second task is to write a function `statement2(p)` that takes an `int` argument `p` and returns `True` if and only if Patricia, when given the number `p`, could have made statement 2 after hearing Samantha make statement 1. You may assume that `p` is the product of two numbers both greater than or equal to 2 and that Patricia would not have been able to determine the two numbers by looking at `p` alone.\n\nYour third task is to write a function `statement3(s)` that takes an `int` argument `s` and returns `True` if and only if Samantha, when given the number `s`, could have made statement 3 after hearing Patricia make statement 2.\n\nFinally, it is to you to figure out what two numbers Alice was thinking of. Since there are multiple solutions, you must write a function `is_solution(a, b)` that returns `True` if and only if `a` and `b` could have been two numbers that Alice was thinking of.\n\nHint: To get you started, think of what Samantha's first statement implies. Samantha knows that Patricia was not given the product of two primes. That means that the sum that Samantha was given cannot be written as the sum of two primes. Goldbach's conjecture stipulates that every even number greater than 3 can be written as the sum of two primes. Although Goldbach's conjecture has not yet been proven, you may assume that it has been verified for all numbers involved in the test cases here. So we know that the sum that Samantha was given must be odd. The only way to write an odd number as the sum of two primes is when one of the primes is 2, the only even prime. This means that the number given to Samantha is not the sum of 2 and a prime.\n\n Examples: \n",
  "1795": "Problem: \nThis is a classic needing (almost) no further introduction.\n\nGiven a N x N chess board, place N queens on it so none can attack another: I.e. no other queens can be found horizontally, vertically or diagonally to the current.\n\nOn the board below, no further queens can be positioned.\n\n+-+-+\n|Q| |\n+-+-+\n| | |\n+-+-+\n\nIn this example a queen can be located in position a or position b - but not in both, thereby making (0,0) an invalid first position:\n+-+-+-+\n|Q| | |\n+-+-+-+\n| | |a|\n+-+-+-+\n| |b| |\n+-+-+-+\n\n\nReturn value must by an array of N x-positions. That is, the y position is given by the index. For following board, expected answer is `[1, 3, 0, 2]`:\n\n+-+-+-+-+\n| |X| | |    x=1, y=0\n+-+-+-+-+\n| | | |X|    x=3, y=1\n+-+-+-+-+\n|X| | | |    x=0, y=2\n+-+-+-+-+\n| | |X| |    x=2, y=3\n+-+-+-+-+\n\nOnly one solution per N is expected. If no solution can be found, return an empty array. That is, for a 1 x 1 board, the output is [0].\n\nInput is a value positive number (N>0) and can be quite large, so try to make your solution efficient. See sample tests to check how large `N` can be.\n\nHave fun :)\n\n----\nNext steps:\n - [N queens puzzle (with one mandatory queen position)](https://www.codewars.com/kata/561bed6a31daa8df7400000e)\n - [N queens problem (with one mandatory queen position) - challenge version](https://www.codewars.com/kata/5985ea20695be6079e000003)\n\n Examples: \n",
  "1796": "Problem: \nConstruct a function that, when given a string containing an expression in infix notation, will return an identical expression in postfix notation.\n\nThe operators used will be `+`, `-`, `*`, `/`, and `^` with standard precedence rules and left-associativity of all operators but `^`.\n\nThe operands will be single-digit integers between 0 and 9, inclusive.\n\nParentheses may be included in the input, and are guaranteed to be in correct pairs.\n\n```javascript \ntoPostfix(\"2+7*5\"); // Should return \"275*+\"\ntoPostfix(\"3*3/(7+1)\"); // Should return \"33*71+/\"\ntoPostfix(\"5+(6-2)*9+3^(7-1)\"); // Should return \"562-9*+371-^+\"\n```\n```python\nto_postfix(\"2+7*5\") # Should return \"275*+\"\nto_postfix(\"3*3/(7+1)\") # Should return \"33*71+/\"\nto_postfix(\"5+(6-2)*9+3^(7-1)\") # Should return \"562-9*+371-^+\"\n```\n\nYou may read more about postfix notation, also called Reverse Polish notation, here:\nhttp://en.wikipedia.org/wiki/Reverse_Polish_notation\n\n Examples: \n",
  "1797": "Problem: \nA *[Hamming number][1]* is a positive integer of the form 2*i*3*j*5*k*, for some non-negative integers *i*, *j*, and *k*.\n\nWrite a function that computes the *n*th smallest Hamming number. \n\nSpecifically:\n\n  - The first smallest Hamming number is 1 = 2^(0)3^(0)5^(0)\n  - The second smallest Hamming number is 2 = 2^(1)3^(0)5^(0)\n  - The third smallest Hamming number is 3 = 2^(0)3^(1)5^(0)\n  - The fourth smallest Hamming number is 4 = 2^(2)3^(0)5^(0)\n  - The fifth smallest Hamming number is 5 = 2^(0)3^(0)5^(1)\n\nThe 20 smallest Hamming numbers are given in example test fixture.\n\nYour code should be able to compute all of the smallest 5,000 (Clojure: 2000, NASM: 13282) Hamming numbers without timing out.\n\n[1]:https://en.wikipedia.org/wiki/Regular_number\n\n Examples: \n",
  "1799": "Problem: \nBased on the well known ['Eight Queens' problem](https://en.wikipedia.org/wiki/Eight_queens_puzzle).\n\n#### Summary\nYour challenge is to place N queens on a chess board such that none of the queens are attacking each other.\n\n#### Details\nA standard 8x8 chess board has its rows (aka ranks) labelled 1-8 from bottom to top, and its columns (aka files) labelled a-h from left to right. Any square can be denoted by a combination of letter and number. For example, the top left square is a8. A queen may attack any square on its rank or file. It may also attack any square diagonally.\n\nIn this kata, chessboard may have any size from 1 to 10. Columns are marked with letters a-j, and rows with single digit from 1 to 0 (first row is marked with 1, ninth row is marked with 9, and tenth row is marked with 0, so `a1` denotes bottom left field of the chessboard, and `j0` - top right field on a 10x10 board).\n\nYou will be given the position of one queen on the board (e.g. `'c3'`). Your challenge is to compute the position of the remaining queens and return the full solution (including the original input) as a comma-separated string (e.g. `'d8,a7,e6,h5,b4,g3,c2,f1'`). Fields do not have to be sorted in any particular way, but you have to adhere to above format (lowercase letters, no spaces, fields separated with commas).\n\nNote that there may be multiple valid solutions for a given starting position. Your function only needs to produce (any) one of these. All given starting positions produce valid solutions.\n\nIf you wish to write more tests, the validity of a solution may be checked using preloaded function (see sample tests).\n\nHint: check the wiki article for the various algorithms that are applicable to this problem.\n\n----\nNext steps:\n - [N queens problem (with no mandatory queen position)](https://www.codewars.com/kata/52cdc1b015db27c484000031)\n - [N queens problem (with one mandatory queen position) - challenge version](https://www.codewars.com/kata/5985ea20695be6079e000003)\n\n Examples: \n",
  "1800": "Problem: \nThe prime `149` has 3 permutations which are also primes: `419`, `491` and `941`.\n\nThere are 3 primes below `1000` with three prime permutations:\n```python\n149 ==> 419 ==> 491 ==> 941\n179 ==> 197 ==> 719 ==> 971\n379 ==> 397 ==> 739 ==> 937\n```\n\nBut there are 9 primes below `1000` with two prime permutations:\n```python\n113 ==> 131 ==> 311\n137 ==> 173 ==> 317\n157 ==> 571 ==> 751\n163 ==> 613 ==> 631\n167 ==> 617 ==> 761\n199 ==> 919 ==> 991\n337 ==> 373 ==> 733\n359 ==> 593 ==> 953\n389 ==> 839 ==> 983\n```\n\nFinally, we can find 34 primes below `1000` with only one prime permutation: \n```python\n[13, 17, 37, 79, 107, 127, 139, 181, 191, 239, 241, 251, 277, 281, 283, 313, 347, 349, 367, 457, 461, 463, 467, 479, 563, 569, 577, 587, 619, 683, 709, 769, 787, 797]\n```\n\nEach set of permuted primes are represented by its smallest value, for example the set `149, 419, 491, 941` is represented by `149`, and the set has 3 permutations.\n\n**Notes**\n* the original number (`149` in the above example) is **not** counted as a permutation;\n* permutations with leading zeros are **not valid**\n\n## Your Task\n\nYour task is to create a function that takes two arguments:\n* an upper limit (`n_max`) and\n* the number of prime permutations (`k_perms`) that the primes should generate **below** `n_max`\n\nThe function should return the following three values as a list:\n* the number of permutational primes below the given limit,\n* the smallest prime such prime,\n* and the largest such prime\n\nIf no eligible primes were found below the limit, the output should be `[0, 0, 0]`\n\n## Examples\n\nLet's see how it would be with the previous cases:\n```python\npermutational_primes(1000, 3) ==> [3, 149, 379]\n''' 3 primes with 3 permutations below 1000, smallest: 149, largest: 379 '''\n\npermutational_primes(1000, 2) ==> [9, 113, 389]\n''' 9 primes with 2 permutations below 1000, smallest: 113, largest: 389 '''\n\npermutational_primes(1000, 1) ==> [34, 13, 797]\n''' 34 primes with 1 permutation below 1000, smallest: 13, largest: 797 '''\n```\n\nHappy coding!!\n\n Examples: \n",
  "1801": "Problem: \n# Esolang Interpreters #3 - Custom Paintfuck Interpreter\n\n## About this Kata Series\n\n\"Esolang Interpreters\" is a Kata Series that originally began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung) which all shared a similar format and were all somewhat inter-related.  Under the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest), these three high-level inter-related Kata gradually evolved into what is known today as the \"Esolang Interpreters\" series.\n\nThis series is a high-level Kata Series designed to challenge the minds of bright and daring programmers by implementing interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org), mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited to them, given a certain specification for a certain Esolang.  Perhaps the only exception to this rule is the very first Kata in this Series which is intended as an introduction/taster to the world of esoteric programming languages and writing interpreters for them.\n\n## The Language\n\nPaintfuck is a [borderline-esoteric programming language/Esolang](http://esolangs.org) which is a derivative of [Smallfuck](http://esolangs.org/wiki/Smallfuck) (itself a derivative of the famous [Brainfuck](http://esolangs.org/wiki/Brainfuck)) that uses a two-dimensional data grid instead of a one-dimensional tape.\n\nValid commands in Paintfuck include:\n\n- `n` - Move data pointer north (up)\n- `e` - Move data pointer east (right)\n- `s` - Move data pointer south (down)\n- `w` - Move data pointer west (left)\n- `*` - Flip the bit at the current cell (same as in Smallfuck)\n- `[` - Jump past matching `]` if bit under current pointer is `0` (same as in Smallfuck)\n- `]` - Jump back to the matching `[` (if bit under current pointer is nonzero) (same as in Smallfuck)\n\nThe specification states that any non-command character (i.e. any character other than those mentioned above) should simply be ignored.  The output of the interpreter is the two-dimensional data grid itself, best as animation as the interpreter is running, but at least a representation of the data grid itself after a certain number of iterations (explained later in task).\n\nIn current implementations, the 2D datagrid is finite in size with toroidal (wrapping) behaviour.  This is one of the few major differences of Paintfuck from Smallfuck as Smallfuck terminates (normally) whenever the pointer exceeds the bounds of the tape.\n\nSimilar to Smallfuck, Paintfuck is Turing-complete **if and only if** the 2D data grid/canvas were unlimited in size.  However, since the size of the data grid is defined to be finite, it acts like a finite state machine.\n\nMore info on this Esolang can be found [here](http://esolangs.org/wiki/Paintfuck).\n\n## The Task\n\nYour task is to implement a custom Paintfuck interpreter `interpreter()`/`Interpret` which accepts the following arguments in the specified order:\n\n1. `code` - **Required**.  The Paintfuck code to be executed, passed in as a string.  May contain comments (non-command characters), in which case your interpreter should simply ignore them.  If empty, simply return the initial state of the data grid.\n2. `iterations` - **Required**.  A non-negative integer specifying the number of iterations to be performed before the final state of the data grid is returned.  See notes for definition of 1 iteration.  If equal to zero, simply return the initial state of the data grid.\n3. `width` - **Required**.  The width of the data grid in terms of the number of data cells in each row, passed in as a positive integer.\n4. `height` - **Required**.  The height of the data grid in cells (i.e. number of rows) passed in as a positive integer.\n\nA few things to note:\n\n- Your interpreter should treat all command characters as **case-sensitive** so `N`, `E`, `S` and `W` are **not** valid command characters\n- Your interpreter should initialize all cells within the data grid to a value of `0` regardless of the width and height of the grid\n- In this implementation, your pointer must always start at the **top-left hand corner** of the data grid (i.e. first row, first column).  This is important as some implementations have the data pointer starting at the middle of the grid.\n- One iteration is defined as one step in the program, i.e. the number of command characters evaluated.  For example, given a program `nessewnnnewwwsswse` and an iteration count of `5`, your interpreter should evaluate `nesse` before returning the final state of the data grid.  **Non-command characters should not count towards the number of iterations.**\n- Regarding iterations, the act of skipping to the matching `]` when a `[` is encountered (or vice versa) is considered to be **one** iteration regardless of the number of command characters in between.  The next iteration then commences at the command **right after** the matching `]` (or `[`).\n- Your interpreter should terminate normally and return the final state of the 2D data grid whenever **any** of the mentioned conditions become true: (1) All commands have been considered left to right, or (2) Your interpreter has already performed the number of iterations specified in the second argument.\n- The return value of your interpreter should be a representation of the final state of the 2D data grid where each row is separated from the next by a CRLF (`\\r\\n`).  For example, if the final state of your datagrid is\n\n```\n[\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1]\n]\n```\n\n... then your return string should be `\"100\\r\\n010\\r\\n001\"`.\n\nGood luck :D\n\n## Kata in this Series\n\n1. [Esolang Interpreters #1 - Introduction to Esolangs and My First Interpreter (MiniStringFuck)](https://www.codewars.com/kata/esolang-interpreters-number-1-introduction-to-esolangs-and-my-first-interpreter-ministringfuck)\n2. [Esolang Interpreters #2 - Custom Smallfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-2-custom-smallfuck-interpreter)\n3. **Esolang Interpreters #3 - Custom Paintfuck Interpreter**\n4. [Esolang Interpreters #4 - Boolfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-4-boolfuck-interpreter)\n\n Examples: \n",
  "1802": "Problem: \nOn fictional islands of Matunga archipelage several different tribes use fictional currency - tung. One tung is a very small amount, so all payments are made with coins of different values. For example, one tribe use coins of 7 and 9 tungs, another - 6, 10 and 11 tungs. Every tribe has at least 2 different coins.\nAlso every tribe has a shop with remarkable feature: if you find an item N tungs worth, you always can find an item priced N+1 tungs in the same shop.\nYour goal is to write the function min_price(coins) which finds out the minimum price of item which can be in sale in Matunga tribe shop, knowing the values of coins used there.\n\nFunction should return -1 if result is not accessible (i.e. coins of these values can't cover natural row from N to infinity without gaps).\n\nFor example, some tribe has coins of 3 and 5 tungs. They can't sell items of 4 or 7 tungs, because 4 and 7 can't be represented as a sum of 3's and 5's. But starting from 8 tungs you can do it with every sum: 8 is 5+3, 9 is 3+3+3, 10 is 5+5, 11 is 5+3+3 and so on. So the answer for this set of coins is 8.\n\n Examples: \n",
  "1803": "Problem: \nCreate a function that finds the largest palindromic number made from the product of **at least 2** of the given arguments.\n\n### Notes\n\n* Only non-negative numbers will be given in the argument\n* You don't need to use all the digits of the products\n* Single digit numbers are considered palindromes\n* Optimization is needed: dealing with ones and zeros in a smart way will help a lot\n\n\n\n\n## Examples\n\n```\n[937, 113] --> 81518\n```\nAs `937 * 113 = 105881` and the largest palindromic number that can be arranged from the digits of result is: `81518`\n\n\nAnother one:\n\n```\n[57, 62, 23] --> 82128\n\n             product     palindrome\n57 * 62      = 3534   -->  353\n57 * 23      = 1311   -->  131\n62 * 23      = 1426   -->  6\n57 * 62 * 23 = 81282  -->  82128\n```\n\nOne more:\n```\n[15, 125, 8] --> 8\n\n             product     palindrome\n15 * 125     = 1875   -->  8\n15 * 8       = 120    -->  2\n125 * 8      = 1000   -->  1\n15 * 125 * 8 = 15000  -->  5\n```\n\n Examples: \n",
  "1804": "Problem: \nThere is a secret string which is unknown to you. Given a collection of random triplets from the string, recover the original string. \n\nA triplet here is defined as a sequence of three letters such that each letter occurs somewhere before the next in the given string. \"whi\" is a triplet for the string \"whatisup\".\n\nAs a simplification, you may assume that no letter occurs more than once in the secret string.\n\nYou can assume nothing about the triplets given to you other than that they are valid triplets and that they contain sufficient information to deduce the original string. In particular, this means that the secret string will never contain letters that do not occur in one of the triplets given to you.\n\n Examples: \n"
}