{"1": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\n Examples: \nassert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16", "2": "Write a function to find the similar elements from the given two tuple lists.\n\n Examples: \nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)", "3": "Write a python function to identify non-prime numbers.\n\n Examples: \nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True", "4": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\n Examples: \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]", "5": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\n Examples: \nassert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131", "6": "Write a python function to check whether the two numbers differ at one bit position only or not.\n\n Examples: \nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False", "7": "Write a function to find all words which are at least 4 characters long in a string by using regex.\n\n Examples: \nassert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']", "8": "Write a function to find squares of individual elements in a list using lambda function.\n\n Examples: \nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])", "9": "Write a python function to find the minimum number of rotations required to get the same string.\n\n Examples: \nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3", "10": "Write a function to get the n smallest items from a dataset.\n\n Examples: \nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]", "11": "Write a python function to remove first and last occurrence of a given character from the string.\n\n Examples: \nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "12": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\n Examples: \nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "13": "Write a function to count the most common words in a dictionary.\n\n Examples: \nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]", "14": "Write a python function to find the volume of a triangular prism.\n\n Examples: \nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "15": "Write a function to split a string at lowercase letters.\n\n Examples: \nassert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "16": "Write a function to find sequences of lowercase letters joined with an underscore.\n\n Examples: \nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')", "17": "Write a function to find the perimeter of a square.\n\n Examples: \nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16", "18": "Write a function to remove characters from the first string which are present in the second string.\n\n Examples: \nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ", "19": "Write a function to find whether a given array of integers contains any duplicate element.\n\n Examples: \nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "20": "Write a function to check if the given number is woodball or not.\n\n Examples: \nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False", "21": "Write a function to find m number of multiples of n.\n\n Examples: \nassert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]", "22": "Write a function to find the first duplicate element in a given array of integers.\n\n Examples: \nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1", "23": "Write a python function to find the maximum sum of elements of list in a list of lists.\n\n Examples: \nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19", "24": "Write a function to convert the given binary number to its decimal equivalent.\n\n Examples: \nassert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109", "25": "Write a python function to find the product of non-repeated elements in a given array.\n\n Examples: \nassert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120", "26": "Write a function to check if the given tuple list has all k elements.\n\n Examples: \nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False", "27": "Write a python function to remove all digits from a list of strings.\n\n Examples: \nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']", "28": "Write a python function to find binomial co-efficient.\n\n Examples: \nassert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3", "29": "Write a python function to find the element occurring odd number of times.\n\n Examples: \nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5", "30": "Write a python function to count all the substrings starting and ending with same characters.\n\n Examples: \nassert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2", "31": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\n Examples: \nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]", "32": "Write a python function to find the largest prime factor of a given number.\n\n Examples: \nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2", "33": "Write a python function to convert a decimal number to binary number.\n\n Examples: \nassert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100", "34": "Write a python function to find the missing number in a sorted array.\n\n Examples: \nassert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4", "35": "Write a function to find the n-th rectangular number.\n\n Examples: \nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42", "36": "Write a python function to find the nth digit in the proper fraction of two given numbers.\n\n Examples: \nassert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3", "37": "Write a function to sort a given mixed list of integers and strings.\n\n Examples: \nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "38": "Write a function to find the division of first even and odd number of a given list.\n\n Examples: \nassert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10", "39": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\n Examples: \nassert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')", "40": "Write a function to find frequency of the elements in a given list of lists using collections module.\n\n Examples: \nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})", "41": "Write a function to filter even numbers using lambda function.\n\n Examples: \nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]", "42": "Write a python function to find the sum of repeated elements in a given array.\n\n Examples: \nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2", "43": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\n\n Examples: \nassert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'", "44": "Write a function that matches a word at the beginning of a string.\n\n Examples: \nassert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')", "45": "Write a function to find the gcd of the given array elements.\n\n Examples: \nassert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ", "46": "Write a python function to determine whether all the numbers are different from each other are not.\n\n Examples: \nassert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True", "47": "Write a python function to find the last digit when factorial of a divides factorial of b.\n\n Examples: \nassert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2", "48": "Write a python function to set all odd bits of a given number.\n\n Examples: \nassert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31", "49": "Write a function to extract every first or specified element from a given two-dimensional list.\n\n Examples: \nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]", "50": "Write a function to find the list with minimum length using lambda function.\n\n Examples: \nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])", "51": "Write a function to print check if the triangle is equilateral or not.\n\n Examples: \nassert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True", "52": "Write a function to caluclate area of a parallelogram.\n\n Examples: \nassert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72", "53": "Write a python function to check whether the first and last characters of a given string are equal or not.\n\n Examples: \nassert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"", "54": "Write a function to sort the given array by using counting sort.\n\n Examples: \nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]", "55": "Write a function to find t-nth term of geometric series.\n\n Examples: \nassert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486", "56": "Write a python function to check if a given number is one less than twice its reverse.\n\n Examples: \nassert check(70) == False\nassert check(23) == False\nassert check(73) == True", "57": "Write a python function to find the largest number that can be formed with the given digits.\n\n Examples: \nassert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321", "58": "Write a python function to check whether the given two integers have opposite sign or not.\n\n Examples: \nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False", "59": "Write a function to find the nth octagonal number.\n\n Examples: \nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645", "60": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\n Examples: \nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1", "61": "Write a python function to count number of substrings with the sum of digits equal to their length.\n\n Examples: \nassert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12", "62": "Write a python function to find smallest number in a list.\n\n Examples: \nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45", "63": "Write a function to find the maximum difference between available pairs in the given tuple list.\n\n Examples: \nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "64": "Write a function to sort a list of tuples using lambda.\n\n Examples: \nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "65": "Write a function of recursion list sum.\n\n Examples: \nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "66": "Write a python function to count positive numbers in a list.\n\n Examples: \nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4", "67": "Write a function to find the number of ways to partition a set of bell numbers.\n\n Examples: \nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "68": "Write a python function to check whether the given array is monotonic or not.\n\n Examples: \nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False", "69": "Write a function to check whether a list contains the given sublist or not.\n\n Examples: \nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False", "70": "Write a function to find whether all the given tuples have equal length or not.\n\n Examples: \nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'", "71": "Write a function to sort a list of elements using comb sort.\n\n Examples: \nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "72": "Write a python function to check whether the given number can be represented as difference of two squares or not.\n\n Examples: \nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True", "73": "Write a function to split the given string with multiple delimiters by using regex.\n\n Examples: \nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']", "74": "Write a function to check whether it follows the sequence given in the patterns array.\n\n Examples: \nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ", "75": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n Examples: \nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'", "76": "Write a python function to count the number of squares in a rectangle.\n\n Examples: \nassert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1", "77": "Write a python function to find the difference between sum of even and odd digits.\n\n Examples: \nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False", "78": "Write a python function to find number of integers with odd number of set bits.\n\n Examples: \nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8", "79": "Write a python function to check whether the length of the word is odd or not.\n\n Examples: \nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True", "80": "Write a function to find the nth tetrahedral number.\n\n Examples: \nassert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0", "81": "Write a function to zip the two given tuples.\n\n Examples: \nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]", "82": "Write a function to find the volume of a sphere.\n\n Examples: \nassert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113", "83": "Write a python function to find the character made by adding all the characters of the given string.\n\n Examples: \nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"", "84": "Write a function to find the n-th number in newman conway sequence.\n\n Examples: \nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2", "85": "Write a function to find the surface area of a sphere.\n\n Examples: \nassert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669", "86": "Write a function to find nth centered hexagonal number.\n\n Examples: \nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217", "87": "Write a function to merge three dictionaries into a single expression.\n\n Examples: \nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "88": "Write a function to get the frequency of the elements in a list.\n\n Examples: \nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ", "89": "Write a function to find the closest smaller number than n.\n\n Examples: \nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11", "90": "Write a python function to find the length of the longest word.\n\n Examples: \nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5", "91": "Write a function to check if a substring is present in a given list of string values.\n\n Examples: \nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "92": "Write a function to check whether the given number is undulating or not.\n\n Examples: \nassert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True", "93": "Write a function to calculate the value of 'a' to the power 'b'.\n\n Examples: \nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125", "94": "Write a function to extract the index minimum value record from the given tuples.\n\n Examples: \nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "95": "Write a python function to find the minimum length of sublist.\n\n Examples: \nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "96": "Write a python function to find the number of divisors of a given integer.\n\n Examples: \nassert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3", "97": "Write a function to find frequency count of list of lists.\n\n Examples: \nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "98": "Write a function to multiply all the numbers in a list and divide with the length of the list.\n\n Examples: \nassert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0", "99": "Write a function to convert the given decimal number to its binary equivalent.\n\n Examples: \nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ", "100": "Write a function to find the next smallest palindrome of a specified number.\n\n Examples: \nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121", "101": "Write a function to find the kth element in the given array.\n\n Examples: \nassert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36", "102": "Write a function to convert snake case string to camel case string.\n\n Examples: \nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "103": "Write a function to find eulerian number a(n, m).\n\n Examples: \nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26", "104": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\n\n Examples: \nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "105": "Write a python function to count true booleans in the given list.\n\n Examples: \nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3", "106": "Write a function to add the given list to the given tuples.\n\n Examples: \nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "107": "Write a python function to count hexadecimal numbers for a given range.\n\n Examples: \nassert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1", "108": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\n Examples: \nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "109": "Write a python function to find the count of rotations of a binary string with odd value.\n\n Examples: \nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2", "110": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\n Examples: \nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]", "111": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n\n Examples: \nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]", "112": "Write a python function to find the perimeter of a cylinder.\n\n Examples: \nassert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8", "113": "Write a function to check if a string represents an integer or not.\n\n Examples: \nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True", "114": "Write a function to assign frequency to each tuple in the given tuple list.\n\n Examples: \nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'", "115": "Write a function to check whether all dictionaries in a list are empty or not.\n\n Examples: \nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True", "116": "Write a function to convert a given tuple of positive integers into an integer.\n\n Examples: \nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567", "117": "Write a function to convert all possible convertible elements in the list to float.\n\n Examples: \nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'", "118": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\n Examples: \nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']", "119": "Write a python function to find the element that appears only once in a sorted array.\n\n Examples: \nassert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1", "120": "Write a function to find the maximum product from the pairs of tuples within a given list.\n\n Examples: \nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "121": "Write a function to find the triplet with sum of the given array\n\n Examples: \nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True", "122": "Write a function to find n\u2019th smart number.\n\n Examples: \nassert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664", "123": "Write a function to sum all amicable numbers from 1 to a specified number.\n\n Examples: \nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0", "124": "Write a function to get the angle of a complex number.\n\n Examples: \nassert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966", "125": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n Examples: \nassert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ", "126": "Write a python function to find the sum of common divisors of two given numbers.\n\n Examples: \nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3", "127": "Write a function to multiply two integers without using the * operator in python.\n\n Examples: \nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32", "128": "Write a function to shortlist words that are longer than n from a given list of words.\n\n Examples: \nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']", "129": "Write a function to calculate magic square.\n\n Examples: \nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "130": "Write a function to find the item with maximum frequency in a given list.\n\n Examples: \nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "131": "Write a python function to reverse only the vowels of a given string.\n\n Examples: \nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"", "132": "Write a function to convert tuple to a string.\n\n Examples: \nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "133": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n Examples: \nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "134": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\n Examples: \nassert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"", "135": "Write a function to find the nth hexagonal number.\n\n Examples: \nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91", "136": "Write a function to calculate electricity bill.\n\n Examples: \nassert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5", "137": "Write a function to find the ration of zeroes in an array of integers.\n\n Examples: \nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00", "138": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n Examples: \nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True", "139": "Write a function to find the circumference of a circle.\n\n Examples: \nassert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132", "140": "Write a function to extract elements that occur singly in the given tuple list.\n\n Examples: \nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]", "141": "Write a function to sort a list of elements using pancake sort.\n\n Examples: \nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "142": "Write a function to count the same pair in three given lists.\n\n Examples: \nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "143": "Write a function to find number of lists present in the given tuple.\n\n Examples: \nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "144": "Write a python function to find the sum of absolute differences in all pairs of the given array.\n\n Examples: \nassert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188", "145": "Write a python function to find the maximum difference between any two elements in a given array.\n\n Examples: \nassert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2", "146": "Write a function to find the ascii value of total characters in a string.\n\n Examples: \nassert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76", "147": "Write a function to find the maximum total path sum in the given triangle.\n\n Examples: \nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53", "148": "Write a function to divide a number into two parts such that the sum of digits is maximum.\n\n Examples: \nassert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19", "149": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\n Examples: \nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7", "150": "Write a python function to find whether the given number is present in the infinite sequence or not.\n\n Examples: \nassert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False", "151": "Write a python function to check whether the given number is co-prime or not.\n\n Examples: \nassert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False", "152": "Write a function to sort the given array by using merge sort.\n\n Examples: \nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]", "153": "Write a function to find the vertex of a parabola.\n\n Examples: \nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)", "154": "Write a function to extract every specified element from a given two dimensional list.\n\n Examples: \nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]", "155": "Write a python function to toggle all even bits of a given number.\n\n Examples: \nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20", "156": "Write a function to convert a tuple of string values to a tuple of integer values.\n\n Examples: \nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))", "157": "Write a function to reflect the run-length encoding from a list.\n\n Examples: \nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]", "158": "Write a python function to find k number of operations required to make all elements equal.\n\n Examples: \nassert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24", "159": "Write a function to print the season for the given month and day.\n\n Examples: \nassert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')", "160": "Write a function to find x and y that satisfies ax + by = n.\n\n Examples: \nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)", "161": "Write a function to remove all elements from a given list present in another list.\n\n Examples: \nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]", "162": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\n Examples: \nassert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25", "163": "Write a function to calculate the area of a regular polygon.\n\n Examples: \nassert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214", "164": "Write a python function to check whether the sum of divisors are same or not.\n\n Examples: \nassert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True", "165": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\n Examples: \nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5", "166": "Write a python function to count the pairs with xor as an even number.\n\n Examples: \nassert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1", "167": "Write a python function to find smallest power of 2 greater than or equal to n.\n\n Examples: \nassert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32", "168": "Write a python function to find the frequency of a number in a given array.\n\n Examples: \nassert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2", "169": "Write a function to calculate the nth pell number.\n\n Examples: \nassert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408", "170": "Write a function to find sum of the numbers in a list between the indices of a specified range.\n\n Examples: \nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38", "171": "Write a function to find the perimeter of a pentagon.\n\n Examples: \nassert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75", "172": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\n Examples: \nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2", "173": "Write a function to remove everything except alphanumeric characters from a string.\n\n Examples: \nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')", "174": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\n\n Examples: \nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}", "175": "Write a function to verify validity of a string of parentheses.\n\n Examples: \nassert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True", "176": "Write a function to find the perimeter of a triangle.\n\n Examples: \nassert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105", "177": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\n\n Examples: \nassert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)", "178": "Write a function to search some literals strings in a string.\n\n Examples: \nassert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')", "179": "Write a function to find if the given number is a keith number or not.\n\n Examples: \nassert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True", "180": "Write a function to calculate distance between two points using latitude and longitude.\n\n Examples: \nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595", "181": "Write a function to find the longest common prefix in the given set of strings.\n\n Examples: \nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'", "182": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\n\n Examples: \nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])", "183": "Write a function to count all the distinct pairs having a difference of k in any array.\n\n Examples: \nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3", "184": "Write a function to find all the values in a list that are greater than a specified number.\n\n Examples: \nassert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False", "185": "Write a function to find the focus of a parabola.\n\n Examples: \nassert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)", "186": "Write a function to search some literals strings in a string by using regex.\n\n Examples: \nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'", "187": "Write a function to find the longest common subsequence for the given two sequences.\n\n Examples: \nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2", "188": "Write a python function to check whether the given number can be represented by product of two squares or not.\n\n Examples: \nassert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True", "189": "Write a python function to find the first missing positive number.\n\n Examples: \nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3", "190": "Write a python function to count the number of integral co-ordinates that lie inside a square.\n\n Examples: \nassert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1", "191": "Write a function to check whether the given month name contains 30 days or not.\n\n Examples: \nassert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True", "192": "Write a python function to check whether a string has atleast one letter and one number.\n\n Examples: \nassert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False", "193": "Write a function to remove the duplicates from the given tuple.\n\n Examples: \nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)", "194": "Write a python function to convert octal number to decimal number.\n\n Examples: \nassert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32", "195": "Write a python function to find the first position of an element in a sorted array.\n\n Examples: \nassert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0", "196": "Write a function to remove all the tuples with length k.\n\n Examples: \nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]", "197": "Write a function to perform the exponentiation of the given two tuples.\n\n Examples: \nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)", "198": "Write a function to find the largest triangle that can be inscribed in an ellipse.\n\n Examples: \nassert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093", "199": "Write a python function to find highest power of 2 less than or equal to given number.\n\n Examples: \nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "200": "Write a function to find all index positions of the maximum values in a given list.\n\n Examples: \nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]", "201": "Write a python function to check whether the elements in a list are same or not.\n\n Examples: \nassert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False", "202": "Write a function to remove even characters in a string.\n\n Examples: \nassert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")", "203": "Write a python function to find the hamming distance between given two integers.\n\n Examples: \nassert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2", "204": "Write a python function to count the occurrence of a given character in a string.\n\n Examples: \nassert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4", "205": "Write a function to find the inversions of tuple elements in the given tuple list.\n\n Examples: \nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)", "206": "Write a function to perform the adjacent element concatenation in the given tuples.\n\n Examples: \nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')", "207": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\n Examples: \nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1", "208": "Write a function to check the given decimal with a precision of 2 by using regex.\n\n Examples: \nassert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False", "209": "Write a function to delete the smallest element from the given heap and then insert a new item.\n\n Examples: \nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]", "210": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\n Examples: \nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True", "211": "Write a python function to count numbers whose oth and nth bits are set.\n\n Examples: \nassert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1", "212": "Write a python function to find the sum of fourth power of n natural numbers.\n\n Examples: \nassert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275", "213": "Write a function to perform the concatenation of two string tuples.\n\n Examples: \nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')", "214": "Write a function to convert radians to degrees.\n\n Examples: \nassert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878", "215": "Write a function to decode a run-length encoded given list.\n\n Examples: \nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']", "216": "Write a function to check if a nested list is a subset of another nested list.\n\n Examples: \nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False", "217": "Write a python function to find the first repeated character in a given string.\n\n Examples: \nassert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'", "218": "Write a python function to find the minimum operations required to make two numbers equal.\n\n Examples: \nassert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3", "219": "Write a function to extract maximum and minimum k elements in the given tuple.\n\n Examples: \nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)", "220": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\n Examples: \nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')", "221": "Write a python function to find the first even number in a given list of numbers.\n\n Examples: \nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6", "222": "Write a function to check if all the elements in tuple have same data type or not.\n\n Examples: \nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True", "223": "Write a function to check for majority element in the given sorted array.\n\n Examples: \nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "224": "Write a python function to count set bits of a given number.\n\n Examples: \nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2", "225": "Write a python function to find the minimum element in a sorted and rotated array.\n\n Examples: \nassert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2", "226": "Write a python function to remove the characters which have odd index values of a given string.\n\n Examples: \nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'", "227": "Write a function to find minimum of three numbers.\n\n Examples: \nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30", "228": "Write a python function to check whether all the bits are unset in the given range or not.\n\n Examples: \nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "229": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\n Examples: \nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "230": "Write a function to replace blank spaces with any character in a string.\n\n Examples: \nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "231": "Write a function to find the maximum sum in the given right triangle of numbers.\n\n Examples: \nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28", "232": "Write a function to get the n largest items from a dataset.\n\n Examples: \nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]", "233": "Write a function to find the lateral surface area of a cylinder.\n\n Examples: \nassert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002", "234": "Write a function to find the volume of a cube.\n\n Examples: \nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125", "235": "Write a python function to set all even bits of a given number.\n\n Examples: \nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30", "236": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\n Examples: \nassert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1", "237": "Write a function to check the occurrences of records which occur similar times in the given tuples.\n\n Examples: \nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "238": "Write a python function to count number of non-empty substrings of a given string.\n\n Examples: \nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15", "239": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\n Examples: \nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84", "240": "Write a function to replace the last element of the list with another list.\n\n Examples: \nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "241": "Write a function to generate a 3d array having each element as '*'.\n\n Examples: \nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]", "242": "Write a function to count total characters in a string.\n\n Examples: \nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5", "243": "Write a function to sort the given list based on the occurrence of first element of tuples.\n\n Examples: \nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]", "244": "Write a python function to find the next perfect square greater than a given number.\n\n Examples: \nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16", "245": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\n Examples: \nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138", "246": "Write a function for computing square roots using the babylonian method.\n\n Examples: \nassert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0", "247": "Write a function to find the longest palindromic subsequence in the given string.\n\n Examples: \nassert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ", "248": "Write a function to calculate the harmonic sum of n-1.\n\n Examples: \nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682", "249": "Write a function to find the intersection of two arrays using lambda function.\n\n Examples: \nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "250": "Write a python function to count the occcurences of an element in a tuple.\n\n Examples: \nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "251": "Write a function to insert an element before each element of a list.\n\n Examples: \nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ", "252": "Write a python function to convert complex numbers to polar coordinates.\n\n Examples: \nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)", "253": "Write a python function to count integers from a given list.\n\n Examples: \nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2", "254": "Write a function to find all words starting with 'a' or 'e' in a given string.\n\n Examples: \nassert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']", "255": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\n Examples: \nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "256": "Write a python function to count the number of prime numbers less than a given non-negative number.\n\n Examples: \nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25", "257": "Write a function to swap two numbers.\n\n Examples: \nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)", "258": "Write a function to find number of odd elements in the given list using lambda function.\n\n Examples: \nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2", "259": "Write a function to maximize the given two tuples.\n\n Examples: \nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "260": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n Examples: \nassert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41", "261": "Write a function to perform mathematical division operation across the given tuples.\n\n Examples: \nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "262": "Write a function to split a given list into two parts where the length of the first part of the list is given.\n\n Examples: \nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "263": "Write a function to merge two dictionaries.\n\n Examples: \nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}", "264": "Write a function to calculate a dog's age in dog's years.\n\n Examples: \nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109", "265": "Write a function to split a list for every nth element.\n\n Examples: \nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "266": "Write a function to find the lateral surface area of a cube.\n\n Examples: \nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400", "267": "Write a python function to find the sum of squares of first n odd natural numbers.\n\n Examples: \nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84", "268": "Write a function to find the n'th star number.\n\n Examples: \nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121", "269": "Write a function to find the ascii value of a character.\n\n Examples: \nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83", "270": "Write a python function to find the sum of even numbers at even positions.\n\n Examples: \nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12", "271": "Write a python function to find the sum of fifth power of first n even natural numbers.\n\n Examples: \nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32", "272": "Write a function to perfom the rear element extraction from list of tuples records.\n\n Examples: \nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "273": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\n\n Examples: \nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "274": "Write a python function to find sum of even index binomial coefficients.\n\n Examples: \nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2", "275": "Write a python function to find the position of the last removed element from the given array.\n\n Examples: \nassert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4", "276": "Write a function to find the volume of a cylinder.\n\n Examples: \nassert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004", "277": "Write a function to filter a dictionary based on values.\n\n Examples: \nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "278": "Write a function to find the element count that occurs before the record in the given tuple.\n\n Examples: \nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "279": "Write a function to find the nth decagonal number.\n\n Examples: \nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370", "280": "Write a function to search an element in the given array by using sequential search.\n\n Examples: \nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "281": "Write a python function to check if the elements of a given list are unique or not.\n\n Examples: \nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True", "282": "Write a function to substaract two lists using map and lambda function.\n\n Examples: \nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]", "283": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\n Examples: \nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True", "284": "Write a function to check whether all items of a list are equal to a given string.\n\n Examples: \nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "285": "Write a function that matches a string that has an a followed by two to three 'b'.\n\n Examples: \nassert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')", "286": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\n Examples: \nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "287": "Write a python function to find the sum of squares of first n even natural numbers.\n\n Examples: \nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120", "288": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\n\n Examples: \nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1", "289": "Write a python function to calculate the number of odd days in a given year.\n\n Examples: \nassert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2", "290": "Write a function to find the list of lists with maximum length.\n\n Examples: \nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "291": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n Examples: \nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228", "292": "Write a python function to find quotient of two numbers.\n\n Examples: \nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4", "293": "Write a function to find the third side of a right angled triangle.\n\n Examples: \nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685", "294": "Write a function to find the maximum value in a given heterogeneous list.\n\n Examples: \nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "295": "Write a function to return the sum of all divisors of a number.\n\n Examples: \nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1", "296": "Write a python function to count inversions in an array.\n\n Examples: \nassert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3", "297": "Write a function to flatten a given nested list structure.\n\n Examples: \nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "298": "Write a function to find the nested list elements which are present in another list.\n\n Examples: \nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]", "299": "Write a function to calculate the maximum aggregate from the list of tuples.\n\n Examples: \nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "300": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n Examples: \nassert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0", "301": "Write a function to find the depth of a dictionary.\n\n Examples: \nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "302": "Write a python function to find the most significant bit number which is also a set bit.\n\n Examples: \nassert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16", "303": "Write a python function to check whether the count of inversion of two types are same or not.\n\n Examples: \nassert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True", "304": "Write a python function to find element at a given index after number of rotations.\n\n Examples: \nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "305": "Write a function to match two words from a list of words starting with letter 'p'.\n\n Examples: \nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "306": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\n Examples: \nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "307": "Write a function to get a colon of a tuple.\n\n Examples: \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "308": "Write a function to find the specified number of largest products from two given lists.\n\n Examples: \nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "309": "Write a python function to find the maximum of two numbers.\n\n Examples: \nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9", "310": "Write a function to convert a given string to a tuple.\n\n Examples: \nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "311": "Write a python function to set the left most unset bit.\n\n Examples: \nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15", "312": "Write a function to find the volume of a cone.\n\n Examples: \nassert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521", "313": "Write a python function to print positive numbers in a list.\n\n Examples: \nassert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1", "314": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\n Examples: \nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81", "315": "Write a python function to find the first maximum length of even word.\n\n Examples: \nassert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"", "316": "Write a function to find the index of the last occurrence of a given number in a sorted array.\n\n Examples: \nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6", "317": "Write a function to reflect the modified run-length encoding from a list.\n\n Examples: \nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']", "318": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\n\n Examples: \nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0", "319": "Write a function to find all five characters long word in the given string by using regex.\n\n Examples: \nassert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']", "320": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n Examples: \nassert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270", "321": "Write a function to find the demlo number for the given number.\n\n Examples: \nassert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'", "322": "Write a function to find all index positions of the minimum values in a given list.\n\n Examples: \nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]", "323": "Write a function to re-arrange the given array in alternating positive and negative items.\n\n Examples: \nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]", "324": "Write a function to extract the sum of alternate chains of tuples.\n\n Examples: \nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)", "325": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\n\n Examples: \nassert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1", "326": "Write a function to get the word with most number of occurrences in the given strings list.\n\n Examples: \nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'", "327": "Write a function to print check if the triangle is isosceles or not.\n\n Examples: \nassert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False", "328": "Write a function to rotate a given list by specified number of items to the left direction.\n\n Examples: \nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]", "329": "Write a python function to count negative numbers in a list.\n\n Examples: \nassert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2", "330": "Write a function to find all three, four, five characters long words in the given string by using regex.\n\n Examples: \nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']", "331": "Write a python function to count unset bits of a given number.\n\n Examples: \nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1", "332": "Write a function to count character frequency of a given string.\n\n Examples: \nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}", "333": "Write a python function to sort a list according to the second element in sublist.\n\n Examples: \nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]", "334": "Write a python function to check whether the triangle is valid or not if sides are given.\n\n Examples: \nassert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True", "335": "Write a function to find the sum of arithmetic progression.\n\n Examples: \nassert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34", "336": "Write a function to check whether the given month name contains 28 days or not.\n\n Examples: \nassert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False", "337": "Write a function that matches a word at the end of a string, with optional punctuation.\n\n Examples: \nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')", "338": "Write a python function to count the number of substrings with same first and last characters.\n\n Examples: \nassert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3", "339": "Write a python function to find the maximum occuring divisor in an interval.\n\n Examples: \nassert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2", "340": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\n Examples: \nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6", "341": "Write a function to convert the given set into ordered tuples.\n\n Examples: \nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)", "342": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n\n Examples: \nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)", "343": "Write a function to calculate the number of digits and letters in a string.\n\n Examples: \nassert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)", "344": "Write a python function to find number of elements with odd factors in a given range.\n\n Examples: \nassert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1", "345": "Write a function to find the difference between two consecutive numbers in a given list.\n\n Examples: \nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]", "346": "Write a function to find entringer number e(n, k).\n\n Examples: \nassert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1", "347": "Write a python function to count the number of squares in a rectangle.\n\n Examples: \nassert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5", "348": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\n Examples: \nassert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14", "349": "Write a python function to check whether the given string is a binary string or not.\n\n Examples: \nassert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"", "350": "Write a python function to minimize the length of the string by removing occurrence of only one character.\n\n Examples: \nassert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2", "351": "Write a python function to find the first element occurring k times in a given array.\n\n Examples: \nassert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2", "352": "Write a python function to check whether all the characters in a given string are unique.\n\n Examples: \nassert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False", "353": "Write a function to remove a specified column from a given nested list.\n\n Examples: \nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]", "354": "Write a function to find t-nth term of arithemetic progression.\n\n Examples: \nassert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16", "355": "Write a python function to count the number of rectangles in a circle of radius r.\n\n Examples: \nassert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0", "356": "Write a function to find the third angle of a triangle using two angles.\n\n Examples: \nassert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90", "357": "Write a function to find the maximum element of all the given tuple records.\n\n Examples: \nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12", "358": "Write a function to find modulo division of two lists using map and lambda function.\n\n Examples: \nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]", "359": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n\n Examples: \nassert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"", "360": "Write a function to find the n\u2019th carol number.\n\n Examples: \nassert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959", "361": "Write a function to remove empty lists from a given list of lists.\n\n Examples: \nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']", "362": "Write a python function to find the item with maximum occurrences in a given list.\n\n Examples: \nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1", "363": "Write a function to add the k elements to each element in the tuple.\n\n Examples: \nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]", "364": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\n Examples: \nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ", "365": "Write a python function to count the number of digits of a given number.\n\n Examples: \nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7", "366": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\n Examples: \nassert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6", "367": "Write a function to check if a binary tree is balanced or not.\n\n Examples: \nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ", "368": "Write a function to repeat the given tuple n times.\n\n Examples: \nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))", "369": "Write a function to find the lateral surface area of cuboid\n\n Examples: \nassert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800", "370": "Write a function to sort a tuple by its float element.\n\n Examples: \nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ", "371": "Write a function to find the smallest missing element in a sorted array.\n\n Examples: \nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0", "372": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n\n Examples: \nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "373": "Write a function to find the volume of a cuboid.\n\n Examples: \nassert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150", "374": "Write a function to print all permutations of a given string including duplicates.\n\n Examples: \nassert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']", "375": "Write a function to round the given number to the nearest multiple of a specific number.\n\n Examples: \nassert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218", "376": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\n Examples: \nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')", "377": "Write a python function to remove all occurrences of a character in a given string.\n\n Examples: \nassert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"", "378": "Write a python function to shift last element to first position in the given list.\n\n Examples: \nassert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]", "379": "Write a function to find the surface area of a cuboid.\n\n Examples: \nassert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350", "380": "Write a function to generate a two-dimensional array.\n\n Examples: \nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]", "381": "Write a function to sort a list of lists by a given index of the inner list.\n\n Examples: \nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]", "382": "Write a function to find the number of rotations in a circularly sorted array.\n\n Examples: \nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0", "383": "Write a python function to toggle all odd bits of a given number.\n\n Examples: \nassert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11", "384": "Write a python function to find the frequency of the smallest value in a given array.\n\n Examples: \nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3", "385": "Write a function to find the n'th perrin number using recursion.\n\n Examples: \nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5", "386": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\n Examples: \nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1", "387": "Write a python function to check whether the hexadecimal number is even or odd.\n\n Examples: \nassert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"", "388": "Write a python function to find the highest power of 2 that is less than or equal to n.\n\n Examples: \nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "389": "Write a function to find the n'th lucas number.\n\n Examples: \nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4", "390": "Write a function to insert a given string at the beginning of all items in a list.\n\n Examples: \nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "391": "Write a function to convert more than one list to nested dictionary.\n\n Examples: \nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "392": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n Examples: \nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2", "393": "Write a function to find the list with maximum length using lambda function.\n\n Examples: \nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "394": "Write a function to check if given tuple is distinct or not.\n\n Examples: \nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True", "395": "Write a python function to find the first non-repeated character in a given string.\n\n Examples: \nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"", "396": "Write a function to check whether the given string starts and ends with the same character or not using regex.\n\n Examples: \nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"", "397": "Write a function to find the median of three specific numbers.\n\n Examples: \nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0", "398": "Write a function to compute the sum of digits of each number of a given list.\n\n Examples: \nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19", "399": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n Examples: \nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "400": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\n\n Examples: \nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "401": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n Examples: \nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "402": "Write a function to compute the value of ncr%p.\n\n Examples: \nassert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10", "403": "Write a function to check if a url is valid or not using regex.\n\n Examples: \nassert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False", "404": "Write a python function to find the minimum of two numbers.\n\n Examples: \nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0", "405": "Write a function to check whether an element exists within a tuple.\n\n Examples: \nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "406": "Write a python function to find the parity of a given number.\n\n Examples: \nassert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"", "407": "Write a function to create the next bigger number by rearranging the digits of a given number.\n\n Examples: \nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120", "408": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\n Examples: \nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "409": "Write a function to find the minimum product from the pairs of tuples within a given list.\n\n Examples: \nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "410": "Write a function to find the minimum value in a given heterogeneous list.\n\n Examples: \nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "411": "Write a function to convert the given snake case string to camel case string by using regex.\n\n Examples: \nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'", "412": "Write a python function to remove odd numbers from a given list.\n\n Examples: \nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]", "413": "Write a function to extract the nth element from a given list of tuples.\n\n Examples: \nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "414": "Write a python function to check whether the value exists in a sequence or not.\n\n Examples: \nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True", "415": "Write a python function to find a pair with highest product from a given array of integers.\n\n Examples: \nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)", "416": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\n Examples: \nassert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23", "417": "Write a function to find common first element in given list of tuple.\n\n Examples: \nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "418": "Write a python function to find the sublist having maximum length.\n\n Examples: \nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "419": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n Examples: \nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513", "420": "Write a python function to find the cube sum of first n even natural numbers.\n\n Examples: \nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800", "421": "Write a function to concatenate each element of tuple by the delimiter.\n\n Examples: \nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "422": "Write a python function to find the average of cubes of first n natural numbers.\n\n Examples: \nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1", "423": "Write a function to solve gold mine problem.\n\n Examples: \nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13", "424": "Write a function to extract only the rear index element of each string in the given tuple.\n\n Examples: \nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "425": "Write a function to count the number of sublists containing a particular element.\n\n Examples: \nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "426": "Write a function to filter odd numbers using lambda function.\n\n Examples: \nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "427": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\n Examples: \nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "428": "Write a function to sort the given array by using shell sort.\n\n Examples: \nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "429": "Write a function to extract the elementwise and tuples from the given two tuples.\n\n Examples: \nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "430": "Write a function to find the directrix of a parabola.\n\n Examples: \nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130", "431": "Write a function that takes two lists and returns true if they have at least one common element.\n\n Examples: \nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True", "432": "Write a function to find the median of a trapezium.\n\n Examples: \nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5", "433": "Write a function to check whether the entered number is greater than the elements of the given array.\n\n Examples: \nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'", "434": "Write a function that matches a string that has an a followed by one or more b's.\n\n Examples: \nassert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')", "435": "Write a python function to find the last digit of a given number.\n\n Examples: \nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0", "436": "Write a python function to print negative numbers in a list.\n\n Examples: \nassert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6", "437": "Write a function to remove odd characters in a string.\n\n Examples: \nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")", "438": "Write a function to count bidirectional tuple pairs.\n\n Examples: \nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'", "439": "Write a function to convert a list of multiple integers into a single integer.\n\n Examples: \nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025", "440": "Write a function to find all adverbs and their positions in a given sentence.\n\n Examples: \nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "441": "Write a function to find the surface area of a cube.\n\n Examples: \nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600", "442": "Write a function to find the ration of positive numbers in an array of integers.\n\n Examples: \nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "443": "Write a python function to find the largest negative number from the given list.\n\n Examples: \nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1", "444": "Write a function to trim each tuple by k in the given tuple list.\n\n Examples: \nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "445": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n Examples: \nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "446": "Write a python function to count the occurence of all elements of list in a tuple.\n\n Examples: \nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "447": "Write a function to find cubes of individual elements in a list using lambda function.\n\n Examples: \nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])", "448": "Write a function to calculate the sum of perrin numbers.\n\n Examples: \nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88", "449": "Write a python function to check whether the triangle is valid or not if 3 points are given.\n\n Examples: \nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'", "450": "Write a function to extract specified size of strings from a give list of string values.\n\n Examples: \nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "451": "Write a function to remove all whitespaces from the given string using regex.\n\n Examples: \nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "452": "Write a function that gives loss amount if the given amount has loss else return none.\n\n Examples: \nassert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000", "453": "Write a python function to find the sum of even factors of a number.\n\n Examples: \nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8", "454": "Write a function that matches a word containing 'z'.\n\n Examples: \nassert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')", "455": "Write a function to check whether the given month number contains 31 days or not.\n\n Examples: \nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False", "456": "Write a function to reverse strings in a given list of string values.\n\n Examples: \nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "457": "Write a python function to find the sublist having minimum length.\n\n Examples: \nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "458": "Write a function to find the area of a rectangle.\n\n Examples: \nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8", "459": "Write a function to remove uppercase substrings from a given string by using regex.\n\n Examples: \nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "460": "Write a python function to get the first element of each sublist.\n\n Examples: \nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]", "461": "Write a python function to count the upper case characters in a given string.\n\n Examples: \nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0", "462": "Write a function to find all possible combinations of the elements of a given list.\n\n Examples: \nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "463": "Write a function to find the maximum product subarray of the given array.\n\n Examples: \nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "464": "Write a function to check if all values are same in a dictionary.\n\n Examples: \nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "465": "Write a function to drop empty items from a given dictionary.\n\n Examples: \nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "466": "Write a function to find the peak element in the given array.\n\n Examples: \nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ", "467": "Write a python function to convert decimal number to octal number.\n\n Examples: \nassert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41", "468": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n Examples: \nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ", "469": "Write a function to find the maximum profit earned from a maximum of k stock transactions\n\n Examples: \nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2", "470": "Write a function to find the pairwise addition of the elements of the given tuples.\n\n Examples: \nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "471": "Write a python function to find remainder of array multiplication divided by n.\n\n Examples: \nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0", "472": "Write a python function to check whether the given list contains consecutive numbers or not.\n\n Examples: \nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False", "473": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n Examples: \nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "474": "Write a function to replace characters in a string.\n\n Examples: \nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")", "475": "Write a function to sort counter by value.\n\n Examples: \nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "476": "Write a python function to find the sum of the largest and smallest value in a given array.\n\n Examples: \nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8", "477": "Write a python function to convert the given string to lower case.\n\n Examples: \nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"", "478": "Write a function to remove lowercase substrings from a given string.\n\n Examples: \nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')", "479": "Write a python function to find the first digit of a given number.\n\n Examples: \nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1", "480": "Write a python function to find the maximum occurring character in a given string.\n\n Examples: \nassert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"", "481": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n\n Examples: \nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True", "482": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\n Examples: \nassert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'", "483": "Write a python function to find the first natural number whose factorial is divisible by x.\n\n Examples: \nassert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4", "484": "Write a function to remove the matching tuples from the given two tuples.\n\n Examples: \nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]", "485": "Write a function to find the largest palindromic number in the given array.\n\n Examples: \nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9", "486": "Write a function to compute binomial probability for the given number.\n\n Examples: \nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488", "487": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n\n Examples: \nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]", "488": "Write a function to find the area of a pentagon.\n\n Examples: \nassert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753", "489": "Write a python function to find the frequency of the largest value in a given array.\n\n Examples: \nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3", "490": "Write a function to extract all the pairs which are symmetric in the given tuple list.\n\n Examples: \nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}", "491": "Write a function to find the sum of geometric progression series.\n\n Examples: \nassert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728", "492": "Write a function to search an element in the given array by using binary search.\n\n Examples: \nassert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False", "493": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\n Examples: \nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]", "494": "Write a function to convert the given binary tuple to integer.\n\n Examples: \nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'", "495": "Write a function to remove lowercase substrings from a given string by using regex.\n\n Examples: \nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'", "496": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\n Examples: \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]", "497": "Write a function to find the surface area of a cone.\n\n Examples: \nassert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254", "498": "Write a python function to find gcd of two positive integers.\n\n Examples: \nassert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1", "499": "Write a function to find the diameter of a circle.\n\n Examples: \nassert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30", "500": "Write a function to concatenate all elements of the given list into a string.\n\n Examples: \nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'", "501": "Write a python function to find common divisor between two numbers in a given pair.\n\n Examples: \nassert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6", "502": "Write a python function to find remainder of two numbers.\n\n Examples: \nassert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1", "503": "Write a function to add consecutive numbers of a given list.\n\n Examples: \nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]", "504": "Write a python function to find the cube sum of first n natural numbers.\n\n Examples: \nassert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36", "505": "Write a function to move all zeroes to the end of the given array.\n\n Examples: \nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]", "506": "Write a function to calculate the permutation coefficient of given p(n, k).\n\n Examples: \nassert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10", "507": "Write a function to remove specific words from a given list.\n\n Examples: \nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']", "508": "Write a function to check if the common elements between two given lists are in the same order or not.\n\n Examples: \nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True", "509": "Write a python function to find the average of odd numbers till a given odd number.\n\n Examples: \nassert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6", "510": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n\n Examples: \nassert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4", "511": "Write a python function to find minimum sum of factors of a given number.\n\n Examples: \nassert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2", "512": "Write a function to count the element frequency in the mixed nested tuple.\n\n Examples: \nassert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}", "513": "Write a function to convert tuple into list by adding the given string after every element.\n\n Examples: \nassert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']", "514": "Write a function to find the summation of tuple elements in the given tuple list.\n\n Examples: \nassert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95", "515": "Write a function to check if there is a subset with sum divisible by m.\n\n Examples: \nassert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False", "516": "Write a function to sort a list of elements using radix sort.\n\n Examples: \nassert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]", "517": "Write a python function to find the largest postive number from the given list.\n\n Examples: \nassert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1", "518": "Write a function to find the square root of a perfect number.\n\n Examples: \nassert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20", "519": "Write a function to calculate volume of a tetrahedron.\n\n Examples: \nassert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81", "520": "Write a function to find the lcm of the given array elements.\n\n Examples: \nassert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120", "521": "Write a function to print check if the triangle is scalene or not.\n\n Examples: \nassert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True", "522": "Write a function to find the longest bitonic subsequence for the given array.\n\n Examples: \nassert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5", "523": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\n Examples: \nassert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']", "524": "Write a function to find the sum of maximum increasing subsequence of the given array.\n\n Examples: \nassert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10", "525": "Write a python function to check whether two given lines are parallel or not.\n\n Examples: \nassert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True", "526": "Write a python function to capitalize first and last letters of each word of a given string.\n\n Examples: \nassert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"", "527": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\n\n Examples: \nassert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6", "528": "Write a function to find the list of lists with minimum length.\n\n Examples: \nassert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])", "529": "Write a function to find the nth jacobsthal-lucas number.\n\n Examples: \nassert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17", "530": "Write a function to find the ration of negative numbers in an array of integers.\n\n Examples: \nassert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44", "531": "Write a function to find minimum number of coins that make a given value.\n\n Examples: \nassert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2", "532": "Write a function to check if the two given strings are permutations of each other.\n\n Examples: \nassert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True", "533": "Write a function to remove particular data type elements from the given tuple.\n\n Examples: \nassert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]", "534": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\n Examples: \nassert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)", "535": "Write a function to find the top or bottom surface area of a cylinder.\n\n Examples: \nassert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264", "536": "Write a function to select the nth items of a list.\n\n Examples: \nassert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]", "537": "Write a python function to find the first repeated word in a given string.\n\n Examples: \nassert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"", "538": "Write a python function to convert a given string list to a tuple.\n\n Examples: \nassert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')", "539": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\n Examples: \nassert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]", "540": "Write a python function to find the difference between highest and least frequencies in a given array.\n\n Examples: \nassert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0", "541": "Write a function to find if the given number is abundant or not.\n\n Examples: \nassert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True", "542": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\n Examples: \nassert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'", "543": "Write a function to add two numbers and print number of digits of sum.\n\n Examples: \nassert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)", "544": "Write a function to flatten the tuple list to a string.\n\n Examples: \nassert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'", "545": "Write a python function to toggle only first and last bits of a given number.\n\n Examples: \nassert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5", "546": "Write a function to find the last occurrence of a character in a string.\n\n Examples: \nassert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None", "547": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\n Examples: \nassert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8", "548": "Write a function to find the length of the longest increasing subsequence of the given sequence.\n\n Examples: \nassert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ", "549": "Write a python function to find the sum of fifth power of first n odd natural numbers.\n\n Examples: \nassert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369", "550": "Write a python function to find the maximum element in a sorted and rotated array.\n\n Examples: \nassert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3", "551": "Write a function to extract a specified column from a given nested list.\n\n Examples: \nassert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]", "552": "Write a python function to check whether a given sequence is linear or not.\n\n Examples: \nassert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"", "553": "Write a function to convert the given tuple to a floating-point number.\n\n Examples: \nassert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123", "554": "Write a python function to find odd numbers from a mixed list.\n\n Examples: \nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "555": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\n Examples: \nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "556": "Write a python function to count the pairs with xor as an odd number.\n\n Examples: \nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "557": "Write a function to toggle characters case in a string.\n\n Examples: \nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "558": "Write a python function to find the digit distance between two integers.\n\n Examples: \nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "559": "Write a function to find the largest sum of contiguous subarray in the given array.\n\n Examples: \nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "560": "Write a function to find the union of elements of the given tuples.\n\n Examples: \nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "561": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\n Examples: \nassert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}", "562": "Write a python function to find the maximum length of sublist.\n\n Examples: \nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "563": "Write a function to extract values between quotation marks of a string.\n\n Examples: \nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "564": "Write a python function to count unequal element pairs from the given array.\n\n Examples: \nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "565": "Write a python function to split a string into characters.\n\n Examples: \nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "566": "Write a function to get the sum of a non-negative integer.\n\n Examples: \nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "567": "Write a function to check whether a specified list is sorted or not.\n\n Examples: \nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "568": "Write a function to create a list of empty dictionaries.\n\n Examples: \nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "569": "Write a function to sort each sublist of strings in a given list of lists.\n\n Examples: \nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "570": "Write a function to remove words from a given list of strings containing a character or string.\n\n Examples: \nassert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']", "571": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\n Examples: \nassert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21", "572": "Write a python function to remove two duplicate numbers from a given number of lists.\n\n Examples: \nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "573": "Write a python function to calculate the product of the unique numbers of a given list.\n\n Examples: \nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "574": "Write a function to find the surface area of a cylinder.\n\n Examples: \nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "575": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\n\n Examples: \nassert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16", "576": "Write a python function to check whether an array is subarray of another or not.\n\n Examples: \nassert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False", "577": "Write a python function to find the last digit in factorial of a given number.\n\n Examples: \nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "578": "Write a function to interleave lists of the same length.\n\n Examples: \nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "579": "Write a function to find the dissimilar elements in the given two tuples.\n\n Examples: \nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "580": "Write a function to extract the even elements in the nested mixed tuple.\n\n Examples: \nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "581": "Write a python function to find the surface area of the square pyramid.\n\n Examples: \nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "582": "Write a function to check if a dictionary is empty or not.\n\n Examples: \nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "583": "Write a function for nth catalan number.\n\n Examples: \nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "584": "Write a function to find all adverbs and their positions in a given sentence by using regex.\n\n Examples: \nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "585": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\n Examples: \nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "586": "Write a python function to split the array and add the first part to the end.\n\n Examples: \nassert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]", "587": "Write a function to convert a list to a tuple.\n\n Examples: \nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "588": "Write a python function to find the difference between largest and smallest value in a given array.\n\n Examples: \nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "589": "Write a function to find perfect squares between two given numbers.\n\n Examples: \nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "590": "Write a function to convert polar coordinates to rectangular coordinates.\n\n Examples: \nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "591": "Write a python function to interchange the first and last elements in a list.\n\n Examples: \nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "592": "Write a python function to find sum of product of binomial co-efficients.\n\n Examples: \nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "593": "Write a function to remove leading zeroes from an ip address.\n\n Examples: \nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ", "594": "Write a function to find the difference of first even and odd number of a given list.\n\n Examples: \nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "595": "Write a python function to count minimum number of swaps required to convert one binary string to another.\n\n Examples: \nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "596": "Write a function to find the size of the given tuple.\n\n Examples: \nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "597": "Write a function to find kth element from the given two sorted arrays.\n\n Examples: \nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8", "598": "Write a function to check whether the given number is armstrong or not.\n\n Examples: \nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "599": "Write a function to find sum and average of first n natural numbers.\n\n Examples: \nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "600": "Write a python function to check whether the given number is even or not using bitwise operator.\n\n Examples: \nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "601": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\n Examples: \nassert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5", "602": "Write a python function to find the first repeated character in a given string.\n\n Examples: \nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"", "603": "Write a function to get a lucid number smaller than or equal to n.\n\n Examples: \nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "604": "Write a function to reverse words in a given string.\n\n Examples: \nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "605": "Write a function to check if the given integer is a prime number.\n\n Examples: \nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "606": "Write a function to convert degrees to radians.\n\n Examples: \nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "607": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\n Examples: \nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "608": "Write a python function to find nth bell number.\n\n Examples: \nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "609": "Write a python function to find minimum possible value for the given periodic function.\n\n Examples: \nassert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9", "610": "Write a python function to remove the k'th element from a given list.\n\n Examples: \nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "611": "Write a function to find the maximum of nth column from the given tuple list.\n\n Examples: \nassert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11", "612": "Write a python function to merge the first and last elements separately in a list of lists.\n\n Examples: \nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "613": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n\n Examples: \nassert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]", "614": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n Examples: \nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "615": "Write a function to find average value of the numbers in a given tuple of tuples.\n\n Examples: \nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "616": "Write a function to perfom the modulo of tuple elements in the given two tuples.\n\n Examples: \nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "617": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n Examples: \nassert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1", "618": "Write a function to divide two lists using map and lambda function.\n\n Examples: \nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "619": "Write a function to move all the numbers in it to the given string.\n\n Examples: \nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "620": "Write a function to find the largest subset where each pair is divisible.\n\n Examples: \nassert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4", "621": "Write a function to increment the numeric values in the given strings by k.\n\n Examples: \nassert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']", "622": "Write a function to find the median of two sorted arrays of same size.\n\n Examples: \nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "623": "Write a function to find the n-th power of individual elements in a list using lambda function.\n\n Examples: \nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "624": "Write a python function to convert the given string to upper case.\n\n Examples: \nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "625": "Write a python function to interchange first and last elements in a given list.\n\n Examples: \nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "626": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\n\n Examples: \nassert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4", "627": "Write a python function to find the smallest missing number from the given array.\n\n Examples: \nassert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0", "628": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\n Examples: \nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "629": "Write a python function to find even numbers from a mixed list.\n\n Examples: \nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "630": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n Examples: \nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "631": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\n Examples: \nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "632": "Write a python function to move all zeroes to the end of the given list.\n\n Examples: \nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "633": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\n\n Examples: \nassert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4", "634": "Write a python function to find the sum of fourth power of first n even natural numbers.\n\n Examples: \nassert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664", "635": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\n\n Examples: \nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "636": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\n Examples: \nassert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"", "637": "Write a function to check whether the given amount has no profit and no loss\n\n Examples: \nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "638": "Write a function to calculate wind chill index.\n\n Examples: \nassert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116", "639": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n Examples: \nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "640": "Write a function to remove the parenthesis area in a string.\n\n Examples: \nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "641": "Write a function to find the nth nonagonal number.\n\n Examples: \nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "642": "Write a function to remove similar rows from the given tuple matrix.\n\n Examples: \nassert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}", "643": "Write a function that matches a word containing 'z', not at the start or end of the word.\n\n Examples: \nassert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')", "644": "Write a python function to reverse an array upto a given position.\n\n Examples: \nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "645": "Write a function to find the product of it\u2019s kth index in the given tuples.\n\n Examples: \nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210", "646": "Write a python function to count number of cubes of size k in a cube of size n.\n\n Examples: \nassert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1", "647": "Write a function to split a string at uppercase letters.\n\n Examples: \nassert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']", "648": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\n Examples: \nassert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ", "649": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\n Examples: \nassert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11", "650": "Write a python function to check whether the given two arrays are equal or not.\n\n Examples: \nassert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False", "651": "Write a function to check if one tuple is a subset of another tuple.\n\n Examples: \nassert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True", "652": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\n Examples: \nassert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'", "653": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\n Examples: \nassert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})", "654": "Write a function to find the perimeter of a rectangle.\n\n Examples: \nassert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12", "655": "Write a python function to find the sum of fifth power of n natural numbers.\n\n Examples: \nassert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276", "656": "Write a python function to find the minimum sum of absolute differences of two arrays.\n\n Examples: \nassert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6", "657": "Write a python function to find the first digit in factorial of a given number.\n\n Examples: \nassert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5", "658": "Write a function to find the item with maximum occurrences in a given list.\n\n Examples: \nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1", "659": "Write a python function to print duplicants from a list of integers.\n\n Examples: \nassert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]", "660": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\n\n Examples: \nassert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)", "661": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\n Examples: \nassert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27", "662": "Write a function to sort a list in a dictionary.\n\n Examples: \nassert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}", "663": "Write a function to find the largest possible value of k such that k modulo x is y.\n\n Examples: \nassert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12", "664": "Write a python function to find the average of even numbers till a given even number.\n\n Examples: \nassert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51", "665": "Write a python function to shift first element to the end of given list.\n\n Examples: \nassert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]", "666": "Write a function to count occurrence of a character in a string.\n\n Examples: \nassert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2", "667": "Write a python function to count number of vowels in the string.\n\n Examples: \nassert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2", "668": "Write a python function to replace multiple occurence of character by single.\n\n Examples: \nassert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'", "669": "Write a function to check whether the given ip address is valid or not using regex.\n\n Examples: \nassert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'", "670": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n\n Examples: \nassert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False", "671": "Write a python function to set the right most unset bit.\n\n Examples: \nassert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15", "672": "Write a function to find maximum of three numbers.\n\n Examples: \nassert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49", "673": "Write a python function to convert a list of multiple integers into a single integer.\n\n Examples: \nassert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789", "674": "Write a function to remove duplicate words from a given string using collections module.\n\n Examples: \nassert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")", "675": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\n\n Examples: \nassert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20", "676": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\n\n Examples: \nassert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'", "677": "Write a function to check if the triangle is valid or not.\n\n Examples: \nassert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True", "678": "Write a python function to remove spaces from a given string.\n\n Examples: \nassert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"", "679": "Write a function to access dictionary key\u2019s element by index.\n\n Examples: \nassert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'", "680": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\n\n Examples: \nassert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True", "681": "Write a python function to find the smallest prime divisor of a number.\n\n Examples: \nassert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31", "682": "Write a function to multiply two lists using map and lambda function.\n\n Examples: \nassert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]", "683": "Write a python function to check whether the given number can be represented by sum of two squares or not.\n\n Examples: \nassert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True", "684": "Write a python function to count occurences of a character in a repeated string.\n\n Examples: \nassert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7", "685": "Write a python function to find sum of prime numbers between 1 to n.\n\n Examples: \nassert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10", "686": "Write a function to find the frequency of each element in the given list.\n\n Examples: \nassert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'", "687": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\n Examples: \nassert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3", "688": "Write a function to get the length of a complex number.\n\n Examples: \nassert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138", "689": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\n Examples: \nassert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10", "690": "Write a function to multiply consecutive numbers of a given list.\n\n Examples: \nassert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]", "691": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\n Examples: \nassert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}", "692": "Write a python function to find the last two digits in factorial of a given number.\n\n Examples: \nassert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2", "693": "Write a function to remove multiple spaces in a string by using regex.\n\n Examples: \nassert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'", "694": "Write a function to extract unique values from the given dictionary values.\n\n Examples: \nassert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]", "695": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\n Examples: \nassert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True", "696": "Write a function to zip two given lists of lists.\n\n Examples: \nassert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]", "697": "Write a function to find number of even elements in the given list using lambda function.\n\n Examples: \nassert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3", "698": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\n Examples: \nassert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}", "699": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\n\n Examples: \nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3", "700": "Write a function to count the number of elements in a list which are within a specific range.\n\n Examples: \nassert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3", "701": "Write a function to find the equilibrium index of the given array.\n\n Examples: \nassert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1", "702": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\n Examples: \nassert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2", "703": "Write a function to check whether the given key is present in the dictionary or not.\n\n Examples: \nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False", "704": "Write a function to calculate the harmonic sum of n-1.\n\n Examples: \nassert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ", "705": "Write a function to sort a list of lists by length and value.\n\n Examples: \nassert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]", "706": "Write a function to find whether an array is subset of another array.\n\n Examples: \nassert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False", "707": "Write a python function to count the total set bits from 1 to n.\n\n Examples: \nassert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28", "708": "Write a python function to convert a string to a list.\n\n Examples: \nassert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']", "709": "Write a function to count unique keys for each value present in the tuple.\n\n Examples: \nassert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'", "710": "Write a function to access the initial and last data of the given tuple record.\n\n Examples: \nassert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)", "711": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\n Examples: \nassert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False", "712": "Write a function to remove duplicates from a list of lists.\n\n Examples: \nassert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]", "713": "Write a function to check if the given tuple contains all valid values or not.\n\n Examples: \nassert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True", "714": "Write a python function to count the number of distinct power of prime factor of given number.\n\n Examples: \nassert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1", "715": "Write a function to convert the given string of integers into a tuple.\n\n Examples: \nassert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)", "716": "Write a function to find the perimeter of a rombus.\n\n Examples: \nassert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16", "717": "Write a function to calculate the standard deviation.\n\n Examples: \nassert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577", "718": "Write a function to create a list taking alternate elements from another given list.\n\n Examples: \nassert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "719": "Write a function that matches a string that has an a followed by zero or more b's.\n\n Examples: \nassert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')", "720": "Write a function to add a dictionary to the tuple.\n\n Examples: \nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "721": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\n Examples: \nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ", "722": "Write a function to filter the height and width of students which are stored in a dictionary.\n\n Examples: \nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "723": "Write a function to count the same pair in two given lists using map function.\n\n Examples: \nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "724": "Write a function to calculate the sum of all digits of the base to the specified power.\n\n Examples: \nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62", "725": "Write a function to extract values between quotation marks of the given string by using regex.\n\n Examples: \nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "726": "Write a function to multiply the adjacent elements of the given tuple.\n\n Examples: \nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "727": "Write a function to remove all characters except letters and numbers using regex\n\n Examples: \nassert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ", "728": "Write a function to sum elements in two lists.\n\n Examples: \nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "729": "Write a function to add two lists using map and lambda function.\n\n Examples: \nassert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]", "730": "Write a function to remove consecutive duplicates of a given list.\n\n Examples: \nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "731": "Write a function to find the lateral surface area of a cone.\n\n Examples: \nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "732": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\n Examples: \nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "733": "Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n Examples: \nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "734": "Write a python function to find sum of products of all possible subarrays.\n\n Examples: \nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84", "735": "Write a python function to toggle bits of the number except the first and the last bit.\n\n Examples: \nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13", "736": "Write a function to locate the left insertion point for a specified value in sorted order.\n\n Examples: \nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "737": "Write a function to check whether the given string is starting with a vowel or not using regex.\n\n Examples: \nassert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'", "738": "Write a function to calculate the geometric sum of n-1.\n\n Examples: \nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "739": "Write a python function to find the index of smallest triangular number with n digits.\n\n Examples: \nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "740": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n Examples: \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "741": "Write a python function to check whether all the characters are same or not.\n\n Examples: \nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "742": "Write a function to caluclate the area of a tetrahedron.\n\n Examples: \nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "743": "Write a function to rotate a given list by specified number of items to the right direction.\n\n Examples: \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "744": "Write a function to check if the given tuple has any none value or not.\n\n Examples: \nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "745": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n\n Examples: \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "746": "Write a function to find area of a sector.\n\n Examples: \nassert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None", "747": "Write a function to find the longest common subsequence for the given three string sequence.\n\n Examples: \nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3", "748": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\n\n Examples: \nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "749": "Write a function to sort a given list of strings of numbers numerically.\n\n Examples: \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "750": "Write a function to add the given tuple to the given list.\n\n Examples: \nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "751": "Write a function to check if the given array represents min heap or not.\n\n Examples: \nassert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False", "752": "Write a function to find the nth jacobsthal number.\n\n Examples: \nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5", "753": "Write a function to find minimum k records from tuple list.\n\n Examples: \nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "754": "Write a function to find common index elements from three lists.\n\n Examples: \nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "755": "Write a function to find the second smallest number in a list.\n\n Examples: \nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None", "756": "Write a function that matches a string that has an a followed by zero or one 'b'.\n\n Examples: \nassert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')", "757": "Write a function to count the pairs of reverse strings in the given string list.\n\n Examples: \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ", "758": "Write a function to count number of unique lists within a list.\n\n Examples: \nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "759": "Write a function to check a decimal with a precision of 2.\n\n Examples: \nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False", "760": "Write a python function to check whether an array contains only one distinct element or not.\n\n Examples: \nassert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'", "761": "Write a function to caluclate arc length of an angle.\n\n Examples: \nassert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285", "762": "Write a function to check whether the given month number contains 30 days or not.\n\n Examples: \nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "763": "Write a python function to find the minimum difference between any two elements in a given array.\n\n Examples: \nassert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4", "764": "Write a python function to count numeric values in a given string.\n\n Examples: \nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3", "765": "Write a function to find nth polite number.\n\n Examples: \nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "766": "Write a function to iterate over all pairs of consecutive items in a given list.\n\n Examples: \nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "767": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\n Examples: \nassert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1", "768": "Write a python function to check for odd parity of a given number.\n\n Examples: \nassert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False", "769": "Write a python function to get the difference between two lists.\n\n Examples: \nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "770": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n Examples: \nassert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108", "771": "Write a function to check if the given expression is balanced or not.\n\n Examples: \nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "772": "Write a function to remove all the words with k length in the given string.\n\n Examples: \nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "773": "Write a function to find the occurrence and position of the substrings within a string.\n\n Examples: \nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "774": "Write a function to check if the string is a valid email address or not using regex.\n\n Examples: \nassert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'", "775": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\n Examples: \nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "776": "Write a function to count those characters which have vowels as their neighbors in the given string.\n\n Examples: \nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "777": "Write a python function to find the sum of non-repeated elements in a given array.\n\n Examples: \nassert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78", "778": "Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n Examples: \nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "779": "Write a function to count the number of unique lists within a list.\n\n Examples: \nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "780": "Write a function to find the combinations of sums with tuples in the given tuple list.\n\n Examples: \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "781": "Write a python function to check whether the count of divisors is even or odd.\n\n Examples: \nassert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"", "782": "Write a python function to find the sum of all odd length subarrays.\n\n Examples: \nassert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8", "783": "Write a function to convert rgb color to hsv color.\n\n Examples: \nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "784": "Write a function to find the product of first even and odd number of a given list.\n\n Examples: \nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "785": "Write a function to convert tuple string to integer tuple.\n\n Examples: \nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "786": "Write a function to locate the right insertion point for a specified value in sorted order.\n\n Examples: \nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "787": "Write a function that matches a string that has an a followed by three 'b'.\n\n Examples: \nassert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')", "788": "Write a function to create a new tuple from the given string and list.\n\n Examples: \nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "789": "Write a function to calculate the perimeter of a regular polygon.\n\n Examples: \nassert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63", "790": "Write a python function to check whether every even index contains even numbers of a given list.\n\n Examples: \nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "791": "Write a function to remove the nested record from the given tuple.\n\n Examples: \nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "792": "Write a python function to count the number of lists in a given number of lists.\n\n Examples: \nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "793": "Write a python function to find the last position of an element in a sorted array.\n\n Examples: \nassert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3", "794": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n Examples: \nassert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')", "795": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\n Examples: \nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]", "796": "Write function to find the sum of all items in the given dictionary.\n\n Examples: \nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "797": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n Examples: \nassert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40", "798": "Write a python function to find the sum of an array.\n\n Examples: \nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "799": "Write a python function to left rotate the bits of a given number.\n\n Examples: \nassert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792", "800": "Write a function to remove all whitespaces from a string.\n\n Examples: \nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')", "801": "Write a python function to count the number of equal numbers from three given integers.\n\n Examples: \nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "802": "Write a python function to count the number of rotations required to generate a sorted array.\n\n Examples: \nassert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3", "803": "Write a python function to check whether the given number is a perfect square or not.\n\n Examples: \nassert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False", "804": "Write a python function to check whether the product of numbers is even or not.\n\n Examples: \nassert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False", "805": "Write a function to find the list in a list of lists whose sum of elements is the highest.\n\n Examples: \nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ", "806": "Write a function to find maximum run of uppercase characters in the given string.\n\n Examples: \nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "807": "Write a python function to find the first odd number in a given list of numbers.\n\n Examples: \nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "808": "Write a function to check if the given tuples contain the k or not.\n\n Examples: \nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "809": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\n Examples: \nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "810": "Write a function to iterate over elements repeating each as many times as its count.\n\n Examples: \nassert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']", "811": "Write a function to check if two lists of tuples are identical or not.\n\n Examples: \nassert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True", "812": "Write a function to abbreviate 'road' as 'rd.' in a given string.\n\n Examples: \nassert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')", "813": "Write a function to find length of the string.\n\n Examples: \nassert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8", "814": "Write a function to find the area of a rombus.\n\n Examples: \nassert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4", "815": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\n Examples: \nassert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]", "816": "Write a function to clear the values of the given tuples.\n\n Examples: \nassert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()", "817": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n\n Examples: \nassert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]", "818": "Write a python function to count lower case letters in a given string.\n\n Examples: \nassert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5", "819": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\n Examples: \nassert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])", "820": "Write a function to check whether the given month number contains 28 days or not.\n\n Examples: \nassert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False", "821": "Write a function to merge two dictionaries into a single expression.\n\n Examples: \nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}", "822": "Write a function to return true if the password is valid.\n\n Examples: \nassert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False", "823": "Write a function to check if the given string starts with a substring using regex.\n\n Examples: \nassert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'", "824": "Write a python function to remove even numbers from a given list.\n\n Examples: \nassert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]", "825": "Write a python function to access multiple elements of specified index from a given list.\n\n Examples: \nassert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]", "826": "Write a python function to find the type of triangle from the given sides.\n\n Examples: \nassert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"", "827": "Write a function to sum a specific column of a list in a given list of lists.\n\n Examples: \nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9", "828": "Write a function to count alphabets,digits and special charactes in a given string.\n\n Examples: \nassert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)", "829": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\n\n Examples: \nassert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'", "830": "Write a function to round up a number to specific digits.\n\n Examples: \nassert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02", "831": "Write a python function to count equal element pairs from the given array.\n\n Examples: \nassert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0", "832": "Write a function to extract the maximum numeric value from a string by using regex.\n\n Examples: \nassert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343", "833": "Write a function to get dictionary keys as a list.\n\n Examples: \nassert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]", "834": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\n Examples: \nassert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]", "835": "Write a python function to find the slope of a line.\n\n Examples: \nassert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0", "836": "Write a function to find length of the subarray having maximum sum.\n\n Examples: \nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3", "837": "Write a python function to find the cube sum of first n odd natural numbers.\n\n Examples: \nassert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496", "838": "Write a python function to find minimum number swaps required to make two binary strings equal.\n\n Examples: \nassert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0", "839": "Write a function to sort the tuples alphabetically by the first item of each tuple.\n\n Examples: \nassert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]", "840": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\n Examples: \nassert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"", "841": "Write a function to count the number of inversions in the given array.\n\n Examples: \nassert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2", "842": "Write a function to find the number which occurs for odd number of times in the given array.\n\n Examples: \nassert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5", "843": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\n Examples: \nassert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408", "844": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\n\n Examples: \nassert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3", "845": "Write a python function to count the number of digits in factorial of a given number.\n\n Examples: \nassert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2", "846": "Write a function to find the minimum number of platforms required for a railway/bus station.\n\n Examples: \nassert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1", "847": "Write a python function to copy a list from a singleton tuple.\n\n Examples: \nassert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n", "848": "Write a function to find the area of a trapezium.\n\n Examples: \nassert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700", "849": "Write a python function to find sum of all prime divisors of a given number.\n\n Examples: \nassert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7", "850": "Write a function to check if a triangle of positive area is possible with the given angles.\n\n Examples: \nassert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False", "851": "Write a python function to find sum of inverse of divisors.\n\n Examples: \nassert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4", "852": "Write a python function to remove negative numbers from a list.\n\n Examples: \nassert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]", "853": "Write a python function to find sum of odd factors of a number.\n\n Examples: \nassert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1", "854": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\n Examples: \nassert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]", "855": "Write a python function to check for even parity of a given number.\n\n Examples: \nassert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True", "856": "Write a python function to find minimum adjacent swaps required to sort binary array.\n\n Examples: \nassert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2", "857": "Write a function to list out the list of given strings individually using map function.\n\n Examples: \nassert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]", "858": "Write a function to count number of lists in a given list of lists and square the count.\n\n Examples: \nassert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9", "859": "Write a function to generate all sublists of a given list.\n\n Examples: \nassert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]", "860": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\n Examples: \nassert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'", "861": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\n\n Examples: \nassert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]", "862": "Write a function to find the occurrences of n most common words in a given text.\n\n Examples: \nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]", "863": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\n Examples: \nassert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5", "864": "Write a function to find palindromes in a given list of strings using lambda function.\n\n Examples: \nassert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']", "865": "Write a function to print n-times a list using map function.\n\n Examples: \nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]", "866": "Write a function to check whether the given month name contains 31 days or not.\n\n Examples: \nassert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True", "867": "Write a python function to add a minimum number such that the sum of array becomes even.\n\n Examples: \nassert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2", "868": "Write a python function to find the length of the last word in a given string.\n\n Examples: \nassert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0", "869": "Write a function to remove sublists from a given list of lists, which are outside a given range.\n\n Examples: \nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]", "870": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\n Examples: \nassert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522", "871": "Write a python function to check whether the given strings are rotations of each other or not.\n\n Examples: \nassert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True", "872": "Write a function to check if a nested list is a subset of another nested list.\n\n Examples: \nassert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False", "873": "Write a function to solve the fibonacci sequence using recursion.\n\n Examples: \nassert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34", "874": "Write a python function to check if the string is a concatenation of another string.\n\n Examples: \nassert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False", "875": "Write a function to find the minimum difference in the tuple pairs of given tuples.\n\n Examples: \nassert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6", "876": "Write a python function to find lcm of two positive integers.\n\n Examples: \nassert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6", "877": "Write a python function to sort the given string.\n\n Examples: \nassert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"", "878": "Write a function to check if the given tuple contains only k elements.\n\n Examples: \nassert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False", "879": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\n Examples: \nassert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'", "880": "Write a python function to find number of solutions in quadratic equation.\n\n Examples: \nassert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"", "881": "Write a function to find the sum of first even and odd number of a given list.\n\n Examples: \nassert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11", "882": "Write a function to caluclate perimeter of a parallelogram.\n\n Examples: \nassert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144", "883": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n\n Examples: \nassert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]", "884": "Write a python function to check whether all the bits are within a given range or not.\n\n Examples: \nassert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ", "885": "Write a python function to check whether the two given strings are isomorphic to each other or not.\n\n Examples: \nassert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False", "886": "Write a function to add all the numbers in a list and divide it with the length of the list.\n\n Examples: \nassert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332", "887": "Write a python function to check whether the given number is odd or not using bitwise operator.\n\n Examples: \nassert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True", "888": "Write a function to substract the elements of the given nested tuples.\n\n Examples: \nassert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))", "889": "Write a function to reverse each list in a given list of lists.\n\n Examples: \nassert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]", "890": "Write a python function to find the index of an extra element present in one sorted array.\n\n Examples: \nassert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5", "891": "Write a python function to check whether the given two numbers have same number of digits or not.\n\n Examples: \nassert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True", "892": "Write a function to remove multiple spaces in a string.\n\n Examples: \nassert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')", "893": "Write a python function to get the last element of each sublist.\n\n Examples: \nassert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]", "894": "Write a function to convert the given string of float type into tuple.\n\n Examples: \nassert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)", "895": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n\n Examples: \nassert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44", "896": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\n Examples: \nassert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ", "897": "Write a python function to check whether the word is present in a given sentence or not.\n\n Examples: \nassert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False", "898": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\n\n Examples: \nassert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]", "899": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n\n Examples: \nassert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True", "900": "Write a function where a string will start with a specific number.\n\n Examples: \nassert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False", "901": "Write a function to find the smallest multiple of the first n numbers.\n\n Examples: \nassert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1", "902": "Write a function to combine two dictionaries by adding values for common keys.\n\n Examples: \nassert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})", "903": "Write a python function to count the total unset bits from 1 to n.\n\n Examples: \nassert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17", "904": "Write a function to return true if the given number is even else return false.\n\n Examples: \nassert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False", "905": "Write a python function to find the sum of squares of binomial co-efficients.\n\n Examples: \nassert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6", "906": "Write a function to extract year, month and date from a url by using regex.\n\n Examples: \nassert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]", "907": "Write a function to print the first n lucky numbers.\n\n Examples: \nassert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]", "908": "Write a function to find the fixed point in the given array.\n\n Examples: \nassert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0", "909": "Write a function to find the previous palindrome of a specified number.\n\n Examples: \nassert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111", "910": "Write a function to validate a gregorian date.\n\n Examples: \nassert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True", "911": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\n Examples: \nassert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520", "912": "Write a function to find ln, m lobb number.\n\n Examples: \nassert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20", "913": "Write a function to check for a number at the end of a string.\n\n Examples: \nassert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False", "914": "Write a python function to check whether the given string is made up of two alternating characters or not.\n\n Examples: \nassert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False", "915": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\n\n Examples: \nassert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]", "916": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n\n Examples: \nassert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)", "917": "Write a function to find the sequences of one upper case letter followed by lower case letters.\n\n Examples: \nassert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')", "918": "Write a function to count coin change.\n\n Examples: \nassert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1", "919": "Write a python function to multiply all items in the list.\n\n Examples: \nassert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18", "920": "Write a function to remove all tuples with all none values in the given tuple list.\n\n Examples: \nassert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'", "921": "Write a function to perform chunking of tuples each of size n.\n\n Examples: \nassert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]", "922": "Write a function to find a pair with the highest product from a given array of integers.\n\n Examples: \nassert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)", "923": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\n Examples: \nassert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6", "924": "Write a function to find maximum of two numbers.\n\n Examples: \nassert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10", "925": "Write a python function to calculate the product of all the numbers of a given tuple.\n\n Examples: \nassert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48", "926": "Write a function to find n-th rencontres number.\n\n Examples: \nassert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3", "927": "Write a function to calculate the height of the given binary tree.\n\n Examples: \nassert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4", "928": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n Examples: \nassert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'", "929": "Write a function to count repeated items of a tuple.\n\n Examples: \nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4", "930": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\n\n Examples: \nassert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'", "931": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\n Examples: \nassert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400", "932": "Write a function to remove duplicate words from a given list of strings.\n\n Examples: \nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']", "933": "Write a function to convert camel case string to snake case string by using regex.\n\n Examples: \nassert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'", "934": "Write a function to find the nth delannoy number.\n\n Examples: \nassert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681", "935": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\n Examples: \nassert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650", "936": "Write a function to re-arrange the given tuples based on the given ordered list.\n\n Examples: \nassert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]", "937": "Write a function to count the most common character in a given string.\n\n Examples: \nassert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')", "938": "Write a function to find three closest elements from three sorted arrays.\n\n Examples: \nassert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)", "939": "Write a function to sort a list of dictionaries using lambda function.\n\n Examples: \nassert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])", "940": "Write a function to sort the given array by using heap sort.\n\n Examples: \nassert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]", "941": "Write a function to count the elements in a list until an element is a tuple.\n\n Examples: \nassert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0", "942": "Write a function to check if any list element is present in the given list.\n\n Examples: \nassert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False", "943": "Write a function to combine two given sorted lists using heapq module.\n\n Examples: \nassert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]", "944": "Write a function to separate and print the numbers and their position of a given string.\n\n Examples: \nassert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9", "945": "Write a function to convert the given tuples into set.\n\n Examples: \nassert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}", "946": "Write a function to find the most common elements and their counts of a specified text.\n\n Examples: \nassert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]", "947": "Write a python function to find the length of the shortest word.\n\n Examples: \nassert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2", "948": "Write a function to get an item of a tuple.\n\n Examples: \nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')", "949": "Write a function to sort the given tuple list basis the total digits in tuple.\n\n Examples: \nassert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'", "950": "Write a function to display sign of the chinese zodiac for given year.\n\n Examples: \nassert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')", "951": "Write a function to find the maximum of similar indices in two lists of tuples.\n\n Examples: \nassert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]", "952": "Write a function to compute the value of ncr mod p.\n\n Examples: \nassert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1", "953": "Write a python function to find the minimun number of subsets with distinct elements.\n\n Examples: \nassert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1", "954": "Write a function that gives profit amount if the given amount has profit else return none.\n\n Examples: \nassert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None", "955": "Write a function to find out, if the given number is abundant.\n\n Examples: \nassert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False", "956": "Write a function to split the given string at uppercase letters by using regex.\n\n Examples: \nassert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']", "957": "Write a python function to get the position of rightmost set bit.\n\n Examples: \nassert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5", "958": "Write a function to convert an integer into a roman numeral.\n\n Examples: \nassert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")", "959": "Write a python function to find the average of a list.\n\n Examples: \nassert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2", "960": "Write a function to solve tiling problem.\n\n Examples: \nassert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5", "961": "Write a function to convert a roman numeral to an integer.\n\n Examples: \nassert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100", "962": "Write a python function to find the sum of all even natural numbers within the range l and r.\n\n Examples: \nassert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10", "963": "Write a function to calculate the discriminant value.\n\n Examples: \nassert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)", "964": "Write a python function to check whether the length of the word is even or not.\n\n Examples: \nassert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True", "965": "Write a function to convert camel case string to snake case string.\n\n Examples: \nassert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')", "966": "Write a function to remove an empty tuple from a list of tuples.\n\n Examples: \nassert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ", "967": "Write a python function to accept the strings which contains all vowels.\n\n Examples: \nassert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"", "968": "Write a python function to find maximum possible value for the given periodic function.\n\n Examples: \nassert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1", "969": "Write a function to join the tuples if they have similar initial elements.\n\n Examples: \nassert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]", "970": "Write a function to find minimum of two numbers.\n\n Examples: \nassert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20", "971": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\n Examples: \nassert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6", "972": "Write a function to concatenate the given two tuples to a nested tuple.\n\n Examples: \nassert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)", "973": "Write a python function to left rotate the string.\n\n Examples: \nassert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ", "974": "Write a function to find the minimum total path sum in the given triangle.\n\n Examples: \nassert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"}