{
  "1": "```python\nq = int(input())\nfor _ in range(q):\n    n, m, k = map(int, input().split())\n    max_nm = max(n, m)\n    if k < max_nm:\n        print(-1)\n    else:\n        if (n + m) % 2 == 0:\n            if (k - max_nm) % 2 == 0:\n                print(k)\n            else:\n                print(k - 2)\n        else:\n            print(k - 1)\n```",
  "3": "```python\nimport sys\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n, k = map(int, sys.stdin.readline().split())\n        a = list(map(int, sys.stdin.readline().split()))\n        a.sort()\n        res = 0\n        for i in range(1, k + 1):\n            res += a[-i - 1] if (n - i - 1) >= 0 else 0\n        res += a[-1] if n > 0 else 0\n        print(res)\n\nsolve()\n```",
  "4": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        ptr += 1\n        p = list(map(int, input[ptr:ptr + n]))\n        ptr += n\n        \n        pos = [0] * (n + 2)\n        for idx, num in enumerate(p):\n            pos[num] = idx\n        \n        res = []\n        left = right = pos[1]\n        res.append('1')\n        for m in range(2, n + 1):\n            left = min(left, pos[m])\n            right = max(right, pos[m])\n            if right - left + 1 == m:\n                res.append('1')\n            else:\n                res.append('0')\n        print(''.join(res))\n\nsolve()\n```",
  "5": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        ptr += 1\n        a = list(map(int, input[ptr:ptr + n]))\n        ptr += n\n        \n        max1 = max(a[:n])\n        max2 = max(a)\n        \n        res = []\n        # Check l1 = max1, l2 = n - max1\n        l1 = max1\n        l2 = n - l1\n        if l2 > 0:\n            # Check first l1 elements\n            seen = [False] * (l1 + 1)\n            ok = True\n            for num in a[:l1]:\n                if num > l1 or seen[num]:\n                    ok = False\n                    break\n                seen[num] = True\n            if ok:\n                # Check last l2 elements\n                seen = [False] * (l2 + 1)\n                for num in a[l1:]:\n                    if num > l2 or seen[num]:\n                        ok = False\n                        break\n                    seen[num] = True\n                if ok:\n                    res.append((l1, l2))\n        \n        # Check l1 = n - max2, l2 = max2\n        if max2 != max",
  "6": "```python\nimport sys\nfrom collections import deque\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    T = int(input[ptr])\n    ptr += 1\n    for _ in range(T):\n        n, m = map(int, input[ptr:ptr+2])\n        ptr +=2\n        adj = [[] for _ in range(n+1)]\n        in_degree = [0]*(n+1)\n        for __ in range(m):\n            x, y = map(int, input[ptr:ptr+2])\n            ptr +=2\n            adj[x].append(y)\n            in_degree[y] += 1\n        \n        q = deque()\n        for i in range(1, n+1):\n            if in_degree[i] == 0:\n                q.append(i)\n        \n        res = []\n        color = [0]*(n+1)\n        while q:\n            u = q.popleft()\n            if color[u] == 0:\n                for v in adj[u]:\n                    if color[v] == 0:\n                        color[v] = 1\n            else:\n                res.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v] == 0:\n                    q.append(v)\n        \n        print(len(res))\n        if res:\n            print(' '.join(map(str, sorted(res))) + ' ')\n",
  "8": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n, k = map(int, input[ptr:ptr+2])\n        ptr +=2\n        s = input[ptr]\n        ptr +=1\n        \n        res = 0\n        prev_win = -2  # initially no previous win\n        segments = []\n        \n        for i in range(n):\n            if s[i] == 'W':\n                if prev_win == i -1:\n                    res +=2\n                else:\n                    res +=1\n                prev_win = i\n            else:\n                pass\n        \n        if k ==0:\n            print(res)\n            continue\n        \n        # Now find the segments of L's between W's\n        l = 0\n        while l < n and s[l] == 'L':\n            l +=1\n        if l ==n:  # all L's\n            print(min(2*k -1, 2*n -1) if k >0 else 0)\n            continue\n        \n        r = n-1\n        while r >=0 and s[r] == 'L':\n            r -=1\n        \n        # collect the middle segments\n        segments_middle = []\n        current = l +1\n        while current <= r -1:\n            if s[current",
  "9": "```python\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        s = input().strip()\n        ones = []\n        current = 0\n        for c in s:\n            if c == '1':\n                current += 1\n            else:\n                if current > 0:\n                    ones.append(current)\n                    current = 0\n        if current > 0:\n            ones.append(current)\n        ones.sort(reverse=True)\n        alice = 0\n        for i in range(0, len(ones), 2):\n            alice += ones[i]\n        print(alice)\n\nsolve()\n```",
  "10": "```python\nimport sys\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        p = list(map(int, sys.stdin.readline().split()))\n        if n == 2:\n            print(2)\n            print(p[0], p[1])\n            continue\n        res = [p[0]]\n        for i in range(1, n-1):\n            if (p[i] > p[i-1] and p[i] > p[i+1]) or (p[i] < p[i-1] and p[i] < p[i+1]):\n                res.append(p[i])\n        res.append(p[-1])\n        print(len(res))\n        print(' '.join(map(str, res)) + ' ')\n\nsolve()\n```",
  "12": "```python\nimport sys\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        b = list(map(int, sys.stdin.readline().split()))\n        \n        possible = True\n        has_1 = False\n        has_neg1 = False\n        \n        for i in range(n):\n            if a[i] == 1:\n                has_1 = True\n            elif a[i] == -1:\n                has_neg1 = True\n        \n        for i in range(n):\n            diff = b[i] - a[i]\n            if i == 0:\n                if diff != 0:\n                    possible = False\n                    break\n            else:\n                if diff > 0:\n                    if not has_1:\n                        possible = False\n                        break\n                elif diff < 0:\n                    if not has_neg1:\n                        possible = False\n                        break\n        \n        print(\"YES\" if possible else \"NO\")\n\nsolve()\n```",
  "13": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    idx = 0\n    T = int(input[idx])\n    idx += 1\n    for _ in range(T):\n        n = int(input[idx])\n        g = int(input[idx+1])\n        b = int(input[idx+2])\n        idx += 3\n        \n        required = (n + 1) // 2\n        full_cycles = (required - 1) // g\n        remaining = required - full_cycles * g\n        \n        if full_cycles == 0:\n            days = remaining\n        else:\n            days = full_cycles * (g + b) + remaining\n        \n        print(max(days, n))\n\nsolve()\n```",
  "14": "```python\nt = int(input())\nfor _ in range(t):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    if (a1 == a2 and a1 == b1 + b2) or (a1 == b2 and a1 == b1 + a2) or (b1 == a2 and b1 == a1 + b2) or (b1 == b2 and b1 == a1 + a2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "15": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    area1 = max(x * b, (a - x - 1) * b)\n    area2 = max(a * y, a * (b - y - 1))\n    print(max(area1, area2))\n```",
  "17": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        res = 0\n        # We'll use a dictionary to keep track of counts of (a_i, a_j) pairs before j\n        count = defaultdict(int)\n        # We'll iterate over possible j and k, and for each pair (a_j, a_k), we'll add the count of (a_k, a_j) pairs seen before j\n        for k in range(n):\n            # l runs after k, so we need to count the number of (a_i, a_j) = (a_k, a_l) where i < j < k < l\n            # So during the k loop, we can precompute the counts of (a_j, a_l) where j < k and l > k\n            # But it's more efficient to, for each k, count the number of (a_i, a_j) = (a_k, a_l) where i < j < k and l > k\n            # So for each k, we can iterate j from 0 to k-1, and for each j, the number of l > k with a_l = a_j is the count of a_j in the suffix after k\n            # But to make it",
  "18": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    angle = math.pi / (4 * n)\n    side_length = 1.0 / math.sin(math.pi / (2 * n))\n    result = side_length * math.cos(angle)\n    print(\"{0:.9f}\".format(result))\n```",
  "19": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n, k, d = map(int, input[ptr:ptr+3])\n        ptr +=3\n        a = list(map(int, input[ptr:ptr+n]))\n        ptr +=n\n        \n        freq = defaultdict(int)\n        unique = 0\n        min_sub = float('inf')\n        \n        for i in range(n):\n            if freq[a[i]] == 0:\n                unique +=1\n            freq[a[i]] +=1\n            \n            if i >= d:\n                left = i - d\n                freq[a[left]] -=1\n                if freq[a[left]] == 0:\n                    unique -=1\n            if i >= d -1:\n                if unique < min_sub:\n                    min_sub = unique\n        print(min_sub)\n\nsolve()\n```",
  "20": "```python\nq = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    customers = []\n    for _ in range(n):\n        ti, li, hi = map(int, input().split())\n        customers.append((ti, li, hi))\n    \n    possible = True\n    prev_time = 0\n    low = m\n    high = m\n    for ti, li, hi in customers:\n        delta = ti - prev_time\n        new_low = low - delta\n        new_high = high + delta\n        low = max(new_low, li)\n        high = min(new_high, hi)\n        if low > high:\n            possible = False\n            break\n        prev_time = ti\n    print(\"YES\" if possible else \"NO\")\n```",
  "21": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    elements = list(map(int, input().split()))\n    s = set(elements)\n    found = -1\n    for k in range(1, 1024):\n        valid = True\n        for num in elements:\n            if (num ^ k) not in s:\n                valid = False\n                break\n        if valid:\n            found = k\n            break\n    print(found)\n```",
  "22": "```python\ndef compute_ak(a1, K):\n    current = a1\n    for _ in range(1, K):\n        digits = list(map(int, str(current)))\n        min_d = min(digits)\n        max_d = max(digits)\n        if min_d == 0:\n            break\n        current += min_d * max_d\n    return current\n\nt = int(input())\nfor _ in range(t):\n    a1, K = map(int, input().split())\n    print(compute_ak(a1, K))\n```",
  "23": "```python\nimport sys\nimport heapq\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        ptr += 1\n        voters = []\n        for _ in range(n):\n            m = int(input[ptr])\n            p = int(input[ptr+1])\n            voters.append((m, p))\n            ptr += 2\n        voters.sort()\n        res = 0\n        heap = []\n        current_size = 0\n        i = n - 1\n        while i >= 0:\n            m, p = voters[i]\n            heapq.heappush(heap, p)\n            while i >= 0 and voters[i][0] == current_size:\n                m, p = voters[i]\n                heapq.heappush(heap, p)\n                i -= 1\n            needed = current_size\n            while len(heap) > 0 and current_size < needed + (voters[i][0] if i >=0 else n) - needed:\n                res += heapq.heappop(heap)\n                current_size += 1\n        print(res)\n\nsolve()\n```",
  "24": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    if d == 0:\n        print(\"Y 0.000000000 0.000000000\")\n    else:\n        discriminant = d * d - 4 * d\n        if discriminant < 0:\n            print(\"N\")\n        else:\n            sqrt_discriminant = math.sqrt(discriminant)\n            a = (d + sqrt_discriminant) / 2\n            b = (d - sqrt_discriminant) / 2\n            print(f\"Y {a:.9f} {b:.9f}\")\n```",
  "26": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if n == 1 or m == 1:\n        print(\"YES\")\n    elif n == 2 and m == 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "27": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        ptr += 1\n        arr = list(map(int, input[ptr:ptr + n]))\n        ptr += n\n        \n        freq = defaultdict(int)\n        for num in arr:\n            if num % 2 == 1:\n                continue\n            c = num\n            cnt = 0\n            while c % 2 == 0:\n                c = c // 2\n                cnt += 1\n            freq[c] = max(freq[c], cnt)\n        \n        res = sum(freq.values())\n        print(res)\n\nsolve()\n```",
  "29": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    t = int(input[ptr])\n    ptr += 1\n    for _ in range(t):\n        n = int(input[ptr])\n        ptr += 1\n        a = list(map(int, input[ptr:ptr + n]))\n        ptr += n\n        \n        pos = defaultdict(list)\n        for idx, num in enumerate(a):\n            pos[num].append(idx)\n        \n        res = [float('inf')] * (n + 2)\n        for num in pos:\n            lst = pos[num]\n            max_gap = max(lst[0] + 1, (n - lst[-1]))\n            for i in range(1, len(lst)):\n                max_gap = max(max_gap, lst[i] - lst[i-1])\n            k = max_gap\n            res[k] = min(res[k], num)\n        \n        for k in range(2, n + 1):\n            res[k] = min(res[k], res[k - 1])\n        \n        output = []\n        for k in range(1, n + 1):\n            if res[k] != float('inf'):\n                output.append(str(res[k]))\n            else:\n                output.append(\"-1\")\n        print(' '.join(output))\n\nsolve()\n```",
  "30": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    res = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            res += 1\n    print((res + 1) // 2)\n```",
  "31": "```python\nimport sys\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        path = sys.stdin.readline().strip()\n        visited = set()\n        time = 0\n        x, y = 0, 0\n        for move in path:\n            new_x, new_y = x, y\n            if move == 'N':\n                new_y += 1\n            elif move == 'S':\n                new_y -= 1\n            elif move == 'E':\n                new_x += 1\n            elif move == 'W':\n                new_x -= 1\n            \n            segment1 = (x, y, new_x, new_y)\n            segment2 = (new_x, new_y, x, y)\n            if segment1 in visited or segment2 in visited:\n                time += 1\n            else:\n                time += 5\n                visited.add(segment1)\n                visited.add(segment2)\n            x, y = new_x, new_y\n        print(time)\n\nsolve()\n```",
  "32": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    T = int(input[0])\n    res = []\n    for i in range(1, T + 1):\n        N = int(input[i])\n        ans = 0\n        turn = 0  # 0 for Chanek's turn\n        while N > 0:\n            if N % 2 == 1:\n                if turn == 0:\n                    ans += 1\n                N -= 1\n            else:\n                if (N // 2) % 2 == 1 or N == 4:\n                    if turn == 0:\n                        ans += N // 2\n                    N = N // 2\n                else:\n                    if turn == 0:\n                        ans += 1\n                    N -= 1\n            turn ^= 1\n        res.append(ans)\n    print('\\n'.join(map(str, res)))\n\nsolve()\n```",
  "33": "```python\nimport sys\nimport math\n\ndef solve():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        res = []\n        current = n\n        a = n\n        b = n - 1\n        for _ in range(n - 1):\n            res.append((a, b))\n            current = (a + b + 1) // 2\n            a = current\n            b -= 1\n            if b == 0:\n                break\n        print(current)\n        for a, b in res:\n            print(a, b)\n\nsolve()\n```",
  "34": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print('7' + '1' * ((n - 3) // 2))\n    else:\n        print('1' * (n // 2))\n```",
  "35": "```python\nimport sys\n\ndef solve():\n    input = sys.stdin.read().split()\n    ptr = 0\n    T = int(input[ptr])\n    ptr += 1\n    for _ in range(T):\n        N = int(input[ptr])\n        ptr += 1\n        e = list(map(int, input[ptr:ptr+N]))\n        ptr += N\n        e.sort()\n        res = 0\n        current = 0\n        for num in e:\n            current += 1\n            if current >= num:\n                res += 1\n                current = 0\n        print(res)\n\nsolve()\n```",
  "36": "```python\nimport bisect\n\nn = int(input())\na = list(map(int, input().split()))\nprefix = [0] * (n + 1)\nfor i in range(1, n + 1):\n    prefix[i] = prefix[i-1] + a[i-1]\n\nm = int(input())\nqueries = list(map(int, input().split()))\n\nfor q in queries:\n    print(bisect.bisect_left(prefix, q))\n```"
}