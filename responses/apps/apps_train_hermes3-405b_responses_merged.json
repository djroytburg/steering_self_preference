{
  "1": "def solve(n, m, k):\n    if n + m > k:\n        return -1\n    if k - n - m == 0:\n        return 0\n    return min(n, m) + (k - n - m - min(n, m)) // 2\n\nq = int(input())\nfor _ in range(q):\n    n, m, k = map(int, input().split())\n    print(solve(n, m, k))",
  "3": "def solve(n, k, a):\n    a.sort()\n    min_val = a[0]\n    max_val = a[-1]\n    for i in range(k):\n        max_val += a[-i-2]\n    return max_val - min_val\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(n, k, a))",
  "4": "def beautifulNumbers(p):\n    n = len(p)\n    res = ['0'] * (n + 1)\n    for l in range(n):\n        max_val = 0\n        seen = set()\n        for r in range(l, n):\n            max_val = max(max_val, p[r])\n            seen.add(p[r])\n            if len(seen) == max_val:\n                res[max_val] = '1'\n    return ''.join(res[1:])\n\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(beautifulNumbers(p))",
  "5": "```python\ndef find_permutations(a):\n    n = len(a)\n    freq = [0] * (n + 1)\n    for x in a:\n        freq[x] += 1\n\n    def is_permutation(l, r):\n        for i in range(l, r + 1):\n            if freq[i] != 1:\n                return False\n        return True\n\n    ans = []\n    for i in range(1, n):\n        if is_permutation(1, i) and is_permutation(i + 1, n - 1):\n            ans.append((i, n - i))\n    return ans\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    permutations = find_permutations(a)\n    print(len(permutations))\n    for p in permutations:\n        print(*p)\n```",
  "6": "from collections import defaultdict, deque\n\ndef bfs(graph, start):\n    queue = deque([start])\n    visited = set([start])\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n    return visited\n\ndef solve(n, m, edges):\n    graph = defaultdict(list)\n    for x, y in edges:\n        graph[x].append(y)\n    \n    visited = bfs(graph, 1)\n    \n    closed = set()\n    for i in range(1, n+1):\n        if i not in visited:\n            closed.add(i)\n    \n    return len(closed), closed\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    \n    k, closed = solve(n, m, edges)\n    print(k)\n    print(*closed)",
  "8": "def maxScore(n, k, s):\n    score = 0\n    for i in range(n):\n        if s[i] == 'W':\n            if i > 0 and s[i-1] == 'W':\n                score += 2\n            else:\n                score += 1\n    return min(n, score + 2*k)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(maxScore(n, k, s))",
  "9": "def solve(s):\n    res = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            res += 1\n    return res // 2 + res % 2\n\nfor _ in range(int(input())):\n    s = input()\n    print(solve(s))",
  "10": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(n-1):\n        max_diff = max(max_diff, abs(p[i] - p[i+1]))\n    print(2)\n    print(p[0], p[n-1])",
  "12": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        \n        sum_a = sum(a)\n        sum_b = sum(b)\n        \n        if sum_a != sum_b:\n            print(\"NO\")\n        else:\n            diff = 0\n            for i in range(n):\n                diff += (b[i] - a[i])\n                if diff < 0:\n                    break\n            else:\n                print(\"YES\")\n                continue\n            print(\"NO\")\n\nsolve()",
  "13": "def solve(n, g, b):\n    half = (n + 1) // 2\n    if g >= half:\n        return n\n    else:\n        return half * (g + b) // g\n\nT = int(input())\nfor _ in range(T):\n    n, g, b = map(int, input().split())\n    print(solve(n, g, b))",
  "14": "t = int(input())\n\nfor _ in range(t):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n\n    if (a1 == a2 and b1 + b2 == a1) or (b1 == b2 and a1 + a2 == b1) or (a1 == b2 and a2 + b1 == a1) or (a2 == b1 and a1 + b2 == a2):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "15": "t = int(input())\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    print(max(x * b, (a - x - 1) * b, a * y, a * (b - y - 1)))",
  "17": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        \n        count = {}\n        for i in range(n):\n            if a[i] in count:\n                count[a[i]] += 1\n            else:\n                count[a[i]] = 1\n        \n        ans = 0\n        for key in count:\n            ans += (count[key] * (count[key] - 1)) // 2\n        \n        print(ans)\n\nsolve()",
  "18": "for _ in range(int(input())):\n    n = int(input())\n    print(2 * n / (2 ** 0.5))",
  "19": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, k, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        shows = set()\n        for i in range(d):\n            shows.add(a[i])\n        ans = len(shows)\n        for i in range(d, n):\n            shows.add(a[i])\n            if a[i - d] not in a[i - d + 1:i + 1]:\n                shows.remove(a[i - d])\n            ans = min(ans, len(shows))\n        print(ans)\n\nsolve()",
  "20": "q = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    customers = [list(map(int, input().split())) for _ in range(n)]\n    possible = True\n    for i in range(n-1):\n        if max(customers[i][1], customers[i+1][1]) <= min(customers[i][2], customers[i+1][2]):\n            continue\n        if customers[i+1][0] - customers[i][0] >= abs(customers[i+1][1] - customers[i][2]):\n            m += customers[i+1][1] - customers[i][2]\n        elif customers[i+1][0] - customers[i][0] >= abs(customers[i+1][2] - customers[i][1]):\n            m += customers[i+1][2] - customers[i][1]\n        else:\n            possible = False\n            break\n    print(\"YES\" if possible else \"NO\")",
  "21": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    for k in range(1, 1024):\n        new_S = [s ^ k for s in S]\n        if sorted(new_S) == sorted(S):\n            print(k)\n            break\n    else:\n        print(-1)",
  "22": "def minDigit(x):\n    return int(min(str(x)))\n\ndef maxDigit(x):\n    return int(max(str(x)))\n\nt = int(input())\nfor _ in range(t):\n    a1, K = map(int, input().split())\n    an = a1\n    for _ in range(K-1):\n        an += minDigit(an) * maxDigit(an)\n    print(an)",
  "23": "def solve():\n    n = int(input())\n    voters = [tuple(map(int, input().split())) for _ in range(n)]\n    voters.sort(key=lambda x: x[1], reverse=True)\n    ans = 0\n    while voters:\n        m, p = voters.pop()\n        if m < len(voters):\n            ans += p\n    return ans\n\nfor _ in range(int(input())):\n    print(solve())",
  "24": "import math\n\ndef solve(d):\n    if d == 0:\n        return 0, 0\n    if d == 1:\n        return None\n    a = (d + math.sqrt(d**2 - 4*d)) / 2\n    b = d - a\n    return a, b\n\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    res = solve(d)\n    if res is None:\n        print(\"N\")\n    else:\n        a, b = res\n        print(f\"Y {a:.9f} {b:.9f}\")",
  "26": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if (n * m) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "27": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        moves = 0\n        while any(x % 2 == 0 for x in a):\n            a = [x // 2 if x % 2 == 0 else x for x in a]\n            moves += 1\n        print(moves)\n\nsolve()",
  "29": "def amazingNumbers(a):\n    n = len(a)\n    ans = [-1] * n\n    last = {}\n    \n    for i in range(n):\n        if a[i] in last:\n            if i - last[a[i]] <= n - i:\n                ans[n - i] = max(ans[n - i], a[i])\n        last[a[i]] = i\n    \n    for i in range(n - 1, 0, -1):\n        ans[i] = max(ans[i], ans[i + 1])\n    \n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*amazingNumbers(a))",
  "30": "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(0, n, 2):\n        if s[i] == s[i+1]:\n            ans += 1\n    print(ans)",
  "31": "def solve(path):\n    visited = set([(0, 0)])\n    x, y = 0, 0\n    time = 0\n\n    for move in path:\n        if move == 'N':\n            y += 1\n        elif move == 'S':\n            y -= 1\n        elif move == 'W':\n            x -= 1\n        elif move == 'E':\n            x += 1\n\n        if (x, y) in visited:\n            time += 1\n        else:\n            time += 5\n            visited.add((x, y))\n\n    return time\n\nt = int(input())\nfor _ in range(t):\n    path = input()\n    print(solve(path))",
  "32": "def maxCoins(N):\n    if N % 3 == 0:\n        return N // 2\n    else:\n        return N - N // 2\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(maxCoins(N))",
  "33": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n//2 + 1)\n    for i in range(1, n//2 + 1):\n        print(n, n - i)\n    if n % 2 == 0:\n        print(n//2 + 1, n//2)\n    else:\n        print(n//2 + 1, 1)",
  "34": "def max_number(n):\n    if n % 2 == 0:\n        return int('1' * (n // 2))\n    else:\n        return int('7' + '1' * ((n - 3) // 2))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_number(n))",
  "35": "```python\ndef find_max_groups(inexperiences):\n    inexperiences.sort()\n    max_groups = 0\n    i = 0\n    while i < len(inexperiences):\n        group_size = inexperiences[i]\n        if i + group_size <= len(inexperiences):\n            max_groups += 1\n            i += group_size\n        else:\n            break\n    return max_groups\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    inexperiences = list(map(int, input().split()))\n    print(find_max_groups(inexperiences))\n```",
  "36": "n = int(input())\npiles = list(map(int, input().split()))\nm = int(input())\nqueries = list(map(int, input().split()))\n\ncumulative_sum = [0] * (n + 1)\nfor i in range(1, n + 1):\n    cumulative_sum[i] = cumulative_sum[i - 1] + piles[i - 1]\n\nfor q in queries:\n    pile = 0\n    for i in range(1, n + 1):\n        if cumulative_sum[i] >= q:\n            pile = i\n            break\n    print(pile)"
}