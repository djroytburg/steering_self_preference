{
  "1": "```python\n# Read input\nq = int(input())\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nfor query in queries:\n    x, y, k = query\n    if k < max(x, y) or k % 2 != (x + y) % 2:\n        print(-1)\n    else:\n        print(k)\n```",
  "3": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(1, n):\n        if k > 0:\n            a[-1] += a[i]\n            a[i] = 0\n            k -= 1\n    print(max(a) - min(a))\n```",
  "4": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    beautiful = [0] * n\n    max_seen = 0\n    for i in range(n):\n        max_seen = max(max_seen, p[i])\n        if max_seen == i + 1:\n            beautiful[i] = 1\n    print(''.join(map(str, beautiful)))\n```",
  "5": "```python\ndef find_permutations(t, test_cases):\n    results = []\n    for case in test_cases:\n        n = case[0]\n        a = case[1]\n        ones = [i for i in range(n) if a[i] == 1]\n        k = len(ones)\n        if k < 2:\n            results.append((0, []))\n        else:\n            diff = [ones[i+1] - ones[i] for i in range(k-",
  "6": "```python\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    tracks = [list(map(int, input().split())) for _ in range(m)]\n    \n    # Output\n    print(n // 7 * 4)\n    for i in range(1, n + 1):\n        if i % 7 > 3:\n            print(i, end=' ')\n```",
  "8": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    score = s.count('W')\n    diff = 0\n    for i in range(n):\n        if s[i] == 'W' and (i == 0 or s[i-1] == 'W'):\n            diff += 1\n        if s[i] == 'L':\n            diff -= 1\n    diff",
  "9": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    score = s.count('1')\n    print(score)\n```",
  "10": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_diff = 0\n    start = 0\n    end = 0\n    for i in range(1, n):\n        diff = abs(p[i] - p[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            start = i - 1\n            end = i\n   ",
  "12": "def can_make_equal(t, test_cases):\n    results = []\n    for case in test_cases:\n        n = case[0]\n        a = case[1]\n        b = case[2]\n        diff = [b[i] - a[i] for i in range(n)]\n        if all(x >= 0 for x in diff) and sum(diff) == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results",
  "13": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    n, g, b = map(int, input().split())\n    good_cycles = math.ceil(n / (2 * g - g))\n    ans = max(n, good_cycles * (g + b) - b)\n    print(ans)\n```",
  "14": "```python\nt = int(input())\nfor _ in range(t):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    if (a1 == a2 and b1 + b2 == a1) or (a1 == b2 and b1 + a2 == a1) or (b1 == a2 and a1 + b2 == b1) or (b1 == b",
  "15": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    print(max(a-x-1, x) * max(b-y-1, y))\n```",
  "17": "```python\nfrom collections import defaultdict\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = defaultdict(int)\n    ans = 0\n    for j in range(n):\n        for l in range(j + 1, n):\n            if a[j] == a[l]:\n                ans += count[a[j]]\n            count[a[l]] += 1\n    print(ans)\n```",
  "18": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(math.cos(math.pi/(4*n))/math.sin(math.pi/(2*n)))\n```",
  "19": "```python\nt = int(input())\nfor _ in range(t):\n    n, k, d = map(int, input().split())\n    shows = list(map(int, input().split()))\n    subscriptions = len(set(shows[:d]))\n    min_subscriptions = subscriptions\n    for i in range(d, n):\n        if shows[i-d] != shows[i]:\n            subscriptions -= 1\n            if shows.count(shows[i-d]) == 0:\n                subscriptions += 1\n",
  "20": "```python\nq = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    satisfied = True\n    max_temp = m\n    min_temp = m\n    prev_time = 0\n    for _ in range(n):\n        t, l, h = map(int, input().split())\n        time_diff = t - prev_time\n        max_temp = min(max_temp + time_diff, h)\n        min_temp = max(min_temp",
  "21": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    k = min(s)\n    for x in s:\n        k = k & x\n    if k in s:\n        print(k)\n    else:\n        print(-1)\n```",
  "22": "```python\nt = int(input())\nfor _ in range(t):\n    a, k = map(int, input().split())\n    for _ in range(k-1):\n        min_digit = min(str(a))\n        max_digit = max(str(a))\n        a += int(min_digit) * int(max_digit)\n    print(a)\n```",
  "23": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    voters = [list(map(int, input().split())) for _ in range(n)]\n    voters.sort()\n    total_coins = sum(v[1] for v in voters)\n    min_coins = total_coins\n    for i in range(n):\n        total_coins -= voters[i][1]\n        min_coins = min(min_coins, max(total_coins, voters[i",
  "24": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    if d < 4:\n        if d == 0:\n            print(\"Y 0.000000000 0.000000000\")\n        else:\n            print(\"N\")\n    else:\n        x = (d + math.sqrt(d*d - 4*d)) / 2\n        y = d - x\n        print(\"Y {:.9f} {:.",
  "26": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if n == 1 or m == 1 or (n == 2 and m == 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "27": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for num in a:\n        while num % 2 == 0:\n            num //= 2\n            count += 1\n    print(count)\n```",
  "29": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [-1] * n\n    last = {}\n    for i in range(n):\n        last[a[i]] = i\n        cur = i\n        for j in range(1, n // (i + 1) + 1):\n            if last.get(a[i - j + 1], -1) >=",
  "30": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    print(count//2)\n```",
  "31": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(1 + len(s) * 4)\n```",
  "32": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        ans += 1\n    print(ans)\n```",
  "33": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    for i in range(n-1, 0, -1):\n        print(n, i)\n```",
  "34": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print('1' * (n // 2))\n    else:\n        print('7' + '1' * ((n - 3) // 2))",
  "35": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    explorers = list(map(int, input().split()))\n    groups = 0\n    count = Counter(explorers)\n    for e in count:\n        groups += count[e] // e\n    print(groups)\n```",
  "36": "```python\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\nq = list(map(int, input().split()))\n\nprefix_sum = [0]\nfor i in range(n):\n    prefix_sum.append(prefix_sum[-1] + a[i])\n\nfor j in range(m):\n    for i in range(n):\n        if q[j] <= prefix_sum[i+1]:\n            print(i+1)\n            break\n```",
  "38": "```python\nt = int(input())\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(\"YES\" if max(a) > max(b) else \"NO\")\n```",
  "39": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    cost = [0] * n\n    cost[n-2] = 0\n    for i in range(n-3, -1, -1):\n        if s[i] == s[i+1]:\n            cost[i] = cost[i+1]\n        elif s[i] ==",
  "40": "```python\nfrom collections import Counter\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    max_freq = max(c.values())\n    print(n - max_freq)\n```",
  "42": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 == int(s[i:j+1], 2):\n                count += 1\n    print(count)\n```",
  "43": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    min_time = min(a) + min(b)\n    for i in range(n):\n        min_time = min(min_time, max(a[i], b[(i+1)%n]))\n    print(min_time)\n```",
  "44": "```python\nfrom math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(n):\n        print(4*n - 2*i, end=' ')\n```",
  "47": "```python\nt = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sum(a[i] * (-1) ** i for i in range(n)))\n```",
  "48": "```python\nt = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    trades_needed = (k * y + k - 1 + x - 2) // (x - 1) + k\n    print(trades_needed)\n```",
  "49": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = 0\n    for i in range(l, r+1):\n        if str(i).count('0') + str(i).count('1') + str(i).count('2') <= 3:\n            count += 1\n    print(count)",
  "50": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    jars = list(map(int, input().split()))\n    count_strawberry = jars.count(1)\n    count_blueberry = jars.count(2)\n    if count_strawberry == count_blueberry:\n        print(0)\n    else:\n        changes = abs(count_strawberry - count_blueberry) // 2\n        print(changes * 2)\n```",
  "51": "```python\n# Function to check if it is possible to have no winner of tournament\ndef is_possible(n, k, d1, d2):\n    if (n - k) % 3 == 0 and (n - k) // 3 >= max(d1, d2) and (n - k) // 3 - min(d1, d2) >= 0 and (d1 + d2) % 3 == 0:\n        return \"yes",
  "52": "```python\nn = int(input())\na = [int(input()) for _ in range(n)]\na.sort()\nresult = sum(a[i] * a[n-1-i] for i in range(n)) % 10007\nprint(result)\n```",
  "53": "```python\nt = int(input())\nfor _ in range(t):\n    n, s = input().split()\n    n = int(n)\n    min_seq = list(range(1, n+1))\n    max_seq = list(range(1, n+1))\n    if s[0] == '>':\n        min_seq = min_seq[::-1]\n    if s[-1] == '>':\n        max_seq = max_seq[::-1]\n    print(*min_seq)\n    print(*",
  "54": "```python\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if 2048 in s or sum(x for x in s if x < 2048) >= 2048:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "55": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n // 2 + 1)\n```",
  "56": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(0)\n    for i in range(n):\n        print('1' * (k // n) + '0' * (n - k // n))\n```",
  "57": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "58": "```python\nt = int(input())\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    if k == 1:\n        print(0)\n    else:\n        print((n*m-1) if k == n*m else (k-1))\n```",
  "59": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    missing = [x for x in a if x == -1]\n    a = [x for x in a if x != -1]\n    max_diff = 0\n    for i in range(1, len(a)):\n        max_diff = max(max_diff, abs(a[i] - a[i-1]))\n    if len",
  "60": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a ^ b)\n```",
  "61": "```python\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(n-2):\n        if p[i] < p[i+1] and p[i+1] > p[i+2]:\n            print(\"YES\")\n            print(i+1, i+2, i+3)\n            break\n    else:\n        print(\"NO\")\n```",
  "62": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    keyboard = [0]*26\n    for i in range(1, len(s)):\n        diff = abs(ord(s[i]) - ord(s[i-1]))\n        if diff == 1 or diff == 25:\n            continue\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n        print(\"\".join([chr((ord(s[0])-",
  "63": "```python\nfrom heapq import heappop, heappush\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    a.sort()\n    w_sum = sum(w)\n    max_heap = []\n    min_heap = []\n    for i in range(k):\n        heappush(max_heap, -a[-1])\n       ",
  "66": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n```",
  "68": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('1') + s.count('0') - 1)\n```",
  "69": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    s = input().strip()\n    s = '0' + s + '0'\n    cost = 0\n    for i in range(1, len(s)-1):\n        if s[i] == '1' and s[i-1] == '0' and s[i+1] == '0':\n            cost += a\n            s",
  "71": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    prefix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        ans = max(ans, -prefix_sum)\n    print(ans)\n```",
  "72": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set(a)\n    if len(s) > k:\n        print(-1)\n    else:\n        print(n*k)\n        print(*([*s]*k*n))\n```",
  "73": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mex = 0\n    operations = []\n    for i in range(2*n):\n        if mex in a:\n            mex += 1\n        else:\n            if mex < n:\n                a[a.index(max(a))] = mex\n                operations.append(a.index(mex)+1)\n            else:\n                break\n    print(len",
  "75": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(1 / math.cos(math.pi / (2 * n)))\n```",
  "76": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "78": "```python\nq = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    picture = [input() for _ in range(n)]\n    rows = [0] * n\n    cols = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == '*':\n                rows[i] += 1\n                cols[j] += 1\n    ans = n",
  "80": "```python\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    if l == r:\n        print(0)\n    else:\n        x = r - l\n        bit = 0\n        while x > 0:\n            bit += 1\n            x >>= 1\n        print((1 << bit) - 1)\n```",
  "81": "```python\nt = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    c = input()\n    if all((a[i] == c[i] or b[i] == c[i]) for i in range(len(a))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "82": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_prime = list(range(1, n+1))\n    for i in range(1, n-1, 2):\n        p_prime[i], p_prime[i+1] = p_prime[i+1], p_prime[i]\n    print(*p_prime)\n```",
  "83": "```python\nt = int(input())\nfor _ in range(t):\n    x, y, a, b = map(int, input().split())\n    if (y - x) % (a + b) == 0:\n        print((y - x) // (a + b))\n    else:\n        print(-1)\n```",
  "84": "```python\ndef stack_exterminable_subarrays(q, queries):\n    results = []\n    for query in queries:\n        n = query[0]\n        a = query[1]\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                stack = []\n                for k in range(i, j+1):\n                    if not stack or stack[-1] != a[k]:\n                        stack.append(a[k])\n                    else:\n                        stack",
  "85": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['0'] * n\n    for i in range(n):\n        if s[i] == '1':\n            if i - x >= 0:\n                w[i - x] = '1'\n            if i + x < n:\n                w[i + x] = '1'\n    reconstructed = ''.join(w)\n",
  "86": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ones = a.count(1)\n    zeros = n - ones\n    if ones <= n // 2:\n        print(zeros)\n        print(*[0]*zeros)\n    else:\n        print(ones - ones % 2)\n        print(*[1]*(ones - ones % 2))\n```",
  "87": "```python\nimport math\ndef count_ambiguous_pairs(m, d, w):\n    g = math.gcd(d-1, w)\n    return min(d-1, w) * (m-1) + (d-1) // g\n```",
  "88": "```python\nt = int(input())\nx = list(map(int, input().split()))\n\nfor num in x:\n    if num <= 14 or num >= 36:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n```",
  "89": "```python\nfrom collections import deque\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    depth = 0\n    max_depth = 0\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            depth += 1\n        max_depth = max(max_depth, depth)\n    print(max_depth + 1)\n```",
  "90": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    locked = [a[i] for i in range(n) if l[i] == 1]\n    unlocked = sorted([a[i] for i in range(n) if l[i] == 0])\n    unlocked_index = 0\n    for i in range(n):\n        if l[i",
  "91": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(1, n):\n        if q[i] != q[i-1]:\n            p[i] = q[i-1]\n    for i in range(n):\n        if p[i] == 0:\n            p[i] = n\n    if p.count(0",
  "92": "```python\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    if sorted(s) == sorted(t):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "93": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    presents_stack = list(map(int, input().split()))\n    presents_to_send = list(map(int, input().split()))\n    present_index = {present: index for index, present in enumerate(presents_stack)}\n    max_index = 0\n    time = 0\n    for present in presents_to_send:\n        present_pos = present_index[present]\n       ",
  "94": "```python\nt = int(input())\nfor _ in range(t):\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * n\n    s = set()\n    for i in range(n):\n        if T - a[i] in s:\n            c[i] = 1\n        s.add(a[i])\n    print(*c)\n```",
  "95": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(-1)\n    else:\n        print(\"2\" + \"3\" * (n-1))\n```",
  "97": "```python\nt = int(input())\nfor _ in range(t):\n    s, c = input().split()\n    if s >= c:\n        print(\"---\")\n    else:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] < c:\n                    print(s[:i] + s[j] + s[i+",
  "98": "```python\nq = int(input())\nfor _ in range(q):\n    c, m, x = map(int, input().split())\n    teams = min(c, m, (c + m + x) // 3)\n    print(teams)\n```",
  "99": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    clean_string = s.replace('10', '')\n    print(clean_string)\n```",
  "100": "```python\nt = int(input())\nfor _ in range(t):\n    r, g, b = map(int, input().split())\n    candies = [r, g, b]\n    candies.sort()\n    print(min(candies[0] + candies[1], sum(candies) // 2))\n```",
  "101": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, c, r = map(int, input().split())\n    if a > b:\n        a, b = b, a\n    ans = max(0, b - a - max(0, min(b, c + r) - max(a, c)))\n    print(ans)\n```",
  "102": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    for i in range(1, 10):\n        num = int(str(i) * len(str(n)))\n        if num <= n:\n            count += 1\n    print(count)\n```",
  "103": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    row_claimed = [False] * n\n    col_claimed = [False] * m\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                row_claimed[i] = True\n",
  "105": "```python\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_casts = 0\n    for i in range(n):\n        max_casts = max(max_casts, (a[i] + k - 1) // k)\n    print(max_casts)\n```",
  "106": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    segments.sort(key=lambda x: (x[0], -x[1]))\n    if segments[0][1] >= segments[1][0]:\n        print(-1)\n    else:\n        print(*[1 if i < n//2 else 2 for i in range(n)])\n```",
  "107": "```python\ndef special_box_possibility(A, B, C, D):\n    if (A % 2 == 1 and B + C + D == 0) or (B % 2 == 1 and A + C + D == 0) or (C % 2 == 1 and A + B + D == 0) or (D % 2 == 1 and A + B + C == 0):\n        return \"Ya Ya T",
  "108": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, a[i])\n        if max_val > i:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")",
  "110": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [i for i in range(1, n-1) if a[i-1] < a[i] and a[i] > a[i+1]]\n    max_peaks = 0\n    max_l = 1\n    for i in range(n-k+1):\n        num",
  "114": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    m = int(input())\n    heroes = [list(map(int, input().split())) for _ in range(m)]\n    heroes.sort(reverse=True)\n    days = 0\n    power_index = 0\n    for power, endurance in heroes:\n        while power_index < n and monsters[power_index] > power:\n",
  "116": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor_sum = 0\n    for num in a:\n        xor_sum ^= num\n    if xor_sum == 0:\n        print(0)\n    elif n < 3:\n        print(3 - n)\n        print(\"0 \" * (3 - n))\n    else:\n        print(1)\n        print(xor",
  "117": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    rows = [list(map(int, input().split())) for _ in range(n)]\n    cols = [list(map(int, input().split())) for _ in range(m)]\n    table = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            table[i][cols[j].index(rows[i",
  "118": "```python\nt = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    teams = 0\n    current_team = 0\n    for skill in a:\n        current_team += 1\n        if skill * current_team >= x:\n            teams += 1\n            current_team = 0\n    print(teams)\n```",
  "119": "```python\ndef max_good_subtree_size(q, queries):\n    result = []\n    for query in queries:\n        n = query[0]\n        result.append(n - 1)\n    return result\n```",
  "120": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if m == 0:\n        print(0)\n    elif m == 1:\n        print(n*(n+1)//2)\n    elif m == n:\n        print(1)\n    else:\n        print(n-m+1)\n```",
  "121": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[n] - a[n-1])\n```",
  "122": "def maxScore(cardPoints, k):\n    total = sum(cardPoints)\n    n = len(cardPoints)\n    window = n - k\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += cardPoints[i]\n        if i >= window:\n            current_sum -= cardPoints[i - window]\n        if i >= window - 1:\n            min_sum = min(min_sum, current_sum)\n    return total - min",
  "123": "def numMusicPlaylists(N, L, K):\n    MOD = 10**9 + 7\n    dp = [[0] * (L + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(1, L + 1):\n            dp[i][j] += dp[i - 1][j - 1] *",
  "124": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return True\n        while left < mid and nums[left] == nums[mid]:\n            left += 1\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else",
  "125": "pow(a, int(''.join(map(str, b))), 1337)",
  "126": "def maxFreq(s, maxLetters, minSize, maxSize):\n    substr_freq = {}\n    for i in range(len(s) - minSize + 1):\n        substr = s[i:i+minSize]\n        if len(set(substr)) <= maxLetters:\n            substr_freq[substr] = substr_freq.get(substr, 0) + 1\n    return max(substr_freq.values()) if substr_freq else 0",
  "127": "def profitableSchemes(G, P, group, profit):\n    MOD = 10**9 + 7\n    dp = [[0] * (P + 1) for _ in range(G + 1)]\n    dp[0][0] = 1\n    for g, p in zip(group, profit):\n        for i in range(G, -1, -1):\n            for j in range(P, -1, -1):\n                ng, np = min(i",
  "128": "```python\ndef calculate(s):\n    stack = []\n    operand = 0\n    res = 0\n    sign = 1\n    for char in s:\n        if char.isdigit():\n            operand = operand * 10 + int(char)\n        elif char in '+-':\n            res += sign * operand\n            operand = 0\n            sign = 1 if char == '+' else -1\n        elif char == '(':\n            stack.append(res)\n            stack.append(sign)\n",
  "129": "```python\ndef maxScoreSightseeingPair(A):\n    max_score = 0\n    prev_max = A[0]\n    for j in range(1, len(A)):\n        max_score = max(max_score, prev_max + A[j] - j)\n        prev_max = max(prev_max, A[j] + j)\n    return max_score\n```",
  "130": "```python\ndef numberOfArrays(s, k):\n    MOD = 10**9 + 7\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i - 1, max(i - 1 - len(str(k)), -1), -1):\n            if s[j] != '0' and int(s",
  "132": "def mincostTickets(days, costs):\n    dp = [0] * (days[-1] + 1)\n    for i in range(1, days[-1] + 1):\n        if i not in days:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = min(dp[max(0, i - 1)] + costs[0], dp[max(0, i - 7)] + costs[1], dp[max(",
  "133": "def balancedString(s):\n    from collections import Counter\n    count = Counter(s)\n    n = len(s)\n    res = n\n    i = 0\n    for j in range(n):\n        count[s[j]] -= 1\n        while i < n and all(count[c] <= n/4 for c in 'QWER'):\n            res = min(res, j - i + 1)\n            count[s[i]] += 1\n            i += 1\n   ",
  "135": "def validateStackSequences(pushed, popped):\n    stack = []\n    j = 0\n    for x in pushed:\n        stack.append(x)\n        while stack and j < len(popped) and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return j == len(popped)",
  "136": "```python\ndef maxIncreaseKeepingSkyline(grid):\n    max_row = [max(row) for row in grid]\n    max_col = [max(col) for col in zip(*grid)]\n    return sum(min(max_row[i], max_col[j]) - val for i, row in enumerate(grid) for j, val in enumerate(row))\n```",
  "137": "def minimumOperations(n: int) -> int:\n    count = 0\n    while n:\n        if n & 1 == 0:\n            n >>= 1\n        elif n & 2 == 0:\n            n -= 1\n        else:\n            n += 1\n        count += 1\n    return count",
  "138": "def getMaxLen(nums):\n    max_len = 0\n    pos = 0\n    neg = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n            if neg > 0:\n                neg += 1\n            max_len = max(max_len, pos)\n        elif num < 0:\n            temp = neg\n            neg = pos + 1\n            pos = temp\n            neg += 1\n            max_len",
  "139": "```python\ndef minDeletionSize(A):\n    return sum(list(A[i] > A[i+1] for i in range(len(A)-1)))\n```",
  "140": "```python\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        ans = 0\n        mask = 0\n        for i in range(31, -1, -1):\n            mask |= 1 << i\n            s = set()\n            for num in nums:\n                s.add(num & mask)\n            tmp = ans | (1 << i)\n            for prefix in s:\n                if tmp ^ prefix in s:\n                    ans",
  "141": "def numRescueBoats(people, limit):\n    people.sort()\n    i, j = 0, len(people) - 1\n    boats = 0\n    while i <= j:\n        if people[i] + people[j] <= limit:\n            i += 1\n        j -= 1\n        boats += 1\n    return boats",
  "142": "def findLUSlength(strs):\n    def issubsequence(s, t):\n        t = iter(t)\n        return all(c in t for c in s)\n    for s in sorted(strs, key=len, reverse=True):\n        if sum(issubsequence(s, t) for t in strs) == 1:\n            return len(s)\n    return -1",
  "143": "def totalFruit(tree):\n    max_fruits = 0\n    start = 0\n    fruit_count = {}\n    for end in range(len(tree)):\n        fruit_count[tree[end]] = fruit_count.get(tree[end], 0) + 1\n        while len(fruit_count) > 2:\n            fruit_count[tree[start]] -= 1\n            if fruit_count[tree[start]] == 0:\n                del fruit_count[tree[start]]\n            start += ",
  "144": "def minSteps(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i + minSteps(n // i)\n    return n",
  "145": "def judgePoint24(nums):\n    EPSILON = 0.001\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < EPSILON\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                newNums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                for op in ['+', '-', '*', '/']:\n                    if (op",
  "146": "def decodeString(s):\n    stack = []\n    currentNum = 0\n    currentString = ''\n    for char in s:\n        if char.isdigit():\n            currentNum = currentNum * 10 + int(char)\n        elif char == '[':\n            stack.append(currentString)\n            stack.append(currentNum)\n            currentString = ''\n            currentNum = 0\n        elif char == ']':\n            num = stack.pop()\n            prevString = stack.pop()\n            currentString = prevString",
  "147": "```python\nimport heapq\n\ndef maxPerformance(n, speed, efficiency, k):\n    mod = 10**9 + 7\n    engineers = zip(efficiency, speed)\n    engineers = sorted(engineers, key=lambda x: -x[0])\n    speed_heap = []\n    speed_sum, perf = 0, 0\n    for e, s in engineers:\n        if len(speed_heap) > k - 1:\n            speed_sum -= heapq.heappop(speed",
  "148": "class Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n        jobs = sorted(zip(difficulty, profit))\n        worker.sort()\n        ans = i = best = 0\n        for ability in worker:\n            while i < len(jobs) and ability >= jobs[i][0]:\n                best = max(jobs[i][1], best)\n                i += 1\n            ans += best\n        return ans",
  "149": "def removeDuplicates(s, k):\n    stack = []\n    for char in s:\n        if not stack or stack[-1][0] != char:\n            stack.append([char, 1])\n        else:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n    return ''.join(char * count for char, count in stack)",
  "150": "def partitionDisjoint(A):\n    max_left = A[0]\n    curr_max = A[0]\n    partition_idx = 0\n    for i in range(1, len(A)):\n        if A[i] < max_left:\n            max_left = curr_max\n            partition_idx = i\n        else:\n            curr_max = max(curr_max, A[i])\n    return partition_idx + 1",
  "152": "def maxDistance(position, m):\n    position.sort()\n    left, right = 1, position[-1] - position[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        count = 1\n        prev = position[0]\n        for i in range(1, len(position)):\n            if position[i] - prev >= mid:\n                count += 1\n                prev = position[i]\n        if count >= m",
  "154": "```python\ndef maxArea(h, w, horizontalCuts, verticalCuts):\n    horizontalCuts.sort()\n    verticalCuts.sort()\n    max_h = max(horizontalCuts[0], h - horizontalCuts[-1])\n    max_v = max(verticalCuts[0], w - verticalCuts[-1])\n    for i in range(1, len(horizontalCuts)):\n        max_h = max(max_h, horizontalCuts[i] - horizontalCuts[i-",
  "155": "```python\ndef maxJumps(arr, d):\n    n = len(arr)\n    dp = [1] * n\n    for a, i in sorted((a, i) for i, a in enumerate(arr)):\n        for j in range(i - 1, max(i - d - 1, -1), -1):\n            if arr[j] >= a:\n                break\n            dp[i] = max(dp[i], dp[j] + 1)\n        for j",
  "157": "```python\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for j in range(1, len(p) + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - ",
  "158": "```python\ndef kSimilarity(A, B):\n    import collections\n    queue = collections.deque([(A, B, 0)])\n    visited = set()\n    while queue:\n        a, b, k = queue.popleft()\n        if a == b:\n            return k\n        i = 0\n        while a[i] == b[i]:\n            i += 1\n        for j in range(i + 1, len(a)):\n            if a[j] == b",
  "159": "```python\ndef constrainedSubsetSum(nums, k):\n    dp = nums[:]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[j] for j in range(max(0, i - k), i)) + nums[i]\n    return max(dp)\n```",
  "160": "def stoneGame(piles):\n    return True",
  "161": "def isValidSerialization(preorder: str) -> bool:\n    slots = 1\n    for node in preorder.split(','):\n        if slots == 0:\n            return False\n        if node == '#':\n            slots -= 1\n        else:\n            slots += 1\n    return slots == 0",
  "162": "```python\ndef longestCommonSubsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp",
  "163": "def isSubsequence(s, t):\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)",
  "164": "```python\ndef minInteger(num: str, k: int) -> str:\n    n = len(num)\n    arr = [int(c) for c in num]\n    pos = [list() for _ in range(10)]\n    for i, c in enumerate(arr):\n        pos[c].append(i)\n    bit = [0] * (n + 1)\n\n    def update(x):\n        while x <= n:\n            bit[x] += 1\n            x += x",
  "165": "def findLongestWord(s, d):\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return \"\"",
  "166": "def minFlips(a: int, b: int, c: int) -> int:\n    return bin(a | b).count('1') - bin(c).count('1') + bin(a & b & c).count('1') * 2",
  "167": "def superEggDrop(K, N):\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    m = 0\n    while dp[m][K] < N:\n        m += 1\n        for i in range(1, K + 1):\n            dp[m][i] = dp[m - 1][i - 1] + dp[m - 1][i] + 1\n    return m",
  "168": "def canConstruct(s: str, k: int) -> bool:\n    if len(s) < k:\n        return False\n    if len(s) == k:\n        return True\n    char_count = collections.Counter(s)\n    odd_count = sum(1 for count in char_count.values() if count % 2 != 0)\n    return odd_count <= k",
  "169": "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 3 == 0:\n        return 3 ** (n // 3)\n    if n % 3 == 1:\n        return 3 ** ((n // 3) - 1) * 4\n    return 3 ** (n // 3) * 2",
  "170": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left = 0\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    right = n - 1\n    while right > 0 and arr[right - 1] <= arr[right]:\n        right -= 1\n    result = min(n - left -",
  "172": "def maxDiff(num):\n    s = str(num)\n    a = s.replace(max(s), '9')\n    b = s.replace(min(s), '1') if s[0] != '1' else s.replace(s[1], '0')\n    return int(a) - int(b)",
  "173": "def canArrange(arr, k):\n    count = [0] * k\n    for num in arr:\n        count[num % k] += 1\n    for i in range(1, k//2+1):\n        if count[i] != count[k-i]:\n            return False\n    return count[0] % 2 == 0",
  "174": "def lengthLongestPath(input: str) -> int:\n    paths = input.split('\\n')\n    stack = [-1]\n    max_length = 0\n    for path in paths:\n        depth = path.count('\\t')\n        while depth + 1 < len(stack):\n            stack.pop()\n        length = stack[-1] + len(path) - depth + 1\n        stack.append(length)\n        if '.' in path:\n            max_length = max(max_length, length)\n   ",
  "175": "def findIntegers(n):\n    x, y = 1, 2\n    while n:\n        if n & 3 == 3:\n            return y\n        if n & 2 == 2:\n            y = 0\n        n >>= 1\n        x, y = y, x + y\n    return x + y",
  "176": "def isScramble(s1, s2):\n    if s1 == s2:\n        return True\n    if sorted(s1) != sorted(s2):\n        return False\n    length = len(s1)\n    for i in range(1, length):\n        if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or (isScramble(s1[:i], s2[length",
  "177": "def minWindow(s: str, t: str) -> str:\n    from collections import Counter\n    if not s or not t:\n        return \"\"\n    dict_t = Counter(t)\n    required = len(dict_t)\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n    ans = float(\"inf\"), None, None\n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts",
  "178": "def lengthOfLIS(nums):\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
  "179": "```python\ndef getLengthOfOptimalCompression(s, k):\n    n = len(s)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n, -1, -1):\n        for j in range(k + 1):\n            if j > i:\n                dp[i][j] = float('inf')\n            elif i == n:\n                dp[i][j] = 0\n            else",
  "180": "```python\nimport heapq\n\ndef minRefuelStops(target, startFuel, stations):\n    pq = []  # A maxheap is simulated using negative values\n    stations.append((target, float('inf')))\n\n    ans = prev = 0\n    tank = startFuel\n    for location, capacity in stations:\n        tank -= location - prev\n        while pq and tank < 0:  # must refuel in past\n            tank += -heapq.heappop",
  "181": "def maxProfit(prices):\n    if not prices:\n        return 0\n    buy = -prices[0]\n    sell = 0\n    cooldown = 0\n    for price in prices:\n        buy = max(buy, cooldown - price)\n        cooldown = sell\n        sell = max(sell, buy + price)\n    return sell",
  "182": "def trap(height: List[int]) -> int:\n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n    result = 0\n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                result += left_max - height[left]\n            left += 1\n        else:\n            if height[right",
  "183": "def maxDotProduct(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[float('-inf')] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][",
  "185": "def hasAllCodes(s: str, k: int) -> bool:\n    n = len(s)\n    codes = set()\n    for i in range(n - k + 1):\n        codes.add(s[i:i+k])\n    return len(codes) == 2**k",
  "186": "def largestNumber(cost, target):\n    dp = [0] + [-1] * 5000\n    for c in cost:\n        for i in range(c, target + 1):\n            dp[i] = max(dp[i], dp[i - c] + 1)\n    if dp[target] < 0:\n        return \"0\"\n    res = \"\"\n    for i in range(8, -1, -1):\n        c = cost[i]\n        while target >=",
  "187": "```python\nimport math\n\nclass Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        maxProfit = -1\n        maxRotations = -1\n        waiting = 0\n        totalCustomers = 0\n        totalProfit = 0\n        \n        for i in range(len(customers)):\n            waiting += customers[i]\n            rotations = i + 1\n            boarded = min(4,",
  "189": "```python\ndef unhappyFriends(n, preferences, pairs):\n    preference_map = {}\n    for i in range(n):\n        preference_map[i] = preferences[i]\n    pair_map = {}\n    for pair in pairs:\n        pair_map[pair[0]] = pair[1]\n        pair_map[pair[1]] = pair[0]\n    unhappy_count = 0\n    for x in range(n):\n        y = pair_map[x]\n        for u in preference_map[x]:\n           ",
  "190": "def findLength(A, B):\n    dp = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n    max_length = 0\n    for i in range(1, len(A) + 1):\n        for j in range(1, len(B) + 1):\n            if A[i - 1] == B[j - 1]:\n                dp[i][j] = dp[i - 1][j -",
  "191": "```python\nclass Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        n = str(n)\n        k = len(n)\n        dp = [0] * k + [1]\n        for i in range(k-1, -1, -1):\n            for d in digits:\n                if d < n[i]:\n                    dp[i] += len(digits) ** (k - i - 1)\n                elif d",
  "192": "def maxCoins(piles):\n    piles.sort()\n    return sum(piles[len(piles)//3:len(piles)*2//3:2])",
  "193": "def minSetSize(arr):\n    counter = collections.Counter(arr)\n    sorted_counts = sorted(counter.values(), reverse=True)\n    target = len(arr) // 2\n    result = 0\n    for count in sorted_counts:\n        target -= count\n        result += 1\n        if target <= 0:\n            return result",
  "194": "def canPartitionKSubsets(nums, k):\n    target, rem = divmod(sum(nums), k)\n    if rem or max(nums) > target: return False\n    nums.sort()\n    while nums and nums[-1] == target:\n        nums.pop()\n        k -= 1\n    def search(groups):\n        if not nums: return True\n        v = nums.pop()\n        for i, group in enumerate(groups):\n            if group + v <= target:\n                groups[i]",
  "195": "def countTriplets(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            for k in range(len(A)):\n                if A[i] & A[j] & A[k] == 0:\n                    count += 1\n    return count",
  "196": "```python\ndef maxSubarraySumCircular(A):\n    max_kadane = kadane(A)\n    max_wrap = sum(A) - min_kadane(A)\n    return max(max_kadane, max_wrap) if max_wrap != 0 else max_kadane\n\ndef kadane(A):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in A:\n        curr_sum = max(num, curr_sum + num)\n        max_sum =",
  "197": "def isValid(s):\n    stack = []\n    for char in s:\n        if char == 'a':\n            stack.append(char)\n        elif char == 'b':\n            if stack and stack[-1] == 'a':\n                stack.pop()\n            else:\n                return False\n        elif char == 'c':\n            if stack and stack[-1] == 'b':\n                stack.pop()\n            else:\n                return False\n    return not stack",
  "198": "```python\ndef equalSubstring(s, t, maxCost):\n    start = 0\n    end = 0\n    max_length = 0\n    while end < len(s):\n        maxCost -= abs(ord(s[end]) - ord(t[end]))\n        while maxCost < 0:\n            maxCost += abs(ord(s[start]) - ord(t[start]))\n            start += 1\n        max_length = max(max_length, end - start + 1)\n        end += ",
  "199": "```python\ndef longestConsecutive(nums):\n    num_set = set(nums)\n    max_length = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            max_length = max(max_length, current_length)\n    return max_length\n```",
  "200": "def findMinFibonacciNumbers(k):\n    fib = [1, 1]\n    while fib[-1] < k:\n        fib.append(fib[-1] + fib[-2])\n    count = 0\n    index = len(fib) - 1\n    while k > 0:\n        if fib[index] <= k:\n            k -= fib[index]\n            count += 1\n        index -= 1\n    return count",
  "201": "class Solution:\n    def numTrees(self, n: int) -> int:\n        G = [0] * (n + 1)\n        G[0], G[1] = 1, 1\n\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                G[i] += G[j - 1] * G[i - j]\n\n        return G[n]",
  "202": "```python\ndef longestMountain(A):\n    n = len(A)\n    ans = base = 0\n\n    while base < n:\n        end = base\n        if end + 1 < n and A[end] < A[end + 1]:\n            while end + 1 < n and A[end] < A[end + 1]:\n                end += 1\n            if end + 1 < n and A[end] > A[end + 1]:\n                while end +",
  "203": "def uniquePaths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]",
  "205": "from typing import List\ndef findMaxForm(strs: List[str], m: int, n: int) -> int:\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for s in strs:\n        zeros, ones = s.count('0'), s.count('1')\n        for i in range(m, zeros - 1, -1):\n            for j in range(n, ones - 1, -1):\n               ",
  "206": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for length in range(1, n):\n            for i in range(n - length):\n                j = i + length\n                dp[i][j] = max(nums[i] - dp[i+1][j],",
  "207": "```python\nfrom functools import cmp_to_key\nclass Solution:\n    def largestNumber(self, nums):\n        nums = list(map(str, nums))\n        nums.sort(key=cmp_to_key(lambda x, y: int(y + x) - int(x + y)))\n        return str(int(''.join(nums)))\n```",
  "208": "def predictPartyVictory(s: str) -> str:\n    queue = collections.deque()\n    cnt = collections.Counter(s)\n    while all(cnt.values()):\n        for x in 'RD':\n            if cnt[x] > 0:\n                queue.append(x)\n                cnt[x] -= 1\n    return 'Radiant' if queue[0] == 'R' else 'Dire'",
  "209": "```python\nimport heapq\ndef mergeStones(stones, K):\n    n = len(stones)\n    if (n - 1) % (K - 1) != 0:\n        return -1\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + stones[i]\n    dp = [[0] * n for _ in range(n)]\n    for m in range",
  "210": "def containsNearbyAlmostDuplicate(nums, k, t):\n    if t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        key = n if not t else n // t\n        for m in (window.get(key - 1), window.get(key), window.get(key + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        if len(window) == k:\n           ",
  "211": "def maxUniqueSplit(s):\n    seen = set()\n    def backtrack(start):\n        if start == len(s):\n            return 0\n        max_unique = 0\n        for end in range(start+1, len(s)+1):\n            if s[start:end] not in seen:\n                seen.add(s[start:end])\n                max_unique = max(max_unique, 1 + backtrack(end))\n                seen.remove(s[start:end])\n        return max_unique\n    return backtrack(0)",
  "212": "```python\ndef numFactoredBinaryTrees(A):\n    A.sort()\n    dp = {}\n    for a in A:\n        dp[a] = 1\n        for b in dp:\n            if a % b == 0 and a // b in dp:\n                dp[a] += dp[b] * dp[a // b]\n    return sum(dp.values()) % (10 ** 9 + 7)\n```",
  "213": "def myPow(x, n):\n    if n < 0:\n        x = 1 / x\n        n = -n\n    result = 1\n    while n:\n        if n % 2:\n            result *= x\n        x *= x\n        n //= 2\n    return result",
  "214": "```python\ndef movesToMakeZigzag(nums):\n    total1 = total2 = 0\n    for i in range(len(nums)):\n        left = nums[i - 1] if i - 1 >= 0 else float('inf')\n        right = nums[i + 1] if i + 1 < len(nums) else float('inf')\n        total1 += max(0, nums[i] - min(left, right) + 1) if i % ",
  "215": "def isGoodArray(nums):\n    from math import gcd\n    g = nums[0]\n    for num in nums[1:]:\n        g = gcd(g, num)\n    return g == 1",
  "216": "def minNumberOfFrogs(croakOfFrogs: str) -> int:\n    if len(croakOfFrogs) % 5 != 0:\n        return -1\n    count = {'c': 0, 'r': 0, 'o': 0, 'a': 0, 'k': 0}\n    max_frogs = 0\n    for char in croakOfFrogs:\n        if char == '",
  "217": "class Solution:\n    def subarrayBitwiseORs(self, A: List[int]) -> int:\n        ans = set()\n        cur = set()\n        for x in A:\n            cur = {x | y for y in cur} | {x}\n            ans |= cur\n        return len(ans)",
  "218": "```python\ndef orderlyQueue(S, K):\n    if K == 1:\n        return min(S[i:] + S[:i] for i in range(len(S)))\n    else:\n        return ''.join(sorted(S))\n```",
  "219": "def longestWPI(hours):\n    max_length = 0\n    score = 0\n    score_map = {}\n    for i, hour in enumerate(hours):\n        score = score + 1 if hour > 8 else score - 1\n        if score > 0:\n            max_length = i + 1\n        else:\n            if score - 1 in score_map:\n                max_length = max(max_length, i - score_map[score - 1])\n            else",
  "220": "```python\ndef maxSatisfied(customers, grumpy, X):\n    satisfied = sum(c for c, g in zip(customers, grumpy) if not g)\n    max_extra = extra = sum(customers[i] for i in range(X) if grumpy[i])\n    for i in range(X, len(customers)):\n        extra += customers[i] * grumpy[i] - customers[i - X] * grumpy[i - X]\n        max_extra = max(max_extra",
  "221": "def longestDupSubstring(S):\n        def search(L, n, base, MOD, nums):\n            h = 0\n            for i in range(L):\n                h = (h * base + nums[i]) % MOD\n            seen = {h}\n            baseL = pow(base, L, MOD)\n            for start in range(1, n - L + 1):\n                h = (h * base - nums[start - 1] * baseL + nums[start + L",
  "223": "def hIndex(citations):\n    n = len(citations)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if citations[mid] == n - mid:\n            return n - mid\n        elif citations[mid] < n - mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return n - left",
  "224": "def numDistinct(S, T):\n    dp = [[0] * (len(T) + 1) for _ in range(len(S) + 1)]\n    for i in range(len(S) + 1):\n        dp[i][0] = 1\n    for i in range(1, len(S) + 1):\n        for j in range(1, len(T) + 1):\n            if S[i - 1] == T[j - 1]:\n",
  "225": "def pushDominoes(dominoes: str) -> str:\n    dominoes = 'L' + dominoes + 'R'\n    result = []\n    left = 0\n    for right in range(1, len(dominoes)):\n        if dominoes[right] == '.':\n            continue\n        middle = right - left - 1\n        if left:\n            result.append('L')\n        if dominoes[left] == dominoes[right]:\n           ",
  "226": "```python\nfrom collections import Counter\nfrom math import isqrt\nfrom itertools import permutations\n\ndef numSquarefulPerms(A):\n    count = Counter(A)\n    graph = {x: {y for y in count if isqrt(x + y) ** 2 == x + y} for x in count}\n    def dfs(x, todo):\n        count[x] -= 1\n        if todo == 0:\n            ans = 1\n        else:\n            ans = ",
  "228": "```python\ndef maxVowels(s, k):\n    vowels = set('aeiou')\n    max_vowels = curr_vowels = sum(ch in vowels for ch in s[:k])\n    for i in range(k, len(s)):\n        curr_vowels += (s[i] in vowels) - (s[i - k] in vowels)\n        max_vowels = max(max_vowels, curr_vowels)\n    return max_vowels\n```",
  "229": "def canReorderDoubled(A):\n    count = collections.Counter(A)\n    for x in sorted(A, key=abs):\n        if count[x] == 0: continue\n        if count[2*x] == 0: return False\n        count[x] -= 1\n        count[2*x] -= 1\n    return True",
  "230": "def removeKdigits(num, k):\n    stack = []\n    for digit in num:\n        while k and stack and stack[-1] > digit:\n            stack.pop()\n            k -= 1\n        stack.append(digit)\n    return ''.join(stack[:-k or None]).lstrip('0') or '0'",
  "231": "def firstMissingPositive(nums):\n    i = 0\n    n = len(nums)\n    while i < n:\n        if 0 < nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        else:\n            i += 1\n    for i in range(n):\n        if nums[i] != i + 1",
  "232": "def findPoisonedDuration(timeSeries, duration):\n    if not timeSeries:\n        return 0\n    total_time = 0\n    for i in range(1, len(timeSeries)):\n        total_time += min(timeSeries[i] - timeSeries[i-1], duration)\n    return total_time + duration",
  "234": "```python\ndef minAddToMakeValid(S):\n    stack = []\n    for char in S:\n        if char == '(':\n            stack.append(char)\n        elif stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(char)\n    return len(stack)\n```",
  "236": "def minFlipsMonoIncr(S):\n    dp = [0, 0]\n    for i in range(len(S)):\n        dp[int(S[i])] = dp[int(S[i])] + 1\n        dp[1] = min(dp)\n    return dp[0]",
  "237": "def numSubarraysWithSum(A, S):\n    count = 0\n    prefix_sum = 0\n    sum_count = {0: 1}\n    for num in A:\n        prefix_sum += num\n        if prefix_sum - S in sum_count:\n            count += sum_count[prefix_sum - S]\n        if prefix_sum in sum_count:\n            sum_count[prefix_sum] += 1\n        else:\n            sum_count[prefix_sum] = 1\n   ",
  "239": "from collections import Counter\nfrom heapq import *\ndef largestValsFromLabels(values, labels, num_wanted, use_limit):\n    hq = []\n    for v, l in zip(values, labels):\n        heappush(hq, (-v, l))\n    cnt = Counter()\n    res = 0\n    while hq and num_wanted > 0:\n        v, l = heappop(hq)\n        if cnt[l] < use_limit:\n            res -= v",
  "240": "```python\nfrom collections import Counter\ndef frequencySort(s):\n    counts = Counter(s)\n    sorted_chars = sorted(counts, key=lambda x: (-counts[x], x))\n    return ''.join(char * counts[char] for char in sorted_chars)\n```",
  "241": "def isRobotBounded(instructions: str) -> bool:\n    x, y, dx, dy = 0, 0, 0, 1\n    for _ in range(4):\n        for i in instructions:\n            if i == 'R':\n                dx, dy = dy, -dx\n            if i == 'L':\n                dx, dy = -dy, dx\n            if i == 'G':\n                x, y = x + dx, y +",
  "243": "def flipgame(fronts, backs):\n    same = {x for i, x in enumerate(fronts) if x == backs[i]}\n    return min([x for x in fronts + backs if x not in same] or [0])",
  "244": "def numSteps(s):\n    steps = 0\n    num = int(s, 2)\n    while num != 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num += 1\n        steps += 1\n    return steps",
  "245": "def optimalDivision(nums):\n    nums = list(map(str, nums))\n    if len(nums) <= 2:\n        return '/'.join(nums)\n    return '{}/({})'.format(nums[0], '/'.join(nums[1:]))",
  "248": "```python\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        def dfs(x, y, px, py, color):\n            if visited[x][y]:\n                return True\n            visited[x][y] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if",
  "250": "import heapq\n\ndef mincostToHireWorkers(quality, wage, K):\n    workers = sorted((w / q, q) for w, q in zip(wage, quality))\n    res = float('inf')\n    pool = []\n    sumq = 0\n    for ratio, q in workers:\n        heapq.heappush(pool, -q)\n        sumq += q\n        if len(pool) > K:\n            sumq += heapq.heappop(pool)\n       ",
  "251": "```python\ndef clumsy(N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 6\n    elif N == 4:\n        return 7\n    else:\n        if N % 4 == 0:\n            return N + 1\n        elif N % 4 <= 2:\n            return N + 2\n        else:\n            return N - ",
  "252": "def minTaps(n, ranges):\n    max_range = [0] * (n + 1)\n    for i in range(n + 1):\n        left, right = max(i - ranges[i], 0), min(i + ranges[i], n)\n        max_range[left] = max(max_range[left], right)\n    curr_end, next_end, taps = 0, 0, 0\n    for i in range(n + 1):\n        next_end = max",
  "253": "```python\ndef findMinMoves(machines):\n    total = sum(machines)\n    n = len(machines)\n    if total % n != 0:\n        return -1\n    target = total // n\n    res = 0\n    preSum = 0\n    for num in machines:\n        num -= target\n        preSum += num\n        res = max(res, abs(preSum), num)\n    return res\n```",
  "254": "def countNumbersWithUniqueDigits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    result = 10\n    unique_digits = 9\n    available_digits = 9\n    for i in range(2, n + 1):\n        unique_digits = unique_digits * available_digits\n        result += unique_digits\n        available_digits -= 1\n    return result",
  "255": "def jump(nums):\n    if len(nums) <= 1:\n        return 0\n    max_reach, steps, last_jump_index = nums[0], 1, nums[0]\n    for i in range(1, len(nums)):\n        if i > max_reach:\n            return -1\n        if i > last_jump_index:\n            steps += 1\n            last_jump_index = max_reach\n        max_reach = max(max_reach, i + nums",
  "256": "```python\nimport math\nclass Solution:\n    def minEatingSpeed(self, piles, H):\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            if sum(math.ceil(pile / mid) for pile in piles) > H:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n```",
  "257": "import heapq\n\ndef maxProbability(n, edges, succProb, start, end):\n    graph = {i: [] for i in range(n)}\n    for i, (a, b) in enumerate(edges):\n        graph[a].append((b, succProb[i]))\n        graph[b].append((a, succProb[i]))\n\n    pq = [(-1, start)]\n    probs = [0] * n\n    while pq:\n        prob, node = heapq.heappop(pq",
  "259": "def smallestDivisor(nums, threshold):\n    left, right = 1, max(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if sum((x + mid - 1) // mid for x in nums) > threshold:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
  "260": "def wiggleMaxLength(nums):\n    if len(nums) < 2:\n        return len(nums)\n    up, down = 1, 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            up = down + 1\n        elif nums[i] < nums[i-1]:\n            down = up + 1\n    return max(up, down)",
  "261": "import heapq\ndef findKthLargest(nums, k):\n    return heapq.nlargest(k, nums)[-1]",
  "263": "```python\ndef knightDialer(n):\n    moves = {\n        0: [4, 6],\n        1: [6, 8],\n        2: [7, 9],\n        3: [4, 8],\n        4: [0, 3, 9],\n        6: [0, 1, 7],\n        7: [2, 6],\n        8: [1, 3],\n",
  "264": "```python\ndef maxLength(arr):\n    result = [\"\"]\n    for word in arr:\n        for candidate in result[:]:\n            new_candidate = candidate + word\n            if len(new_candidate) == len(set(new_candidate)):\n                result.append(new_candidate)\n    return max(len(candidate) for candidate in result)\n```",
  "265": "```python\ndef maxNonOverlapping(nums, target):\n    seen = {0}\n    prefix_sum = 0\n    max_count = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - target in seen:\n            max_count += 1\n            seen = {0}\n            prefix_sum = 0\n        else:\n            seen.add(prefix_sum)\n    return max_count\n```",
  "266": "```python\ndef numSplits(s):\n    left_count = {}\n    right_count = {}\n    result = 0\n    for char in s:\n        right_count[char] = right_count.get(char, 0) + 1\n    for char in s:\n        left_count[char] = left_count.get(char, 0) + 1\n        right_count[char] -= 1\n        if right_count[char] == 0:\n            del right_count[char]\n        if",
  "267": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                elif token == \"/\":\n                    stack.append(int(a / b",
  "268": "def baseNeg2(N):\n    if N == 0:\n        return \"0\"\n    res = \"\"\n    while N != 0:\n        remainder = N % -2\n        N //= -2\n        if remainder < 0:\n            remainder += 2\n            N += 1\n        res = str(remainder) + res\n    return res",
  "269": "def kLengthApart(nums, k):\n    distance = k\n    for num in nums:\n        if num == 1:\n            if distance < k:\n                return False\n            distance = 0\n        else:\n            distance += 1\n    return True",
  "271": "def canJump(nums):\n    max_reachable = 0\n    for i in range(len(nums)):\n        if i > max_reachable:\n            return False\n        max_reachable = max(max_reachable, i + nums[i])\n    return True",
  "272": "```python\nfrom collections import deque\n\ndef maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n    total_candies = 0\n    queue = deque(initialBoxes)\n    found_boxes = set(initialBoxes)\n    while queue:\n        current_box = queue.popleft()\n        if status[current_box] == 1:\n            total_candies += candies[current_box]\n            for key in keys[current_box]:\n                if key not in found_boxes:\n                    queue.append",
  "273": "def racecar(target):\n    dp = [0] * (target + 1)\n    for t in range(1, target + 1):\n        k = t.bit_length()\n        if t == 2**k - 1:\n            dp[t] = k\n            continue\n        for j in range(k - 1):\n            dp[t] = min(dp[t], dp[t - 2**(k-1) + 2**j] + k - 1",
  "275": "def checkValidString(s):\n    low = high = 0\n    for char in s:\n        low += 1 if char == '(' else -1\n        high += 1 if char != ')' else -1\n        if high < 0:\n            break\n        low = max(low, 0)\n    return low == 0",
  "277": "def numTimesAllBlue(light):\n    moments = 0\n    right_sum = 0\n    total_sum = 0\n    for i in range(len(light)):\n        right_sum += light[i]\n        total_sum += i + 1\n        if right_sum == total_sum:\n            moments += 1\n    return moments",
  "278": "```python\nfrom collections import Counter\n\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        total = sum(digits)\n        if total % 3 == 0:\n            digits.sort(reverse=True)\n            return str(int(''.join(map(str, digits))))\n        elif total % 3 == 1:\n            remove_one = [i for i in digits if i % 3 == 1]\n            remove_two = [i for i in digits",
  "279": "import math\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        nums = [str(i) for i in range(1, n+1)]\n        k -= 1\n        res = \"\"\n        while n > 0:\n            n -= 1\n            index, k = divmod(k, math.factorial(n))\n            res += nums.pop(index)\n        return res",
  "280": "```python\ndef palindromePartition(s, k):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            dp[i][j] = dp[i - 1][j + 1] + (s[i - 1] != s[j])\n    f =",
  "281": "```python\ndef canConvertString(s: str, t: str, k: int) -> bool:\n    if len(s) != len(t):\n        return False\n    shifts = [0] * 26\n    for i in range(len(s)):\n        diff = (ord(t[i]) - ord(s[i]) + 26) % 26\n        if diff != 0 and shifts[diff] * 26 + diff > k:\n            return False\n        shifts[",
  "283": "import heapq\n\ndef smallestDistancePair(nums, k):\n    nums.sort()\n    low, high = 0, max(nums) - min(nums)\n    while low < high:\n        mid = (low + high) // 2\n        count, j = 0, 0\n        for i in range(len(nums)):\n            while j < len(nums) and nums[j] - nums[i] <= mid:\n                j += 1\n            count += j - i - 1",
  "284": "```python\ndef bagOfTokensScore(tokens, P):\n    tokens.sort()\n    points = 0\n    max_points = 0\n    i, j = 0, len(tokens) - 1\n    while i <= j:\n        if P >= tokens[i]:\n            P -= tokens[i]\n            points += 1\n            i += 1\n            max_points = max(max_points, points)\n        elif points > 0:\n            P += tokens[j]\n            points",
  "285": "def smallestRangeI(A, K):\n    return max(0, max(A) - min(A) - 2 * K)",
  "286": "```python\nfrom math import comb\n\ndef getProbability(balls):\n    n = sum(balls) // 2\n    total = comb(sum(balls), n)\n    count = [0, 0]\n    color_count = [0, 0]\n    prefix = [1, 1]\n    for b in balls:\n        for i in range(0, b):\n            for j in range(0, 2):\n                count[j] += (i == 0",
  "287": "```python\ndef countArrangement(N):\n    def count(i, X):\n        if i == 1:\n            return 1\n        return sum(count(i - 1, X - {x})\n                   for x in X\n                   if x % i == 0 or i % x == 0)\n    return count(N, set(range(1, N + 1)))\n```",
  "288": "def flipLights(n, m):\n    n = min(n, 3)\n    if m == 0:\n        return 1\n    if m == 1:\n        return [2, 3, 4][n - 1]\n    if m == 2:\n        return [2, 4, 7][n - 1]\n    return [2, 4, 8][n - 1]",
  "290": "```python\ndef minCost(n, cuts):\n    cuts.sort()\n    cuts = [0] + cuts + [n]\n    m = len(cuts)\n    dp = [[0] * m for _ in range(m)]\n    for d in range(2, m):\n        for i in range(m - d):\n            j = i + d\n            dp[i][j] = min(dp[i][k] + dp[k][j] for k in range(i + 1",
  "291": "```python\ndef numOfSubarrays(arr):\n    odd_count = 0\n    even_count = 1\n    total_sum = 0\n    result = 0\n    for num in arr:\n        total_sum += num\n        if total_sum % 2 == 0:\n            result += odd_count\n            even_count += 1\n        else:\n            result += even_count\n            odd_count += 1\n    return result % (10**9 + 7)\n",
  "292": "```python\ndef maxAbsValExpr(arr1, arr2):\n    max1, max2, max3, max4 = -float('inf'), -float('inf'), -float('inf'), -float('inf')\n    min1, min2, min3, min4 = float('inf'), float('inf'), float('inf'), float('inf')\n    for i in range(len(arr1)):\n        max1 = max(max1, arr1[i] + arr2",
  "293": "def leastInterval(tasks, n):\n    task_map = [0] * 26\n    for task in tasks:\n        task_map[ord(task) - ord('A')] += 1\n    task_map.sort()\n    max_val = task_map[25] - 1\n    idle_slots = max_val * n\n    for i in range(24, -1, -1):\n        idle_slots -= min(task_map[i], max_val)\n    return len(tasks) + max",
  "294": "```python\ndef totalNQueens(n):\n    def DFS(queens, xy_dif, xy_sum):\n        p = len(queens)\n        if p==n:\n            result.append(queens)\n            return None\n        for q in range(n):\n            if q not in queens and p-q not in xy_dif and p+q not in xy_sum:\n                DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q",
  "295": "def isSelfCrossing(x):\n    for i in range(3, len(x)):\n        if x[i] >= x[i-2] and x[i-1] <= x[i-3]:\n            return True\n        if i >= 4 and x[i-1] == x[i-3] and x[i] + x[i-4] >= x[i-2]:\n            return True\n        if i >= 5 and x[i-2] >= x[i-4",
  "296": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        elif nums[mid] < nums[right]:\n            right = mid\n        else:\n            right -= 1\n    return nums[left]",
  "297": "```python\nfrom itertools import permutations\n\ndef numTilePossibilities(tiles):\n    return len({\"\".join(p) for i in range(1, len(tiles) + 1) for p in permutations(tiles, i)})\n```",
  "298": "```python\ndef multiply(num1, num2):\n    return str(int(num1) * int(num2))\n```",
  "300": "```python\ndef leastOpsExpressTarget(x, target):\n    pos, neg = [2 * x] * 20, [2 * x] * 20\n    pos[0], neg[0] = x * 2, 0\n    for i in range(1, 20):\n        pos[i] = min(pos[i - 1] * i, (i + 1) * target) \n        neg[i] = min(neg[i - ",
  "302": "```python\ndef validSquare(p1, p2, p3, p4):\n    def dist(p1, p2):\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    dists = [dist(p1, p2), dist(p1, p3), dist(p1, p4), dist(p2, p3), dist(p2, p4",
  "303": "```python\ndef maxSumAfterPartitioning(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        curMax = 0\n        for j in range(1, min(k, i + 1) + 1):\n            curMax = max(curMax, arr[i - j + 1])\n            dp[i + 1] = max(dp[i + 1], dp[i -",
  "304": "def numFriendRequests(ages: List[int]) -> int:\n    count = [0] * 121\n    for age in ages:\n        count[age] += 1\n    requests = 0\n    for ageA in range(1, 121):\n        countA = count[ageA]\n        for ageB in range(1, 121):\n            countB = count[ageB]\n            if ageB <= 0.5 * ageA + ",
  "305": "```python\ndef distinctSubstrings(text):\n    n = len(text)\n    seen = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if text[i:j] == text[j:2*j-i]:\n                seen.add(text[i:j])\n    return len(seen)\n```",
  "306": "def combinationSum4(nums, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    return dp[target]",
  "307": "```python\nclass Solution:\n    def soupServings(self, N: int) -> float:\n        if N > 5000: return 1\n        memo = {}\n        def dp(a, b):\n            if (a, b) in memo: return memo[a, b]\n            if a <= 0 and b <= 0: return 0.5\n            if a <= 0: return 1\n            if b <= 0: return 0\n           ",
  "309": "```python\ndef longestArithSeqLength(A):\n    dp = {}\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            diff = A[j] - A[i]\n            if (i, diff) in dp:\n                dp[j, diff] = dp[i, diff] + 1\n            else:\n                dp[j, diff] = 2\n    return max(dp.values())\n```",
  "311": "def candy(ratings):\n    n = len(ratings)\n    left = [1] * n\n    right = [1] * n\n    for i in range(1, n):\n        if ratings[i] > ratings[i-1]:\n            left[i] = left[i-1] + 1\n    for i in range(n-2, -1, -1):\n        if ratings[i] > ratings[i+1]:\n            right[i] = right[i+1",
  "312": "```python\ndef shortestSubarray(A, K):\n    from collections import deque\n    prefix_sum = [0]\n    for num in A:\n        prefix_sum.append(prefix_sum[-1] + num)\n    min_length = float('inf')\n    queue = deque()\n    for i, num in enumerate(prefix_sum):\n        while queue and num - prefix_sum[queue[0]] >= K:\n            min_length = min(min_length, i - queue.popleft())\n        while queue and num",
  "313": "```python\ndef minDays(bloomDay, m, k):\n    def canMake(days):\n        bouquets = flowers = 0\n        for bloom in bloomDay:\n            if bloom > days:\n                flowers = 0\n            else:\n                flowers += 1\n                if flowers == k:\n                    bouquets += 1\n                    flowers = 0\n            if bouquets >= m:\n                return True\n        return False\n\n    if len(bloomDay) < m",
  "314": "```python\ndef numSub(s):\n    return sum(len(sub)*(len(sub)+1)//2 for sub in s.split('0')) % (10**9 + 7)\n```",
  "315": "def minimumSwap(s1: str, s2: str) -> int:\n    xy, yx = 0, 0\n    for i in range(len(s1)):\n        if s1[i] == 'x' and s2[i] == 'y':\n            xy += 1\n        elif s1[i] == 'y' and s2[i] == 'x':\n            yx += 1\n    if (xy + yx) % 2 !=",
  "316": "```python\ndef longestPrefix(s):\n    n = len(s)\n    lps = [0] * n\n    j = 0\n    i = 1\n    while i < n:\n        if s[i] == s[j]:\n            j += 1\n            lps[i] = j\n            i += 1\n        else:\n            if j != 0:\n                j = lps[j-1]\n            else:\n                lps[i] = ",
  "317": "```python\ndef numPermsDISequence(S: str) -> int:\n    n = len(S)\n    dp = [1] * (n + 1)\n    for s in S:\n        if s == 'I':\n            dp = dp[:-1]\n            for i in range(1, len(dp)):\n                dp[i] += dp[i - 1]\n        else:\n            dp = dp[1:]\n            for i in range(len(dp) - 1, ",
  "318": "def maxPizzaSlice(slices):\n    n = len(slices)\n    k = n // 3\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 2][j - 1] + slices[i",
  "319": "```python\ndef stoneGameIII(stoneValue):\n    n = len(stoneValue)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp[i] = max(sum(stoneValue[i:j]) - dp[j] for j in range(i + 1, min(i + 4, n + 1)))\n    if dp[0] > 0:\n        return \"Alice\"\n",
  "320": "def minOperations(nums):\n    return sum(bin(num).count('1') + (num > 1) for num in nums) - 1",
  "321": "def checkIfCanBreak(s1, s2):\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    return all(s1[i] >= s2[i] for i in range(len(s1))) or all(s2[i] >= s1[i] for i in range(len(s1)))",
  "322": "def minPatches(nums, n):\n    patches = 0\n    covered = 0\n    i = 0\n    while covered < n:\n        if i < len(nums) and nums[i] <= covered + 1:\n            covered += nums[i]\n            i += 1\n        else:\n            covered += covered + 1\n            patches += 1\n    return patches",
  "323": "def isInterleave(s1, s2, s3):\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [True] + [False] * len(s2)\n    for j in range(len(s2)):\n        dp[j + 1] = dp[j] and s2[j] == s3[j]\n    for i in range(len(s1)):\n        dp[0] = dp[0] and s1",
  "324": "def nextGreaterElement(n):\n    n = list(str(n))\n    i = len(n) - 2\n    while i >= 0 and n[i] >= n[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i]:\n        j -= 1\n    n[i], n[j] = n[j], n[i]\n    n[i",
  "325": "```python\nfrom collections import deque\n\ndef maxDistance(grid):\n    queue = deque([(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == 1])\n    if len(queue) == 0 or len(queue) == len(grid) * len(grid[0]):\n        return -1\n    distance = -1\n    while queue:\n        distance += 1\n        for _ in range(len(queue)):\n           ",
  "326": "def convert(s, numRows):\n    if numRows == 1:\n        return s\n    rows = [''] * min(numRows, len(s))\n    index, step = 0, 1\n    for char in s:\n        rows[index] += char\n        if index == 0:\n            step = 1\n        elif index == numRows - 1:\n            step = -1\n        index += step\n    return ''.join(rows)",
  "327": "def length_of_longest_substring(s):\n    max_length = 0\n    start = 0\n    char_index = {}\n    \n    for end in range(len(s)):\n        if s[end] in char_index and char_index[s[end]] >= start:\n            start = char_index[s[end]] + 1\n        char_index[s[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length",
  "328": "def find132pattern(nums):\n    stack = []\n    s3 = float('-inf')\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] < s3:\n            return True\n        while stack and nums[i] > stack[-1]:\n            s3 = stack.pop()\n        stack.append(nums[i])\n    return False",
  "331": "```python\ndef angleClock(hour: int, minutes: int) -> float:\n    h_angle = (hour % 12) * 30 + minutes * 0.5\n    m_angle = minutes * 6\n    angle = abs(h_angle - m_angle)\n    return min(angle, 360 - angle)\n```",
  "332": "```python\ndef countSubstrings(s):\n    n = len(s)\n    ans = 0\n    for center in range(2*n - 1):\n        left = center // 2\n        right = left + center % 2\n        while left >= 0 and right < n and s[left] == s[right]:\n            ans += 1\n            left -= 1\n            right += 1\n    return ans\n```",
  "333": "```python\ndef minJumps(arr):\n    n = len(arr)\n    jumps = 0\n    cur = 0\n    while cur < n - 1:\n        next_index = cur + 1\n        for i in range(cur + 1, min(cur + arr[cur] + 1, n)):\n            if arr[i] == arr[cur]:\n                next_index = i\n                break\n        cur = next_index\n        jumps += 1\n    return jumps",
  "334": "```python\ndef minCost(s, cost):\n    total_cost = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            total_cost += min(cost[i], cost[i-1])\n            cost[i] = max(cost[i], cost[i-1])\n    return total_cost\n```",
  "335": "```python\ndef tallest_billboard(rods):\n    dp = {0: 0}\n    for rod in rods:\n        new_dp = dp.copy()\n        for d in dp:\n            new_dp[d + rod] = max(dp[d + rod], dp[d])\n            new_dp[abs(d - rod)] = max(dp[abs(d - rod)], dp[d] + min(d, rod))\n        dp = new_dp\n    return dp[0]\n```",
  "336": "```python\nfrom collections import Counter\nclass Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        s_count = Counter(s)\n        t_count = Counter(t)\n        diff = s_count - t_count\n        return sum(diff.values())\n```",
  "337": "def canCompleteCircuit(gas, cost):\n    total_tank = 0\n    curr_tank = 0\n    starting_station = 0\n    for i in range(len(gas)):\n        total_tank += gas[i] - cost[i]\n        curr_tank += gas[i] - cost[i]\n        if curr_tank < 0:\n            starting_station = i + 1\n            curr_tank = 0\n    return starting_station if total_tank",
  "339": "def numTriplets(nums1, nums2):\n    def countTriplets(arr1, arr2):\n        count = 0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                for k in range(j+1, len(arr2)):\n                    if arr1[i] * arr1[i] == arr2[j] * arr2[k]:\n                        count += 1\n        return count\n\n    return countTriplets(nums1, nums2)",
  "340": "import os\ndef simplifyPath(path):\n    return os.path.abspath(path)",
  "341": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n        while len(ugly) < n:\n            next_ugly = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            ugly.append(next_ugly)\n            if next_ugly",
  "342": "def countBattleships(board):\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'X' and (i == 0 or board[i-1][j] != 'X') and (j == 0 or board[i][j-1] != 'X'):\n                count += 1\n    return count",
  "343": "```python\ndef numSquares(n):\n    while n % 4 == 0:\n        n /= 4\n    if n % 8 == 7:\n        return 4\n    a = 0\n    while a * a <= n:\n        b = int((n - a * a) ** 0.5)\n        if a * a + b * b == n:\n            return (not not a) + (not not b)\n        a += ",
  "344": "def minDeletionSize(A):\n    return sum(list(A[i] != ''.join(sorted(A[i])) for i in range(len(A[0]))))",
  "346": "```python\ndef numberOfSubarrays(nums, k):\n    count = 0\n    prefix = [0]\n    for num in nums:\n        prefix.append(prefix[-1] + num % 2)\n    count = 0\n    for i in range(len(prefix)):\n        for j in range(i + 1, len(prefix)):\n            if prefix[j] - prefix[i] == k:\n                count += 1\n    return count\n```",
  "347": "def checkInclusion(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    s1_map = [0] * 26\n    s2_map = [0] * 26\n    for i in range(len(s1)):\n        s1_map[ord(s1[i]) - ord('a')] += 1\n        s2_map[ord(s2[i]) - ord('a')] += 1\n    for i in",
  "348": "def maximumSum(arr):\n    n = len(arr)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0], dp[0][1], res = arr[0], arr[0], arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(arr[i], dp[i-1][0] + arr[i])\n        dp[i][1] = max(dp[i-1][0],",
  "349": "def deleteAndEarn(nums):\n    if not nums:\n        return 0\n    max_num = max(nums)\n    count = [0] * (max_num + 1)\n    for num in nums:\n        count[num] += num\n    dp = [0] * (max_num + 1)\n    dp[1] = count[1]\n    for i in range(2, max_num + 1):\n        dp[i] = max(dp[i-1], dp",
  "350": "def subarraysWithKDistinct(A, K):\n    def atMostK(A, K):\n        count = collections.Counter()\n        res = i = 0\n        for j in range(len(A)):\n            if count[A[j]] == 0: K -= 1\n            count[A[j]] += 1\n            while K < 0:\n                count[A[i]] -= 1\n                if count[A[i]] == 0: K += 1\n                i += ",
  "351": "```python\ndef brokenCalc(X, Y):\n    count = 0\n    while Y > X:\n        count += 1\n        if Y % 2 == 1:\n            Y += 1\n        else:\n            Y //= 2\n    return count + X - Y\n```",
  "352": "```python\ndef longestStrChain(words):\n    words.sort(key=len)\n    dp = {}\n    for word in words:\n        dp[word] = max(dp.get(word[:i] + word[i+1:], 0) + 1 for i in range(len(word)))\n    return max(dp.values())\n```",
  "353": "```python\ndef numSubseq(nums, target):\n    nums.sort()\n    mod = 10**9 + 7\n    n = len(nums)\n    res = 0\n    left, right = 0, n - 1\n    while left <= right:\n        if nums[left] + nums[right] <= target:\n            res = (res + pow(2, right - left, mod)) % mod\n            left += 1\n        else:\n            right -=",
  "354": "```python\ndef die_simulator(n, rollMax):\n    MOD = 10**9 + 7\n    dp = [[[0] * 16 for _ in range(6)] for _ in range(n + 1)]\n    for i in range(6):\n        dp[1][i][1] = 1\n    for i in range(2, n + 1):\n        for j in range(6):\n            for k in range(1, rollMax",
  "355": "import math\ndef findKthNumber(n, k):\n    curr = 1\n    k -= 1\n    while k > 0:\n        steps = calculateSteps(n, curr, curr + 1)\n        if steps <= k:\n            curr += 1\n            k -= steps\n        else:\n            curr *= 10\n            k -= 1\n    return curr\n\ndef calculateSteps(n, n1, n2):\n    steps = 0\n    while",
  "356": "def searchMatrix(matrix, target):\n    if not matrix or not matrix[0]:\n        return False\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        mid_element = matrix[mid // n][mid % n]\n        if mid_element == target:\n            return True\n        elif mid_element < target:\n            left",
  "357": "def maxDistToClosest(seats):\n    max_distance = 0\n    prev_person = -1\n    for i in range(len(seats)):\n        if seats[i] == 1:\n            if prev_person == -1:\n                max_distance = max(max_distance, i)\n            else:\n                max_distance = max(max_distance, (i - prev_person) // 2)\n            prev_person = i\n    max_distance = max(max_distance, len(seats) - ",
  "358": "class Solution:\n    def findReplaceString(self, S, indexes, sources, targets):\n        matches = sorted(zip(indexes, sources, targets), key=lambda x: x[0], reverse=True)\n        for i, s, t in matches:\n            if S[i:i + len(s)] == s:\n                S = S[:i] + t + S[i + len(s):]\n        return S",
  "359": "```python\ndef minFallingPathSum(A):\n    for i in range(1, len(A)):\n        for j in range(len(A[0])):\n            A[i][j] += min(A[i-1][max(0, j-1):min(len(A[0]), j+2)])\n    return min(A[-1])\n```",
  "360": "```python\ndef shipWithinDays(weights, D):\n    left, right = max(weights), sum(weights)\n    while left < right:\n        mid, need, cur = (left + right) // 2, 1, 0\n        for w in weights:\n            if cur + w > mid:\n                need += 1\n                cur = 0\n            cur += w\n        if need > D:\n            left = mid + 1\n        else:\n            right",
  "361": "```python\ndef tilingRectangle(n, m):\n    if n > m:\n        n, m = m, n\n    if n == 11 and m == 13:\n        return 6\n    dp = [0] * (m + 1)\n    for i in range(1, n + 1):\n        new_dp = [0] * (m + 1)\n        for j in range(1, m + 1):\n            new_dp[j",
  "362": "```python\nfrom itertools import product\ndef numberWays(hats):\n    MOD = 10**9 + 7\n    n = len(hats)\n    hat_to_people = [[] for _ in range(41)]\n    for i in range(n):\n        for hat in hats[i]:\n            hat_to_people[hat].append(i)\n    dp = [0] * (1 << n)\n    dp[0] = 1\n    for h in range(1, ",
  "363": "```python\ndef numEnclaves(A):\n    def dfs(i, j):\n        if 0 <= i < len(A) and 0 <= j < len(A[0]) and A[i][j]:\n            A[i][j] = 0\n            list(map(dfs, (i+1, i-1, i, i), (j, j, j+1, j-1))\n    for i in range(len(A)):\n        for j in range(len",
  "364": "def canMeasureWater(x: int, y: int, z: int) -> bool:\n    if x + y < z:\n        return False\n    if x == z or y == z or x + y == z:\n        return True\n    return z % math.gcd(x, y) == 0",
  "365": "```python\ndef unique_char_count(s):\n    total_count = 0\n    for i in range(len(s)):\n        unique_chars = set()\n        for j in range(i, len(s)):\n            if s[j] not in unique_chars:\n                unique_chars.add(s[j])\n                total_count += len(unique_chars)\n    return total_count % (10**9 + 7)\n```",
  "366": "```python\ndef longestSubstring(s, k):\n    if len(s) == 0 or k > len(s):\n        return 0\n    for char in set(s):\n        if s.count(char) < k:\n            return max(longestSubstring(sub, k) for sub in s.split(char))\n    return len(s)\n```",
  "367": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    ptr1 = nums[0]\n    ptr2 = slow\n    while ptr1 != ptr2:\n        ptr1 = nums[ptr1]\n        ptr2 = nums[ptr2]\n    return ptr1",
  "368": "```python\ndef maxSatisfaction(satisfaction):\n    satisfaction.sort(reverse=True)\n    max_sum = 0\n    total = 0\n    for s in satisfaction:\n        if total + s > 0:\n            total += s\n            max_sum += total\n        else:\n            break\n    return max_sum\n```",
  "372": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(2, len(p) + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n       ",
  "374": "from itertools import permutations\nclass Solution:\n    def shortestSuperstring(self, A: List[str]) -> str:\n        def overlap(a, b):\n            for i in range(min(len(a), len(b)), -1, -1):\n                if a.endswith(b[:i]):\n                    return i\n            return 0\n        N = len(A)\n        overlaps = [[0] * N for _ in range(N)]\n        for i, j in permutations(range(N), 2):\n            overlaps",
  "375": "```python\ndef maximumGap(nums):\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    max_diff = 0\n    for i in range(1, len(nums)):\n        max_diff = max(max_diff, nums[i] - nums[i-1])\n    return max_diff\n```",
  "376": "```python\ndef minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for d in range(2, n):\n        for i in range(n - d):\n            j = i + d\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp",
  "378": "def canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]",
  "379": "def maxSum(nums1, nums2):\n    i, j, sum1, sum2 = 0, 0, 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            sum1 += nums1[i]\n            i += 1\n        elif nums1[i] > nums2[j]:\n            sum2 += nums2[j]\n            j += 1\n        else:\n",
  "381": "# O(n) solution\ndef minSubArrayLen(s, nums):\n    left = 0\n    total = 0\n    min_len = float('inf')\n    for right in range(len(nums)):\n        total += nums[right]\n        while total >= s:\n            min_len = min(min_len, right - left + 1)\n            total -= nums[left]\n            left += 1\n    return min_len if min_len != float('inf') else 0\n\n# O",
  "382": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left",
  "383": "def minMalwareSpread(graph, initial):\n    def dfs(graph, initial, infected):\n        for i in range(len(graph)):\n            if graph[infected][i] == 1 and i in initial and i not in infected:\n                infected.add(i)\n                dfs(graph, initial, infected)\n        return infected\n\n    initial.sort()\n    max_infected = -1\n    result = initial[0]\n    for node in initial:\n        infected = set([node])\n        infected =",
  "384": "```python\ndef sumSubseqWidths(A):\n    A.sort()\n    n = len(A)\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(n):\n        ans = (ans + A[i] * (2**i - 2**(n-1-i))) % mod\n    return ans\n```",
  "385": "```python\ndef kthFactor(n, k):\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    return factors[k-1] if len(factors) >= k else -1\n```",
  "386": "def countVowelStrings(n):\n    a, e, i, o, u = 1, 1, 1, 1, 1\n    for _ in range(1, n):\n        a, e, i, o, u = e, a + i, a + e + o + u, i + u, a\n    return (a + e + i + o + u) % (10**9 + 7)",
  "387": "```python\nfrom collections import Counter\nvotes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nvote_count = Counter()\nfor vote in votes:\n    for i, team in enumerate(vote):\n        vote_count[team] += (1 / (10 ** i))\nsorted_teams = sorted(vote_count, key=lambda x: (-vote_count[x], x))\nresult = ''.join(sorted_teams)\n```",
  "388": "def hIndex(citations):\n    citations.sort()\n    n = len(citations)\n    for i in range(n):\n        if citations[i] >= n - i:\n            return n - i\n    return 0",
  "389": "def splitArraySameAverage(A):\n    total = sum(A)\n    n = len(A)\n    dp = [set() for _ in range(n // 2 + 1)]\n    dp[0].add(0)\n    for num in A:\n        for i in range(n // 2, 0, -1):\n            for prev in dp[i - 1]:\n                dp[i].add(prev + num)\n    for i in range(1, n // 2 +",
  "390": "```python\ndef winnerSquareGame(n):\n    dp = [False] * (n + 1)\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            if not dp[i - j * j]:\n                dp[i] = True\n                break\n            j += 1\n    return dp[n]\n```",
  "391": "def getMaxRepetitions(s1, n1, s2, n2):\n    repeatCount = 0\n    index = 0\n    s1Count = 0\n    s2Count = 0\n    while s1Count < n1:\n        if s1[index] == s2[s2Count]:\n            s2Count += 1\n            if s2Count == len(s2):\n                s2Count = 0\n                repeatCount += 1",
  "392": "```python\ndef numWaysToSplit(s):\n    ones = s.count('1')\n    if ones % 3 != 0:\n        return 0\n    if ones == 0:\n        return ((len(s) - 1) * (len(s) - 2) // 2) % (10**9 + 7)\n    ones_per_part = ones // 3\n    count = 0\n    prefix_ones = 0\n    suffix_",
  "393": "def nthUglyNumber(n, a, b, c):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    def count_ugly_numbers(x, a, b, c):\n        return x // a + x // b + x // c - x // lcm(a, b) - x // lcm(b, c",
  "394": "def minMoves2(nums):\n    nums.sort()\n    median = nums[len(nums) // 2]\n    return sum(abs(num - median) for num in nums)",
  "395": "def odd_even_jumps(A):\n    n = len(A)\n    odd_next = [0] * n\n    even_next = [0] * n\n    stack = []\n    for a, i in sorted((a, i) for i, a in enumerate(A)):\n        while stack and stack[-1] < i:\n            odd_next[stack.pop()] = i\n        stack.append(i)\n    stack = []\n    for a, i in sorted((-a, i) for",
  "396": "def smallestRepunitDivByK(K: int) -> int:\n    if K % 2 == 0 or K % 5 == 0:\n        return -1\n    remainder = 0\n    for length_N in range(1, K + 1):\n        remainder = (remainder * 10 + 1) % K\n        if remainder == 0:\n            return length_N\n    return -1",
  "397": "def countDigitOne(n):\n    count = 0\n    factor = 1\n    while n // factor > 0:\n        current = (n // factor) % 10\n        high = n // (factor * 10)\n        low = n - (n // factor) * factor\n        if current == 0:\n            count += high * factor\n        elif current == 1:\n            count += high * factor + low + 1\n        else:\n           ",
  "398": "def subarraySum(nums, k):\n    count = 0\n    total = 0\n    sum_map = {0: 1}\n    for num in nums:\n        total += num\n        if total - k in sum_map:\n            count += sum_map[total - k]\n        sum_map[total] = sum_map.get(total, 0) + 1\n    return count",
  "399": "def numDecodings(s):\n    if not s or s[0] == \"0\":\n        return 0\n    dp = [0] * (len(s) + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(s) + 1):\n        if 1 <= int(s[i-1]) <= 9:\n            dp[i] += dp[i-1]\n        if ",
  "400": "def largestRectangleArea(heights):\n    stack = []\n    max_area = 0\n    index = 0\n    while index < len(heights):\n        if not stack or heights[index] >= heights[stack[-1]]:\n            stack.append(index)\n            index += 1\n        else:\n            top_of_stack = stack.pop()\n            area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)\n            max_area = max(max",
  "403": "def increasingTriplet(nums):\n    first = float('inf')\n    second = float('inf')\n    for num in nums:\n        if num <= first:\n            first = num\n        elif num <= second:\n            second = num\n        else:\n            return True\n    return False",
  "404": "def largestSumOfAverages(A, K):\n    n = len(A)\n    dp = [[0] * (K + 1) for _ in range(n + 1)]\n    cur = 0\n    for i in range(1, n + 1):\n        cur += A[i - 1]\n        dp[i][1] = cur / i\n    for k in range(2, K + 1):\n        for i in range(k, n + ",
  "405": "```python\ndef new21Game(N, K, W):\n    if K == 0 or N >= K + W:\n        return 1.0\n    dp = [1.0] + [0.0] * N\n    Wsum = 1.0\n    res = 0.0\n    for i in range(1, N + 1):\n        dp[i] = Wsum / W\n        if i < K:\n            Wsum +=",
  "406": "```python\nfrom collections import deque\n\ndef ladderLength(beginWord, endWord, wordList):\n    wordSet = set(wordList)\n    if endWord not in wordSet:\n        return 0\n    queue = deque([(beginWord, 1)])\n    while queue:\n        word, length = queue.popleft()\n        if word == endWord:\n            return length\n        for i in range(len(word)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                nextWord = word[:i]",
  "407": "```python\ndef scoreOfParentheses(S):\n    stack = [0]\n    for c in S:\n        if c == '(':\n            stack.append(0)\n        else:\n            v = stack.pop()\n            stack[-1] += max(2 * v, 1)\n    return stack[0]\n```",
  "408": "```python\ndef findBestValue(arr, target):\n    left, right = 0, max(arr)\n    while left < right:\n        mid = (left + right) // 2\n        total = sum(min(mid, x) for x in arr)\n        if total < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```",
  "409": "```python\ndef kConcatenationMaxSum(arr, k):\n    mod = 10**9 + 7\n    max_end, max_so_far, total = 0, 0, 0\n    for num in arr * min(k, 2):\n        max_end = max(num, max_end + num)\n        max_so_far = max(max_so_far, max_end)\n        total += num\n    return max(max_so_far, (k - 2) *",
  "411": "def wordBreak(s, wordDict):\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in wordDict:\n                dp[i] = True\n                break\n    return dp[len(s)]",
  "412": "```python\ndef numRollsToTarget(d: int, f: int, target: int) -> int:\n    MOD = 10**9 + 7\n    dp = [[0] * (target + 1) for _ in range(d + 1)]\n    dp[0][0] = 1\n    for i in range(1, d + 1):\n        for j in range(1, f + 1):\n            for k in range(j",
  "413": "def break_palindrome(palindrome: str) -> str:\n    if len(palindrome) == 1:\n        return \"\"\n    for i in range(len(palindrome) // 2):\n        if palindrome[i] != 'a':\n            return palindrome[:i] + 'a' + palindrome[i+1:]\n    return palindrome[:-1] + 'b'",
  "414": "def getWinner(arr, k):\n    winner = max(arr[0], arr[1])\n    win_count = 1\n    for i in range(2, len(arr)):\n        if win_count == k:\n            break\n        if arr[i] > winner:\n            winner = arr[i]\n            win_count = 1\n        else:\n            win_count += 1\n    return winner",
  "415": "```python\ndef minSwap(A, B):\n    n = len(A)\n    swap, no_swap = [float('inf')] * n, [float('inf')] * n\n    swap[0], no_swap[0] = 1, 0\n    for i in range(1, n):\n        if A[i] > A[i-1] and B[i] > B[i-1]:\n            no_swap[i] = no_swap[i-1]\n            swap",
  "417": "from typing import List\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        nums1.extend(nums2)\n        nums1.sort()\n        n = len(nums1)\n        if n % 2 == 0:\n            return (nums1[n//2 - 1] + nums1[n//2]) / 2\n        else:\n            return nums1[n//2]",
  "418": "def min_replacements(n):\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        count += 1\n    return count",
  "419": "```python\ndef bulbSwitch(n):\n    return int(n ** 0.5)\n```",
  "420": "```python\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        vowels = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}\n        seen = {0: -1}\n        state = 0\n        res = 0\n        for i, c in enumerate(s):\n            if c in vowels:\n                state ^= 1 << vowels[c]\n",
  "421": "```python\ndef lastSubstring(s):\n    i, j, k = 0, 1, 0\n    n = len(s)\n    while j + k < n:\n        if s[i+k] == s[j+k]:\n            k += 1\n            continue\n        elif s[i+k] > s[j+k]:\n            j = j + k + 1\n        else:\n            i = max(i + k + 1, j)\n            j = i +",
  "422": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expandAroundCenter(left, right):\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left+1:right]\n        \n        longest = \"\"\n        for i in range(len(s)):\n            odd = expandAroundCenter(i, i)\n            even = expandAroundCenter(i, i+1)\n",
  "423": "def longestSubsequence(arr, difference):\n    dp = {}\n    for num in arr:\n        dp[num] = dp.get(num - difference, 0) + 1\n    return max(dp.values())",
  "425": "def divide(dividend, divisor):\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    if dividend == 0:\n        return 0\n    if divisor == 1:\n        return dividend\n    if divisor == -1:\n        if dividend > INT_MIN:\n            return -dividend\n        return INT_MAX\n    sign = 1\n    if (dividend < 0) ^ (divisor < 0):\n        sign",
  "426": "def reorderedPowerOf2(N):\n    count = collections.Counter(str(N))\n    return any(count == collections.Counter(str(1 << i)) for i in range(32))",
  "427": "```python\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        return (factorial(2*n) // (factorial(n) * factorial(n))) % (10**9 + 7)\n```",
  "429": "def getHint(secret: str, guess: str) -> str:\n    bulls = sum(s == g for s, g in zip(secret, guess))\n    cows = sum((secret + guess).count(x) - bulls for x in set(secret))\n    return f\"{bulls}A{cows}B\"",
  "430": "```python\ndef distinctSubseqII(S):\n    dp = [1] * 26\n    for s in S:\n        dp[ord(s) - 97] = sum(dp) + 1\n    return sum(dp) % (10**9 + 7)\n```",
  "431": "```python\ndef sumSubarrayMins(A):\n    stack = []\n    A = [0] + A + [0]\n    res = 0\n    for i, x in enumerate(A):\n        while stack and A[stack[-1]] > x:\n            j = stack.pop()\n            k = stack[-1]\n            res += A[j] * (i - j) * (j - k)\n        stack.append(i)\n    return res % (10**9 +",
  "432": "def isPossibleDivide(nums, k):\n    if len(nums) % k != 0:\n        return False\n    count = collections.Counter(nums)\n    nums.sort()\n    for num in nums:\n        if count[num] > 0:\n            for i in range(k):\n                if count[num + i] == 0:\n                    return False\n                count[num + i] -= 1\n    return True",
  "433": "```python\ndef numOfSubarrays(arr, k, threshold):\n    total = sum(arr[:k])\n    count = 1 if total / k >= threshold else 0\n    for i in range(k, len(arr)):\n        total += arr[i] - arr[i - k]\n        if total / k >= threshold:\n            count += 1\n    return count\n```",
  "434": "def longestSubarray(nums):\n    left, right = 0, 0\n    zero_count = 0\n    max_length = 0\n    \n    while right < len(nums):\n        if nums[right] == 0:\n            zero_count += 1\n        \n        while zero_count > 1:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        \n        max_length = max(max_length, right - left)\n        right += ",
  "436": "```python\ndef minDays(n):\n    dp = {}\n    def dfs(n):\n        if n <= 1:\n            return n\n        if n not in dp:\n            dp[n] = 1 + min(n%2 + dfs(n//2), n%3 + dfs(n//3))\n        return dp[n]\n    return dfs(n)\n```",
  "437": "```python\ndef decodeAtIndex(S, K):\n    size = 0\n    for char in S:\n        if char.isdigit():\n            size *= int(char)\n        else:\n            size += 1\n    for char in reversed(S):\n        K %= size\n        if K == 0 and char.isalpha():\n            return char\n        if char.isdigit():\n            size /= int(char)\n        else:\n            size -= 1\n```",
  "438": "def latestStep(arr, m):\n    n = len(arr)\n    result = -1\n    groups = [0] * n\n    for i in range(n):\n        index = arr[i] - 1\n        groups[index] = 1\n        left = index - 1\n        right = index + 1\n        while left >= 0 and groups[left] == 1:\n            left -= 1\n        while right < n and groups[right] == ",
  "439": "```python\ndef maxTurbulenceSize(A):\n    inc, dec, result = 1, 1, 1\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            inc = dec + 1\n            dec = 1\n        elif A[i] < A[i-1]:\n            dec = inc + 1\n            inc = 1\n        else:\n            inc = 1\n            dec =",
  "440": "def mirrorReflection(p, q):\n    while p % 2 == 0 and q % 2 == 0:\n        p, q = p // 2, q // 2\n    return 1 - p % 2 + q % 2",
  "441": "def consecutiveNumbersSum(N):\n    count = 0\n    k = 1\n    while (k * (k + 1) < 2 * N):\n        if ((N - k * (k + 1) / 2) % (k + 1) == 0):\n            count += 1\n        k += 1\n    return count",
  "442": "```python\ndef minSwaps(grid):\n    n = len(grid)\n    count = 0\n    for i in range(n):\n        zeros = 0\n        for j in range(i, n):\n            if all(grid[k][j] == 0 for k in range(i)):\n                zeros += 1\n        if zeros == 0:\n            return -1\n        index = next((j for j in range(i, n) if all(grid[k][j] ==",
  "444": "def nthPersonGetsNthSeat(n: int) -> float:\n    return 1.0 if n == 1 else 0.5",
  "445": "```python\ndef minDifference(nums):\n    if len(nums) <= 4:\n        return 0\n    nums.sort()\n    return min(nums[-4] - nums[0], nums[-3] - nums[1], nums[-2] - nums[2], nums[-1] - nums[3])\n```",
  "446": "def findLeastNumOfUniqueInts(arr, k):\n    freq_map = collections.Counter(arr)\n    sorted_freq = sorted(freq_map.values())\n    unique_count = len(sorted_freq)\n    for freq in sorted_freq:\n        if k >= freq:\n            k -= freq\n            unique_count -= 1\n        else:\n            break\n    return unique_count - (k > 0)",
  "447": "def removeDuplicateLetters(s):\n    stack = []\n    seen = set()\n    last_occurrence = {c: i for i, c in enumerate(s)}\n    \n    for i, c in enumerate(s):\n        if c not in seen:\n            while stack and c < stack[-1] and i < last_occurrence[stack[-1]]:\n                seen.discard(stack.pop())\n            seen.add(c)\n            stack.append(c)\n    \n    return ''.join(stack)",
  "448": "def checkSubarraySum(nums, k):\n    prefix_sum = 0\n    seen = {0: -1}\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if k != 0:\n            prefix_sum %= k\n        if prefix_sum in seen:\n            if i - seen[prefix_sum] > 1:\n                return True\n        else:\n            seen[prefix_sum] = i\n    return False",
  "449": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]",
  "452": "```python\ndef minDifficulty(jobDifficulty, d):\n    n = len(jobDifficulty)\n    if n < d:\n        return -1\n    dp = [[float('inf')] * n + [0] for _ in range(d + 1)]\n    dp[0][0] = jobDifficulty[0]\n    for i in range(1, n):\n        dp[0][i] = max(jobDifficulty[i], dp[0][i - 1])\n    for i",
  "453": "```python\ndef minCost(houses, cost, m, n, target):\n    pass\n```",
  "454": "def maximumSwap(num):\n    num = list(str(num))\n    last = {int(val): i for i, val in enumerate(num)}\n    for i, val in enumerate(num):\n        for d in range(9, int(val), -1):\n            if d in last and last[d] > i:\n                num[i], num[last[d]] = num[last[d]], num[i]\n                return int(\"\".join(num))\n    return int(\"\".join(num))",
  "456": "def canCross(stones):\n    if stones[1] != 1:\n        return False\n    dp = {x: set() for x in stones}\n    dp[1] = {1}\n    for stone in stones[1:]:\n        for step in dp[stone]:\n            for k in (step - 1, step, step + 1):\n                if k > 0 and stone + k in dp:\n                    dp[stone + k].add(k)\n    return",
  "457": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1",
  "458": "def minSubarray(nums, p):\n    target = sum(nums) % p\n    if target == 0:\n        return 0\n    prefix = {0: -1}\n    cur = 0\n    res = n = len(nums)\n    for i, a in enumerate(nums):\n        cur = (cur + a) % p\n        prefix[cur] = i\n        if (cur - target) % p in prefix:\n            res = min(res, i - prefix",
  "459": "```python\ndef characterReplacement(s, k):\n    max_length = 0\n    start = 0\n    max_count = 0\n    count_map = {}\n    for end in range(len(s)):\n        count_map[s[end]] = count_map.get(s[end], 0) + 1\n        max_count = max(max_count, count_map[s[end]])\n        if end - start + 1 - max_count > k:\n            count_map[s[start]] -= 1\n",
  "460": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        visited = [False] * len(nums)\n        ans = 0\n        for i in range(len(nums)):\n            if not visited[i]:\n                start = nums[i]\n                count = 0\n                while True:\n                    start = nums[start]\n                    count += 1\n                    visited[start] = True\n                    if start == nums[i]:\n                        break\n                ans = max(ans, count",
  "461": "```python\nclass Solution:\n    def numOfMinutes(self, n: int, headID: int, manager: List[int], informTime: List[int]) -> int:\n        graph = collections.defaultdict(list)\n        for i, m in enumerate(manager):\n            graph[m].append(i)\n        def dfs(i):\n            return informTime[i] + max(dfs(j) for j in graph[i]) if graph[i] else 0\n        return dfs(headID)\n```",
  "462": "```python\ndef countServers(grid):\n    rows = [0] * len(grid)\n    cols = [0] * len(grid[0])\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                rows[i] += 1\n                cols[j] += 1\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n           ",
  "464": "```python\ndef minOperations(n):\n    return n * n // 4\n```",
  "465": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        dp = [i - 1 for i in range(n + 1)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[i:j + 1] == s[i:j + 1][::-1]:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + 1)\n        return dp",
  "466": "import re\n\nclass Solution:\n    def maskPII(self, S: str) -> str:\n        if '@' in S:\n            first, after = S.split('@')\n            return \"{}*****{}@{}\".format(first[0], first[-1], after).lower()\n        else:\n            digits = re.sub('\\D', '', S)\n            local = \"***-***-{}\".format(digits[-4:])\n            if len(digits) == 10:\n                return local\n            return \"+{}",
  "469": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:\n        parents = [0] * n\n        for i in range(n):\n            if leftChild[i] != -1:\n                if parents[leftChild[i]] != 0:\n                    return False\n                parents[leftChild[i]] = i\n            if rightChild[i] != -1:\n                if parents[rightChild[i]] != 0",
  "471": "def numIslands(grid):\n    def dfs(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':\n            return\n        grid[i][j] = '0'\n        dfs(grid, i + 1, j)\n        dfs(grid, i - 1, j)\n        dfs(grid, i, j + 1)\n        dfs(grid,",
  "472": "def canReach(arr, start):\n    if 0 <= start < len(arr) and arr[start] >= 0:\n        if arr[start] == 0:\n            return True\n        arr[start] = -arr[start]\n        return canReach(arr, start + arr[start]) or canReach(arr, start - arr[start])\n    return False",
  "473": "```python\ndef countTriplets(arr):\n    count = 0\n    for i in range(len(arr)):\n        xor = arr[i]\n        for j in range(i+1, len(arr)):\n            xor ^= arr[j]\n            if xor == 0:\n                count += j - i\n    return count\n```",
  "474": "```python\nfrom collections import Counter\nfrom itertools import combinations\n\ndef maxScoreWords(words, letters, score):\n    letter_count = Counter(letters)\n    max_score = 0\n    for i in range(1, len(words) + 1):\n        for combination in combinations(words, i):\n            word_count = Counter(''.join(combination))\n            if all(word_count[char] <= letter_count[char] for char in word_count):\n                max_score = max(max_score, sum",
  "476": "def carFleet(target, position, speed):\n    cars = sorted(zip(position, speed))\n    times = [float(target - p) / s for p, s in cars]\n    count = 0\n    while len(times) > 1:\n        lead = times.pop()\n        if lead < times[-1]:\n            count += 1\n        else:\n            times[-1] = lead\n    return count + bool(times)",
  "477": "```python\ndef findKthBit(n, k):\n    if k == 1:\n        return \"0\"\n    mid = 2 ** (n - 1)\n    if k == mid:\n        return \"1\"\n    if k < mid:\n        return findKthBit(n - 1, k)\n    else:\n        return \"1\" if findKthBit(n - 1, 2 ** n - k) == \"0\" else \"0\"\n```",
  "478": "```python\ndef singleNumber(nums):\n    ones = 0\n    twos = 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```",
  "479": "from collections import defaultdict\ndef leastBricks(wall):\n    edges = defaultdict(int)\n    for row in wall:\n        length = 0\n        for brick in row[:-1]:\n            length += brick\n            edges[length] += 1\n    return len(wall) - max(edges.values(), default=0)",
  "480": "```python\ndef numWays(steps, arrLen):\n    MOD = 10**9 + 7\n    maxColumn = min(arrLen - 1, steps)\n    dp = [0] * (maxColumn + 1)\n    dp[0] = 1\n    for i in range(1, steps + 1):\n        dpNext = [0] * (maxColumn + 1)\n        for j in range(0, maxColumn + 1",
  "482": "```python\ndef mctFromLeafValues(arr):\n    stack = []\n    result = 0\n    for num in arr:\n        while stack and num >= stack[-1]:\n            smaller = stack.pop()\n            if stack:\n                result += smaller * min(num, stack[-1])\n            else:\n                result += smaller * num\n        stack.append(num)\n    while len(stack) > 1:\n        result += stack.pop() * stack[-1]\n    return result\n```",
  "485": "def minKBitFlips(A, K):",
  "486": "def queryString(S, N):\n    for i in range(1, N+1):\n        if bin(i)[2:] not in S:\n            return False\n    return True",
  "487": "```python\ndef longestDiverseString(a, b, c):\n    res = \"\"\n    while True:\n        if a >= b and a >= c:\n            if a == 0:\n                break\n            if len(res) < 2 or res[-1] != 'a' or res[-2] != 'a':\n                res += 'a'\n                a -= 1\n            else:\n                if b >= c:\n                    if b == 0:\n                        break\n                   ",
  "488": "import heapq\ndef kthSmallest(matrix, k):\n    n = len(matrix)\n    min_heap = []\n    for i in range(min(k, n)):\n        min_heap.append((matrix[i][0], i, 0))\n    heapq.heapify(min_heap)\n    while k:\n        element, row, col = heapq.heappop(min_heap)\n        if col < n - 1:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row",
  "489": "def maxWidthRamp(A):\n    stack = []\n    res = 0\n    for i, a in enumerate(A):\n        if not stack or A[stack[-1]] > a:\n            stack.append(i)\n    for j in range(len(A) - 1, -1, -1):\n        while stack and A[stack[-1]] <= A[j]:\n            res = max(res, j - stack.pop())\n    return res",
  "490": "def canVisitAllRooms(rooms):\n    visited = set()\n    stack = [0]\n    while stack:\n        room = stack.pop()\n        if room not in visited:\n            visited.add(room)\n            stack.extend(rooms[room])\n    return len(visited) == len(rooms)",
  "492": "import math\nclass Solution:\n    def strWithout3a3b(self, A: int, B: int) -> str:\n        res = \"\"\n        while A > 0 or B > 0:\n            if len(res) >= 2 and res[-1] == res[-2]:\n                writeA = res[-1] == 'b'\n            else:\n                writeA = A >= B\n            if writeA:\n                A -= 1\n                res += 'a",
  "493": "```python\ndef findTargetSumWays(nums, S):\n    if sum(nums) < S or (sum(nums) + S) % 2 != 0:\n        return 0\n    target = (sum(nums) + S) // 2\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i",
  "494": "def longestDecomposition(text):\n    n = len(text)\n    for i in range(n // 2):\n        if text[:i + 1] == text[n - 1 - i:]:\n            return 2 + longestDecomposition(text[i + 1:n - 1 - i])\n    return 1 if n > 0 else 0",
  "495": "def lastStoneWeight(stones):\n    while len(stones) > 1:\n        stones.sort()\n        y = stones.pop()\n        x = stones.pop()\n        if x != y:\n            stones.append(y - x)\n    return stones[0] if stones else 0",
  "496": "def minIncrementForUnique(A):\n    A.sort()\n    moves = 0\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            moves += A[i-1] - A[i] + 1\n            A[i] = A[i-1] + 1\n    return moves",
  "497": "```python\ndef jobScheduling(startTime, endTime, profit):\n    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])\n    dp = [[0, 0]]\n    for s, e, p in jobs:\n        i = bisect.bisect(dp, [s + 1]) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append([e, dp[i][1] + p",
  "498": "def rob(nums):\n    def rob_range(nums, start, end):\n        rob, not_rob = 0, 0\n        for i in range(start, end):\n            rob, not_rob = not_rob + nums[i], max(rob, not_rob)\n        return max(rob, not_rob)\n    if len(nums) == 1:\n        return nums[0]\n    return max(rob_range(nums, 0, len(nums)-1), rob",
  "499": "def minNumberOperations(target):\n    result = target[0]\n    for i in range(1, len(target)):\n        result += max(target[i] - target[i-1], 0)\n    return result",
  "500": "class Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if (not s[i].isdigit() and s[i] != ' ') or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n",
  "501": "def shortest_palindrome(s):\n    rev_s = s[::-1]\n    for i in range(len(s) + 1):\n        if s.startswith(rev_s[i:]):\n            return rev_s[:i] + s",
  "502": "```python\ndef minMalwareSpread(graph, initial):\n    def find(x):\n        if parents[x] != x:\n            parents[x] = find(parents[x])\n        return parents[x]\n\n    def union(x, y):\n        rootX, rootY = find(x), find(y)\n        if rootX != rootY:\n            parents[rootX] = rootY\n            size[rootY] += size[rootX]\n\n    n = len(graph)\n    parents = list(range(n))\n",
  "503": "```python\ndef arrangeWords(text):\n    words = text.split()\n    words.sort(key=lambda x: (len(x), words.index(x)))\n    return ' '.join(words).capitalize()\n```",
  "504": "```python\ndef reverseParentheses(s):\n    stack = []\n    for char in s:\n        if char == ')':\n            temp = ''\n            while stack and stack[-1] != '(':\n                temp = stack.pop() + temp\n            stack.pop()\n            stack.extend(list(temp))\n        else:\n            stack.append(char)\n    return ''.join(stack)\n```",
  "505": "def minRemoveToMakeValid(s):\n    stack = []\n    remove = set()\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                remove.add(i)\n    remove = remove.union(set(stack))\n    result = []\n    for i, char in enumerate(s):\n        if i not in remove:\n            result.append(char)\n    return ''.join(result)",
  "506": "```python\nclass Solution:\n    def myAtoi(self, str: str) -> int:\n        import re\n        match = re.match(r'\\s*([+-]?\\d+)', str)\n        if match:\n            result = int(match.group(1))\n            if result < -2**31:\n                return -2**31\n            elif result > 2**31 - 1:\n                return 2**31 - 1\n            else:\n                return result\n",
  "507": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid % 2 == 1:\n                mid -= 1\n            if nums[mid] != nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 2\n        return nums",
  "508": "```python\nimport bisect\n\nN, Q = map(int, input().split())\nroadworks = [list(map(int, input().split())) for _ in range(N)]\npeople = [int(input()) for _ in range(Q)]\n\nblocked_points = []\nfor s, t, x in roadworks:\n    blocked_points.append((s - 0.5, x, 1))\n    blocked_points.append((t - 0.5, x, -1))\nblocked_points.sort()\n\n",
  "510": "from collections import defaultdict\n\nN = int(input())\nS = input()\nQ = int(input())\n\nchar_count = defaultdict(int)\nfor char in S:\n    char_count[char] += 1\n\nfor _ in range(Q):\n    query = input().split()\n    if query[0] == '1':\n        i_q, c_q = int(query[1]), query[2]\n        if S[i_q-1] != c_q:\n            char_count[S[i_q-1]] -=",
  "511": "n, *a = map(int, open(0).read().split())\nx = 0\nfor i in a:\n  x ^= i\nprint(*[x^i for i in a])",
  "513": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p):\n    global ans\n    i = bisect_left(dp, a[v])\n    tmp = dp[i]\n    dp[i] = a[v]\n    ans[v] = bisect_left(dp, inf)\n    for u in g[v]:\n        if u == p:\n            continue\n        dfs(u, v)\n    dp[i] = tmp\n\nn = int(input())\na = list",
  "514": "n1 = int(input())\nn2 = int(input())\nprint(n1 - n2 if n1 > n2 else n1 + n2)",
  "516": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    inversions = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            inversions += sum(1 for x in A[i::N] for y in A[j::N] if x > y)\n    print(inversions)\n```",
  "518": "```python\ndef chef_ways_to_reach_next_floor(T, cases):\n    results = []\n    for case in cases:\n        if case % 2 == 0:\n            results.append((case//2)+1)\n        else:\n            results.append((case//2)+1)\n    return results\n```",
  "520": "t = int(input())\nfor _ in range(t):\n    id = input().upper()\n    if id == 'B':\n        print('BattleShip')\n    elif id == 'C':\n        print('Cruiser')\n    elif id == 'D':\n        print('Destroyer')\n    elif id == 'F':\n        print('Frigate')",
  "521": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    cameras = list(map(int, input().split()))\n    P, Q = map(int, input().split())\n    cameras.sort()\n    angles = [math.atan2(Q, cameras[i]-P) - math.atan2(Q, cameras[i+1]-P) for i in range(0, n, 2)]\n    print(max(angles))\n```",
  "522": "```python\ndef count_triplets(n):\n    count = 0\n    for x in range(1, int(n**0.5) + 1):\n        if n % x == 0:\n            yz = n // x\n            if yz > x:\n                count += 2\n            elif yz == x:\n                count += 1\n    return count\n```",
  "524": "```python\nfrom collections import Counter\n\nS = input()\nQ = int(input())\ncount = Counter(S)\nfor _ in range(Q):\n    X, Y = map(int, input().split())\n    total = sum(1 for c in count.values() if c % 2 == 0 and X <= c <= Y)\n    print(total)\n```",
  "525": "```python\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((c - b) // a * a + b)\n```",
  "526": "```python\nT = 1\ninputs = ['aaabb']\n```",
  "528": "```python\nfor _ in range(int(input())):\n    N, L = map(int, input().split())\n    print((L-1)//N + L)\n```",
  "529": "```python\nimport math\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef calculate_probability(n):\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if gcd(a, b) == b:\n                count += 1\n    total_pairs = n * n\n    common_divisor_probability = count / total",
  "532": "def count_binary_sequences(N):\n    a, b = 1, 2\n    for _ in range(N - 1):\n        a, b = b, (a + b) % 15746\n    return a",
  "533": "t = int(input())\nfor _ in range(t):\n    k, n = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k in arr:\n        first = arr.index(k) + 1\n        last = n - arr[::-1].index(k)\n        print(last - first)\n    else:\n        print(0)",
  "534": "```python\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    n, m = map(int, input().split())\n    endpoints = defaultdict(int)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        endpoints[u] += 1\n        endpoints[v] += 1\n    print(min(endpoints.values()))\n```",
  "536": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    x = (k // n) + (k % n > 0)\n    print(x)\n```",
  "537": "from itertools import combinations\nN, K = map(int, input().split())\nsequence = list(map(int, input().split()))\ncount = 0\nfor pair in combinations(sequence, 2):\n    if abs(pair[0] - pair[1]) >= K:\n        count += 1\nprint(count)",
  "538": "```python\ndef compare_guess(S, SG, FG, D, T):\n    distance = D * 50\n    speed_difference = (distance / T) * 3.6\n    sebi_diff = abs(SG - (S + speed_difference))\n    father_diff = abs(FG - (S + speed_difference))\n    if sebi_diff < father_diff:\n        return \"SEBI\"\n    elif father_diff < sebi_diff:\n        return \"FATHER\"\n    else",
  "539": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(4*n)",
  "540": "```python\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    mex = 1\n    for i in range(n):\n        if a[i] <= mex:\n            mex += 1\n        else:\n            break\n    print(n if mex > m else -1)\n```",
  "541": "```python\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    color_indices = defaultdict(list)\n    for i, color in enumerate(arr):\n        color_indices[color].append(i)\n    max_height = 0\n    for indices in color_indices.values():\n        for i in range(len(indices)):\n            for j in range(i+1, len(indices)):\n                start = indices[i]\n                end",
  "542": "```python\ndef count_squares(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N, M = map(int, cases[i].split())\n        garden = [list(row) for row in cases[i+1:i+1+N]]\n        count = 0\n        for r in range(N-1):\n            for c in range(M-1):\n                if garden[r][c] == garden[r][c+1",
  "543": "def ram_wins_game(truth_tasks_r, dare_tasks_r, truth_tasks_s, dare_tasks_s):\n    ram_tasks = set(truth_tasks_r + dare_tasks_r)\n    shyam_tasks = set(truth_tasks_s + dare_tasks_s)\n    if shyam_tasks.issubset(ram_tasks):\n        return \"yes\"\n    else:\n        return \"no\"\n\nt = int(input())\nfor _ in range(t):\n    t_r = int(input())\n    truth_tasks_r =",
  "544": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    for i in range(0, n, 4):\n        code = s[i:i+4]\n        binary = int(code, 2)\n        if binary < 8:\n            print(chr(97 + binary), end='')\n        else:\n            print(chr(105 + binary), end='')\n    print()",
  "545": "```python\ndef dish_of_life(T, cases):\n    result = []\n    for case in cases:\n        N, K = case[0]\n        ingredients = set()\n        for island in case[1:]:\n            ingredients.update(island[1:])\n        if len(ingredients) < K:\n            result.append(\"sad\")\n        elif len(ingredients) == K:\n            result.append(\"all\")\n        else:\n            result.append(\"some\")\n    return result\n```",
  "546": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    D = int(input())\n    bounces = 0\n    while D > 0:\n        power = int(math.log2(D))\n        D -= 2**power\n        bounces += 1\n    print(bounces)\n```",
  "548": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        print('*' * i)\n```",
  "549": "```python\nn = int(input())\nheights = list(map(int, input().split()))\nmax_height = 0\ncuts = 0\nfor height in heights:\n    if height > max_height:\n        max_height = height\n    else:\n        cuts += max_height - height\nprint(cuts)\n```",
  "550": "```python\ndef num_operations_and_result(T, test_cases):\n    results = []\n    for case in test_cases:\n        A, B = case\n        max_val = A ^ B\n        num_operations = 0\n        while B > 0:\n            B = (B >> 1) | ((B & 1) << (B.bit_length() - 1))\n            max_val = max(max_val, A ^ B)\n            num_operations += 1\n        results",
  "551": "```python\ndef has_equal_subsequence(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return \"yes\"\n        seen.add(char)\n    return \"no\"\n\nT = int(input())\nfor _ in range(T):\n    S = input()\n    print(has_equal_subsequence(S))\n```",
  "552": "```python\ndef max_weight_difference(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        weights = list(map(int, test_cases[i][1].split()))\n        weights.sort()\n        chef_weight = sum(weights[K:])\n        son_weight = sum(weights[:K])\n        results.append(str(chef_weight - son_weight))\n    return results\n```",
  "554": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(pow(n, n, 10**k), pow(n, n, 10**k))\n```",
  "555": "```python\ndef max_students(arr):\n    n = len(arr)\n    max_students = 2\n    current_students = 2\n    for i in range(2, n):\n        if arr[i] == arr[i-1] + arr[i-2]:\n            current_students += 1\n            max_students = max(max_students, current_students)\n        else:\n            current_students = 2\n    return max_students\n```",
  "557": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    max_scores = []\n    for _ in range(M):\n        i, j, k = map(int, input().split())\n        max_scores.append(k * (j - i + 1))\n    mean_max_score = math.floor(sum(max_scores) / N)\n    print(mean_max_score)\n```",
  "560": "```python\ndef judge_competition(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        B = list(map(int, test_cases[i+2].split()))\n        min_A = min(A)\n        min_B = min(B)\n        if min_A < min_B:\n            results.append('Alice')\n        elif min",
  "561": "```python\ndef can_spend_all_money(T, cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, cases[i*2].split())\n        demands = list(map(int, cases[i*2+1].split()))\n        if sum(demands) <= K:\n            results.append('YES')\n        else:\n            results.append('NO')\n    return results\n```",
  "563": "def total_coins(T, islands, donations, Q, trips):\n    result = []\n    for trip in trips:\n        start, end = trip\n        result.append(str(sum(donations[start-1:end])))\n    return result",
  "564": "```python\ndef min_rounds(T, cases):\n    result = []\n    for case in cases:\n        N, K, *c = case\n        c.sort()\n        rounds = 0\n        for i in range(N-1):\n            if c[i+1] - c[i] >= K:\n                rounds += 1\n        result.append(str(rounds + 1))\n    return result\n```",
  "566": "```python\ndef is_palindromic_substring_possible(A, B):\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i:] + B[j:] == (A[i:] + B[j:])[::-1]:\n                return \"Yes\"\n    return \"No\"\n\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    print(is_palindromic_substring_possible(A, B))\n```",
  "567": "```python\ndef can_finish_painting(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N = int(cases[i])\n        colors = list(map(int, cases[i+1].split()))\n        if colors[0] == colors[-1] or colors[0] == colors[1] or colors[-1] == colors[-2]:\n            results.append(\"No\")\n        else:\n            results.append(\"Yes\")\n   ",
  "568": "```python\ndef solve_tree_decomposition(T, test_cases):\n    result = []\n    for case in test_cases:\n        N = int(case[0])\n        if N % 3 == 1:\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            for i in range(2, N+1, 3):\n                print(1, i, i+1, i+2)\n    return result\n```",
  "569": "```python\ndef find_nth_element(n):\n    x = int((2 * n) ** 0.5)\n    if x * (x + 1) <= 2 * n:\n        x += 1\n    print(n - (x * (x - 1)) // 2)\n```",
  "571": "t = int(input())\nfor _ in range(t):\n    ingredients = list(map(int, input().split()))\n    total = sum(ingredients[1:])\n    reduced_recipe = [ingredient * ingredients[1] // total for ingredient in ingredients[1:]]\n    print(*reduced_recipe)",
  "572": "```python\nT = int(input())\nfor _ in range(T):\n    N, M, K = map(int, input().split())\n    diff = abs(N - M) - K\n    if diff < 0:\n        diff = 0\n    print(diff)\n```",
  "573": "```python\ndef min_hours_to_teach_topics(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, m = map(int, case.split())\n        if n == 2:\n            results.append(1)\n        else:\n            results.append(2 * m)\n    return results\n```",
  "574": "```python\ndef max_subarray(arr):\n    max_sum = 0\n    max_length = 0\n    start = 0\n    end = 0\n    current_sum = 0\n    current_length = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            current_sum += arr[i]\n            current_length += 1\n            if current_sum > max_sum or (current_sum == max_sum and current_length > max_length",
  "575": "```python\ndef min_possible_P(T, sequences):\n    result = []\n    for s in sequences:\n        count = 1\n        for i in range(len(s)):\n            if s[i] == '=':\n                count = max(count, 2)\n        result.append(count)\n    return result\n```",
  "576": "```python\nN = int(input())\nwords = [input() for _ in range(N)]\n\ndef count_subsequences(word):\n    count = 1\n    for char in word:\n        if char == 'a':\n            count *= 2\n    print(count)\n\nfor word in words:\n    count_subsequences(word)\n```",
  "577": "s, n = input(), int(input())\nfor _ in range(n):\n    w = input()\n    print(\"Yes\" if all(c in s for c in w) else \"No\")",
  "578": "for _ in range(int(input())):\n    n, b = map(int, input().split())\n    if n // 2 >= b:\n        print(n // 2)\n    else:\n        print(n % (n // 2 + 1) + (n // 2) * (n // 2))",
  "581": "def serve_sugarcane(N, test_cases):\n    results = []\n    for case in test_cases:\n        K, L, E = case[0], case[1], case[2]\n        ages = case[3:]\n        total_age = sum(ages) + E\n        if L % total_age == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results",
  "583": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    print(\"YES\" if s == 0 else \"NO\")",
  "584": "```python\ndef max_circles_in_square(N, strings):\n    result = []\n    for s in strings:\n        ones_count = s.count('1')\n        result.append(ones_count - 1)\n    return result\n```",
  "585": "def max_sorcerers_killed(T, cases):\n    results = []\n    for case in cases:\n        N, M = case[0], case[1]\n        powers = case[2:]\n        max_power = max(powers)\n        max_kills = (N - 1) // M\n        results.append(min(max_kills, max_power))\n    return results",
  "586": "```python\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    N, R = map(int, input().split())\n    teams = defaultdict(int)\n    for _ in range(R):\n        team, points = input().split()\n        teams[team] += int(points)\n    for _ in range(N - R):\n        team, points = input().split()\n        teams[team] += int(points)\n    sorted_teams = sorted(teams.items(), key=lambda",
  "587": "```python\ndef find_boys_strength(N, girls_strength):\n    boys_strength = []\n    for strength in girls_strength:\n        boys_strength.append(int(strength) + 2)\n    return boys_strength\n```",
  "588": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    angles = list(map(int, input().split()))\n    angles.sort()\n    max_gap = max((angles[i+1] - angles[i]) % 360 for i in range(n-1))\n    print((360 - max_gap) % 360)\n```",
  "589": "```python\ndef days_to_cross_passage(T, passages):\n    result = []\n    for passage in passages:\n        jump_length = 1\n        days = 0\n        for char in passage[1:]:\n            if char == '.':\n                jump_length += 1\n            else:\n                if jump_length > 1:\n                    days += 1\n                    jump_length = 1\n        result.append(str(days))\n    return result\n```",
  "590": "```python\ndef find_element(N, x, M, A):\n    MOD = 10**9 + 7\n    for i in range(1, M+1):\n        for j in range(1, N):\n            A[j] = (A[j] + A[j-1]) % MOD\n    return A[x-1]\n```",
  "591": "def find_jojo_aadhar_number(N):\n    return (N-1)*10 + 7",
  "592": "def winner_of_game(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        S = test_cases[i]\n        N = int(test_cases[i+1])\n        dictionary = set(test_cases[i+2:i+2+N])\n        teddy_wins = False\n        for word in dictionary:\n            if word in S:\n                teddy_wins = not teddy_wins\n        if teddy_wins:\n            results",
  "593": "def cheapest_pangram(T, tests):\n    results = []\n    for i in range(0, len(tests), 2):\n        prices = list(map(int, tests[i].split()))\n        text = tests[i+1]\n        missing_letters = [prices[ord(letter) - ord('a')] for letter in 'abcdefghijklmnopqrstuvwxyz' if letter not in text]\n        results.append(str(sum(missing_letters)))\n    return results",
  "594": "```python\nn, x = map(int, input().split())\narr = list(map(int, input().split()))\nmin_sum = sum(arr)\nfor i in range(n):\n    for j in range(i, n):\n        new_sum = sum(arr[:i]) + sum([a//x for a in arr[i:j+1]]) + sum(arr[j+1:])\n        min_sum = min(min_sum, new_sum)\nprint(min_sum)\n```",
  "597": "```python\ndef max_restaurant_area(T, cases):\n    results = []\n    for case in cases:\n        N = case[0]\n        points = case[1:]\n        max_area = 0\n        for i in range(N-1):\n            area = (points[i+1][0] - points[i][0]) * min(points[i][1], points[i+1][1])\n            max_area = max(max_area, area)\n        results.append(2 * max",
  "598": "```python\ndef stone_problem(N, K, A):\n    max_val = max(A)\n    for i in range(N):\n        A[i] = max_val - A[i]\n    return A\n```",
  "599": "```python\ndef count_unhappy_shifts(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        chocolates = list(map(int, case[1].split()))\n        max_sweetness = max(chocolates[:N//2])\n        unhappy_shifts = 0\n        for i in range(N//2):\n            if chocolates[i] == max_sweetness:\n                unhappy_shifts += 1\n        results.append",
  "600": "```python\ndef last_remaining_fibonacci_number(N):\n    if N == 1:\n        return 0\n    a, b = 0, 1\n    for _ in range(2, N + 2):\n        a, b = b, (a + b) % 10\n    return a\n```",
  "601": "```python\ndef max_events(N, events):\n    events.sort(key=lambda x: (x[0] + x[1], x[1]))\n    count = 0\n    end_time = 0\n    for event in events:\n        if event[0] >= end_time:\n            count += 1\n            end_time = event[0] + event[1] + 1\n    return count\n```",
  "602": "```python\ndef remix_song(lyrics):\n    words = lyrics.split()\n    min_word = min(words, key=len)\n    remixed_lyrics = ' '.join([min_word] + words + [min_word])\n    print(remixed_lyrics)\n\nremix_song('Mai Hu Jiyaan')\n```",
  "603": "for _ in range(int(input())):\n    k = int(input())\n    print(''.join(chr(ord('a') + i) for i in range(k+1))[::-1])",
  "604": "def is_stable_grid(T, test_cases):\n    result = []\n    for i in range(T):\n        R, C = map(int, test_cases[i][0].split())\n        grid = [list(map(int, row.split())) for row in test_cases[i][1:]]\n        stable = True\n        for r in range(R):\n            for c in range(C):\n                adj_count = sum(1 for dr, dc in [(1, 0), (-1, 0",
  "605": "```python\ndef is_safe(n, m, s):\n    if 'L' in s and s.count('L') > m - 1:\n        return \"unsafe\"\n    if 'R' in s and s.count('R') > m - 1:\n        return \"unsafe\"\n    if 'U' in s and s.count('U') > n - 1:\n        return \"unsafe\"\n    if 'D' in s and s.count('D') > n -",
  "607": "```python\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if 1 in a:\n        print(n)\n    else:\n        g = a[0]\n        for i in range(1, n):\n            g = gcd(g, a[i])\n        if g == 1:\n            print(n)\n        else:\n            print(-1)\n```",
  "609": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    q = list(map(int, input().split()))\n    total = 0\n    day = 0\n    for i in q:\n        total += i\n        day += 1\n        if total < k:\n            print(day)\n            break\n        total -= k",
  "610": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = True\n    dist = 0\n    for i in range(n):\n        if a[i] == 1:\n            if dist < 6 and i != 0:\n                flag = False\n                break\n            dist = 0\n        else:\n            dist += 1\n    print(\"YES\" if flag else \"NO",
  "611": "```python\ndef is_truly_happy(N, A):\n    seen = set()\n    for i in range(N):\n        if A[i] != i + 1:\n            if A[A[i] - 1] == A[i]:\n                return \"Truly Happy\"\n            seen.add(A[i])\n    for num in seen:\n        if A[num - 1] != num:\n            return \"Truly Happy\"\n    return \"Poor Chef\"\n\nT = int(input())\nresults =",
  "612": "```python\ndef classify_feedback(feedbacks):\n    results = []\n    for feedback in feedbacks:\n        if '010' in feedback or '101' in feedback:\n            results.append('Good')\n        else:\n            results.append('Bad')\n    return results\n```",
  "613": "def count_bubbly_words(M, words):\n    count = 0\n    for word in words:\n        if word.count('A') == word.count('B'):\n            count += 1\n    return [count]",
  "615": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    bills = list(map(int, input().split()))\n    for _ in range(q):\n        x, y = map(int, input().split())\n        print(sum(bills[x-1:y]))",
  "618": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    coins = list(map(int, input().split()))\n    total_coins = sum(coins[:k])\n    max_coins = total_coins\n    for i in range(n):\n        total_coins = total_coins - coins[i] + coins[(i+k)%n]\n        max_coins = max(max_coins, total_coins)\n    print(max_coins",
  "619": "```python\nT = int(input())\nfor _ in range(T):\n    P1, P2, K = map(int, input().split())\n    total_points = P1 + P2\n    if (total_points // K) % 2 == 0:\n        print(\"CHEF\")\n    else:\n        print(\"COOK\")\n```",
  "620": "```python\ndef longest_contiguous_segment(arr, n, k):\n    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if arr[i] < k:\n            curr_len += 1\n        else:\n            curr_len = 0\n        max_len = max(max_len, curr_len)\n    return max_len\n```",
  "621": "```python\ndef find_stem(words):\n    words.sort()\n    prefix = words[0]\n    suffix = words[-1]\n    for i in range(len(prefix)):\n        if prefix[i] != suffix[i]:\n            return prefix[:i]\n    return prefix\n```",
  "622": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    N, M, W, H = map(int, input().split())\n    S = input()\n    points = [tuple(map(int, input().split())) for _ in range(M)]\n    min_distance = float('inf')\n    for i in range(M):\n        for j in range(i+1, M):\n            distance = math.sqrt((points[i][0]-points[j][0])**2 +",
  "623": "numbers = ['5', '3', '6', '7', '1']\nnumbers.sort()\nprint(numbers)",
  "624": "def CristoSutra(Ti):\n    alpha = 0\n    beta = 0\n    if Ti <= 0:\n        alpha = alpha + 1\n    elif Ti == 1:\n        beta = beta + 1\n    else:\n        CristoSutra(Ti-1)\n        CristoSutra(Ti-2)\n        CristoSutra(Ti-3)\n    return alpha, beta",
  "625": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    prefix_sum = 0\n    count = {0: 1}\n    result = 0\n    for num in A:\n        prefix_sum = (prefix_sum + num) % (10**9)\n        result += count.get(prefix_sum, 0)\n        count[prefix_sum] = count.get(prefix_sum, 0",
  "626": "def scrambled_message(T, test_cases):\n    result = []\n    for case in test_cases:\n        k, message = case.split()\n        k = int(k)\n        n = 2 ** k\n        new_message = [''] * n\n        for i in range(n):\n            binary = bin(i)[2:].zfill(k)\n            reversed_binary = binary[::-1]\n            index = int(reversed_binary, 2)\n            new_message[index] = message[i]\n        result.append",
  "627": "from math import comb\nN, K = map(int, input().split())\nprint(comb(N+K-1, K-1) % (10**9 + 7))",
  "628": "def find_winner(T, cells):\n    result = []\n    for cell in cells:\n        if 'B' in cell:\n            result.append('Aleksa')\n        else:\n            result.append('Chef')\n    return result",
  "629": "```python\ndef minimize_max_liquid(T, cases):\n    results = []\n    for case in cases:\n        R, G, B, M = map(int, case[0].split())\n        r = list(map(int, case[1].split()))\n        g = list(map(int, case[2].split()))\n        b = list(map(int, case[3].split()))\n        max_values = [max(r), max(g), max(b)]\n        max_values.sort(reverse=True)\n",
  "631": "print(str(int(str(A - B)[:-1]) + 1) + str(A - B)[-1])",
  "632": "```python\ndef toggle_machine_state(N, k):\n    if k % 2 == 0:\n        return \"OFF\"\n    else:\n        return \"ON\"\n\nT = int(input())\nfor _ in range(T):\n    N, k = map(int, input().split())\n    print(toggle_machine_state(N, k))\n```",
  "633": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    heights = [int(input()) for _ in range(N)]\n    print(max(heights))\n```",
  "634": "def max_age_of_universe(s):\n    max_age = int(''.join([c if c.isdigit() else '9' for c in s]))\n    for i in range(len(s)):\n        if s[i].isalpha():\n            for j in range(10):\n                new_str = s[:i] + str(j) + s[i+1:]\n                max_age = max(max_age, int(''.join([c if c.isdigit() else '9' for c in new_str",
  "635": "```python\nfrom collections import Counter\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nMOD = 1000000007\ncount = Counter(A)\nanswer = 1\nfor key in count:\n    answer *= (pow(2, count[key], MOD) + 1) - 1\n    answer %= MOD\nprint(answer)\n```",
  "636": "```python\ndef count_quadruples(N, T, S):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    if S[i] + S[j] + S[k] + S[l] == T:\n                        count += 1\n    return count\n```",
  "638": "from collections import defaultdict\nMOD = 10**9 + 7\n\ndef count_substrings(n, m, strings):\n    result = []\n    for s in strings:\n        count = 0\n        for i in range(n - len(s) + 1):\n            if s == strings[i:i + len(s)]:\n                count += 1\n        result.append(count % MOD)\n    return result\n\nT = int(input())\nfor t in range(T):\n    n, m =",
  "639": "```python\ndef is_dynamic_string(s):\n    if len(set(s)) < 3:\n        return \"Dynamic\"\n    freq = [s.count(c) for c in set(s)]\n    freq.sort()\n    if freq[0] + freq[1] == freq[-1]:\n        return \"Dynamic\"\n    return \"Not\"\n\nT = 3\ntestcases = ['aaaabccc', 'aabbcc', 'ppppmmnnoooopp']\nresults = [is_dynamic",
  "640": "t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    diff = abs(x - y)\n    print(diff)",
  "641": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p):\n    global dp, g, a, b, c\n    dp[v][0] = a[v]\n    for u in g[v]:\n        if u == p:\n            continue\n        dfs(u, v)\n        dp[v][0] += min(dp[u][0], b[u])\n    x = []\n    for u in g[v]:\n        if u == p:\n           ",
  "642": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    N, D = map(int, input().split())\n    C = list(map(int, input().split()))\n    C.sort()\n    cooldown = 0\n    for i in range(1, N):\n        cooldown = max(cooldown, (C[i] - C[i-1] - D) / 2)\n    cooldown = max(cooldown, (C[0] - 0)",
  "643": "```python\ndef prime_sum_modulo(T, test_cases):\n    MOD = 10**9 + 7\n    result = []\n    for _ in range(T):\n        n = int(test_cases[_][0])\n        P = list(map(int, test_cases[_][1].split()))\n        A = list(map(int, test_cases[_][2].split()))\n        B = list(map(int, test_cases[_][3].split()))\n        N = 1\n        for i in",
  "644": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    candies = list(map(int, input().split()))\n    total_candies = sum(candies)\n    if total_candies % N == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```",
  "645": "```python\ndef max_sum_S2(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        K = case[1]\n        if K % N == 0:\n            results.append(N)\n        else:\n            results.append(min(N - K % N, K % N))\n    return results\n```",
  "646": "```python\ndef min_length_string(s):\n    stack = []\n    for char in s:\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n    return len(stack)\n```",
  "647": "```python\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n    if s > 9*n or (s == 0 and n > 1):\n        print(-1)\n    else:\n        digits = [0] * n\n        s -= 1\n        for i in range(n-1, 0, -1):\n            d = min(9, s)\n            digits[i] = d\n            s -= d",
  "648": "```python\ndef hill_jumping(N, Q, heights, operations):\n    result = []\n    for op in operations:\n        if op[0] == 1:\n            i, k = op[1:]\n            curr = i - 1\n            while k > 0 and curr < N - 1:\n                next_hill = curr + 1\n                while next_hill < N and heights[next_hill] <= heights[curr]:\n                    next_hill += 1",
  "651": "```python\ndef remaining_cards(N, cards):\n    unique_cards = list(set(cards))\n    return min(N, len(unique_cards) + (N - len(unique_cards)) // 2)\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    cards = list(map(int, input().split()))\n    print(remaining_cards(N, cards))\n```",
  "652": "```python\nT = int(input())\nfor _ in range(T):\n    s1 = input().lower()\n    s2 = input().lower()\n    if s1 < s2:\n        print(\"first\")\n    elif s1 > s2:\n        print(\"second\")\n    else:\n        print(\"equal\")\n```",
  "653": "```python\nn = int(input())\nhealth = list(map(int, input().split()))\nP = int(input())\n\npoints = 0\nfor h in health:\n    if h <= P:\n        P -= h\n        points += 1\n    elif points > 0:\n        points -= 1\n        P += h\n\nprint(points)\n```",
  "654": "```python\nT = int(input())\nfor _ in range(T):\n    A, B, C = map(int, input().split())\n    print(sorted([A, B, C])[-2])\n```",
  "655": "for _ in range(int(input())):\n    N, K, V = map(int, input().split())\n    A = list(map(int, input().split()))\n    total_sum = (N + K) * V\n    remaining_sum = sum(A)\n    deleted_sum = total_sum - remaining_sum\n    if deleted_sum > 0 and deleted_sum % K == 0:\n        print(deleted_sum // K)\n    else:\n        print(-1)",
  "656": "n = int(input())\nif n % 4 == 0:\n    print(n + 1)\nelse:\n    print(n - 1)",
  "657": "```python\ndef matrixScore(A):\n    m, n = len(A), len(A[0])\n    res = (1 << (n - 1)) * m\n    for j in range(1, n):\n        cur = sum(A[i][j] == A[i][0] for i in range(m))\n        res += max(cur, m - cur) * (1 << (n - 1 - j))\n    return res\n```",
  "658": "```python\ndef longest_updown_subsegment(n, sequence):\n    max_length = 1\n    for i in range(n - 1):\n        if sequence[i] <= sequence[i + 1]:\n            max_length = max(max_length, i + 2)\n        if i > 0 and sequence[i - 1] >= sequence[i + 1]:\n            max_length = max(max_length, i + 1)\n    return max_length\n```",
  "659": "```python\ndef smallest_length_subarray(n, k, s, a):\n    left = 0\n    right = 0\n    sum_subarray = 0\n    min_length = float('inf')\n    \n    while right < n:\n        sum_subarray += a[right]\n        while sum_subarray > s and right - left > k:\n            min_length = min(min_length, right - left + 1)\n            sum_subarray -= a[left]\n            left += ",
  "660": "```python\nfrom math import factorial\n\ndef is_interesting_number(n):\n    original_n = n\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += factorial(digit)\n        n //= 10\n    return 1 if total == original_n else 0\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(is_interesting_number(N))\n```",
  "661": "```python\nimport math\n\nT, X = map(int, input().split())\nfor _ in range(T):\n    N = int(input())\n    S = int(math.sqrt(N))\n    if N - S**2 <= 0.01*X*N:\n        print('yes')\n    else:\n        print('no')\n```",
  "662": "def sum_of_alternate_odd_numbers(T, test_cases):\n    result = []\n    for case in test_cases:\n        d, L, R = case\n        odd_numbers = [i for i in range(L, R+1) if i % 2 != 0]\n        alternate_odd_numbers = odd_numbers[::d]\n        result.append(sum(alternate_odd_numbers) % 1000000007)\n    return result",
  "663": "```python\nfrom collections import deque\n\ndef lex_smallest_string(L, S):\n    S = deque(S)\n    for i in range(L):\n        S.rotate(-1)\n        if S < min_str:\n            min_str = S\n    return ''.join(min_str)\n```",
  "665": "```python\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    R = list(map(int, input().split()))\n    C = [list(map(int, input().split())) for _ in range(N)]\n    peak_ratings = [max(R[i] + sum(C[i][j] for j in range(M))) for i in range(N)]\n    peak_rankings = [sorted(peak_ratings, reverse=True).index(peak",
  "666": "def generate_pattern(K):\n    pattern = ''\n    num = 1\n    for i in range(1, K+1):\n        for j in range(1, i+1):\n            pattern += str(num)\n            num += 1\n    return pattern",
  "667": "```python\ndef latest_bus_day(N, D, bus_routes):\n    max_day = D\n    for route in bus_routes[::-1]:\n        max_day = (max_day // route) * route\n    return max_day\n```",
  "669": "MOD = 10**9 + 7\ndef solve(N, M, K, roads, Q, conditions):\n    adj = [[] for _ in range(N)]\n    for u, v in roads:\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    dp = [[0] * N for _ in range(K+1)]\n    for i in range(N):\n        dp[0][i] = 1\n    for",
  "670": "```python\ndef min_sum(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        arr = list(map(int, test_cases[i+1].split()))\n        min_sum = sum(arr) - N\n        results.append(str(min_sum))\n    return results\n```",
  "671": "```python\ndef can_build_team(N, S, prices, positions):\n    defenders = [prices[i] for i in range(N) if positions[i] == 0]\n    forwards = [prices[i] for i in range(N) if positions[i] == 1]\n    defenders.sort()\n    forwards.sort()\n    if defenders[0] + defenders[1] + min(forwards) + S <= 100:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
  "672": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    x1, y1, x2, y2 = map(int, input().split())\n    q = int(input())\n    print(\"Test case :\", _+1)\n    for _ in range(q):\n        x3, y3 = map(int, input().split())\n        if x1 == x2:\n            print(\"YES\" if min(y1, y2) <= y3 <= max",
  "673": "```python\nt = int(input())\nfor _ in range(t):\n    n, m, a, d = map(int, input().split())\n    count = m - n + 1\n    for i in range(5):\n        count -= (m // (a + i * d)) - ((n - 1) // (a + i * d))\n    print(count)\n```",
  "674": "```python\ndef error_in_signature(T, test_cases):\n    result = []\n    for i in range(T):\n        N, M = map(int, test_cases[i][0].split())\n        A = [list(map(int, x)) for x in test_cases[i][1:N+1]]\n        B = [list(map(int, x)) for x in test_cases[i][N+1:]]\n        error = sum([1 for i in range(N) for j in range(M",
  "675": "for _ in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2 or n == 4:\n        print(-1)\n    else:\n        ans = [2, 3, 1]\n        for i in range(4, n + 1):\n            ans.append(i)\n        print(*ans)",
  "676": "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    names = input().split()\n    count = Counter(names)\n    max_count = max(count.values())\n    winners = [name for name in count if count[name] == max_count]\n    print(min(winners))",
  "677": "import datetime\ndate = list(map(int, input().split()))\nday_of_week = datetime.date(date[2], date[1], date[0]).strftime(\"%A\")\nprint(day_of_week)",
  "678": "```python\ndef days_to_spread(T, cases):\n    result = []\n    for case in cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        days = 0\n        people_known = 1\n        while people_known < N:\n            max_people = max(A[:people_known])\n            days += 1\n            people_known += max_people\n        result.append(str(days))\n    return result\n```",
  "679": "```python\nclass BookPile:\n    def __init__(self):\n        self.books = []\n    \n    def add_book(self, exercises, name):\n        self.books.append((exercises, name))\n    \n    def remove_book(self):\n        min_exercises = min(self.books, key=lambda x: (x[0], -self.books.index(x)))\n        self.books.remove(min_exercises)\n        return min_exercises\n\nN = int(input())\npile = BookPile()\nfor _ in",
  "680": "```python\nT = 1\ntest_cases = [\n    (3, 4, [2, -1, 5], [3, 3, 2, 4], 6, [\n        (3,),\n        (1, 2, 3, -2),\n        (3,),\n        (1, 1, 3, 1),\n        (2, 2, 4, 2),\n        (3,)\n    ])\n]\n```",
  "681": "def count_different_final_arrays(N, M, K, A):\n    total_sum = sum(A)\n    max_possible_sum = total_sum + (N * K)\n    min_possible_sum = total_sum - (N * K)\n    if K == 0:\n        return 1\n    elif K > 0 and max_possible_sum % 2 == 0 and min_possible_sum % 2 == 0:\n        return 2\n    else:\n        return 1",
  "682": "def find_segment(n, coins):\n    if coins == sorted(coins):\n        return \"0 0\"\n    else:\n        l, r = 0, 0\n        for i in range(n-1):\n            if coins[i] > coins[i+1]:\n                l = i\n                break\n        for i in range(n-1, 0, -1):\n            if coins[i] < coins[i-1]:\n                r = i\n                break\n        if",
  "683": "n = int(input())\nprint(n)",
  "686": "```python\nT = int(input())\nfor _ in range(T):\n    N, V1, V2 = map(int, input().split())\n    if (2**0.5 * N) / V1 < N / V2:\n        print(\"Stairs\")\n    else:\n        print(\"Elevator\")\n```",
  "687": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    inversions = sum(1 for i in range(N) for j in range(i+1, N) if A[i] > A[j])\n    local_inversions = sum(1 for i in range(N-1) if A[i] > A[i+1])\n    if inversions == local_inversions:\n        print('",
  "688": "t = int(input())\nfor _ in range(t):\n    s = input()\n    transitions = sum(1 for i in range(8) if s[i] != s[(i+1)%8])\n    if transitions <= 2:\n        print(\"uniform\")\n    else:\n        print(\"non-uniform\")",
  "689": "```python\nt = int(input())\npositions = []\nfor _ in range(t):\n    a, b = map(int, input().split())\n    positions.append((a, a+b))\n    \nif len(set(positions)) == len(positions):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n```",
  "690": "```python\ndef min_speeches_required(N, K, M, morale):\n    count = 0\n    for i in range(N):\n        if morale[i] < M:\n            if i+K-1 < N:\n                for j in range(i, i+K):\n                    morale[j] *= M\n                count += 1\n            else:\n                return -1\n    return count\n```",
  "691": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_star_value = 0\n    divisors_count = {}\n    for i in range(N):\n        count = 0\n        for j in range(i):\n            if A[i] % A[j] == 0:\n                count += 1\n        max_star_value = max(max_star_value, count)\n    print(max_star",
  "692": "```python\nclass ANGEN:\n    def __init__(self, arr):\n        self.arr = arr\n\n    def update(self, i, v):\n        self.arr[i-1] = v\n\n    def find_sum(self, l, r):\n        return sum(self.arr[l-1:r])\n\n    def find_max(self, l, r):\n        return max(self.arr[l-1:r])\n\n    def find_min(self, l, r):\n        return min(self.arr[l-1:r",
  "693": "import math\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(math.factorial(N))",
  "694": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    x, y, z = map(int, input().split())\n    lcm_xy = x * y // math.gcd(x, y)\n    lcm_yz = y * z // math.gcd(y, z)\n    lcm_xz = x * z // math.gcd(x, z)\n    lcm_xyz = lcm_xy * z // math.gcd(lcm_xy, z)\n   ",
  "696": "def is_possible_permutation(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = case[0], case[1]\n        permutation = case[2]\n        pairs = case[3:]\n        # Check if permutation can be obtained\n        # Append \"Possible\" or \"Impossible\" to results\n    return results",
  "697": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    powers = list(map(int, input().split()))\n    max_power = sum(powers[:K])\n    current_power = max_power\n    for i in range(K, N):\n        current_power = current_power - powers[i-K] + powers[i]\n        max_power = max(max_power, current_power)\n    print(max_power)\n```",
  "698": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(b - a)\n```",
  "699": "```python\nfor _ in range(int(input())):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    total_problems = sum(A)\n    max_contests = total_problems // K\n    print(min(max_contests, D))\n```",
  "700": "```python\ndef min_amount_to_spend(T, banks):\n    for bank in banks:\n        min_amount = min(bank)\n        print(min_amount)\n```",
  "701": "```python\ndef smallest_position_to_split_sequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, k = map(int, case[0].split())\n        powers = list(map(int, case[1].split()))\n        prefix_sum = [0] * (N + 1)\n        for i in range(N):\n            prefix_sum[i + 1] = prefix_sum[i] + powers[i]\n        max_product = 0\n        left_size",
  "702": "```python\nT = int(input())\nfor _ in range(T):\n    m, Tc, Th = map(int, input().split())\n    if (Th - Tc) > m * 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```",
  "703": "def beautiful_binary_number(n):\n    while True:\n        binary = bin(n)[2:]\n        if '11' not in binary:\n            return n\n        n -= 1",
  "704": "```python\nT = int(input())\nfor _ in range(T):\n    A, N, M = map(int, input().split())\n    print(pow(A, N, M))\n```",
  "705": "```python\ndef count_paths(N):\n    if N % 2 == 0:\n        return 2 ** (N // 2)\n    else:\n        return 0\n```",
  "706": "def smallest_round_trips(T, test_cases):\n    result = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        weights = list(map(int, test_cases[i][1].split()))\n        total_weight = 0\n        trips = 0\n        for weight in weights:\n            if weight > K:\n                result.append(\"-1\")\n                break\n            if total_weight + weight > K:\n                trips += 1",
  "707": "```python\ndef get_secret_sequence(N, connections):\n    graph = {}\n    for x, y in connections:\n        if x not in graph:\n            graph[x] = []\n        if y not in graph:\n            graph[y] = []\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = set()\n    sequence = []\n\n    def dfs(node):\n        visited.add(node)\n        sequence.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited",
  "708": "```python\nT = int(input())\nfor _ in range(T):\n    N, A = map(int, input().split())\n    result = pow(A, N, 10**9 + 7) * ((pow(2, N, 10**9 + 7) - 1) % (10**9 + 7))\n    print(result % (10**9 + 7))\n```",
  "709": "from math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_gcd = max(gcd(arr[0], arr[-1]), gcd(arr[0], arr[n-1]), gcd(arr[-1], arr[n-1]))\n    print(max_gcd)",
  "710": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nprefix_sum = list(accumulate(a))\nmax_val = max(prefix_sum[i] - prefix_sum[j] for i in range(1, n) for j in range(i))\nprint(max_val)",
  "712": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if all(x % 2 != 0 for x in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "713": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    M = int(input())\n    B = list(map(int, input().split()))\n    idx = 0\n    for b in B:\n        try:\n            idx = A.index(b, idx) + 1\n        except ValueError:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n```",
  "714": "```python\ndef min_operations(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        candies = test_cases[i][1]\n        total_candies = sum(candies)\n        avg_candies = total_candies // N\n        remaining_candies = total_candies % N\n        operations = 0\n        for candy in candies:\n            if candy < avg_candies:\n                operations",
  "715": "def find_values(s):\n    values = []\n    for word in s:\n        value = 0\n        for char in word:\n            value += ord(char) - 64\n        values.append(str(value))\n    return values",
  "717": "for _ in range(int(input())):\n    b, g = map(int, input().split())\n    print(b*g + b + g)",
  "719": "```python\ndef find_starting_point(N, juice_shops):\n    total_juice = 0\n    total_distance = 0\n    starting_point = 0\n    for i in range(N):\n        total_juice += juice_shops[i][0]\n        total_distance += juice_shops[i][1]\n        while total_juice < total_distance:\n            total_juice -= juice_shops[starting_point][0]\n            total_distance -= juice_shops",
  "720": "```python\ndef beauty_of_binary_string(s):\n    cnt_0 = s.count('0')\n    cnt_1 = s.count('1')\n    beauty = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].count('0') == s[i:j+1].count('1')**2:\n                beauty += 1\n    return beauty\n```",
  "721": "def count_palindromes(N):\n    return (26 * pow(27, (N-1)//2, 10**9 + 7)) % (10**9 + 7) if N > 1 else 26",
  "723": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    polynomial = []\n    for _ in range(N):\n        a, p = map(int, input().split())\n        if p != 0:\n            polynomial.append(str(a*p) + 'x^' + str(p-1))\n    print(' + '.join(polynomial))\n```",
  "724": "```python\n# Loop through the test cases\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    seq = list(map(int, input().split()))\n    perm = [0] * n\n    j = 0\n    for i in range(1, n+1):\n        if j < k and i == seq[j]:\n            perm[i-1] = seq[j]\n            j += 1\n    if j == k",
  "725": "```python\ndef min_operations_to_avoid_arrest(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N, K, M = map(int, test_cases[i].split())\n        R = list(map(int, test_cases[i+1].split()))\n        operations = 0\n        for i in range(N-K+1):\n            subarray = R[i:i+K]\n            max_val = max(subarray)\n",
  "726": "```python\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ingredients = [input() for _ in range(N)]\n    cauldron = ''.join(ingredients)\n    counts = Counter(cauldron)\n    meals = min(counts['c']//2, counts['o']//2, counts['d'], counts['e']//2, counts['h'], counts['f'])\n    print(meals)\n```",
  "727": "```python\ndef min_unused_wire_length(T, cases):\n    results = []\n    for case in cases:\n        N, M = map(int, case.split())\n        if M < N * (N + 1) // 2:\n            results.append(\"-1\")\n        else:\n            results.append(str(max(0, M - N * (N + 1) // 2)))\n    return results\n```",
  "728": "n = int(input())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nprint(abs(sum(matrix[i][i] for i in range(n)) - sum(matrix[i][n-1-i] for i in range(n))))",
  "729": "```python\ndef min_moves_to_make_one(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, M = map(int, case[0].split())\n        matrix = [list(map(int, list(row))) for row in case[1:]]\n        row_moves = [0] * N\n        col_moves = [0] * M\n        for i in range(N):\n            for j in range(M):\n                if matrix[i][j] ==",
  "730": "```python\ndef determine_winner(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        cookies = [list(map(int, test_cases[i+1].split())) for _ in range(N)]\n        scores = [sum(c) + (len(set(c)) - 1) for c in cookies]\n        max_score = max(scores)\n        if scores.count(max_score) > 1:\n",
  "731": "```python\ndef max_cheapest_route_cost(C, F, flights):\n    graph = {i: {} for i in range(1, C + 1)}\n    for x, y, p in flights:\n        graph[x][y] = p\n        graph[y][x] = p\n    for k in range(1, C + 1):\n        for i in range(1, C + 1):\n            for j in range(1, C + 1",
  "732": "```python\ndef weird_distance(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        B = list(map(int, test_cases[i+2].split()))\n        distance = 0\n        for j in range(N):\n            if A[j] == B[j]:\n                distance += A[j]\n        result.append(str",
  "733": "```python\ndef smallest_palindromic_substring(T, test_cases):\n    result = []\n    for i in range(T):\n        N = test_cases[i][0]\n        s = test_cases[i][1]\n        for j in range(N):\n            if s[j] != s[N-j-1]:\n                result.append(min(s[j:N-j], s[j+1:N-j+1]))\n                break\n    return result\n```",
  "734": "```python\nT = 2\ntest_cases = [(9, [1, 1, 1, 2, 2, 2, 3, 3, 3]), (2, [1, 1])]\n```",
  "735": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "736": "```python\ndef min_points_string_conversion(s):\n    count_a = s.count('a')\n    count_z = s.count('z')\n    return abs(count_a - count_z)\n```",
  "737": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef rodriguez_happy(x, y):\n    left_out_area = x*x - y*y\n    if is_prime(left_out_area):\n        return \"NO\"\n    else:\n        return \"YES\"\n\nT =",
  "740": "```python\ndef min_fence_length(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, K = case[0]\n        plants = case[1:]\n        perimeter = 0\n        for r, c in plants:\n            if (r - 1, c) not in plants:\n                perimeter += 1\n            if (r + 1, c) not in plants:\n                perimeter += 1\n            if (r,",
  "743": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if k == 1 or k == n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n```",
  "744": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        if i <= (K+1)//2:\n            print('*' * i)\n        else:\n            print('*' * (K+1-i))\n```",
  "745": "```python\ndef min_operations_to_build_temple(n, heights):\n    max_height = max(heights)\n    index_of_max = heights.index(max_height)\n    left_heights = heights[:index_of_max]\n    right_heights = heights[index_of_max+1:]\n    left_operations = sum(max_height - h - i for i, h in enumerate(left_heights))\n    right_operations = sum(max_height - h - i for i, h in enumerate(right_heights[::-1]))\n   ",
  "746": "```python\ndef calculate_P1(H, values):\n    if H == 0:\n        return 0\n    else:\n        return max(values[0] * calculate_P1(H-1, values[1:2**H-1]), values[0] * calculate_P1(H-1, values[2**H-1:]))\n```",
  "747": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if b == a:\n        print(\"YES\")\n        print(*b)\n    else:\n        b = sorted(a, reverse=True)\n        if b == a:\n            print(\"YES\")\n            print(*b)\n        else:\n            print(\"NO\")\n```",
  "748": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = defaultdict(int)\n    for i in range(N-1):\n        count[(A[i], A[i+1])] += 1\n    if count[(1, 2)] + count[(2, 3)] + count[(3, 4)] + count[(4, 5)] + count[(5",
  "749": "```python\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ngraph = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += min(graph[i][j], graph[j][i])\nprint(ans)\n```",
  "750": "```python\ndef is_ambiguous(n, permutation):\n    inverse_permutation = [0] * n\n    for i in range(n):\n        inverse_permutation[int(permutation[i]) - 1] = i + 1\n    if permutation == inverse_permutation:\n        return 'ambiguous'\n    else:\n        return 'not ambiguous'\n```",
  "751": "```python\ndef min_wire_length(T, test_cases):\n    result = []\n    for i in range(T):\n        n = int(test_cases[i*3])\n        electricity = test_cases[i*3+1]\n        coordinates = list(map(int, test_cases[i*3+2].split()))\n        non_electric_villages = [coordinates[j+1]-coordinates[j] for j in range(n-1) if electricity[j] == '0']\n        result.append(str(sum(non",
  "752": "```python\nN, Q = map(int, input().split())\nmedia_types = {}\nfor _ in range(N):\n    ext, media = input().split()\n    media_types[ext] = media\nfor _ in range(Q):\n    file_name = input()\n    ext = file_name.split('.')[-1] if '.' in file_name else ''\n    print(media_types.get(ext, 'unknown'))\n```",
  "753": "def max_nice_bouquet(T, cases):\n    result = []\n    for case in cases:\n        mg, my, mr = map(int, case[0].split())\n        og, oy, or_ = map(int, case[1].split())\n        pg, py, pr = map(int, case[2].split())\n        max_leaves = max(mg, my, mr) + max(og, oy, or_) + max(pg, py, pr)\n",
  "754": "```python\ndef check_divisibility(N):\n    if int(N) % 2 == 0:\n        return 1\n    else:\n        return 0\n\nT = int(input())\nfor _ in range(T):\n    N = input()\n    print(check_divisibility(N))\n```",
  "755": "arr = [38, 6, 34]\nresult = []\nfor i in range(2, max(arr)):\n    if all(x % i == arr[0] % i for x in arr):\n        result.append(i)\nprint(*result)",
  "756": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef min_potatoes_for_prime(x, y):\n    total = x + y\n    if is_prime(total):\n        return 0\n    else:\n        i = 1\n        while not is_prime(total +",
  "757": "```python\ndef is_clingy(s):\n    vowels = set('AEIOU')\n    s += s\n    for i in range(len(s)):\n        if all(c in vowels for c in s[i:i+2]):\n            return 'Yes'\n    return 'No'\n\nT = int(input())\nresults = []\nfor _ in range(T):\n    N = int(input())\n    S = input().strip()\n    results.append(is_clingy(S))\nprint(results)\n```",
  "758": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    b, c = map(float, input().split())\n    print(min((x**2 + b*x + c) / math.sin(x) for x in (0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0",
  "759": "```python\nimport math\n\ndef largest_prime_factor(n):\n    while n % 2 == 0:\n        n = n // 2\n    max_prime = 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime\n\nt = int",
  "761": "def min_uncompleted_tasks(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K, M = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        B = list(map(int, case[2].split()))\n        white_buttons = list(map(int, case[3].split()))\n        black_buttons = list(map(int, case[4].split()))\n        \n        uncompleted_tasks = 0\n",
  "762": "```python\ndef generate_pattern(K):\n    pattern = ''\n    for i in range(1, K+1):\n        if i % 2 == 0:\n            pattern += '0' * (i-1) + '1' + ' '\n        else:\n            pattern += '1' + '0' * (i-1) + ' '\n    return pattern.strip()\n```",
  "763": "```python\ndef can_convert(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        S = test_cases[i+1]\n        P = test_cases[i+2]\n        if S.count('1') != P.count('1'):\n            results.append('No')\n        else:\n            indices_S = [i for i, c in enumerate(S) if c == '1']\n            indices",
  "764": "```python\ndef check_similarity(ingredients1, ingredients2):\n    common_ingredients = set(ingredients1) & set(ingredients2)\n    if len(common_ingredients) >= 2:\n        return \"similar\"\n    else:\n        return \"dissimilar\"\n\nT = int(input())\nresults = []\nfor _ in range(T):\n    dish1 = input().split()\n    dish2 = input().split()\n    results.append(check_similarity(dish1, dish2))\n\nprint(results)\n",
  "765": "```python\ndef chef_trip(N, cities, queries):\n    enjoyment = 1\n    for i in range(1, N+1, R):\n        enjoyment = (enjoyment * cities[i-1]) % (10**9 + 7)\n    return str(enjoyment)[0], enjoyment\n```",
  "766": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    max_area = max(arr[-1]*arr[-2], arr[0]*arr[1])\n    min_area = min(arr[0]*arr[1], arr[1]*arr[2])\n    print(max_area, min_area)\n```",
  "767": "```python\nn = int(input())\ntimes = [list(map(int, input().split())) for _ in range(n)]\ntimes.sort(key=lambda x: x[0] + x[1] + x[2])\nresult = max(sum(times[i]) + sum(times[j][1:]) for i, j in zip(range(n), range(n-1, -1, -1)))\nprint(result)\n```",
  "768": "```python\ndef solve(N, parents):\n    return N - 1 + sum(parents)\n```",
  "769": "```python\nfrom math import gcd\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(gcd(a, b))\n```",
  "770": "```python\ndef max_valid_subsequence_sum(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, k = map(int, case[0].split())\n        arr = list(map(int, case[1].split()))\n        even = []\n        odd = []\n        for i in range(n):\n            if arr[i] % 2 == 0:\n                even.append(arr[i])\n            else:\n                odd.append(arr[i])\n        even.sort(reverse=True)\n",
  "771": "```python\ndef wrestler_performance(T, N, strengths, challengers):\n    for i in range(T):\n        M, F = map(int, strengths[i].split())\n        total_challengers = N[i]\n        multan_wins = sum(1 for s in challengers[i] if s % M == 0)\n        fultan_wins = sum(1 for s in challengers[i] if s % F == 0)\n        total_wins = multan_w",
  "773": "for _ in range(int(input())):\n    n = int(input())\n    print(*range(2, n+1), 1)",
  "774": "```python\ndef can_frogs_speak(N, K, P, coordinates, pairs):\n    coordinates.sort()\n    for pair in pairs:\n        if abs(coordinates[pair[0]-1] - coordinates[pair[1]-1]) <= K:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n```",
  "776": "for _ in range(int(input())):\n    D = int(input())\n    N = 1\n    while N*(N+1)//2 < D:\n        N += 1\n    rem = N*(N+1)//2 - D\n    ans = [N-rem] * (N-rem) + [N] * (rem)\n    print(N)\n    print(*ans)",
  "777": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    r1, h1, r2, h2 = map(float, input().split())\n    volume1 = (1/3) * math.pi * r1**2 * h1 + (1/2) * math.pi * r1**2\n    volume2 = math.pi * r2**2 * h2\n    print(round(volume1, 6), round(volume2,",
  "778": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(n[::-1])",
  "779": "```python\nimport heapq\n\ndef min_poison_concentration(N, concentrations):\n    heapq.heapify(concentrations)\n    min_concentration = 0\n    while len(concentrations) > 1:\n        a = heapq.heappop(concentrations)\n        b = heapq.heappop(concentrations)\n        new_concentration = (a + b) / 2\n        heapq.heappush(concentrations, new_concentration)\n    return '{",
  "780": "```python\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    if (N % M) % 2 == 0:\n        print(\"EVEN\")\n    else:\n        print(\"ODD\")\n```",
  "782": "```python\ndef prepare_ice_cream(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        flavours = list(map(int, test_cases[i+1].split()))\n        W, Y = map(int, test_cases[i+2].split())\n        flavours.sort()\n        if Y > N or W < Y:\n            results.append(\"Not Possible\")\n        else:\n            total_cost =",
  "783": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, cx, cy, cz, r = map(int, input().split())\n    A = (Qx - Px) - dx * ((Qx - Px) * dx + (Qy - Py) * dy + (Qz - Pz) * dz) / (dx**2",
  "784": "```python\nn, m, p = map(int, input().split())\nmatrix = [[j for j in range(1, m+1)] for i in range(n)]\nfor _ in range(p):\n    i, j = map(int, input().split())\n    matrix[i-1][j-1] += 1\nfor row in matrix:\n    cost = 0\n    prev = row[-1]\n    for elem in reversed(row[:-1]):\n        if elem <=",
  "785": "```python\nfor _ in range(int(input())):\n    A = int(input())\n    D1 = 0\n    while A > 0:\n        D1 += 1\n        A -= 2**(D1-1)\n    D2 = D1 - 1\n    print(D1, D2)\n```",
  "786": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = int('1' + bin(N-1)[2:], 6)\n    print(result)\n```",
  "787": "def max_play_time(T, test_cases):\n    result = []\n    for case in test_cases:\n        soldiers = case.count('1')\n        empty_cells = case.count('0')\n        result.append(soldiers + empty_cells)\n    return result",
  "788": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(int(n[0]) + int(n[-1]))",
  "789": "```python\nT = 1\ntestcases = [(2, 2)]\n```",
  "790": "```python\nn, m, c = map(int, input().split())\ngravel = [c] * n\nfor _ in range(m):\n    op = input().split()\n    if op[0] == 'S':\n        u, v, k = map(int, op[1:])\n        for i in range(u-1, v):\n            gravel[i] += k\n    else:\n        p = int(op[1]) - 1\n        print(gravel[p",
  "791": "```python\ndef min_moves_to_equal_array(T, test_cases):\n    results = []\n    for i in range(T):\n        N, D = map(int, test_cases[i][0].split())\n        A = list(map(int, test_cases[i][1].split()))\n        total_sum = sum(A)\n        if total_sum % N != 0:\n            results.append(-1)\n        else:\n            target = total_sum // N\n            moves = 0\n            for j in",
  "792": "```python\nT = int(input())\nfor _ in range(T):\n    N, S = input().split()\n    result = pow(26, int(N), 10**9 + 7) - 1\n    print(result)\n```",
  "793": "```python\nn, R = map(int, input().split())\nhomes = list(map(int, input().split()))\nhomes.sort()\nmax_x = max(homes[0] - R, R - homes[-1])\nfor i in range(1, n):\n    max_x = max(max_x, homes[i] - homes[i-1])\nprint(max_x)\n```",
  "794": "```python\n# Not applicable\n```",
  "795": "```python\ndef assign_bowlers(T, cases):\n    results = []\n    for case in cases:\n        N, K, L = map(int, case.split())\n        if K * L < N or (K == 1 and N > 1):\n            results.append(\"-1\")\n        else:\n            bowlers = [str(i % K + 1) for i in range(N)]\n            results.append(\" \".join(bowlers))\n    return results\n```",
  "796": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = [1] * n\n    for i in range(1, n):\n        if arr[i] * arr[i-1] < 0:\n            result[i] = result[i-1] + 1\n    print(*result)",
  "797": "```python\ndef duration_of_competition(S, E, L, R):\n    days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    start = days.index(S)\n    end = days.index(E)\n    duration = end - start + 1 if end >= start else end - start + 8\n    if duration < L or duration > R:\n        return \"impossible\"\n    elif",
  "799": "n = int(input())\ncount = 0\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    if a + b + c >= 2:\n        count += 1\nprint(count)",
  "800": "n = int(input())\narr = list(map(int, input().split()))\nprint(max(arr), min(arr))",
  "805": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    max_profit = 0\n    for _ in range(N):\n        S, P, V = map(int, input().split())\n        profit = (P // (S + 1)) * V\n        max_profit = max(max_profit, profit)\n    print(max_profit)\n```",
  "807": "```python\nfrom bisect import bisect_right\n\ndef max_element_in_subarray(arr, p):\n    subarrays = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarrays.append(sorted(arr[i:j], reverse=True))\n    subarrays.sort(key=lambda x: [-x[i] if i < len(x) else float('-inf') for i in range(len(arr))])\n    return subarrays[p-1][0",
  "808": "```python\nfrom math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n * (n - 1) * (n - 2))\n    else:\n        print(lcm(lcm(n, n - 1), n - 2))\n```",
  "809": "```python\ndef find_largest_triplet(N, sticks):\n    sticks.sort(reverse=True)\n    for i in range(N-2):\n        if sticks[i] < sticks[i+1] + sticks[i+2]:\n            return \"YES\", f\"{sticks[i]} {sticks[i+1]} {sticks[i+2]}\"\n    return \"NO\", \"\"\n```",
  "810": "```python\nfrom bisect import bisect_right\n\ndef find_nearest_peak(arr, x):\n    idx = bisect_right(arr, x)\n    if idx < len(arr):\n        return arr[idx]\n    else:\n        return -1\n\ndef update_mountain(arr, idx, val):\n    arr[idx] = val\n    return arr\n\nT = 1\ntest_cases = [\n    (10, 5, [1, 3, 5, 4, ",
  "811": "```python\ndef max_score(N, k, sequence):\n    forward_sum = sum(sequence[k:])\n    backward_sum = sum(sequence[:k-1])\n    return max(forward_sum, backward_sum)\n```",
  "812": "```python\ndef min_grass_units(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        D = test_cases[i][1]\n        total_grass_units = 0\n        distance = 0\n        for d in D:\n            if d < 0:\n                total_grass_units += abs(distance) * abs(d)\n            distance += 1\n        results.append(str(total_grass_units))\n    return",
  "813": "```python\ndef find_smallest_integer(N, K, A):\n    A.sort()\n    if K % 2 == 0:\n        return A[N // 2 - 1]\n    else:\n        return A[N // 2]\n```",
  "814": "def who_wins(T, cases):\n    result = []\n    for i in range(0, len(cases), 2):\n        N = cases[i]\n        cells = cases[i+1]\n        if N % 2 == 0:\n            result.append(\"No\")\n        else:\n            result.append(\"Yes\")\n    return result",
  "815": "from collections import deque\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_adjacent_tiles(board, x, y):\n    adjacent_tiles = []\n    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0",
  "816": "```python\nM = int(input())\nbooks = list(map(int, input().split()))\nN = int(input())\nregister = [int(input()) for _ in range(N)]\nborrowed_books = [str(books.pop(pos-1)) for pos in register]\nprint('\\n'.join(borrowed_books))\n```",
  "817": "```python\nfrom functools import reduce\nfrom operator import xor\n\ndef min_cost_to_gift_date(arr):\n    return reduce(xor, arr)\n```",
  "818": "```python\ndef bitwise_and_parity(T, test_cases):\n    results = []\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        Q = test_cases[_][2]\n        for i in range(Q):\n            L, R = test_cases[_][3+i]\n            bitwise_and = A[L-1]\n            for j in range(L, R):\n                bitwise_and &= A[j]\n            if bitwise_and %",
  "819": "```python\ndef is_task_possible(x, y):\n    if (x + y) % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nT = 2\ntestcases = [(1, 2), (2, 3)]\nfor i in range(T):\n    is_task_possible(testcases[i][0], testcases[i][1])\n```",
  "821": "```python\ndef solve(n, intervals):\n    result = ''\n    for i in range(n):\n        result += '1' if intervals[i][0] % 2 == 0 else '0'\n    return result\n```",
  "822": "```python\ndef count_clones(people):\n    result = []\n    for person in set(people):\n        count = people.count(person)\n        if count > 1:\n            result.append(count)\n    return result\n```",
  "823": "```python\ndef subset_sum_zero(T, test_cases):\n    results = []\n    for case in test_cases:\n        a, b, c, d = map(int, case.split())\n        if a + b == 0 or a + c == 0 or a + d == 0 or b + c == 0 or b + d == 0 or c + d == 0 or a + b + c == 0 or a + b + d == 0 or",
  "825": "def smallest_possible_M(T, N):\n    result = []\n    for n in N:\n        result.append(n + 1)\n    return result",
  "827": "```python\ndef count_subsequences(T, cases):\n    results = []\n    for case in cases:\n        N, K, S = case\n        count = 0\n        for i in range(N):\n            if S[i] == 'a':\n                count += S[i+1:].count('b')\n        results.append(count * K)\n    return results\n```",
  "828": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    payments = list(map(int, input().split()))\n    total_due = 0\n    late_fee = 0\n    for i in range(n):\n        if payments[i] == 0:\n            total_due += 1000\n            late_fee += 100\n            total_due += late_fee\n    print(total_due)",
  "829": "```python\ndef total_advertising_revenue(N, strengths):\n    strengths.sort()\n    total_revenue = 0\n    for i in range(N):\n        total_revenue += (N - i - 1) * strengths[i]\n        total_revenue -= i * strengths[i]\n    return total_revenue\n\nN = 4\nstrengths = [3, 10, 3, 5]\nprint(total_advertising_revenue(N, strengths))\n```",
  "830": "def convert_strings(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        A = test_cases[i][1]\n        B = test_cases[i][2]\n        operations = []\n        for j in range(N):\n            if A[j] > B[j]:\n                results.append('-1')\n                break\n            elif A[j] < B[j]:\n                k = j\n                while k < N and A[k] == A",
  "831": "```python\ndef max_segment_score(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N, P = map(int, test_cases[i].split())\n        sequence = list(map(int, test_cases[i+1].split()))\n        max_score = 0\n        max_count = 0\n        current_score = 0\n        score_count = {}\n        for num in sequence:\n            current_score = (current_score +",
  "832": "```python\nfrom itertools import combinations\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_sum = float('inf')\n    count = 0\n    for subseq in combinations(A, K):\n        if sum(subseq) < min_sum:\n            min_sum = sum(subseq)\n            count = 1\n        elif sum(subseq) == min_sum:\n",
  "833": "```python\nn, m = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nt = int(input())\nfor _ in range(t):\n    px, py, qx, qy = map(int, input().split())\n    total_stars = sum(sum(matrix[i][py-1:qy]) for i in range(px-1, qx))\n    print(total_stars)\n```",
  "835": "def is_magical_path_possible(N, M):\n    if N * M % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
  "836": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    max_val = 0\n    max_index = 0\n    for i in range(n):\n        val = l[i] * r[i]\n        if val > max_val:\n            max_val = val\n            max_index = i\n        elif val == max_val and r[i] >",
  "837": "for _ in range(int(input())):\n    n = int(input())\n    print((n//10)*(n//10+1)//2*10)",
  "838": "def min_velocity(T, segments):\n    result = []\n    for s in segments:\n        min_velocity = s[0]\n        for i in range(1, len(s)):\n            min_velocity = min(min_velocity, s[i])\n            if min_velocity < i + 1:\n                min_velocity = i + 1\n        result.append(str(min_velocity))\n    return result",
  "839": "```python\ndef can_eat_chocolates(k, n, a):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k, a[i] - 1, -1):\n            dp[j] |= dp[j - a[i]]\n    return dp[k]\n```",
  "840": "for _ in range(int(input())):\n    K = int(input())\n    print('*' * (K**2))",
  "841": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    N_str = str(N)\n    Y_N = int(N_str + N_str[1:] + N_str[0])\n    print(Y_N % (10**9 + 7))\n```",
  "842": "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    for i in range(1, k+1):\n        if i == 1 or i == k:\n            print(i, \" \"*(k-2), i, sep=\"\")\n        else:\n            print(i, \" \"*(i-2), i, sep=\"\")",
  "843": "```python\ndef max_sum_picked_elements(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        sequences = [list(map(int, x.split())) for x in case[1:]]\n        max_sum = sequences[0][0]\n        current_max = sequences[0][0]\n        for i in range(1, N):\n            found = False\n            for j in range(N):\n                if sequences[i][j",
  "844": "def count_open_tweets(N, K, clicks):\n    open_tweets = [0] * N\n    open_count = 0\n    result = []\n    for click in clicks:\n        if click == 'CLOSEALL':\n            open_tweets = [0] * N\n            open_count = 0\n        else:\n            action, tweet_num = click.split()\n            tweet_num = int(tweet_num) - 1\n            if open_tweets[tweet_num] == 1:\n                open",
  "845": "```python\ndef max_squares(N, biscuits):\n    result = []\n    for biscuit in biscuits:\n        c, d = map(int, biscuit.split())\n        result.append((c * d) // (max(c, d) ** 2))\n    return result\n```",
  "846": "k, a, b = map(int, input().split())\nprint(max(k+1, (k-a+1)//(a-b)*(a+b) + (k-a+1)%(a-b)))",
  "848": "```python\nT = 1\nN = 7\nratings = [10, 40, 30, 30, 20, 0, 0]\ncumulative_ratings = []\nfor i in range(N):\n  cumulative_ratings.append(ratings[i] + ratings[(i+1)%N] + ratings[(i+2)%N])\nmax_rating = max(cumulative_ratings)\nprint(max_rating)\n```",
  "849": "```python\nfrom math import gcd\ndef largestSubarrayWithMaxGCD(arr, n):\n    ans = 0\n    for i in range(n):\n        cur = arr[i]\n        for j in range(i, n):\n            cur = gcd(cur, arr[j])\n            if cur == 1:\n                break\n            ans = max(ans, j - i + 1)\n    return ans\nn = 4\narr = [2, 4, 8,",
  "851": "```python\ndef expected_compressed_length(N, K):\n    if N == 1:\n        return 2.0\n    else:\n        return 2.0 + (N-1)\n```",
  "852": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = '0'\n    for i in range(K):\n        pattern += '1' if pattern[-1] == '0' else '0'\n    print(pattern)\n```",
  "853": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    drivers = []\n    for _ in range(N):\n        name = input()\n        time = int(input())\n        drivers.append((name, time))\n    drivers.sort(key=lambda x: x[1])\n    for driver in drivers:\n        print(driver[0])\n```",
  "854": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    if len(sequence) == len(set(sequence)):\n        print(\"prekrasnyy\")\n    else:\n        print(\"ne krasivo\")",
  "855": "def reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result",
  "856": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    words = defaultdict(list)\n    for _ in range(N):\n        word, spam = input().split()\n        words[word].append(int(spam))\n    max_count = 0\n    for word in words:\n        max_count += min(words[word].count(0), words[word].count(1))\n    print(max_count)",
  "857": "```python\ndef max_points(T, data):\n    results = []\n    for i in range(T):\n        N = int(data[i*3])\n        dom_crew = list(map(int, data[i*3+1].split()))\n        rival_crew = list(map(int, data[i*3+2].split()))\n        dom_crew.sort()\n        rival_crew.sort()\n        points = 0\n        for j in range(N):\n            if dom_crew[j] > rival",
  "858": "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(2**(k.bit_length()-1))",
  "859": "def kth_highest_bt_number(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K = map(int, case.split())\n        if K > N:\n            results.append(\"-1\")\n        else:\n            results.append(str(K-1))\n    return results",
  "860": "```python\ndef min_eating_speed(T, cases):\n    res = []\n    for case in cases:\n        N, H = case[0], case[1]\n        bananas = case[2]\n        low, high = 1, max(bananas)\n        while low < high:\n            mid = (low + high) // 2\n            hours = sum((b + mid - 1) // mid for b in bananas)\n            if hours > H:\n                low",
  "861": "def count_fibonacci_numbers_in_range(a, b):\n    fib = [1, 2]\n    while fib[-1] <= b:\n        fib.append(fib[-1] + fib[-2])\n    count = sum(1 for x in fib if a <= x <= b)\n    return str(count)\n\ninputs = ['10 100', '1234567890 9876543210', '0 0']\noutputs = [count_fibonacci_numbers_in_range(int(x",
  "862": "```python\ndef sir_jadeja_milk(t, test_cases):\n    result = []\n    for case in test_cases:\n        n, m, k = map(int, case[0].split())\n        jars = list(map(int, case[1].split()))\n        jars.sort(reverse=True)\n        total_milk = 0\n        for i in range(n):\n            if jars[i] < k or m == 0:\n                total_milk += jars[i]\n            else:\n",
  "863": "```python\nfrom collections import defaultdict\n\ndef max_traffic_bid(N, traffic, connections):\n    graph = defaultdict(list)\n    for connection in connections:\n        u, v = map(int, connection.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (N + 1)\n    max_traffic = [0]\n\n    def dfs(node, prev):\n        visited[node] = True\n        traffic_sum = traffic[node - 1]\n       ",
  "864": "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = n * (n + 1) // 2\n    p = k\n    while p <= n:\n        s -= p * (n // p) * ((n // p) + 1) // 2\n        p *= k\n    print(\"Case #{}: {}\".format(i+1, s))",
  "865": "```python\ndef count_permutations(T, N_list):\n    result = []\n    for N in N_list:\n        if N == 1 or N == 2:\n            result.append('0')\n        else:\n            result.append(str((N-1)*(pow(2, N-2, 10**9+7)) % (10**9+7)))\n    return result\n```",
  "866": "```python\ndef possible_voting(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        c = test_cases[i][1]\n        total_votes = sum(c)\n        if total_votes != n:\n            results.append(\"-1\")\n        else:\n            votes = [0] * n\n            for j in range(n):\n                if c[j] >= n:\n                    results.append(\"-1\")\n                    break\n                votes[(",
  "867": "```python\ndef min_hits(T, cases):\n    result = []\n    for case in cases:\n        S, W1, W2, W3 = map(int, case.split())\n        widths = [W1, W2, W3]\n        widths.sort()\n        if S >= sum(widths):\n            result.append(1)\n        elif S >= widths[0] + widths[1]:\n            result.append(2)\n        else:\n            result.append(3)\n    return result",
  "868": "```python\ndef count_beautiful_subarrays(N, K, A):\n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            subarray = A[l:r+1]\n            m = (K + r - l) // (r - l + 1)\n            B = subarray * m\n            B.sort()\n            X = B[K-1]\n            F = subarray.count(X)\n            if F > 0",
  "869": "def is_substring(M, S):\n    return 'Y' if S in M else 'N'",
  "872": "```python\nfor _ in range(int(input())):\n    N, A, B, K = map(int, input().split())\n    solved_by_appy = N//A - N//(A*B)\n    solved_by_chef = N//B - N//(A*B)\n    total_solved = solved_by_appy + solved_by_chef\n    print(\"Win\" if total_solved >= K else \"Lose\")\n```",
  "874": "def max_topics(T, topics):\n    result = []\n    for i in range(0, len(topics), 2):\n        N, M, S = map(int, topics[i].split())\n        hours = list(map(int, topics[i+1].split()))\n        count = 0\n        for h in hours:\n            if h <= S:\n                count += 1\n            elif h <= 2*S and M > 0:\n                count += 1\n                M",
  "876": "```python\ndef happy_kids(T, cases):\n    result = []\n    for case in cases:\n        N, X = case[0]\n        candies = case[1]\n        if max(candies) - min(candies) < X:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return result\n```",
  "877": "```python\ndef can_catch_thief(x, y, k, n):\n    if (x - y) % k == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nT = 5\ntest_cases = [(0, 1, 1, 1), (1, 4, 1, 5), (4, 2, 1, 7), (3, 7, 2, 10), (",
  "878": "```python\ndef min_steps_to_reach_top(T, cases):\n    res = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        heights = list(map(int, case[1].split()))\n        steps = 0\n        for i in range(N-1):\n            diff = heights[i+1] - heights[i]\n            steps += (diff-1)//K\n        res.append(steps)\n    return res\n```",
  "879": "```python\ndef team_strength(X, Y):\n    return sum(int(str(i)[-1]) for i in range(Y, X+1, Y))\n```",
  "880": "```python\nimport math\nfor _ in range(int(input())):\n    r = int(input())\n    print(round(math.pi * (r**2), 2))\n```",
  "881": "```python\ndef count_non_decreasing_subarrays(arr):\n    result = []\n    for i in range(1, len(arr)):\n        count = 1\n        while i < len(arr) and arr[i] >= arr[i-1]:\n            count += 1\n            i += 1\n        result.append(count*(count+1)//2)\n    return result\n```",
  "882": "```python\ndef longest_common_pattern_length(A, B):\n    return len(set(A) & set(B))\n```",
  "883": "```python\ndef predict_failed_students(T, testcases):\n    results = []\n    for i in range(T):\n        N = testcases[i][0]\n        counts = testcases[i][1]\n        max_count = max(counts)\n        num_max_count = counts.count(max_count)\n        if max_count > N - 1 or (max_count == N - 1 and num_max_count == 1):\n            results.append(-1)\n        else:\n            results.append(N - num",
  "884": "```python\nfrom math import pow\n\nT = int(input())\nfor _ in range(T):\n    X, K = map(int, input().split())\n    factors_X = [i for i in range(1, X+1) if X % i == 0]\n    factors_K = [i for i in range(1, K+1) if K % i == 0]\n    sum_X = sum(pow(factor, K) for factor in factors_X)\n    sum_K",
  "885": "```python\ndef count_zeros_in_binary_representation(T, numbers):\n    result = []\n    for n in numbers:\n        result.append(bin(n).count('0') - 1)\n    return result\n```",
  "886": "```python\nfrom bisect import bisect_left\n\ndef find_nearest_numbers(arr, x):\n    arr.sort()\n    idx = bisect_left(arr, x)\n    if idx == 0:\n        return -1, arr[idx]\n    if idx == len(arr):\n        return arr[idx-1], -1\n    if arr[idx] == x:\n        return arr[idx-1], arr[idx+1]\n    return arr[idx-1], arr[idx]\n    \nT = ",
  "887": "```python\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\n\ndef dijkstra(adj_list, start):\n    dist = {node: float('inf') for node in adj_list}\n    dist[start] = 0\n    heap = [(0, start)]\n    while heap:\n        cur_dist, cur_node = heappop(heap)\n        if cur_dist > dist[cur_node]:\n            continue\n        for neighbor, weight in adj_list[cur_node]:\n           ",
  "889": "```python\ndef min_proxy_attendance(T, test_cases):\n    results = []\n    for case in test_cases:\n        D = int(case[0])\n        S = case[1]\n        count = 0\n        for i in range(D):\n            if S[i] == 'A':\n                if i >= 2 and i <= D-3:\n                    if (S[i-1] == 'P' or S[i-2] == 'P') and (S[i",
  "890": "```python\ndef min_fences(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        s1 = test_cases[i][1]\n        s2 = test_cases[i][2]\n        count = 0\n        for j in range(n):\n            if s1[j] == '*' and s2[j] == '*':\n                count += 1\n        results.append(count)\n    return results\n```",
  "891": "n, m = map(int, input().split())\nA = list(range(1, n+1))\nB = list(range(n+1, 2*n+1))\nC = [a + b for a in A for b in B]\nqueries = [int(input()) for _ in range(m)]\nfor q in queries:\n    print(C.count(q))",
  "893": "```python\ndef max_special_sum(N, K, S, arr):\n    def prime_factors(n):\n        factors = set()\n        while n % 2 == 0:\n            factors.add(2)\n            n = n // 2\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                factors.add(i)\n                n = n // i\n        if n > 2:\n            factors",
  "894": "```python\nfrom itertools import permutations\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    graph1 = [list(map(int, input().split())) for _ in range(N)]\n    graph2 = [list(map(int, input().split())) for _ in range(N)]\n    edges1 = [(i, j) for i in range(N) for j in range(N) if graph1[i][j] == 1]\n    edges2 = [(",
  "895": "n = int(input())\ncosts = list(map(int, input().split()))\ntotal_cost = min(sum(costs[::2]), sum(costs[1::2]))\nprint(total_cost)",
  "896": "def minimal_operations(T, cases):\n    results = []\n    for case in cases:\n        N = case[0]\n        segments = case[1:]\n        operations = ''\n        total_operations = 0\n        for i in range(N-1):\n            diff_L = segments[i+1][0] - segments[i][0]\n            diff_R = segments[i+1][1] - segments[i][1]\n            if diff_L > 0:\n                operations += 'L+' *",
  "898": "```python\ndef count_pairs_and_distinct_x(M, N):\n    pairs = 0\n    distinct_x = 0\n    for x in range(1, M+1):\n        for y in range(1, N+1):\n            if x*y + x + y == int(str(x) + str(y)):\n                pairs += 1\n                if x not in range(1, x):\n                    distinct_x += 1\n    return pairs, distinct_x\n```",
  "899": "```python\ndef minimize_max_candies(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        candies = case[1]\n        max_candies = max(candies)\n        results.append(str(max_candies))\n    return results\n```",
  "900": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    print((20 * pow(10, K-1, 10**9+7)) % (10**9+7))\n```",
  "901": "```python\nfrom heapq import *\nT=int(input())\nfor _ in range(T):\n    N,k,S=map(int,input().split())\n    A=list(map(int,input().split()))\n    h=[]\n    for i in range(N):\n        j=i\n        s=0\n        while j<N and s+A[j]<=S:\n            s+=A[j]\n            j+=1\n        if j<N and A[j]>S:\n            heappush(h,(-A[j],i))\n",
  "902": "```python\ndef find_winner(N, S, stacks):\n    xor = 0\n    for stack in stacks:\n        xor ^= len(stack) % 2\n    if (S == \"Dee\" and xor) or (S == \"Dum\" and not xor):\n        return \"Dee\"\n    else:\n        return \"Dum\"\n\nT = 2\ntest_cases = [(\"2\", \"Dee\", [\"101\", \"010\"]), (\"2\", \"Dum",
  "903": "def mirror_position(x1, y1, x2, y2):\n    mirror_x = (x1 + x2 + (y2 - y1)) / 2\n    return \"{:.2f}\".format(mirror_x)",
  "904": "```python\ndef can_escape(T, cases):\n    results = []\n    for case in cases:\n        N, X = case[0], case[1]\n        a = case[2:]\n        energy = 0\n        for t in range(1, (N+1)//2 + 1):\n            energy += max(a[t-1], a[N-t])\n            if energy >= X:\n                results.append('YES')\n                break\n        else:\n            results.append('NO",
  "905": "def find_safest_position(n):\n    return int(pow(2, n.bit_length() - 1))",
  "907": "```python\ndef is_valid_report(report):\n    head_count = 0\n    tail_count = 0\n    for char in report:\n        if char == 'H':\n            head_count += 1\n        elif char == 'T':\n            tail_count += 1\n        if tail_count > head_count or head_count - tail_count > 1:\n            return \"Invalid\"\n    if head_count == tail_count:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n",
  "908": "```python\ndef max_triangle_height(coins):\n    height = int((2 * coins) ** 0.5)\n    if (height * (height + 1)) // 2 <= coins:\n        return height\n    return height - 1\n```",
  "909": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    b.sort()\n    g.sort()\n    if all(abs(b[i]-g[i]) > 1 for i in range(n)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "910": "```python\ndef count_different_scales(pattern, n):\n    t_count = pattern.count('T')\n    s_count = pattern.count('S')\n    return (t_count + 1) ** n * (s_count + 1) ** n\n```",
  "912": "def largest_min_distance(T, testcases):\n    result = []\n    for testcase in testcases:\n        n, k = map(int, testcase[0].split())\n        positions = list(map(int, testcase[1].split()))\n        positions.sort()\n        low, high = 1, positions[-1] - positions[0]\n        while low < high:\n            mid = (low + high + 1) // 2\n            count = 1\n            left = positions[",
  "913": "```python\ndef min_sum_of_durations(N, M, K, deliveries):\n    vertical_times = [0] * (N + 1)\n    horizontal_times = [0] * (M + 1)\n    for x, y, x_prime, y_prime in deliveries:\n        vertical_times[min(x, x_prime)] += 1\n        vertical_times[max(x, x_prime)] -= 1\n        horizontal_times[min(y, y_prime)] += 1\n        horizontal",
  "914": "```python\ndef clean_windows(T, test_cases):\n    for case in test_cases:\n        N, M = case[0]\n        A = case[1:]\n        result = []\n        for i in range(N):\n            row = ''\n            for j in range(M):\n                window = (N-i, j+1)\n                clean = A[N-i-1][j]\n                if clean <= (i*M + j + 1):\n                    row += '1'\n                else:\n",
  "915": "```python\ndef max_friendships_saved(T, cases):\n    results = []\n    for case in cases:\n        n = case[0]\n        days = case[1:]\n        max_day = max(days)\n        count = days.count(max_day)\n        results.append(str(count))\n    return results\n```",
  "916": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(n * m)",
  "917": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    count = Counter()\n    min_diff = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(arr[i] + arr[j] - K)\n            if diff < min_diff:\n                min",
  "918": "```python\ndef min_switch_toggle(n):\n    return (2**n + 1) % 8589934592\n\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    result = min_switch_toggle(n)\n    print(f\"Case {i+1}: {result}\")\n```",
  "919": "```python\ndef min_operations(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        sequence = case[1]\n        even_count = 0\n        odd_count = 0\n        for num in sequence:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        if even_count == 0 or odd_count == 0:\n            results.append",
  "920": "```python\ndef min_awkwardness(s):\n    boys = s.count('b')\n    girls = s.count('g')\n    return boys * girls\n```",
  "921": "```python\nfrom bisect import bisect_left\n\ndef preprocess(arr):\n    n = len(arr)\n    log = [0] * (n + 1)\n    for i in range(2, n + 1):\n        log[i] = log[i // 2] + 1\n    sparse = [[0] * (n - i + 1) for i in range(log[n] + 1)]\n    sparse[0] = arr\n    for i in",
  "922": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(set(a) ^ set(b))\n    c.sort()\n    print(*c)",
  "923": "for _ in range(int(input())):\n    n = int(input())\n    print(int(2 * n ** 0.5))",
  "925": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    choices = list(map(int, input().split()))\n    teams = 0\n    for i in range(1, N):\n        if choices[i] == -1:\n            teams += 0.5\n        else:\n            j = i\n            while j != -1:\n                j = choices[j]\n                teams += 1\n                j =",
  "926": "```python\ndef max_jars(T, cases):\n    results = []\n    for case in cases:\n        N, k = case[0], case[1]\n        chocolates = case[2:]\n        max_jars = 0\n        for i in range(N-1):\n            if chocolates[i] + chocolates[i+1] <= k:\n                count = 2\n                j = i + 2\n                while j < N and chocolates[j] + max(chocolates",
  "927": "```python\ndef sum_of_integers(N, M, questions):\n    total_sum = sum(range(1, N+1))\n    result = []\n    for k in questions:\n        if k in range(1, N+1):\n            result.append(str(total_sum - 1))\n        else:\n            result.append(str(total_sum - N + int(k)))\n    return result\n```",
  "928": "```python\ndef bulbs_remaining_on(n):\n    return int(n**0.5)\n```",
  "930": "for _ in range(int(input())):\n    n = int(input())\n    num = 1\n    arr = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            arr[j][i-j] = num\n            num += 1\n    for i in range(1, n):\n        for j in range(n-i):\n            arr[i+j][n-1-j] = num\n            num += ",
  "931": "```python\ndef total_damage(N, items):\n    return sum(item for item in items if item % 2 == 0)\n```",
  "932": "```python\nfrom sys import stdin, stdout\n\ndef solve(n, a):\n    ans = sum(a) / 2\n    stdout.write(f\"{ans:.15f}\\n\")\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    solve(n, a)\n```",
  "933": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    if len(s) != 5 or s[2] != '-':\n        print('Error')\n    else:\n        x1, y1, x2, y2 = ord(s[0]) - ord('a'), int(s[1]) - 1, ord(s[3]) - ord('a'), int(s[4]) - 1\n        dx, dy = abs",
  "934": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    p, q, r = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    result = 0\n    for y in B:\n        x_count = len([x for x in",
  "935": "for _ in range(int(input())):\n    x = int(input())\n    if x % 10 == 0:\n        print(0)\n    elif x % 5 == 0:\n        print(1)\n    else:\n        print(-1)",
  "936": "```python\ndef smallest_number_of_operations(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        matrix = [list(map(int, row.split())) for row in case[1:]]\n        operations = 0\n        for i in range(N-1, 0, -1):\n            if matrix[i][i] != i*N:\n                operations += 1\n                for j in range(i):\n                    matrix[i][",
  "937": "def chef_activities(t, logs):\n    result = []\n    for log in logs:\n        if 'C' in log and 'E' in log and 'S' in log:\n            if log.index('C') < log.index('E') < log.index('S'):\n                result.append('yes')\n            else:\n                result.append('no')\n        else:\n            result.append('no')\n    return result",
  "938": "```python\ndef count_non_intersecting_segments(T, test_cases):\n    results = []\n    for i in range(T):\n        N = int(test_cases[i][0])\n        A = list(map(int, test_cases[i][1].split()))\n        count = 0\n        for a in range(N):\n            for b in range(a, N):\n                for c in range(b+1, N):\n                    for d in range(c, N):\n                        if len(set(A[a:b+",
  "940": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    R = int(input())\n    print(R*R)\n```",
  "941": "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    print((a//2 + a%2) * (b//2 + b%2) + (a//2) * (b//2))",
  "943": "```python\ndef serving_ways(V, W):\n    return V + W - 1\n```",
  "945": "for _ in range(int(input())):\n    n = int(input())\n    print((n // 2) + 1)",
  "946": "```python\nimport sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nbuckets = [list(map(int, input().split())) for _ in range(N)]\n\nprobabilities = [sum(buckets[i-1][j] for i in range(1, N+1)) / (N * sum(buckets[-1])) for j in range(K)]\nprint(*probabilities)\n```",
  "948": "```python\nA, B = map(int, input().split())\ncount = 0\nfor x in range(1, A+1):\n    for y in range(1, B+1):\n        if (x**2 + y)**0.5 == int((x**2 + y)**0.5):\n            count += 1\nprint(count)\n```",
  "949": "```python\ndef max_moves(N, arr):\n    max_moves = 0\n    for i in range(N):\n        count = 0\n        j = i\n        while j < N and arr[j] == arr[i]:\n            count += 1\n            j += 2\n        max_moves = max(max_moves, count)\n    return max_moves\n```",
  "950": "from itertools import permutations\nN = input()\nfor i in range(int(N)+1, 10**9):\n    if len(set(str(i))) == len(str(i)):\n        print(i)\n        break\nelse:\n    print(0)",
  "952": "```python\ndef min_cost_to_change_consonants(T, strings):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for s in strings:\n        cost = sum(abs(ord(c) - ord('a') - 1) for c in s if c not in vowels)\n        result.append(str(cost))\n    return result\n```",
  "953": "```python\nT = 1\nN = 4\nprint((N + 1) // 2)\n```",
  "954": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    series = list(range(1, N+1)) + list(range(N-1, 0, -1))\n    result = sum(x**3 for x in series)\n    print(result)\n```",
  "955": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_ordered_pairs(N):\n    count = 0\n    for p in range(2, N):\n        if is_prime(p):\n            q = (N - p) / 2\n            if q.is_integer",
  "956": "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom decimal import Decimal\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\ns = 0\nfor i in range(n):\n    s += a[i][0]*a[(i+1)%n][1]-a[i][1]*a[(i+1)%n][0]\ns = abs(s)\ng = gcd(s, 2)\nprint(",
  "957": "```python\ndef max_distance_of_peace(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        houses = case[1:]\n        houses.sort()\n        max_distance = max(houses[0], T - houses[-1])\n        for i in range(1, N):\n            max_distance = max(max_distance, (houses[i] - houses[i-1]) // 2)\n        results.append(str(max_distance))\n    return",
  "958": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        print('*' * (2*i-1))\n        for j in range(1, i+1):\n            if j < i:\n                print('*' + ' ' * (2*(i-j-1)-1) + '*')\n            else:\n                print('*' * (2*i-1))\n```",
  "959": "```python\ndef max_sum(N, A):\n    A.sort()\n    result = 0\n    for i in range(0, N, 2):\n        result += abs(A[i] - A[i+1])\n    return result\n```",
  "960": "```python\ndef generate_pattern(num):\n    binary = bin(num)[2:]\n    for i in range(1, len(binary) + 1):\n        print(int('1' + '0' * (i - 1)), end=' ')\n    for i in range(1, len(binary) + 1):\n        print(int('1' + '0' * (i - 1), 2), end=' ')\n    for i in range(2, len(binary)",
  "962": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        for j in range(i, 0, -1):\n            print(j, end='')\n        print('', end=' ')\n    print('')\n```",
  "963": "```python\ndef min_reservoirs(T, test_cases):\n    res = []\n    for case in test_cases:\n        N = int(case[0])\n        heights = list(map(int, case[1].split()))\n        left_max = [0] * N\n        right_max = [0] * N\n        left_max[0] = heights[0]\n        right_max[N-1] = heights[N-1]\n        for i in range(1, N):\n           ",
  "964": "t = int(input())\nfor _ in range(t):\n    h, u, d = map(int, input().split())\n    if h <= u:\n        print(1)\n    elif u > d and h - u > (u - d):\n        print((h - u - 1) // (u - d) + 2)\n    else:\n        print(-1)",
  "965": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    print(N // K, N % K)\n```",
  "966": "```python\ndef rightmost_reachable_hill(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N, U, D = map(int, test_cases[i].split())\n        H = list(map(int, test_cases[i+1].split()))\n        for j in range(1, N):\n            if H[j] > H[j-1]:\n                if H[j] - H[j-1] > U:\n",
  "967": "```python\ndef count_subsets(arr, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] += dp[i - num]\n    return dp[target]\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = int(input())\n    arr = list(map(int, input",
  "968": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p, cost, adj, ans):\n    ans[v] = min(cost[v], ans[p])\n    for u in adj[v]:\n        if u != p:\n            dfs(u, v, cost, adj, ans)\n\nn = int(input())\nadj = [[] for _ in range(n+1)]\nfor i, p in enumerate(map(int, input().split())):\n    adj[p].append",
  "969": "def max_months_to_redeem_laddus(T, activities):\n    result = []\n    for i in range(0, len(activities), 2):\n        origin = activities[i].split()[1]\n        laddus = 0\n        for j in range(int(activities[i+1])):\n            activity = activities[i+2+j].split()\n            if activity[0] == 'CONTEST_WON':\n                rank = int(activity[1])\n                if rank <= ",
  "970": "```python\nfrom bisect import bisect_right\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    walls = list(map(int, input().split()))\n    Q = int(input())\n    for _ in range(Q):\n        x, y = map(int, input().split())\n        idx = bisect_right(walls, max(x, y))\n        if idx == 0 or walls[idx-1] == max(x, y):\n            print(-1",
  "971": "```python\ndef min_moves_to_equal_elements(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        moves = 0\n        for j in range(1, N):\n            moves += abs(A[j] - A[j-1])\n        result.append(str(moves))\n    return result\n```",
  "972": "```python\ndef min_height_difference(N, K, heights):\n    heights.sort()\n    min_diff = float('inf')\n    for i in range(N - K + 1):\n        diff = heights[i + K - 1] - heights[i]\n        min_diff = min(min_diff, diff)\n    return min_diff\n```",
  "973": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr[0] += K\n    arr[-1] -= K\n    print(max(arr) - min(arr))\n```",
  "974": "```python\ndef can_meet(a, b, c, d):\n    if (b - a) % (c + d) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nT = 2\ntestcases = [(3, 4, 1, 2), (10, 20, 3, 7)]\nfor testcase in testcases:\n    print(can_meet(*testcase))\n```",
  "975": "def get_scholarship_count(N, R, X, Y):\n    return max(0, min(N - len(X) - len(Y), R))",
  "977": "```python\ndef encode_message(N, S):\n    encoded = ''\n    for i in range(0, N, 2):\n        encoded += S[i+1] + S[i]\n    encoded = encoded[:N] if N % 2 == 0 else encoded[:N-1] + S[N-1]\n    encoded = encoded.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba'))\n    return encoded\n```",
  "978": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = pow(2, N, 1000000007) - 1\n    print(result)\n```",
  "979": "```python\ndef expected_good_rectangles(M, N, K):\n    return int((M * (M + 1) * N * (N + 1) * K) / 4)\n```",
  "980": "```python\ndef time_to_finish_problem(N, B, M):\n    time = 0\n    while N > 0:\n        problems_to_solve = (N + 1) // 2 if N % 2 != 0 else N // 2\n        time += problems_to_solve * M + B\n        M *= 2\n        N -= problems_to_solve\n    return time - B\n\nT = int(input())\nfor _ in range(T):\n    N, B",
  "981": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, skills[i] - skills[i-1])\n    print(min_diff)",
  "982": "def count_special_numbers(N):\n    return (N//10)*9 + min(N%10, 9) if N > 10 else N",
  "984": "```python\ndef count_pairs(arr):\n    even_count = 0\n    odd_count = 0\n    result = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n            result += odd_count\n        else:\n            odd_count += 1\n    return result\n```",
  "985": "```python\ndef longest_fully_dividing_subsequence(N, sequence):\n    dp = [1] * N\n    for i in range(N):\n        for j in range(i):\n            if sequence[i] % sequence[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```",
  "987": "```python\nT = int(input())\nfor _ in range(T):\n    finish, distancetoBolt, tigerAccelaration, boltSpeed = map(int, input().split())\n    time_taken_by_tiger = (distancetoBolt / boltSpeed) ** 0.5\n    time_taken_by_bolt = (finish / boltSpeed)\n    if time_taken_by_tiger < time_taken_by_bolt:\n        print(\"Tiger\")\n    else:\n        print",
  "988": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_val = min(a)\n    xor_sum = 0\n    for i in range(n):\n        xor_sum |= a[i] ^ min_val\n    print(xor_sum)\n```",
  "989": "for _ in range(int(input())):\n    X, Y, K = map(int, input().split())\n    if (X + Y) // K % 2 == 0:\n        print(\"Chef\")\n    else:\n        print(\"Paja\")",
  "990": "import math\nn, m, a = map(int, input().split())\nprint(math.ceil(n/a) * math.ceil(m/a))",
  "992": "def min_cost_sealing_window(T, windows):\n    results = []\n    for window in windows:\n        N = int(window[0])\n        M = int(window[N + 1])\n        stripes = [list(map(int, x.split())) for x in window[N + 2:]]\n        min_cost = float('inf')\n        for stripe in stripes:\n            cost = 0\n            for i in range(N):\n                x1, y1 = map(int, window[i + ",
  "993": "def can_park_supermarket(N, slots):\n    result = []\n    for n in slots:\n        if (n-2) % 2 == 0:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result",
  "994": "```python\ndef count_square_submatrices(T, test_cases):\n    results = []\n    for i in range(T):\n        N, X = map(int, test_cases[i][0].split())\n        A = list(map(int, test_cases[i][1].split()))\n        prefix_sum = [0] * (N + 1)\n        for j in range(N):\n            prefix_sum[j + 1] = prefix_sum[j] + A[j]\n        count = 0\n",
  "995": "def max_money_obtainable(n, A, k):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    max_money = 0\n    for i in range(k + 1):\n        max_money = max(max_money, prefix_sum[i] + prefix_sum[n] - prefix_sum[n - k +",
  "996": "```python\ndef find_winner_and_lead(N, scores):\n    max_lead = 0\n    winner = 1\n    lead = 0\n    for score in scores:\n        lead += int(score[0]) - int(score[1])\n        if abs(lead) > max_lead:\n            max_lead = abs(lead)\n            if lead > 0:\n                winner = 1\n            else:\n                winner = 2\n    return winner, max_lead\n```",
  "997": "```python\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    scores = [10] * n\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        for x in range(i-1, j):\n            scores[x] *= k\n    print(sum(scores)//n)\n```",
  "998": "```python\nfrom collections import defaultdict\n\nN, Q = map(int, input().split())\nrows = defaultdict(int)\ncols = defaultdict(int)\n\nfor _ in range(Q):\n    op, i, x = input().split()\n    if op == 'RowAdd':\n        rows[int(i)] += int(x)\n    else:\n        cols[int(i)] += int(x)\n\nmax_val = 0\nfor r in rows:\n    for c in cols:\n        max_val = max(max_val,",
  "999": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    print(''.join(chr(i+65) for i in range(K)))\n    print(''.join(str(i) for i in range(1, K+1)))\n```",
  "1000": "```python\ndef min_speed_of_panipuri_seller(T, customers):\n    result = []\n    for i in range(T):\n        N = customers[i][0]\n        A = customers[i][1:]\n        min_speed = max(A)\n        for j in range(1, max(A) + 1):\n            speed = j\n            time = 0\n            for k in range(N):\n                time += (A[k] + speed - 1) // speed\n           ",
  "1001": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    prices = list(map(int, input().split()))\n    good_days = 0\n    for i in range(N):\n        if i < 5:\n            good_days += 1\n        else:\n            if prices[i] < min(prices[i-5:i]):\n                good_days += 1\n    print(good_days)\n```",
  "1002": "def can_visit_cities(T, test_cases):\n    results = []\n    for i in range(T):\n        N, D = test_cases[i][0], test_cases[i][1]\n        cities = test_cases[i][2]\n        cities.sort()\n        if max(cities) - min(cities) <= D:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results",
  "1004": "n = int(input())\ncount = 0\nwhile n > 0:\n    count += 1\n    n -= count * count\n    if n < (count + 1) * (count + 1):\n        break\nprint(count)\nfor i in range(1, count):\n    print(i, end=' ')\nprint(count + n)",
  "1006": "```python\ndef min_possible_number(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, d = map(int, case.split())\n        N = str(N)\n        while d in map(int, N):\n            idx = N.index(str(d))\n            N = N[:idx] + N[idx+1:] + str(d)\n        results.append(int(N))\n    return results\n```",
  "1007": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef largest_contiguous_subarray(arr):\n    n = len(arr)\n    ans = -1\n    for i in range(n):\n        g = arr[i]\n        for j in range(i, n):\n            g = gcd(g, arr[j])\n            if g == 1:\n                ans = max(ans, j - i + 1)\n   ",
  "1008": "```python\ndef max_group_of_disjoint_subarrays(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        result.append(str((2 ** N - 2) % (10**9 + 7)))\n    return result\n```",
  "1009": "```python\ndef count_subsequences(T, sequences):\n    results = []\n    for i in range(T):\n        N = sequences[i][0]\n        A = sequences[i][1]\n        count = 0\n        for j in range(1, 2**N):\n            subset = [A[k] for k in range(N) if (j >> k) & 1]\n            if len(subset) > 1:\n                while len(set(subset)) > 1",
  "1011": "```python\ndef chef_or_brother(T, cases):\n    result = []\n    for i in range(0, len(cases), 2):\n        N, K = map(int, cases[i].split())\n        s = cases[i+1]\n        upper_count = sum(1 for c in s if c.isupper())\n        lower_count = N - upper_count\n        if upper_count <= K or lower_count <= K:\n            if upper_count == N or lower_count ==",
  "1013": "```python\nfrom collections import defaultdict\n\ndef find_non_friend_pairs(N, M, friendships):\n    friends = defaultdict(set)\n    for A, B in friendships:\n        friends[A].add(B)\n        friends[B].add(A)\n    non_friends = sum(len(friends[i]) for i in friends) // 2\n    return N * (N - 1) // 2 - non_friends\n```",
  "1014": "```python\ndef is_power_of_two(n):\n    return n != 0 and (n & (n - 1)) == 0\n\ndef sum_of_magical_powers(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            num = int(s[i:j+1])\n            if not s[i].startswith('0') and is_power_of_two(num):\n                count += num\n    return count % (",
  "1015": "def generate_pattern(K):\n    result = ''\n    for i in range(1, K+1):\n        result += str(i*2)\n    return result",
  "1016": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    count = 0\n    for _ in range(N):\n        S, J = map(int, input().split())\n        if J - S > 5:\n            count += 1\n    print(count)\n```",
  "1017": "```python\ndef work_on_weekends(T, test_cases):\n    results = []\n    for case in test_cases:\n        A = list(map(int, case.split()[:5]))\n        P = int(case.split()[5])\n        total_hours = sum(A)\n        if total_hours * P > 120:\n            results.append('Yes')\n        else:\n            results.append('No')\n    return results\n```",
  "1018": "for _ in range(int(input())):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    min_hours = max(heights) - min(heights)\n    print(min_hours)",
  "1019": "def is_valid_strip(N, strips):\n    result = []\n    for i in range(N):\n        strip = strips[i]\n        center = strip.index(max(strip))\n        left = strip[:center]\n        right = strip[center+1:]\n        if len(left) != len(right):\n            result.append('no')\n        elif left == sorted(left, reverse=True) and right == sorted(right):\n            result.append('yes')\n        else:\n            result.append('no')\n    return result",
  "1020": "def predict_winner(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = test_cases[i][0], test_cases[i][1]\n        A = test_cases[i][2:]\n        ones = A.count(1)\n        if ones == N:\n            results.append('1' if K % 2 == 1 else '2')\n        elif ones == 0:\n            results.append('2' if K % 2 == 1 else '",
  "1021": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nd = defaultdict(int)\nfor i in a:\n    d[i] += 1\nx = a[0]\nprint(x, end=' ')\nfor i in range(n-1):\n    if x % 3 == 0 and d[x//3] > 0:\n        x = x // 3\n    else:\n        x = x * 2\n    print(x,",
  "1022": "```python\ndef solve(N, A):\n    if sum(A) % N != 0:\n        return \"NO\"\n    else:\n        x = sum(A) // N\n        res = []\n        for i in range(N):\n            if A[i] == -1:\n                res.append(x)\n            else:\n                res.append(A[i])\n        return \"YES\\n\" + \" \".join(map(str, res))\n```",
  "1023": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    num = 1\n    for i in range(1, K+1):\n        for j in range(i):\n            print(num, end=' ')\n            num += 1\n        print()\n```",
  "1024": "```python\ndef distribute_cakes(T, families):\n    results = []\n    total_extra_slices = 0\n    for family in families:\n        S, N, K, R = family\n        slices_needed = K * ((R ** N) - 1) // (R - 1)\n        if slices_needed <= S:\n            results.append('POSSIBLE ' + str(S - slices_needed))\n        else:\n            results.append('IMPOSSIBLE ' + str(slices",
  "1026": "```python\ndef count_ordered_triples(T, test_cases):\n    result = []\n    for case in test_cases:\n        N1, N2, N3 = map(int, case.split())\n        result.append((N1 * (N1 - 1) * (N1 - 2) * N2 * (N2 - 1) * N3) % (10**9 + 7))\n    return result\n```",
  "1027": "def construct_palindromic_string(T, cases):\n    result = []\n    for case in cases:\n        N, P = map(int, case.split())\n        if P == 1 or P == N:\n            result.append(\"impossible\")\n        else:\n            s = \"a\" * (N // 2 - 1) + \"b\" + \"a\" * (N // 2 - 1) + \"b\"\n            result.append(s)\n    return result",
  "1028": "```python\ndef is_armstrong_number(n):\n    num_str = str(n)\n    num_digits = len(num_str)\n    total = sum(int(digit)**num_digits for digit in num_str)\n    return \"FEELS GOOD\" if total == n else \"FEELS BAD\"\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(is_armstrong_number(N))\n```",
  "1029": "```python\ndef assign_jobs(n, m, completed_jobs):\n    chef_jobs = []\n    assistant_jobs = []\n    all_jobs = list(range(1, n+1))\n    remaining_jobs = list(set(all_jobs) - set(completed_jobs))\n    for i in range(len(remaining_jobs)):\n        if i % 2 == 0:\n            chef_jobs.append(remaining_jobs[i])\n        else:\n            assistant_jobs.append(remaining_jobs[i])\n    return chef_jobs, assistant_jobs\n",
  "1030": "```python\ndef count_pairs(n, u, v):\n    x = u\n    y = v\n    while x != y:\n        if x > y:\n            x //= 2\n        else:\n            y //= 2\n    return n // x\n```",
  "1031": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    H, S = map(int, input().split())\n    D = H**2 - 4*S\n    if D < 0:\n        print(-1)\n    else:\n        x1 = (H + math.sqrt(D)) / 2\n        x2 = (H - math.sqrt(D)) / 2\n        print('{:.5f} {:.5f} {:.5f}'.",
  "1032": "```python\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    print(pow(X, N, 10**6+3))\n```",
  "1033": "```python\nn = int(input())\nvalues = list(map(int, input().split()))\ntotal_sum = sum(values)\nresult = 0\nfor value in values:\n    result += abs(total_sum - value)\nprint(result // 2)\n```",
  "1036": "```python\ndef is_same_snake(x11, y11, x12, y12, x21, y21, x22, y22):\n    if (x11, y11) == (x21, y21) and (x12, y12) == (x22, y22):\n        return \"yes\"\n    if (x11, y11) == (x22, y22) and (x12, y12) == (x21,",
  "1037": "```python\ndef ada_wins_game(board):\n    pawns = [i for i in range(len(board)) if board[i] == 'P']\n    if len(pawns) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(ada_wins_game('..P.P'))\n```",
  "1039": "```python\ndef min_rounds_to_clean_lab(X, Y):\n    diff = Y - X\n    if diff % 2 == 0:\n        print(2)\n    else:\n        print(1)\n```",
  "1040": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        l, r = map(int, input().split())\n        if len(set(s[l-1:r])) < (r-l+1)//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
  "1041": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = list(map(int, input().split()))\n    max_val = -float('inf')\n    start = 0\n    end = 0\n    curr_val = 1\n    curr_start = 0\n    for i in range(N):\n        curr_val *= S[i]\n        if curr_val > max_val:\n            max_val = curr_val\n            start = curr_start",
  "1042": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count_good_pairs(N, P):\n    count = 0\n    for a in range(1, N):\n        for b in range(a+1, N+1):\n            if gcd(a*b, P) == 1:\n                count += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    N",
  "1043": "```python\ndef check_word_existence(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        forgotten_words = set(test_cases[i][1].split())\n        modern_phrases = [set(phrase.split()[1:]) for phrase in test_cases[i][2:]]\n        word_existence = ['YES' if any(word in phrase for phrase in modern_phrases) else 'NO'",
  "1044": "```python\nT = int(input())\nfor _ in range(T):\n    N = input()\n    print(sum(int(digit) for digit in N))\n```",
  "1045": "```python\nT = 1\nstrings = ['codechef']\n```",
  "1046": "def candy_game_winner(test_cases):\n    results = []\n    for case in test_cases:\n        A, B = map(int, case.split())\n        total_candies = 0\n        limak_turn = True\n        while total_candies <= max(A, B):\n            if limak_turn:\n                total_candies += 1\n                if total_candies > A:\n                    results.append(\"Bob\")\n                    break\n            else:\n                total_candies += ",
  "1047": "```python\nfrom math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = [0]*n\n    y = [0]*n\n    for i in range(n):\n        x[i], y[i] = map(int, input().split())\n    x.sort()\n    y.sort()\n    print(\"{:.10f}\".format((max(x)-min(x) + max(y)-min(y)) * sqrt(2) / ",
  "1048": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    a, K = map(int, input().split())\n    x1, x2, x3 = map(int, input().split())\n    x = sorted([x1, x2, x3])\n    if x[0] + a > x[2]:\n        print(\"{:.6f}\".format(0))\n    else:\n        print(\"{:.6f}\".format((x[2]",
  "1049": "```python\ndef max_subarray_sum(arr, n, k):\n    max_sum = 0\n    unique_elements = set()\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if len(set(subarray)) == k:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\n```",
  "1050": "```python\ndef longest_valid_prefix(expression):\n    stack = []\n    count = 0\n    for char in expression:\n        if char == '<':\n            stack.append(char)\n        elif char == '>' and stack:\n            stack.pop()\n            count += 2\n        else:\n            break\n    return count\n```",
  "1051": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K+1):\n        print('*'*i + str(i))\n```",
  "1053": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(arr.index(1))",
  "1054": "```python\ndef lexicographically_smallest_palindrome(T, strings):\n    results = []\n    for s in strings:\n        s = list(s)\n        n = len(s)\n        for i in range(n//2):\n            if s[i] == '.' and s[n-1-i] != '.':\n                s[i] = s[n-1-i]\n            elif s[i] != '.' and s[n-1-i] == '.':\n                s[n-1-i] = s",
  "1055": "```python\ndef max_slices(M, N, A):\n    A.sort(reverse=True)\n    slices = 0\n    for i in range(M):\n        slices += (A[i] * (N // M)) + min(A[i], N % M)\n    return slices\n```",
  "1056": "```python\nT = int(input())\nfor _ in range(T):\n    A, B, C = map(int, input().split())\n    if A + B + C == 180:\n        print('YES')\n    else:\n        print('NO')\n```",
  "1057": "def next_magical_number(n):\n    n_str = str(n)\n    if '4' in n_str:\n        return int(n_str.replace('4', '7'))\n    else:\n        return int('4' + '4' * len(n_str))",
  "1058": "```python\nt = int(input())\nfor _ in range(t):\n    n = input()\n    original_password = ''.join(str((int(digit) - 2) % 10) for digit in n)\n    print(original_password)\n```",
  "1059": "def max_mod_value(N, A):\n    A.sort()\n    return A[-1] % A[0]",
  "1060": "```python\ndef count_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] != s[(i+1)%n]:\n            count += 1\n    return count\n```",
  "1062": "```python\nn = int(input())\nfor i in range(2*n+1):\n    row = [str(max(abs(n-i), abs(n-j)) + 1) for j in range(2*n+1)]\n    print(' '.join(row))\n```",
  "1063": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a % b)",
  "1064": "def chef_signboard(t, strings):\n    result = []\n    for s in strings:\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '?':\n                if i < len(s) - 3 and s[i+1:i+4] != list('CHEF'):\n                    s[i] = 'A'\n                else:\n                    s[i] = 'C'\n        result.append(''.join(s))\n    return result",
  "1065": "```python\nfrom itertools import combinations\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    distances = [0] * (n + m - 1)\n    houses = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == '1']\n    for (x1, y1), (x2",
  "1066": "def largest_nice_integer(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i-1]:\n        i -= 1\n    if i == 0:\n        return int(''.join(n))\n    j = i\n    while j < len(n) and n[j] >= n[i-1]:\n        j += 1\n    n[i-1], n[j-1]",
  "1068": "def can_shuffle_students(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = map(int, case.split())\n        if N == 1 or M == 1 or (N == 2 and M == 2):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results",
  "1069": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a + b)",
  "1071": "```python\ndef bitwise_game(T, test_cases):\n    res = []\n    for case in test_cases:\n        x, Q = case[0], case[1]\n        for i in range(Q):\n            query_type = case[2*i+2]\n            if query_type == 1:\n                i = case[2*i+3]\n                res.append(\"ON\" if x & (1 << (i-1)) else \"OFF\")\n            elif query_type == 2:\n",
  "1072": "def min_length_string(n):\n    x_count = n // 2\n    d_count = n - x_count\n    return 'X' * x_count + 'D' * d_count",
  "1073": "MOD = 10**9 + 7\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    if n == 1:\n        print(m)\n    elif n == 2:\n        print(m * (m - 1) % MOD)\n    else:\n        print(m * (m - 1) * pow(m - 2, n - 2, MOD) % MOD)",
  "1074": "```python\ndef count_window_frames(T, logs):\n    result = []\n    for i in range(0, len(logs), 2):\n        if logs[i] == logs[i+1]:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n```",
  "1075": "```python\ndef winner_of_game(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        integers = case[1]\n        xor_sum = 0\n        for num in integers:\n            xor_sum ^= num\n        if xor_sum == 0:\n            results.append('Derek')\n        else:\n            results.append('Henry')\n    return results\n```",
  "1077": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    directions = [input() for _ in range(N)]\n    print('')\n    for direction in reversed(directions):\n        if 'Left' in direction:\n            print(direction.replace('Left', 'Right'))\n        else:\n            print(direction.replace('Right', 'Left'))\n    print('')\n```",
  "1078": "```python\nT = int(input())\nfor _ in range(T):\n    S, W1, W2, W3 = map(int, input().split())\n    if S >= W1 + W2 + W3:\n        print(1)\n    elif S >= W1 + W2 or S >= W2 + W3:\n        print(2)\n    else:\n        print(3)\n```",
  "1079": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(n.count('4'))",
  "1080": "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(set(s)) == 2 and s[0] == s[2] and s[1] == s[3]:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "1081": "```python\nT = int(input())\nfor _ in range(T):\n    S = input()\n    key = [98, 57, 31, 45, 46]\n    result = ''\n    for i in range(len(S)):\n        num = (ord(S[i]) - 65 + key[i]) % 26\n        result += chr(num + 65)\n    print(result)\n```",
  "1083": "def max_attendees(T, cases):\n    result = []\n    for case in cases:\n        N, M, Z, L, R, B = map(int, case.split())\n        max_possible = (N * M) - Z - max(0, L - B) - max(0, R - B) - max(0, B - min(L, R))\n        result.append(str(max_possible))\n    return result",
  "1084": "def min_operations_to_zeros(S):\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '1':\n            count += 1\n    return count",
  "1085": "```python\nfrom collections import defaultdict\n\ndef count_words(matrix, queries):\n    mod = 1000000007\n    n = len(matrix)\n    dp = [[0] * n for _ in range(101)]\n    for i in range(n):\n        dp[1][i] = 1\n    for l in range(2, 101):\n        for i in range(n):\n            for j in range(n):\n                if matrix[j][i] == 1:\n                   ",
  "1087": "```python\ndef is_tree_topology(N, edges):\n    if len(edges) != N - 1:\n        return 'NO'\n    adj_list = {i: [] for i in range(1, N + 1)}\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    visited = set()\n    stack = [1]\n    while stack:\n        node = stack.pop()\n        if node in visited:\n            return",
  "1088": "t = int(input())\nfor _ in range(t):\n    M, p = map(float, input().split())\n    if M == 1:\n        print(\"{:.1f} {:.1f}\".format(1e9, 0))\n    else:\n        print(\"{:.1f} {:.1f}\".format(1e9 * (1 - p), 1e9 * p))",
  "1089": "```python\ndef min_nodes_left(n, A):\n    leaves = [0] * (n + 1)\n    for i in range(1, n):\n        leaves[A[i-1]] += 1\n    nodes = [0] * (n + 1)\n    for i in range(1, n):\n        nodes[A[i-1]] += nodes[i] + 1\n    result = 0\n    for i in range(1, n + ",
  "1090": "```python\ndef shortest_contiguous_subsequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, d = map(int, case[0].split())\n        sequence = list(map(int, case[1].split()))\n        min_length = float('inf')\n        current_sum = 0\n        start = 0\n        for end in range(n):\n            current_sum += sequence[end]\n            while current_sum >= d:\n                min_length = min(min",
  "1091": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "1092": "```python\ndef min_score_to_enter_university(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K, E, M = map(int, case[0].split())\n        scores = [list(map(int, x.split())) for x in case[1:-1]]\n        sergey_scores = list(map(int, case[-1].split()))\n        total_scores = [sum(x) for x in scores]\n        total_scores.sort(reverse=True)\n       ",
  "1094": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    words = input().split()\n    rhyming_words = []\n    for j in range(n):\n        for k in range(j+1, n):\n            if words[j][-3:] == words[k][-3:]:\n                rhyming_words.append(words[j] + \" \" + words[k])\n    print(\"Case :\", i+1)\n    for word in rhyming_words:\n        print(word)",
  "1095": "```python\nn = int(input())\nbooks = list(map(int, input().split()))\nsorted_books = sorted(books)\nmoves = sum(1 for i in range(n) if books[i] != sorted_books[i])\nprint(moves)\n```",
  "1096": "```python\ndef min_time_to_spend(N, X, Y, contests, V_times, W_times):\n    contests.sort(key=lambda x: x[0])\n    V_times.sort()\n    W_times.sort()\n    min_time = float('inf')\n    j = 0\n    for i in range(N):\n        while j < X and V_times[j] < contests[i][0]:\n            j += 1\n        if j < X and V_times[j] <= contests[i",
  "1097": "```python\ndef get_cake_area(T, cases):\n    results = []\n    for i in range(T):\n        N, L, B = map(int, cases[i].split())\n        min_side = min(L, B)\n        max_side = max(L, B)\n        if N % 2 == 0:\n            results.append(\"Yes \" + str(min_side))\n        else:\n            results.append(\"No\")\n    return results\n```",
  "1098": "```python\ndef max_stones_removed(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        stones = test_cases[i][1:]\n        stones.sort()\n        chef_stones = sum(stones[::2])\n        results.append(str(chef_stones))\n    return results\n```",
  "1099": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    votes = defaultdict(int)\n    score = 0\n    for _ in range(N):\n        user, vote = input().split()\n        if votes[user] != 0:\n            score -= votes[user]\n        if vote == '+':\n            votes[user] = 1\n        else:\n            votes[user] = -1\n        score += votes[user]\n    print(score)",
  "1100": "```python\ndef max_operations(p, q, r, a, b, c):\n    diff1 = a - p\n    diff2 = b - q\n    diff3 = c - r\n    total_diff = abs(diff1) + abs(diff2) + abs(diff3)\n    if total_diff % 2 == 0 and (diff1 + diff2 + diff3) % 2 == 0:\n        return total_diff // 2\n    else:\n       ",
  "1102": "```python\nMOD = 1000000007\n\ndef possible_strings_count(S):\n    count = 1\n    for digit in S:\n        count *= len(keypad[int(digit)])\n        count %= MOD\n    return count\n\nT = int(input())\nfor _ in range(T):\n    S = input().strip()\n    print(possible_strings_count(S))\n```",
  "1103": "```python\ndef find_divisible_square(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        integers = list(map(int, case[1].split()))\n        product = 1\n        for num in integers:\n            product *= num\n        root = int(product ** 0.5)\n        results.append(root)\n    return results\n```",
  "1104": "```python\ndef time_taken(N, K):\n    return (2 * N - 1 + K * (K - 1) // 2) % 1000000007\n```",
  "1105": "```python\ndef min_time_to_prepare_dishes(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        C = case[1]\n        C.sort()\n        if N == 1:\n            results.append(C[0])\n        else:\n            results.append(max(C[0] + C[1], C[-1]))\n    return results\n```",
  "1107": "```python\nT = int(input())\nfor _ in range(T):\n    L, R = map(int, input().split())\n    total_goodness = 0\n    for num in range(L, R+1):\n        total_goodness += num * len(str(num))\n    print(total_goodness % 1000000007)\n```",
  "1108": "```python\nN, M, K = map(int, input().split())\ncount = 0\nfor _ in range(N):\n    data = list(map(int, input().split()))\n    total_time = sum(data[:-1])\n    if total_time >= M and data[-1] <= 10:\n        count += 1\nprint(count)\n```",
  "1109": "```python\ndef predict_outcome(T, numbers):\n    outcomes = []\n    for num in numbers:\n        if num % 2 == 0:\n            outcomes.append(\"YES\")\n        else:\n            outcomes.append(\"NO\")\n    return outcomes\n```",
  "1110": "```python\ndef min_modifications(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        max_num = max(A)\n        count = [0] * (max_num + 1)\n        for num in A:\n            count[num] += 1\n        max_count = max(count)\n        if max_count > (N + 1) // 2",
  "1111": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    odd_pairs = sum(1 for i in range(N) for j in range(i+1, N) if (A[i] + A[j]) % 2 != 0)\n    print(odd_pairs)\n```",
  "1112": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    num = 1\n    for i in range(1, K+1):\n        for j in range(i):\n            print(num, end='')\n            num += 1\n        print()\n```",
  "1113": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = Counter(A)\n    max_count = max(count.values())\n    max_element = min(k for k, v in count.items() if v == max_count)\n    print(max_element, max_count)\n```",
  "1114": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = max(a)\n    count_max = a.count(max_val)\n    total_pairs = n * (n - 1) / 2\n    if count_max > 1:\n        print(1.0)\n    else:\n        print(count_max / total_pairs)\n```",
  "1118": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    count = 0\n    for i in range(1, N):\n        if S[i] == S[i-1]:\n            count += 1\n    print((count+1)//2)\n```",
  "1120": "```python\nfrom collections import deque\n\ndef calculate_days_to_apocalypse(R, C, x, y):\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(x, y, 0)])\n    visited = set()\n    while queue:\n        i, j, days = queue.popleft()\n        if (i, j) in visited or i < 0 or i >= R or",
  "1121": "```python\nfrom math import fabs\ndef min_angle(hour, minute):\n    angle = fabs(30*hour - (11/2)*minute)\n    return min(angle, 360-angle)\n\ndef chef_jump_time(T, times):\n    result = []\n    for time in times:\n        hour, minute = map(int, time.split(':'))\n        result.append(f\"{int(min_angle(hour, minute))} degree\")\n    return result\n```",
  "1122": "```python\nn = int(input())\nsum_of_series = n + (n*(n+1))\nif sum_of_series % 2 == 0:\n    print(\"Ravi\")\nelse:\n    print(\"Jhon\")\n```",
  "1123": "from collections import defaultdict\ndef find_fast_roads(N, M, roads, Q, queries):\n    graph = defaultdict(list)\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    for query in queries:\n        if query[1] in graph[query[0]]:\n            print(\"YO\")\n        else:\n            print(\"NO\")",
  "1124": "```python\ndef max_creatures_to_pay_back(T, cases):\n    results = []\n    for case in cases:\n        N, P, Q = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        one_rupee_coins = min(P, sum(1 for amount in A if amount <= 1))\n        two_rupee_coins = min(Q, sum(1 for amount in A if amount > 1 and",
  "1125": "```python\nT = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    print(R * C)\n```",
  "1126": "```python\ndef max_regions(n):\n    return 2 * n**2 - n + 2\n```",
  "1127": "```python\ndef format_name(name):\n    parts = name.split()\n    formatted_name = parts[-1].capitalize()\n    for part in parts[:-1]:\n        formatted_name += \" \" + part[0].capitalize() + \".\"\n    return formatted_name\nt = int(input())\nfor _ in range(t):\n    name = input()\n    print(format_name(name))\n```",
  "1128": "```python\ndef find_balance_point(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```",
  "1129": "```python\ndef ways_to_construct_love_graph(N, M):\n    return pow(N, M, 10**9 + 7)\n\nT = 1\ntest_cases = [(2, 1)]\nfor N, M in test_cases:\n    print(ways_to_construct_love_graph(N, M))\n```",
  "1130": "```python\ndef smallest_number_of_days(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, D = map(int, case[0].split())\n        ages = list(map(int, case[1].split()))\n        at_risk = sum(1 for age in ages if age >= 80 or age <= 9)\n        not_at_risk = N - at_risk\n        days = (at_risk + D - 1) //",
  "1131": "```python\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = Counter(arr)\n    result = [num for num, f in freq.items() if f > K]\n    print(*sorted(result))\n```",
  "1132": "```python\ndef count_valid_sequences(N):\n    return pow(2, N, 10**9 + 7) * (N * 2 - 1) % (10**9 + 7)\n```",
  "1133": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_length = max(A)\n    total_cost = max_length + (N - 1)\n    print(max_length, total_cost)\n```",
  "1134": "```python\ndef conquer_nations(T, cases):\n    results = []\n    for case in cases:\n        N, M = map(int, case[0].split())\n        armies = list(map(int, case[1].split()))\n        total_army = 0\n        for i in range(M):\n            total_army += armies[i]\n        for i in range(M, N):\n            total_army -= max(armies[i] // 2, 0)\n            if",
  "1135": "from collections import deque\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    result = [0] * N\n    remaining = deque(range(1, N + 1))\n    result[0] = remaining[K]\n    remaining.remove(result[0])\n    for i in range(1, N):\n        if i <= K:\n            result[i] = remaining[K - i]\n            remaining.remove(result[i])\n        else",
  "1136": "def max_sweetness(T, cases):\n    result = []\n    for case in cases:\n        N, K = map(int, case.split())\n        if N % 2 == 0:\n            result.append(N * (K // 2))\n        else:\n            result.append((N // 2 + 1) * K)\n    return result",
  "1137": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    prices = list(map(int, input().split()))\n    age = 20\n    target = age * 100\n    found = False\n    for i in range(N):\n        for j in range(i+1, N):\n            if prices[i] + prices[j] == target:\n                found = True\n                break\n        if found:\n            break\n    if found:\n       ",
  "1138": "```python\ndef minimal_steps(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N = int(cases[i])\n        A = list(map(int, cases[i+1].split()))\n        steps = 0\n        for j in range(N-1, -1, -1):\n            if A[j] == j:\n                continue\n            else:\n                steps += j - A[j]\n                A[:j+1",
  "1139": "```python\ndef numDecodings(s):\n    if s[0] == \"0\":\n        return 0\n    dp = [0] * (len(s) + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, len(s) + 1):\n        if 1 <= int(s[i-1:i]) <= 9:\n            dp[i] += dp[i-1]\n        if 10",
  "1140": "```python\nT = int(input())\nfor _ in range(T):\n    p, idx = map(int, input().split())\n    print((2 * idx) % (2 ** p))\n```",
  "1141": "def translate_bytelandian(T, M, sentences):\n    mapping = {M[i]: chr(97 + i) for i in range(26)}\n    result = []\n    for sentence in sentences:\n        translated = ''.join(mapping.get(char, char) for char in sentence)\n        result.append(translated.replace('_', ' '))\n    return result",
  "1142": "```python\nN = int(input())\nwealth = [int(input()) for _ in range(N)]\nranks = []\nseen = set()\nfor w in wealth:\n    rank = 1\n    for s in seen:\n        if s < w:\n            rank += 1\n    ranks.append(rank)\n    seen.add(w)\nprint(*ranks, sep='\\n')\n```",
  "1143": "for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            ans = i + n//i\n        i += 1\n    print(ans-2)",
  "1145": "```python\ndef knight_moves(T, destinations):\n    results = []\n    for dest in destinations:\n        if dest % 2 == 0 or dest == 1:\n            results.append('0')\n        else:\n            results.append('2' + '1' * ((dest-1)//2))\n    return results\n```",
  "1146": "n, d = map(int, input().split())\nL = [int(input()) for _ in range(n)]\nL.sort()\npairs = 0\nfor i in range(n-1):\n    if L[i+1] - L[i] <= d:\n        pairs += 1\n        i += 1\nprint(pairs)",
  "1147": "```python\ndef min_chars_to_make_palindrome(s):\n    from collections import Counter\n    count = Counter(s)\n    odd_count = sum(1 for c in count.values() if c % 2 != 0)\n    return max(0, odd_count - 1)\n```",
  "1148": "```python\ndef is_order_possible(s1, s2, s3):\n    return \"yes\" if (s1[0] < s2[0] and s1[1] < s2[1] and s1[2] < s2[2] and s2[0] < s3[0] and s2[1] < s3[1] and s2[2] < s3[2]) or (s1[0",
  "1149": "```python\ndef count_palindrome_ways(s):\n    mod = 10000009\n    count = 1\n    for char in set(s):\n        count = (count * (s.count(char) + 1)) % mod\n    return count\n```",
  "1150": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    while n > 0:\n        root = int(n ** 0.5)\n        n -= root ** 2\n        count += 1\n    print(count)\n```",
  "1151": "def count_markets(N, M, roads):\n    return N - M + 1",
  "1152": "recipes = {}\nfor _ in range(int(input())):\n    recipe, priority = input().split()\n    recipes[recipe] = int(priority)\n\nfor _ in range(int(input())):\n    query = input()\n    max_priority = -float('inf')\n    max_recipe = \"NO\"\n    for recipe, priority in recipes.items():\n        if recipe.startswith(query) and priority > max_priority:\n            max_priority = priority\n            max_recipe = recipe\n    print(max_recipe)",
  "1153": "```python\ndef count_sequences(T, cases):\n    result = []\n    for case in cases:\n        n, m, q_r, k = map(int, case.split())\n        result.append((m ** (n - 1)) % (10**9 + 7))\n    return result\n```",
  "1154": "# Solution\n\ndef find_imposter(N, friends_names, game_names):\n    friends_set = set(map(int, friends_names.split()))\n    game_set = set(map(int, game_names.split()))\n    imposter = game_set.difference(friends_set)\n    return imposter.pop()",
  "1155": "```python\ndef max_non_overlapping_regions(T, regions):\n    regions.sort(key=lambda x: (x[2], x[0]))\n    count = 1\n    end = regions[0][1]\n    for i in range(1, T):\n        if regions[i][3] < end:\n            end = regions[i][1]\n        elif regions[i][2] > end:\n            count += 1\n            end = regions[i][1]\n    return count\n",
  "1156": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 10:\n        print(\"Thanks for helping Chef!\")\n    else:\n        print(\"-1\")",
  "1157": "```python\nfrom itertools import accumulate\n\ndef expected_hearts(N, M, K, hearts):\n    total_rectangles = N * (N + 1) * M * (M + 1) // 4\n    heart_positions = [0] * (N + 1)\n    for heart in hearts:\n        heart_positions[heart % N] += 1\n    heart_positions = list(accumulate(heart_positions))\n    expected_hearts = 0\n    for i",
  "1158": "```python\ndef count_ciel_numbers(N, menus):\n    def is_ciel_number(num):\n        count_8 = num.count('8')\n        count_5 = num.count('5')\n        count_3 = num.count('3')\n        return count_8 >= count_5 >= count_3 and all(digit in ['4', '7', '8', '5', '3'] for digit in num)\n\n    count = 0\n    for menu in menus:\n",
  "1159": "```python\ndef find_winner(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    shanky_char = ''\n    anku_char = ''\n    for char in s:\n        if char_count[char] == 1:\n            if char > shanky_char:\n                shanky_char = char\n        if char_count[char] == 1:\n",
  "1161": "```python\ndef find_winner(s):\n    snakes = s.count('s')\n    mongooses = s.count('m')\n    if snakes > mongooses:\n        return \"snakes\"\n    elif snakes < mongooses:\n        return \"mongooses\"\n    else:\n        return \"tie\"\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(find_winner(s))\n```",
  "1162": "```python\ndef count_lucky_digits(N):\n    if N < 4 or N == 6 or N == 8 or N == 9 or N == 10 or N == 12 or N == 13:\n        return -1\n    count_4 = (N - (N % 7)) // 7\n    if N % 7 != 0:\n        count_4 += 1\n    return count_4\n```",
  "1163": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    goals = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            diff = goals[j] - goals[i]\n            if diff > max_diff:\n                max_diff = diff\n    if max_diff == 0:\n        print(\"UNFIT\")\n    else:\n        print",
  "1164": "```python\nfrom operator import itemgetter\nP, S = map(int, input().split())\nproblems = []\nfor i in range(P):\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    n = sum(1 for j in range(S-1) if NS[j] > NS[j+1])\n    problems.append((n, i+1))\nproblems.sort(key=itemgetter(0, 1))\nprint(*[problem",
  "1165": "```python\nfrom datetime import datetime, timedelta\nT = int(input())\nfor _ in range(T):\n    d, m = input().split()\n    birth_date = datetime(2022, datetime.strptime(m, '%B').month, int(d))\n    half_birthday = birth_date + timedelta(days=182)\n    print(half_birthday.strftime('%d %B').lower())\n```",
  "1166": "```python\ndef count_subarrays(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        min_val = arr[i]\n        for j in range(i, len(arr)):\n            min_val = min(min_val, arr[j])\n            if min_val == k:\n                count += 1\n    return count\n\nN = int(input())\narr = list(map(int, input().split()))\nQ = int(input())\nfor _ in range(Q):\n    K = int",
  "1167": "```python\ndef modify_string(s):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char not in vowels:\n            if char.isupper():\n                result += \".\" + char.lower()\n            else:\n                result += \".\" + char\n    return result\n```",
  "1168": "def count_good_substrings(s, good_bad, k):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        bad_count = 0\n        for j in range(i, n):\n            if good_bad[ord(s[j]) - ord('a')] == 'b':\n                bad_count += 1\n            if bad_count > k:\n                break\n            count += 1\n    return count",
  "1169": "def calculate_flames(name1, name2):\n    name1_set = set(name1)\n    name2_set = set(name2)\n    common_letters = name1_set.intersection(name2_set)\n    remaining_letters_count = len(name1) + len(name2) - 2 * len(common_letters)\n    flames = ['F', 'L', 'A', 'M', 'E', 'S']\n    result_index = (remaining_letters_count % len(flames)) - 1\n",
  "1170": "```python\ndef chef_step_traversal(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K = case[0], case[1]\n        distances = case[2:]\n        result = ''\n        for distance in distances:\n            if distance % K == 0:\n                result += '1'\n            else:\n                result += '0'\n        results.append(result)\n    return results\n```",
  "1172": "```python\ndef count_balanced_strings(s):\n    n = len(s)\n    count_4 = s.count('4')\n    count_7 = n - count_4\n    if count_4 != count_7:\n        return 0\n    return pow(2, count_4, 10**9 + 7)\n\nT = int(input())\nfor _ in range(T):\n    s = input().strip()\n    print(count_balanced_strings(s))\n```",
  "1173": "```python\ndef count_triplets(N, arr):\n    xor_prefix = [0] * (N + 1)\n    for i in range(1, N + 1):\n        xor_prefix[i] = xor_prefix[i - 1] ^ arr[i - 1]\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            if xor_prefix[i - 1",
  "1174": "```python\ndef count_good_triplets(N, A):\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                P = (A[i] << (int(A[j]).bit_length() + int(A[k]).bit_length() + 2)) + (A[j] << (int(A[k]).bit_length()",
  "1175": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    sum_odd = (N+1)//2 * (N+1)//2\n    sum_even = N//2 * (N//2 + 1)\n    lcm_odd = math.ceil(sum_odd * math.acos(-1))\n    lcm_even = math.ceil(sum_even * math.acos(-1))\n    if lcm_odd > lcm_even:\n        print(\"YESS",
  "1176": "def can_print_string(s):\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    return abs(count_0 - count_1) == 1",
  "1177": "from math import comb\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(comb(n, k))",
  "1178": "```python\ndef max_friends_join_party(T, cases):\n    results = []\n    for case in cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        max_friends = 0\n        for i in range(N):\n            if A[i] <= max_friends:\n                max_friends += 1\n        results.append(str(max_friends))\n    return results\n```",
  "1179": "def nice_swaps(T, cases):\n    results = []\n    for N in cases:\n        if N % 4 == 0 or N % 4 == 3:\n            results.append(N // 2 - 1)\n        else:\n            results.append(N // 2)\n    return results",
  "1180": "```python\ndef find_collision_point(N, K, x, y):\n    min_dist = min(x, y, N-x, N-y)\n    x += min_dist\n    y += min_dist\n    K -= min_dist\n    if K % 2 == 0:\n        print(x, y)\n    else:\n        if x == N:\n            print(N, N - K % 4)\n        elif y == N:\n            print(N - K % 4, N",
  "1181": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N % sum(int(digit) for digit in str(N)) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```",
  "1182": "```python\ndef find_interesting_numbers(T, test_cases):\n    result = []\n    for case in test_cases:\n        M = int(case)\n        K = M - 1\n        result.append(str(K))\n        for i in range(2, M + K + 1):\n            result.append(str(i))\n    return result\n```",
  "1183": "def countOccurences(key, from_index):\n    if from_index == len(array):\n        return 0\n    if dp[from_index] is not None:\n        return dp[from_index]\n    if array[from_index] == key:\n        dp[from_index] = 1 + countOccurences(key, from_index + 1)\n    else:\n        dp[from_index] = countOccurences(key, from_index + 1)\n    return dp[from_index]\n\nt = int(input",
  "1184": "from collections import defaultdict\nfrom itertools import permutations\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    requests = defaultdict(list)\n    for _ in range(N):\n        m, t = input().split()\n        requests[t].append(m)\n\n    profits = []\n    for perm in permutations(['A', 'B', 'C', 'D']):\n        profit = 0\n        prices = {'12': 100, '3': 75, '6",
  "1185": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    not_printed = list(map(int, input().split()[1:]))\n    leaves_torn = int(input())\n    total_pages = n + len(not_printed)\n    expected_sum = (total_pages * (total_pages + 1) / 2) - sum(not_printed)\n    print(\"{:.4f}\".format(expected_sum))\n```",
  "1186": "```python\ndef min_nimbdas_to_pay(N, A, Q, K_values):\n    A_sorted = sorted(A, reverse=True)\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + A_sorted[i]\n    result = []\n    for K in K_values:\n        total_nimbdas = prefix_sum[N]\n        total_nimbdas -= prefix_sum",
  "1187": "```python\ndef max_subset_size_and_ways(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = map(int, case.split())\n        max_size = min(N, M + 1)\n        ways = pow(2, max_size - 1, 998244353)\n        results.append((max_size, ways))\n    return results\n```",
  "1188": "n = int(input())\nreporting_to = list(map(int, input().split()))\n\npotential_killers = [i+1 for i, r in enumerate(reporting_to) if r == 0]\nprint(*potential_killers)",
  "1189": "```python\ndef solve(N, A):\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n    total_sum = prefix_sum[N]\n    result = 0\n    for i in range(1, N):\n        if prefix_sum[i] * 2 == total_sum:\n            result += 1\n    return result\nT = int(input())\nfor",
  "1190": "```python\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    count = 0\n    i = 11\n    while p > 0:\n        count += p // 2**i\n        p %= 2**i\n        i -= 1\n    print(count)\n```",
  "1191": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    dictionary = [input() for _ in range(n)]\n    misspelt_words = [input() for _ in range(q)]\n    for word in misspelt_words:\n        for correct_word in dictionary:\n            if len(word) == len(correct_word):\n                diff_count = sum(1 for i in range(len(word)) if word[i] != correct_word[i])\n               ",
  "1194": "```python\ndef max_score(T, testcases):\n    result = []\n    for i in range(T):\n        N = testcases[i*2]\n        s = testcases[i*2+1]\n        x, y = 0, 0\n        for move in s:\n            if move == 'U':\n                y += 1\n            elif move == 'D':\n                y -= 1\n            elif move == 'L':\n                x -= 1\n            elif",
  "1195": "```python\nt = int(input())\nfor _ in range(t):\n    n, a, b, c, d, p, q, y = map(int, input().split())\n    x = list(map(int, input().split()))\n    walk_time = abs(x[a-1] - x[b-1]) * p\n    train_time = abs(x[a-1] - x[c-1]) * p + q + abs(x[d-1] - x[b-1",
  "1196": "```python\ndef max_votes(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, K = map(int, case[0].split())\n        votes = [list(map(int, row.split())) for row in case[1:]]\n        max_sum = 0\n        for i in range(N - K + 1):\n            for j in range(M - K + 1):\n                max_sum = max(max_sum, sum(votes[i",
  "1198": "```python\ndef count_contiguous_subsequences(N, A, Q, queries):\n    prefix_sum = [0]\n    for num in A:\n        prefix_sum.append(prefix_sum[-1] + num)\n    result = []\n    for k in queries:\n        count = 0\n        for i in range(N):\n            for j in range(i, N):\n                if prefix_sum[j+1] - prefix_sum[i] == k:\n                    count += 1\n        result.append(str",
  "1199": "```python\nT = int(input())\nfor _ in range(T):\n    S, N = map(int, input().split())\n    if S % 2 == 0:\n        print(S // 2)\n    else:\n        print((S - 1) // 2 + 1)\n```",
  "1200": "def is_valid_log(s):\n    count_A = s.count('A')\n    count_B = s.count('B')\n    if count_A == count_B:\n        return 'yes'\n    else:\n        return 'no'\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(is_valid_log(s))",
  "1202": "chocolates = input()\ncalories = {'D': 238, 'T': 244, 'M': 138, 'B': 279, 'C': 186}\nexercise_calories = {'Running': 50, 'Cycling': 5, 'Walking': 0.5}\n\ntotal_calories = sum(calories[ch] for ch in chocolates)\nrunning_distance = total_calories // exercise_calories['Running']\ntotal_calories -= running_distance * exercise_cal",
  "1203": "```python\ndef calculate_subsets(N, Q, queries):\n    MOD = 10**9 + 7\n    for i, k in queries:\n        result = (pow(2, N-1, MOD) * (N-k) * k) % MOD\n        print(result)\n        \ncalculate_subsets(3, 3, [(1, 2), (2, 1), (3, 2)])\n```",
  "1204": "```python\ndef min_cost(T, test_cases):\n    for case in test_cases:\n        S, R = case\n        N = len(S)\n        cost = 0\n        for i in range(N):\n            if S[i] != R[i]:\n                j = i\n                while j < N and S[j] != R[j]:\n                    j += 1\n                cost += j - i\n                i = j\n        print(cost)\n\nmin_cost(1, [('ad",
  "1205": "```python\ndef compute_F(S):\n    n = len(S)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            U = list(S)\n            for k in range(i, j+1):\n                if U[k] == '0':\n                    U[k] = '1'\n                else:\n                    U[k] = '0'\n            for k in range(n-1):\n                if U[k] == U[k",
  "1206": "```python\nfrom collections import Counter\nN1, N2, N3 = map(int, input().split())\nvoters = [input() for _ in range(N1+N2+N3)]\ncounts = Counter(voters)\nfinal_list = [voter for voter, count in counts.items() if count >= 2]\nfinal_list.sort()\nprint(len(final_list))\nfor voter in final_list:\n    print(voter)\n```",
  "1207": "```python\ndef min_road_cost(T, cities):\n    for city in cities:\n        population = city[1]\n        cost = sum(population) * sum(population)\n        print(cost)\n```",
  "1208": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = 1\n    for i in range(1, N+1):\n        result = (result * i) % MOD\n    print(result)",
  "1209": "```python\nn = int(input())\nfor _ in range(n):\n    v1, t1, v2, t2, v3, t3 = map(int, input().split())\n    if (v1 * t1 + v2 * t2) / (v1 + v2) == t3 and v1 + v2 >= v3 and min(t1, t2) < t3 <= max(t1, t2):\n        print(\"YES\")\n   ",
  "1210": "```python\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    direction, language = input().split()\n    if direction == 'L':\n        if language == 'H':\n            if X % 2 == 0:\n                print(X-1, 'E')\n            else:\n                print(X, 'H')\n        else:\n            if X % 2 == 0:\n                print(X, 'H')\n            else",
  "1211": "```python\ndef remove_abc_pairs(s):\n    while \"abc\" in s:\n        s = s.replace(\"abc\", \"\")\n    return s\n\nresult = [remove_abc_pairs(s) for s in input_strings]\n```",
  "1212": "```python\nfrom collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    counts = Counter(s)\n    max_count = max(counts.values())\n    print(len(s) - max_count)\n```",
  "1213": "```python\ndef reach_bottle_first(T, cases):\n    results = []\n    for case in cases:\n        X1, X2, X3, V1, V2 = map(int, case.split())\n        chef_time = (X3 - X1) / V1\n        kefa_time = (X2 - X3) / V2\n        if chef_time < kefa_time:\n            results.append('Chef')\n        elif chef_time > kefa_time:\n           ",
  "1214": "```python\ndef check_relative_position(M, N, Rx, Ry, moves):\n    x, y = 0, 0\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'R':\n            x += 1\n        elif move == 'L':\n            x -= 1\n        if x < 0 or x > M or y < ",
  "1216": "t = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    if any(ai >= x for ai in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "1217": "MOD = 10**9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 1\n    for i in range(n):\n        ans = (ans * (a[i] + 1)) % MOD\n    print((ans - 1) % MOD)",
  "1218": "```python\ndef calculate_salary(X, N):\n    last_day = N // X * X\n    total_salary = (last_day + X) * (N // X) // 2\n    return total_salary\n```",
  "1219": "```python\nT = 2\ntestcases = [(1, 10), (5, 2)]\n```",
  "1220": "```python\nfrom collections import defaultdict\nN, Q = map(int, input().split())\nprices = list(map(int, input().split()))\nbrands = list(map(int, input().split()))\nbrand_prices = defaultdict(list)\nfor i in range(N):\n    brand_prices[brands[i]].append(prices[i])\nfor _ in range(Q):\n    b, K = map(int, input().split())\n    preference = list(map(int, input().split()))\n    available_prices = []\n    for brand",
  "1221": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    X_f = int(input())\n    moves = 0\n    while X_f > 0:\n        P = int(math.sqrt(X_f))\n        X_f -= P * P\n        moves += 1\n    print(moves)\n```",
  "1222": "```python\nfrom collections import Counter\n\ndef count_anagramic_pairs(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub1 = Counter(s[i:j])\n            for k in range(i+1, len(s)):\n                for l in range(k+1, len(s)+1):\n                    sub2 = Counter(s[k:l])\n                    if sub1 == sub2:\n                        count += ",
  "1223": "```python\ndef min_total_distance(T, testcases):\n    results = []\n    for i in range(T):\n        N, L, A, B = testcases[i][:4]\n        snakes = testcases[i][4:]\n        min_distance = 0\n        for j in range(N):\n            min_distance += min(abs(snakes[j] - A), abs(snakes[j] + L - B))\n        results.append(str(min_distance))\n    return results\n```",
  "1225": "```python\nfrom collections import deque\n\ndef shortest_paths(T, cases):\n    for case in cases:\n        N, M = case[0], case[1]\n        graph = {i: [] for i in range(1, N+1)}\n        for i in range(M):\n            A, B, C = case[i+2]\n            graph[A].append((B, C))\n            graph[B].append((A, C))\n        dist = [float('inf')] *",
  "1227": "```python\ndef check_color_combination(test_cases):\n    results = []\n    for case in test_cases:\n        colors = case.split()\n        color_count = {}\n        for color in colors:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n        max_count = max(color_count.values())\n        if max_count >= 3:\n            results.append('YES')\n        else:\n            results.append('NO')\n   ",
  "1228": "def find_missing_point(T, test_cases):\n    result = []\n    for case in test_cases:\n        points = []\n        for i in range(4*case-1):\n            x, y = map(int, input().split())\n            points.append((x, y))\n        x_vals = [point[0] for point in points]\n        y_vals = [point[1] for point in points]\n        missing_x = max(set(x_vals), key=x_vals.count)\n        missing",
  "1229": "def can_tomu_win(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = test_cases[i][0], test_cases[i][1]\n        A = test_cases[i][2]\n        sorted_A = sorted(A)\n        for j in range(min(N, K)):\n            if A[j] < sorted_A[j]:\n                A[A.index(sorted_A[j])] = A[j]\n                A[j] = sorted_A[j]\n        if sum(A",
  "1230": "def check_gray_code(n, A):\n    xor_set = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = A[i] ^ A[j]\n            if xor_val in xor_set:\n                return \"Yes\"\n            xor_set.add(xor_val)\n    return \"No\"",
  "1231": "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    result = sum(int(digit) for digit in str(2**t))\n    print(result)",
  "1232": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    gates = [list(map(int, input().split())) for _ in range(n)]\n    p = 0.5\n    for gate in gates[::-1]:\n        if gate[0] == 1:\n            p = math.sqrt(p * p)\n        else:\n            p = 1 - math.sqrt((1 - p) * (1 - p))\n    print",
  "1233": "```python\ndef max_good_group(S):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(S)):\n        if S[i] == S[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n```",
  "1235": "def last_two_digits_of_5_power_n(n):\n    return pow(5, n, 100)",
  "1236": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    print(count)\n```",
  "1237": "```python\ndef max_profit_transformations(T, test_cases):\n    results = []\n    for case in test_cases:\n        A, B, C = map(int, case.split())\n        count = 0\n        while A > 0 or B >= C:\n            if B < C:\n                A -= 1\n                B += 100\n            B -= C\n            A, B = B, A\n            count += 1\n        results.append(str(count))\n    return",
  "1238": "```python\ndef possible_characters(T, numbers):\n    result = []\n    for number in numbers:\n        chars = set()\n        for i in range(len(number)-1):\n            for j in range(i+1, len(number)):\n                num1 = int(number[i])\n                num2 = int(number[j])\n                chars.add(chr(int(str(num1) + str(num2)))\n                chars.add(chr(int(str(num2) + str(num1)))\n        possible_chars = [chr(i) for",
  "1239": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        for j in range(i, 0, -1):\n            print(j, end='')\n        for j in range(1, K-i+1):\n            print(j, end='')\n        print()\n    for i in range(1, K+1):\n        for j in range(i, 0, -1):\n           ",
  "1240": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total_weight = sum((x-1)%6+1 for x in arr)\n    print(total_weight)",
  "1241": "def stone_piles_winner(T, testcases):\n    results = []\n    for i in range(T):\n        N, X = testcases[i][0]\n        piles = testcases[i][1]\n        remaining_piles = sorted(piles, reverse=True)[X:]\n        if sum(remaining_piles) % 2 == 0:\n            results.append('Jesse')\n        else:\n            results.append('Walter')\n    return results",
  "1242": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(sum(sorted(A)[:-1]))\n```",
  "1243": "```python\nfrom itertools import permutations\nfor _ in range(int(input())):\n    N = input().strip()\n    perms = permutations(N)\n    result = any(int(''.join(perm)) % 5 == 0 for perm in perms)\n    print(1 if result else 0)\n```",
  "1244": "```python\nMOD = 10**9 + 7\ndef infection_severity(N, passengers):\n    events = []\n    for b, d in passengers:\n        events.append((b, 1))\n        events.append((d, -1))\n    events.sort()\n    infection = 0\n    severity = 0\n    for mile, change in events:\n        severity = (severity + infection * (mile - prev_mile)) % MOD\n        infection += change\n        prev",
  "1245": "def generate_pattern(num):\n    result = ''\n    for i in range(1, num+1):\n        result += str(i)\n    return result\n\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = ''\n    for i in range(1, K+1):\n        pattern += generate_pattern(i)\n    print(pattern)",
  "1246": "```python\ndef race_ends(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        A = case[1]\n        B = case[2]\n        if max(A) < max(B):\n            results.append('YES')\n        else:\n            results.append('NO')\n    return results\n```",
  "1248": "def leading_digit_bases(T, nums):\n    def leading_digit_base(n):\n        count = 0\n        for b in range(2, int(n**0.5) + 1):\n            x = n\n            while x > 0:\n                if x % b != 1:\n                    break\n                x //= b\n            else:\n                count += 1\n        count += int(n > 1)\n        return count\n\n    results = [str(leading_digit_base",
  "1250": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = (6 * pow(3, N-1, MOD)) % MOD\n    print(result)",
  "1252": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef last_digit_of_prime_sum(n):\n    prime_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum",
  "1253": "```python\ndef infected_people(N, population, D, P):\n    infected = population.count('1')\n    for i in range(D):\n        if P[i] > 1:\n            if population[P[i]-2] == '1':\n                infected -= 1\n        if P[i] < N:\n            if population[P[i]] == '1':\n                infected -= 1\n    return infected\n```",
  "1254": "```python\ndef is_contest_balanced(N, P, participants):\n    cakewalk_count = 0\n    hard_count = 0\n    for p in participants:\n        if p <= P // 10:\n            hard_count += 1\n        elif p >= P // 2:\n            cakewalk_count += 1\n    if cakewalk_count == 1 and hard_count >= 2:\n        return \"yes\"\n    else:\n        return",
  "1255": "from collections import deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nfrom math import ceil, factorial, gcd\nfrom itertools import permutations, combinations\nfrom sys import setrecursionlimit\nfrom math import inf\nfrom collections import defaultdict\nfrom math import sqrt\n\ndef solve(s, k):\n    n = len(s)\n    t = sorted(s)[:k]\n    if len(t) < n:\n        t += 'a",
  "1256": "```python\ndef count_pairs(T, test_cases):\n    results = []\n    for i in range(T):\n        N = int(test_cases[i*2])\n        A = list(map(int, test_cases[i*2+1].split()))\n        count = 0\n        for j in range(N):\n            for k in range(j+1, N):\n                if A[j]*A[k] > A[j]+A[k]:\n                    count += 1\n        results.append(str(count))\n",
  "1257": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nfor _ in range(N):\n    T = int(input())\n    print(factorial(T))",
  "1258": "def min_time_to_multiple_of_9(N):\n    return str(sum(int(digit) for digit in N) % 9)",
  "1259": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = 0\n    for i in range(l, r+1):\n        if str(i)[-1] in ['2', '3', '9']:\n            count += 1\n    print(count)",
  "1261": "def build_network(T, cases):\n    result = []\n    for case in cases:\n        N, M = map(int, case.split())\n        if M < N - 1 or M > N * (N - 1) / 2:\n            result.append(\"-1 -1\")\n        else:\n            for i in range(1, N):\n                result.append(f\"{i} {i+1}\")\n            result.append(f\"{N} 1\")\n    return result",
  "1263": "```python\nfrom math import isqrt\n\ndef count_ways(N, K):\n    count = 0\n    for i in range(1, isqrt(N) + 1):\n        if N % i == 0:\n            if i ** K == N:\n                count += 1\n            if i != N // i and (N // i) ** K == N:\n                count += 1\n    return count\n\nT = int(input())\nfor _ in range(T",
  "1264": "```python\ndef max_food_units(N, M):\n    if N % (M+1) == 0:\n        return (N // (M+1)) * M\n    else:\n        return (N // (M+1)) * M + N % (M+1)\n```",
  "1265": "```python\ndef find_kth_magical_number(T, K):\n    return [2, 8]\n```",
  "1266": "```python\ndef predict_show(T, boards):\n    results = []\n    for b in boards:\n        if sum(dim % 2 for dim in b) % 2 == 0:\n            results.append(\"Football\")\n        else:\n            results.append(\"MasterChef\")\n    return results\n```",
  "1267": "from itertools import product\nN, M, K = map(int, input().split())\nP = [list(map(int, input().split())) for _ in range(M)]\nwords = [''.join(p) for p in product([chr(i + 97) for i in range(N)], repeat=M)]\nwords.sort(key=lambda x: (-sum(P[ord(c) - 97][i] for i, c in enumerate(x)), x))\nprint(words[K-1])",
  "1268": "```python\ndef calculate_money(n, m, x):\n    total_money = 0\n    for i in range(1, m+1):\n        t = x + (i-1)*n\n        total_money += max(0, (t - n) // m)\n    return str(total_money)\n\ndef calculate_library_income(test_cases):\n    results = []\n    for case in test_cases:\n        n, m, x = map(int, case.split())\n        if n ==",
  "1269": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    B.sort(reverse=True)\n    A.sort()\n    S = sum(2 * (A[i] * B[i]) ** 0.5 for i in range(N))\n    print(int(S))\n```",
  "1270": "```python\ndef smallest_number_of_boxes(T, cases):\n    results = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        heights = list(map(int, case[1].split()))\n        heights.sort(reverse=True)\n        i = 0\n        while i < N and heights[i] >= K:\n            i += 1\n        if i < 2:\n            results.append(\"-1\")\n        else:\n            results.append(str(i",
  "1271": "```python\nfrom collections import Counter\n\ndef count_binary_ones(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\ndef process_queries(Q, queries):\n    S = set()\n    result = []\n    for X in queries:\n        new_elements = {X}\n        for y in S:\n            if y != X:\n                new_elements.add(y ^ X)\n        S.update(new_elements)\n        counts",
  "1272": "for _ in range(int(input())):\n    x = int(input())\n    a = x\n    b = 0\n    while a & b != 0:\n        a >>= 1\n    print(a, x ^ a)",
  "1273": "```python\ndef min_time_to_hypnotize(T, cases):\n    result = []\n    for case in cases:\n        n, m = map(int, case[0].split())\n        haunted_houses = sum(row.count('*') for row in case[1:])\n        result.append(1 if haunted_houses > 0 else 0)\n    return result\n```",
  "1274": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = ''\n    for i in range(1, K+1):\n        for j in range(1, i+1):\n            pattern += str(j)\n    print(pattern)\n```",
  "1275": "def greatest_number_assigned(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = case[0], case[1]\n        positions = case[2:]\n        left = min(positions)\n        right = max(positions)\n        result = []\n        for i in range(N):\n            if i < left:\n                result.append(str(left - i))\n            elif i > right:\n                result.append(str(i - right))\n            else:\n                result.append('",
  "1276": "```python\ndef min_elements_to_insert(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, K = case[0]\n        array = case[1]\n        max_element = max(array)\n        if max_element < 2**K:\n            result.append(0)\n        else:\n            result.append(1)\n    return result\n```",
  "1277": "```python\ndef total_loss(T, cases):\n    result = []\n    for case in cases:\n        N = case[0]\n        total_loss = 0\n        for i in range(1, N+1):\n            price, quantity, discount = case[i]\n            increased_price = price + (price * discount / 100)\n            final_price = increased_price - (increased_price * discount / 100)\n            loss_per_unit = price - final_price\n            total_loss",
  "1278": "```python\ndef count_house_positions(M, N):\n    return ((M-1)*(N-1))//2\n```",
  "1279": "```python\ndef optimized_function(N, XY):\n    max_val = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if XY[i][0] != XY[j][0] and XY[j][0] != XY[k][0] and XY[k][0] != XY[i][0]:\n                    max_val = max(max_val, XY[i][1] + XY[j][1] + XY[k][1])\n",
  "1280": "```python\ndef min_operations_to_palindrome(s):\n    n = len(s)\n    operations = 0\n    for i in range(n//2):\n        operations += abs(ord(s[i]) - ord(s[n-1-i]))\n    return operations\n```",
  "1281": "```python\ndef is_rainbow_array(arr):\n    n = len(arr)\n    if n < 13 or arr[0] != 1 or arr[n-1] != 1:\n        return \"no\"\n    i, j = 1, n-2\n    while i < j:\n        if arr[i] != arr[j] or arr[i] > 7:\n            return \"no\"\n        if arr[i] != arr[i-1] and arr[i",
  "1282": "MOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n    L, R = map(int, input().split())\n    result = 0\n    while L > 0 and L & R < R:\n        msb = 1 << (L.bit_length() - 1)\n        result += msb\n        L -= msb\n    print(result % MOD)",
  "1283": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(N):\n    for i in range(2, N):\n        if is_prime(i) and is_prime(N - i):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nT = int(input())\nfor _",
  "1284": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    if len(set(scores)) == 1:\n        print(-1)\n    else:\n        x = scores[n//4]\n        y = scores[n//2]\n        z = scores[3*n//4]\n        print(x, y, z)",
  "1285": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    max_trace = 0\n    for r in range(N):\n        for c in range(N):\n            for l in range(1, N - max(r, c)):\n                submatrix = [A[i+r][j+c] for i in range(l) for j in range(l)]\n                max",
  "1287": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    M = sum(1 if c in 'aeiou' else 0 for c in s) % (10**9 + 7)\n    print(M)\n```",
  "1288": "```python\nfrom collections import defaultdict\n\ndef min_employees_to_inform(T, testcases):\n    result = []\n    for i in range(T):\n        N, M = testcases[i][0], testcases[i][1]\n        graph = defaultdict(list)\n        for j in range(M):\n            u, v = testcases[i][j+2]\n            graph[u].append(v)\n            graph[v].append(u)\n        visited = set()\n        count = 0\n       ",
  "1289": "```python\ndef count_weight_combinations(n):\n    return 2**(n-1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_weight_combinations(n))\n```",
  "1290": "n = input()\nif len(n) == 1:\n    print(\"1\")\nelif len(n) == 2:\n    print(\"2\")\nelif len(n) == 3:\n    print(\"3\")\nelse:\n    print(\"More than 3 digits\")",
  "1293": "```python\nimport numpy as np\n\ndef find_initial_sequence(N, Q, matrix, queries):\n    A = [0] * N\n    for i in range(N):\n        A[i] = matrix[i][0]\n\n    print(' '.join(map(str, A)))\n\n    for query in queries:\n        p = query[0]\n        F = query[1:]\n        A[p-1] = F[p-1]\n        print(' '.join(map(str, A)))\n```",
  "1295": "```python\ndef fibonacci_sum(N, K):\n    if N <= 1:\n        return N\n    a, b = 0, 1\n    total = 1\n    for _ in range(2, N+1):\n        a, b = b, (a + b) % K\n        total = (total + b) % K\n    return total\n\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input",
  "1297": "```python\nT = int(input())\nfor _ in range(T):\n    A, B = map(int, input().split())\n    if A < B:\n        print('<')\n    elif A > B:\n        print('>')\n    else:\n        print('=')\n```",
  "1298": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    speeds = list(map(int, input().split()))\n    standard_speed = speeds[0]\n    count = sum(1 for speed in speeds[1:] if speed > standard_speed)\n    print(count)",
  "1299": "```python\ndef max_dishes_type(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        dishes = list(map(int, test_cases[i+1].split()))\n        max_count = 0\n        max_type = 0\n        for dish_type in set(dishes):\n            count = dishes.count(dish_type)\n            if count > max_count:\n                max_count = count\n",
  "1300": "from math import gcd\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    result = sum(arr[:K])\n    for i in range(1, N-K+1):\n        result = max(result, sum(arr[i:i+K]))\n    print(result)",
  "1301": "def largest_number(N):\n    sorted_digits = sorted(str(N), reverse=True)\n    return int(''.join(sorted_digits))",
  "1302": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(n**0.5))\n```",
  "1303": "MOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n    N, K, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [0] * (M + 1)\n    dp[0] = 1\n    for i in range(N):\n        new_dp = dp[:]\n        for j in range(1, M + 1):\n            new_dp[j] =",
  "1304": "from itertools import permutations\nN, K = map(int, input().split())\npermutations_list = [list(map(int, input().split())) for _ in range(K)]\nfor perm in permutations_list:\n    next_perm = permutations(perm)\n    print(' '.join(map(str, next(next_perm))))",
  "1305": "```python\ndef is_safe(arrangement):\n    for i in range(len(arrangement)):\n        for j in range(len(arrangement[0])):\n            if arrangement[i][j] == 1:\n                if i > 0 and j > 0 and arrangement[i-1][j-1] == 1:\n                    continue\n                if i > 0 and j < len(arrangement[0])-1 and arrangement[i-1][j+1] == 1:\n                    continue",
  "1306": "def reorder_prefix_suffix(T, strings):\n    result = []\n    for s in strings:\n        if s.count('L') >= 1 and s.count('T') >= 1 and s.count('I') >= 1 and s.count('M') >= 1 and s.count('E') >= 1:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result",
  "1307": "```python\ndef winning_play_count(T, cases):\n    results = []\n    for case in cases:\n        N, K = map(int, case.split())\n        result = (K ** (N - 1)) % 1000000007\n        results.append(str(result))\n    return results\n```",
  "1308": "def is_valid_password(s):\n    if len(s) != len(set(s)) and s.isalnum():\n        print(\"Invalid\")\n    else:\n        print(\"Valid\")",
  "1309": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        print('*'*(K-i), end='')\n        for j in range(i, 0, -1):\n            print(j, end='')\n        print()\n```",
  "1310": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    cost = 0\n    stamps = 0\n    for cup in s:\n        if cup == 'M':\n            cost += 3\n        else:\n            cost += 4\n        stamps += 1\n        if stamps == 6:\n            stamps = 0\n            cost -= min(cost, 4)\n    print(cost)\n```",
  "1311": "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    for i in range(1, n+1):\n        if k > 0:\n            print(i if i % 2 == 1 else -i, end=' ')\n            k -= 1\n        else:\n            print(i if i % 2 == 0 else -i, end=' ')\n    print()",
  "1313": "```python\ndef find_minimal_divisor(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        x = 2\n        for num in A:\n            x = max(x, num)\n        for num in A:\n            while x % num != 0:\n                x += 1\n        if all",
  "1315": "from collections import Counter\nn = int(input())\nquestions = [input().split() for _ in range(n)]\nunique_sets = set(Counter(tuple(sorted(q)) for q in questions).values())\nprint(len(unique_sets))",
  "1318": "```python\ndef count_valid_triangles(T, cases):\n    results = []\n    for i in range(T):\n        L, K = cases[i]\n        if K > L:\n            results.append(0)\n        else:\n            results.append((K-1)*(K-2)//2)\n    return [\"Case {}: {}\".format(i+1, results[i]) for i in range(T)]\n```",
  "1319": "```python\nfrom collections import deque\n\nN, M = map(int, input().split())\ncitizens = deque()\nwealth = []\nfor _ in range(N+M):\n    x = int(input())\n    if x == -1:\n        print(max(citizens))\n    else:\n        citizens.append(x)\n```",
  "1320": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print('A')\n    else:\n        print('B')\n```",
  "1321": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = N * (N + 1) * (N + 2) // 6\n    print(result)\n```",
  "1322": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    qualified_teams = sum(1 for score in scores if score >= scores[K-1])\n    print(qualified_teams)\n```",
  "1324": "def max_gcd(N, K):\n    if K < N:\n        print(-1)\n    else:\n        print(K) if N % K == 0 else print(1)",
  "1325": "for _ in range(int(input())):\n    a, b, c, d = map(int, input().split())\n    x = (a + c - b) // 2\n    y = (a + b - c) // 2\n    z = (b + c - a) // 2\n    print(x, y, z)",
  "1326": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    F = list(map(int, input().split()))\n    total_distance = 0\n    current_gas = 0\n    for i in range(1, N):\n        current_gas += F[i-1]\n        total_distance += 1\n        if current_gas < i:\n            break\n    print(total_distance)\n```",
  "1327": "```python\nfrom collections import deque\n\ndef min_cost_max_length(N, Q, cities, queries):\n    n = len(cities)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + cities[i]\n\n    def f(x, y):\n        return abs(cities[y - 1] - cities[x - 1]) + y - x\n\n    def check_cost(cost",
  "1328": "def min_operations_to_lucky_number(N):\n    count = 0\n    while '4' in N or '7' in N:\n        count += 1\n        N = str(int(N) + 1)\n    return count",
  "1330": "```python\ndef max_states_won(T, testcases):\n    results = []\n    for i in range(T):\n        A, B = testcases[i][0]\n        c = testcases[i][1]\n        d = testcases[i][2]\n        c_sorted = sorted(enumerate(c), key=lambda x: x[1], reverse=True)\n        d_sorted = sorted(enumerate(d), key=lambda x: x[1], reverse=True)\n        states_won = 0",
  "1331": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    X, K = map(int, input().split())\n    print(X / (2 ** math.floor(math.log2(K))))\n```",
  "1332": "```python\ndef shortest_path_length(i, j):\n    return len(bin(i ^ j)) - 3\n```",
  "1333": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    result = 1\n    for i in range(n):\n        result = (result * (b[i] + 1)) % (10**9 + 7)\n    print(result)\n```",
  "1334": "```python\nN = int(input())\nminutes = list(map(int, input().split()))\ndp = [0, minutes[0], minutes[0] + minutes[1]]\nfor i in range(3, N+1):\n    dp.append(min(dp[i-1], dp[i-2]) + minutes[i-1])\nprint(min(dp[-1], dp[-2]))\n```",
  "1335": "from collections import Counter\nN = int(input())\na = list(map(int, input().split()))\ncounter = Counter(a)\nresult = max(counter.values())\nif result % 2 == 0:\n    print(result // 2)\nelse:\n    print(result // 2 + 1)",
  "1336": "```python\ndef count_digits_in_range(start, end):\n    result = [0] * 10\n    for i in range(start, end + 1):\n        for digit in str(i):\n            result[int(digit)] += 1\n    return result\n\ncases = ['10 15', '912 912', '900 999']\noutput = []\nfor i, case in enumerate(cases, 1):\n    if case == '':\n        break\n    start, end =",
  "1337": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    P = list(map(int, input().split()))\n    R = int(input())\n    min_candies = (sum(P) - N*R)\n    print(min_candies)\n```",
  "1338": "```python\nn = int(input().split()[0])\nfor _ in range(n):\n    A, E = map(float, input().split())\n    print('{:.2f}'.format(A * (10 ** E)))\n```",
  "1339": "for _ in range(int(input())):\n    k = int(input())\n    if k % 2 == 0:\n        print(k // 2 * 9)\n    else:\n        print(k // 2 * 10)",
  "1340": "```python\ndef max_contiguous_subsequence_sum(arr):\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n   ",
  "1341": "```python\ndef count_ways_to_remove_subsequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        A = case[1]\n        count = 0\n        current_count = 1\n        for i in range(1, N):\n            if A[i] > A[i-1]:\n                current_count += 1\n            else:\n                count += current_count * (current_count + 1) // ",
  "1342": "```python\nfrom math import ceil\nT = int(input())\nfor _ in range(T):\n    N, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    days = 0\n    for a in A:\n        while x < a:\n            x *= 2\n            days += 1\n            if x == 0:\n                break\n        if x >= a:\n            x = 2 * a\n",
  "1343": "```python\ndef is_special_dish(dishes):\n    result = []\n    for dish in dishes:\n        if len(dish) % 2 == 0 and dish[:len(dish)//2] == dish[len(dish)//2:]:\n            result.append('YES')\n        elif dish[:-1] == dish[1:] or dish[:-2] == dish[2:]:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result\n```",
  "1344": "def smallest_sum(arr):\n    arr.sort()\n    return arr[0] + arr[1]",
  "1345": "```python\nn = int(input())\nfor _ in range(n):\n    encoded_message = input()\n    decoded_message = ''.join(chr(int(encoded_message[i:i+2])) for i in range(0, len(encoded_message), 2))\n    print(decoded_message)\n```",
  "1346": "```python\ndef count_numbers_with_weight(N, W):\n    MOD = 10**9 + 7\n    if W < 0:\n        W = -W\n    if W > 9 * (N - 1):\n        return 0\n    if W == 0:\n        return 1 if N == 1 else 0\n    dp = [[0] * (9 * (N - 1) + 1) for _ in range(N +",
  "1347": "from collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef news_feed_ordering(N, M, special_friends, posts):\n    special_friends_set = set(special_friends)\n    special_posts = []\n    other_posts = []\n    for post in posts:\n        friend, popularity, content = post\n        if friend in special_friends_set:\n            heappush(special_posts, (-popularity, content))\n        else:\n            heappush(other_posts, (-popularity",
  "1349": "```python\nT = int(input())\nfor _ in range(T):\n    N = input()\n    if '0' in N or sum(map(int, N)) % 3 != 0:\n        print(0)\n    else:\n        print(1)\n```",
  "1351": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = [0] * n\n    for num in arr:\n        if result[num-1] == 0:\n            result[num-1] = num\n    print(' '.join(map(str, result)))",
  "1352": "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    contributions = list(map(int, input().split()))\n    shades = Counter(contributions)\n    for shade, count in sorted(shades.items()):\n        print(f\"{shade}: {count}\")",
  "1353": "def is_feasible(T, test_cases):\n    results = []\n    for case in test_cases:\n        n = int(case[0])\n        positions = [list(map(int, x.split())) for x in case[1:]]\n        feasible = True\n        for i in range(n-1):\n            t1, x1, y1, X1, Y1 = positions[i]\n            t2, x2, y2, X2, Y2 = positions[i+",
  "1354": "```python\ndef count_ways_to_color_tree(n, k, edges):\n    MOD = 10**9 + 7\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n\n    def dfs(v, p, c):\n        ways = 1\n        for u in adj[v]:\n            if u != p:\n                ways *= (k",
  "1355": "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    output = []\n    for i in range(n):\n        if arr[i] <= n:\n            output.append(arr[i] + arr[arr[i]-1])\n        else:\n            while arr[i] >= n:\n                arr[i] //= 2\n            output.append(arr[arr[i]-1])\n    print(*output)",
  "1356": "MOD = 1000000007\ndp = [0] * 1001\ndp[0] = 1\nfor i in range(1, 1001):\n    for j in range(1, i + 1):\n        dp[i] = (dp[i] + dp[i - j]) % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])",
  "1357": "```python\ndef can_serve_all(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        coins = test_cases[i][1]\n        change_5 = 0\n        change_10 = 0\n        possible = True\n        for coin in coins:\n            if coin == 5:\n                change_5 += 1\n            elif coin == 10:\n                if change_5 > 0:\n",
  "1358": "```python\ndef min_letters_to_remove(word, k):\n    letter_count = {}\n    for letter in word:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    min_count = min(letter_count.values())\n    if max_count - min_count <= k:\n        return 0\n    else:\n        return len(word) - (min_count + k",
  "1359": "def min_time_to_equal_temperatures(T, testcases):\n    result = []\n    for i in range(0, len(testcases), 2):\n        N = int(testcases[i])\n        temperatures = list(map(int, testcases[i+1].split()))\n        odd_count = sum(1 for temp in temperatures if temp % 2 != 0)\n        result.append(odd_count)\n    return result",
  "1360": "```python\ndef min_ugliness(T, strings):\n    result = []\n    for i in range(0, len(strings), 2):\n        s1 = strings[i]\n        s2 = strings[i+1]\n        common = set(s1) & set(s2)\n        min_ugliness = float('inf')\n        for c in common:\n            idx1 = s1.index(c)\n            idx2 = s2.index(c)\n            petal1 = len(s1",
  "1361": "n, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nfor _ in range(k):\n    prefix_sum = [0] * n\n    prefix_sum[0] = A[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + A[i]\n    A = prefix_sum\n\nA = [x % (10**9 + 7) for x in A]\nprint(*",
  "1363": "t = int(input())\nfor _ in range(t):\n    n, d = map(int, input().split())\n    y = int(str(d) * n)\n    p = 23\n    y_str = str(y)\n    m = len(y_str)\n    result = sum(int(y_str[i]) * (p ** (m - i - 1)) for i in range(m)) % (10**9 + 7)\n    print(result)",
  "1364": "```python\ndef min_checkpoints_and_moves(T, cases):\n    results = []\n    for case in cases:\n        N, c = map(int, case[0].split())\n        x_coordinates = [int(x) for x, y in case[1:]]\n        y_coordinates = [int(y) for x, y in case[1:]]\n        x_mod_c = [x % c for x in x_coordinates]\n        y_mod_c = [y % c for y in",
  "1365": "def count_unique_strings(s):\n    if 'c' in s or 'k' in s:\n        return '0'\n    else:\n        return str(pow(2, s.count('f'), 10**9+7))",
  "1366": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n    print(max_sum)\n```",
  "1367": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(node, parent, graph, dp, ans):\n    s = 1\n    c = 0\n    for child, cost in graph[node]:\n        if child != parent:\n            dfs(child, node, graph, dp, ans)\n            s += dp[child]\n            c += dp[child] + cost\n    dp[node] = c / s\n    ans[0] += 2 *",
  "1368": "t = int(input())\nfor _ in range(t):\n    h, x = map(int, input().split())\n    print(\"Yes\" if h >= x else \"No\")",
  "1369": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef victory_number(n):\n    prime_sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum\n\nT = int",
  "1370": "```python\nfrom itertools import permutations\n\ndef process_number(num):\n    num_str = str(num)\n    result = []\n    for perm in permutations(num_str):\n        result.append(int(''.join(perm)))\n    return result\n\ndef distinct_numbers(K, N):\n    num = K\n    for _ in range(N):\n        num = process_number(num)\n    return len(set(num))\n\nT = 1\ntestcases = [('123', 5)]\n\nfor i in range(T):\n    K",
  "1371": "```python\ndef wolverine_minions(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, K = map(int, case[0].split())\n        minions = list(map(int, case[1].split()))\n        wolverine_count = sum(1 for m in minions if (m + K) % 7 == 0)\n        result.append(wolverine_count)\n    return result\n```",
  "1372": "def closest_truck(data):\n    results = []\n    for i in range(1, len(data), 2):\n        x1, y1, x2, y2 = map(int, data[i].split())\n        distance_a = abs(x1) + abs(y1)\n        distance_b = abs(x2) + abs(y2)\n        if distance_a < distance_b:\n            results.append('A IS CLOSER')\n        else:\n            results.append('B IS CLO",
  "1373": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    flavors = [0] * (k + 1)\n    left, right, ans = 0, 0, 0\n    while right < n:\n        flavors[a[right]] += 1\n        while min(flavors) > 0:\n            flavors[a[left]] -= 1\n            left +=",
  "1374": "```python\nT = int(input())\nfor _ in range(T):\n    F1, F2, R1, R2, R3, R4 = map(int, input().split())\n    p1, p2, p3, p4 = map(float, input().split())\n    \n    profit1 = p1 * R1 + (1 - p1) * R2 - F1\n    profit2 = p3 * R3 + (1 - p3)",
  "1375": "def reverse_integer(T, integers):\n    result = []\n    for num in integers:\n        result.append(int(str(num)[::-1]))\n    return result",
  "1377": "```python\ndef calculate_average_difference(data):\n    num_data_sets = int(data[0])\n    results = []\n    for i in range(1, num_data_sets + 1):\n        today_high, today_low, normal_high, normal_low = map(int, data[i].split())\n        avg_diff = ((today_high - normal_high) + (today_low - normal_low)) / 2\n        if avg_diff < 0:\n            results.append(f\"{abs(avg_diff):.",
  "1378": "```python\ndef nuclear_reactor(A, N, K):\n    chambers = [0] * K\n    for _ in range(A):\n        chambers[0] += 1\n        i = 0\n        while chambers[i] > N:\n            chambers[i] -= N + 1\n            i += 1\n            if i == K:\n                break\n            chambers[i] += 1\n    return chambers\n```",
  "1379": "from collections import Counter\ndef encrypt_string(s):\n    letter_count = Counter(s)\n    encrypted_string = ''.join([f\"{letter}{count}\" for letter, count in letter_count.items()])\n    return encrypted_string",
  "1380": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n*(n-1))//2)",
  "1381": "def max_distance(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N, K, D = map(int, test_cases[i].split())\n        X = list(map(int, test_cases[i+1].split()))\n        L = list(map(int, test_cases[i+2].split()))\n        max_dist = 0\n        last_switch = -1\n        current_lane = 1\n        for j in range(N",
  "1382": "def minimal_cost_to_make_all_positive(N, array, X):\n    min_val = min(array)\n    cost = 0\n    for num in array:\n        if num < 0:\n            cost += abs(num - min_val)\n    print(cost * X)",
  "1383": "```python\ndef packing_cost(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, k1, k2 = case[0]\n        P1, P2, P3, P4 = case[1]\n        total_cost = 0\n        for i in range(k1, k2+1):\n            acid_count = i // 2\n            base_count = i // 3\n            neutral_count = i // 6\n           ",
  "1384": "```python\ndef max_pizza_time(T, cases):\n    result = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        A = case[1]\n        max_pizza = 0\n        count = 0\n        for i in range(N):\n            if A[i] == '0':\n                count += 1\n            if i >= K:\n                if A[i-K] == '0':\n                    count -= 1",
  "1386": "```python\ndef calculate_probability_sum(N, M):\n    return float(N + M - 1)\n```",
  "1389": "```python\ndef reverse_words(lines):\n    return [' '.join(line.strip('.').split()[::-1]) for line in lines[::-1] if line.strip()]\n```",
  "1390": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    print(\"{:.10f}\".format((q*(n+1))/(n-q+1)))\n```",
  "1391": "```python\ndef max_customers_dining(T, cases):\n    result = []\n    for case in cases:\n        N, K = case[0], case[1]\n        customers = case[2:]\n        customers.sort(key=lambda x: x[1])\n        compartments = [0] * (K + 1)\n        count = 0\n        for customer in customers:\n            for i in range(customer[2], 0, -1):\n                if compartments[i] ==",
  "1392": "def sum_of_numbers(X, Y):\n    return X + Y",
  "1393": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    speeds = list(map(int, input().split()))\n    max_speed = float('inf')\n    count = 0\n    for speed in speeds:\n        if speed <= max_speed:\n            count += 1\n            max_speed = speed\n    print(count)\n```",
  "1394": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = ((N**0.5)//1)**2 % 1000000007\n    print(int(result))\n```",
  "1395": "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    diff = abs(a - b)\n    factors = [i for i in range(1, int(diff**0.5)+1) if diff % i == 0]\n    factors += [diff//i for i in factors if i*i != diff]\n    result = sum(1 for f in factors if f > 1 and pow(a, f, diff) == pow(b",
  "1396": "```python\ndef can_move_to_discourse(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, X, Y = map(int, case.split())\n        if (N - 1) % X == 0 and (M - 1) % Y == 0:\n            results.append(\"Chefirnemo\")\n        elif N >= 2 and M >= 2 and (N - 2) % X == 0 and (",
  "1397": "```python\nfrom bisect import bisect_left\n\ndef find_min_M(N, A):\n    lis = []\n    for a in A:\n        pos = bisect_left(lis, a)\n        if pos == len(lis):\n            lis.append(a)\n        else:\n            lis[pos] = a\n    return len(lis)\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_l",
  "1398": "```python\ndef largest_subsequence_size(T, strings):\n    results = []\n    for string in strings:\n        distinct_chars = set(string)\n        results.append(len(distinct_chars))\n    return results\n```",
  "1400": "def min_max_sum(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, L, R = map(int, case.split())\n        if L == 1:\n            min_sum = N\n        else:\n            min_sum = (2 ** L) - 2 + (N - L)\n        max_sum = (2 ** R) - 1 + (N - R) * (2 ** (R - 1))\n        results.append((min",
  "1401": "def max_chocolates(n, k, prices):\n    prices.sort()\n    count = 0\n    for price in prices:\n        if k >= price:\n            k -= price\n            count += 1\n        else:\n            break\n    return count",
  "1402": "```python\ndef add(A, B):\n    count = 0\n    while int(B, 2) > 0:\n        U = bin(int(A, 2) ^ int(B, 2))[2:]\n        V = bin(int(A, 2) & int(B, 2))[2:]\n        A = U\n        B = bin(int(V, 2) << 1)[2:]\n        count += 1\n    return count\n```",
  "1403": "```python\ndef numDecodings(s):\n    MOD = 10**9 + 7\n    a, b, c = 0, 1, 0\n    for ch in s:\n        c = b * (ch > '0')\n        c += a * (9 < int(s[i-1:i+1]) < 27)\n        a, b = b, c % MOD\n    return b\n```",
  "1404": "```python\ndef min_balloons_to_take_out(R, G, B, K):\n    max_color = max(R, G, B)\n    total_balloons = R + G + B\n    remaining_balloons = total_balloons - max_color\n    if max_color >= K:\n        return remaining_balloons + K - 1\n    else:\n        return total_balloons\n```",
  "1405": "```python\nimport math\ndef count_sabotages_at_level_5(N):\n    result = 0\n    for i in range(1, N+1):\n        if math.gcd(i, N) == i:\n            result += 1\n    return result\n```",
  "1406": "```python\nfrom sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for _ in range(q):\n        p = int(stdin.readline())\n        even_count = sum(bin(p ^ ai).count('1') % 2 == 0 for ai in a)\n        odd_count = n - even_count\n        stdout.write(f\"{",
  "1408": "```python\ndef count_good_subsets(a, b):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == '1' and b[i] == '2':\n            count += 1\n        elif a[i] == '2' and b[i] == '1':\n            count += 2\n    return pow(2, count, 10**9 + 7)\n\nt = int(input())\nfor _",
  "1409": "```python\ndef count_ones(n):\n    return bin(n).count('1')\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(count_ones(N))\n```",
  "1410": "```python\nfrom math import comb\n\ndef probability(S, N, M, K):\n    total_ways = comb(S, N)\n    favorable_ways = comb(M-1, K) * comb(S-M, N-K)\n    return favorable_ways / total_ways\n\nT = int(input())\nfor _ in range(T):\n    S, N, M, K = map(int, input().split())\n    print(\"{:.6f}\".format(probability(S, N, M",
  "1411": "```python\nimport math\ndef meeting_count(X, R, A, B):\n    distance = 2 * math.pi * R * X\n    relative_speed = A - B\n    time_taken = distance / relative_speed\n    meetings = time_taken / (2 * math.pi * R)\n    return int(meetings)\n```",
  "1412": "```python\ndef find_real_password(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        rules = {}\n        for j in range(i+1, i+1+N):\n            ci, pi = test_cases[j].split()\n            rules[ci] = pi\n        S = test_cases[i+N+1]\n        real_password = ''\n        for char in S:\n            if char",
  "1415": "```python\ndef is_palindrome_possible(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            if s[i + 1:n - i] == s[i + 1:n - i][::-1] or s[i:n - i - 1] == s[i:n - i - 1][::-1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n"
}