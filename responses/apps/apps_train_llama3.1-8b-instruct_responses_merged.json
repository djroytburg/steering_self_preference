{
  "1": "import sys\ninput = sys.stdin.readline\n\nq = int(input())\nfor _ in range(q):\n    n, m, k = map(int, input().split())\n    ans = -1\n    if k < n+m:\n        print(-1)\n        continue\n    if k == n+m:\n        print(max(n, m))\n        continue\n    if k % 2 == n % 2 == m % 2 == 1:\n        ans = (k - 3",
  "3": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    for i in range(k):\n        a[0] += a[1]\n        a.pop(1)\n    print(a[0] - a[-1])",
  "4": "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.insert(0, 0)\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    for i in range(1, n + 1):\n        left[p[i]] = i\n    for i in range(n, 0, -1):\n        right[p[i]] = i\n    ans =",
  "5": "```python\nfrom collections import defaultdict\n\ndef find_permutations():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        seen = defaultdict(int)\n        for num in a:\n            seen[num] += 1\n        if any(count > 1 for count in seen.values()):\n            print(0)\n            continue\n        l1 = 0\n        while a[l1] != n -",
  "6": "from collections import deque\n\ndef solve():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    indegree = [0] * (n + 1)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        indegree[v] += 1\n    queue = deque([i for i in range(1, n + 1)",
  "8": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    w = s.count('W')\n    l = s.count('L')\n    if w >= n:\n        print(n)\n        return\n    if k >= l:\n        print(n)\n        return\n    ans = 0\n    i = 0\n    while i < n and k > 0 and s[i] == 'L':\n        i += 1\n        k",
  "9": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    i = 0\n    while i < n:\n        cnt = 0\n        while i < n and s[i] == '1':\n            cnt += 1\n            i += 1\n        if cnt % 2 == 1:\n            ans += cnt\n        i += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n   ",
  "10": "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            ans.append(p[i])\n        elif p[i] < p[i - 1] and p[i] < p[i + 1]:\n            ans.append(p[i])\n   ",
  "12": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > b[i] and -1 in a or a[i] < b[i] and 1 in a:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "13": "t = int(input())\n\nfor _ in range(t):\n    n, g, b = map(int, input().split())\n    min_days = (n + 1) // 2\n    days_in_good_season = min_days // (g // (b + g)) if g // (b + g) else min_days\n    days_in_bad_season = min_days - days_in_good_season\n    result = days_in_good_season * (b + g) + max(0,",
  "14": "def check_square(a1, b1, a2, b2):\n    return \"Yes\" if (a1 == b1 == a2 or a1 == b1 == b2 or a1 == a2 == b1 or a1 == a2 == b2 or\n                     a1 == b2 == a2 or a1 == b2 == b1 or a2 == b1 == b2 or a2 == b1 == a1 or\n                     a2",
  "15": "t = int(input())\n\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    area = min(a - x, x) * min(b - y, y)\n    print(2 * area + min(a, b))",
  "17": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if a[i] == a[k] and a[j] == a[l]:\n                        ans += 1\n    print(ans)\n\nt = int(input",
  "18": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max(math.sin(math.pi / n), math.cos(math.pi / (2 * n))) ** -1)",
  "19": "from collections import defaultdict\nfor _ in range(int(input())):\n    n,k,d = map(int,input().split())\n    a = list(map(int,input().split()))\n    mp = defaultdict(int)\n    for i in range(d-1,n):\n        mp[a[i]]+=1\n        if i>=d-1:\n            mp[a[i-d]]-=1\n            if mp[a[i-d]]==0:\n                del mp[a[i-d]]\n        print(len(mp)+1)",
  "20": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    customers = []\n    for _ in range(n):\n        t, l, h = map(int, sys.stdin.readline().split())\n        customers.append((t, l, h))\n\n    left, right = m, m\n    for t, l, h in customers:\n        if left < l or right > h:\n            print(\"NO\")\n            return\n        left =",
  "21": "def find_k(S):\n    S = set(S)\n    for k in range(1, 1024):\n        if S == set(s ^ k for s in S):\n            return k\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    print(find_k(S))",
  "22": "def minDigit(n):\n    return min(int(digit) for digit in str(n))\n\ndef maxDigit(n):\n    return max(int(digit) for digit in str(n))\n\nfor _ in range(int(input())):\n    a, k = map(int, input().split())\n    for _ in range(k - 1):\n        a += minDigit(a) * maxDigit(a)\n    print(a)",
  "23": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    voters = []\n    for _ in range(n):\n        m, p = map(int, input().split())\n        voters.append((m, p))\n    voters.sort()\n    pq = []\n    cost = 0\n    for m, p in voters:\n        if m < len(pq):\n            heapq.heappush(pq, -heapq.heappop(pq))\n            cost -= p\n",
  "24": "t = int(input())\n\nfor _ in range(t):\n    d = int(input())\n    if d == 0:\n        print(\"Y 0.000000 0.000000\")\n    elif d == 1:\n        print(\"Y 1.000000 0.000000\")\n    elif d == 4:\n        print(\"Y 2.000000 2.000000\")\n    elif d == 5:\n        print(\"Y 3.618033 ",
  "26": "def solve(n, m):\n    if n == 1 or m == 1:\n        return \"YES\"\n    if n % 2 == 0 and m % 2 == 0:\n        return \"YES\"\n    if n % 2 == 1 and m % 2 == 1:\n        return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(s",
  "27": "from collections import defaultdict\nimport math\nimport heapq\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for x in a:\n        while x % 2 == 0:\n            d[x] += 1\n            x //= 2\n    h = []\n    for x in d:\n        heapq.heappush(h, (d[x], x))\n    ans = 0\n    while h:\n",
  "29": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    last = defaultdict(lambda: n)\n    ans = [-1] * n\n    for i in range(n):\n        last[a[i]] = i\n        for j in range(n):\n            if last[a[j]] < i:\n                last[a[j]] = n\n        mn = n\n        for j in range(n):\n            if last[j",
  "30": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            cnt += 1\n    print((cnt + 1) // 2)",
  "31": "def solve(s):\n    x, y = 0, 0\n    visited = set()\n    time = 0\n    for i in range(len(s)):\n        if (x, y) in visited:\n            time += 1\n        else:\n            time += 5\n            visited.add((x, y))\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s",
  "32": "def solve():\n    n = int(input())\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 1\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "33": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    for i in range(n - 1, 1, -1):\n        print(i, i - 1)",
  "34": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n >= 7:\n        print(9)\n    elif n >= 5:\n        print(8)\n    elif n >= 4:\n        print(7)\n    elif n >= 3:\n        print(6)\n    elif n >= 2:\n        print(5)\n    elif n >= 1:\n        print(4)\n    else:\n        print(3)",
  "35": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    e = list(map(int, input().split()))\n    e.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        cnt = 0\n        while i < n and e[i] <= n - i + 1:\n            cnt += 1\n            i += 1\n        ans += cnt // e[i - 1]\n    print(ans)",
  "36": "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nq = list(map(int, input().split()))\n\nprefix_sum = [0]\nfor num in a:\n    prefix_sum.append(prefix_sum[-1] + num)\n\nfor worm in q:\n    left, right = 0, n + 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if prefix_sum[mid] >= worm",
  "38": "t = int(input())\n\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if max(a) > max(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "39": "def solve():\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'A':\n            if p >= a * (n - i - 1):\n                ans = i + 1\n                break\n        else:\n            if p >= b * (n - i - 1",
  "40": "from collections import defaultdict\nimport sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i, x in enumerate(a):\n        d[x].append(i)\n    ans = 0\n    prev = 0\n    for x in sorted(d.keys()):\n        if d[x][0] < prev:\n            ans += 1\n        prev = d[x][-1]\n",
  "42": "def f(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            t = int(s[i:j+1], 2)\n            if t > j - i + 1:\n                break\n            if t == j - i + 1:\n                ans += 1\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(f(s",
  "43": "import heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pq = []\n    for i in range(n):\n        heapq.heappush(pq, a[i])\n    ans = 0\n    for i in range(n):\n        ans += b[i]\n        heapq.heappush(pq, -b[i])\n    while pq:\n        ans = min",
  "44": "def solve(n):\n    ans = []\n    for i in range(1, 4 * n + 1, 2):\n        if i % 2 == 0:\n            ans.append(i)\n        else:\n            for j in ans:\n                if j % 2 == 0 and i % j == 0:\n                    break\n            else:\n                ans.append(i)\n    return ' '.join(map(str, ans))\n\nt = int(input())\nfor _ in range(t):\n",
  "47": "def solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    max1, max2 = 0, 0\n    for i in range(n):\n        max1 = max(max1, a[i])\n        max2 = max(max2, max1 - a[i])\n    print(max1 + max2)\n\nfor _ in range(int(input())):\n    solve()",
  "48": "t = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    print((k * (y + 1) - 1) // (x - 1) + k)",
  "49": "def solve():\n    L, R = map(int, input().split())\n    ans = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i * j * k <= R and (i * j * k >= L or (i * j > 1 and i * j * k >= L)):\n                    ans += 1\n    print(ans)\n\nfor",
  "50": "def min_jars_to_empty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        jars = list(map(int, input().split()))\n        left, right = jars[:n], jars[n:]\n        left_count, right_count = 0, 0\n        for i in range(n):\n            if left[i] == right[i]:\n                left_count += 1\n                right_count += 1\n            elif left[i] == 1",
  "51": "def solve(n, k, d1, d2):\n    if k == 0:\n        return (n % 3 == 0)\n    if d1 == 0 and d2 == 0:\n        return (n - k) % 3 == 0\n    if d1 == 0:\n        return (k - d2) % 3 == 0 and (n - k) % 3 == 0\n    if d2 == 0",
  "52": "def min_time(n, a):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans = (ans + a[i] * a[n - i - 1]) % 1000000007\n    return ans",
  "53": "def solve():\n    n, s = map(str, input().split())\n    n = int(n)\n    ans1 = []\n    ans2 = []\n    i = 1\n    j = n\n    for c in s:\n        if c == '<':\n            ans1.append(i)\n            ans2.append(i)\n            i += 1\n        else:\n            ans1.append(j)\n            ans2.append(j)\n            j -= 1\n    ans1 += list(range(",
  "54": "```python\nfrom collections import Counter\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    c = Counter(s)\n    while 2048 in c and c[2048] > 0:\n        c[2048] -= 1\n        for i in range(29, -1, -1):\n            if 2**i in c and c[2**i] > ",
  "55": "def max_sticks(n):\n    return (n + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_sticks(n))",
  "56": "def solve():\n    n, k = map(int, input().split())\n    ans = k % n\n    print(0 if ans == 0 else 2)\n    for i in range(n):\n        row = ''\n        for j in range(n):\n            if (i + j) % n < ans:\n                row += '1'\n            else:\n                row += '0'\n        print(row)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "57": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "58": "def min_cost(n, m, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for x in range(1, min(i, j) + 1):\n                for y in range(1, min(i - x, j) + 1):\n                    dp[i][j] =",
  "59": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = -1\n    min_val = sys.maxsize\n    for i in range(n):\n        if a[i] != -1:\n            if i > 0 and a[i - 1] == -1:\n                max_val = max(max_val, a[i])\n                min_val = min(min_val, a[i])\n            if i <",
  "60": "def solve():\n    a, b = map(int, input().split())\n    x = a & b\n    print(a ^ x + b ^ x)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "61": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    for i in range(n - 2):\n        if p[i] < p[i + 1] and p[i + 1] > p[i + 2]:\n            print(\"YES\")\n            print(i + 1, i + 2, i + 3)\n            break\n    else:\n        print(\"NO\")",
  "62": "def solve():\n    s = input()\n    n = len(s)\n    vis = [0] * 26\n    pos = [-1] * 26\n    for i in range(n):\n        c = ord(s[i]) - ord('a')\n        if i == 0:\n            pos[c] = 0\n            vis[c] = 1\n        elif i == n - 1:\n            if pos[c - 1] == -1 or pos[c +",
  "63": "import heapq\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    w = list(map(int,input().split()))\n    a.sort(reverse=True)\n    w.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i*w[i]-1] + a[n-w[i]+i]\n    print(ans)",
  "66": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "68": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    i = 0\n    while i < n:\n        if i + 1 < n and s[i] == s[i + 1]:\n            j = i + 1\n            while j + 1 < n and s[j] == s[j + 1]:\n                j += 1\n            i = j + 1\n            ans += 1\n        else",
  "69": "def min_coins(t):\n    for _ in range(t):\n        a, b = map(int, input().split())\n        s = input()\n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            if s[i - 1] == '1':\n                dp[i] = dp[i - 1] + a\n            else:\n                dp[i] = dp[i - ",
  "71": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    coins = 0\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, a[i])\n        coins += max_val - a[i]\n\n    print(coins)",
  "72": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = set(a)\n    if len(b) > k:\n        print(-1)\n        return\n    c = list(b)\n    while len(c) < k:\n        c.append(1)\n    m = n * k\n    d = []\n    for i in range(n):\n        for j in range(k):\n            d.append(c[a[i]",
  "73": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if a[i] != i:\n            mex = n\n            for j in range(n):\n                if a[j] != j and a[j] < mex:\n                    mex = a[j]\n            a[i] = mex\n            ans.append(i + 1)\n    for i in range(n - 1):\n        if a[i",
  "75": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.ceil((2 * n) / math.tan(math.pi / n)))",
  "76": "def is_beautiful(n):\n    return n % 2 == 0 or n == 3\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(\"YES\" if is_beautiful(n) else \"NO\")",
  "78": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input().strip())\n    ans = n + m\n    for i in range(n):\n        cnt = 0\n        for j in range(m):\n            if grid[i][j] == '*':\n                cnt += 1\n        if cnt == m:\n            ans = min(ans, cnt)\n   ",
  "80": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    if l == r:\n        print(0)\n    else:\n        ans = (r - l + 1) * (r - l + 1) - (r - l + 1)\n        print(ans)",
  "81": "t = int(input())\n\nfor _ in range(t):\n    a = input()\n    b = input()\n    c = input()\n\n    flag = True\n    for i in range(len(a)):\n        if a[i] != c[i] and b[i] != c[i]:\n            flag = False\n            break\n\n    print(\"YES\" if flag else \"NO\")",
  "82": "def find_permutation(n, p):\n    p = p[::-1]\n    return ' '.join(map(str, p))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(find_permutation(n, p))",
  "83": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\n\nfor _ in range(t):\n    x, y, a, b = map(int, input().split())\n    if (y - x) % (a - b):\n        print(-1)\n    else:\n        print((y - x) // (a - b))",
  "84": "def get_ans(n, a):\n    cnt = 0\n    st = []\n    mp = {}\n    for i in range(n):\n        while st and st[-1] != a[i]:\n            st.pop()\n        if st and st[-1] == a[i]:\n            st.pop()\n        if not st:\n            st.append(a[i])\n            mp[(i, i)] = 1\n        else:\n            if (i - 1, i) in mp:\n                mp",
  "85": "def solve():\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['1'] * n\n    for i in range(n):\n        if (i - x >= 0 and s[i] == '0' and w[i - x] == '1') or (i + x < n and s[i] == '0' and w[i + x] == '1'):\n            w[i] = '0'\n    for i in",
  "86": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    zeros = a.count(0)\n    ones = a.count(1)\n\n    if zeros > ones:\n        print(zeros)\n        print(*([0] * zeros))\n    else:\n        print(zeros * 2)\n        print(*([0] * ones) + [1] * zeros)",
  "87": "def solve():\n    m, d, w = map(int, input().split())\n    ans = 0\n    for i in range(1, m):\n        if (d + i * d) % w == i * d % w:\n            ans += i * d\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "88": "def visible_pips(n):\n    return n if n <= 21 else (n + 21) // 2 * 2 + (n - 1) % 2\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        if x % 2 == 0 and x < 39 or x % 2 == 1 and x < 40 or x == 40 or x == 39:\n            print",
  "89": "def height(n, a):\n    if n == 1:\n        return 0\n    i = 2\n    while i <= n and a[i-2] == a[i-1] - 1:\n        i += 1\n    return max(height(i-1, a), n - i + height(n-i, a) + 1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input",
  "90": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    unlocked = [i for i in range(n) if l[i] == 0]\n    unlocked.sort(key=lambda x: a[x])\n    for i in unlocked:\n        a[i] = a[unlocked[0]]\n        unlocked[0] += 1\n    print(*a)\n\nt = int(input())\nfor _ in",
  "91": "def solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        if q[i] > q[i - 1]:\n            p[i] = q[i]\n        else:\n            for j in range(q[i - 1] + 1, q[i - 1] + n - i):\n                if",
  "92": "q = int(input())\n\nfor _ in range(q):\n    s = input()\n    t = input()\n    print('YES' if set(s) & set(t) else 'NO')",
  "93": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mp = {x: i for i, x in enumerate(a)}\n    ans = 0\n    i = 0\n    for x in b:\n        ans += 2 * mp[x] - i + 1\n        i = max(i, mp[x])\n    print(ans)\n\nfor _",
  "94": "```python\nt = int(input())\n\nfor _ in range(t):\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    c = [0] * n\n    for i in range(n):\n        if a[i] <= T - a[i]:\n            c[a[i] - 1] = 1\n            c[a[i] + (T - a[i]) - 1] = 1\n\n    for i",
  "95": "def solve(n):\n    if n == 1:\n        return -1\n    elif n == 2:\n        return 57\n    elif n == 3:\n        return 239\n    else:\n        return int('6' + '7' * (n - 2))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "97": "def solve(s, c):\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = list(s)\n            t[i], t[j] = t[j], t[i]\n            if t < c:\n                return ''.join(t)\n    return \"---\"\n\nt = int(input())\nfor _ in range(t):\n    s, c = input().split()\n    print(solve(s, c))",
  "98": "q = int(input())\nfor _ in range(q):\n    c, m, x = map(int, input().split())\n    print(min(min(c, m), (c + m + x) // 3))",
  "99": "def solve():\n    n = int(input())\n    s = input()\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    j = n - 1\n    while j >= 0 and s[j] == '1':\n        j -= 1\n    if i <= j:\n        print('0' * i + '1' * (j - i + 1))\n    else:\n        print(s)\n\n",
  "100": "def solve():\n    r, g, b = map(int, input().split())\n    total = r + g + b\n    return min(min(r, g) + min(g, b) + min(r, b), (total - min(r, g, b)) // 2 + min(r, g, b))\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "101": "t = int(input())\n\nfor _ in range(t):\n    a, b, c, r = map(int, input().split())\n\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n\n    if a <= c - r and c + r <= b:\n        print(0)\n    elif a <= c - r:\n        print(c - a - max(0, c - r - b))\n",
  "102": "def is_beautiful(num):\n    return len(str(num)) == 1 or str(num)[0] == str(num)[-1]\n\ndef count_beautiful(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_beautiful(i):\n            count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_beautiful(n))",
  "103": "def solve():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    rows = [0] * n\n    cols = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                rows[i] = 1\n                cols[j] = 1\n    cnt = ",
  "105": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += (k - a[i]) // a[0]\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "106": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append((l, r))\n    a.sort(key=lambda x: x[1])\n    ans = [0] * n\n    l, r = 0, 0\n    for i in range(n):\n        if a[i][1] < r:\n            ans[i] = ",
  "107": "def solve():\n    a, b, c, d = map(int, input().split())\n    if a + b > 0 and c + d == 0:\n        print('Ya Ya Tidak Tidak')\n    elif a + b == 0 and c + d > 0:\n        print('Tidak Ya Tidak Tidak')\n    elif a + b == 0 and c + d == 0:\n        print('Tidak Tidak Tidak Tidak')\n",
  "108": "def check_sharpened(a):\n    n = len(a)\n    left, right = 0, n - 1\n    while left < right:\n        if a[left] < a[right]:\n            left += 1\n        else:\n            right -= 1\n    for i in range(left, right + 1):\n        if a[i] == 0:\n            return \"No\"\n    return \"Yes\"\n\nt = int(input())\nfor _ in range(t):\n   ",
  "110": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [0]\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] > a[i + 1]:\n            peaks.append(peaks[-1] + 1)\n        else:\n            peaks.append(peaks[-1])\n    ans = 0",
  "114": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    p = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        heapq.heappush(p, (-x, y))\n    ans = 0\n    i = 0\n    while i < n:\n        mx = 0\n        while p and -p[",
  "116": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    s = sum(a)\n    x = 0\n    for i in a:\n        x ^= i\n\n    if s == 2 * x:\n        print(0)\n        continue\n\n    if s < 2 * x:\n        print(2)\n        print(x, x)\n    else:\n        print(1)\n        print(x)",
  "117": "n, m = map(int, input().split())\n\nrows = []\nfor _ in range(n):\n    rows.append(list(map(int, input().split())))\n\ncols = []\nfor _ in range(m):\n    cols.append(list(map(int, input().split())))\n\nrow_map = {row[0]: row for row in rows}\n\nfor col in cols:\n    num = col[0]\n    row = row_map[num]\n    for i in range(1, m):\n        print(row[i",
  "118": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[i] * (j - i + 1) < x:\n            j += 1\n        if j - i > 0:\n            ans +=",
  "119": "import sys\ninput = sys.stdin.readline\n\nclass LCA:\n    def __init__(self, n, logn):\n        self.logn = logn\n        self.log = [0] * (n + 1)\n        for i in range(2, n + 1):\n            self.log[i] = self.log[i >> 1] + 1\n\n        self.depth = [0] * (n + 1)\n        self.parent = [[0] * (",
  "120": "def f(n, m):\n    if m == 0:\n        return 0\n    k = n - m\n    return (m * (m + 1)) // 2 + (k * (k + 1) * (2 * m + k + 1)) // 6\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(f(n, m))",
  "121": "def min_difference(arr):\n    arr.sort()\n    n = len(arr)\n    return abs(arr[n//2] - arr[n//2 - 1])",
  "122": "def maxScore(cardPoints, k):\n    n = len(cardPoints)\n    if k >= n - k: return sum(cardPoints[:k])\n    return sum(cardPoints) - min(sum(cardPoints[i:i+k]) for i in range(n-k+1))",
  "123": "def numMusicPlaylists(N, L, K):\n    MOD = 10**9 + 7\n    dp = [[0]*(L+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(1, min(i, L)+1):\n            dp[i][j] = (dp[i-1][j-1] * (j-1",
  "124": "def search(nums, target):\n    if not nums:\n        return False\n\n    left, right = 0, len(nums) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if nums[mid] == target:\n            return True\n\n        # duplicates on the left side\n        if nums[left] == nums[mid] == nums[right]:\n            left += 1\n            right -= 1\n        # duplicates on the",
  "125": "def power(a, b, mod):\n    res = 1\n    while b:\n        if b % 2:\n            res = (res * a) % mod\n        a = (a * a) % mod\n        b //= 2\n    return res\n\ndef superPow(a, b):\n    return power(a, int(''.join(map(str, b))), 1337)",
  "126": "def maxFreq(s, maxLetters, minSize, maxSize):\n    freq = {}\n    for i in range(len(s) - minSize + 1):\n        substring = s[i:i + minSize]\n        if len(set(substring)) <= maxLetters:\n            freq[substring] = freq.get(substring, 0) + 1\n    return max(freq.values(), default=0)",
  "127": "class Solution:\n    def profitableSchemes(self, G: int, P: int, group: list[int], profit: list[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[0] * (P + 1) for _ in range(G + 1)]\n        dp[0][0] = 1\n        for g, p in zip(group, profit):\n            for g2 in range(G, g - 1, -",
  "128": "```python\ndef calculate(expression):\n    def update(op, v):\n        if op == '+': stack.append(v)\n        if op == '-': stack.append(-v)\n\n    def evaluate():\n        while stack:\n            v = stack.pop()\n            while stack and stack[-1] == '+':\n                v += stack.pop()\n            while stack and stack[-1] == '-':\n                v -= stack.pop()\n            stack.append(v)\n\n    stack, sign, num = [], '+', 0",
  "129": "def maxScore(A):\n    n = len(A)\n    max_score = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_score = max(max_score, A[i] + A[j] + i - j)\n    return max_score",
  "130": "class Solution:\n    def numberOfArrays(self, s: str, k: int) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(n):\n            if s[i] != '0':\n                dp[i + 1] += dp[i]\n            j = i\n            while j >= 0 and i -",
  "132": "def mincostTickets(days, costs):\n    last_day = 0\n    for day in days:\n        last_day = max(last_day, day)\n    dp = [0] * (last_day + 1)\n    for i in range(1, last_day + 1):\n        if i in days:\n            dp[i] = min(dp[max(0, i-1)] + costs[0], dp[max(0, i-7)] + costs[1], dp",
  "133": "def minimumLength(s):\n    n = len(s)\n    freq = [0] * 4\n    for c in s:\n        freq[ord(c) - ord('Q')] += 1\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            f = [0] * 4\n            for k in range(i, j):\n                f[ord(s[k]) - ord('Q')] += 1\n           ",
  "135": "def validateStackSequences(pushed, popped):\n    stack, j = [], 0\n    for x in pushed:\n        stack.append(x)\n        while stack and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return not stack",
  "136": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: list[list[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        top, bottom, left, right = [max(row) for row in grid], [max(col) for col in zip(*grid)], \\\n                                  [max(row) for row in zip(*grid)], [max(col) for col in zip(*grid)]\n        return sum(min(top[i][j], left[j], right",
  "137": "class Solution:\n    def minimumOneBitOperations(self, n: int) -> int:\n        return bin(n).count('1') * 2 - n",
  "138": "def maxProduct(nums):\n    max_len = 0\n    curr_len = 0\n    neg_count = 0\n    for num in nums:\n        if num == 0:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n            neg_count = 0\n        elif num < 0:\n            neg_count += 1\n            curr_len += 1\n        else:\n            curr_len += 1\n        if neg_count %",
  "139": "def minDeletionSize(A):\n    n = len(A[0])\n    res = 0\n    for i in range(n):\n        for j in range(1, len(A)):\n            if A[j][i] < A[j-1][i]:\n                res += 1\n                break\n    return res",
  "140": "def findMaximumXOR(nums):\n    n = len(nums)\n    max_len = len(bin(max(nums)))-2\n    root = {}\n    for num in nums:\n        node = root\n        for i in range(max_len-1, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node:\n                node[bit] = {}\n            node = node[bit]\n    max_xor = 0\n    for num in",
  "141": "def numRescueBoats(people, limit):\n    people.sort()\n    l, r = 0, len(people) - 1\n    res = 0\n    while l <= r:\n        if people[l] + people[r] <= limit:\n            l += 1\n        r -= 1\n        res += 1\n    return res",
  "142": "def findLUSlength(strs):\n    def is_subsequence(s, t):\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\n    strs.sort(key=len, reverse=True)\n    for s in strs:\n        is_sub = False\n        for t in strs:\n            if s != t and is",
  "143": "def totalFruit(tree):\n    max_fruit = 0\n    left = 0\n    fruit_count = {}\n    for right in range(len(tree)):\n        fruit_count[tree[right]] = fruit_count.get(tree[right], 0) + 1\n        while len(fruit_count) > 2:\n            fruit_count[tree[left]] -= 1\n            if fruit_count[tree[left]] == 0:\n                del fruit_count[tree[left]]\n            left += ",
  "144": "def minSteps(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n        dp[i] = min(dp[i],",
  "145": "def judge_point24(nums):\n    def dfs(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - 24) < 1e-8\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a, b = nums[i], nums[j]\n                rest = nums[:i] + nums[i + 1:j] + nums[j + 1:]\n                if dfs(rest + [a +",
  "146": "```python\ndef decode_string(s):\n    stack = []\n    cur_num = 0\n    cur_str = ''\n    for c in s:\n        if c.isdigit():\n            cur_num = cur_num * 10 + int(c)\n        elif c == '[':\n            stack.append(cur_str)\n            stack.append(cur_num)\n            cur_str = ''\n            cur_num = 0\n        elif c == ']':\n            num = stack.pop()\n            prev_str = stack.pop()\n            cur_str",
  "147": "class Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        engineers = sorted(zip(efficiency, speed), reverse=True)\n        max_performance = 0\n        mod = 10**9 + 7\n        total_speed = 0\n        heap = []\n        for efficiency, speed in engineers:\n            heappush(heap, speed)\n            total_speed += speed\n            if len(heap)",
  "148": "```python\ndef maxProfit(difficulty, profit, worker):\n    difficulty.sort()\n    profit.sort()\n    worker.sort()\n    i, j, k = len(difficulty) - 1, len(profit) - 1, len(worker) - 1\n    ans = 0\n    while i >= 0 and j >= 0 and k >= 0:\n        if difficulty[i] <= worker[k]:\n            ans += profit[j]\n            i -= 1\n           ",
  "149": "def removeDuplicates(s, k):\n    stack = []\n    for c in s:\n        if stack and stack[-1][0] == c:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n        else:\n            stack.append([c, 1])\n    return ''.join(c * cnt for c, cnt in stack)",
  "150": "def partitionDisjoint(A):\n    n = len(A)\n    max_left = [0] * n\n    max_left[0] = A[0]\n    for i in range(1, n):\n        max_left[i] = max(max_left[i - 1], A[i])\n    tail = 0\n    for i in range(n - 1):\n        if max_left[i] <= A[i + 1]:\n            tail = i + 1\n            break\n",
  "152": "def distributeBalls(position, m):\n    position.sort()\n    left, right = 0, position[-1] - position[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if sum((max(0, position[i] - position[i - m + 1] - mid) for i in range(m, len(position) + 1))) >= m * mid:\n            left = mid\n        else:\n           ",
  "154": "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: list[int], verticalCuts: list[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        maxH = max(b - a for a, b in zip([0] + horizontalCuts, horizontalCuts + [h]))\n        maxW = max(b - a for a, b in zip([0] + verticalCuts, verticalCuts",
  "155": "def maxJumps(arr, d):\n    n = len(arr)\n    max_jumps = 0\n    for i in range(n):\n        left, right = i - 1, i + 1\n        max_reach_left, max_reach_right = i - 1, i + 1\n        while left >= 0 and max_reach_left - left <= d:\n            if arr[left] < arr[i]:\n                max_reach_left = left\n            left",
  "157": "```python\ndef isMatch(s: str, p: str) -> bool:\n    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n    dp[0][0] = True\n    for j in range(1, len(p) + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n    for i in",
  "158": "```python\ndef kSimilarity(A, B):\n    def dfs(i, j, cnt):\n        if i == len(A):\n            return 0\n        if j == len(B):\n            return float('inf')\n        if A[i] == B[j]:\n            return dfs(i + 1, j + 1, cnt)\n        maxn = float('inf')\n        for k in range(i + 1, len(A)):\n            if A[k] == B[j]:\n               ",
  "159": "def constrainedSubsetSum(nums, k):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    max_val = dp[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], nums[i])\n        for j in range(i-k, i):\n            dp[i] = max(dp[i], dp[j] + nums[i])\n        max_val = max(max_val, dp",
  "160": "def stoneGame(piles):\n    n = len(piles)\n    prefix = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            prefix[i][j] = prefix[i - 1][j] + piles[i - 1] if i <= j else prefix[i][j - 1]\n    def dp(i",
  "161": "class Solution:\n    def isValidSerialization(self, tree):\n        def dfs(node):\n            if not node:\n                return 1\n            left, right = dfs(node.left), dfs(node.right)\n            if left + right > 2:\n                return 0\n            return -1 if left + right == 0 else 1\n        return dfs(root) == -1",
  "162": "```python\ndef longestCommonSubsequence(text1: str, text2: str) -> int:\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n               ",
  "163": "def isSubsequence(s, t):\n    it = iter(t)\n    return all(c in it for c in s)",
  "164": "def minimumNumber(num, k):\n    n = len(num)\n    count = [0] * 10\n    for i in num:\n        count[int(i)] += 1\n    for i in range(1, 10):\n        if count[i] > 0:\n            break\n    for i in range(9, 0, -1):\n        if count[i] > 0:\n            break\n    for i in range(1, 10):\n        if",
  "165": "class Solution:\n    def findLongestWord(self, s: str, dictionary: list[str]) -> str:\n        def is_subsequence(s: str, t: str) -> bool:\n            p = 0\n            for c in t:\n                p = s.find(c, p) + 1\n                if p == 0:\n                    return False\n            return True\n\n        dictionary.sort()\n        return max((w for w in dictionary if is_subsequence(s, w)),",
  "166": "def minFlips(a, b, c):\n    res = 0\n    for i in range(31, -1, -1):\n        bit_a, bit_b, bit_c = (a >> i) & 1, (b >> i) & 1, (c >> i) & 1\n        if bit_c == 0:\n            if bit_a == 1 and bit_b == 1:\n                res += 1\n            elif bit_a ==",
  "167": "def superEggDrop(K, N):\n    dp = [[0] * (N + 1) for _ in range(K + 1)]\n    for i in range(1, K + 1):\n        dp[i][1] = 1\n        dp[i][0] = 0\n    for j in range(1, N + 1):\n        dp[1][j] = j\n    for i in range(2, K + 1):\n",
  "168": "class Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if k > len(s): return False\n        char_count = {}\n        for char in s:\n            char_count[char] = char_count.get(char, 0) + 1\n        odd_count = 0\n        for count in char_count.values():\n            if count % 2: odd_count += 1\n            if count < 2 or (count == 2 and",
  "169": "def maxProduct(n):\n    return int(((n + 1) // 2) * (n - ((n + 1) // 2)))",
  "170": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left = 0\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    right = n - 1\n    while right > 0 and arr[right] >= arr[right - 1]:\n        right -= 1\n    ans = min(n - left -",
  "172": "def maximumDifference(num):\n    num_str = str(num)\n    max_diff = 0\n    for x in range(10):\n        for y in range(10):\n            new_num_str = num_str.replace(str(x), str(y))\n            if new_num_str[0] != '0':\n                new_num = int(new_num_str)\n                for i in range(10):\n                    new_num_str = new_num_str.replace(str(y), str(i))\n                    if new_num_str[0",
  "173": "def canArrange(arr, k):\n    n = len(arr)\n    count = [0] * k\n    for num in arr:\n        count[num % k] += 1\n    for i in range(1, k // 2 + 1):\n        if count[i] != count[k - i]:\n            return False\n    return count[0] % 2 == 0",
  "174": "def lengthLongestPath(s):\n    stack = []\n    max_len = 0\n    for line in s.split('\\n'):\n        line = line.lstrip('\\t')\n        level = line.count('\\t')\n        while len(stack) > level:\n            stack.pop()\n        name = line.lstrip('\\t')\n        if '.' in name:\n            max_len = max(max_len, len(stack[-1]) + len(name) + 1)\n        else:\n            stack.append(name)\n",
  "175": "def findIntegers(n):\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    for i in range(n, 1, -1):\n        if (i - 1) & i == 0:\n            dp[i] += dp[i - ",
  "176": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        for i in range(1, len(s1)):\n            if (self.isScramble(s1[:i], s2[:",
  "177": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n\n        t_count = {}\n        for char in t:\n            t_count[char] = t_count.get(char, 0) + 1\n\n        required = len(t_count)\n        l, r = 0, 0\n        formed = 0\n        window_counts = {}\n\n        ans = (float('inf'), None, None",
  "178": "def lengthOfLIS(nums):\n    if not nums:\n        return 0\n\n    dp = [nums[0]]\n\n    for num in nums[1:]:\n        if num > dp[-1]:\n            dp.append(num)\n        else:\n            idx = binary_search(dp, num)\n            dp[idx] = num\n\n    return len(dp)\n\ndef binary_search(dp, target):\n    left, right = 0, len(dp) - 1\n    while left < right:\n        mid",
  "179": "```python\nclass Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        @lru_cache(None)\n        def dp(i, k):\n            if k < 0: return 1 << 30\n            if i == len(s): return 0\n            delete_here = 1 + dp(i + 1, k - 1)\n            count = 1\n            while i + 1 < len(s)",
  "180": "```python\nclass Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: list[list[int]]) -> int:\n        heap = []\n        curr, res, pos = startFuel, 0, 0\n        while curr < target:\n            while pos < len(stations) and stations[pos][0] <= curr:\n                heappush(heap, -stations[pos][1])\n                pos += 1\n            if not heap:\n               ",
  "181": "```python\nclass Solution:\n    def maxProfit(self, prices):\n        buy, sell, cooldown = -prices[0], 0, 0\n        for price in prices:\n            buy, sell, cooldown = max(buy, cooldown - price), max(sell, buy + price), max(sell, cooldown)\n        return cooldown\n```",
  "182": "def trap(height):\n    if not height:\n        return 0\n\n    left, right = 0, len(height) - 1\n    max_left, max_right = height[left], height[right]\n    water = 0\n\n    while left <= right:\n        if max_left < max_right:\n            left += 1\n            if height[left] > max_left:\n                max_left = height[left]\n            else:\n                water += max_left - height[left]\n        else:\n           ",
  "183": "def maxDotProduct(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1",
  "185": "def hasAllCodes(s, k):\n    n = len(s)\n    total = 1 << k\n    return len(set(s[i:i+k] for i in range(n-k+1))) == total",
  "186": "def largestNumber(cost, target):\n    dp = [[0] * (target + 1) for _ in range(10)]\n    for i in range(1, 10):\n        dp[i][cost[i - 1]] = 1\n    for i in range(1, target + 1):\n        for j in range(1, 10):\n            for k in range(1, i // cost[j - 1] + 1):\n                dp[j][",
  "187": "def minOperationsMaxProfit(customers, boardingCost, runningCost):\n    profit = 0\n    rotations = 0\n    waiting = 0\n    max_profit = float('-inf')\n    max_rotations = -1\n    i = 0\n    while i < len(customers) or waiting:\n        if i < len(customers):\n            waiting += customers[i]\n            i += 1\n        people_boarded = min(waiting, 4)\n        waiting -=",
  "189": "def unhappyFriends(n, preferences, pairs):\n    graph = {i: [] for i in range(n)}\n    for x, y in pairs:\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def dfs(x, y, visited):\n        visited.add(x)\n        for i in preferences[x]:\n            if i not in visited:\n                if i in graph[x] and i != y and (i in graph[y] and graph[y][0] != x):\n                   ",
  "190": "def findLength(A, B):\n    m, n = len(A), len(B)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if A[i - 1] == B[j - 1]:\n                dp[i][j] = dp[i - 1][",
  "191": "def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n    digits = sorted(int(d) for d in digits)\n    def count(x):\n        if x < n: return 1 + sum(count(x * 10 + d) for d in digits if d < str(x)[ -1])\n        return sum(count(x * 10 + d) for d in digits if d < str(x)[ -1])\n    return count(0)",
  "192": "def maxCoins(piles):\n    piles.sort()\n    return sum(piles[-1-i*2] for i in range(piles//3))",
  "193": "def minSetSize(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    sorted_count = sorted(count.values(), reverse=True)\n    target = len(arr) // 2\n    ans = 0\n    for num in sorted_count:\n        ans += 1\n        target -= num\n        if target <= 0:\n            return ans",
  "194": "```python\ndef canPartitionKSubsets(nums, k):\n    total_sum = sum(nums)\n    if total_sum % k != 0:\n        return False\n    target = total_sum // k\n    nums.sort(reverse=True)\n    def backtrack(index, subsets):\n        if index == len(nums):\n            return all(s == target for s in subsets)\n        for i in range(k):\n            if subsets[i] + nums[index] <= target:\n                subsets[i] += nums[index]\n",
  "195": "def count_triples(A):\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (A[i] & A[j] & A[k]) == 0:\n                    count += 1\n    return count",
  "196": "def maxSubarraySumCircular(A):\n    total_sum = sum(A)\n    max_sum = float('-inf')\n    max_ending_here = 0\n    min_sum = float('inf')\n    min_ending_here = 0\n\n    for num in A:\n        max_ending_here = max(num, max_ending_here + num)\n        max_sum = max(max_sum, max_ending_here)\n\n        min_ending_here = min(num, min_ending_here + num)\n",
  "197": "def isValid(s: str) -> bool:\n    stack = []\n    for c in s:\n        if c == 'a':\n            stack.append(c)\n        elif c == 'b':\n            if not stack or stack.pop() != 'a':\n                return False\n            stack.append(c)\n        elif c == 'c':\n            if not stack or stack.pop() != 'b':\n                return False\n            stack.append(c)\n    return not stack",
  "198": "```python\ndef equalSubstring(s, t, maxCost):\n    left = 0\n    max_len = 0\n    current_cost = 0\n    for right in range(len(s)):\n        current_cost += abs(ord(s[right]) - ord(t[right]))\n        while current_cost > maxCost:\n            current_cost -= abs(ord(s[left]) - ord(t[left]))\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return",
  "199": "def longest_consecutive(nums):\n    if not nums:\n        return 0\n\n    num_set = set(nums)\n    max_length = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n\n            max_length = max(max_length, current_length)\n\n    return max",
  "200": "def findMinFibonacciNumbers(k):\n    fib = [1, 1]\n    while fib[-1] < k: fib.append(fib[-1] + fib[-2])\n    count = 0\n    while k:\n        count += k // fib[-1]\n        k %= fib[-1]\n        fib.pop()\n    return count",
  "201": "```python\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        dp = [0] * (n + 1)\n        dp[0] = dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - j - 1]\n        return dp[n]\n```",
  "202": "def longestMountain(A):\n    n = len(A)\n    res = 0\n    i = 0\n    while i < n - 2:\n        if A[i] < A[i + 1] and A[i + 1] > A[i + 2]:\n            j = i + 2\n            while j < n - 1 and A[j] > A[j + 1]:\n                j += 1\n            while j < n - 1 and",
  "203": "def uniquePaths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]",
  "205": "def findMaxForm(strs, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for s in strs:\n        ones = s.count('1')\n        zeros = len(s) - ones\n        for i in range(m, zeros - 1, -1):\n            for j in range(n, ones - 1, -1):\n                dp[i][j] = max(dp[i][j], dp",
  "206": "def PredictTheWinner(scores):\n    n = len(scores)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = scores[i]\n    for length in range(1, n):\n        for left in range(n - length):\n            right = left + length\n            dp[left][right] = max(scores[left] - dp[left + 1][right], scores[right] - dp[left][right - 1",
  "207": "def largest_number(nums):\n    nums = list(map(str, nums))\n    nums.sort(key=lambda x: x*3, reverse=True)\n    return '0' if nums[0] == '0' else ''.join(nums)",
  "208": "def predictPartyVictory(senate):\n    radiant = []\n    dire = []\n    for i, senator in enumerate(senate):\n        if senator == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n\n    while radiant and dire:\n        r = radiant.pop(0)\n        d = dire.pop(0)\n        if r < d:\n            radiant.append(r + d)\n        else:\n            dire.append(r + d)\n\n    return \"Radiant\" if not dire",
  "209": "def mergeStones(stones, K):\n    n = len(stones)\n    if (n - 1) % (K - 1) != 0: return -1\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + stones[i]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(K - 1, n):\n",
  "210": "def containsNearbyAlmostBuriedJumps(nums, k, t):\n    if len(nums) <= 1 or k < 1 or t < 0:\n        return False\n    buckets = {}\n    for i, num in enumerate(nums):\n        bucket_id = num // (k + 1)\n        if bucket_id in buckets:\n            return True\n        for b in [bucket_id - 1, bucket_id, bucket_id + 1]:\n            if b in buckets and",
  "211": "class Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n        seen = set()\n        max_unique = 0\n        def backtrack(start, path):\n            nonlocal max_unique\n            if start == len(s):\n                max_unique = max(max_unique, len(path))\n                return\n            for end in range(start + 1, len(s) + 1):\n                substring = s[start:end]\n                if substring not in seen:\n                    seen.add(substring)\n",
  "212": "class Solution:\n    def numFactoredBinaryTrees(self, A):\n        A.sort()\n        dp = {a: 1 for a in A}\n        for i in range(1, len(A)):\n            dp[A[i]] = 1\n            for j in range(i):\n                if A[i] % A[j] == 0 and A[i] // A[j] in dp:\n                    dp[A[i]] += dp[A[j]] * dp[A[i] // A[j]]\n",
  "213": "```python\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            x = 1 / x\n            n = -n\n        half = self.myPow(x, n // 2)\n        return half * half if n % 2 == 0 else half * half * x\n```",
  "214": "def minMoves(nums):\n    n = len(nums)\n    even, odd = nums[::2], nums[1::2]\n    def check(a, b):\n        return all(x > y for x, y in zip(a, b[1:])) and all(x < y for x, y in zip(a[1:], b))\n\n    return min(sum(max(0, x - y) for x, y in zip(a, b)) for a, b in [(even,",
  "215": "def isGood(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return False\n    return True",
  "216": "```python\ndef minNumberOfFrogs(croakOfFrogs: str) -> int:\n    if len(croakOfFrogs) % 5 != 0:\n        return -1\n\n    char_count = {'c': 0, 'r': 0, 'o': 0, 'a': 0, 'k': 0}\n    max_frogs = 0\n    current_frogs = 0\n    queue =",
  "217": "class Solution:\n    def subarrayBitwiseORs(self, A):\n        res = set()\n        cur = set()\n        for a in A:\n            cur = {a | b for b in cur} | {a}\n            res |= cur\n        return len(res)",
  "218": "def orderlyQueue(S, K):\n    if K >= len(S):\n        return S\n    result = S\n    for i in range(len(S)):\n        temp = S[i:] + S[:i]\n        result = min(result, temp)\n    return result",
  "219": "def longestWPI(hours) :\n    score = 0\n    max_len = 0\n    seen = {0: -1}\n    for i, hour in enumerate(hours) :\n        score += 1 if hour > 8 else -1\n        if score > 0 :\n            max_len = i + 1\n        else :\n            max_len = max(max_len, i - seen.get(score, -1))\n        seen.setdefault(score, i)\n    return max_len",
  "220": "def maxSatisfied(customers, grumpy, X):\n    n = len(customers)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + customers[i] * (1 - grumpy[i])\n    max_val = 0\n    window_sum = 0\n    for i in range(n):\n        window_sum += customers[i] * grumpy[i]\n        if",
  "221": "class Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        n = len(S)\n        def check(length):\n            if length == n:\n                return False\n            seen = {0}\n            h = ord(S[0]) * (26 ** (length - 1))\n            for i in range(1, n):\n                h = (h * 26 + ord(S[i])) % (1 << length)\n                if i >= length and h in seen",
  "223": "def hIndex(citations):\n    n = len(citations)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
  "224": "```python\ndef numDistinct(S, T):\n    m, n = len(S), len(T)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, min(i + 1, n + 1)):\n            if S[i -",
  "225": "def pushDominoes(dominoes):\n    dominoes = 'L' + dominoes + 'R'\n    n = len(dominoes)\n    left = [0] * n\n    right = [0] * n\n    for i in range(1, n - 1):\n        if dominoes[i] == '.':\n            left[i] = left[i - 1]\n            right[i] = right[i + 1]\n        elif domino",
  "226": "def numSquarefulPerms(nums):\n    def is_square(x):\n        return int(x**0.5)**2 == x\n\n    def backtrack(i, path):\n        if len(path) == len(nums):\n            result.append(path[:])\n            return\n        for j in range(i, len(nums)):\n            if is_square(path[-1] + nums[j]):\n                path.append(nums[j])\n                backtrack(j + 1, path)\n                path.pop()\n\n    nums.sort()\n    result =",
  "228": "def maxVowels(s, k):\n    vowels = set('aeiou')\n    max_count = 0\n    current_count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            current_count += 1\n        if i >= k:\n            if s[i-k] in vowels:\n                current_count -= 1\n        max_count = max(max_count, current_count)\n    return max_count",
  "229": "def canReorderDoubled(A):\n    count = {}\n    for num in A:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    for num in sorted(count.keys(), key=abs):\n        if count[num] > count[2*num]:\n            return False\n        count[2*num] -= count[num]\n    return True",
  "230": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stack = []\n        for n in num:\n            while k and stack and stack[-1] > n:\n                k -= 1\n                stack.pop()\n            stack.append(n)\n        while k:\n            stack.pop()\n            k -= 1\n        return '0' if not stack else ''.join(stack).lstrip('0') or '0'",
  "231": "def firstMissingPositive(nums):\n    if not nums:\n        return 1\n\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i",
  "232": "class Solution:\n    def findPoisonedDuration(self, timeSeries: list[int], duration: int) -> int:\n        return sum(min(x + duration, timeSeries[-1]) - x for x in timeSeries)",
  "234": "def minAddToMakeValid(S):\n    stack = []\n    for c in S:\n        if c == '(':\n            stack.append(c)\n        elif c == ')' and stack:\n            stack.pop()\n        else:\n            stack.append(c)\n    return len(stack)",
  "236": "def minFlipsMonoIncr(s):\n    ones = 0\n    flips = 0\n    for c in s:\n        if c == '1':\n            ones += 1\n        else:\n            flips = min(flips + 1, ones)\n    return flips",
  "237": "```python\ndef numSubarraysWithSum(A, S):\n    prefix_sum = {0: 1}\n    curr_sum = 0\n    count = 0\n    for num in A:\n        curr_sum += num\n        count += prefix_sum.get(curr_sum - S, 0)\n        prefix_sum[curr_sum] = prefix_sum.get(curr_sum, 0) + 1\n    return count\n```",
  "239": "from itertools import combinations\n\ndef largestValsFromLabels(values, labels, num_wanted, use_limit):\n    items = list(zip(values, labels))\n    items.sort(key=lambda x: x[0], reverse=True)\n    max_sum = 0\n    chosen = set()\n    for combo in combinations(items, num_wanted):\n        label_count = {}\n        for item in combo:\n            label = item[1]\n            if label in label_count:\n                label_count[label] += 1",
  "240": "```python\nfrom collections import Counter\n\ndef frequency_sort(s):\n    freq = Counter(s)\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    max_len = max(freq.values())\n    result = []\n    for char, count in sorted_freq:\n        result.extend([char] * count)\n    return ''.join(result)\n\nprint(frequency_sort(\"tree\"))  # \"eetr\"\nprint(frequency_sort(\"cccaaa\"))  # \"cc",
  "241": "def isRobotInCircle(instructions):\n    x, y, dx, dy = 0, 0, 0, 1\n    for instruction in instructions:\n        if instruction == 'G':\n            x += dx\n            y += dy\n        elif instruction == 'L':\n            dx, dy = -dy, dx\n        else:\n            dx, dy = dy, -dx\n        if (x**2 + y**2) <= 400:\n            continue\n",
  "243": "def smallestGoodBase(fronts, backs):\n    n = len(fronts)\n    fronts_set = set(fronts)\n    for i in range(n):\n        if backs[i] not in fronts_set:\n            return backs[i]\n    return 0",
  "244": "def numSteps(s):\n    n = len(s)\n    steps = 0\n    ones = 1\n    for i in range(n - 2, -1, -1):\n        if s[i] == '1':\n            ones += 1\n        else:\n            steps += ones\n    return steps + ones",
  "245": "def optimalDivision(nums):\n    n = len(nums)\n    if n == 1:\n        return str(nums[0])\n    if n == 2:\n        return \"{}{}\".format(nums[0], \"/\" + str(nums[1]))\n    return \"{}/{}\".format(nums[0], \"/\".join(map(str, nums[1:])))",
  "248": "class Solution:\n    def containsCycle(self, grid: list[list[str]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited = set()\n\n        def dfs(i: int, j: int, path: list[tuple[int, int]]) -> bool:\n            if (i, j) in visited:\n                return len(path",
  "250": "class Solution:\n    def mincostToHireWorkers(self, quality: list[int], wage: list[int], K: int) -> float:\n        workers = sorted((w/q, q, w) for w, q in zip(wage, quality))\n        ans = float('inf')\n        total = 0\n        for _, q, w in workers:\n            if K == 1: return w\n            total += q\n            workers[0] = (workers[0",
  "251": "def clumsy(n):\n    if n == 1: return n\n    if n == 2: return 2\n    if n == 3: return 2\n    if n == 4: return 7\n    result = n\n    n -= 1\n    while n > 4:\n        if n % 4 == 0: result = result // n\n        elif n % 4 == 1: result = result + n\n        elif n",
  "252": "def minTaps(n, ranges):\n    taps = [(0, r) for r in ranges]\n    for i, r in enumerate(ranges):\n        if i > 0:\n            taps.append((taps[i-1][0] - r, taps[i-1][1]))\n        taps.append((taps[i][1] + r, i))\n    taps.sort()\n    max_reach, last_tap, cnt = -1, -1, 0\n   ",
  "253": "```python\nclass Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        if target == 1:\n            return 0\n        if target == x:\n            return 1\n        if target < x:\n            return 2 * (target + (x - target) - 1) // (x - 1)\n\n        ops = float('inf')\n        for i in range(1, target + 1):\n            if",
  "254": "def count_numbers_with_unique_digits(n):\n    def count_numbers_with_unique_digits_helper(length):\n        if length == 1:\n            return 10\n        elif length == 2:\n            return 91\n        elif length == 3:\n            return 739\n        elif length == 4:\n            return 5275\n        elif length == 5:\n            return 33511\n        elif length == 6:\n            return 194015\n        elif length == 7:\n",
  "255": "def min_jumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    max_reach = arr[0]\n    step = arr[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step < 0:\n            jumps +=",
  "256": "def minEatingSpeed(piles, H):\n    def canEatAll(speed):\n        return sum((p-1)//speed + 1 for p in piles) <= H\n\n    left, right = 1, max(piles)\n    while left < right:\n        mid = (left + right) // 2\n        if canEatAll(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left",
  "257": "class Solution:\n    def maxProbability(self, n: int, edges: list[list[int]], succProb: list[float], start: int, end: int) -> float:\n        graph = {i: [] for i in range(n)}\n        for (u, v), p in zip(edges, succProb):\n            graph[u].append((v, p))\n            graph[v].append((u, p))\n\n        heap = [(-1, start)]\n        visited = set()\n        while",
  "259": "def smallestDivisor(nums, threshold):\n    def check(divisor):\n        return sum((num - 1) // divisor + 1 for num in nums) <= threshold\n\n    left, right = 1, max(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left",
  "260": "def wiggleMaxLength(nums):\n    if len(nums) < 2:\n        return len(nums)\n    up, down = 1, 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            up = down + 1\n        elif nums[i] < nums[i - 1]:\n            down = up + 1\n    return max(up, down)",
  "261": "import heapq\n\ndef findKthLargest(nums, k):\n    return heapq.nlargest(k, nums)[-1]",
  "263": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        MOD = 10**9 + 7\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[1,7,0],[2,6],[1,3],[2,4]]\n        dp = [0]*10\n        dp[0] = 10\n        for _ in range(n-1):\n           ",
  "264": "def uniqueLetterString(arr):\n    last = {c: i for i, s in enumerate(arr) for c in s}\n    ans = 0\n    for i, s in enumerate(arr):\n        l = len(s)\n        for c in s:\n            j = last[c]\n            last[c] = i + 1\n            ans = max(ans, (i + 1 - j) * (j - i + l))\n    return ans",
  "265": "class Solution:\n    def maxNonOverlapping(self, nums: list[int], target: int) -> int:\n        prefix = [0]\n        for num in nums:\n            prefix.append(prefix[-1] + num)\n        count = 0\n        seen = set()\n        for i in range(len(prefix)):\n            if prefix[i] in seen:\n                continue\n            seen.add(prefix[i])\n            left = 0\n            right = i\n            while left < right:\n                mid",
  "266": "def numSplits(s):\n    n = len(s)\n    left = set()\n    for i in range(n):\n        left.add(s[i])\n    res = 0\n    for i in range(n):\n        left.remove(s[i])\n        res += len(left)\n    return res",
  "267": "def evalRPN(tokens):\n    stack = []\n    for token in tokens:\n        if token in {\"+\", \"-\", \"*\", \"/\"}:\n            b = stack.pop()\n            a = stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(a - b)\n            elif token == \"*\":\n                stack.append(a * b)\n            else:\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return",
  "268": "def baseNeg2(N):\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N > 0:\n        result = (\"1\" if N % 4 >= 2 else \"0\") + result\n        N = N // 2 if N % 4 < 2 else N // 2 - 1\n    return result",
  "269": "def kLengthApart(nums, k):\n    max_distance = float('-inf')\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            if i - max_distance > k:\n                max_distance = i\n            else:\n                return False\n    return True",
  "271": "def canJump(nums):\n    last_position = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if i + nums[i] >= last_position:\n            last_position = i\n    return last_position == 0",
  "272": "from collections import deque\n\ndef maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n    n = len(status)\n    visited = [False] * n\n    queue = deque()\n    for box in initialBoxes:\n        queue.append(box)\n        visited[box] = True\n\n    while queue:\n        box = queue.popleft()\n        if status[box]:\n            for key in keys[box]:\n                if not visited[key]:\n                    queue.append(key)\n                    visited",
  "273": "def getShortestSequence(target):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        j = 1\n        while j * 2 <= i:\n            dp[i] = min(dp[i], dp[i - j] + 1 + (j % 2 == 1))\n            j *= 2\n    return dp[target]",
  "275": "def checkValid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            elif c == '*' and stack:\n                stack.pop()\n        elif c == '*':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append('(')\n    return not stack",
  "277": "def bulbSwitch(light):\n    return sum(1 for i, x in enumerate(light) if x == i + 1)",
  "278": "def largestMultipleOfThree(nums) : \n    nums.sort(reverse = True) \n    s = sum(nums) \n    if s % 3 == 0 : \n        return ''.join(map(str, nums)) \n    elif s % 3 == 1 : \n        if nums[-1] % 3 == 1 : \n            nums.pop() \n            nums.append(0) \n            nums.append(0) \n        else : \n            if nums[-2] %",
  "279": "def getPermutation(n, k):\n    import math\n    k -= 1\n    nums = list(range(1, n + 1))\n    res = ''\n    while n > 1:\n        m = math.factorial(n - 1)\n        index = k // m\n        k %= m\n        res += str(nums[index])\n        nums.pop(index)\n        n -= 1\n    res += str(nums[0])\n    return res",
  "280": "class Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n        def check(mid):\n            n = len(s)\n            dp = [[0] * (mid + 1) for _ in range(n + 1)]\n            for i in range(1, n + 1):\n                for j in range(1, min(i, mid) + 1):\n                    if i - j >= 0 and s[i - j] == s[i",
  "281": "def is_convertible(s, t, k):\n    def get_shift_diff(c1, c2):\n        return (ord(c2) - ord(c1) + 26) % 26\n\n    shift_diffs = [get_shift_diff(s[i], t[i]) for i in range(len(s))]\n    max_shift = max(shift_diffs)\n    return k >= max_shift",
  "283": "def kthSmallestPairDistance(nums, k):\n    n = len(nums)\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(abs(nums[i] - nums[j]))\n    distances.sort()\n    return distances[k - 1]",
  "284": "def bagOfTokensScore(tokens, P):\n    tokens.sort()\n    score = 0\n    left, right = 0, len(tokens) - 1\n    while left <= right:\n        if tokens[left] <= P:\n            P -= tokens[left]\n            score += 1\n            left += 1\n        elif score and tokens[right] + 1 <= P:\n            P += tokens[right]\n            score -= 1\n            right -= 1\n        else:\n",
  "285": "def smallestRangeII(nums, k):\n    nums.sort()\n    res = nums[-1] - nums[0]\n    for i in range(len(nums) - 1):\n        res = min(res, max(nums[-1] - k, nums[i] + k) - min(nums[i + 1] + k, nums[0] - k))\n    return res",
  "286": "import itertools\nimport math\n\ndef get_probability(balls):\n    n = sum(balls) // 2\n    total_ways = math.comb(sum(balls), n)\n    ways_to_fill_box1 = 0\n    for r in range(n + 1):\n        ways_to_fill_box1 += math.comb(balls[0], r) * math.comb(sum(balls[1:]), n - r)\n    return ways_to_fill_box1 / total_ways",
  "287": "def beautifulArrangement(N):\n    def backtrack(start, path):\n        if len(path) == N:\n            result.append(path[:])\n            return\n        for num in range(1, N + 1):\n            if num not in path and (len(path) + 1) % num == 0 or num % (len(path) + 1) == 0:\n                path.append(num)\n                backtrack(start + 1, path)\n                path.pop()\n    result = []\n",
  "288": "def flipLights(n, m):\n    if m == 0:\n        return 1\n    if n == 1:\n        return 2 if m <= 2 else 2\n    if n == 2:\n        return 3 if m <= 2 else 4\n    if n == 3:\n        return 8 if m <= 3 else 8\n    return 16 if m <= 4 else 16",
  "290": "def minCost(n, cuts):\n    cuts.sort()\n    cuts = [0, *cuts, n]\n    dp = [[-1] * len(cuts) for _ in range(len(cuts))]\n    return helper(0, len(cuts) - 1, cuts, dp)\n\ndef helper(l, r, cuts, dp):\n    if l >= r:\n        return 0\n    if dp[l][r] != -1:\n        return dp[l][r]\n   ",
  "291": "def numSubarraysWithOddSum(arr):\n    MOD = 10**9 + 7\n    n = len(arr)\n    odd = 0\n    res = 0\n    for i in range(n):\n        odd += arr[i] & 1\n        res += odd\n    return res % MOD",
  "292": "def maxAbsValExpr(arr1, arr2):\n    n = len(arr1)\n    return max(\n        max(i + arr1[i] - arr2[i] + abs(i - j) for j in range(n))\n        for i in range(n)\n    )",
  "293": "def leastInterval(tasks, n):\n    task_count = {}\n    for task in tasks:\n        task_count[task] = task_count.get(task, 0) + 1\n\n    max_count = max(task_count.values())\n    max_count_tasks = sum(count == max_count for count in task_count.values())\n\n    return max((max_count - 1) * (n + 1) + max_count_tasks, len(tasks))",
  "294": "def totalNQueens(n):\n    def is_valid(board, row, col):\n        for i in range(row):\n            if board[i] == col or \\\n                board[i] - i == col - row or \\\n                board[i] + i == col + row:\n                return False\n        return True\n\n    def solve_n_queens_util(n, row, board, res):\n        if row == n:\n            res.append(board[:])\n            return\n        for col in range(n",
  "295": "class Solution:\n    def isSelfCrossing(self, x: list[int]) -> bool:\n        for i in range(3, len(x)):\n            if x[i] >= x[i-2] and x[i-1] <= x[i-3]:\n                return True\n            if i >= 4 and x[i-1] >= x[i-3] and x[i]+x[i-4] >= x[i-2]:\n                return True\n            if i >= 5",
  "296": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        elif nums[mid] < nums[right]:\n            right = mid\n        else:\n            right -= 1\n    return nums[left]",
  "297": "def numTilePossibilities(tiles):\n    from collections import Counter\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def dfs(count):\n        if not count:\n            return 0\n        ans = 0\n        for c in count:\n            ans += 1 + dfs(count - {c: count[c] - 1})\n        return ans\n\n    count = Counter(tiles)\n    return dfs(count)",
  "298": "def multiply(num1, num2):\n    def atoi(s):\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        result = 0\n        for i in range(len(s)):\n            result += (ord(s[i]) - ord('0')) * (10 ** (len(s) - i - 1))\n       ",
  "300": "def expressionWithLeastOps(x, target):\n    def dfs(x, target, ops):\n        if target == x:\n            return ops\n        if target < x or target % x != 0:\n            return float('inf')\n        for op in ['+', '-', '*', '/']:\n            if op == '+':\n                res = dfs(x, target - x, ops + 1)\n            elif op == '-':\n                res = dfs(x, target + x, ops + 1)\n           ",
  "302": "def validSquare(p1, p2, p3, p4):\n    points = [p1, p2, p3, p4]\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n\n    d1 = distance(points[0], points[1])\n    d2 = distance(points[1], points[2])\n    d3 = distance(points[2], points[3])\n    d4 = distance(points[0",
  "303": "def maxSumAfterPartitioning(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        max_val = 0\n        for j in range(i - 1, max(0, i - k), -1):\n            max_val = max(max_val, arr[j])\n            dp[i] = max(dp[i], dp[j] + max_val * (i -",
  "304": "def numFriendRequests(ages):\n    age_count = [0] * 121\n    for age in ages:\n        age_count[age] += 1\n    res = 0\n    for i in range(121):\n        for j in range(i):\n            if age_count[i] == 0 or age_count[j] == 0: continue\n            if j * 0.5 + 7 <= i or j > i or (j > 100 and i",
  "305": "```python\ndef distinctEchoSubstrings(text: str) -> int:\n    n = len(text)\n    ans = 0\n    for length in range(1, n // 2 + 1):\n        for i in range(n - length * 2 + 1):\n            substring = text[i:i + length]\n            if text[i + length:i + length * 2] == substring * 2:\n                ans += 1\n    return ans\n```",
  "306": "def combinationSum4(nums, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    return dp[target]",
  "307": "import random\nimport math\n\ndef soupServings(N):\n    N = (N + 24) // 25\n    if N >= 179: return 1.0\n    memo = {}\n    def dp(a, b):\n        if (a, b) in memo: return memo[(a, b)]\n        if a <= 0 and b > 0: return 1\n        if a <= 0 and b <= 0: return 0.5\n",
  "309": "def longestArithSeqLength(A):\n    n = len(A)\n    dp = {}\n    for i in range(n):\n        for j in range(i):\n            diff = A[i] - A[j]\n            dp[(i, j, diff)] = dp.get((j, i, diff), 1) + 1\n    return max(dp.values())",
  "311": "def candy(ratings):\n    n = len(ratings)\n    candies = [1] * n\n    for i in range(1, n):\n        if ratings[i] > ratings[i - 1]:\n            candies[i] = candies[i - 1] + 1\n    for i in range(n - 2, -1, -1):\n        if ratings[i] > ratings[i + 1]:\n            candies[i] = max(candies[i], candies[i +",
  "312": "def shortest_subarray(A, K):\n    n = len(A)\n    left = 0\n    curr_sum = 0\n    min_len = float('inf')\n    \n    for right in range(n):\n        curr_sum += A[right]\n        \n        while curr_sum >= K:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= A[left]\n            left += 1\n            \n    return min_len if min_len != float('inf') else -",
  "313": "def minDays(bloomDay, m, k):\n    n = len(bloomDay)\n    def check(x):\n        cnt = 0\n        for i in range(n):\n            if bloomDay[i] <= x:\n                cnt += 1\n                if cnt == k:\n                    cnt, k = 1, 0\n            else:\n                cnt = 0\n        return cnt >= k * m\n\n    left, right = 1, max(bloomDay)\n   ",
  "314": "class Solution:\n    def numSub(self, s: str) -> int:\n        MOD = 10**9 + 7\n        count = 0\n        result = 0\n        for c in s:\n            if c == '1':\n                count += 1\n                result += count\n            else:\n                count = 0\n        return result % MOD",
  "315": "def minimumSwap(s1, s2):\n    x, y = 0, 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            if c1 == 'x':\n                x += 1\n            else:\n                y += 1\n    if (x + y) % 2 == 0:\n        ans = x // 2 + y // 2\n        if x % 2 ==",
  "316": "def longestHappyPrefix(s):\n    n = len(s)\n    for i in range(n // 2, -1, -1):\n        prefix = s[:i]\n        if s.endswith(prefix):\n            return prefix\n    return \"\"",
  "317": "def numPermsDiSequence(S):\n    MOD = 10**9 + 7\n    n = len(S)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(i + 1):\n            if S[i] == 'D':\n                dp[i + 1][j + 1] += dp[i][",
  "318": "def maxSliceSum(slices):\n    n = len(slices)\n    total_sum = sum(slices)\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(3 * i, 3 * i + n, 3):\n            current_sum += slices[j % n]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n    return",
  "319": "def stoneGameIII(A):\n    n = len(A)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + A[i]\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp[i] = prefix[n] - prefix[i] - dp[min(i + 1, i + 4",
  "320": "def minOperations(nums):\n    operations = 0\n    for num in nums:\n        operations += num.bit_length() - 1\n    return operations",
  "321": "```python\nclass Solution:\n    def checkBreak(self, s1: str, s2: str) -> bool:\n        return sorted(s1) >= sorted(s2) or sorted(s2) >= sorted(s1)\n```",
  "322": "def minPatches(nums, n):\n    i = patch = reach = 0\n    while reach < n:\n        if i < len(nums) and nums[i] <= reach + 1:\n            reach += nums[i]\n            i += 1\n        else:\n            reach += reach + 1\n            patch += 1\n    return patch",
  "323": "```python\ndef is_interleaved(s1, s2, s3):\n    if len(s1) + len(s2) != len(s3):\n        return False\n\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    dp[0][0] = True\n    for i in range(1, len(s1) + 1):\n        dp[i][0] = dp[i",
  "324": "def nextGreaterElement(n: int) -> int:\n    digits = [int(i) for i in str(n)]\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j",
  "325": "def maxDistance(grid):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = []\n    max_distance = -1\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                queue.append((i, j, 0))\n\n    while queue:\n        x, y",
  "326": "```python\ndef convert(s, numRows):\n    if numRows == 1 or numRows >= len(s):\n        return s\n    rows = [''] * numRows\n    index, step = 0, 1\n    for char in s:\n        rows[index] += char\n        if index == 0:\n            step = 1\n        elif index == numRows - 1:\n            step = -1\n        index += step\n    return ''.join(rows)\n```",
  "327": "```python\ndef lengthOfLongestSubstring(s: str) -> int:\n    char_set = set()\n    left = 0\n    max_len = 0\n    \n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\nprint(lengthOfLongestSubstring(\"",
  "328": "class Solution:\n    def find132pattern(self, nums: list[int]) -> bool:\n        s3 = float('-inf')\n        stack = []\n        for n in reversed(nums):\n            if n < s3: return True\n            while stack and stack[-1] < n:\n                s3 = stack.pop()\n            stack.append(n)\n        return False",
  "331": "def angleClock(hour, minutes):\n    hour_angle = (hour % 12 + minutes / 60) * 30\n    minute_angle = minutes * 6\n    return abs(hour_angle - minute_angle)",
  "332": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        def expand(left, right):\n            count = 0\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                count += 1\n                left -= 1\n                right += 1\n            return count\n\n        res = 0\n        for i in range(len(s)):\n            res += expand(i, i)  # odd length\n           ",
  "333": "def minJumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    maxReach = arr[0]\n    step = arr[0]\n    jumps = 1\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n\n        maxReach = max(maxReach, i + arr[i])\n        step -= 1\n\n        if step == 0:\n            jumps += 1\n",
  "334": "```python\ndef minimumDeleteSum(s, cost):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == s[i - 2]:\n            dp[i][i] = dp[i - 1][i - 1] + cost[i - 1]\n        else:\n            dp[i][i",
  "335": "def canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef maxWeight(steelR",
  "336": "```python\ndef minSteps(s, t):\n    count_s = {}\n    count_t = {}\n    \n    for char in s:\n        if char in count_s:\n            count_s[char] += 1\n        else:\n            count_s[char] = 1\n            \n    for char in t:\n        if char in count_t:\n            count_t[char] += 1\n        else:\n            count_t[char] = 1\n            \n    steps = 0\n    for char in count",
  "337": "def canCompleteCircuit(gas, cost):\n    n = len(gas)\n    total_gas = [gas[i] - cost[i] for i in range(n)]\n    tank = 0\n    start = 0\n    for i in range(n):\n        tank += total_gas[i]\n        if tank < 0:\n            start = i + 1\n            tank = 0\n    return start if tank >= 0 else -1",
  "339": "def count_triplets(nums1, nums2):\n    def count_type1(nums1, nums2):\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                for k in range(j + 1, len(nums2)):\n                    if nums1[i] ** 2 == nums2[j] * nums2[k]:\n                        count += 1\n        return count\n\n    def count_type2(nums1, nums2):\n       ",
  "340": "```python\ndef simplify_path(path):\n    stack = []\n    components = path.split(\"/\")\n    for component in components:\n        if component == \"..\":\n            if stack:\n                stack.pop()\n        elif component != \"\" and component != \".\":\n            stack.append(component)\n    return \"/\" + \"/\".join(stack)\n\nprint(simplify_path(\"/home/\"))\nprint(simplify_path(\"/a/./b/../../c/\"))\nprint(simplify_path(\"/../\"))\nprint(simplify_path(\"/home//foo/",
  "341": "def nthUglyNumber(n):\n    ugly = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(ugly) < n:\n        ugly.append(min(2*ugly[i2], 3*ugly[i3], 5*ugly[i5]))\n        if ugly[-1] == 2*ugly[i2]: i2 += 1\n        if ugly[-1] == 3",
  "342": "def countBattleships(board):\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'X' and (i == 0 or board[i-1][j] == '.') and (j == 0 or board[i][j-1] == '.'):\n                count += 1\n    return count",
  "343": "```python\nimport math\n\ndef numSquares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n#",
  "344": "def minDeletionSize(strs)\n    count = 0\n    for col in zip(*strs)\n        if sorted(col) != list(col)\n            count += 1\n    end\n    return count",
  "346": "def numberOfSubarrays(nums, k):\n    odd_count = {0: 1}\n    odd_sum = 0\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd_sum += 1\n        count += odd_count.get(odd_sum - k, 0)\n        odd_count[odd_sum] = odd_count.get(odd_sum, 0) + 1\n    return count",
  "347": "def checkInclusion(s1, s2):\n    if len(s1) > len(s2):\n        return False\n\n    s1_count = [0] * 26\n    s2_count = [0] * 26\n\n    for i in range(len(s1)):\n        s1_count[ord(s1[i]) - ord('a')] += 1\n        s2_count[ord(s2[i]) - ord('a')] += 1\n\n    for i in",
  "348": "def maximumSum(arr):\n    n = len(arr)\n    dp1 = [0] * n\n    dp2 = [0] * n\n    dp1[0] = arr[0]\n    dp2[0] = max(0, arr[0])\n    for i in range(1, n):\n        dp1[i] = max(dp1[i-1], dp2[i-1] + arr[i])\n        dp2[i] = max(dp2[i",
  "349": "def deleteAndEarn(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_num = max(count.keys())\n    dp = [0] * (max_num + 1)\n    dp[1] = count[1]\n    for i in range(2, max_num + 1):\n        dp[i] = max(dp[i-1], dp[i",
  "350": "def subarraysWithKDistinct(A, K):\n    def atMostK():\n        left = 0\n        count = 0\n        freq = {}\n        for right in range(len(A)):\n            freq[A[right]] = freq.get(A[right], 0) + 1\n            while len(freq) > K:\n                freq[A[left]] -= 1\n                if freq[A[left]] == 0:\n                    del freq[A[left]]\n                left += 1\n            count +=",
  "351": "def brokenCalculator(X, Y):\n    if X == Y: return 0\n    if Y < X: return X - Y\n    queue = [(X, 0)]\n    visited = set([X])\n    while queue:\n        num, step = queue.pop(0)\n        if num == Y: return step\n        queue.append((num * 2, step + 1))\n        if num + 1 != Y and num + 1 not in visited:\n            queue",
  "352": "def longestStrChain(words):\n    words.sort(key=len)\n    dp = {}\n    max_len = 0\n    for word in words:\n        dp[word] = 1\n        for i in range(len(word)):\n            prefix = word[:i] + word[i+1:]\n            if prefix in dp:\n                dp[word] = max(dp[word], dp[prefix] + 1)\n        max_len = max(max_len, dp[word])\n    return max_len",
  "353": "class Solution:\n    def numSubseq(self, nums: list[int], target: int) -> int:\n        nums.sort()\n        left, right = 0, len(nums) - 1\n        res = 0\n        mod = 10**9 + 7\n        while left <= right:\n            if nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                res += 2**left\n                left += 1\n       ",
  "354": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[0]*16 for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            for j in range(16):\n                for k in range(1, rollMax[j-1]+1):\n                    if j+k",
  "355": "def findKthNumber(n, k):\n    node, k = 1, 0\n    while k < n:\n        if k + (node * (node + 1)) // 2 <= n:\n            k += (node * (node + 1)) // 2\n            node += 1\n        else:\n            right = node * (node + 1) // 2\n            left = right - (node - 1) * node // ",
  "356": "def searchMatrix(matrix, target):\n    if not matrix or not matrix[0]:\n        return False\n\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    return False",
  "357": "def maxDistToClosest(seats):\n    ones = [i for i, x in enumerate(seats) if x == 1]\n    return max((ones[i] - ones[i-1]) // 2 for i in range(1, len(ones))) or max(ones[i] - ones[0] for i in range(len(ones))) or len(seats) - 1 - ones[-1]",
  "358": "```python\ndef findReplaceString(S, indexes, sources, targets):\n    n = len(S)\n    res = list(S)\n    for i, source, target in sorted(zip(indexes, sources, targets), key=lambda x: x[0]):\n        if S[i:i+len(source)] == source:\n            res[i] = target\n            for j in range(i+1, i+len(source)):\n                res[j] = ''\n    return ''.join(res)\n\nS = \"abcd\"\n",
  "359": "class Solution:\n    def minFallingPathSum(self, A: list[list[int]]) -> int:\n        if not A or not A[0]:\n            return 0\n        n = len(A)\n        for i in range(1, n):\n            for j in range(n):\n                if j == 0:\n                    A[i][j] += min(A[i-1][j], A[i-1][j+1])\n                elif j == n - 1:\n                   ",
  "360": "def shipWithinDays(weights, D):\n    def can_ship(capacity, D):\n        days = 1\n        curr_weight = 0\n        for weight in weights:\n            curr_weight += weight\n            if curr_weight > capacity:\n                days += 1\n                curr_weight = weight\n            if days > D:\n                return False\n        return True\n\n    left, right = max(weights), sum(weights)\n    while left < right:\n        mid = (left + right)",
  "361": "def numSquares(n, m):\n    def is_square(x):\n        return int(x**0.5)**2 == x\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def dfs(x, y):\n        if x == 0 and y == 0:\n            return 0\n        if x < 0 or y < 0:\n            return float('inf')\n        if dp[x][",
  "362": "from math import factorial\nfrom functools import reduce\nfrom operator import mul\n\ndef numberWays(hats):\n    n = len(hats)\n    m = max(len(hat) for hat in hats)\n    mod = 10**9 + 7\n    total = reduce(mul, range(1, m+1), 1)\n    for hat in hats:\n        total //= factorial(len(hat))\n    return total % mod",
  "363": "def numEnclaves(grid):\n    rows, cols = len(grid), len(grid[0])\n    def dfs(r, c):\n        if r<0 or c<0 or r==rows or c==cols or grid[r][c]==0:\n            return\n        grid[r][c] = 0\n        dfs(r-1, c)\n        dfs(r+1, c)\n        dfs(r, c-1)\n        dfs(r, c+1)\n    for i",
  "364": "def canMeasureWater(x, y, z):\n    if x + y < z:\n        return False\n    if x == z or y == z or x + y == z:\n        return True\n    if z % gcd(x, y) == 0:\n        return True\n    return False\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
  "365": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        last = {chr(97 + i): (-1, -1) for i in range(26)}\n        ans = 0\n        for i, c in enumerate(s):\n            first, second = last[c]\n            ans += (i - second) * (second - first)\n            last[c] = (second, i)\n        for c in last:\n            first, second = last[c",
  "366": "```python\ndef longest_substring(s, k):\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        char_count = {}\n        for j in range(i, n):\n            char_count[s[j]] = char_count.get(s[j], 0) + 1\n            if all(count >= k for count in char_count.values()):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\nprint(long",
  "367": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    ptr1 = nums[0]\n    ptr2 = slow\n    while ptr1 != ptr2:\n        ptr1 = nums[ptr1]\n        ptr2 = nums[ptr2]\n    return ptr1",
  "368": "def maxSatisfaction(satisfaction):\n    satisfaction.sort(reverse=True)\n    total = 0\n    sum_val = 0\n    for i in satisfaction:\n        if sum_val + i <= 0:\n            break\n        sum_val += i\n        total += sum_val\n    return total",
  "372": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for j in range(1, len(p) + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n       ",
  "374": "def smallestStringWithWildcards(A):\n    n = len(A)\n    m = max(len(s) for s in A)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1][j - 1] in A[i - 1]:\n                dp[i][j]",
  "375": "def maximumGap(nums):\n    if len(nums) < 2:\n        return 0\n    min_val, max_val = min(nums), max(nums)\n    bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))\n    bucket_num = (max_val - min_val) // bucket_size + 1\n    buckets = [[float('inf'), float('-inf')] for _ in range(bucket_num)]\n    for num in nums:\n       ",
  "376": "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(1, n):\n        dp[i][i-1] = A[i-1] * A[i]\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n           ",
  "378": "def canPartition(nums):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum",
  "379": "class Solution:\n    def maxSum(self, nums1: list[int], nums2: list[int]) -> int:\n        MOD = 10**9 + 7\n        i, j = len(nums1)-1, len(nums2)-1\n        sum1, sum2 = 0, 0\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                sum1 += nums1[i]\n                i -= ",
  "381": "```python\ndef minSubArrayLen(s, nums):\n    if not nums:\n        return 0\n\n    left = 0\n    min_len = float('inf')\n    curr_sum = 0\n\n    for right in range(len(nums)):\n        curr_sum += nums[right]\n\n        while curr_sum >= s:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len",
  "382": "def findPeakElement(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left",
  "383": "def minMalwareSpread(graph, initial):\n    n = len(graph)\n    initial_counts = {}\n    for node in initial:\n        initial_counts[node] = graph[node].count(1)\n\n    def dfs(node, visited):\n        if node in visited: return 0\n        visited.add(node)\n        count = 1\n        for i in range(n):\n            if graph[node][i] == 1 and i not in visited:\n                count += dfs(i, visited)\n        return",
  "384": "def sumSubseqWidths(A):\n    n = len(A)\n    A.sort()\n    ans = 0\n    mod = 10**9 + 7\n    for i in range(n):\n        p = 1\n        for j in range(i+1, n):\n            ans = (ans + (A[j] - A[i]) * p) % mod\n            p = (p * 2) % mod\n    return ans",
  "385": "def kth_factor(n, k):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return factors[k - 1] if k <= len(factors) else -1",
  "386": "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10**9 + 7\n        dp = [0]*5\n        dp[0] = 1\n        for _ in range(n-1):\n            ndp = [0]*5\n            ndp[0] = (dp[1] + dp[2] + dp[4]) % MOD\n            ndp[1] = (dp[",
  "387": "```python\nfrom collections import defaultdict\nfrom functools import cmp_to_key\n\ndef rankTeams(votes):\n    n = len(votes[0])\n    count = defaultdict(lambda: [0] * n)\n    for vote in votes:\n        for i, c in enumerate(vote):\n            count[c][i] += 1\n\n    def compare(a, b):\n        for i in range(n):\n            if count[a][i] > count[b][i]:\n                return 1\n",
  "388": "def hIndex(citations):\n    n = len(citations)\n    citations.sort(reverse=True)\n    for i in range(n):\n        if citations[i] < i + 1:\n            return i\n    return n",
  "389": "def canEqualAverage(A):\n    even_sum, odd_sum = 0, 0\n    even_count, odd_count = 0, 0\n    for num in A:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    if even_count == odd_count and even_sum != odd_sum:\n        return False\n    return even_count !=",
  "390": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        dp = [False] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, int(i ** 0.5) + 1):\n                if not dp[i - j * j]:\n                    dp[i] = True\n                    break\n        return dp[n]",
  "391": "def getMaxM(s1, n1, s2, n2):\n    s1 = s1 * (n1 // len(s1)) + s1[:n1 % len(s1)]\n    i = 0\n    for c in s2:\n        while i < n1 and s1[i] != c:\n            i += 1\n        if i == n1:\n            return -1\n        i += 1\n    return i // (n2 //",
  "392": "def numWays(s):\n    MOD = 10**9 + 7\n    n = len(s)\n    ones = [0] * (n + 1)\n    for i in range(n):\n        ones[i + 1] = ones[i] + (s[i] == '1')\n    res = 0\n    for i in range(ones[-1] // 3):\n        if (ones[i * 3 + 1] == ones[i * ",
  "393": "def nthUglyNumber(n, a, b, c):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def check(mid):\n        return mid % a + mid % b + mid % c - mid >= n\n\n    left, right = 1, 2 * 10**9\n    while left <",
  "394": "def min_moves(nums):\n    return sum(abs(num - sum(nums) // len(nums)) for num in nums)",
  "395": "def oddEvenJumps(A):\n    n = len(A)\n    dp = [[False] * n for _ in range(2)]\n    dp[1][n - 1] = True\n    stack = [n - 1]\n    for i in range(n - 2, -1, -1):\n        for j in stack:\n            if A[j] >= A[i]:\n                dp[0][i] = dp[1][j]\n                dp[1][",
  "396": "def smallestRepunitDivByK(K):\n    if K % 2 == 0 or K % 5 == 0: return -1\n    n = 0\n    for i in range(1, K + 1):\n        n = (n * 10 + 1) % K\n        if n == 0: return i",
  "397": "def countDigitOne(n: int) -> int:\n    ans = 0\n    i = 1\n    while i <= n:\n        divider = i * 10\n        ans += (n // divider) * i + min(max(n % divider - i + 1, 0), i)\n        i *= 10\n    return ans",
  "398": "def subarraySum(nums, k):\n    count = 0\n    prefix_sum = {0: 1}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        count += prefix_sum.get(current_sum - k, 0)\n        prefix_sum[current_sum] = prefix_sum.get(current_sum, 0) + 1\n    return count",
  "399": "def numDecodings(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        if s[i - 1] != '0':\n            dp[i] += dp[i - 1]\n        if '10' <= s",
  "400": "```python\ndef largestRectangleArea(heights):\n    stack = []\n    max_area = 0\n    heights.append(0)\n    for i, h in enumerate(heights):\n        while stack and heights[stack[-1]] > h:\n            last = stack.pop()\n            max_area = max(max_area, heights[last] * (i - stack[-1] - 1))\n        stack.append(i)\n    return max_area\n\nprint(largestRectangleArea([2,1,5",
  "403": "def increasingTriplet(nums):\n    first = second = float('inf')\n    for num in nums:\n        if num <= first:\n            first = num\n        elif num <= second:\n            second = num\n        else:\n            return True\n    return False",
  "404": "class Solution:\n    def largestSumOfAverages(self, A: list[int], K: int) -> float:\n        n = len(A)\n        dp = [[0.0] * (K + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][1] = sum(A[:i]) / i\n        for j in range(2, K + 1):\n            for i in range",
  "405": "def new21Game(N, K, W):\n    dp = [0.0] * (N + 1)\n    dp[0] = 1.0\n    for i in range(1, N + 1):\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1] * (W - (i - 1) % W) / W\n        if i - K >= 0:\n            dp[i] -=",
  "406": "```python\nfrom collections import deque\n\ndef ladder_length(beginWord, endWord, wordList):\n    word_set = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = set([beginWord])\n\n    while queue:\n        word, length = queue.popleft()\n        if word == endWord:\n            return length\n        for i in range(len(word)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                next_word = word[:i] + c + word[i+",
  "407": "def scoreOfParentheses(S):\n    stack = []\n    for c in S:\n        if c == '(':\n            stack.append(0)\n        else:\n            val = max(1, sum(stack) // 2)\n            stack = [val] + stack[:-1]\n    return sum(stack)",
  "408": "def findBestValue(arr, target):\n    arr.sort()\n    left, right = 0, arr[-1]\n    while left <= right:\n        mid = (left + right) // 2\n        total = sum(min(x, mid) for x in arr)\n        if total == target:\n            return mid\n        elif total < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    diff = abs(target - sum(min(x",
  "409": "class Solution:\n    def kConcatenationMaxSum(self, arr: list[int], k: int) -> int:\n        MOD = 10**9 + 7\n        n = len(arr)\n        max_sum = max_subarray_sum = prefix_sum = suffix_sum = 0\n\n        for num in arr:\n            prefix_sum = max(prefix_sum + num, num)\n            max_sum = max(max_sum, prefix_sum)\n\n        for num in reversed(arr):\n            suffix_sum =",
  "411": "```python\nclass Solution:\n    def wordBreak(self, s: str, wordDict: list[str]) -> bool:\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(len(s)):\n            if dp[i]:\n                for j in range(i, len(s)):\n                    if s[i:j+1] in wordDict:\n                        dp[j+1] = True\n        return dp[-1]\n```",
  "412": "class Solution:\n    def numRollsToTarget(self, d: int, f: int, target: int) -> int:\n        MOD = 10**9 + 7\n        @cache\n        def dp(i, s):\n            if i == 0 and s == target: return 1\n            if i == 0 or s > target: return 0\n            res = 0\n            for x in range(1, f+1):\n                res +=",
  "413": "def breakPalindrome(palindrome):\n    n = len(palindrome)\n    if n == 1:\n        return \"\"\n    chars = list(palindrome)\n    for i in range(n // 2):\n        if chars[i] > 'a':\n            chars[i] = 'a'\n            return ''.join(chars)\n    chars[-1] = 'b'\n    return ''.join(chars)",
  "414": "def getWinner(arr, k):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            arr.append(arr.pop(i))\n        else:\n            arr.pop(i)\n    return arr[0]",
  "415": "def minSwap(A, B):\n    n = len(A)\n    swaps = 0\n    alreadySwapped = [False] * n\n    for i in range(n):\n        if A[i] < B[i] and not alreadySwapped[i]:\n            swaps += 1\n            alreadySwapped[i] = True\n            alreadySwapped[i-1] = True\n    return swaps",
  "417": "def findMedianSortedArrays(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    if m > n:\n        nums1, nums2, m, n = nums2, nums1, n, m\n    imin, imax, half_len = 0, m, (m + n + 1) // 2\n    while imin <= imax:\n        i = (imin + imax) // 2\n       ",
  "418": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            elif n % 4 == 1 or n == 3:\n                n -= 1\n            else:\n                n += 1\n            count += 1\n        return count",
  "419": "def bulbSwitch(n):\n    return int(n ** 0.5)",
  "420": "```python\ndef findTheLongestSubstring(s: str) -> int:\n    vowels = 'aeiou'\n    dp = {0: -1}\n    max_len = 0\n    mask = 0\n    for i, c in enumerate(s):\n        if c in vowels:\n            mask ^= 1 << (vowels.index(c))\n        if mask not in dp:\n            dp[mask] = i\n        max_len = max(max_len, i - dp[mask])\n",
  "421": "def lastSubstring(s):\n    n = len(s)\n    max_idx = 0\n    max_char = s[0]\n    for i in range(1, n):\n        if s[i] >= max_char:\n            max_char = s[i]\n            max_idx = i\n        elif s[i] < max_char and s[i] > s[max_idx - 1]:\n            max_idx = s.rfind(s[i], 0, max_idx)\n    return s[max_idx:]",
  "422": "```python\ndef longest_palindrome(s: str) -> str:\n    def expand_around_center(s: str, left: int, right: int) -> str:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        palindrome1 = expand_around_center(s, i,",
  "423": "def longestSubsequence(arr, difference):\n    dp = {}\n    for num in arr:\n        dp[num] = dp.get(num - difference, 1) + 1\n    return max(dp.values())",
  "425": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        MIN_INT, MAX_INT = -2**31, 2**31 - 1\n        sign = -1 if (dividend < 0) ^ (divisor < 0) else 1\n        dividend, divisor = abs(dividend), abs(divisor)\n        quotient = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n           ",
  "426": "def isPowerOfTwo(n):\n    count = 0\n    while n > 0:\n        count += n % 2\n        n //= 2\n    return count == 1",
  "427": "```python\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        MOD = 10**9 + 7\n        return (self.factorial(2 * n) // (self.factorial(n) ** 2)) % MOD\n\n    def factorial(self, n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result = (result * i) % (10**9 +",
  "429": "def getHint(secret, guess):\n    bulls = 0\n    cows = 0\n    secret_count = {}\n    guess_count = {}\n    \n    for s, g in zip(secret, guess):\n        if s == g:\n            bulls += 1\n        else:\n            secret_count[s] = secret_count.get(s, 0) + 1\n            guess_count[g] = guess_count.get(g, 0) + 1\n    \n    for s, g in zip(secret",
  "430": "class Solution:\n    def countDistinctSubsequences(self, S: str) -> int:\n        MOD = 10**9 + 7\n        n = len(S)\n        dp = [[0]*26 for _ in range(n+1)]\n        for i in range(n-1, -1, -1):\n            for j in range(26):\n                if j == ord(S[i]) - ord('a'):\n                    dp[i][j] = dp[i+1][j]",
  "431": "class Solution:\n    def sumSubarrayMins(self, A):\n        stack = []\n        n = len(A)\n        MOD = 10**9 + 7\n        right = [0]*n\n        for i in range(n):\n            while stack and A[stack[-1]] >= A[i]:\n                stack.pop()\n            right[i] = i + (stack and stack[-1])\n            stack.append(i)\n        stack = []\n        for i in range(n-1,",
  "432": "def isPossibleDivide(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in sorted(count):\n        if count[num] > 0:\n            for i in range(k):\n                if num + i in count and count[num + i] > 0:\n                    count[num + i] -= 1\n                else:\n                    return False",
  "433": "def numOfSubarrays(arr, k, threshold):\n    n = len(arr)\n    if k > n: return 0\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    count = 0\n    for i in range(k, n + 1):\n        if (prefix_sum[i] - prefix_sum[i - k]) / k >= threshold",
  "434": "def longestSubarray(nums):\n    n = len(nums)\n    max_len = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if nums[j] == 1:\n                count += 1\n            else:\n                max_len = max(max_len, count)\n                count = 0\n        max_len = max(max_len, count)\n    return max_len",
  "436": "def minDays(n: int) -> int:\n    def dfs(n: int, visited: set) -> int:\n        if n == 0:\n            return 0\n        if n in visited:\n            return float('inf')\n        visited.add(n)\n        return 1 + min(dfs(n-1, visited), dfs(n//2, visited), dfs(n//3, visited) if n % 3 == 0 else float('inf'))\n\n    return dfs(n, set",
  "437": "def decode_string(S, K):\n    stack = []\n    curr_num = 0\n    curr_str = ''\n    for c in S:\n        if c.isdigit():\n            curr_num = curr_num * 10 + int(c)\n        elif c == '#':\n            stack.append(curr_str)\n            stack.append(curr_num)\n            curr_str = ''\n            curr_num = 0\n        else:\n            curr_str += c\n    curr_str = curr_str[:K]\n    ans = ''\n   ",
  "438": "def findLatestStep(arr, m):\n    n = len(arr)\n    prefix = [0] * (n + 2)\n    for num in arr:\n        prefix[num + 1] += 1\n        prefix[num - 1] += 1\n        prefix[num] -= 2\n    for i in range(1, n + 2):\n        prefix[i] += prefix[i - 1]\n    for i in range(1, n + 2):\n",
  "439": "def maxTurbulenceSize(arr):\n    n = len(arr)\n    res = 1\n    i = 0\n    while i < n - 1:\n        j = i + 1\n        while j < n and (arr[j-1] < arr[j] and (j-i)%2 == 1) or (arr[j-1] > arr[j] and (j-i)%2 == 0):\n            j += 1\n        res = max",
  "440": "def mirrorReflection(p, q)\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    a = p // gcd(p, q)\n    b = q // gcd(p, q)\n    return 1 - (a % 2) - (b % 2)",
  "441": "def num_sums(n):\n    count = 0\n    for start in range(1, n):\n        total = 0\n        for num in range(start, n):\n            total += num\n            if total == n:\n                count += 1\n                break\n    return count",
  "442": "def minSwaps(grid):\n    n = len(grid)\n    ones = [sum(row[i:] for i in range(n) if i <= j) for j in range(n)]\n    swaps = 0\n    for i in range(n):\n        if ones[i] > i:\n            swaps += ones[i] - i\n            ones[i:] = ones[i+1:] + ones[i]\n    return swaps if swaps <= n*(n-1)//2 else -1",
  "444": "def nth_personGetsNth_seat(n):\n    return 0.5 ** (n - 1)",
  "445": "def minimumDifference(nums):\n    nums.sort()\n    n = len(nums)\n    min_diff = float('inf')\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                diff = nums[k] - nums[i]\n                min_diff = min(min_diff, diff)\n                if min_diff == 0:\n                    return 0\n    return min_diff",
  "446": "def findLeastNumOfUniqueInts(arr, k):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    count = sorted(count.values())\n    i = 0\n    while k >= count[i] and i < len(count):\n        k -= count[i]\n        i += 1\n    return len(count) - i",
  "447": "```python\nfrom collections import Counter\n\ndef removeDuplicateLetters(s):\n    last_occurrence = {char: idx for idx, char in enumerate(s)}\n    count = Counter(s)\n    stack = []\n    seen = set()\n\n    for idx, char in enumerate(s):\n        count[char] -= 1\n        if char in seen:\n            continue\n        while stack and char < stack[-1] and count[stack[-1]] > 0 and last_occurrence[stack[-1",
  "448": "def check_subarray_sum(nums, k):\n    prefix_sum = 0\n    seen = {0: -1}\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if (prefix_sum - k) in seen and i - seen[prefix_sum - k] >= 2:\n            return True\n        if prefix_sum % k == 0 and i >= 1:\n            return True\n        seen[prefix_sum] = i\n    return False",
  "449": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]",
  "452": "```python\ndef minDifficulty(jobDifficulty, d):\n    n = len(jobDifficulty)\n    if n < d: return -1\n\n    @lru_cache(None)\n    def dp(i, days):\n        if i >= n: return 0\n        if days == 1: return max(jobDifficulty[i:n])\n\n        res = float('inf')\n        for j in range(i, n - days + 1):\n            res = min(res, max(jobDifficulty[i:j+1",
  "453": "class Solution:\n    def minCost(self, houses, cost, m, n, target):\n        dp = [[[float('inf')] * (target + 1) for _ in range(n)] for _ in range(m)]\n        for i in range(min(m, target)):\n            dp[i][houses[i]][1] = cost[i][houses[i]-1] if houses[i] else 0\n        for i in range(min(m, target), m):\n            dp[i][0][",
  "454": "def maximumSwap(num):\n    num = list(str(num))\n    last_seen = {int(digit): i for i, digit in enumerate(num)}\n    for i, digit in enumerate(num):\n        for j in range(9, int(digit), -1):\n            if j in last_seen and last_seen[j] > i:\n                num[i], num[last_seen[j]] = num[last_seen[j]], num[i]\n                return int(''.join(num))\n    return num",
  "456": "def canCross(stones):\n    stone_set = set(stones)\n    def dfs(pos, jump):\n        if pos == stones[-1]:\n            return True\n        for i in range(jump - 1, jump + 2):\n            if pos + i in stone_set and dfs(pos + i, i):\n                return True\n        return False\n    return dfs(0, 1)",
  "457": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1",
  "458": "class Solution:\n    def minSubarray(self, nums: list[int], p: int) -> int:\n        total = sum(nums)\n        if total % p == 0:\n            return 0\n        target = (total // p + 1) * p\n        dp = {0: -1}\n        for i, x in enumerate(nums):\n            dp.setdefault(x + dp.get(x, 0), i)\n        for s in range(target - 1, total -",
  "459": "def characterReplacement(s, k):\n    n = len(s)\n    max_len = 0\n    max_freq = 0\n    freq = {}\n    \n    left = 0\n    for right in range(n):\n        freq[s[right]] = freq.get(s[right], 0) + 1\n        max_freq = max(max_freq, freq[s[right]])\n        \n        if right - left + 1 - max_freq > k:\n            freq[s[left]] -= 1\n           ",
  "460": "def longestDuplication(A):\n    n = len(A)\n    visited = set()\n    max_len = 0\n    for i in range(n):\n        if i not in visited:\n            path = set()\n            j = i\n            while j not in visited:\n                visited.add(j)\n                path.add(A[j])\n                j = A[j]\n            max_len = max(max_len, len(path))\n    return max_len",
  "461": "```python\nclass Solution:\n    def numOfMinutes(self, n: int, headID: int, manager: list[int], informTime: list[int]) -> int:\n        graph = {i: [] for i in range(n)}\n        for i, m in enumerate(manager):\n            if m != -1:\n                graph[m].append(i)\n\n        def dfs(node: int) -> int:\n            if not graph[node]:\n                return 0\n            return max(dfs(child) +",
  "462": "def countServers(grid):\n    m, n = len(grid), len(grid[0])\n    row_sums, col_sums = [0] * m, [0] * n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]:\n                row_sums[i] += 1\n                col_sums[j] += 1\n    return sum(1 for i in range(m) for j in range(n) if grid[i",
  "464": "def minOperations(n):\n    return n * (n - 1) // 4",
  "465": "def minCut(s):\n    n = len(s)\n    dp = [0] * n\n    palindrome = [[False] * n for _ in range(n)]\n    for i in range(n):\n        palindrome[i][i] = True\n        dp[i] = 0\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s",
  "466": "```python\ndef maskPII(S):\n    if '@' in S:\n        name = S.split('@')[0]\n        local_part = name.split('.')[0]\n        masked_name = local_part[0] + '*****' + local_part[-1] + '@' + S.split('@')[1]\n        return masked_name.lower()\n    else:\n        country_code = ''\n        if len(S) > 10:\n            country_code = S[:len(S) - 10]\n           ",
  "469": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: list[int], rightChild: list[int]) -> bool:\n        parent = {i: c for i, c in zip(range(n), leftChild + rightChild)}\n        root = next(i for i in range(n) if i not in parent)\n        stack = [root]\n        visited = {root}\n        while stack:\n            node = stack.pop()\n            for child in parent:\n                if parent",
  "471": "```python\ndef numIslands(grid):\n    if not grid:\n        return 0\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid, i, j):\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid",
  "472": "def canReach(arr, start):\n    n = len(arr)\n    visited = set()\n    def dfs(i):\n        if i < 0 or i >= n or i in visited:\n            return False\n        if arr[i] == 0:\n            return True\n        visited.add(i)\n        return dfs(i + arr[i]) or dfs(i - arr[i])\n    return dfs(start)",
  "473": "class Solution:\n    def countTriplets(self, arr: list[int]) -> int:\n        n = len(arr)\n        prefix_xor = [0] * (n + 1)\n        for i in range(n):\n            prefix_xor[i + 1] = prefix_xor[i] ^ arr[i]\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                a = prefix_xor[i] ^ prefix_xor[j + 1]\n               ",
  "474": "from itertools import combinations\nfrom collections import Counter\n\ndef maxScoreWords(words, letters, score):\n    def is_valid(word, letters):\n        for c in word:\n            if letters[c] == 0:\n                return False\n            letters[c] -= 1\n        return True\n\n    def backtrack(words, letters, score, path):\n        if not words:\n            return 0\n        max_score = 0\n        for i, word in enumerate(words):\n            if is_valid",
  "476": "def carFleet(target, position, speed):\n    n = len(position)\n    fleets = [(target - p) / s for p, s in zip(position, speed)]\n    fleets.sort(reverse=True)\n    ans = 1\n    mx = fleets[0]\n    for i in range(1, n):\n        if fleets[i] < mx:\n            ans += 1\n            mx = fleets[i]\n    return ans",
  "477": "def findKthBit(n, k):\n    def reverse(s):\n        return s[::-1]\n    def invert(s):\n        return ''.join('1' if c == '0' else '0' for c in s)\n    s = '0'\n    for _ in range(n):\n        s = s + '1' + reverse(invert(s))\n    return s[k-1]",
  "478": "def singleNumber(nums):\n    ones, twos = 0, 0\n    for num in nums:\n        twos |= ones & num\n        ones ^= num\n        threes = ones & twos\n        ones &= ~threes\n        twos &= ~threes\n    return ones",
  "479": "def leastBricks(wall):\n    width_count = {}\n    for row in wall:\n        width = 0\n        for brick in row[:-1]:\n            width += brick\n            width_count[width] = width_count.get(width, 0) + 1\n    return max(width_count.values(), default=0)",
  "480": "def numWays(steps, arrLen):\n    MOD = 10**9 + 7\n    dp = [0] * (steps + 1)\n    dp[0] = 1\n    for i in range(1, steps + 1):\n        for j in range(1, min(i + 1, arrLen)):\n            dp[i] = (dp[i] + dp[i - j] * 3) % MOD\n    return dp[steps]",
  "482": "class Solution:\n    def mctFromLeafValues(self, arr):\n        n = len(arr)\n        dp = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for d in range(1, n):\n            for l in range(n - d):\n                r = l + d\n                for m in range(l, r):\n                    dp[l][r] = min(dp[l][r",
  "485": "def minKBitFlips(A, K):\n    n = len(A)\n    flips = 0\n    i = 0\n    flip = 0\n    while i < n:\n        if A[i] == 0:\n            if i + K - 1 < n:\n                for j in range(i, min(i + K - 1, n - 1)):\n                    A[j] = 1 - A[j]\n                flips += 1\n                flip ^=",
  "486": "def queryString(S, N):\n    for i in range(1, N + 1):\n        if bin(i)[2:] not in S:\n            return False\n    return True",
  "487": "def longestDiverseString(a, b, c):\n    letters = [['a', a], ['b', b], ['c', c]]\n    result = ''\n    while letters[0][1] > 0 or letters[1][1] > 0 or letters[2][1] > 0:\n        letters.sort(key=lambda x: x[1], reverse=True)\n        if letters[0][1] > 1 and letters[1][1] > 0",
  "488": "class Solution:\n    def kthSmallest(self, matrix, k):\n        n = len(matrix)\n        return sorted([num for row in matrix for num in row])[k-1]",
  "489": "def maximum_width_ramp(A):\n    stack = []\n    max_width = 0\n    for i, x in enumerate(A):\n        while stack and A[stack[-1]] <= x:\n            max_width = max(max_width, i - A.pop(stack.pop()))\n        if not stack:\n            stack.append(i)\n        else:\n            stack.append(stack[-1])\n    return max(max_width, 0)",
  "490": "def canVisitAllRooms(rooms):\n    visited = set()\n    def dfs(room):\n        visited.add(room)\n        for key in rooms[room]:\n            if key not in visited:\n                dfs(key)\n    dfs(0)\n    return len(visited) == len(rooms)",
  "492": "def construct(a, b):\n    return 'a' * a + 'b' * b",
  "493": "def findTargetSumWays(nums, S):\n    dp = {0: 1}\n    for num in nums:\n        temp = {}\n        for s, count in dp.items():\n            temp[s + num] = temp.get(s + num, 0) + count\n            temp[s - num] = temp.get(s - num, 0) + count\n        dp = temp\n    return dp.get(S, 0)",
  "494": "def largest_k(text):\n    n = len(text)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if text[i - 1] == text[j - 1] and (i - j) % 2 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]",
  "495": "def lastStoneWeight(stones):\n    import heapq\n    heap = [-stone for stone in stones]\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        x = -heapq.heappop(heap)\n        y = -heapq.heappop(heap)\n        if x != y:\n            heapq.heappush(heap, -(x-y))\n    return -heap[0] if heap else 0",
  "496": "def minIncrementForUnique(A):\n    A.sort()\n    moves = 0\n    max_val = A[0]\n    for i in range(1, len(A)):\n        if A[i] <= max_val:\n            moves += max_val + 1 - A[i]\n            A[i] = max_val + 1\n        max_val = max(max_val, A[i])\n    return moves",
  "497": "```python\ndef jobScheduling(startTime, endTime, profit):\n    n = len(startTime)\n    jobs = sorted(zip(startTime, endTime, profit))\n    dp = [0] * n\n    for i in range(n):\n        max_profit = 0\n        for j in range(i):\n            if jobs[j][1] <= jobs[i][0]:\n                max_profit = max(max_profit, dp[j])\n        dp[i] = max(max_profit + jobs[i][2], dp[i",
  "498": "class Solution:\n    def rob(self, nums):\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums) - 1):\n           ",
  "499": "def minOperations(target):\n    n = len(target)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + target[i]\n    res = 0\n    for i in range(1, n + 1):\n        res += max(0, prefix[i] - prefix[i - 1])\n    return res",
  "500": "```python\ndef calculate(expression):\n    def apply_operator():\n        op = operators.pop()\n        b = values.pop()\n        a = values.pop()\n        if op == '+':\n            values.append(a + b)\n        elif op == '-':\n            values.append(a - b)\n        elif op == '*':\n            values.append(a * b)\n        elif op == '/':\n            values.append(int(a / b))\n\n    def precedence(op):\n        if op == '+' or op == '-':\n            return",
  "501": "def shortest_palindrome(s):\n    return s[::-1] + s",
  "502": "def minMalwareSpread(graph, initial):\n    n = len(graph)\n    initial_counts = {}\n    for i in initial:\n        initial_counts[i] = initial_counts.get(i, 0) + 1\n\n    def dfs(node, visited):\n        visited.add(node)\n        for i in range(n):\n            if graph[node][i] == 1 and i not in visited:\n                dfs(i, visited)\n\n    infected = set()\n    for i in range(n):\n        visited =",
  "503": "def arrangeWords(text):\n    words = text.split()\n    words = [word.capitalize() for word in words]\n    words.sort(key=lambda x: (len(x), words.index(x)))\n    return ' '.join(words).capitalize()",
  "504": "def reverseParentheses(s):\n    stack = [[]]\n    for c in s:\n        if c == '(':\n            stack.append([])\n        elif c == ')':\n            v = stack.pop()\n            stack[-1] = stack[-1] + v[::-1]\n        else:\n            stack[-1].append(c)\n    return ''.join(stack[0])",
  "505": "def minRemoveToMakeValid(s: str) -> str:\n    stack = []\n    chars = list(s)\n    for i, c in enumerate(chars):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                chars[i] = ''\n    while stack:\n        chars[stack.pop()] = ''\n    return ''.join(chars)",
  "506": "def myAtoi(s: str) -> int:\n    s = s.lstrip()\n    sign = 1\n    if s and s[0] == '-':\n        sign = -1\n        s = s[1:]\n    elif s and s[0] == '+':\n        s = s[1:]\n    res = 0\n    for c in s:\n        if not c.isdigit():\n            break\n        res = res * 10 + ord(c) - ord",
  "507": "def singleElement(nums):\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return nums[low]",
  "508": "```python\nimport bisect\nimport sys\n\nN, Q = map(int, input().split())\nS = []\nT = []\nX = []\nfor _ in range(N):\n    s, t, x = map(int, input().split())\n    S.append(s)\n    T.append(t)\n    X.append(x)\n\nD = list(map(int, input().split()))\n\nX.sort()\nS.sort()\nT.sort()\n\nit = iter(sorted(zip(S, T, X)))\nst, en, x",
  "510": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[0, 0] for _ in range(4 * n)]\n\n    def update(self, node, l, r, i, c):\n        if l == r:\n            self.tree[node][0] = 1 if self.tree[node][1] != c else 0\n            self.tree[node][1] = c\n            return\n        mid = (l",
  "511": "N = int(input())\na = list(map(int, input().split()))\nb = [0] * N\nfor i in range(N):\n    for j in range(N):\n        if i != j:\n            b[i] ^= a[j]\nb = [i ^ (N // 2) for i in b]\nprint(*b)",
  "513": "```python\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        self.n = 0\n        self.a = []\n        self.g = [[] for _ in range(200005)]\n        self.d = [0] * 200005\n        self.f = [0] * 200005\n        self.dp = [0] * 200005\n\n    def dfs(self, u: int, fa: int) -> None:\n",
  "514": "n1 = int(input())\nn2 = int(input())\n\nif n1 > n2:\n    print(n1 - n2)\nelse:\n    print(n1 + n2)",
  "516": "def merge_sort(arr, k):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid], k)\n    right, right_inv = merge_sort(arr[mid:], k)\n\n    merged, merged_inv = merge(left, right, k)\n\n    return merged, left_inv + right_inv + merged_inv\n\n\ndef merge(left, right, k):\n    merged = []\n    i",
  "518": "def solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "520": "```python\ndef ship_class_description():\n    ship_classes = {\n        'B': 'BattleShip',\n        'b': 'BattleShip',\n        'C': 'Cruiser',\n        'c': 'Cruiser',\n        'D': 'Destroyer',\n        'd': 'Destroyer',\n        'F': 'Frigate',\n        'f': 'Frigate'\n    }\n\n    t = int(input())\n    for _ in range(t):\n        ship_id =",
  "521": "import math\nimport sys\n\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    p, q = map(float, input().split())\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dx = x[j] - x[i]\n            dy = q - p\n            if dx == 0:\n                continue\n            angle = 2 * math.atan(abs(dy",
  "522": "def count_triplets(n):\n    return sum(1 for x in range(1, n) for y in range(1, n) if x * y + n - x - y <= n)\n\nn = int(input())\nprint(count_triplets(n))",
  "524": "s = input()\nn = len(s)\npos = [0] * 26\nfor i in range(n):\n    pos[ord(s[i]) - ord('a')] = i + 1\npre = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pre[i] = pre[i - 1] + (pos[i % 26] % 2 == 0)\nq = int(input())\nfor _ in",
  "525": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(a * ((c - b) // a) + b)",
  "526": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    i = 0\n    while i < n:\n        count = 1\n        while i + 1 < n and s[i] == s[i+1]:\n            i += 1\n            count += 1\n        ans += len(s[i].to_bytes(1, 'big')) + len(count.to_bytes(4, 'big'))\n        i += 1\n",
  "528": "def solve():\n    n, l = map(int, input().split())\n    if n == 1:\n        print(l)\n    else:\n        print(2 * (n - 1) + min(n, (l + 1) // 2))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "529": "from fractions import Fraction\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('1/1')\n    else:\n        numerator = n * (n - 1) + 1\n        denominator = n * n\n        print(Fraction(numerator, denominator))",
  "532": "def binary_sequences(N):\n    MOD = 15746\n    if N % 2 == 0:\n        return 0\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n    return dp[N]",
  "533": "```python\nt = int(input())\n\nfor _ in range(t):\n    k, n = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    first_occurrence = -1\n    last_occurrence = -1\n\n    for i in range(n):\n        if arr[i] == k:\n            if first_occurrence == -1:\n                first_occurrence = i + 1\n            last_occurrence = i + 1\n\n    if first",
  "534": "from collections import defaultdict\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    g = defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        g[u].add(v)\n        g[v].add(u)\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, len(g[i]))\n    print(n - ans)\n\nt = int",
  "536": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(min(k // n, k % n + 1))",
  "537": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if abs(a[i] - a[j]) >= k:\n            ans += 1\n\nprint(ans)",
  "538": "def check_guess(S, SG, FG, D, T):\n    distance = (D - 1) * 50\n    speed_S = S\n    speed_FG = FG\n    speed_SG = SG\n\n    speed_other = speed_S + (distance / T) * 3.6\n    diff_SG = abs(speed_other - speed_SG)\n    diff_FG = abs(speed_other - speed_FG)\n\n    if diff_SG < diff_FG:\n",
  "539": "def min_moves(N):\n    return 4 * N - 4\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(min_moves(N))",
  "540": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == m:\n            ans += 1\n            i += 1\n        elif a[i] > m:\n            break\n        else:\n            j = i + 1\n            while j < n and a[j] ==",
  "541": "from collections import defaultdict\nfrom itertools import groupby\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [x for _, x in groupby(a)]\n    d = defaultdict(int)\n    for x in a:\n        d[x] += 1\n    ans = 0\n    for x in d.values():\n        ans = max(ans, (x + 1) // 2)\n    print(ans - 1)\n\n",
  "542": "def count_squares(grid):\n    n, m = len(grid), len(grid[0])\n    count = 0\n    for i in range(n - 3):\n        for j in range(m - 3):\n            square = [grid[i+k][j:j+4] for k in range(4)]\n            if len(set(''.join(square))) == 1:\n                count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n   ",
  "543": "def game_of_truth_and_dare():\n    t = int(input())\n    for _ in range(t):\n        tr = int(input())\n        tr_tasks = set(map(int, input().split()))\n        dr = int(input())\n        dr_tasks = set(map(int, input().split()))\n        ts = int(input())\n        ts_tasks = set(map(int, input().split()))\n        ds = int(input())\n        ds_tasks = set(map(int, input().split()))\n        if tr_tasks.issub",
  "544": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = ''\n    for i in range(0, n, 4):\n        first = int(s[i])\n        second = int(s[i+1])\n        third = int(s[i+2])\n        fourth = int(s[i+3])\n        if first == 0:\n            if second == 0:\n                if third == 0:\n                    if fourth == 0",
  "545": "def chef_dish_of_life(test_cases):\n    for test_case in test_cases:\n        N, K = map(int, test_case[0].split())\n        islands = [list(map(int, island.split()[1:])) for island in test_case[1:]]\n\n        ingredients = set()\n        for island in islands:\n            ingredients.update(island)\n\n        if len(ingredients) < K:\n            print(\"sad\")\n        elif len(ingredients) == K:\n            print(\"all\")\n",
  "546": "def min_bounces(D):\n    count = 0\n    while D > 1:\n        D >>= 1\n        count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    D = int(input())\n    print(min_bounces(D))",
  "548": "def solve(n):\n    return '*' * (n % 2) + '***' * (n // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(''.join(solve(n) for _ in range(n)))",
  "549": "n = int(input())\narr = list(map(int, input().split()))\ncuts = 0\nfor i in range(1, n):\n    for j in range(i):\n        if arr[i] < arr[j]:\n            cuts += 1\n            arr[j], arr[i] = arr[i], arr[j]\n            break\nprint(cuts)",
  "550": "def solve():\n    a, b = map(int, input().split())\n    a_bits = len(bin(a)[2:])\n    b_bits = len(bin(b)[2:])\n    max_ops = max(a_bits, b_bits)\n    b = (b >> (max_ops - b_bits)) << (max_ops - b_bits)\n    ops = 0\n    while True:\n        ops += 1\n        if bin(a)[2:].zfill(max_ops) == bin(b)[2",
  "551": "def find_subsequences(S):\n    n = len(S)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if S[i:j] == S[j:k]:\n                    return \"yes\"\n    return \"no\"\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(find_subsequences(S))",
  "552": "def max_difference(weights, k):\n    weights.sort(reverse=True)\n    chef_weight = sum(weights[k:])\n    son_weight = sum(weights[:k])\n    return chef_weight - son_weight\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    weights = list(map(int, input().split()))\n    print(max_difference(weights, k))",
  "554": "def get_digits(n, k):\n    result = pow(int(n), int(n))\n    first_k = str(result)[:k]\n    last_k = str(result)[-k:]\n    return first_k + ' ' + last_k\n\nt = int(input())\nfor _ in range(t):\n    n, k = input().split()\n    print(get_digits(n, k))",
  "555": "def solve():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(2, n):\n        if nums[i] == nums[i-1] + nums[i-2]:\n            dp[i] = dp[i-1] + 1\n    print(max(dp))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    solve()",
  "557": "import math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    scores = [10] * n\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        for x in range(i-1, j-1):\n            scores[x] *= k\n    print(math.floor(sum(max(scores)) / n))",
  "560": "def competition_result(n, a, b):\n    a.sort()\n    b.sort()\n    a_sum = sum(a[:-1])\n    b_sum = sum(b[:-1])\n    if a_sum < b_sum:\n        return \"Alice\"\n    elif a_sum > b_sum:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b =",
  "561": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in a:\n        if i > k:\n            return \"NO\"\n        k -= i\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "563": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(sum(a[l-1:r]))\n```",
  "564": "def min_rounds(test_cases):\n    for case in test_cases[2::3]:\n        n, k = map(int, case.split()[0].split(' '))\n        costs = list(map(int, case.split()[1].split(' ')))\n        rounds = 1\n        i = 0\n        while i < n - 1:\n            if costs[i + 1] - costs[i] >= k:\n                i += 1\n            else:\n                i += 2",
  "566": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef solve(A, B):\n    for i in range(len(A)):\n        for j in range(len(B)):\n            s1 = A[:i+1]\n            s2 = B[:j+1]\n            if is_palindrome(s1 + s2):\n                return \"Yes\"\n    return \"No\"\n\nt = int(input())\nfor _ in range(t):\n    A = input()\n    B = input()\n    print",
  "567": "def can_finish_painting():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        colors = list(map(int, input().split()))\n        for i in range(n - 2):\n            if colors[i] != colors[i + 1] or colors[i + 1] != colors[i + 2]:\n                print(\"Yes\")\n                break\n        else:\n            if n >= 3 and colors[0] == colors[1] ==",
  "568": "from collections import defaultdict\nimport sys\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            cnt[u] += cnt[v]\n            if cnt[v] % 3 != 0:\n                return False\n            cnt[u] //= 3\n\ndef solve():\n    global adj, cnt\n    adj = defaultdict(list)\n    cnt = [0] * (n + 1)\n    for i in range(n -",
  "569": "def solve():\n    n = int(input())\n    i = 1\n    while n >= i * (i + 1) // 2:\n        n -= i * (i + 1) // 2\n        i += 1\n    return str(n - 1)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "571": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef reduce_recipe(ingredients):\n    result = []\n    gcd_val = ingredients[0]\n    for ingredient in ingredients:\n        gcd_val = gcd(gcd_val, ingredient)\n    for ingredient in ingredients:\n        result.append(ingredient // gcd_val)\n    return ' '.join(map(str, result))\n\nt = int(input())\nfor _ in range(t):\n    n = int",
  "572": "def min_difference():\n    t = int(input())\n    for _ in range(t):\n        n, m, k = map(int, input().split())\n        diff = abs(n - m)\n        if diff <= k:\n            print(0)\n        else:\n            print(diff - k)\n\nmin_difference()",
  "573": "def min_hours(n, m):\n    return max(n - 2, m)\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(min_hours(n, m))",
  "574": "def max_sub_array(nums):\n    max_sum = float('-inf')\n    max_start = max_end = 0\n    current_sum = 0\n    current_start = 0\n\n    for i, num in enumerate(nums):\n        if current_sum <= 0:\n            current_sum = num\n            current_start = i\n        else:\n            current_sum += num\n\n        if current_sum > max_sum or (current_sum == max_sum and i - current_start > max_end - max",
  "575": "def solve(s):\n    n = len(s)\n    max_val = 1\n    min_val = 1\n    for i in range(n):\n        if s[i] == '<':\n            max_val = max(max_val, min_val + 1)\n            min_val += 1\n        elif s[i] == '=':\n            max_val = max(max_val, min_val)\n            min_val += 1\n        else:\n            max_val += 1\n    return max(max",
  "576": "def solve():\n    n = int(input())\n    for _ in range(n):\n        s = input()\n        ans = 0\n        for i in range(len(s)):\n            t = s[:i] + 'a' + s[i+1:]\n            ans += 2 ** t.count('a')\n        print(ans)\n\nsolve()",
  "577": "def can_read(word, known_letters):\n    return all(letter in known_letters for letter in word)\n\nknown_letters = input()\nn = int(input())\nfor _ in range(n):\n    word = input()\n    print('Yes' if can_read(word, known_letters) else 'No')",
  "578": "def solve(N, B):\n    ans = 0\n    i = 1\n    while N >= i * B:\n        ans = max(ans, i * (N // (i * B)))\n        i += 1\n    return ans\n\nT = int(input())\nfor _ in range(T):\n    N, B = map(int, input().split())\n    print(solve(N, B))",
  "581": "def humpy_party():\n    t = int(input())\n    for _ in range(t):\n        k, l, e = map(int, input().split())\n        ages = list(map(int, input().split()))\n        total_age = sum(ages) + e\n        if l % total_age == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nhumpy_party()",
  "583": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        if a[0] >= 0:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        s = sum(a)\n        for i in range(n):\n            s -= (i + 1)\n            if s <= 0:\n                print('YES')\n                break\n        else",
  "584": "def max_circles(s):\n    n = len(s)\n    if n % 2 == 0 or s[0] == '0' or s[-1] == '0':\n        return '0'\n    side = int(s[0])\n    count = 0\n    i = 1\n    while i < n - 1:\n        if s[i] == '1':\n            side = int(s[i])\n            i += 1\n        else:\n            diameter",
  "585": "import math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    ans = 0\n    for i in range(m):\n        if p[i] <= n:\n            ans += n // p[i]\n    print(n - ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "586": "```python\nfrom collections import defaultdict\nfrom functools import cmp_to_key\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n, r = map(int, input().split())\n        freq = defaultdict(int)\n        submissions = []\n        for _ in range(r):\n            name, score = input().split()\n            name = ''.join(sorted(name))\n            freq[name] = max(freq[name], int(score))\n        for _ in range(n - r):\n            name",
  "587": "def find_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef solve",
  "588": "import math\nimport sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    g = 360 // n\n    ans = 0\n    for i in range(n - 1):\n        if a[i + 1] - a[i] >",
  "589": "def solve(P):\n    n = len(P)\n    dp = [0] * n\n    max_jump = 1\n    for i in range(n):\n        if P[i] == '.':\n            max_jump = max(max_jump, dp[i] + 1)\n        dp[i + 1] = max_jump\n    return str(dp[-1] - 1)\n\nT = int(input())\nfor _ in range(T):\n    P = input()\n    print(solve(P))",
  "590": "def solve():\n    MOD = 10**9 + 7\n    n, x, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    x -= 1\n    for _ in range(m):\n        for i in range(1, n):\n            a[i] = (a[i] + a[i-1]) % MOD\n    return str((a[x] + x) % MOD)\n\nt = int(input())\nfor _",
  "591": "def find_aadhar(n):\n    return '3' + '7' * (n - 1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(find_aadhar(n))",
  "592": "```python\nimport re\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        n = int(input())\n        words = [input() for _ in range(n)]\n        words.sort(key=len, reverse=True)\n        for word in words:\n            s = re.sub(r'\\b' + re.escape(word) + r'\\b', '', s)\n        if s: print('Teddy')\n        else: print('Tracy')\n\nsolve",
  "593": "```python\nimport sys\n\ndef solve():\n    prices = list(map(int, input().split()))\n    s = input()\n    missing = set('abcdefghijklmnopqrstuvwxyz') - set(s)\n    cost = sum(prices[ord(c) - 97] for c in missing)\n    print(cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "594": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nmin_sum = float('inf')\nfor i in range(n):\n    for j in range(i, n):\n        sub_sum = sum(val / x for val in a[i:j+1])\n        min_sum = min(min_sum, sub_sum)\nprint(format(min_sum, \".10f\"))",
  "597": "import heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, h = map(int, input().split())\n        points.append((x, h, i))\n    points.sort()\n    max_heap = []\n    for i in range(n):\n        if i == 0:\n            heapq.heappush(max_heap, -points[i][1])\n        else:\n            heapq.heappush(max_heap, -max",
  "598": "def stone_game(arr, k):\n    arr.sort()\n    for _ in range(k):\n        max_val = arr[-1]\n        for i in range(len(arr)):\n            arr[i] = max_val - arr[i]\n        arr.sort()\n    return ' '.join(map(str, arr))\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\nprint(stone_game(arr, k))",
  "599": "def solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    m = max(w)\n    ans = 0\n    for i in range(n // 2):\n        if w[i] == m:\n            break\n        if w[(i + n // 2) % n] == m:\n            break\n        if w[(i + n // 2) % n] < w[i]:\n            ans += 1\n    print(ans",
  "600": "def f(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % 10\n    return b\n\ndef solve():\n    n = int(input())\n    print(f(n))\n\nfor _ in range(int(input())):\n    solve()",
  "601": "import heapq\nevents = []\nn = int(input())\nfor i in range(n):\n    s, d = map(int, input().split())\n    events.append((s, d, i))\nevents.sort()\nheap = []\nans = 0\nfor s, d, i in events:\n    while heap and heap[0] <= s - 1:\n        heapq.heappop(heap)\n    heapq.heappush(heap, s + d - 1)\n    ans = max(ans,",
  "602": "s = input().split()\nmin_len = min(len(word) for word in s)\nremixed = ' ' + min_len + ' '.join(word + ' ' + min_len + ' ' for word in s) + ' ' + min_len\nprint(remixed)",
  "603": "```python\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print('a' * (k - 1) + 'b' * (100 - k + 1))\n```",
  "604": "def is_stable(grid):\n    R, C = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    for r in range(R):\n        for c in range(C):\n            count = 0\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < R and 0 <= nc",
  "605": "def is_safe(n, m, s):\n    for i in range(n):\n        for j in range(m):\n            x, y = i, j\n            for c in s:\n                if c == 'L' and y > 0: y -= 1\n                elif c == 'R' and y < m - 1: y += 1\n                elif c == 'U' and x > 0: x -= 1\n                elif c == 'D",
  "607": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and gcd(a[i], a[j]) == 1:\n            j += 1\n        if j - i ==",
  "609": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    q = list(map(int, input().split()))\n    s = 0\n    for i in q:\n        s += i\n        if s >= k:\n            s -= k\n        else:\n            break\n    print(_ + 1 + q[:q.index(i)].count(0))",
  "610": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i + 1, min(i + 7, n)):\n                if a[j] == 1:\n                    print('NO')\n                    return\n    print('YES')\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "611": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    vis = [0] * (n + 1)\n    for i in range(n):\n        if vis[a[i]]:\n            print(\"Truly Happy\")\n            return\n        vis[a[i]] = 1\n    print(\"Poor Chef\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "612": "def solve():\n    s = input()\n    if '010' in s or '101' in s:\n        print('Good')\n    else:\n        print('Bad')\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "613": "def count_bubbly_words(words):\n    def is_bubbly(word):\n        stack = []\n        for char in word:\n            if stack and stack[-1] == char:\n                stack.pop()\n            else:\n                stack.append(char)\n        return not stack\n\n    return sum(1 for word in words[1:] if is_bubbly(word))",
  "615": "class SegmentTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (4 * self.n)\n        self._build(arr, 0, 0, self.n - 1)\n\n    def _build(self, arr, v, tl, tr):\n        if tl == tr:\n            self.tree[v] = arr[tl]\n        else:\n            tm = (tl + tr) // 2\n            self._",
  "618": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        window_sum = sum(a[max(0, i-k+1):i+1])\n        max_sum = max(max_sum, window_sum)\n    print(max(max_sum, sum(a[-k+1:]) + sum(a[:k])))\n\nt = int(input())\nfor _ in range(t",
  "619": "t = int(input())\n\nfor _ in range(t):\n    p1, p2, k = map(int, input().split())\n    if (p1 + p2) % k == 0:\n        print(\"COOK\")\n    else:\n        print(\"CHEF\")",
  "620": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    nums = list(map(int, input().split()))\n    max_val = float('-inf')\n    count = 0\n    ans = 0\n    for i in range(n):\n        max_val = max(max_val, nums[i])\n        if nums[i] < k:\n            count += 1\n        else:\n            count = 1\n            max_val = nums[i]\n",
  "621": "```python\ndef longest_common_prefix(words):\n    if not words:\n        return \"\"\n    shortest_word = min(words, key=len)\n    for i, char in enumerate(shortest_word):\n        for other in words:\n            if other[i] != char:\n                return shortest_word[:i]\n    return shortest_word\n\ndef find_stem(n, words):\n    common_prefixes = [words[0]]\n    for word in words[1:]:\n        common_prefixes.append(longest_common_prefix([",
  "622": "import math\nimport sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    n, m, w, h = map(int, input().split())\n    s = input().strip()\n    points = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    x, y = 0, 0\n    for i in s:\n        if i == 'R':\n            x += 2 ** (",
  "623": "```python\nn = int(input())\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\narr.sort()\nfor num in arr:\n    print(num)\n```",
  "624": "def CristoSutra(Ti, memo = {}):\n    if Ti in memo:\n        return memo[Ti]\n    if Ti <= 0:\n        return 1, 0\n    elif Ti == 1:\n        return 0, 1\n    else:\n        alpha, beta = CristoSutra(Ti-1, memo)\n        alpha += CristoSutra(Ti-2, memo)[0]\n        beta += CristoSutra(Ti-3, memo)[1",
  "625": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        for j in range(i, n):\n            cnt += a[j]\n            if cnt % (10**9) == 0:\n                ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "626": "def solve():\n    k = int(input())\n    s = input()\n    n = 2 ** k\n    ans = [''] * n\n    for i in range(n):\n        binary = format(i, 'b').zfill(k)\n        binary = binary[::-1]\n        idx = int(binary, 2)\n        ans[idx] = s[i]\n    print(''.join(ans))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "627": "def solve(N, K):\n    MOD = 10**9 + 7\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        for j in range(min(i, K), 0, -1):\n            dp[j] = (dp[j] + dp[j - 1]) % MOD\n    return dp[K]\n\nN, K = map(int, input",
  "628": "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    b = s.count('B')\n    w = s.count('W')\n    if b == 0 or (b - 1) % 2 == 0:\n        print('Chef')\n    else:\n        print('Aleksa')",
  "629": "def solve():\n    R, G, B, M = map(int, input().split())\n    r = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    r.sort()\n    g.sort()\n    b.sort()\n\n    def check(x):\n        return min((r[-1] + 1) // 2 * min(M, (r[-1] + 1) // (2",
  "631": "```python\ndef wrong_change(A, B):\n    A_str = str(A)\n    B_str = str(B)\n    diff = 0\n    for i in range(len(A_str)):\n        if A_str[i] != B_str[i]:\n            diff = i\n            break\n    A_list = list(A_str)\n    A_list[diff] = str(int(A_list[diff]) - 1)\n    return int(''.join(A_list))\n\nA, B = map(int,",
  "632": "def solve(N, k):\n    return \"ON\" if k >= 2**(N-1) else \"OFF\"\n\nT = int(input())\nfor _ in range(T):\n    N, k = map(int, input().split())\n    print(solve(N, k))",
  "633": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    max_height = 0\n    for _ in range(n):\n        height = int(input())\n        max_height = max(max_height, height)\n    print(max_height)",
  "634": "def maximum_age(s):\n    n = len(s)\n    dp = [[0] * 10 for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(10):\n            if s[i] == str(j) or (s[i].isalpha() and s[i].upper() == chr(ord('A') + j)):\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n",
  "635": "M = 10**9 + 7\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nB = sorted(set(A))\nn = len(B)\ndp = [[0] * (K + 1) for _ in range(n)]\nfor i in range(n):\n    dp[i][0] = 1\nfor i in range(n):\n    for j in range(1, min(i + 1, K + 1",
  "636": "import sys\ninput = sys.stdin.readline\n\nn, t = map(int, input().split())\ns = list(map(int, input().split()))[2:]\n\ncnt = [0] * (t + 1)\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            cnt[t - s[i] - s[j] - s[k]] += 1\n\nans = 0\nfor",
  "638": "```python\nMOD = 10**9 + 7\n\ndef count_substrings(n, strings):\n    dp = [[0] * 26 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(26):\n            if j == 0 or dp[i - 1][j - 1] == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j",
  "639": "```python\ndef is_dynamic(s):\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    freq = sorted(freq.values(), reverse=True)\n    return len(freq) < 3 or freq[0] == freq[1] + freq[2]\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print('Dynamic' if is_dynamic(s) else 'Not')\n```",
  "640": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    power = abs(x - y)\n    if x > y:\n        x += power\n        power += (x - y) // 2\n    print(power)",
  "641": "import sys\nfrom collections import deque\n\nn = int(sys.stdin.readline())\ntraffic = [0] + [int(sys.stdin.readline()) for _ in range(n)]\ngraph = [[] for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    u, v = map(int, sys.stdin.readline().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\ndef bfs(s):\n    q = deque([(s, 0)])\n    visited = [",
  "642": "import math\nfor _ in range(int(input())):\n    n, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    c.sort()\n    mx = 0\n    for i in range(n):\n        mx = max(mx, c[i] - c[i-1] - d)\n    print((mx + d) / 2)",
  "643": "def get_prime_factors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\ndef solve():\n    MOD = 10**9 + 7",
  "644": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
  "645": "def solve():\n    n = int(input())\n    k = int(input())\n    print((k // n) * (n - 1) + (k % n))\n\nfor _ in range(int(input())):\n    solve()",
  "646": "def solve(s):\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return len(stack)\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))",
  "647": "def solve():\n    n, s = map(int, input().split())\n    if s < n or s > n * 9:\n        print(-1)\n        return\n    ans = 1\n    for i in range(n):\n        if s - (n - i - 1) >= 9:\n            ans *= 9\n            s -= 9\n        else:\n            ans *= s\n            s = 0\n            break\n    if s:\n        ans",
  "648": "import sys\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n, op, e):\n        self.n = n\n        self.op = op\n        self.e = e\n        self.size = 1 << (self.n - 1).bit_length()\n        self.tree = [e] * (2 * self.size)\n\n    def build(self, arr):\n        for i in range(self.n, 2 * self.size):\n            self.tree[i",
  "651": "def solve(n, arr):\n    arr.sort()\n    ans = n\n    i = 0\n    while i < n - 2:\n        if arr[i] == arr[i + 2]:\n            ans -= 2\n        i += 3\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))",
  "652": "def compare_strings():\n    t = int(input())\n    for _ in range(t):\n        s1 = input().lower()\n        s2 = input().lower()\n        if s1 < s2:\n            print(\"first\")\n        elif s1 > s2:\n            print(\"second\")\n        else:\n            print(\"equal\")",
  "653": "def maxPoints(health, P):\n    n = len(health)\n    dp = [[0, 0] for _ in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        if P >= health[i - ",
  "654": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(max(min(a, b), min(b, c)))\n```",
  "655": "def solve():\n    n, k, v = map(int, input().split())\n    a = list(map(int, input().split()))\n    total = n * v\n    actual_sum = sum(a)\n    if total - actual_sum == k * v:\n        print(v * k)\n    else:\n        print(-1)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "656": "n = int(input())\nif n % 4 == 0:\n    n += 1\nelse:\n    n -= 1\nprint(n)",
  "657": "```python\ndef max_score(matrix):\n    m, n = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(m)]\n    \n    for _ in range(m + n):\n        for i in range(m):\n            for j in range(n):\n                if (i + j) % 2 == 0:\n                    matrix[i][j] = 1 - matrix[i][j]\n                    \n    return sum(sum(val << (n",
  "658": "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    dp = [[0, 0] for _ in range(n + 1)]\n    for i in range(1, n):\n        if s[i - 1] <= s[i]:\n            dp[i][0] = dp[i - 1][0] + 1\n        if s[i - 1] >= s[i]:\n            dp[i][1] = dp[i",
  "659": "n, k, s = map(int, input().split())\na = list(map(int, input().split()))\n\ndef check(i):\n    return sum(a[i:i+k+1]) > s and k+1 < k+1\n\ndef solve():\n    left = 0\n    right = k\n    while left <= right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid",
  "660": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef is_interesting_number(n):\n    n = str(n)\n    total = 0\n    for digit in n:\n        total += factorial(int(digit))\n    return total == int(n)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 if is_interesting_number(n) else 0)",
  "661": "import math\n\nt, x = map(int, input().split())\nfor _ in range(t):\n    n = int(input())\n    s = math.floor(math.sqrt(n))\n    diff = abs(n - s ** 2)\n    if diff <= 0.01 * x * n:\n        print('yes')\n    else:\n        print('no')",
  "662": "def sum_alternate_odd(d, l, r):\n    mod = 10**9 + 7\n    odd_count = (r - l) // 2 + 1\n    odd_sum = (r + l) * odd_count // 2\n    alternate_sum = 0\n    for i in range(odd_count):\n        if i % d == 0:\n            alternate_sum += (2 * i + l + (r - l) * i // d)",
  "663": "def solve():\n    L, S = input().split()\n    L = int(L)\n    S = list(S)\n    n = len(S)\n    for i in range(L):\n        min_idx = i\n        for j in range(i+1, L):\n            if S[j] < S[min_idx]:\n                min_idx = j\n        S[i], S[min_idx] = S[min_idx], S[i]\n    for i in range(L, n):\n        S.append(S[i",
  "665": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    r = list(map(int, input().split()))\n    c = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        r[i] += sum(c[i])\n    peak_rating = [0] * n\n    peak_ranking = [0] * n\n    for i in range(n):\n        max_rating = r[i",
  "666": "```python\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    pattern = ''\n    for i in range(1, k + 1):\n        pattern += str(i)\n        if i < k:\n            pattern += str(i + 1)\n    print(pattern)\n    for i in range(k + 1, 2 * k):\n        pattern += str(i)\n    print(pattern)\n```",
  "667": "def latest_day_to_take_first_bus(test_cases):\n    for test_case in test_cases[1::2]:\n        n, d = map(int, test_case.split())\n        x = list(map(int, test_cases[test_cases.index(test_case) + 1].split()))\n        lcm = 1\n        for i in x:\n            lcm = lcm * i // math.gcd(lcm, i)\n        for i in range(d // lcm, 0, -1):\n            if all",
  "669": "```python\nimport sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\ndef dfs(u, k, dp):\n    if dp[u][k] != -1:\n        return dp[u][k]\n    if k == 0:\n        dp[u][k] = 1\n        return 1\n    ans = 0\n    for v in adj[u]:\n        ans += dfs(v, k - 1, dp)\n        ans %= mod",
  "670": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    return sum(a[:-1])\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "671": "def solve():\n    n, s = map(int, input().split())\n    p = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    d = [p[i] for i in range(n) if t[i] == 0]\n    f = [p[i] for i in range(n) if t[i] == 1]\n    d.sort()\n    f.sort()\n    for i in range(len(d)):\n        for j in range",
  "672": "```python\nimport math\n\nt = int(input())\n\nfor i in range(1, t + 1):\n    x1, y1, x2, y2 = map(int, input().split())\n    q = int(input())\n\n    print(\"Test case : \", i)\n\n    for _ in range(q):\n        x3, y3 = map(int, input().split())\n\n        if (x2 - x1) * (y3 - y1) == (x3",
  "673": "def solve():\n    n, m, a, d = map(int, input().split())\n    count = m - n\n    for i in range(1, 5):\n        count -= (m - 1) // (a + i * d) - (n - 1) // (a + i * d)\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "674": "def solve():\n    n, m = map(int, input().split())\n    a = []\n    b = []\n    for _ in range(n):\n        a.append(input())\n    for _ in range(n):\n        b.append(input())\n    a = [list(map(int, row)) for row in a]\n    b = [list(map(int, row)) for row in b]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a",
  "675": "def solve():\n    n = int(input())\n    if n % 2 == 0:\n        print(-1)\n    else:\n        ans = []\n        for i in range(1, n + 1, 2):\n            ans.extend([i, i + 1])\n        print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "676": "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    m = max(d.values())\n    for i in d:\n        if d[i] == m:\n            print(i)\n            break",
  "677": "```python\nfrom datetime import datetime\n\ndef find_day(date_str):\n    date = datetime.strptime(date_str, \"%d %m %Y\")\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return days[date.weekday()]\n\ndate_str = input().strip()\nprint(find_day(date_str))\n```",
  "678": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l, r, day = 1, 1, 0\n    while l <= n:\n        day += 1\n        l += sum(min(i, a[i-1]) for i in range(l, r+1))\n        r = max(r, l + sum(a[i-1] for i in range(l, r+1)))\n    print(day)\n\nt =",
  "679": "import heapq\nimport sys\n\nclass Book:\n    def __init__(self, name, exercises):\n        self.name = name\n        self.exercises = exercises\n        self.count = 1\n\n    def __lt__(self, other):\n        if self.exercises == other.exercises:\n            return self.count < other.count\n        return self.exercises < other.exercises\n\nbooks = {}\npq = []\n\nfor _ in range(int(input())):\n    line = input().split()\n    if",
  "680": "```python\nimport sys\ninput = sys.stdin.readline\n\nMOD = 998244353\n\ndef add(x, y):\n    return (x + y) % MOD\n\ndef sub(x, y):\n    return (x - y + MOD) % MOD\n\ndef mul(x, y):\n    return (x * y) % MOD\n\ndef sum(a, b):\n    return add(a, b)\n\ndef dif(a, b):\n    return sub(a, b)\n\ndef mul_(a,",
  "681": "def solve():\n    import sys\n    input = sys.stdin.readline\n    mod = 10**9 + 7\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1\n    s = sum(a)\n    while a[-1] <= m:\n        if s <= m * n:\n            ans = (ans + 1) % mod\n        s -= a.pop",
  "682": "def find_segment(n, coins):\n    original = list(range(1, n + 1))\n    for i in range(n):\n        if coins[i] != original[i]:\n            break\n    for j in range(n - 1, -1, -1):\n        if coins[j] != original[j]:\n            break\n    l, r = i, j\n    while l > 0 and coins[l - 1] == original[l - 1]:\n        l -= ",
  "683": "n = int(input())",
  "686": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n, v1, v2 = map(int, input().split())\n    time_stairs = n / v1 * math.sqrt(2)\n    time_elevator = 2 * n / v2\n    print('Elevator' if time_elevator < time_stairs else 'Stairs')",
  "687": "def check_permutation(arr):\n    n = len(arr)\n    inversions = 0\n    local_inversions = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            inversions += 1\n            local_inversions += 1\n    return 'YES' if inversions == local_inversions else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr =",
  "688": "def is_uniform(s):\n    transitions = 0\n    for i in range(8):\n        if s[i] != s[(i+1)%8]:\n            transitions += 1\n    return 'uniform' if transitions <= 2 else 'non-uniform'\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(is_uniform(s))",
  "689": "def solve(zebras):\n    zebras = [list(map(int, z.split())) for z in zebras[1:]]\n    visited = set()\n    for a, b in zebras:\n        if a + b in visited:\n            return 'YES'\n        visited.add(a)\n        visited.add(a + b)\n    return 'NO'",
  "690": "def minSpeeches():\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    prefix = [0]\n    for x in a:\n        prefix.append(prefix[-1] + x)\n    ans = 0\n    for i in range(len(prefix) - k):\n        if prefix[i + k] - prefix[i] < m:\n            ans += 1\n            for j in range(i, i + k):\n",
  "691": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_stars = 0\n    seen = {}\n    for i in range(n):\n        stars = 0\n        for j in range(i):\n            if a[j] % a[i] == 0 and a[j] in seen:\n                stars = max(stars, seen[a[j]])\n        seen[a[i]] = stars + 1\n        max_stars = max(max",
  "692": "```python\nimport sys\nimport heapq\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = (start, float('inf'), float('-inf'))\n            return\n        mid = (start + end) // 2\n        self.build(",
  "693": "```python\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(math.factorial(n))\n```",
  "694": "def solve():\n    n = int(input())\n    x, y, z = map(int, input().split())\n    lcm = x*y*z//math.gcd(x,y)*math.gcd(y,z)*math.gcd(z,x)\n    ans = 0\n    for i in range(1, n+1):\n        if i*lcm//x <= n and i*lcm//y <= n and i*lcm//z <= n:\n            ans += 1\n    print",
  "696": "```python\nfrom collections import deque\n\ndef is_possible(n, m, p, pairs):\n    visited = set()\n    for i in range(n):\n        if p[i] != i + 1:\n            q = deque([i])\n            visited.add(i)\n            while q:\n                j = q.popleft()\n                for k in range(p[j], p[j + 1]):\n                    if k + 1 not in visited:\n                        q.append(k)\n                        visited.add(k)\n           ",
  "697": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k:\n            curr_sum -= a[i - k]\n        if i >= k - 1:\n            max_sum = max(max_sum, curr_sum)\n\n    print",
  "698": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((b - a // gcd(a, b)) % b)",
  "699": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    cnt = 0\n    for i in a:\n        cnt += i // k\n        if cnt >= d:\n            print(d)\n            break\n    else:\n        print(cnt // d)",
  "700": "def min_cost(bank_amounts):\n    n = len(bank_amounts)\n    dp = [[0] * 4 for _ in range(n)]\n    for i in range(n):\n        for j in range(4):\n            if i == 0:\n                dp[i][j] = bank_amounts[i].split()[j]\n            else:\n                min_val = float('inf')\n                for k in range(4):\n                    if k != (i % 4):\n                       ",
  "701": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    pos = 0\n    for i in range(n):\n        if k ** a[i] > ans:\n            ans = k ** a[i]\n            pos = i + 1\n    print(pos)",
  "702": "def solve(m, Tc, Th):\n    for _ in range(m):\n        if Tc < Th:\n            Th -= 1\n            Tc += 2\n        else:\n            return \"Yes\"\n    return \"No\"\n\nT = int(input())\nfor _ in range(T):\n    m, Tc, Th = map(int, input().split())\n    print(solve(m, Tc, Th))",
  "703": "```python\ndef prev_beautiful_binary(n):\n    binary = bin(n)[2:]\n    for i in range(len(binary)):\n        for j in range(i + 1, len(binary)):\n            if binary[i] == '1' and binary[j] == '1' and j - i == 1:\n                return bin(n - 1)[2:]\n    return binary\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(prev_beautiful",
  "704": "def solve(A, N, M):\n    return pow(A, N, M)\n\nt = int(input())\nfor _ in range(t):\n    A, N, M = map(int, input().split())\n    print(solve(A, N, M))",
  "705": "def num_paths(n):\n    return 2 * (n - 1) * (n - 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(num_paths(n))",
  "706": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    w = list(map(int, input().split()))\n    w.reverse()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        if cur + w[i] > k:\n            ans += 1\n            cur = w[i]\n        else:\n            cur += w[i]\n    if cur != 0:\n        ans += 1\n   ",
  "707": "```python\nfrom collections import defaultdict, deque\n\ndef get_secret_of_mountain():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        graph = defaultdict(list)\n        for _ in range(n - 1):\n            x, y = map(int, input().split())\n            graph[x].append(y)\n            graph[y].append(x)\n\n        visited = set()\n        queue = deque([(1, 0)])\n        parent = {1: None",
  "708": "def solve():\n    n, a = map(int, input().split())\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + pow(a, 2*i-1, mod) * pow(a, n-i, mod) * pow(i, mod-2, mod)) % mod\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve",
  "709": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(a[0])\n        return\n    a.sort()\n    if a[0] == a[-1]:\n        print(a[0])\n        return\n    g = a[0]\n    for i in range",
  "710": "n = int(input())\na = list(map(int, input().split()))\n\nprint(max(a[-1] - a[-2] + a[-3] - a[-4], a[-1] - a[-3] + a[-4] - a[-5] if n >= 5 else 0))",
  "712": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in a:\n        if i % 2 == 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "713": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    b = list(map(int, input().split()))\n    for i in range(m):\n        if b[i] not in a:\n            print(\"No\")\n            return\n        a = a[a.index(b[i]):]\n    print(\"Yes\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "714": "def min_operations(candies):\n    n = len(candies)\n    candies.sort()\n    min_candies = candies[0]\n    operations = 0\n    for i in range(n):\n        operations += max(0, candies[i] - min_candies)\n        min_candies += 1\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    candies = list(map(int, input().split()))\n   ",
  "715": "def find_values(s):\n    result = []\n    for word in s.split():\n        value = 0\n        for i, char in enumerate(word):\n            value += (ord(char) - 64) * (26 ** (len(word) - i - 1))\n        result.append(str(value))\n    return result\n\ns = input()\nprint(find_values(s))",
  "717": "t = int(input())\n\nfor _ in range(t):\n    b, g = map(int, input().split())\n    print(min(b, g) * 2 + min(b - g, g - b))",
  "719": "```python\ndef tour(juice_shops):\n    n = int(juice_shops[0])\n    shops = [list(map(int, shop.split())) for shop in juice_shops[1:]]\n\n    max_juice = 0\n    start = 0\n    for i in range(n):\n        juice, dist = shops[i]\n        remaining_dist = (shops[(i + 1) % n][1] + dist) - juice * dist\n       ",
  "720": "def beauty_of_string(s):\n    n = len(s)\n    beauty = 0\n    for i in range(n):\n        cnt0 = 0\n        cnt1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                cnt0 += 1\n            else:\n                cnt1 += 1\n            if cnt0 == cnt1 * cnt1:\n                beauty += 1\n    return beauty\n\nt = int(input())\n",
  "721": "def solve(N):\n    MOD = 1000000007\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 26\n    for i in range(2, N + 1):\n        if i % 2 == 0:\n            dp[i] = (26 * dp[i // 2] + 26 * dp[i // 2 - 1]) % MOD\n        else:\n",
  "723": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    poly = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        poly.append((a, p))\n    poly.sort(key=lambda x: x[1], reverse=True)\n    ans = []\n    for a, p in poly:\n        if p == 0:\n            ans.append(str(a))\n        elif p == 1:\n            ans.append(str(a) + '",
  "724": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for i in range(k):\n        b[a[i]] = i + 1\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            b[i] = k + 1\n    for i in range(1, k):\n       ",
  "725": "def min_operations(t):\n    for _ in range(int(t)):\n        n, k, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        ans = float('inf')\n        for i in range(n - k + 1):\n            cnt = 0\n            for j in range(i, i + k):\n                if a[j] == max(a[i:i + k]):\n                    cnt += 1\n            if cnt >= m:\n               ",
  "726": "def max_meals(test_cases):\n    for case in test_cases[1::2]:\n        freq = {}\n        for string in case:\n            for char in string:\n                freq[char] = freq.get(char, 0) + 1\n        meals = min(freq['c'], freq['o'], freq['d'], freq['e'], freq['h'], freq['f']) // 7\n        print(meals)\n\ntest_cases = ['3', '6', 'cplusplus', '",
  "727": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    dp = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j >= i * (n - i + 1):\n                dp[i][j] =",
  "728": "n = int(input())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nprimary_diagonal_sum = sum(matrix[i][i] for i in range(n))\nsecondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\nprint(abs(primary_diagonal_sum - secondary_diagonal_sum))",
  "729": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    b = [[0] * m for _ in range(n)]\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n               ",
  "730": "def find_winner(test_cases):\n    for test_case in test_cases:\n        n = int(test_case[0])\n        players = []\n        for i in range(1, n + 1):\n            cookies = list(map(int, test_case[i * 2 + 1].split()))\n            types = list(map(int, test_case[i * 2 + 2].split()))\n            score = sum(set(types))\n            for j in range(4, 7):\n                score += types",
  "731": "import sys\nfrom collections import deque\n\ndef dijkstra(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    queue = deque([start])\n    while queue:\n        node = queue.popleft()\n        for neighbor, weight in graph[node].items():\n            if distances[neighbor] > distances[node] + weight:\n                distances[neighbor] = distances[node] + weight\n                queue.append(neighbor)\n   ",
  "732": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            ans += a[i]\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "733": "```python\ndef smallest_palindrome():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                substr = s[i:j]\n                if substr == substr[::-1] and (len(substr) == n or len(substr) < len(s[s.find(min(substr, key=ord)):(s.find(min(substr, key=",
  "734": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if len(set(a)) != len(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        for i in range(n):\n            if a[i] != b[i]:\n                print(a[i], end=\" \")\n            else:\n                print(b[(i+1)%n], end=\" \")\n        print()\n\nt = int(input())\nfor _ in",
  "735": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "736": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += abs(ord(s[i]) - ord('a'))\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "737": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nt =",
  "740": "from collections import deque\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m, k = map(int, stdin.readline().split())\n        grid = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for _ in range(k):\n            x, y = map(int, stdin.readline().split())\n            grid[x][y] = 1\n\n        visited =",
  "743": "def solve():\n    n, k = map(int, input().split())\n    if n % k == 0 and k > 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "744": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    s = ''\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            s += '*' * i + '\\n'\n        else:\n            s += '*' + ' ' * (i - 1) + '*\\n'\n    print(s, end='')\n```",
  "745": "def min_operations(mountains):\n    for m in mountains[3::4]:\n        n = int(mountains[2::4])\n        heights = list(map(int, mountains[1::4].split()))\n        max_height = max(heights)\n        left, right = 0, max_height - 1\n        operations = 0\n        while left <= right:\n            if heights[left] == left + 1:\n                left += 1\n            elif heights[right] == max",
  "746": "def calculate_p1(height, values):\n    mod = 10**9 + 7\n    values = list(map(int, values.split()))\n    tree = [[0 for _ in range(height)] for _ in range(2**height - 1)]\n    for i in range(2**height - 1):\n        tree[i][0] = values[i]\n    for i in range(1, height):\n        for j in range(2**(height - i - 1)",
  "747": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n == 1:\n        print('YES')\n        print(a[0])\n        return\n    if a[0] == a[-1]:\n        print('NO')\n        return\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            print('NO')\n            return\n    p = 0\n",
  "748": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(*[i for i in range(1, 7) if i != a[0]])\n        return\n    if n == 2:\n        if a[0] == a[1]:\n            print(-1)\n            return\n        print(*[i for i in range(1, 7) if i != a[0]",
  "749": "import sys\ninput = sys.stdin.readline\n\ndef find(x):\n    if parent[x] != x:\n        parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x = find(x)\n    y = find(y)\n    if x != y:\n        parent[y] = x\n        return True\n    return False\n\nN = int(input())\nparent = [i for i in range(N+1)]\ncosts = []\nfor _ in range(N",
  "750": "```python\ndef is_ambiguous(n, permutation):\n    original = [0] * (n + 1)\n    inverse = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        original[permutation[i - 1] - 1] = i\n\n    for i in range(1, n + 1):\n        inverse[original[i - 1]] = i\n\n    for i in range(1,",
  "751": "def solve():\n    n = int(input())\n    s = input()\n    x = list(map(int, input().split()))\n    ans = 0\n    prev = -1\n    for i in range(n):\n        if s[i] == '0':\n            if prev != -1:\n                ans += x[i] - prev\n            prev = x[i]\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "752": "```python\nn, q = map(int, input().split())\nmedia_types = {}\nfor _ in range(n):\n    ext, media = input().split()\n    media_types[ext] = media\n\nfor _ in range(q):\n    file_name = input()\n    file_ext = file_name.split('.')[-1]\n    print(media_types.get(file_ext, 'unknown'))\n```",
  "753": "def f(MG, MY, MR, OG, OY, OR, PG, PY, PR):\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (MG if i == 0 else OG if i == 1 else PG) + (MY if j == 0 else OY if j == 1 else PY) + (MR if k == 0 else OR if k == 1 else",
  "754": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if sum(int(digit) for digit in str(n)) % 2 == 0 or n % 2 == 0:\n        print(1)\n    else:\n        print(0)\n```",
  "755": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_k(arr):\n    k = arr[0]\n    for num in arr[1:]:\n        k = gcd(k, num)\n    return k\n\ndef find_all_k(arr):\n    k = find_k(arr)\n    result = []\n    for i in range(2, int(k ** 0.5) + 1):\n        if k % i ==",
  "756": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nt =",
  "757": "def is_clingy(n, s):\n    vowels = 'AEIOU'\n    for i in range(n):\n        t = s[i:] + s[:i]\n        if any(t[j] in vowels and t[j+1] in vowels for j in range(n-1)):\n            return 'Yes'\n    return 'No'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(is_clingy(n, s",
  "758": "import math\n\ndef f(x, b, c):\n    return (x**2 + b*x + c) / math.sin(x)\n\ndef solve(b, c):\n    min_val = float('inf')\n    for x in [math.pi/4, math.pi/3, math.pi/2 - 1e-6]:\n        val = f(x, b, c)\n        if val < min_val:\n            min_val = val\n    return round(min_val, 6)\n\n",
  "759": "def prime_factors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\nt = int(input())\nfor _ in range(t):\n    n =",
  "761": "import heapq\nimport sys\n\nfor _ in range(int(input())):\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, -c[i])\n\n    ans = 0",
  "762": "```python\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    pattern = ''\n    for i in range(k):\n        pattern += '1' if i % 2 == 0 else '0'\n        if i < k - 1:\n            pattern += ' '\n    for i in range(k):\n        pattern += '1' if (i + 1) % 2 == 0 else '0'\n        if i < k - ",
  "763": "def solve():\n    n = int(input())\n    s = input()\n    p = input()\n    ones_s = s.count('1')\n    ones_p = p.count('1')\n    if ones_s != ones_p:\n        print('No')\n        return\n    for i in range(n):\n        if s[i] == '1' and p[i] == '0':\n            print('No')\n            return\n    print('Yes')\n\nt = int(input())\nfor _ in range(t",
  "764": "```python\ndef check_similarity():\n    t = int(input())\n    for _ in range(t):\n        dish1 = input().split()\n        dish2 = input().split()\n        common = set(dish1) & set(dish2)\n        if len(common) >= 2:\n            print(\"similar\")\n        else:\n            print(\"dissimilar\")\n\ncheck_similarity()\n```",
  "765": "import sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\ndef qpow(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % mod\n        a = a * a % mod\n        b >>= 1\n    return res\n\ndef update(x, y):\n    i = x\n    while i <= n:\n        tree[i] = tree[i] * y % mod",
  "766": "def max_min_area(arr):\n    arr.sort()\n    max_area = max(arr[-1] * arr[-2], arr[0] * arr[1])\n    min_area = min(arr[-1] * arr[-2], arr[0] * arr[1])\n    return f\"{max_area} {min_area}\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(max_min_area",
  "767": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    for j in range(i):\n        dp[i] = max(dp[i], dp[j] + a[j][0] + a[j][1] + a[i - 1][2] if",
  "768": "def dfs(node, parent, n, graph, dp, visited):\n    visited[node] = True\n    dp[node] = 1\n    for child in graph[node]:\n        if not visited[child]:\n            dfs(child, node, n, graph, dp, visited)\n            dp[node] += dp[child]\n\ndef solve(n, graph):\n    dp = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    dfs(1",
  "769": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(gcd(a, b))",
  "770": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0 if a[0] % 2 else -sys.maxsize\n    for i in range(1, n):\n        if a[i] % 2:\n            dp[i + 1] = max(dp[i + 1",
  "771": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    m, f = map(int, input().split())\n    si = list(map(int, input().split()))\n    multan_wins = sum(1 for s in si if s % m == 0 and s % f != 0)\n    fultan_wins = sum(1 for s in si if s % m != 0 and s % f == 0)\n    total_wins",
  "773": "def find_smallest_good_permutation(n):\n    result = [2]\n    for i in range(3, n + 1):\n        if i - 1 not in result:\n            result.append(i)\n        else:\n            result.append(i - 1)\n    return ' '.join(map(str, result))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(find_smallest_good_permutation(n))",
  "774": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass Node:\n    def __init__(self, x):\n        self.x = x\n        self.left = None\n        self.right = None\n\ndef insert(root, x, k):\n    if not root:\n        return Node(x)\n    if x - root.x <= k:\n        if not root.left:\n            root.left = Node(x)\n        else:\n            insert(root.left, x, k)\n    else:\n        if not",
  "776": "def solve(D):\n    if D % 2 == 0:\n        N = D // 2 + 1\n        A = [1] * N\n        for i in range(1, N):\n            A[i] = A[i - 1] * 2\n        return str(N) + '\\n' + ' '.join(map(str, A))\n    else:\n        N = D // 2 + 2\n        A = [1] * N\n",
  "777": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    r1, h1, r2, h2 = map(float, input().split())\n    cone_volume = (1.0/3) * math.pi * r1**2 * h1 + (1.0/2) * math.pi * r1**3\n    cylinder_volume = math.pi * r2**2 * h2\n    print(f\"{cone_volume:.6f} {c",
  "778": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    reversed_n = int(str(n)[::-1])\n    print(reversed_n)\n```",
  "779": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = a[0]\n    for i in range(1, n):\n        ans = math.gcd(ans, a[i])\n    print((a[0] // ans) * ans)",
  "780": "def solve(N, M):\n    return \"EVEN\" if N % M == 0 else \"ODD\"\n\nt = int(input())\nfor _ in range(t):\n    N, M = map(int, input().split())\n    print(solve(N, M))",
  "782": "def solve():\n    n = int(input())\n    cost = list(map(int, input().split()))\n    w, y = map(int, input().split())\n    cost.sort()\n    total_cost = 0\n    for i in range(y):\n        if w >= cost[i]:\n            w -= cost[i]\n            total_cost += cost[i]\n        else:\n            break\n    if w > 0:\n        print(\"Not Possible\")\n    else:\n        print(total_cost)\n\nt = int",
  "783": "import math\n\ndef solve():\n    px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r = map(float, input().split())\n    a = dx**2 + dy**2\n    b = 2 * (qx - px) * dx + 2 * (qy - py) * dy\n    c = (qx - px)**2 + (qy - py)**2 - (r**",
  "784": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m, p = map(int, input().split())\n    a = [[j for j in range(1, m + 1)] for _ in range(n)]\n    for _ in range(p):\n        i, j = map(int, input().split())\n        a[i - 1][j - 1] += 1\n    ans = []\n    for i in range(n):\n        j = m -",
  "785": "def solve(A):\n    D1 = 0\n    D2 = 0\n    max_profit = 0\n    max_D = 0\n    for i in range(1, 31):\n        profit = A - (2 ** (i - 1))\n        if profit > 0 and D1 == 0:\n            D1 = i\n        if profit > max_profit:\n            max_profit = profit\n            max_D = i\n        if profit <= ",
  "786": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    result = 1\n    for i in range(1, n):\n        result = result * 6 + 1\n    print(result)",
  "787": "def solve(s):\n    n = len(s)\n    i = 0\n    ans = 0\n    while i < n:\n        j = i\n        while j < n - 1 and s[j + 1] == '0':\n            j += 1\n        if j < n - 1:\n            k = j\n            while k < n - 1 and s[k + 1] == '1':\n                k += 1\n            ans +=",
  "788": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n // 10**len(str(n)) + n % 10))",
  "789": "def powmod(base, exponent, mod):\n    result = 1\n    base = base % mod\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent = exponent >> 1\n        base = (base * base) % mod\n    return result\n\ndef solve():\n    mod = 1000000007\n    m, r = map(int, input().split())\n    n =",
  "790": "class SegmentTree:\n    def __init__(self, n, c):\n        self.n = n\n        self.c = c\n        self.tree = [[0, 0] for _ in range(4 * n)]\n\n    def update(self, p, k):\n        self._update(1, 1, self.n, p, k)\n\n    def query(self, p):\n        return self._query(1, 1, self.n, p)\n\n    def _update(self",
  "791": "def min_moves(n, d, arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    target = min(freq.keys())\n    moves = 0\n    for num in freq:\n        moves += (num - target) // d * freq[num]\n\n    return moves if moves >= (max(freq.keys()) - target) else -1\n\nt = int(input())\nfor _ in range(t):\n    n,",
  "792": "def solve():\n    MOD = 10**9 + 7\n    n, s = input().split()\n    n = int(n)\n    freq = [0] * 26\n    for c in s:\n        freq[ord(c) - ord('a')] += 1\n    ans = 1\n    for f in freq:\n        ans = (ans * (f + 1)) % MOD\n    return str(ans)\n\nt = int(input())\nfor _ in",
  "793": "def max_drone_steps():\n    n, R = map(int, input().split())\n    houses = list(map(int, input().split()))\n    houses.sort()\n    left, right = 0, R\n    while left < right:\n        mid = (left + right) // 2\n        if can_deliver(houses, R, mid):\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1\n\ndef can_deliver",
  "794": "def dfs(graph, node, parent, visited, dist):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dist[neighbor] = dist[node] + 1\n            dfs(graph, neighbor, node, visited, dist)\n\ndef solve():\n    MOD = 10**9 + 7\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        a =",
  "795": "def solve():\n    n, k, l = map(int, input().split())\n    if n > k * l or (n - 1) // 2 + 1 > l:\n        print(-1)\n        return\n    ans = [0] * n\n    for i in range(0, n, 2):\n        ans[i] = (i // 2) % l + 1\n    for i in range(1, n, 2):\n",
  "796": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = [1] * n\n        for i in range(1, n):\n            if a[i] * a[i - 1] > 0:\n                ans[i] = ans[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n           ",
  "797": "```python\nweekdays = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n\ndef solve():\n    S, E, L, R = input().split()\n    S, E = weekdays.index(S), weekdays.index(E)\n    L, R = int(L), int(R)\n\n    if S > E:\n        S, E = E, S\n\n    if S == E and R - L == ",
  "799": "n = int(input())\n\ncount = 0\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    if a + b + c >= 2:\n        count += 1\n\nprint(count)",
  "800": "n = int(input())\narr = list(map(int, input().split()))\nprint(max(arr), min(arr))",
  "805": "def max_profit():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        max_profit = 0\n        for _ in range(n):\n            s, p, v = map(int, input().split())\n            profit = (p // s) * v\n            max_profit = max(max_profit, profit)\n        print(max_profit)\n\nmax_profit()",
  "807": "import sys\ninput = sys.stdin.readline\n\ndef compare(B, C):\n    n = len(B)\n    B += [0] * (n - len(B))\n    C += [0] * (n - len(C))\n    for i in range(n):\n        if B[i] < C[i]:\n            return -1\n        elif B[i] > C[i]:\n            return 1\n    return 0\n\ndef solve():\n    n, m = map(int, input().",
  "808": "def find_lcm(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_num = n\n    for i in range(n, 1, -1):\n        for j in range(i, 1, -1):\n            lcm = i * j // gcd(i, j)\n            for k in range(lcm, 1, -1):\n                if k > max_num:\n                    break\n",
  "809": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if a[j] > a[i] and a[n - 1] > a[j] - a[i]:\n                print('YES')\n                print(a[n - 1], a[j], a[i])\n                return",
  "810": "```python\nfrom bisect import bisect_left\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[-1, -1] for _ in range(4 * n)]\n\n    def update(self, idx, val):\n        self._update(1, 0, self.n - 1, idx, val)\n\n    def _update(self, node, start, end, idx, val):\n        if start == end",
  "811": "n, k = map(int, input().split())\nnums = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        if j == 1:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1",
  "812": "def min_grass(n, D):\n    return sum(abs(i - j) for i, (x, y) in enumerate(zip(D, D[1:])) if x < 0 and y > 0)",
  "813": "def f(x, A, K):\n    return sum(abs((x - a) ** K) for a in A)\n\ndef find_min_x(N, K, A):\n    min_x = A[0]\n    min_val = float('inf')\n    for x in range(min(A), max(A) + 1):\n        val = f(x, A, K)\n        if val < min_val:\n            min_val = val\n            min_x = x\n    return min_x\n\n",
  "814": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        print(\"No\")\n        return\n    if a[1] == 0:\n        print(\"Yes\")\n        return\n    if a[-2] == 0:\n        print(\"Yes\")\n        return\n    for i in range(1, n - 1):\n        if a[i] == 0 and (a[i - 1]",
  "815": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is",
  "816": "m = int(input())\nbooks = list(map(int, input().split()))\nn = int(input())\nregister = list(map(int, input().split()))\nborrowed = [0] * m\nfor i in range(n):\n    for j in range(m):\n        if borrowed[j] == 0 and j + 1 == register[i]:\n            print(books[j])\n            borrowed[j] = 1\n            break",
  "817": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = 0\n    ans = 0\n    for i in a:\n        xor ^= i\n    if xor == 0:\n        print(0)\n    else:\n        for i in a:\n            ans += i\n        print(ans - xor)",
  "818": "```python\nimport sys\n\nclass SegmentTree:\n    def __init__(self, n, arr):\n        self.n = n\n        self.tree = [[0, 0] for _ in range(4 * n)]\n        self.build(1, 1, n, arr)\n\n    def build(self, node, start, end, arr):\n        if start == end:\n            self.tree[node] = [arr[start], arr[start] & 1]\n            return\n        mid",
  "819": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if (x == y) or (x % 2 == y % 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "821": "import sys\nfrom functools import cmp_to_key\n\ndef cmp(a, b):\n    if a[1] == b[1]:\n        return a[0] - b[0]\n    return a[1] - b[1]\n\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append([l, r])\n    a.sort(key=cmp_to_key(cmp))\n   ",
  "822": "from collections import defaultdict\n\nfor _ in range(int(input().split()[0])):\n    n, m = map(int, input().split())\n    d = defaultdict(int)\n    for _ in range(n):\n        s = input()\n        d[s] += 1\n    for k, v in d.items():\n        d[v] += d.pop(k)\n    print(*d.values())",
  "823": "def solve():\n    a, b, c, d = map(int, input().split())\n    s = a + b + c + d\n    if s == 0 or (s != 0 and (a == 0 or b == 0 or c == 0 or d == 0)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "825": "def solve():\n    n = int(input())\n    print((n + 1) // 2 + n)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "827": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    a = [0] * (n * k)\n    b = [0] * (n * k)\n    for i in range(n * k):\n        if s[i % n] == 'a':\n            a[i] = 1\n        if s[i % n] == 'b':\n            b[i] = 1\n    ans = 0\n    for i",
  "828": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    due = 0\n    paid = 0\n    for i in range(n):\n        if a[i] == 0:\n            due += 1000\n            paid += 1\n        else:\n            if paid > 0:\n                due += 1100\n                paid -= 1\n            else:\n                due += 100",
  "829": "n = int(input())\nteams = list(map(int, input().split()))\nrevenue = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        revenue += abs(teams[i] - teams[j])\nprint(revenue)",
  "830": "def solve():\n    n = int(input())\n    a = input()\n    b = input()\n    if set(b) != set(a):\n        print(-1)\n        return\n    ans = []\n    for i in range(n):\n        if a[i] != b[i]:\n            s = set()\n            for j in range(n):\n                if a[j] <= a[i]:\n                    s.add(j)\n            c = min(a[i], b[i])\n            for j in s:\n                a",
  "831": "def solve():\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [0]\n    for x in a:\n        pre.append((pre[-1] + x) % p)\n    ans = 0\n    cnt = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if (pre[j] - pre[i]) %",
  "832": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if sum(a[i+1:i+k]) >= a[i]:\n            ans += 2**(n-i-1)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "833": "n, m = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nt = int(input())\nfor _ in range(t):\n    px, py, qx, qy = map(int, input().split())\n    px -= 1\n    py -= 1\n    qx -= 1\n    qy -= 1\n    print(sum(sum(row[py:qy+1]) for row in matrix[px",
  "835": "def solve():\n    n, m = map(int, input().split())\n    if n == 2 or m == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "836": "def find_movie(movies):\n    max_product = 0\n    max_rating = 0\n    min_index = 0\n    for i, (length, rating) in enumerate(zip(movies[1].split(), movies[2].split()), 1):\n        product = int(length) * int(rating)\n        if product > max_product or (product == max_product and int(rating) > max_rating) or (product == max_product and int(rating) == max",
  "837": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(sum(range(0, n + 1, 10)))",
  "838": "def solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    ans = max(w)\n    for i in range(n - 1):\n        ans = max(ans - 1, w[i + 1])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "839": "```python\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if k % s == 0:\n        print(1)\n    else:\n        print(0)\n    input()\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if k % s == 0:\n",
  "840": "t = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    for i in range(k):\n        print(\"*\", end=\"\")\n    print()",
  "841": "def solve(N):\n    MOD = 10**9 + 7\n    n = len(N)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i + 1] = (dp[i + 1] + dp[i]) % MOD\n        for j in range(i):\n            dp[i + 1] = (dp[i + 1] + dp[j] * int",
  "842": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            print(' ' * (n - i) + str(i) + ' ' * (n - i), end='')\n        else:\n            print(' ' * (n - (n - i)) + str(i), end='')\n    print()\n```",
  "843": "def solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i][i]\n    for j in range(1, n):\n        for i in range(n - j):\n            dp[i][i + j] = max([a[k][i] for k in range(i",
  "844": "```python\ndef solve(tweets, clicks):\n    open_tweets = [0] * len(tweets)\n    for click in clicks:\n        if click.startswith('CLICK'):\n            tweet_id = int(click.split()[1])\n            open_tweets[tweet_id - 1] ^= 1\n        elif click == 'CLOSEALL':\n            open_tweets = [0] * len(tweets)\n    return [str(sum(open_tweets))]\n\ntweets, clicks = ['3 6'], ['CLICK ",
  "845": "import math\n\nn = int(input())\n\nfor _ in range(n):\n    c, d = map(int, input().split())\n    side = min(c, d)\n    while side > 0:\n        if c % side == 0 and d % side == 0:\n            break\n        side -= 1\n    print(c // side * d // side)",
  "846": "def max_biscuits(K, A, B):\n    return (K + (K // A) * B) - (K // A)",
  "848": "n = int(input())\nfor _ in range(n):\n    input()\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(a[0] + a[1] + a[2])",
  "849": "import math\nfrom functools import reduce\nfrom operator import gcd\nfrom collections import defaultdict\n\ndef max_length_gcd(arr):\n    n = len(arr)\n    max_gcd = 0\n    max_length = 0\n    prefix_gcd = [0] * n\n    prefix_gcd[0] = arr[0]\n    for i in range(1, n):\n        prefix_gcd[i] = math.gcd(prefix_gcd[i-1], arr[i])\n   ",
  "851": "import math\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(n * (1 + math.log(k) / math.log(n)))",
  "852": "def solve():\n    n = int(input())\n    res = []\n    for i in range(2 ** n):\n        bin_str = bin(i)[2:].zfill(n)\n        res.append(bin_str)\n    print('\\n'.join(res))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "853": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    drivers = {}\n\n    for _ in range(2 * n):\n        name = input()\n        time = int(input())\n        drivers[name] = time\n\n    sorted_drivers = sorted(drivers.items(), key=lambda x: x[1])\n\n    for driver, _ in sorted_drivers:\n        print(driver)",
  "854": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if len(a) == len(set(a)):\n        print(\"prekrasnyy\")\n    else:\n        print(\"ne krasivo\")",
  "855": "s = input()\nresult = ''\nfor char in s:\n    result = char + result\nprint(result)",
  "856": "from collections import defaultdict\n\nfor _ in range(int(input())):\n    n = int(input())\n    mp = defaultdict(int)\n    for _ in range(n):\n        word, s = input().split()\n        mp[word] += s\n    print(sum(1 for v in mp.values() if v == 1))",
  "857": "def max_points(Dom_time, rival_time):\n    Dom_time.sort()\n    rival_time.sort()\n    points = 0\n    for i in range(len(Dom_time)):\n        if Dom_time[i] < rival_time[i]:\n            points += 1\n    return points\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    Dom_time = list(map(int, input().split()))\n    rival_time = list(map(int, input().split()))\n    print",
  "858": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(2 * (n // 4))\n    else:\n        print(2 * ((n + 1) // 2) - 1)",
  "859": "def find_kth_highest(n, k):\n    return sum(i ^ (i - 1) for i in range(1, n + 1)) - (k - 1) * (k - 1)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if k > n:\n        print(-1)\n    else:\n        print(find_kth_highest(n, k))",
  "860": "def solve():\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    l, r = 0, max(a)\n    while l < r:\n        m = (l + r) // 2\n        if sum((x + m - 1) // m for x in a) <= h:\n            r = m\n        else:\n            l = m + 1\n    print(l)\n\nt = int(input",
  "861": "def fibonacci_count(a, b):\n    a, b = int(a), int(b)\n    fib = [1, 2]\n    while fib[-1] <= b:\n        fib.append(fib[-1] + fib[-2])\n    return str(sum(1 for f in fib if a <= f <= b))\n\nt = int(input())\nfor _ in range(t):\n    a, b = input().split()\n    print(fibonacci_count(a, b))",
  "862": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, m, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        mod = 10**7\n        ans = 0\n        for i in range(n):\n            cnt = 0\n            max_val = 0\n            for j in range(n):\n                if a[j] > max_val:\n                    max_val = a[j]\n                    idx",
  "863": "from collections import deque\n\ndef solve(stations, neighbours):\n    n = len(stations)\n    visited = [False] * n\n    queue = deque()\n    max_traffic = 0\n\n    for i in range(n):\n        if not visited[i]:\n            queue.append(i)\n            visited[i] = True\n            traffic = stations[i]\n\n            while queue:\n                node = queue.popleft()\n                for neighbour in neighbours[node]:\n                    if not visited[neighbour]:\n                        queue.append",
  "864": "t = int(input())\n\nfor i in range(1, t + 1):\n    n, k = map(int, input().split())\n    total_sum = sum(range(1, n + 1))\n    for j in range(1, int(n ** (1 / k)) + 1):\n        total_sum -= j * k ** (j - 1)\n    print(f\"Case #{i}: {total_sum}\")",
  "865": "def solve(N):\n    MOD = 10**9 + 7\n    if N <= 3:\n        return 0\n    if N % 2 == 1:\n        return pow(2, (N - 1) // 2, MOD)\n    return pow(2, N // 2 - 1, MOD) * 2 % MOD\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(solve(N))",
  "866": "def solve():\n    n = int(input())\n    c = list(map(int, input().split()))\n    v = [0] * (n + 1)\n    for i in range(n):\n        if c[i] == 0:\n            print(-1)\n            return\n        for j in range(1, c[i] + 1):\n            v[j] += 1\n    for i in range(1, n + 1):\n        if v[i] > ",
  "867": "def min_hits(S, W1, W2, W3):\n    bricks = [W1, W2, W3]\n    hits = 0\n    while bricks:\n        max_k = 0\n        while max_k < len(bricks) and sum(bricks[:max_k+1]) <= S:\n            max_k += 1\n        bricks = bricks[max_k:]\n        hits += 1\n    return hits\n\nfor _ in range(int(input())):\n    S",
  "868": "import bisect\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for l in range(n):\n        for r in range(l, n):\n            m = (r - l + 1) * ((k - 1) // (r - l + 1) + 1)\n            b = a[l:r+1] * (m // len",
  "869": "def substring_search(M, S):\n    return 'Y' if S in M else 'N'\n\nM = input()\nS = input()\nprint(substring_search(M, S))",
  "872": "t = int(input())\n\nfor _ in range(t):\n    n, a, b, k = map(int, input().split())\n\n    appy = n // a - n // (a * b)\n    chef = n // b - n // (a * b)\n\n    print(\"Win\" if appy + chef >= k else \"Lose\")",
  "874": "```python\nimport sys\n\ndef solve():\n    n, m, s = map(int, input().split())\n    h = list(map(int, input().split()))\n    h.sort()\n    ans = 0\n    for i in range(n):\n        if h[i] <= s:\n            ans += 1\n        elif h[i] <= 2 * s:\n            ans += 1\n            m -= 2\n        if m == 0:\n            break\n    print",
  "876": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('YES' if max(a) - min(a) < x else 'NO')",
  "877": "def solve():\n    x, y, k, n = map(int, input().split())\n    diff = abs(x - y)\n    if diff % k == 0 and diff // k <= n - max(x, y):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "878": "def solve():\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    h = [0] + h\n    ans = 0\n    for i in range(1, n + 1):\n        if h[i] - h[i - 1] > k:\n            ans += 1\n            j = h[i - 1] + k\n            while j < h[i]:\n                j += k\n               ",
  "879": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    strength = sum((i % 10) for i in range(y, x + 1, y))\n    print(strength)",
  "880": "import math\n\nt = int(input())\nfor _ in range(t):\n    r = float(input())\n    area = math.pi * (r ** 2)\n    print(f\"{area:.2f}\")",
  "881": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = n\n    curr = 1\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            curr += 1\n        else:\n            curr = 1\n        ans += curr\n    print(ans)",
  "882": "def longest_common_pattern_length(A, B):\n    A = ' ' + A\n    B = ' ' + B\n    dp = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n    for i in range(1, len(A) + 1):\n        for j in range(1, len(B) + 1):\n            if A[i] == B[j]:\n                dp[i][j] = dp[i -",
  "883": "```python\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_val = max(arr)\n    if max_val > (n - 1):\n        print(-1)\n        return\n    if max_val == (n - 1):\n        print(-1)\n        return\n    failed = 0\n    for i in range(n):\n        if arr[i] == max_val:\n            failed += 1\n    print(n -",
  "884": "def find_factors(x, k):\n    factors = set()\n    for i in range(1, int(x**0.5) + 1):\n        if x % i == 0:\n            factors.add(i)\n            factors.add(x // i)\n    factors = sorted(list(factors))\n    return factors\n\ndef solve(x, k, r):\n    factors_x = find_factors(x, k)\n    factors_r = find_factors(r, k)\n    sum_kth_power = sum(i",
  "885": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    print(count)",
  "886": "def find_nearest_numbers():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        m = int(input())\n        a = [(a[i] + a[i+1]//3) for i in range(0, n-1, 2)] + [a[-1]]\n        a = [a[i] + a[i+1]%3 for i in range(0, n",
  "887": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if a[0] != b[-1]:\n        print('No')\n        continue\n\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = min(dp",
  "889": "def min_proxy(D, S):\n    proxy = 0\n    for i in range(2, D-2):\n        if S[i] == 'A' and S[i-1] != 'P' and S[i+1] != 'P':\n            proxy += 1\n    if sum(c == 'P' for c in S) / D < 0.75:\n        return -1\n    return proxy\n\nT = int(input())\nfor _ in range(T",
  "890": "def min_fences(n, rows):\n    grid = [list(row) for row in rows]\n    visited = [[False for _ in range(n)] for _ in range(2)]\n    fences = 0\n\n    for i in range(2):\n        for j in range(n):\n            if grid[i][j] == '*' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                fences += 1\n\n    return fences\n\ndef dfs(grid, visited",
  "891": "def solve():\n    n, m = map(int, input().split())\n    freq = [0] * (3 * n + 1)\n    for i in range(1, n + 1):\n        for j in range(n + 1, 2 * n + 1):\n            freq[i + j] += 1\n    for _ in range(m):\n        q = int(input())\n        print(freq[q])\n\nsolve()",
  "893": "import math\n\ndef count_prime_factors(n):\n    cnt = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            cnt += 1\n            n //= i\n    if n > 1:\n        cnt += 1\n    return cnt\n\ndef max_special_sum(arr, k, s):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n       ",
  "894": "```python\nimport sys\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    g1 = [list(map(int, input().split())) for _ in range(n)]\n    g2 = [list(map(int, input().split())) for _ in range(n)]\n\n    match = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if g1[i][j] == g2[i][j",
  "895": "def min_cost(n, costs):\n    costs = list(map(int, costs.split()))\n    dp = [0] * n\n    dp[0] = costs[0]\n    dp[1] = min(costs[0], costs[1])\n    for i in range(2, n):\n        dp[i] = min(dp[i-1], dp[i-2]) + costs[i]\n    return min(dp[-1], dp[-2] + costs[-1])",
  "896": "def solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append((l, r))\n    l, r = a[0]\n    ans = []\n    for i in range(1, n):\n        x, y = a[i]\n        d = abs(x - l) + abs(r - y)\n        if d == 0:\n            continue\n        if x < l",
  "898": "def solve():\n    M, N = map(int, input().split())\n    ans = 0\n    distinct_x = set()\n    for x in range(1, M + 1):\n        for y in range(1, N + 1):\n            if str(x) + str(y) == str(x * y + x + y):\n                ans += 1\n                distinct_x.add(x)\n    print(ans, len(distinct_x))\n\nt = int(input())\nfor _",
  "899": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [0]\n    for i in range(n):\n        prefix.append(prefix[-1] + a[i])\n    print(max(max(a) - (prefix[n] - prefix[i + 1]) for i in range(n)))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "900": "def solve(K):\n    mod = 10**9 + 7\n    if K == 1:\n        return 10\n    ans = 0\n    for i in range(1, K):\n        for j in range(i+1, K):\n            ans += 9 * (10 ** (i - 1)) * (10 ** (j - i - 1))\n    return ans % mod\n\nT = int(input())\nfor _ in range(T):\n    K",
  "901": "def f(A, i, S):\n    j = i\n    while j + 1 < len(A) and A[i] + A[j + 1] <= S:\n        j += 1\n    return S - A[i] - A[i + 1] - ... - A[j]\n\ndef solve():\n    N, k, S = map(int, input().split())\n    A = list(map(int, input().split()))\n    A = [-A[i] for i",
  "902": "def binary_nim(N, S, stacks):\n    x = 0\n    for stack in stacks:\n        if stack[0] == '1':\n            x ^= len(stack) - 1\n    return 'Dee' if (S == 'Dee' and x % 2 == 1) or (S == 'Dum' and x % 2 == 0) else 'Dum'\n\nT = int(input())\nfor _ in range(T):\n    N",
  "903": "t = int(input())\n\nfor _ in range(t):\n    x1, y1 = map(float, input().split())\n    x2, y2 = map(float, input().split())\n    mirror_x = (x1 + x2) / 2\n    print(f\"{mirror_x:.2f}\")",
  "904": "def can_escape():\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        left, right = 0, n + 1\n        energy = 0\n        for i in range((n + 1) // 2):\n            for j in range(max(1, left - i), min(n - i + 1, right - i)):\n               ",
  "905": "def safest_position(n):\n    return (n + 1) // 2",
  "907": "def is_valid_report(report):\n    snakes = []\n    for i, char in enumerate(report):\n        if char == 'H':\n            snakes.append(i)\n        elif char == 'T':\n            if not snakes or snakes[-1] > i:\n                return False\n            snakes.pop()\n    return not snakes\n\nR = int(input())\nfor _ in range(R):\n    L = int(input())\n    report = input()\n    print('Valid' if is_valid_report(report) else 'Invalid')",
  "908": "def solve(N):\n    return int((2 * N ** 0.5 - 1) / 2)\n\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    print(solve(N))",
  "909": "def solve():\n    n = int(input())\n    b = sorted(list(map(int, input().split())))\n    g = sorted(list(map(int, input().split())))\n    for i in range(n):\n        if b[i] < g[i]:\n            return \"NO\"\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "910": "def solve():\n    s = input()\n    n = int(input())\n    pattern = ''\n    for i in range(n):\n        pattern += s\n    pattern += s\n    dp = [0] * (len(pattern) + 1)\n    dp[0] = 1\n    for i in range(1, len(pattern) + 1):\n        if pattern[i - 1] == 'T':\n            dp[i] += dp[i - 2]\n        dp[i",
  "912": "def solve():\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = float('inf')\n    for i in range(k - 1, n):\n        ans = min(ans, x[i] - x[i - (k - 1)])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "913": "import heapq\nfrom collections import defaultdict\n\nN, M, K = map(int, input().split())\nroads = defaultdict(list)\nfor _ in range(K):\n    x1, y1, x2, y2 = map(int, input().split())\n    roads[y1].append((x1, x2, y2))\n    roads[y2].append((x2, x1, y1))\n\nans = 0\npq = []\nfor y in range(1, M",
  "914": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    vis = [[0] * m for _ in range(n)]\n    q = []\n    for i in range(n):\n        for j in range(m):\n            q.append((a[n - i][j], i, j))\n    q.sort()\n    for i in range(len(q",
  "915": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = {}\n    for i in range(n):\n        if b[i] in c:\n            c[b[i]].append(a[i])\n        else:\n            c[b[i]] = [a[i]]\n    ans = 0\n    for i in c:\n        c[i].sort()\n        ans += len(c[i]) - 1",
  "916": "def min_amount(N, M):\n    return N * M\n\nt = int(input())\nfor _ in range(t):\n    N, M = map(int, input().split())\n    print(min_amount(N, M))",
  "917": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_diff = float('inf')\n    count = 0\n    for i in range(n - 1):\n        diff = abs(a[i] + a[i + 1] - k)\n        if diff < min_diff:\n            min_diff = diff\n            count = 1\n        elif diff ==",
  "918": "def min_toggle(n):\n    return sum(bin(i).count('1') for i in range(1, n + 1)) % 8589934592\n\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    print(f'Case {i}: {min_toggle(n)}')",
  "919": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[i] == a[j]:\n            j += 1\n        if (j - i) % 2 == 1:\n            ans += 1\n        i = j\n    print(ans)\n\nt = int(input())\nfor _ in range",
  "920": "def minAwkwardness(s):\n    n = len(s)\n    boys = [i for i in range(n) if s[i] == 'b']\n    girls = [i for i in range(n) if s[i] == 'g']\n    awkwardness = 0\n    i, j = 0, 0\n    while i < len(boys) and j < len(girls):\n        awkwardness += abs(boys[i] - girls[j]) +",
  "921": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    ans = 0\n    for i in range(m):\n        l = b[i]\n        r = n\n        while l <= r:\n            mid = (l+r)//2\n            if a[mid-1] <= b[i]:\n                l =",
  "922": "```python\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    print(*sorted(a ^ b))\n```",
  "923": "def min_time(N):\n    return (N + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_time(n))",
  "925": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    choice = list(map(int, input().split()))\n    dp = [[0.0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if choice[j - 1] == -1:\n                dp[i][j] = 0",
  "926": "def max_jars():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_sum = 0\n        for i in range(n):\n            max_heap = []\n            second_max_heap = []\n            for j in range(i, n):\n                heappush(max_heap, -a[j])\n                heappush(second_max_heap, -a[j])\n                if",
  "927": "n, m = map(int, input().split())\nboard = list(range(1, n + 1))\n\nfor _ in range(m):\n    k = int(input())\n    if k in board:\n        board[0], board[-1] = board[-1], board[0]\n    else:\n        board[-1] = k\n    print(sum(board))",
  "928": "def solve(n):\n    return sum(1 for i in range(1, n+1) if i % 3 != 0 and (i % j != 0 for j in range(2, int(n**0.5) + 1)))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "930": "def solve(n):\n    for i in range(1, n * n + 1):\n        if i % 4 == 0:\n            print(i - i % 4 + 3, end=' ')\n        elif i % 4 == 1:\n            print(i - i % 4 + 1, end=' ')\n        elif i % 4 == 2:\n            print(i - i % 4 + 2, end=' ')\n        else:\n            print(i",
  "931": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    return sum(i & 1 == 0 for i in a)\n\nt = int(input())\nfor _ in range(t):\n    print(sum(solve() for _ in range(int(input()))))",
  "932": "import sys\nimport math\n\ndef solve(n, a):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = (dp[i][j - 1] +",
  "933": "def is_correct_move(move):\n    cells = move.split('-')\n    if len(cells) != 2:\n        return False\n    start, end = cells\n    if len(start) != 2 or len(end) != 2:\n        return False\n    if not (start[0].isalpha() and start[1].isdigit() and end[0].isalpha() and end[1].isdigit()):\n        return False\n    if not (start[0].lower()",
  "934": "def f(X, Y, Z):\n    if X > Y or Y < Z:\n        return 0\n    return (X + Y) * (Y + Z)\n\ndef solve():\n    MOD = 1000000007\n    p, q, r = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n\n    ans = 0",
  "935": "t = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    turns = 0\n    while x % 2 == 0 and x % 5 != 0:\n        x *= 2\n        turns += 1\n    if x % 10 == 0:\n        print(turns)\n    else:\n        print(-1)",
  "936": "def solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != (i * n + j):\n                return print(n - 1)\n    return print(0)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "937": "def solve(s):\n    cooking = eating = sleeping = 0\n    for i in s:\n        if i == 'C':\n            cooking += 1\n        elif i == 'E':\n            eating += 1\n        else:\n            sleeping += 1\n        if cooking > eating + sleeping or eating < cooking or sleeping < eating:\n            return \"no\"\n    return \"yes\"\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(s",
  "938": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        freq[i] = freq.get(i, 0) + 1\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            flag = 1\n            for k in range(i, j):\n                if a[k] in a[i:j]:\n                    flag = ",
  "940": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    r = int(input())\n    print(int(math.pi * r ** 2))",
  "941": "t = int(input())\n\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((a + b) // 2 * ((a + b) // 2 + 1) // 2 if (a + b) % 2 == 0 else (a // 2 + 1) * (b // 2 + 1))",
  "943": "def solve(V, W):\n    return min(V, W) + 1\n\nt = int(input())\nfor _ in range(t):\n    V, W = map(int, input().split())\n    print(solve(V, W))",
  "945": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n // 2 + (n % 2 != 0))",
  "946": "import sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\na = [[0] * K for _ in range(N)]\nfor i in range(N):\n    a[i] = list(map(int, input().split()))\n\nfor j in range(K):\n    for i in range(N - 2, -1, -1):\n        a[i + 1][j] += a[i][j]\n\nfor i in range(N - 1):\n    for",
  "948": "def count_perfect_squares(A, B):\n    count = 0\n    for x in range(1, A + 1):\n        for y in range(1, B + 1):\n            if (x**2 + y)**0.5 % 1 == 0:\n                count += 1\n    return count\n\nA, B = map(int, input().split())\nprint(count_perfect_squares(A, B))",
  "949": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(1, n):\n        if a[i] == a[0]:\n            ans += 1\n            if i + 2 < n and a[i + 2] == a[0]:\n                ans += 1\n\n    print(ans)\n```",
  "950": "def smallest_repetition_free_number(n):\n    n = int(n)\n    digits = [0] * 10\n    def dfs(num):\n        if num > n:\n            return num\n        for i in range(1, 10):\n            if digits[i] == 0:\n                digits[i] = 1\n                result = dfs(num * 10 + i)\n                if result != float('inf'):\n                    return result\n                digits[i] = 0\n        return",
  "952": "def min_cost(s):\n    vowels = 'aeiou'\n    cost = 0\n    for c in s:\n        if c not in vowels:\n            cost += min(abs(ord(c) - ord('a')) + 5, 26 - abs(ord(c) - ord('a')))\n    return cost\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(min_cost(s))",
  "953": "def solve(N):\n    return (N + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    print(solve(N))",
  "954": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    series = [i for i in range(1, n + 1)] + [i for i in range(n - 1, 0, -1)]\n    print(sum(i ** 3 for i in series))",
  "955": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(N):\n    count = 0\n    for p in range(2, N):\n        if is_prime(p):\n            q = (N - p) // 2\n            if q >= 2 and is_prime(q",
  "956": "import math\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\ndef convex_hull(n, points):\n    hull = []\n    points.sort(key=lambda p: (p[1], p[0]))\n    def get_next_point(p):\n",
  "957": "def max_distance_of_peace():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        x = list(map(int, input().split()))\n        x.sort()\n        ans = 0\n        for i in range(1, n):\n            ans = max(ans, x[i] - x[i - 1])\n        print(ans)\n\nmax_distance_of_peace()",
  "958": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    pattern = ''\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            pattern += '*' * i\n        else:\n            pattern += '*' + ' ' * (i - 2) + '*'\n    print(pattern)\n```",
  "959": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = 0\n    for i in range(0, n, 2):\n        s += abs(a[i] - a[i + 1])\n    print(s)",
  "960": "```python\nfor i in range(int(input())):\n    n = int(input())\n    s = '1'\n    for j in range(1, n):\n        s += ' ' + s\n        s = bin(int(s.split()[-1]) + 1)[2:]\n    print(s)\n```",
  "962": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    for i in range(1, n + 1):\n        print(i, end='')\n    for i in range(n - 1, 0, -1):\n        print(i, end='')\n    print()",
  "963": "def min_reservoirs():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        hills = list(map(int, input().split()))\n        left, right = [0] * n, [0] * n\n        max_left, max_right = float('-inf'), float('-inf')\n        for i in range(n):\n            max_left = max(max_left, hills[i])\n            left[i] = max_left\n        for i in range(n",
  "964": "def min_moves(H, U, D):\n    if U >= D and (H - D) % (U + D) != 0:\n        return -1\n    return (H - D) // (U + D) * (U + D) + max(H, D)\n\nt = int(input())\nfor _ in range(t):\n    H, U, D = map(int, input().split())\n    print(min_moves(H, U, D))",
  "965": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    students, teacher = divmod(n, k)\n    print(students, teacher)",
  "966": "def solve():\n    n, u, d = map(int, input().split())\n    hills = list(map(int, input().split()))\n    max_reach = 0\n    parachute_used = False\n    for i in range(n):\n        if i > max_reach:\n            break\n        if i + 1 < n and hills[i + 1] <= hills[i]:\n            max_reach = i + 1\n        elif i + 1 < n and hills[i",
  "967": "def find_subsets():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        m = int(input())\n        arr = list(map(int, input().split()))\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            for j in range(m + 1):\n                if j -",
  "968": "class Node:\n    def __init__(self, value, parent=None):\n        self.value = value\n        self.parent = parent\n        self.children = []\n\ndef dfs(node):\n    stack = [(node, node.value)]\n    while stack:\n        node, min_val = stack.pop()\n        for child in node.children:\n            stack.append((child, min(min_val, child.value)))\n        if node != root:\n            print(min_val, end=' ')\n\nroot = Node(0)\nN =",
  "969": "def max_months(laddus, redeem):\n    months = 0\n    while laddus >= redeem:\n        laddus -= redeem\n        months += 1\n    return months\n\nt = int(input())\n\nfor _ in range(t):\n    activities, origin = input().split()\n    activities = int(activities)\n    laddus = 0\n    for _ in range(activities):\n        activity = input().split()\n        if activity[0] == 'CONTEST",
  "970": "import math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    for _ in range(q):\n        x, y = map(int, input().split())\n        if x == 0 and y == 0:\n            print(0)\n            continue\n        if x == 0:\n            print(a[0])\n           ",
  "971": "def min_moves():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        min_val = min(a)\n        moves = sum(abs(x - min_val) for x in a)\n        print(moves)\n\nmin_moves()",
  "972": "n, k = map(int, input().split())\nh = sorted(map(int, input().split()))\nprint(min(h[i+k-1] - h[i-1] for i in range(1, k)))",
  "973": "def max_diff(n, k, arr):\n    return max(arr) + k * (n - 1) - min(arr)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(max_diff(n, k, arr))",
  "974": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b, c, d = map(int, input().split())\n    if (a - b) % gcd(c, d) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
  "975": "n = int(input())\n\nfor _ in range(n):\n    N, R, x, y = map(int, input().split())\n    X = set(map(int, input().split())) if x else set()\n    Y = set(map(int, input().split())) if y else set()\n\n    print(N - len(X.union(Y)) - max(0, R - len(X.union(Y))))",
  "977": "def solve():\n    n = int(input())\n    s = input()\n    result = \"\"\n    for i in range(0, n, 2):\n        if i + 1 < n:\n            result += s[i + 1] + s[i]\n        else:\n            result += s[i]\n    result = result.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"zyxwvutsrqponmlkjihgfedcba\"))\n    print(result)\n\nt = int(input())\nfor",
  "978": "def factorial(n, mod):\n    if n == 0:\n        return 1\n    else:\n        return (n * factorial(n - 1, mod)) % mod\n\ndef catalan(n, mod):\n    if n % 2 == 0:\n        return (factorial(n, mod) * factorial(n // 2, mod)) % mod\n    else:\n        return 0\n\ndef solve():\n    mod = 1000000007\n    t = int(input",
  "979": "import math\n\ndef expected_good_rectangles(m, n, k):\n    return math.ceil((m-1)*(n-1)*(k**2))\n\nm, n, k = map(int, input().split())\nprint(expected_good_rectangles(m, n, k))",
  "980": "def solve():\n    n, b, m = map(int, input().split())\n    time = 0\n    problems = n\n    speed = m\n    break_time = 0\n    while problems > 0:\n        time += problems * speed\n        if problems % 2 == 0:\n            break_time += b\n            problems //= 2\n            speed *= 2\n        else:\n            break_time += b\n            problems = (problems + 1)",
  "981": "def min_diff(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(min_diff(arr))",
  "982": "def special_numbers(n):\n    def is_special(num):\n        num_str = str(num)\n        diff = (int(num_str[1]) - int(num_str[0])) % 10\n        for i in range(2, len(num_str)):\n            if (int(num_str[i]) - int(num_str[i-1])) % 10 != diff:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, n+1):\n       ",
  "984": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = sum(1 for x in a if x % 2 == 0)\n    odd = n - even\n    print(even * odd // 2)",
  "985": "```python\nfrom math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef longest_dividing_subsequence(nums):\n    n = len(nums)\n    dp = [[1] * n for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if nums[j] % nums[i] == 0:\n               ",
  "987": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    finish, distancetoBolt, tigerAccelaration, boltSpeed = map(int, input().split())\n    time_to_cover_distance = (distancetoBolt / boltSpeed)\n    time_to_cover_finish = (finish / boltSpeed)\n    time_to_cover_finish_tiger = (finish + distancetoBolt) / (0.5 * tigerAccelaration * time_to_cover_finish",
  "988": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = 0\n    for num in a:\n        xor ^= num\n    if xor != 0:\n        print(sum(a))\n    else:\n        print(0)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "989": "def solve(x, y, k):\n    return \"Chef\" if (x + y) % k == x % k else \"Paja\"\n\nt = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    print(solve(x, y, k))",
  "990": "def calculate_flagstones(n, m, a):\n    return (n + a - 1) // a * (m + a - 1) // a\n\nn, m, a = map(int, input().split())\nprint(calculate_flagstones(n, m, a))",
  "992": "import sys\nimport math\n\ndef dist(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef cross(o, a, b):\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\ndef",
  "993": "def can_park(N, slots):\n    for slot in slots:\n        if slot % N == 0 and slot % (N - 1) != 0:\n            return \"YES\"\n    return \"NO\"\n\nN = int(input())\nslots = []\nfor _ in range(N):\n    slots.append(int(input()))\nprint(can_park(N, slots))",
  "994": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(a[k] + a[l] for k in range(i, j + 1) for l in range(i, j + 1))\n            ans += cnt[x",
  "995": "def maxMoney(n, A, k):\n    dp = [[0] * (k + 1) for _ in range(n)]\n    dp[0][1] = A[0]\n    dp[n - 1][1] = A[n - 1]\n    for i in range(1, n):\n        if i - 1:\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2])\n        if i",
  "996": "def find_winner(scores):\n    max_lead = 0\n    winner = 1\n    for i in range(len(scores)):\n        player1, player2 = map(int, scores[i].split())\n        if i == 0:\n            lead = abs(player1 - player2)\n        else:\n            lead = abs(scores[i-1].split()[0] - scores[i-1].split()[1]) - abs(player1 - player2)\n        if lead > max_lead:\n           ",
  "997": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    ans = 0\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        ans = max(ans, k * 10)\n    print(ans * n // m)",
  "998": "```python\nimport sys\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[float('-inf')] * (n + 1) for _ in range(20)]\n\n    def update(self, row, col, val):\n        i = self.n + row\n        for j in range(20):\n            self.tree[j][i] = max(self.tree[j][i], val)\n            i = (i + (1",
  "999": "def solve(k):\n    result = ''\n    for i in range(1, k + 1):\n        result += chr(64 + i)\n    return result\n\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(solve(k))",
  "1000": "n = int(input())\n\nfor _ in range(n):\n    m = int(input())\n    a = list(map(int, input().split()))\n    time = 0\n    for i in range(m):\n        time += a[i]\n    print(max(1, time // m))",
  "1001": "def solve():\n    n = int(input())\n    prices = list(map(int, input().split()))\n    count = 0\n    window = []\n    for i in range(n):\n        window.append(prices[i])\n        if i >= 5:\n            window.sort()\n            if prices[i] < window[-1]:\n                count += 1\n                window.pop(-1)\n        else:\n            if prices[i] < prices[i-1]:\n                count += 1\n    print(count",
  "1002": "```python\nfrom collections import deque\n\ndef solve():\n    n, d = map(int, input().split())\n    cities = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(cities[i] - cities[j]) <= d:\n                graph[i].append(j)\n                graph[j].append(i)\n\n    visited = [False] * n\n",
  "1004": "def min_hoverboards(n):\n    count = 0\n    size = 1\n    while size * size <= n * n:\n        count += (n * n - size * size) // (size * size)\n        size += 1\n    count += 1\n    return count, ' '.join([str(1) * (n * n // size * size - size * size) + str(size)] * (n * n // size * size // (size",
  "1006": "def solve():\n    n, d = map(int, input().split())\n    if str(d) in str(n):\n        return str(n).replace(str(d), '', 1) + str(d)\n    else:\n        return str(n) + str(d)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "1007": "```python\nimport math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len = 0\n    curr_len = 1\n    for i in range(1, n):\n        if math.gcd(arr[i], arr[i - 1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len,",
  "1008": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        cnt[x] = cnt.get(x, 0) + 1\n    ans = 0\n    for k in cnt:\n        ans += cnt[k] * (cnt[k] - 1) // 2\n    print(pow(2, ans, 10**9 + 7))\n\nt = int(input())\nfor _",
  "1009": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if a[i - 1] == 1:\n            dp[i] = dp[i - 1] * 2\n        else:\n            for j in range(i - 1, -1, -1",
  "1011": "def find_message(s):\n    n, k = map(int, s[1].split())\n    message = s[2]\n    chef = sum(1 for a, b in zip(message, message.lower()) if a != b)\n    brother = sum(1 for a, b in zip(message, message.upper()) if a != b)\n    if chef <= k and brother <= k:\n        return \"both\"\n    elif chef <= k:\n        return \"chef\"\n    elif brother <=",
  "1013": "def count_non_friends(N, M, friendships):\n    graph = [[] for _ in range(N + 1)]\n    for u, v in friendships:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (N + 1)\n    groups = 0\n\n    for i in range(1, N + 1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            group_size =",
  "1014": "M = 10**9 + 7\n\ndef solve(S):\n    if S[0] == '0':\n        return -1\n    if '0' not in S:\n        return int(S)\n    n = len(S)\n    ans = 0\n    for i in range(n):\n        if S[i] == '0':\n            continue\n        x = int(S[i])\n        y = int(S[:i] + S[i+1:])\n        if bin(x).",
  "1015": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) * i\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))",
  "1016": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    delayed = 0\n    for _ in range(n):\n        s, j = map(int, input().split())\n        if j - s > 5:\n            delayed += 1\n    print(delayed)",
  "1017": "def solve():\n    a = list(map(int, input().split()))\n    p = a.pop()\n    s = sum(a)\n    for i in range(6):\n        for j in range(5):\n            if s <= 24 * 5:\n                s += a[j] * (i + 1) / p\n                break\n    return \"Yes\" if s > 24 * 2 else \"No\"\n\nt = int(input())\nfor _ in range(t):\n   ",
  "1018": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1):\n        diff = a[i + 1] - a[i]\n        if diff <= i + 1:\n            print(i + 1 + (diff - (i + 1)))\n            break\n        else:\n            print(diff - (i + 1) + 1) \n            break",
  "1019": "```python\ndef is_valid_strip(strip):\n    n, heights = int(strip[0]), list(map(int, strip[1].split()))\n    if n % 2 == 0 or heights[0] != 1 or heights[-1] != 1:\n        return False\n    for i in range(1, n // 2 + 1):\n        if heights[i] != i + 1:\n            return False\n    for i in range(n // 2 +",
  "1020": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        cnt = sum(a)\n        if abs(cnt - k) <= 1:\n            print(2)\n        else:\n            print(1)\n\nsolve()",
  "1021": "def rearrange_sequence(n, sequence):\n    graph = {}\n    for num in sequence:\n        graph[num] = []\n        for other_num in sequence:\n            if num % 3 == 0 and num // 3 == other_num:\n                graph[num].append(other_num)\n            elif num * 2 == other_num:\n                graph[num].append(other_num)\n    visited = set()\n    result = []\n    def dfs(num):\n        visited.add(num)\n        for neighbor in graph[num",
  "1022": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[2] == -1:\n        print('NO')\n        return\n    if n == 4 and a[3] == -1:\n        if a[2] == -1:\n            print('NO')\n            return\n        if a[1] == -1:\n            print('NO')\n            return\n        if a[0]",
  "1023": "def solve():\n    n = int(input())\n    res = ''\n    for i in range(1, n + 1):\n        res += ''.join(str(j) for j in range(1, i + 1))\n        if i != n:\n            res += ' '\n    print(res)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1024": "```python\ndef check_slices():\n    t = int(input())\n    for _ in range(t):\n        s, n, k, r = map(int, input().split())\n        total_slices = 0\n        for i in range(1, n + 1):\n            total_slices += k * (r ** (i - 1))\n        if total_slices <= s:\n            print(\"POSSIBLE\", s - total_slices)\n        else:\n            print(\"IMPOSSIBLE",
  "1026": "def count_triples(N1, N2, N3):\n    MOD = 10**9 + 7\n    return (N1 * N2 * N3) % MOD\n\nT = int(input())\nfor _ in range(T):\n    N1, N2, N3 = map(int, input().split())\n    print(count_triples(N1, N2, N3))",
  "1027": "def solve():\n    n, p = map(int, input().split())\n    if p == n:\n        print('impossible')\n        return\n    s = ['a'] * (n // p) + ['b']\n    s += s[::-1]\n    if s == s[:n][::-1]:\n        print(''.join(s[:n]))\n    else:\n        print('impossible')\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1028": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = str(n)\n    sum = 0\n    for i in s:\n        sum += int(i) ** len(s)\n    if sum == n:\n        print(\"FEELS GOOD\")\n    else:\n        print(\"FEELS BAD\")",
  "1029": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    jobs = sorted(map(int, input().split()))\n\n    chef = []\n    assistant = []\n\n    for i in range(m):\n        if i % 2 == 0:\n            chef.append(jobs[i])\n        else:\n            assistant.append(jobs[i])\n\n    for i in range(1, n + 1):\n        if i not in chef and i not in assistant",
  "1030": "class Node:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n        self.left = None\n        self.right = None\n        self.left_child = None\n        self.right_child = None\n\ndef get_path_configuration(node):\n    if node is None:\n        return []\n    path = get_path_configuration(node.left)\n    path += get_path_configuration(node.right)\n    path.append(node.u)\n    path.append(node.v)\n    return path",
  "1031": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    h, s = map(float, input().split())\n\n    a = (h**2 - 4*s/h)**0.5\n    b = 2*s/h\n\n    if a < b or a+b > h or a+b < 0.01*h:\n        print(-1)\n    else:\n        print(f\"{a:.5f} {b:.5f} {h:.5f}\")",
  "1032": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    print((n * x) % (10**6 + 3))",
  "1033": "def min_change(n, leaf_values):\n    total_sum = sum(leaf_values)\n    target = total_sum // n\n    return abs(target * n - total_sum)",
  "1036": "```python\nfrom collections import deque\n\ndef is_same_snake():\n    t = int(input())\n    for _ in range(t):\n        x11, y11, x12, y12 = map(int, input().split())\n        x21, y21, x22, y22 = map(int, input().split())\n\n        if (x11 == x12 and x21 == x22) or (y11 == y12 and y21 == y22):\n            if (x",
  "1037": "def f(s):\n    p = s.find('P')\n    if p % 2 == 0:\n        return 'Yes' if 'P' in s[p-2:p] else 'No'\n    return 'Yes' if 'P' in s[p-1:p+1] else 'No'\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(f(s))",
  "1039": "def solve():\n    x, y = map(int, input().split())\n    if x > y:\n        print(0)\n        return\n    a = y - x\n    b = y - x\n    if a % 2 == 0:\n        a //= 2\n        b //= 2\n    else:\n        a = (a - 1) // 2\n        b = (a + 1) // 2\n    print(max((y -",
  "1040": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n, q = map(int, input().split())\n    s = input()\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n        if 2 * freq[s[i]] > n:\n            print('YES')\n            return\n    prefix = [[0] * 26 for _ in range(n + 1)]\n    for i in range(n):\n        for j in range",
  "1041": "def max_value_subarray():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        max_product = float('-inf')\n        start = end = 0\n        temp_start = 0\n        for i in range(n):\n            if arr[i] == 0:\n                temp_start = i + 1\n                continue\n            if max_product < arr[i]:\n                max_product = arr[i]\n                start",
  "1042": "def find_good_pairs():\n    t = int(input())\n    for _ in range(t):\n        n, p = map(int, input().split())\n        count = 0\n        for i in range(1, n + 1):\n            if all((i * j) % p != 0 for j in range(1, n + 1) if i < j):\n                count += 1\n        print(count)\n\nfind_good_pairs()",
  "1043": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    forgotten = set(input().split())\n    for _ in range(k):\n        input()\n        phrase = input().split()\n        forgotten -= set(phrase)\n    print(' '.join('YES' if word in forgotten else 'NO' for word in input().split()))\n```",
  "1044": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(sum(int(digit) for digit in str(n)))",
  "1045": "def f(x):\n    vowels = 'aeiou'\n    return 1 if x not in vowels else 0\n\nfor _ in range(int(input())):\n    s = input()\n    n = sum(f(c) * 2**(len(s)-1-i) for i, c in enumerate(s))\n    print(n % (10**9 + 7))",
  "1046": "def game(A, B):\n    i = 1\n    while True:\n        if i % 2 == 1:\n            if A - i < 0:\n                return \"Bob\"\n        else:\n            if B - i < 0:\n                return \"Limak\"\n        i += 1\n\nt = int(input())\nfor _ in range(t):\n    A, B = map(int, input().split())\n    print(game(A, B))",
  "1047": "import math\n\ndef solve():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    def dist(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def check(mid):\n        roads = set()\n        for i in range(n):\n            for j in",
  "1048": "def solve():\n    a, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = max(0, (x[1] - x[0] - k) / 2 + min(x[2] - x[1], x[1] - x[0]) - k)\n    print(f\"{ans:.6f}\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1049": "def max_sum_subarray(arr, k):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if len(set(subarray)) == k:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int",
  "1050": "def longest_valid_prefix(expression):\n    stack = []\n    for i, char in enumerate(expression):\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return i\n    return len(expression) - len(stack)\n\nt = int(input())\nfor _ in range(t):\n    expression = input()\n    print(longest_valid_prefix(expression))",
  "1051": "for _ in range(int(input())):\n    n = int(input())\n    for i in range(1, n+1):\n        print('0', end='')\n        for j in range(1, i+1):\n            print('*' + str(j), end='')\n        print()",
  "1053": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n-1):\n        if arr[i] == 0 and arr[i+1] == 1:\n            print(i+1)\n            break",
  "1054": "def solve(s):\n    n = len(s)\n    if n % 2 == 1:\n        mid = n // 2\n        left = s[:mid]\n        right = s[mid + 1:][::-1]\n        for i in range(mid, -1, -1):\n            if s[mid] == '.':\n                left = left[:i] + s[mid] + left[i:]\n                break\n            elif left[i] == '.':\n                left = left[:",
  "1055": "def max_slices(m, n, a):\n    a = [0] + a\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j >= a[i]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]]",
  "1056": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    if a + b + c == 180:\n        print('YES')\n    else:\n        print('NO')",
  "1057": "def next_magical_number(n):\n    n = str(n)\n    for i in range(len(n) + 1, len(n) * 2 + 1):\n        num = str(i)\n        if '4' in num and '7' in num:\n            return int(num)\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = input()\n    if n:\n        print(next_magical_number(int(n)))",
  "1058": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    original_password = ''\n    carry = 0\n    while n > 0:\n        digit = n % 10\n        original_digit = (digit - carry) % 10\n        carry = (digit - carry) // 10\n        original_password = str(original_digit) + original_password\n        n //= 10\n    print(original_password)",
  "1059": "def max_modulo(arr):\n    max_val = max(arr)\n    max_mod = 0\n    for num in arr:\n        if num != max_val and max_val % num > max_mod:\n            max_mod = max_val % num\n    return max_mod\n\nn = int(input())\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\nprint(max_modulo(arr))",
  "1060": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] != s[(i + 1) % n]:\n            ans += 1\n    print(ans + (n - 1) * (n - 2) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1062": "def ice_wrapping_paper(n):\n    result = []\n    for i in range(n + 1):\n        row = []\n        for j in range(n + 1):\n            if abs(i - j) <= n - i:\n                row.append(4)\n            else:\n                row.append(3)\n        result.append(' '.join(map(str, row)))\n    return result",
  "1063": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a % b)\n```",
  "1064": "def solve():\n    s = input()\n    n = len(s)\n    dp = [[0] * 26 for _ in range(n + 1)]\n    for i in range(n - 3, -1, -1):\n        for j in range(26):\n            if s[i] == '?' or s[i] == chr(ord('A') + j):\n                dp[i][j] = max(dp[i + 1][j], dp[i + 4][j]",
  "1065": "def solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    ans = [0] * (n + m - 2)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                for k in range(n + m - 2):\n                    if 0 <= i - k < n and 0 <= j + k",
  "1066": "def largest_nice_integer(n):\n    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] < n[i - 1]:\n            return int(n[:i])\n    return int(n)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(largest_nice_integer(n))",
  "1068": "def solve():\n    n, m = map(int, input().split())\n    if n == 2 and m == 2 or n == 3 and m == 3:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1069": "t = int(input())\n\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a + b)",
  "1071": "def solve():\n    x, q = map(int, input().split())\n    queries = []\n    for _ in range(q * 2):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        if query[0] == 1:\n            i = query[1]\n            print('ON' if (x >> i) & 1 else 'OFF')\n        elif query[0] == 2:\n            i = query[1]\n            x",
  "1072": "def solve(n):\n    result = ''\n    x_count = n // 2\n    d_count = n - x_count\n    result += 'X' * x_count\n    result += 'D' * d_count\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "1073": "def solve():\n    n, m = map(int, input().split())\n    MOD = 10**9 + 7\n    dp = [[0] * (m + 1) for _ in range(3)]\n    dp[1][1] = 1\n    dp[2][1] = m\n    for i in range(3, n + 3):\n        for j in range(1, m + 1):\n            dp[i % 3][",
  "1074": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    logs = list(map(int, input().split()))\n    logs.sort()\n\n    count = 0\n    for i in range(0, n - 2, 2):\n        if logs[i] == logs[i + 1]:\n            count += logs[i] * (logs[i + 2] == logs[i + 3])\n\n    print(count)\n```",
  "1075": "def predict_winner():\n    for _ in range(int(input())):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        gcd = nums[0]\n        for num in nums[1:]:\n            gcd = gcd(num, gcd)\n        if gcd % 2 == 0:\n            print(\"Derek\")\n        else:\n            print(\"Henry\")\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return",
  "1077": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    instructions = []\n    for _ in range(n):\n        instructions.append(input())\n    reversed_instructions = instructions[::-1]\n    reversed_instructions[0] = instructions[0].replace('Begin on', 'Begin from')\n    for i in range(1, n):\n        if instructions[i].startswith('Left'):\n            reversed_instructions[i] = instructions[i].replace('Left', 'Right')\n        else:\n           ",
  "1078": "def solve():\n    s, w1, w2, w3 = map(int, input().split())\n    if w1 == w2 == w3:\n        print(2 if s >= 3 else 1)\n    else:\n        if s >= 4 and w1 + w2 <= s and w3 <= s:\n            print(2)\n        elif s >= 3 and w1 + w2 <= s and w3 > s:\n            print(3)\n       ",
  "1079": "def count_digit_four(n):\n    return str(n).count('4')\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_digit_four(n))",
  "1080": "def alternating_code(S):\n    if len(S) == 2:\n        return 'YES' if S[0] != S[1] else 'NO'\n    else:\n        return 'YES' if S[0] != S[2] and S[1] != S[3] else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(alternating_code(S))",
  "1081": "def encrypt_message(message, key):\n    encrypted = ''\n    for i in range(len(message)):\n        num = ord(message[i]) - ord('A')\n        encrypted += chr((num + key[i]) % 26 + ord('A'))\n    return encrypted\n\nt = int(input())\nfor _ in range(t):\n    message = input()\n    key = [98, 57, 31, 45, 46]\n    print(encrypt_message(message, key))",
  "1083": "def max_people(N, M, Z, L, R, B):\n    return min(N * M, Z + L + R + B)\n\nT = int(input())\nfor _ in range(T):\n    N, M, Z, L, R, B = map(int, input().split())\n    print(min(N * M, Z + L + R + B))",
  "1084": "def min_operations(S):\n    operations = 0\n    prev = '0'\n    for c in S:\n        if c != prev:\n            operations += 1\n            prev = c\n    return operations",
  "1085": "M = 1000000007\n\ndef solve():\n    dp = [[0 for _ in range(26)] for _ in range(26)]\n    for i in range(26):\n        line = list(map(int, input().split()))\n        for j in range(26):\n            if line[j] == 1:\n                dp[i][j] = 1\n    for i in range(26):\n        for j in range(26):\n            if dp[i][j] ==",
  "1087": "def is_tree_topology(graph):\n    n, m = map(int, graph[0].split())\n    edges = [list(map(int, line.split())) for line in graph[1:]]\n\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n",
  "1088": "t = int(input())\n\nfor _ in range(t):\n    m, p = map(float, input().split())\n    chef = (1 - p**m) / (1 - p)\n    colleague = 1e9 - chef\n    print(f\"{chef:.2f} {colleague:.2f}\")",
  "1089": "from collections import deque\n\ndef solve():\n    n = int(input())\n    parent = list(map(int, input().split()))\n    parent = [-1] + parent\n    queue = deque([1])\n    while queue:\n        node = queue.popleft()\n        if node != 1 and not any(parent[node]):\n            queue.append(node)\n            continue\n        count = 0\n        for i in range(1, n+1):\n            if parent[i] == node:\n                count",
  "1090": "def shortest_subsequence(n, d, a):\n    left = 0\n    curr_sum = 0\n    min_len = float('inf')\n    for right in range(n):\n        curr_sum += a[right]\n        while curr_sum >= d:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= a[left]\n            left += 1\n    return min_len if min_len != float('inf') else -1\n\nt = int(input",
  "1091": "def solve(n):\n    if n % 2 == 0 or n == 3:\n        return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "1092": "def solve():\n    n, k, e, m = map(int, input().split())\n    scores = []\n    for _ in range(n - 1):\n        scores.append(list(map(int, input().split())))\n    s = list(map(int, input().split()))\n    total = sum(score[:-1] for score in scores)\n    target = (n - k) * m + total\n    s[-1] = 0\n    for i in range(e - 1):\n",
  "1094": "```python\ndef find_rhyming_words():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        words = input().split()\n        rhyming_words = {}\n        for word in words:\n            suffix = word[-3:]\n            if suffix in rhyming_words:\n                rhyming_words[suffix].append(word)\n            else:\n                rhyming_words[suffix] = [word]\n        for suffix, word_list in rh",
  "1095": "def min_moves(arr):\n    n = int(arr[0])\n    perm = list(map(int, arr[1].split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[perm[i]] = i\n    inversions = 0\n    for i in range(1, n):\n        for j in range(i):\n            if pos[i] < pos[j]:\n                inversions += 1\n    return inversions\n\n",
  "1096": "import sys\ninput = sys.stdin.readline\n\nn, x, y = map(int, input().split())\ns = []\ne = []\nv = []\nw = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    s.append(a)\n    e.append(b)\nv = list(map(int, input().split()))\nw = list(map(int, input().split()))\n\nans = float('inf')\nfor i in v:\n    for j in w:\n       ",
  "1097": "```python\ndef cake_eating(N, L, B):\n    for _ in range(N - 1):\n        if L > B:\n            L -= B ** 2\n        else:\n            B -= L ** 2\n    return L * B\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    L, B = map(int, input().split())\n    if N % 2 == 1:\n        print(\"Yes\", cake_e",
  "1098": "def max_stones_removed():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        stones = list(map(int, input().split()))\n        stones.sort(reverse=True)\n        total = 0\n        for i in range(n % 2):\n            total += stones[i]\n        print(total + (stones[n // 2] if n % 2 == 1 else 0))\n\nmax_stones_removed()",
  "1099": "```python\nfrom collections import defaultdict\n\ndef calculate_score(votes):\n    score = 0\n    user_votes = defaultdict(int)\n    for vote in votes:\n        user, vote_type = vote.split()\n        if user_votes[user] == 1:\n            if vote_type == '+':\n                score += 1\n            else:\n                score -= 1\n            user_votes[user] = 0\n        else:\n            if vote_type == '+':\n                score += 2\n           ",
  "1100": "def max_operations(p, q, r, a, b, c):\n    def is_possible(p, q, r, a, b, c, operations):\n        if (p, q, r) == (a, b, c):\n            return True\n        if operations == 0:\n            return False\n        for d in range(1, max(abs(p), abs(q), abs(r)) + 1):\n            for i in range(3):\n                for j in range",
  "1102": "M = 1000000007\n\ndef f(S):\n    n = len(S)\n    dp = [[0] * 10 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(10):\n            if j == 0:\n                dp[i + 1][int(S[i]) - 2] = dp[i][j]\n            else:\n                dp[i + 1][",
  "1103": "def find_p(n, arr):\n    for num in arr:\n        i = 2\n        while i * i <= num:\n            if num % (i * i) == 0:\n                return i\n            i += 1\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_p(n, arr))",
  "1104": "def solve():\n    n, k = map(int, input().split())\n    ans = 0\n    for i in range(1, n + 1):\n        if n >= i * 2:\n            ans += 2 * i\n        else:\n            ans += 2 * (n - i + 1)\n    return (ans + k - 1) // 2 % 1000000007\n\nt = int(input())\nfor _ in range(t):\n   ",
  "1105": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n // 2):\n        ans = max(ans + a[i], a[i + n // 2])\n    if n % 2 == 1:\n        ans = max(ans, a[n // 2])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1107": "def sum_of_goodness(L, R):\n    MOD = 10**9 + 7\n    def count_digits(n):\n        return len(str(n))\n\n    def sum_of_goodness_helper(L, R):\n        if L > R:\n            return 0\n        if L // 10 == 0:\n            return L * count_digits(L)\n        mid = (L + R) // 2\n        return sum_of_goodness_helper(L, mid) + sum_of_goodness",
  "1108": "n, m, k = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    students.append(list(map(int, input().split())))\n\ncount = 0\nfor student in students:\n    total_minutes = sum(student[:-1])\n    if total_minutes >= m and student[-1] <= 10:\n        count += 1\n\nprint(count)",
  "1109": "def sumit_wins(n):\n    if n == 1:\n        return \"NO\"\n    if n % 2 == 0:\n        return \"YES\"\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return \"NO\"\n    return \"YES\"",
  "1110": "```python\nfrom collections import Counter\n\ndef min_modifications(arr):\n    n = len(arr)\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    max_num = max(arr)\n    total = sum(freq.values())\n    modifications = 0\n\n    for num in range(1, max_num + 1):\n        if num not in freq:\n            modifications += 1\n        elif freq[num] > num:\n            modifications += freq[num] - num\n\n    return",
  "1111": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        if x in cnt:\n            cnt[x] += 1\n        else:\n            cnt[x] = 1\n    ans = 0\n    for x in cnt:\n        y = 100000 - x\n        if x == y:\n            ans += cnt[x] *",
  "1112": "def solve():\n    n = int(input())\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end='')\n        print()\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1113": "```python\nfrom collections import Counter\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    max_elements = [num for num, count in freq.items() if count == max_freq]\n\n    print(min(max_elements), max_freq)\n```",
  "1114": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i < n - 1:\n            ans += (a[i] + a[i + 1]) * math.comb(n - 1, 2)\n        else:\n            ans += a[i] * (n - 1)\n    print(ans /",
  "1118": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1120": "import math\nimport sys\n\ndef solve(R, C, x, y):\n    return max(math.ceil((R - x) / 2), math.ceil((C - y) / 2))\n\nT = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    x, y = map(int, input().split())\n    print(solve(R, C, x, y))",
  "1121": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    time = input().split(':')\n    h1, m1 = map(int, time)\n    h2, m2 = 0, 0\n    if m1 % 5 == 0:\n        h2 = h1\n        m2 = m1\n    else:\n        m2 = m1 + 5\n        if m2 > 59:\n            h2 = h1 +",
  "1122": "n = int(input())\nsum = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        sum += 2 * i ** 2\n    else:\n        sum += i ** 2\nprint('Ravi' if sum % 2 == 0 else 'Jhon')",
  "1123": "def solve():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            visited[i] = True\n            while stack",
  "1124": "def max_creatures(N, P, Q, A):\n    A.sort()\n    i = 0\n    while i < N:\n        if A[i] <= P:\n            P -= A[i]\n            i += 1\n        elif A[i] - 1 <= P and (A[i] - 1) % 2 == 0 and Q >= (A[i] - 1) // 2:\n            P -= A[i]\n            Q -= (A",
  "1125": "t = int(input())\n\nfor _ in range(t):\n    r, c = map(int, input().split())\n    print(r * c)",
  "1126": "def max_regions(n):\n    return str(2 + n + (n * (n - 1)) // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_regions(n))",
  "1127": "def format_name(name):\n    return ' '.join([part.capitalize() if i == len(name) - 1 else f\"{part[0].upper()}. \" for i, part in enumerate(name.split())])\n\nt = int(input())\nfor _ in range(t):\n    name = input()\n    print(format_name(name))",
  "1128": "def find_balance_point():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        left_sum = 0\n        for i in range(n):\n            right_sum = sum(nums[:i] + nums[i+1:])\n            if left_sum == right_sum:\n                print(i)\n                break\n            left_sum += nums[i]\n        else:\n            print(-1)\n\nfind_balance_point()",
  "1129": "import math\nimport sys\n\nmod = 10**9 + 7\n\ndef power(x, y):\n    res = 1\n    while y:\n        if y & 1:\n            res = (res * x) % mod\n        x = (x * x) % mod\n        y >>= 1\n    return res\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    return (math.factorial(n) * power(math",
  "1130": "def solve():\n    n, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    at_risk = sum(1 for x in a if x <= 9 or x >= 80)\n    not_at_risk = n - at_risk\n    days = (at_risk + d - 1) // d + (not_at_risk + d - 1) // d\n    print(days)\n\nt = int(input())\n",
  "1131": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    ans = [num for num in sorted(freq) if freq[num] > k]\n    print(*ans)",
  "1132": "def solve():\n    MOD = 1000000007\n    N = int(input())\n    ans = 1\n    for i in range(1, N + 1):\n        ans = (ans * i) % MOD\n    for i in range(1, N):\n        ans = (ans * (2 * i)) % MOD\n    print(ans)\n\nT = int(input())\nfor _ in range(T):\n    solve()",
  "1133": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = a[0]\n    cost = 0\n    for i in range(1, n):\n        cost += (a[i] - a[i - 1]) // l + 1\n    print(l, cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1134": "def daario_naharis(nations, dragon_help):\n    army = 0\n    for i in range(min(dragon_help, len(nations))):\n        army += nations[i]\n    for i in range(min(dragon_help, len(nations)), len(nations)):\n        army += nations[i] - max(0, nations[i] // 2)\n    for i in range(len(nations)):\n        if army <= 0:\n            return 'DEFEAT'\n        army -=",
  "1135": "def solve():\n    n, k = map(int, input().split())\n    ans = []\n    for i in range(1, n - k):\n        ans.append(i)\n    for i in range(n - k + 1, n + 1):\n        ans.append(i)\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1136": "def max_sweetness(test_cases):\n    for case in test_cases[1:]:\n        n, k = map(int, case.split())\n        if n == 1:\n            print(k)\n        else:\n            print((n // 2) * k + (n % 2) * k)\n\ntest_cases = ['2', '1 2', '4 3']\nmax_sweetness(test_cases)",
  "1137": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        prices = list(map(int, input().split()))\n        target = 20 * 100\n        prices.sort()\n        left, right = 0, n - 1\n        while left < right:\n            if prices[left] + prices[right] == target:\n                print(\"Accepted\")\n                break\n            elif prices[left] + prices[right] < target:\n                left +=",
  "1138": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if a[i] > i + 1:\n            ans += max(i + 1 - a[i], a[i + 1] - i - 1)\n            a[i + 1] = max(a[i + 1], i + 2)\n    print(ans)\n\nt = int(input())\n",
  "1139": "def solve(S):\n    n = len(S)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, min(i + 1, 26) + 1):\n            dp[i] += dp[i - j]\n    return 'YES' if dp[n] % 2 == 0 else 'NO'\n\nt = int(input())\n",
  "1140": "def solve(p, idx):\n    n = 2**p - 1\n    ans = 0\n    for i in range(p):\n        if idx & (1 << i):\n            ans = n - (1 << i) + 1\n            break\n        n -= 1 << i\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    p, idx = map(int, input().split())\n    print(solve(p, idx))",
  "1141": "M = input()\nT = int(input())\nfor _ in range(T):\n    S = input()\n    D = str.maketrans(M, 'abcdefghijklmnopqrstuvwxyz')\n    print(S.translate(D).replace('_', ' '))",
  "1142": "def find_ranks(merchants):\n    ranks = []\n    for i, wealth in enumerate(merchants):\n        rank = 1\n        for wealth_in_hall in merchants[:i]:\n            if wealth_in_hall < wealth:\n                rank += 1\n        ranks.append(str(rank))\n    return ranks\n\nN = int(merchants[0])\nmerchants = [int(x) for x in merchants[1:]]\nprint(find_ranks(merchants))",
  "1143": "def min_sum(n):\n    return (n + 1) // 2 + n // ((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_sum(n))",
  "1145": "def solve(X):\n    steps = 0\n    n = 1\n    while n < X:\n        if n + 2 * (steps + 1) <= X:\n            n += 2 * (steps + 1)\n            steps += 1\n        elif n - 2 * (steps + 1) >= 1:\n            n -= 2 * (steps + 1)\n            steps += 1\n        else:\n            return '0'\n   ",
  "1146": "```python\nimport heapq\n\nn, d = map(int, input().split())\nsticks = []\nfor _ in range(n):\n    sticks.append(int(input()))\n\nsticks.sort()\n\npairs = 0\ni, j = 0, n - 1\nwhile i < j:\n    if sticks[j] - sticks[i] <= d:\n        pairs += 1\n        i += 1\n        j -= 1\n    else:\n        j -= 1\n\nprint(pairs)\n",
  "1147": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    odd_count = 0\n    for count in freq.values():\n        if count % 2 != 0:\n            odd_count += 1\n    print(odd_count - 1)",
  "1148": "```python\nt = int(input())\n\nfor _ in range(t):\n    scores = [list(map(int, input().split())) for _ in range(3)]\n    scores.sort(key=lambda x: x[0])\n    if scores[1][0] > scores[0][0] and scores[1][1] > scores[0][1] and scores[1][2] > scores[0][2] and scores[2][0] > scores[1][0",
  "1149": "def solve():\n    s = input()\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if s[i] == '?':\n            if i % 2 == 0:\n                dp[i + 1] = dp[i]\n            else:\n                dp[i + 1] = (dp[i] * 25) % 10000009\n        else:\n",
  "1150": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    i = 1\n    while n > 0:\n        if i * i <= n:\n            n -= i * i\n            count += 1\n        i += 1\n    print(count)",
  "1151": "def dfs(graph, node, visited):\n    visited.add(node)\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\ndef find_markets(n, roads):\n    graph = {i: set() for i in range(n)}\n    for a, b in roads:\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    markets = 0\n    for i in range(n):\n        if i",
  "1152": "```python\nfrom collections import defaultdict\n\nn = int(input())\nrecipes = defaultdict(list)\nfor _ in range(n):\n    s, v = input().split()\n    recipes[s[:len(s)-len(s).split('-')[-1]]].append((s, int(v)))\n\nq = int(input())\nfor _ in range(q):\n    s = input()\n    for recipe in recipes.get(s, []):\n        print(recipe[0])\n        break\n    else:\n        print('NO')\n",
  "1153": "def qpow(a, b, p):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % p\n        a = a * a % p\n        b >>= 1\n    return res\n\ndef solve():\n    n, m, q, k = map(int, input().split())\n    if k == 1:\n        print(min(q, m))\n        return\n    if q == 1:\n        print((",
  "1154": "n = int(input())\nfriends = set(map(int, input().split()))\nplayers = set(map(int, input().split()))\nprint(*players - friends)",
  "1155": "def max_regions(regions):\n    regions.sort(key=lambda x: x[2])\n    max_regions = 0\n    left = 0\n    right = len(regions) - 1\n    while left <= right:\n        if regions[left][2] < regions[right][2]:\n            left += 1\n        elif regions[left][3] < regions[right][3]:\n            right -= 1\n        else:\n            max_regions += 1\n            left += 1",
  "1156": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if abs(n) < 10:\n        print(\"Thanks for helping Chef!\")\n    else:\n        print(\"-1\")",
  "1157": "import math\nfrom collections import defaultdict\n\ndef solve():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n           ",
  "1158": "def count_ciel_numbers(menu_list):\n    def is_ciel_number(num):\n        num_str = str(num)\n        if not all(digit in '47' for digit in num_str):\n            return False\n        digit_counts = {digit: num_str.count(digit) for digit in '47'}\n        return digit_counts['4'] >= digit_counts['7']\n\n    count = 0\n    for menu in menu_list[1:]:\n        price = int(menu.split()[1])\n       ",
  "1159": "def find_winner():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        count = {}\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        shanky_char = None\n        anku_char = None\n        for char in s:\n            if count[char] == 1:\n                if shanky_char is None:\n                    shanky_char = char",
  "1161": "def election_day(snakes_and_mongooses):\n    snakes = snakes_and_mongooses.count('s')\n    mongooses = snakes_and_mongooses.count('m')\n    if snakes > mongooses:\n        return 'snakes'\n    elif snakes < mongooses:\n        return 'mongooses'\n    else:\n        return 'tie'",
  "1162": "def lucky_lucky_number(n):\n    if n % 7 == 0 and n % 4 == 0:\n        return 0\n    elif n % 7 == 0:\n        return -1\n    elif n % 4 == 0:\n        return n // 4\n    else:\n        return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(lucky_lucky_number(n))",
  "1163": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    goals = list(map(int, input().split()))\n\n    if n < 2:\n        print(\"UNFIT\")\n    else:\n        max_diff = goals[n-1] - goals[0]\n        for i in range(1, n-1):\n            max_diff = max(max_diff, goals[i] - goals[i-1])\n        print(max_diff)",
  "1164": "```python\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef solve():\n    P, S = map(int, input().split())\n    scores = []\n    for _ in range(P):\n        scores.append(list(map(int, input().split())))\n        scores.append(list(map(int, input().split())))\n    scores = [list(x) for x in zip(*scores)]\n    scores.sort(key=lambda x: (x[1::2], x[::2]))\n    for i in",
  "1165": "def half_birthday(day, month):\n    months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if",
  "1166": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        queries.append(int(input()))\n\n    prefix_min = [0] * (n + 1)\n    for i in range(n):\n        prefix_min[i + 1] = min(prefix_min[i], a[i])\n\n    suffix_min = [0] * (n +",
  "1167": "def solve(S):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in S:\n        if char in vowels:\n            continue\n        elif char.isupper():\n            result.append('.' + char.lower())\n        else:\n            result.append('.' + char)\n    return ''.join(result)",
  "1168": "```python\nfrom collections import defaultdict\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        good = input()\n        k = int(input())\n        n = len(s)\n        ans = set()\n        for i in range(n):\n            for j in range(i, n):\n                if sum(1 for p in range(i, j+1) if good[ord(s[p])-97] == 'b') <= k:\n                    ans",
  "1169": "def calculate_flames(name1, name2):\n    name1 = name1.replace(\" \", \"\").lower()\n    name2 = name2.replace(\" \", \"\").lower()\n    flames = \"FLAMES\"\n    common_letters = set(name1) & set(name2)\n    remaining_letters = sum([name1.count(letter) + name2.count(letter) for letter in common_letters])\n    for _ in range(remaining_letters):\n        flames = flames[1:] + flames[0]\n    return",
  "1170": "def solve():\n    n, k = map(int, input().split())\n    distances = list(map(int, input().split()))\n    result = []\n    for d in distances:\n        if d % k == 0:\n            result.append('1')\n        else:\n            result.append('0')\n    print(''.join(result))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1172": "def solve():\n    MOD = 10**9 + 7\n    s = input()\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if s[i] == '4':\n                dp[i + 1][j + (n - i - 1)] += dp",
  "1173": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] ^ a[i]\n    mp = {}\n    for i in range(n):\n        if pre[i + 1] in mp:\n            ans += mp[pre[i + 1]]\n        if pre",
  "1174": "def solve():\n    MOD = 10**9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        l, r = i + 1, n - 1\n        while l < r:\n            if a[l] + a[r] > a[i] * 2:\n                r -= 1\n            else:\n                ans += r -",
  "1175": "import math\nimport math\nimport math\n\ndef solve():\n    n = int(input())\n    r = math.ceil(n / 2)\n    s = n // 2\n    sum_odd = (r * (r + 1)) // 2\n    sum_even = (s * (s + 1)) // 2\n    lcm = (r * s) // math.gcd(r, s)\n    if lcm * max(sum_odd, sum_even) > max(sum",
  "1176": "def solve():\n    s = input()\n    n = len(s)\n    dp = [[False] * (n + 1) for _ in range(2)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i % 2][i] = dp[(i - 1) % 2][i - 1]\n        if i >= 2 and s[i - 1] == s[i -",
  "1177": "def solve():\n    n, k = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        import math\n        print(math.comb(n, k))\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1178": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if cnt < a[i]:\n            ans += 1\n            cnt += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1179": "def solve():\n    n = int(input())\n    if n <= 3:\n        print(0)\n    else:\n        print((n - 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1180": "def solve():\n    N, K, x, y = map(int, input().split())\n    dx, dy = 1, 1\n    for _ in range(K):\n        if x + dx > N or y + dy > N:\n            dx, dy = -dy, -dx\n        x += dx\n        y += dy\n        if x == N or y == N:\n            break\n    print(x, y)\n\nfor _ in range(int(input())):\n   ",
  "1181": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = sum(int(digit) for digit in str(n))\n    print('Yes' if n % s == 0 else 'No')",
  "1182": "def solve():\n    m = int(input())\n    ans = []\n    for a in range(1, m + 1):\n        if m % a == 0:\n            b = (a * (m // a) - m) // 2\n            if b >= a and m % (a * b) == 0:\n                ans.append(a)\n    print(len(ans))\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1183": "```python\ndef count_occurrences_brute_force(arr, key, from_index):\n    count = 0\n    for i in range(from_index, len(arr)):\n        if arr[i] == key:\n            count += 1\n    return count\n\ndef count_occurrences_dp(arr, key, from_index, memo):\n    if from_index == len(arr):\n        return 0\n    if from_index in memo:\n        return memo[from_index]\n    if arr[from_index] == key",
  "1184": "import itertools\nimport sys\n\ndef solve():\n    n = int(input())\n    movies = {}\n    for _ in range(n):\n        m, t = input().split()\n        t = int(t)\n        if m not in movies:\n            movies[m] = []\n        movies[m].append(t)\n    movies = {m: sorted(t) for m, t in movies.items()}\n    prices = [25, 50, 75, 100]\n    max_profit = 0\n",
  "1185": "def expected_sum_of_page_numbers():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        pages_without_number = list(map(int, input().split()))\n        torn_leaves = int(input())\n        total_pages = 2 * n\n        pages_without_number = set(pages_without_number)\n        total_sum = 0\n        for i in range(1, total_pages + 1):\n            if i % 2 == 1",
  "1186": "def f(N, A, Q, k):\n    A.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += A[i]\n    for i in range(k, N):\n        ans += A[i] - 1\n    return ans\n\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nfor _ in range(Q):\n    k = int(input())\n    print(f(N, A, Q, k",
  "1187": "def solve():\n    n, m = map(int, input().split())\n    ans = 0\n    cnt = 1\n    i = m\n    while i <= n:\n        ans += 1\n        cnt = (cnt * (n // i - 1)) % 998244353\n        i *= m\n    print(ans, cnt)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1188": "n = int(input())\nreports = list(map(int, input().split()))\nkillers = [i + 1 for i in range(n) if reports[i] == 0 or reports.count(reports[i]) == 1]\nprint(*sorted(killers))",
  "1189": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + a[i]\n    ans = 0\n    for i in range(n):\n        total_sum = prefix[n] - (prefix[i] + prefix[n - i - 1])\n        if total_sum %",
  "1190": "def min_menus(p):\n    dp = [float('inf')] * (p + 1)\n    dp[0] = 0\n    for i in range(1, 13):\n        for j in range(2**i - 1, p + 1):\n            dp[j] = min(dp[j], dp[j - (2**i - 1)] + 1)\n    return dp[p]\n\nfor _ in range(int(input())):\n    p = int(input",
  "1191": "from collections import defaultdict\n\ndef solve():\n    n, q = map(int, input().split())\n    d = defaultdict(str)\n    for _ in range(n):\n        word = input()\n        d[word] = word\n    for _ in range(q):\n        word = input()\n        for key in d:\n            diff = 0\n            if len(key) == len(word):\n                for i in range(len(key)):\n                    if key[i] != word[i]:\n                        diff += 1",
  "1194": "def solve():\n    n = int(input())\n    s = input()\n    x, y = 0, 0\n    ans = 0\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        if",
  "1195": "def solve():\n    n, a, b, c, d, p, q, y = map(int, input().split())\n    x = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    c -= 1\n    d -= 1\n\n    ans = float('inf')\n    if a <= c <= b:\n        ans = abs(x[b] - x[a]) * p\n    else:\n        ans = min(abs(x",
  "1196": "def max_votes(n, m, k, grid):\n    max_sum = 0\n    for i in range(n):\n        for j in range(m - k + 1):\n            window_sum = sum(grid[i][j:j+k])\n            max_sum = max(max_sum, window_sum)\n    for j in range(m):\n        for i in range(n - k + 1):\n            window_sum = sum(grid[row][j] for row in range(i, i+k))\n            max",
  "1198": "class SparseTable:\n    def __init__(self, nums):\n        self.nums = nums\n        self.table = [[0] * len(nums) for _ in range(20)]\n        self.build_table()\n\n    def build_table(self):\n        for i in range(len(self.nums)):\n            self.table[0][i] = self.nums[i]\n        for j in range(1, 20):\n            for i in range(len(self.nums) - (1 << j)",
  "1199": "def min_coins(S, N):\n    dp = [float('inf')] * (S + 1)\n    dp[0] = 0\n    for i in range(1, S + 1):\n        for j in range(2, N + 1, 2):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n        if i >= 1:\n            dp[i] = min(dp[i",
  "1200": "def solve(log):\n    return 'yes' if log.count('A') == log.count('B') and len(log) % 2 == 0 else 'no'\n\nt = int(input())\nfor _ in range(t):\n    log = input()\n    print(solve(log))",
  "1202": "chocolates = {'D': 238, 'T': 244, 'M': 138, 'B': 279, 'C': 186}\nexercises = {'R': 50, 'C': 5, 'W': 0.5}\npriority = ['R', 'C', 'W']\n\ndef solve(s):\n    calories = sum(chocolates[c] for c in s)\n    km = {e: 0 for e in exercises}\n   ",
  "1203": "def solve():\n    MOD = int(1e9) + 7\n    n, q = map(int, input().split())\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n    for i in range(2, n + 1):\n        for j in range(2, i + 1):\n           ",
  "1204": "def min_cost(S, R):\n    n = len(S)\n    S = list(S)\n    R = list(R)\n    ans = 0\n    i = 0\n    while i < n:\n        if S[i] == R[i]:\n            i += 1\n        else:\n            j = i\n            while i < n and S[i] != R[i]:\n                i += 1\n            ans += (i - j) * (i - j + ",
  "1205": "def solve(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            ans += (n - i) * (i + 1)\n        else:\n            ans += (n - i) * i\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))",
  "1206": "```python\nn1, n2, n3 = map(int, input().split())\nlist1 = set(map(int, input().split()) for _ in range(n1))\nlist2 = set(map(int, input().split()) for _ in range(n2))\nlist3 = set(map(int, input().split()) for _ in range(n3))\n\ncommon = list1 & list2 & list3\nin_two = (list1 & list2) | (list1 & list",
  "1207": "def solve():\n    n = int(input())\n    populations = list(map(int, input().split()))\n    total_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_cost += populations[i] * populations[j]\n    print(total_cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1208": "def modPow(base, exponent, mod):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent //= 2\n        base = (base * base) % mod\n    return result\n\ndef solve():\n    n = int(input())\n    result = 1\n    mod = 1000000007\n    for i in range(1, n + 1",
  "1209": "def solve():\n    v1, t1, v2, t2, v3, t3 = map(int, input().split())\n    if v1 == v3 and t1 == t3:\n        print(\"YES\")\n        return\n    if v2 == v3 and t2 == t3:\n        print(\"YES\")\n        return\n    if v1 == v2 and (t1 == t2 or (t1 + t2) / 2 == t",
  "1210": "T = int(input().strip())\n\nfor _ in range(T):\n    N, X = map(int, input().strip().split())\n    direction, language = input().strip().split()\n\n    if direction == 'L':\n        if language == 'H':\n            result = X * 2 - 1\n        else:\n            result = X * 2\n    else:\n        if language == 'H':\n            result = N - X + 1 if (N - X) %",
  "1211": "def remove_abc(s):\n    while 'abc' in s:\n        s = s.replace('abc', '')\n    return s\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(remove_abc(s))",
  "1212": "def min_operations(S):\n    from collections import Counter\n    counter = Counter(S)\n    max_count = max(counter.values())\n    total_chars = len(S)\n    operations = max(0, max_count - (total_chars // max_count))\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(min_operations(S))",
  "1213": "def solve():\n    x1, x2, x3, v1, v2 = map(int, input().split())\n    time1 = (x3 - x1) / v1\n    time2 = (x2 - x3) / v2\n    if time1 < time2:\n        print(\"Chef\")\n    elif time1 > time2:\n        print(\"Kefa\")\n    else:\n        print(\"Draw\")\n\nt = int(input())\nfor _ in range",
  "1214": "def solve():\n    M, N = map(int, input().split())\n    Rx, Ry = map(int, input().split())\n    n = int(input())\n    s = input()\n    x, y = 0, 0\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'R':\n            x += 1",
  "1216": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    print('YES' if any(i >= x for i in a) else 'NO')",
  "1217": "M = 10**9 + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i + 1][j + a[i]] = 1\n            else:\n                if a[i]",
  "1218": "t = int(input())\n\nfor _ in range(t):\n    x, n = map(int, input().split())\n    total = sum(i for i in range(x, n + 1, x))\n    print(total)",
  "1219": "def modPow(base, exponent, mod):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent //= 2\n        base = (base * base) % mod\n    return result\n\ndef factorial(n, mod):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1",
  "1220": "```python\nfrom sys import stdin, stdout\n\ndef solve():\n    n, q = map(int, input().split())\n    prices = list(map(int, input().split()))\n    brands = list(map(int, input().split()))\n    pref = [[] for _ in range(7)]\n    for i in range(n):\n        pref[brands[i]].append(prices[i])\n    pref = [sorted(p, reverse=True) for p in pref]\n\n    for _ in range(q):\n        b",
  "1221": "def solve():\n    n = int(input())\n    ans = 0\n    i = 1\n    while i * i <= n:\n        ans += 1\n        i = (i * i + 1) ** 0.5\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1222": "from collections import defaultdict\n\ndef count_anagramic_pairs(strings):\n    n = len(strings)\n    ans = [0] * n\n    freq = defaultdict(int)\n\n    for i in range(n):\n        freq = defaultdict(int)\n        for j in range(len(strings[i])):\n            freq[strings[i][j]] += 1\n            for k in range(j + 1, len(strings[i]) + 1):\n                sub_str = strings[i][j:k]\n                freq[sub_str",
  "1223": "def min_distance(N, L, A, B, S):\n    S.sort()\n    min_pos = A + (L * (N - 1))\n    max_pos = B - L\n    if S[0] > A:\n        min_pos = max(min_pos, S[0])\n    if S[-1] < max_pos:\n        min_pos = max(min_pos, S[-1] + L)\n    return sum(abs(S[i] - min_pos) for i in",
  "1225": "```python\nimport heapq\nfrom collections import defaultdict\n\ndef dijkstra(graph, start, end):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n\n    while pq:\n        current_distance, current_node = heapq.heappop(pq)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance +",
  "1227": "def solve():\n    colors = input().split()\n    for i in range(6):\n        for j in range(i + 1, 6):\n            for k in range(j + 1, 6):\n                if colors[i] == colors[j] == colors[k]:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1228": "import sys\nfrom collections import defaultdict\n\ndef find_missing_point(points):\n    x_coords = defaultdict(set)\n    y_coords = defaultdict(set)\n\n    for point in points:\n        x, y = map(int, point.split())\n        x_coords[x].add(y)\n        y_coords[y].add(x)\n\n    for x in x_coords:\n        if len(x_coords[x]) == 1:\n            y = x_coords[x].pop()\n            if len(y_coords[y]) == 1 and y",
  "1229": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if k >= n - b.index(min(b)):\n        print('YES')\n    else:\n        print('NO')\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1230": "def check(n, A):\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for last in range(k + 1, n):\n                    if (A[i] ^ A[j] ^ A[k] ^ A[last]) == 0:\n                        return \"Yes\"\n    return \"No\"\n\nn = int(input())\nA = list(map(int",
  "1231": "```python\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(2**n))\n\nn = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(sum_of_digits(t))\n```",
  "1232": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef dfs(node, p, visited, graph, prob):\n    if node in visited:\n        return\n    visited.add(node)\n    if graph[node][0] == 0:\n        return\n    for child in graph[node]:\n        if child != 0:\n            dfs(child, p, visited, graph, prob)\n\ndef solve(graph, n):\n    prob = 1\n    visited = set()\n    for i in",
  "1233": "def max_good_group(S):\n    n = len(S)\n    max_len = 0\n    for i in range(n):\n        count = {}\n        for j in range(i, n):\n            count[S[j]] = count.get(S[j], 0) + 1\n            if len(count) > 2 or (len(count) == 2 and list(count.values())[0] == 1):\n                break\n            max_len = max(max_len, j - i + ",
  "1235": "def last_two_digits(n):\n    return (5 ** n) % 100",
  "1236": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            ans += 1\n    print(ans)\n```",
  "1237": "def solve():\n    A, B, C = map(int, input().split())\n    ans = 0\n    while C > B and A > 0:\n        A -= 1\n        C += 100\n        ans += 1\n    while A > 0:\n        A, B = B, A\n        C %= 100\n        ans += 1\n    print(ans)\n\nfor _ in range(int(input())):\n    solve()",
  "1238": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    unique_digits = set(s)\n    result = set()\n    for i in unique_digits:\n        for j in unique_digits:\n            if i != j:\n                num1 = int(str(i) + str(j))\n                num2 = int(str(j) + str(i))\n                if 65 <= num1 <= 90:\n                    result.add(chr(num1))\n                if 65 <= num2 <=",
  "1239": "def pattern(n):\n    result = []\n    for i in range(1, n+1):\n        result.append(str(n))\n        n = str(n)\n        for j in range(len(n)-1, 0, -1):\n            n = n[:j] + n[j+1:]\n            result.append(n)\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = pattern(n)\n    for i in result:\n       ",
  "1240": "def sum_of_weights():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        weights = [i % 6 + 1 if i % 6 != 0 else 1 for i in arr]\n        print(sum(weights))\n\nsum_of_weights()",
  "1241": "def solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if (s - x * (x % 2)) % 2 == 0:\n        print(\"Jesse\")\n    else:\n        print(\"Walter\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1242": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = 0\n    dp[1] = a[0]\n    for i in range(2, n):\n        dp[i] = min(dp[i-1] + a[i-1], dp[i-2] + a[i-1])\n    print(dp[n-1])\n\nt = int(input())\nfor _",
  "1243": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 5 == 0 or n % 10 in [0, 2, 4, 5, 6, 8]:\n        print(1)\n    else:\n        print(0)\n```",
  "1244": "from collections import defaultdict\nimport sys\n\nMOD = 10**9 + 7\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def update(self, node, start, end, index, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if index <= mid:\n",
  "1245": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) + ''.join(str(j) for j in range(i, 0, -1))\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))",
  "1246": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[n - 1] < b[i]:\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1248": "def count_bases(n):\n    if n == 1:\n        return \"INFINITY\"\n    count = 0\n    for b in range(2, int(n ** (1/2)) + 1):\n        if n % b == 1:\n            count += 1\n    return str(count)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_bases(n))",
  "1250": "def count_necklaces():\n    MOD = 10**9 + 7\n    for _ in range(int(input())):\n        n = int(input())\n        if n % 2 == 0:\n            print(((3 * pow(2, n // 2, MOD) + 2 * pow(3, n // 2, MOD)) % MOD * pow(2, n // 2, MOD) % MOD * pow(3, n // 2, MOD",
  "1252": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef last_digit_sum(n):\n    return sum(i for i in range(2, n+1) if is_prime(i)) % 10\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n   ",
  "1253": "def solve():\n    n = int(input())\n    s = input()\n    d = int(input())\n    p = list(map(int, input().split()))\n    p = [0] + p\n    s = '0' + s\n    for i in range(1, d + 1):\n        for j in range(p[i], n + 1):\n            if s[j] == '0':\n                s = s[:j] + '1' + s[j + ",
  "1254": "t = int(input())\n\nfor _ in range(t):\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    cakewalk = 0\n    hard = 0\n    for i in a:\n        if i >= p // 2:\n            cakewalk += 1\n        elif i <= p // 10:\n            hard += 1\n    if cakewalk == 1 and hard ==",
  "1255": "def f(s, k):\n    s = sorted(s)\n    n = len(s)\n    res = ['a'] * n\n    for i in range(n):\n        if i >= k:\n            res[i] = chr(ord('a') + i)\n    return ''.join(res) if all(c != s[i] for i, c in enumerate(res)) else 'NOPE'\n\nt = int(input())\nfor _ in range(t):\n    s, k = input().split()\n   ",
  "1256": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] > arr[i] + arr[j]:\n                count += 1\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1257": "```python\nimport math\n\nn = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(math.factorial(t))\n```",
  "1258": "def min_time_to_multiple_of_9(n):\n    return sum(abs(int(digit) - 9) for digit in str(n)) % 9 or 9 - sum(abs(int(digit) - 9) for digit in str(n)) % 9\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_time_to_multiple_of_9(n))",
  "1259": "t = int(input())\n\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = sum(1 for i in range(l, r + 1) if i % 10 in [2, 3, 9])\n    print(count)",
  "1261": "def solve():\n    n, m = map(int, input().split())\n    if n == 1 or m < n - 1:\n        print(-1, -1)\n        return\n    if n == 2:\n        if m == 1:\n            print(1, 2)\n        else:\n            print(-1, -1)\n        return\n    if n == 3:\n        if m == 3:\n            print(1, 2)\n            print",
  "1263": "import math\nfrom collections import defaultdict\n\ndef solve(N, K):\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, int(math.pow(N, 1/K)) + 1):\n        for j in range(i*K, N+1):\n            dp[j] += dp[j-i**K]\n    return dp[N]\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split",
  "1264": "def max_food(N, M):\n    total_food = 0\n    while N > 0:\n        if N <= M:\n            total_food += N\n            N = 0\n        else:\n            total_food += M\n            N -= M\n    return total_food\n\nN, M = map(int, input().split())\nprint(max_food(N, M))",
  "1265": "def find_magical_number(k):\n    magical_numbers = [0]\n    i = 1\n    while len(magical_numbers) < k:\n        i += 1\n        str_i = str(i)\n        products = []\n        for j in range(len(str_i)):\n            for subset in itertools.chain.from_iterable(itertools.combinations(range(len(str_i)), r) for r in range(len(str_i) + 1)):\n                product = 1\n                for digit in subset",
  "1266": "def solve():\n    c = int(input())\n    boards = []\n    for _ in range(c):\n        ni, mi = map(int, input().split())\n        boards.append((ni, mi))\n    for board in boards:\n        ni, mi = board\n        if (ni + mi) % 2 == 0:\n            print(\"MasterChef\")\n            return\n        else:\n            print(\"Football\")\n            return\n\nt = int(input())\nfor _ in range(t):\n    solve",
  "1267": "```python\nimport heapq\nfrom itertools import permutations\n\nN, M, K = map(int, input().split())\nP = [list(map(int, input().split())) for _ in range(M)]\n\nwords = set()\nfor p in permutations('abcdefghijklmnopqrstuvwxyz', M):\n    word = ''.join(p[:N])\n    cost = sum(P[i][ord(c) - ord('a')] for i, c in enumerate(word))\n    words.add((cost, word))\n\nwords = sorted(list(words),",
  "1268": "```python\nimport sys\n\ndef solve(n, m, x):\n    return sum((i * n + x - 1) // m for i in range(1, m + 1))\n\nfor line in sys.stdin:\n    n, m, x = map(int, line.split())\n    if n == 0 and m == 0 and x == 0:\n        break\n    print(solve(n, m, x))\n```",
  "1269": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = [(a[i]*b[i], i) for i in range(n)]\n    ab.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        x, y = ab[i][0]//2, ab[i][0]\n        for j in range(i",
  "1270": "def solve():\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    h.sort(reverse=True)\n    cnt = 0\n    for i in range(n):\n        if h[i] >= k:\n            cnt += 1\n            if cnt >= 2:\n                break\n    if cnt < 2:\n        print(-1)\n    else:\n        print(cnt)\n\nt = int(input())\nfor _ in range(t):\n   ",
  "1271": "def solve():\n    q = int(input())\n    s = set()\n    for _ in range(q):\n        x = int(input())\n        s.add(x)\n        for y in s:\n            if y != x:\n                s.add(y ^ x)\n        e = sum(1 for i in s if bin(i).count('1') % 2 == 0)\n        o = len(s) - e\n        print(e, o)\n\nfor _ in range(int(input())):\n   ",
  "1272": "def solve(x):\n    a, b = 0, x\n    for i in range(63, -1, -1):\n        if (x >> i) & 1:\n            if (a >> i) & 1:\n                a |= 1 << i\n                b |= 1 << i\n            else:\n                a |= 1 << i\n                b ^= 1 << i\n        else:\n            if (b >> i) & 1:\n               ",
  "1273": "def min_time_to_hypnotize(n, m, grid):\n    def dfs(i, j):\n        if 0 <= i < n and 0 <= j < m and grid[i][j] == '*':\n            grid[i][j] = '.'\n            for x, y in [(i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (",
  "1274": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) * i\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))",
  "1275": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    for i in range(m):\n        ans[a[i]] = i\n    for i in range(n - 1, -1, -1):\n        if ans[i] == m:\n            ans[i] = m - 1\n            for j in range(i - 1, -1, -1):\n",
  "1276": "def min_elements_to_insert():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_val = max(a)\n        if (1 << k) - 1 <= max_val:\n            results.append(0)\n        else:\n            results.append(1)\n    return results",
  "1277": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    total_loss = 0\n    for _ in range(n):\n        price, quantity, discount = map(int, input().split())\n        discount_rate = (discount / 100) + 1\n        discount_rate = math.pow(discount_rate, 2)\n        loss = (price * discount_rate - price) * quantity\n        total_loss += loss\n    print(\"{:.6",
  "1278": "def solve():\n    m, n = map(int, input().split())\n    ans = (m - 1) * (n - 1) * (m - 2) * (n - 2)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1279": "```python\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        x.append(a)\n        y.append(b)\n    x.sort()\n    y.sort()\n    ans = 0\n    for i in range(n):\n        l, r = i + 1, n - 1\n       ",
  "1280": "def min_operations(s):\n    n = len(s)\n    operations = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            operations += min(ord(s[i]) - ord('a'), ord(s[n - i - 1]) - ord('a'))\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(min_operations(s))",
  "1281": "```python\ndef is_rainbow_array(n, arr):\n    a1, a2, a3, a4, a5, a6, a7 = 0, 0, 0, 0, 0, 0, 0\n    for i in range(n):\n        if arr[i] == 1: a1 += 1\n        elif arr[i] == 2: a2 += 1\n        elif arr[i] == ",
  "1282": "def solve():\n    MOD = 10**9 + 7\n    L, R = map(int, input().split())\n    ans = 0\n    for i in range(60):\n        bit_L = (L >> i) & 1\n        bit_R = (R >> i) & 1\n        if bit_L == 0 or bit_R == 0:\n            continue\n        ans += (bit_R - bit_L + 1) * (1 <<",
  "1283": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is",
  "1284": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = [0] * 4\n    for i in range(n):\n        if a[i] < 60:\n            cnt[0] += 1\n        elif a[i] < 75:\n            cnt[1] += 1\n        elif a[i] < 90:\n            cnt[2] += 1",
  "1285": "def solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for l in range(1, n + 1):\n        pre = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                pre[i][j]",
  "1287": "def f(x):\n    vowels = 'aeiou'\n    return 1 if x in vowels else 0\n\nMOD = 10**9 + 7\nfor _ in range(int(input())):\n    s = input()\n    M = sum(f(c) for c in s) % MOD\n    print(M)",
  "1288": "from collections import deque\n\ndef min_employees_to_inform(testcases):\n    for t in range(int(testcases)):\n        n, m = map(int, input().split())\n        graph = [[] for _ in range(n + 1)]\n        visited = [False] * (n + 1)\n        for _ in range(m):\n            u, v = map(int, input().split())\n            graph[u].append(v)\n            graph[v].append(u)\n\n        min_employees =",
  "1289": "def solve(n):\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n\nt = int(input())\nfor _ in range(t):\n",
  "1290": "n = int(input())\nif n < 10:\n    print(\"1\")\nelif n < 100:\n    print(\"2\")\nelif n < 1000:\n    print(\"3\")\nelse:\n    print(\"More than 3 digits\")",
  "1293": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, q = map(int, input().split())\n    b = [list(map(int, input().split())) for _ in range(n)]\n    a = [0] * n\n    for i in range(n):\n        a[i] = min(a[:i] + a[i+1:] + [0])\n        for j in range(n):\n            b[i][j] = abs(a[i] - a[j])\n",
  "1295": "def sum_fibonacci(N, K):\n    fib = [0, 1]\n    for i in range(2, N + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n\n    result = 0\n    for i in range(K):\n        result += fib[N - i]\n\n    return result\n\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    print(sum_f",
  "1297": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    if a < b:\n        print('<')\n    elif a > b:\n        print('>')\n    else:\n        print('=')",
  "1298": "def batmobile_prototypes():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        speeds = list(map(int, input().split()))\n        standard_speed = speeds[0]\n        faster_prototypes = sum(1 for speed in speeds[1:] if speed > standard_speed)\n        print(faster_prototypes)\n\nbatmobile_prototypes()",
  "1299": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_count = 0\n    max_type = 0\n    for i in range(1, 1001):\n        count = 0\n        prev = -1\n        for j in range(n):\n            if a[j] == i and j - prev > 1:\n                count += 1\n                prev =",
  "1300": "import math\nfrom functools import reduce\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(N, K, arr):\n    arr.sort()\n    partitions = [arr[i::K] for i in range(K)]\n    return sum(reduce(gcd, partition) for partition in partitions)\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr",
  "1301": "def largest_number(digits):\n    digits.sort(reverse=True)\n    return ''.join(digits)\n\nt = int(input())\nfor _ in range(t):\n    n = input()\n    print(''.join(sorted(n, reverse=True)))",
  "1302": "def solve():\n    n = int(input())\n    i = 1\n    while i * i <= n:\n        n -= i * i\n        i += 1\n    return 2 * i - 2\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "1303": "def solve():\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    mod = 10**9 + 7\n    ans = 1\n    for i in range(k):\n        ans = (ans * (n - i) * pow(i + 1, mod - 2, mod) % mod) % mod\n    a.sort()\n    j = 0\n    for i in range(n):\n",
  "1304": "def next_permutation(nums):\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i == -1:\n        return sorted(nums)\n    j = n - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    nums[i], nums[j] = nums[j], nums[i]\n    return nums[:i + 1",
  "1305": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                if (i + 1 < n and grid[i + 1][j] == 1) or (j + 1 < n and grid[i",
  "1306": "def solve():\n    s = input()\n    s = sorted(s)\n    return 'YES' if s[:5] == 'LTIME' and s[-5:] == 'EMITL' else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "1307": "def solve():\n    n, k = map(int, input().split())\n    mod = 10**9 + 7\n    ans = 1\n    for i in range(n):\n        ans = (ans * (k + i)) % mod\n    return str(ans)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "1308": "def check_password(password):\n    if not password.isalnum():\n        return \"Invalid\"\n    if len(password) != len(set(password)):\n        return \"Invalid\"\n    return \"Valid\"\n\npasswords = ['absdbads', 'asdjenfef', 'tyerbet', 'abc564']\nfor password in passwords:\n    print(check_password(password))",
  "1309": "def solve():\n    n = int(input())\n    s = ''\n    for i in range(1, n+1):\n        s += str(i) + '*' * (n - i)\n    print(s)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1310": "T = int(input())\n\nfor _ in range(T):\n    s = input()\n    cost = 0\n    stamps = 0\n    for tea in s:\n        if tea == 'M':\n            cost += 3\n        else:\n            cost += 4\n        stamps += 1\n        if stamps == 6:\n            stamps = 0\n    print(cost)",
  "1311": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(*range(1, k + 1), *range(k + 1, n + 1, -1))",
  "1313": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a[1:]:\n        g = gcd(g, i)\n    if g > 1:\n        print(g)\n    else:\n        print(-1)",
  "1315": "from collections import Counter\n\ndef unique_sets(teams):\n    unique = set()\n    for team in teams[1:]:\n        nums = tuple(sorted(map(int, team.split())))\n        unique.add(nums)\n    return len(unique)\n\nn = int(input())\nteams = [input() for _ in range(n)]\nprint(unique_sets(teams))",
  "1318": "def solve():\n    L, K = map(int, input().split())\n    if K == L:\n        print(f'Case {cases+1}: {L-1}')\n        return\n    ans = 0\n    for i in range(1, L-K+1):\n        for j in range(i+K-1, L):\n            ans += 1\n    print(f'Case {cases+1}: {ans}')\n\ncases = 0\nwhile True:\n    try",
  "1319": "import heapq\nn, m = map(int, input().split())\nmax_heap = []\nfor _ in range(n + m):\n    x = int(input())\n    if x > 0:\n        heapq.heappush(max_heap, -x)\n    else:\n        if max_heap:\n            print(-heapq.heappop(max_heap))",
  "1320": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print('B')\n    else:\n        print('A')",
  "1321": "def solve(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, 4*b + a\n    return a\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "1322": "def solve():\n    n, k = map(int, input().split())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if scores[i] >= scores[k-1]:\n            count += 1\n        else:\n            break\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1324": "def max_gcd():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if k > n or n == k == 1:\n            print(-1)\n        else:\n            print(n // k)\n\nmax_gcd()",
  "1325": "def solve():\n    a, b, c, d = map(int, input().split())\n    apples = (a + c) - d + (d % 2)\n    oranges = (c + a) - d + (d % 2)\n    mangoes = d - apples - oranges\n    print(apples, mangoes, oranges)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1326": "def solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n    total = 0\n    for i in range(n):\n        total += min(f[i], n - i)\n    print(total)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1327": "class Node:\n    def __init__(self, v, i):\n        self.v = v\n        self.i = i\n        self.left = None\n        self.right = None\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[float('inf'), 0] for _ in range(4 * n)]\n\n    def update(self, node, l, r, i, v):\n        if l == r:\n           ",
  "1328": "def min_operations(n):\n    n = str(n)\n    operations = 0\n    for i in range(len(n)):\n        if n[i] != '4' and n[i] != '7':\n            operations += 1\n    if '4' not in n and '7' not in n:\n        operations += len(n)\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_operations(n))",
  "1330": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    A, B = map(int, input().split())\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    C = [x + 10**9 * i for i, x in enumerate(C)]\n    D = [x + 10**9 * i for i, x in enumerate(D)]\n    C.sort()\n    D.sort()\n   ",
  "1331": "def solve(X, K):\n    return (X / 2) + ((X % 2) * (K - 1) / (2 * K - 1))\n\nT = int(input())\nfor _ in range(T):\n    X, K = map(float, input().split())\n    print(f\"{solve(X, K):.4f}\")",
  "1332": "import math\nimport sys\n\nn = int(input())\n\ndef log2(x):\n    return math.log(x) / math.log(2)\n\nfor _ in range(n):\n    i, j = map(int, input().split())\n    dist = abs(log2(i) - log2(j))\n    print(int(dist))",
  "1333": "def solve():\n    MOD = 10**9 + 7\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = 1\n    for i in range(n):\n        if b[i] == b[i-1]:\n            continue\n        ans = (ans * 2) % MOD\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1334": "def min_supw(n, supw):\n    dp = [[0] * 3 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(3):\n            if i == 1:\n                dp[i][j] = supw[i - 1]\n            else:\n                for k in range(3):\n                    if k != j and k != (j + 1) % 3:\n                        dp",
  "1335": "n = int(input())\na = list(map(int, input().split()))\n\nfrom collections import Counter\n\nc = Counter(a)\ndays = 0\nwhile c:\n    days += 1\n    for k in list(c.keys()):\n        if c[k] >= 2:\n            c[k] -= 2\n        else:\n            del c[k]\n\nprint(days)",
  "1336": "def count_digits():\n    for case in range(1, int(input()) + 1):\n        a, b = map(int, input().split())\n        counts = [0] * 10\n        for page in range(a, b + 1):\n            for digit in str(page):\n                counts[int(digit)] += 1\n        print(f'Case {case}:', end=' ')\n        for i in range(10):\n            print(f'{i}:{counts[i]}',",
  "1337": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    r = int(input())\n\n    max_people = max(p)\n    total_candies = max_people * max(p)\n\n    for people in p:\n        total_candies = math.gcd(total_candies, people)\n\n    total_candies += r\n\n    print(total_candies)",
  "1338": "n = int(input())\nfor _ in range(n):\n    a, e = map(float, input().split())\n    print(f'{a * 10**e:.2f}')",
  "1339": "import math\n\ndef solve():\n    k = int(input())\n    n = 1\n    while True:\n        count = 0\n        temp = n\n        while temp > 0:\n            count += 1\n            temp = math.floor(temp / 10)\n        if count == k - 1:\n            return str(n)\n        n += 1\n\nfor _ in range(int(input())):\n    print(solve())",
  "1340": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = float('-inf')\n    max_subseq = []\n    curr_sum = 0\n    curr_subseq = []\n    rev_subseq = []\n    rev_idx = []\n    for i in range(n):\n        if curr_sum <= 0:\n            curr_sum = a[i]\n            curr_subseq = [i+1]\n        else:\n           ",
  "1341": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[j - 1]:\n                ans += 1\n    print(ans + 1)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1342": "def f(a, x):\n    n = len(a)\n    i = 0\n    while i < n:\n        if x < a[i]:\n            return i + 1\n        x *= 2\n        x -= a[i]\n        i += 1\n    return i\n\nfor _ in range(int(input())):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(f(f(a, x), x",
  "1343": "def is_double_string(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef is_special(s):\n    n = len(s)\n    for i in range(n):\n        t = s[:i] + s[i + 1:]\n        if is_double_string(t):\n            return True\n    return False\n\nd = int(input())\nfor _ in range",
  "1344": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[0] + a[1])",
  "1345": "def decode_message(message):\n    decoded_message = ''\n    for i in range(0, len(message), 3):\n        ascii_code = int(message[i:i+3])\n        decoded_message += chr(ascii_code)\n    return decoded_message\n\nt = int(input())\nfor _ in range(t):\n    message = input()\n    print(decode_message(message))",
  "1346": "def modInverse(n, p):\n    return pow(n, p - 2, p)\n\ndef nCrModPFermat(n, r, p):\n    if n < r:\n        return 0\n    if r == 0:\n        return 1\n    fac = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fac[i] = (fac[i - 1] * i) % p\n   ",
  "1347": "```python\ndef chefbook(posts):\n    special_friends = set(map(int, posts[1].split()[1:]))\n    posts = [list(map(str, post.split())) for post in posts[2:]]\n\n    special_posts = sorted([post for post in posts if int(post[0]) in special_friends], key=lambda x: int(x[1]), reverse=True)\n    other_posts = sorted([post for post in posts if int(post[0]) not in special_friends], key",
  "1349": "def check_divisibility_by_permutation(n):\n    return '1' if sum(int(digit) for digit in str(n)) % 3 == 0 else '0'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(check_divisibility_by_permutation(n))",
  "1351": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    for i in range(n):\n        if arr[i] == i:\n            arr[i] = i\n        elif arr[i] < i:\n            arr[i] = 0\n\n    print(*arr)",
  "1352": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    contributions = list(map(int, input().split()))\n    shades = set(contributions)\n    shades = sorted(shades)\n    for shade in shades:\n        count = contributions.count(shade)\n        print(f'{shade}: {count}')",
  "1353": "def check_feasibility(test_cases):\n    for test_case in test_cases:\n        n = int(test_case[0])\n        logs = [list(map(int, test_case[i].split())) for i in range(1, n + 1)]\n        logs.sort(key=lambda x: x[0])\n        prev_time = logs[0][0]\n        prev_car1 = [logs[0][1], logs[0][2]]\n        prev_car2 = [logs[0][",
  "1354": "```python\nfrom collections import defaultdict\nMOD = 10**9 + 7\n\ndef dfs(node, parent, adj, dp, color):\n    dp[node][0] = 1\n    for child in adj[node]:\n        if child != parent:\n            dfs(child, node, adj, dp, color)\n            for c in range(k):\n                dp[node][c] = (dp[node][c] + dp[child][c]) % MOD\n            for c in range(k",
  "1355": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        if a[i] <= n:\n            b[i] = a[i] + a[i]\n        else:\n            k = a[i]\n            while k >= n:\n                k //= 2\n            b[i] = a[n - (a[i] - k)]\n    print(*b)\n\nt = int",
  "1356": "def pancake_stack(N):\n    MOD = 1000000007\n    if N == 1:\n        return 1\n    dp = [0] * (N + 1)\n    dp[1] = 1\n    for i in range(2, N + 1):\n        for j in range(1, i):\n            if i - j >= 2 and i - j + j - 1 <= i:\n                dp[i] += dp[i -",
  "1357": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in a:\n        if i == 5:\n            if s < 5:\n                print(\"NO\")\n                return\n            s -= 5\n        elif i == 10:\n            if s < 5:\n                print(\"NO\")\n                return\n            s -= 5\n        elif i == 15:\n            if s < ",
  "1358": "def min_letters_to_remove(words):\n    for word, k in words:\n        freq = {}\n        for char in word:\n            freq[char] = freq.get(char, 0) + 1\n        max_freq = max(freq.values())\n        min_freq = min(freq.values())\n        diff = max_freq - min_freq\n        if diff > k:\n            ans = 0\n            for char in freq:\n                freq[char] = 0\n                max_freq = max(freq.values())\n",
  "1359": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n    ans = 0\n    for i in a:\n        ans += (i // g) - 1\n    print(ans)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nfor _ in range(int(input",
  "1360": "def min_flower_ugliness():\n    t = int(input())\n    for _ in range(t):\n        s1 = input()\n        s2 = input()\n        n, m = len(s1), len(s2)\n        min_ugliness = float('inf')\n        for i in range(min(n, m) + 1):\n            ugliness = 0\n            for j in range(i, n + m - i):\n                petal_length = min(j - i +",
  "1361": "def prefix_sum(n, k, arr):\n    mod = 10**9 + 7\n    for _ in range(k):\n        prefix = [0] * n\n        prefix[0] = arr[0]\n        for i in range(1, n):\n            prefix[i] = (prefix[i-1] + arr[i]) % mod\n        arr = prefix\n    return ' '.join(map(str, arr))\n\nn, k = map(int, input().split())\n",
  "1363": "def hash_function(n, d):\n    p = 23\n    mod = 10**9 + 7\n    hash_val = 0\n    for _ in range(n):\n        hash_val = (hash_val * p + d) % mod\n    return hash_val\n\nt = int(input())\nfor _ in range(t):\n    n, d = map(int, input().split())\n    print(hash_function(n, d))",
  "1364": "import math\nfrom collections import defaultdict\n\ndef solve():\n    n, c = map(int, input().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0] % c, x[1] % c))\n    checkpoints = set()\n    moves = 0\n    for x, y in points:\n        if (x %",
  "1365": "M = 10**9 + 7\ndef solve(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if s[i] == 'c':\n            dp[i + 1] = (dp[i + 1] + dp[i] * 2) % M\n        elif s[i] == 'k':\n            dp[i + 1]",
  "1366": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    max_length = 0\n    current_sum = 0\n    current_length = 0\n    for num in a:\n        current_sum += num\n        current_length += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = current_length\n",
  "1367": "import random\nimport math\n\ndef solve(N, roads):\n    edges = []\n    for u, v, c in roads:\n        edges.append((u, v, c))\n        edges.append((v, u, c))\n    edges.sort(key=lambda x: x[2])\n    mst = []\n    parent = list(range(N + 1))\n    rank = [0] * (N + 1)\n\n    def find(x):\n        if parent[x] != x:\n            parent",
  "1368": "t = int(input())\n\nfor _ in range(t):\n    h, x = map(int, input().split())\n    print('Yes' if h >= x else 'No')",
  "1369": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef victory_number(n):\n    victory = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            victory += i\n    return victory\n\nt = int(input())\nfor _ in range",
  "1370": "from collections import defaultdict\nfrom functools import lru_cache\n\ndef solve(K, N):\n    @lru_cache(None)\n    def f(x):\n        if len(x) == 3:\n            return {int(x)}\n        res = set()\n        for i in range(len(x)):\n            for j in range(i + 1, len(x)):\n                res.update(f(x[:i] + x[j + 1:] + x[i:j] + x[j + 1:]))\n       ",
  "1371": "def gru_minions(N, K, minions):\n    return sum(minion % 7 == 0 for minion in (minion + K for minion in minions))",
  "1372": "```python\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef determine_closer(x1, y1, x2, y2):\n    distance_a = calculate_distance(0, 0, x1, y1)\n    distance_b = calculate_distance(0, 0, x2, y2)\n    if distance_a <",
  "1373": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_len = 0\n    curr_len = 1\n    curr_set = set()\n\n    for i in range(n):\n        if a[i] not in curr_set:\n            curr_set.add(a[i])\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n           ",
  "1374": "def solve():\n    t = int(input())\n    for _ in range(t):\n        f1, f2, r1, r2, r3, r4 = map(int, input().split())\n        p1, p2, p3, p4 = map(float, input().split())\n        e1 = f1 - r1 * p1 * p2 + r2 * p1 * (1 - p2)\n        e2 = f2 - r3 *",
  "1375": "n = int(input())\nfor _ in range(n):\n    num = int(input())\n    print(int(str(num)[::-1]))",
  "1377": "def calculate_average_difference(data):\n    results = []\n    for temp in data[1:]:\n        high, low, normal_high, normal_low = map(float, temp.split())\n        high_diff = (high - normal_high) + (low - normal_low)\n        avg_diff = round(high_diff / 2, 1)\n        if avg_diff > 0:\n            results.append(f'{avg_diff} DEGREE(S) ABOVE NORMAL')\n        else:\n            results.append(f'{abs(avg_diff",
  "1378": "def distribute_particles(A, N, K):\n    particles = [0] * K\n    for _ in range(A):\n        particles[0] += 1\n        i = 0\n        while i < K - 1 and particles[i] > N:\n            particles[i] = 0\n            particles[i + 1] += 1\n            i += 1\n    return ' '.join(map(str, particles)) + '\\n'\n\nA, N, K =",
  "1379": "```python\nfrom collections import Counter\n\ndef encrypt_string(s):\n    freq = Counter(s)\n    encrypted = ''.join(f'{char}{count}' for char, count in freq.items())\n    return encrypted\n\ns = input()\nprint(encrypt_string(s))\n```",
  "1380": "n = int(input())\n\nfor _ in range(n):\n    num = int(input())\n    print(num ** 2 - num)",
  "1381": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k, d = map(int, input().split())\n    x = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    x = [0] + x + [k]\n    l = [0] + l + [0]\n    ans = 0\n    i = 1\n    while i <= n + 1:\n        if",
  "1382": "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\n\ncost = 0\nfor num in a:\n    cost += max(0, -num)\n\ncost = min(cost, (len(a) - 1) * x + min(a))\nprint(cost)",
  "1383": "def solve(N, K1, K2, P1, P2, P3, P4):\n    mod = 100000007\n    res = 0\n    for i in range(K1, K2+1):\n        if i % 2 == 0:\n            res += P2\n        elif i % 2 == 1:\n            res += P3\n        for j in range(1, N+1):\n            if i % j == ",
  "1384": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(n - k + 1):\n        cnt = 0\n        for j in range(i, i + k):\n            if s[j] == '0':\n                cnt += 1\n        ans = max(ans, (cnt == k) + (cnt + 1) * (k - cnt) // 2)\n    print",
  "1386": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans += 1 / (n * m)\n    print(f'{ans:.6f}')\n\nt = int(input())\nfor _ in range(t):\n    solve()\n    sys.stdout.flush()\n```",
  "1389": "def process_text(lines):\n    result = []\n    for line in lines:\n        line = ''.join(e for e in line if e.isalnum() or e.isspace())\n        words = line.split()\n        words.reverse()\n        result.append(' '.join(words))\n    return result[::-1]\n\nlines = ['2', 'This is a sample piece of text to illustrate this ', 'problem.  If you are smart you will solve this right.', '']\nprint(process_text(lines))",
  "1390": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    total = n + q\n    prob = q / total\n    expected = 0\n    for i in range(1, q + 1):\n        expected += i * (prob ** i) * (1 - prob) ** (i - 1)\n    print(f\"{expected:.6f}\")",
  "1391": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def update(self, node, start, end, index, value):\n        if start == end:\n            self.tree[node] = max(self.tree[node], value)\n            return\n        mid = (start + end) // 2\n        if index <= mid:\n           ",
  "1392": "x, y = map(int, input().split())\nprint(x + y)",
  "1393": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    max_speed = 0\n    for i in arr:\n        if i > max_speed:\n            max_speed = i\n            ans += 1\n    print(ans)",
  "1394": "def solve(N):\n    MOD = 10**9 + 7\n    ans = 0\n    for i in range(1, int(N**0.5) + 1):\n        j = 1\n        while i * j <= N:\n            ans += 1\n            j += 1\n    return ans % MOD\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(solve(N))",
  "1395": "def solve(A, B):\n    if (A - B) % (B - A) == 0:\n        if A - B == 0:\n            return -1\n        return (B - A) // math.gcd(A - B, B - A) + 1\n    return 0\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    A, B = map(int, input().split())\n    print(solve(A, B))",
  "1396": "t = int(input())\n\nfor _ in range(t):\n    n, m, x, y = map(int, input().split())\n    if n == m:\n        if n == x == y:\n            print(\"Chefirnemo\")\n        else:\n            print(\"Pofik\")\n    elif n > m:\n        if (n - m) % (x - y) == 0 and (n - m) // (x - y) <= (n - 1)",
  "1397": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()",
  "1398": "def largest_subsequence(s):\n    return len(set(s))\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(largest_subsequence(s))",
  "1400": "t = int(input())\n\nfor _ in range(t):\n    n, l, r = map(int, input().split())\n    min_sum = n * l\n    max_sum = 0\n    for i in range(l, r + 1):\n        max_sum += i\n        max_sum += max_sum // 2\n    print(min_sum, max_sum)",
  "1401": "n, k = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\ncount = 0\ntotal = 0\n\nfor price in prices:\n    if total + price <= k:\n        total += price\n        count += 1\n    else:\n        break\n\nprint(count)",
  "1402": "def count_iterations():\n    t = int(input())\n    for _ in range(t):\n        a = input()\n        b = input()\n        count = 0\n        while b != '0':\n            count += 1\n            u = int(a, 2) ^ int(b, 2)\n            v = int(a, 2) & int(b, 2)\n            a = bin(u)[2:]\n            b = bin(v)[2:].zfill(len(b))\n       ",
  "1403": "def numDecodings(s):\n    MOD = 10**9 + 7\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if s[i-1] != '0':\n            dp[i] += dp[i-",
  "1404": "def solve():\n    r, g, b = map(int, input().split())\n    k = int(input())\n    return max(max((r + k - 1) // k, (g + k - 1) // k, (b + k - 1) // k), max(r, g, b))\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
  "1405": "def solve(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i * i <= n and n % i == 0:\n            count += 1\n    return count // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))",
  "1406": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    xor = 0\n    for i in a:\n        xor ^= i\n    even = [0] * 20\n    odd = [0] * 20\n    for i in a:\n        cnt = 0\n        for j in range(20):\n            if (",
  "1408": "def solve(a, b):\n    n = len(a)\n    mod = 10**9 + 7\n    dp = [[0] * 2 for _ in range(n)]\n    dp[0][0] = 1 if a[0] == '1' else 0\n    dp[0][1] = 1 if b[0] == '1' else 0\n    for i in range(1, n):\n        if a[i] ==",
  "1409": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(bin(n).count('1'))",
  "1410": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    s, n, m, k = map(int, input().split())\n    ans = 1\n    for i in range(k, m + 1):\n        ans *= (m - i) / (s - i)\n    print(round(1 - ans, 6))",
  "1411": "```python\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    x, r, a, b = map(int, input().split())\n    g = math.gcd(a, b)\n    a //= g\n    b //= g\n    lcm = (a * b) // math.gcd(a, b)\n    ans = (x * a) // math.gcd(x * a, lcm) - 1\n    print(ans)\n```",
  "1412": "```python\nimport re\n\nfor _ in range(int(input())):\n    n = int(input())\n    rules = {}\n    for _ in range(n):\n        a, b = input().split()\n        rules[a] = b\n    s = input()\n    for a, b in rules.items():\n        s = s.replace(a, b)\n    s = re.sub(r'^0*', '', s)\n    s = re.sub(r'0+$', '', s)\n    if '.' in s",
  "1415": "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    l, r = 0, len(s) - 1\n    flag = False\n\n    while l < r:\n        if s[l] != s[r]:\n            flag = True\n            break\n        l += 1\n        r -= 1\n\n    print('YES' if not flag else 'NO')"
}