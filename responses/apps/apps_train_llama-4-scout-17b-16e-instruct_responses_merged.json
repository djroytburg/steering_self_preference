{
  "1": "```python\ndef max_diagonal_moves():\n    q = int(input())\n    for _ in range(q):\n        n, m, k = map(int, input().split())\n        if abs(n - 0) + abs(m - 0) > k:\n            print(-1)\n        else:\n            diff = abs(n) - abs(m)\n            if diff < 0:\n                diff = -diff\n            if k % 2 == diff % 2:\n                print(k - diff)\n            else:\n                print(k - 1 - diff)\n\nmax_diagonal_moves()\n```",
  "3": "```python\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, sys.stdin.readline().strip().split())\n        a = list(map(int, sys.stdin.readline().strip().split()))\n        a.sort(reverse=True)\n        max_water = sum(a[:k+1])\n        print(max_water)\n\nif __name__ == \"__main__\":\n    main()\n```",
  "4": "```python\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        pos = [-1] * (n + 1)\n        for i in range(n):\n            pos[p[i]] = i\n        left = right = pos[1]\n        res = ['1']\n        for i in range(2, n + 1):\n            if pos[i] < left:\n                left = pos[i]\n            elif pos[i] > right:\n                right = pos[i]\n            else:\n                res.append('1')\n                continue\n            if right - left == i - 1:\n                res.append('1')\n            else:\n                res.append('0')\n        print(''.join(res))\n\nif __name__ == \"__main__\":\n    main()\n```",
  "5": "```python\ndef find_permutations():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        max_val = max(a)\n        seen = set()\n        counts = {}\n        for num in a:\n            if num in seen:\n                print(0)\n                break\n            seen.add(num)\n            counts[num] = counts.get(num, 0) + 1\n        else:\n            solutions = []\n            for i in range(1, n):\n                if i == max_val and set(a[:i]) == set(range(1, i + 1)) and set(a[i:]) == set(range(1, n - i + 1)):\n                    solutions.append((i, n - i))\n                elif max_val > i and set(a[:i]) == set(range(1, i + 1)) and max(a[i:]) == n - i and len(set(a[i:])) == n - i:\n                    solutions.append((i, n - i))\n            print(len(solutions))\n            for solution in solutions:\n                print(*solution)\n\nfind_permutations()\n```",
  "6": "```python\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    indegree = [0] * n\n    for _ in range(m):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        indegree[v] += 1\n\n    queue = [i for i in range(n) if indegree[i] == 0]\n    depth = [0] * n\n    closed = []\n\n    while queue:\n        u = queue.pop()\n        for v in graph[u]:\n            if depth[u] + 1 > 1:\n                closed.append(v + 1)\n            else:\n                depth[v] = max(depth[v], depth[u] + 1)\n                indegree[v] -= 1\n                if indegree[v] == 0:\n                    queue.append(v)\n\n    print(len(closed))\n    print(*closed)\n\nfor _ in range(int(input())):\n    solve()\n```",
  "8": "```python\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        s = input().strip()\n        losses = []\n        for i in range(n):\n            if s[i] == 'L':\n                losses.append(i)\n        score = 0\n        for i in range(n):\n            if s[i] == 'W':\n                if i > 0 and s[i-1] == 'W':\n                    score += 2\n                else:\n                    score += 1\n        if k == 0:\n            print(score)\n            continue\n        max_score = score\n        j = 0\n        for i in range(n):\n            if s[i] == 'W':\n                continue\n            if j < k:\n                if i == 0:\n                    new_score = 1\n                elif s[i-1] == 'W':\n                    new_score = score + 2 - (1 if s[i-1] == 'W' else 0)\n                else:\n                    new_score = score + 1\n                max_score = max(max_score, new_score)\n                k -= 1\n            else:\n                break\n        score = 0\n        s = list(s)\n        for i in range(n):\n            if s[i] == 'L':\n                if j < k:\n                    s[i]",
  "9": "```python\ndef calculate_alice_score(s):\n    ones = [len(x) for x in s.split('0') if x]\n    ones.sort(reverse=True)\n    return sum(ones[::2])\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(calculate_alice_score(s))\n```",
  "10": "```python\ndef find_subsequence():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        result = []\n        for i in range(n):\n            if i == 0 or i == n - 1:\n                result.append(p[i])\n            elif p[i - 1] < p[i] and p[i] > p[i + 1]:\n                result.append(p[i])\n            elif p[i - 1] > p[i] and p[i] < p[i + 1]:\n                result.append(p[i])\n        if len(result) == 1:\n            result.append(p[0])\n            result.insert(0, p[-1])\n        print(len(result))\n        print(*result)\n\nfind_subsequence()\n```",
  "12": "```python\nimport sys\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        a = list(map(int, sys.stdin.readline().strip().split()))\n        b = list(map(int, sys.stdin.readline().strip().split()))\n\n        has_one = False\n        has_minus_one = False\n\n        for i in range(n):\n            if a[i] > b[i]:\n                print(\"NO\")\n                break\n            if a[i] < b[i]:\n                if b[i] - a[i] > 0:\n                    if not has_one:\n                        print(\"NO\")\n                        break\n                elif b[i] - a[i] < 0:\n                    if not has_minus_one:\n                        print(\"NO\")\n                        break\n            if a[i] == 1:\n                has_one = True\n            elif a[i] == -1:\n                has_minus_one = True\n        else:\n            print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```",
  "13": "```python\nimport math\n\ndef solve(n, g, b):\n    required_high_quality = math.ceil(n / 2)\n    cycles = math.ceil(required_high_quality / g)\n    total_days = cycles * g + (cycles - 1) * b\n    if total_days < n:\n        total_days = n\n    return total_days\n\nT = int(input())\nfor _ in range(T):\n    n, g, b = map(int, input().split())\n    print(solve(n, g, b))\n```",
  "14": "```python\ndef is_original_square(a1, b1, a2, b2):\n    return (a1 == a2 and b1 + b2 == a1) or (b1 == b2 and a1 + a2 == b1) or (a1 == b2 and b1 + a2 == a1) or (b1 == a2 and a1 + b2 == b1)\n\nt = int(input())\nfor _ in range(t):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    if is_original_square(a1, b1, a2, b2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "15": "```python\ndef max_window_area(a, b, x, y):\n    return max(x * b, (a - x - 1) * b, a * y, a * (b - y - 1))\n\nt = int(input())\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    print(max_window_area(a, b, x, y))\n```",
  "17": "```python\ndef count_tuples():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if a[i] == a[k]:\n                        for l in range(k + 1, n):\n                            if a[j] == a[l]:\n                                count += 1\n        print(count)\n\ncount_tuples()\n```",
  "18": "```python\nimport math\n\ndef calculate_side_length(n):\n    return 1 / math.tan(math.pi / (2 * n))\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        side_length = calculate_side_length(n)\n        print(side_length)\n\nif __name__ == \"__main__\":\n    main()\n```",
  "19": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if d == 1:\n        print(len(set(a)))\n        return\n\n    window_counts = defaultdict(int)\n    for i in range(d):\n        window_counts[a[i]] += 1\n\n    min_subscriptions = len(window_counts)\n\n    for i in range(d, n):\n        window_counts[a[i - d]] -= 1\n        if window_counts[a[i - d]] == 0:\n            del window_counts[a[i - d]]\n        window_counts[a[i]] += 1\n        min_subscriptions = min(min_subscriptions, len(window_counts))\n\n    print(min_subscriptions)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "20": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    customers = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\n    low, high = m, m\n    for t, l, h in customers:\n        dt = t\n        low -= dt\n        high += dt\n        if low > h or high < l:\n            print(\"NO\")\n            return\n        low = max(low, l)\n        high = min(high, h)\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        solve()\n```",
  "21": "```python\ndef find_k():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = set(map(int, input().split()))\n        k = 1\n        while k < 1024:\n            new_s = set(i ^ k for i in s)\n            if s == new_s:\n                print(k)\n                break\n            k += 1\n        else:\n            print(-1)\n\nfind_k()\n```",
  "22": "```python\ndef min_max_digit(n):\n    digits = [int(d) for d in str(n)]\n    return min(digits), max(digits)\n\ndef calculate_ak(a1, k):\n    ak = a1\n    for _ in range(k - 1):\n        min_d, max_d = min_max_digit(ak)\n        if min_d == 0:\n            break\n        ak += min_d * max_d\n    return ak\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        a1, k = map(int, input().split())\n        print(calculate_ak(a1, k))\n\nif __name__ == \"__main__\":\n    main()\n```",
  "23": "```python\nimport heapq\n\ndef solve():\n    n = int(input())\n    voters = []\n    for _ in range(n):\n        m, p = map(int, input().split())\n        voters.append((m, p))\n    voters.sort(key=lambda x: (x[0], -x[1]))\n    pq = []\n    ans = 0\n    for m, p in voters:\n        heapq.heappush(pq, p)\n        while len(pq) > m:\n            ans += heapq.heappop(pq)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "24": "```python\nimport math\n\ndef solve(d):\n    if d < 4 and d != 0:\n        return \"N\"\n    elif d == 0:\n        return \"Y 0.000000000 0.000000000\"\n    else:\n        a = (d + math.sqrt(d**2 - 4*d)) / 2\n        b = d - a\n        return f\"Y {a:.12f} {b:.12f}\"\n\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    print(solve(d))\n```",
  "26": "```python\ndef solve_jigsaw_puzzle():\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        if n == 1 or m == 1:\n            print(\"YES\")\n        elif n * m % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolve_jigsaw_puzzle()\n```",
  "27": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            d[a[i]] = max(d[a[i]], 1 + d[a[i] * 2])\n    print(sum(d.values()))\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    solve()\n```",
  "29": "```python\nimport sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    last = {}\n    for i, x in enumerate(a):\n        if x not in last:\n            last[x] = i\n        else:\n            last[x] = max(last[x], i)\n\n    res = [-1] * n\n    mx_dist = -1\n    for x in sorted(last, key=last.get):\n        dist = last[x] - a.index(x) + 1\n        mx_dist = max(mx_dist, dist)\n        res[mx_dist - 1] = x if res[mx_dist - 1] == -1 else min(res[mx_dist - 1], x)\n\n    for i in range(1, n):\n        res[i] = res[i] if res[i] != -1 else res[i - 1]\n\n    print(*res)\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    solve()\n```",
  "30": "```python\ndef min_operations_to_alternate(s: str) -> int:\n    groups = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            groups += 1\n    return (groups - 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(min_operations_to_alternate(s))\n```",
  "31": "```python\ndef calculate_path_time(directions):\n    x, y = 0, 0\n    visited_segments = set()\n    total_time = 0\n    current_position = (0, 0)\n\n    for direction in directions:\n        if direction == 'N':\n            new_position = (x, y + 1)\n        elif direction == 'S':\n            new_position = (x, y - 1)\n        elif direction == 'E':\n            new_position = (x + 1, y)\n        elif direction == 'W':\n            new_position = (x - 1, y)\n\n        segment = tuple(sorted((current_position, new_position)))\n\n        if segment in visited_segments:\n            total_time += 1\n        else:\n            total_time += 5\n            visited_segments.add(segment)\n\n        current_position = new_position\n        if direction == 'N':\n            y += 1\n        elif direction == 'S':\n            y -= 1\n        elif direction == 'E':\n            x += 1\n        elif direction == 'W':\n            x -= 1\n\n    return total_time\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        directions = input()\n        print(calculate_path_time(directions))\n\n\nif __name__ == \"__main__\":\n    main()\n```",
  "32": "```python\ndef calculate_max_coins(n):\n    max_coins = 0\n    turn = True\n    while n > 0:\n        if n % 2 == 0 and (n == 4 or n % 4 != 0):\n            coins_to_take = n // 2\n            max_coins += coins_to_take if turn else 0\n            n -= coins_to_take\n        else:\n            coins_to_take = 1\n            max_coins += coins_to_take if turn else 0\n            n -= coins_to_take\n        turn = not turn\n    return max_coins\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(calculate_max_coins(n))\n```",
  "33": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    print(n, n-1)\n    for i in range(n-2, 0, -1):\n        print(i+2, i)\n```",
  "34": "```python\ndef largest_number(n):\n    segments = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    result = ''\n    while n > 0:\n        if n >= 7:\n            result += '7'\n            n -= 7\n        elif n >= 6:\n            result += '6'\n            n -= 6\n        elif n >= 5:\n            result += '5'\n            n -= 5\n        elif n >= 4:\n            result += '4'\n            n -= 4\n        elif n >= 2:\n            result += '1'\n            n -= 2\n        else:\n            break\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(largest_number(n))\n```",
  "35": "```python\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        e = list(map(int, input().split()))\n        e.sort()\n        groups = 0\n        i = 0\n        while i < N:\n            required = e[i]\n            if i + required <= N:\n                groups += 1\n                i += required\n            else:\n                break\n        print(groups)\n\nif __name__ == \"__main__\":\n    main()\n```",
  "36": "```python\ndef find_pile(n, piles, m, juicy_worms):\n    cumulative_sum = [0] * (n + 1)\n    for i in range(n):\n        cumulative_sum[i + 1] = cumulative_sum[i] + piles[i]\n\n    for worm in juicy_worms:\n        left, right = 0, n\n        while left < right:\n            mid = (left + right) // 2\n            if cumulative_sum[mid] < worm:\n                left = mid + 1\n            else:\n                right = mid\n        print(left)\n\nn = int(input())\npiles = list(map(int, input().split()))\nm = int(input())\njuicy_worms = list(map(int, input().split()))\nfind_pile(n, piles, m, juicy_worms)\n```"
}