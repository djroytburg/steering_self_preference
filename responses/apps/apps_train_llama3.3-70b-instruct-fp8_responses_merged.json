{
  "1": "```python\nimport sys\n\ndef max_diagonal_moves(n, m, k):\n    if k < max(n, m):\n        return -1\n    diagonal_moves = k\n    if (n + m) % 2 != k % 2:\n        diagonal_moves -= 1\n    return diagonal_moves\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    n, m, k = map(int, sys.stdin.readline().split())\n    print(max_diagonal_moves(n, m, k))\n```",
  "3": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort(reverse=True)\n    for i in range(k):\n        a[0] += a[i+1]\n        a[i+1] = 0\n    print(max(a) - min(a))\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    solve()\n```",
  "4": "```python\ndef is_beautiful(p, m):\n    for l in range(len(p)):\n        for r in range(l, len(p)):\n            if sorted(p[l:r+1]) == list(range(1, m+1)):\n                return True\n    return False\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    result = ''.join('1' if is_beautiful(p, m) else '0' for m in range(1, n+1))\n    print(result)\n```",
  "5": "```python\ndef is_permutation(arr):\n    return sorted(arr) == list(range(1, len(arr) + 1))\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = []\n    for i in range(1, n):\n        p1 = a[:i]\n        p2 = a[i:]\n        if is_permutation(p1) and is_permutation(p2):\n            result.append((i, n - i))\n    print(len(result))\n    for l1, l2 in result:\n        print(l1, l2)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "6": "```python\nimport sys\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef solve():\n    n, m = read_ints()\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = read_ints()\n        graph[x-1].append(y-1)\n\n    closed = [False] * n\n    for i in range(n):\n        if not closed[i]:\n            for j in graph[i]:\n                if not closed[j]:\n                    closed[j] = True\n\n    count = sum(closed)\n    print(count)\n    print(*[i+1 for i in range(n) if closed[i]])\n\nt = read_int()\nfor _ in range(t):\n    solve()\n```",
  "8": "```python\nimport sys\n\ndef calculate_score(s):\n    score = 0\n    for i in range(len(s)):\n        if s[i] == 'W':\n            if i == 0 or s[i-1] == 'L':\n                score += 1\n            else:\n                score += 2\n    return score\n\ndef solve(n, k, s):\n    if k == 0:\n        return calculate_score(s)\n\n    s = list(s)\n    changes = []\n    for i in range(n):\n        if s[i] == 'L':\n            if i == 0 or s[i-1] == 'L':\n                changes.append((i, 1))\n            else:\n                changes.append((i, 2))\n\n    changes.sort(key=lambda x: x[1], reverse=True)\n    for i in range(min(k, len(changes))):\n        s[changes[i][0]] = 'W'\n\n    return calculate_score(s)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n```",
  "9": "```python\nimport sys\n\ndef calculate_alice_score(s):\n    ones = []\n    current_count = 0\n    for char in s:\n        if char == '1':\n            current_count += 1\n        elif current_count > 0:\n            ones.append(current_count)\n            current_count = 0\n    if current_count > 0:\n        ones.append(current_count)\n    ones.sort(reverse=True)\n    alice_score = sum(ones[::2])\n    return alice_score\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(calculate_alice_score(s))\n```",
  "10": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if (p[i] > p[i - 1] and p[i] > p[i + 1]) or (p[i] < p[i - 1] and p[i] < p[i + 1]):\n            ans.append(p[i])\n    ans.append(p[-1])\n    print(len(ans))\n    print(*ans)\n```",
  "12": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    pos, neg = False, False\n    ans = True\n\n    for i in range(n):\n        if b[i] > a[i] and not pos:\n            ans = False\n            break\n        elif b[i] < a[i] and not neg:\n            ans = False\n            break\n        if a[i] == 1:\n            pos = True\n        elif a[i] == -1:\n            neg = True\n\n    print(\"YES\" if ans else \"NO\")\n```",
  "13": "```python\nimport math\n\ndef solve(n, g, b):\n    half_n = math.ceil(n / 2)\n    good_days = (half_n + g - 1) // g\n    bad_days = (good_days - 1) * b\n    remaining_days = max(0, n - half_n - bad_days)\n    return good_days * g + bad_days + remaining_days\n\nT = int(input())\nfor _ in range(T):\n    n, g, b = map(int, input().split())\n    print(solve(n, g, b))\n```",
  "14": "```python\nfor _ in range(int(input())):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n\n    if (a1 == a2 and b1 + b2 == a1) or (a1 == b2 and b1 + a2 == a1) or (b1 == a2 and a1 + b2 == b1) or (b1 == b2 and a1 + a2 == b1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```",
  "15": "```python\nfor _ in range(int(input())):\n    a, b, x, y = map(int, input().split())\n    print(max((x) * (b), (a - x - 1) * (b), (a) * (y), (a) * (b - y - 1)))\n```",
  "17": "```python\nimport sys\n\ndef count_tuples(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for last in range(k + 1, n):\n                    if a[i] == a[k] and a[j] == a[last]:\n                        count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(count_tuples(n, a))\n```",
  "18": "```python\nimport math\n\ndef calculate_square_side(n):\n    return math.sqrt(2 - 2 * math.cos(math.pi / n))\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(calculate_square_side(n))\n```",
  "19": "```python\nimport sys\n\ndef min_subscriptions(n, k, d, shows):\n    min_subscriptions = float('inf')\n    for i in range(n - d + 1):\n        unique_shows = set(shows[i:i+d])\n        min_subscriptions = min(min_subscriptions, len(unique_shows))\n    return min_subscriptions\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n, k, d = map(int, sys.stdin.readline().split())\n    shows = list(map(int, sys.stdin.readline().split()))\n    print(min_subscriptions(n, k, d, shows))\n```",
  "20": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    customers = []\n    for _ in range(n):\n        t, l, h = map(int, sys.stdin.readline().split())\n        customers.append((t, l, h))\n\n    low, high = m, m\n    prev_time = 0\n    for t, l, h in customers:\n        low -= (t - prev_time)\n        high += (t - prev_time)\n        low = max(low, l)\n        high = min(high, h)\n        if low > high:\n            print(\"NO\")\n            return\n        prev_time = t\n    print(\"YES\")\n\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    solve()\n```",
  "21": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    s = set(map(int, input().split()))\n    for k in range(1, 1024):\n        if set(i ^ k for i in s) == s:\n            print(k)\n            break\n    else:\n        print(-1)\n```",
  "22": "```python\ndef min_digit(n):\n    return min(int(d) for d in str(n))\n\ndef max_digit(n):\n    return max(int(d) for d in str(n))\n\ndef calculate_a_k(a_1, k):\n    a_n = a_1\n    for _ in range(k - 1):\n        min_d = min_digit(a_n)\n        max_d = max_digit(a_n)\n        if min_d == 0:\n            break\n        a_n += min_d * max_d\n    return a_n\n\nt = int(input())\nfor _ in range(t):\n    a_1, k = map(int, input().split())\n    print(calculate_a_k(a_1, k))\n```",
  "23": "```python\nimport heapq\n\ndef solve():\n    n = int(input())\n    voters = []\n    for _ in range(n):\n        m, p = map(int, input().split())\n        voters.append((m, p))\n    voters.sort()\n\n    pq = []\n    ans = 0\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        heapq.heappush(pq, voters[i][1])\n        if voters[i][0] <= cnt:\n            cnt += 1\n        else:\n            ans += heapq.heappop(pq)\n            cnt += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "24": "```python\nimport math\n\ndef solve(d):\n    if d == 0:\n        return \"Y 0.000000000 0.000000000\"\n    if d == 1:\n        return \"N\"\n    if d == 4:\n        return \"Y 2.000000000 2.000000000\"\n    D = d * d - 4 * d\n    if D < 0:\n        return \"N\"\n    a = (d + math.sqrt(D)) / 2\n    b = (d - math.sqrt(D)) / 2\n    return f\"Y {a:.6f} {b:.6f}\"\n\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    print(solve(d))\n```",
  "26": "```python\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    if n == 1 and m == 1 or n % 2 == 0 or m % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```",
  "27": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    for x in a:\n        while x % 2 == 0:\n            s.add(x)\n            x //= 2\n    print(len(s))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "29": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [-1] * n\n    for i in range(1, n + 1):\n        last = {}\n        for j in range(n):\n            if a[j] not in last:\n                last[a[j]] = j\n            else:\n                last[a[j]] = max(last[a[j]], j - last[a[j]] - 1)\n        for j in range(n - 1, -1, -1):\n            if a[j] not in last:\n                last[a[j]] = j\n            else:\n                last[a[j]] = max(last[a[j]], n - j - 1)\n        for j in range(1, n + 1):\n            if last[j] < n:\n                if ans[last[j]] == -1:\n                    ans[last[j]] = j\n                else:\n                    ans[last[j]] = min(ans[last[j]], j)\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "30": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n    print((count + 1) // 2)\n```",
  "31": "```python\nfrom collections import defaultdict\n\ndef calculate_time(path):\n    x, y = 0, 0\n    visited = defaultdict(int)\n    time = 0\n    for direction in path:\n        new_x, new_y = x, y\n        if direction == 'N':\n            new_y += 1\n        elif direction == 'S':\n            new_y -= 1\n        elif direction == 'E':\n            new_x += 1\n        elif direction == 'W':\n            new_x -= 1\n\n        key = tuple(sorted([(x, y), (new_x, new_y)]))\n        if visited[key]:\n            time += 1\n        else:\n            time += 5\n            visited[key] = 1\n\n        x, y = new_x, new_y\n\n    return time\n\nt = int(input())\nfor _ in range(t):\n    path = input()\n    print(calculate_time(path))\n```",
  "32": "```python\ndef max_coins(n):\n    coins = 0\n    while n > 0:\n        if n % 2 == 0 and (n == 4 or n % 4 != 0):\n            coins += n // 2\n            n //= 2\n        else:\n            coins += 1\n            n -= 1\n        if n > 0:\n            if n % 2 == 0 and (n == 4 or n % 4 != 0):\n                n //= 2\n            else:\n                n -= 1\n    return coins\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_coins(n))\n```",
  "33": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    print(2)\n    print(n, n-1)\n    for i in range(n-1, 1, -1):\n        print(i, i-1)\n```",
  "34": "```python\ndef calculate_max_integer(n):\n    segment_counts = {\n        '0': 6,\n        '1': 2,\n        '2': 5,\n        '3': 5,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 3,\n        '8': 7,\n        '9': 6\n    }\n    max_integer = ''\n    remaining_segments = n\n\n    while remaining_segments > 0:\n        max_digit = '0'\n        for digit in '987654321':\n            if segment_counts[digit] <= remaining_segments and segment_counts[digit] > segment_counts[max_digit]:\n                max_digit = digit\n        max_integer += max_digit\n        remaining_segments -= segment_counts[max_digit]\n\n    return max_integer\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(calculate_max_integer(n))\n```",
  "35": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    e = sorted(map(int, input().split()))\n    groups = 0\n    current_group_size = 0\n    for i in range(n):\n        current_group_size += 1\n        if current_group_size >= e[i]:\n            groups += 1\n            current_group_size = 0\n    print(groups)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```",
  "36": "```python\nimport sys\n\ndef find_pile(n, piles, m, queries):\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + piles[i]\n\n    for query in queries:\n        left, right = 0, n\n        while left < right:\n            mid = (left + right) // 2\n            if prefix_sum[mid] < query:\n                left = mid + 1\n            else:\n                right = mid\n        print(left)\n\ndef main():\n    n = int(sys.stdin.readline())\n    piles = list(map(int, sys.stdin.readline().split()))\n    m = int(sys.stdin.readline())\n    queries = list(map(int, sys.stdin.readline().split()))\n    find_pile(n, piles, m, queries)\n\nif __name__ == \"__main__\":\n    main()\n```"
}