{
  "1": [
    "```python\ndef min_cost(cost, m, n):\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp["
  ],
  "2": [
    "```python\ndef similar_elements(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    similar = set1.intersection(set2)\n    return tuple(sorted(similar))\n```"
  ],
  "3": [
    "```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"
  ],
  "4": [
    "```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n```"
  ],
  "5": [
    "```python\ndef count_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    a, b = 1, 3\n    for _ in range(2, n):\n        a, b = b, 4 * b - a\n    return b\n```"
  ],
  "6": [
    "```python\ndef differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return (xor != 0) and ((xor & (xor - 1)) == 0)\n```"
  ],
  "7": [
    "```python\nimport re\n\ndef find_char_long(s):\n    return re.findall(r'\\b\\w{4,}\\b', s)\n```"
  ],
  "8": [
    "```python\ndef square_nums(nums):\n    return list(map(lambda x: x**2, nums))\n```"
  ],
  "9": [
    "```python\ndef find_Rotations(s):\n    rotations = []\n    for i in range(len(s)):\n        rotations.append(s[i:] + s[:i])\n    return sum([1 for i in rotations if i == s])\n```"
  ],
  "10": [
    "```python\ndef small_nnum(dataset, n):\n    return sorted(set(dataset))[:n]\n```"
  ],
  "11": [
    "```python\ndef remove_Occ(s, c):\n    first_occ = s.find(c)\n    last_occ = s.rfind(c)\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n```"
  ],
  "12": [
    "```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n```"
  ],
  "13": [
    "```python\nfrom collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return [(word, count) for word, count in word_counts.items() if count == max_count]\n```"
  ],
  "14": [
    "```python\ndef find_Volume(base, height, length):\n    return 0.5 * base * height * length\n```"
  ],
  "15": [
    "```python\ndef split_lowerstring(s):\n    result = []\n    temp = ''\n    for char in s:\n        if char.islower():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = ''\n    if temp:\n        result.append(temp)\n    return result\n```"
  ],
  "16": [
    "```python\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = '^[a-z_]+$\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
  ],
  "17": [
    "```python\ndef square_perimeter(side_length):\n    return side_length * 4\n```"
  ],
  "18": [
    "```python\ndef remove_dirty_chars(s1, s2):\n    for char in s2:\n        s1 = s1.replace(char, '')\n    return s1\n```"
  ],
  "19": [
    "```python\ndef test_duplicate(arr):\n    return len(arr) != len(set(arr))\n```"
  ],
  "20": [
    "```python\ndef is_woodall(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 1\n    while True:\n        woodall = i * (2**i) - 1\n        if woodall == n:\n            return True\n       "
  ],
  "21": [
    "```python\ndef multiples_of_num(m, n):\n    return [i*n for i in range(1, m+1)]\n```"
  ],
  "22": [
    "```python\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n```"
  ],
  "23": [
    "```python\ndef maximum_Sum(lists):\n    return max(sum(lst) for lst in lists)\n```"
  ],
  "24": [
    "```python\ndef binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary //= 10\n        power += 1\n    return decimal\n```"
  ],
  "25": [
    "```python\ndef find_Product(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n```"
  ]
}