{
  "1": [
    "def min_cost(cost, m, n):\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n   "
  ],
  "2": [
    "def similar_elements(tuple_list1, tuple_list2):\n    set1 = set(tuple_list1)\n    set2 = set(tuple_list2)\n    similar = set1.intersection(set2)\n    return tuple(sorted(similar))"
  ],
  "3": [
    "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"
  ],
  "4": [
    "import heapq\n\ndef heap_queue_largest(nums, k):\n    return heapq.nlargest(k, nums)"
  ],
  "5": [
    "def count_ways(n):\n    if n % 2 == 0:\n        return (n // 2 + 1) ** 2\n    else:\n        return (n // 2 + 1) ** 2 + (n // 2 + 1) * (n // 2 + 2)"
  ],
  "6": [
    "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1"
  ],
  "7": [
    "import re\n\ndef find_char_long(s):\n    return re.findall(r'\\b\\w{4,}\\b', s)"
  ],
  "8": [
    "square_nums = lambda nums: [n ** 2 for n in nums]"
  ],
  "9": [
    "def find_Rotations(s):\n    return len(s) - 1"
  ],
  "10": [
    "def small_nnum(dataset, n):\n    return sorted(set(dataset))[:n]"
  ],
  "11": [
    "def remove_Occ(s, c):\n    return s.replace(c, '', 1).replace(c, '', 1)"
  ],
  "12": [
    "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"
  ],
  "13": [
    "from collections import Counter\nfrom operator import itemgetter\n\ndef count_common(words):\n    return sorted(Counter(words).items(), key=itemgetter(1), reverse=True)"
  ],
  "14": [
    "def find_Volume(base, height, length):\n    return base * height * length"
  ],
  "15": [
    "def split_lowerstring(s):\n    result = []\n    current = ''\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = ''\n            result.append(char)\n    if current:\n        result.append(current)\n    return result"
  ],
  "16": [
    "import re\n\ndef text_lowercase_underscore(text):\n    match = re.search(r'[a-z]+_[a-z]+', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
  ],
  "17": [
    "def square_perimeter(side):\n    return 4 * side"
  ],
  "18": [
    "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])"
  ],
  "19": [
    "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"
  ],
  "20": [
    "def is_woodall(n):\n    def woodall(i):\n        return i * (2**i) + 1\n    i = 1\n    while True:\n        w = woodall(i)\n        if w == n:\n            return True\n        elif w > n:\n            return False\n        i += 1"
  ],
  "21": [
    "def multiples_of_num(n, m):\n    return [i for i in range(n, n*m+1) if i % n == 0]"
  ],
  "22": [
    "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
  ],
  "23": [
    "def maximum_Sum(lists):\n    return max(sum(lst) for lst in lists)"
  ],
  "24": [
    "def binary_to_decimal(binary):\n    return int(bin(binary)[2:])"
  ],
  "25": [
    "def find_Product(arr,n):\n    product = 1\n    count = {}\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    for num in arr:\n        if count[num] == 1:\n            product *= num\n    return product"
  ]
}