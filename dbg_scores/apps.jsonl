{"id": "1", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nq = int(input())\nfor _ in range(q):\n    n, m, k = map(int, input().split())\n    ans = -1\n    if k < n+m:\n        print(-1)\n        continue\n    if k == n+m:\n        print(max(n, m))\n        continue\n    if k % 2 == n % 2 == m % 2 == 1:\n        ans = (k - 3", "llama3.1-8b-instruct_prob": 0.4895565454971715, "gpt-3.5-turbo_response": "```python\n# Read input\nq = int(input())\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# Process queries\nfor query in queries:\n    x, y, k = query\n    if k < max(x, y) or k % 2 != (x + y) % 2:\n        print(-1)\n    else:\n        print(k)\n```", "gpt-3.5-turbo_prob": 0.5104434545028286}
{"id": "10", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = [p[0]]\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            ans.append(p[i])\n        elif p[i] < p[i - 1] and p[i] < p[i + 1]:\n            ans.append(p[i])\n   ", "llama3.1-8b-instruct_prob": 0.47836411367850246, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_diff = 0\n    start = 0\n    end = 0\n    for i in range(1, n):\n        diff = abs(p[i] - p[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            start = i - 1\n            end = i\n   ", "gpt-3.5-turbo_prob": 0.5216358863214976}
{"id": "100", "llama3.1-8b-instruct_response": "def solve():\n    r, g, b = map(int, input().split())\n    total = r + g + b\n    return min(min(r, g) + min(g, b) + min(r, b), (total - min(r, g, b)) // 2 + min(r, g, b))\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.4999999974205377, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    r, g, b = map(int, input().split())\n    candies = [r, g, b]\n    candies.sort()\n    print(min(candies[0] + candies[1], sum(candies) // 2))\n```", "gpt-3.5-turbo_prob": 0.5000000025794623}
{"id": "1000", "llama3.1-8b-instruct_response": "n = int(input())\n\nfor _ in range(n):\n    m = int(input())\n    a = list(map(int, input().split()))\n    time = 0\n    for i in range(m):\n        time += a[i]\n    print(max(1, time // m))", "llama3.1-8b-instruct_prob": 0.46985858484197174, "gpt-3.5-turbo_response": "```python\ndef min_speed_of_panipuri_seller(T, customers):\n    result = []\n    for i in range(T):\n        N = customers[i][0]\n        A = customers[i][1:]\n        min_speed = max(A)\n        for j in range(1, max(A) + 1):\n            speed = j\n            time = 0\n            for k in range(N):\n                time += (A[k] + speed - 1) // speed\n           ", "gpt-3.5-turbo_prob": 0.5301414151580282}
{"id": "1001", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    prices = list(map(int, input().split()))\n    count = 0\n    window = []\n    for i in range(n):\n        window.append(prices[i])\n        if i >= 5:\n            window.sort()\n            if prices[i] < window[-1]:\n                count += 1\n                window.pop(-1)\n        else:\n            if prices[i] < prices[i-1]:\n                count += 1\n    print(count", "llama3.1-8b-instruct_prob": 0.46643590164536597, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    prices = list(map(int, input().split()))\n    good_days = 0\n    for i in range(N):\n        if i < 5:\n            good_days += 1\n        else:\n            if prices[i] < min(prices[i-5:i]):\n                good_days += 1\n    print(good_days)\n```", "gpt-3.5-turbo_prob": 0.533564098354634}
{"id": "1002", "llama3.1-8b-instruct_response": "```python\nfrom collections import deque\n\ndef solve():\n    n, d = map(int, input().split())\n    cities = list(map(int, input().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(cities[i] - cities[j]) <= d:\n                graph[i].append(j)\n                graph[j].append(i)\n\n    visited = [False] * n\n", "llama3.1-8b-instruct_prob": 0.5000000024003483, "gpt-3.5-turbo_response": "def can_visit_cities(T, test_cases):\n    results = []\n    for i in range(T):\n        N, D = test_cases[i][0], test_cases[i][1]\n        cities = test_cases[i][2]\n        cities.sort()\n        if max(cities) - min(cities) <= D:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results", "gpt-3.5-turbo_prob": 0.49999999759965175}
{"id": "1004", "llama3.1-8b-instruct_response": "def min_hoverboards(n):\n    count = 0\n    size = 1\n    while size * size <= n * n:\n        count += (n * n - size * size) // (size * size)\n        size += 1\n    count += 1\n    return count, ' '.join([str(1) * (n * n // size * size - size * size) + str(size)] * (n * n // size * size // (size", "llama3.1-8b-instruct_prob": 0.4880717988109344, "gpt-3.5-turbo_response": "n = int(input())\ncount = 0\nwhile n > 0:\n    count += 1\n    n -= count * count\n    if n < (count + 1) * (count + 1):\n        break\nprint(count)\nfor i in range(1, count):\n    print(i, end=' ')\nprint(count + n)", "gpt-3.5-turbo_prob": 0.5119282011890657}
{"id": "1006", "llama3.1-8b-instruct_response": "def solve():\n    n, d = map(int, input().split())\n    if str(d) in str(n):\n        return str(n).replace(str(d), '', 1) + str(d)\n    else:\n        return str(n) + str(d)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5000000048006965, "gpt-3.5-turbo_response": "```python\ndef min_possible_number(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, d = map(int, case.split())\n        N = str(N)\n        while d in map(int, N):\n            idx = N.index(str(d))\n            N = N[:idx] + N[idx+1:] + str(d)\n        results.append(int(N))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4999999951993035}
{"id": "1007", "llama3.1-8b-instruct_response": "```python\nimport math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len = 0\n    curr_len = 1\n    for i in range(1, n):\n        if math.gcd(arr[i], arr[i - 1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len,", "llama3.1-8b-instruct_prob": 0.47687935579791074, "gpt-3.5-turbo_response": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef largest_contiguous_subarray(arr):\n    n = len(arr)\n    ans = -1\n    for i in range(n):\n        g = arr[i]\n        for j in range(i, n):\n            g = gcd(g, arr[j])\n            if g == 1:\n                ans = max(ans, j - i + 1)\n   ", "gpt-3.5-turbo_prob": 0.5231206442020893}
{"id": "1008", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        cnt[x] = cnt.get(x, 0) + 1\n    ans = 0\n    for k in cnt:\n        ans += cnt[k] * (cnt[k] - 1) // 2\n    print(pow(2, ans, 10**9 + 7))\n\nt = int(input())\nfor _", "llama3.1-8b-instruct_prob": 0.5462008742573895, "gpt-3.5-turbo_response": "```python\ndef max_group_of_disjoint_subarrays(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        result.append(str((2 ** N - 2) % (10**9 + 7)))\n    return result\n```", "gpt-3.5-turbo_prob": 0.4537991257426105}
{"id": "1009", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if a[i - 1] == 1:\n            dp[i] = dp[i - 1] * 2\n        else:\n            for j in range(i - 1, -1, -1", "llama3.1-8b-instruct_prob": 0.5435380278738399, "gpt-3.5-turbo_response": "```python\ndef count_subsequences(T, sequences):\n    results = []\n    for i in range(T):\n        N = sequences[i][0]\n        A = sequences[i][1]\n        count = 0\n        for j in range(1, 2**N):\n            subset = [A[k] for k in range(N) if (j >> k) & 1]\n            if len(subset) > 1:\n                while len(set(subset)) > 1", "gpt-3.5-turbo_prob": 0.45646197212616013}
{"id": "101", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b, c, r = map(int, input().split())\n\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n\n    if a <= c - r and c + r <= b:\n        print(0)\n    elif a <= c - r:\n        print(c - a - max(0, c - r - b))\n", "llama3.1-8b-instruct_prob": 0.41271217276837247, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, c, r = map(int, input().split())\n    if a > b:\n        a, b = b, a\n    ans = max(0, b - a - max(0, min(b, c + r) - max(a, c)))\n    print(ans)\n```", "gpt-3.5-turbo_prob": 0.5872878272316275}
{"id": "1011", "llama3.1-8b-instruct_response": "def find_message(s):\n    n, k = map(int, s[1].split())\n    message = s[2]\n    chef = sum(1 for a, b in zip(message, message.lower()) if a != b)\n    brother = sum(1 for a, b in zip(message, message.upper()) if a != b)\n    if chef <= k and brother <= k:\n        return \"both\"\n    elif chef <= k:\n        return \"chef\"\n    elif brother <=", "llama3.1-8b-instruct_prob": 0.46643590097458965, "gpt-3.5-turbo_response": "```python\ndef chef_or_brother(T, cases):\n    result = []\n    for i in range(0, len(cases), 2):\n        N, K = map(int, cases[i].split())\n        s = cases[i+1]\n        upper_count = sum(1 for c in s if c.isupper())\n        lower_count = N - upper_count\n        if upper_count <= K or lower_count <= K:\n            if upper_count == N or lower_count ==", "gpt-3.5-turbo_prob": 0.5335640990254102}
{"id": "1013", "llama3.1-8b-instruct_response": "def count_non_friends(N, M, friendships):\n    graph = [[] for _ in range(N + 1)]\n    for u, v in friendships:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (N + 1)\n    groups = 0\n\n    for i in range(1, N + 1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            group_size =", "llama3.1-8b-instruct_prob": 0.31648212267572967, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\ndef find_non_friend_pairs(N, M, friendships):\n    friends = defaultdict(set)\n    for A, B in friendships:\n        friends[A].add(B)\n        friends[B].add(A)\n    non_friends = sum(len(friends[i]) for i in friends) // 2\n    return N * (N - 1) // 2 - non_friends\n```", "gpt-3.5-turbo_prob": 0.6835178773242703}
{"id": "1014", "llama3.1-8b-instruct_response": "M = 10**9 + 7\n\ndef solve(S):\n    if S[0] == '0':\n        return -1\n    if '0' not in S:\n        return int(S)\n    n = len(S)\n    ans = 0\n    for i in range(n):\n        if S[i] == '0':\n            continue\n        x = int(S[i])\n        y = int(S[:i] + S[i+1:])\n        if bin(x).", "llama3.1-8b-instruct_prob": 0.42691612288182157, "gpt-3.5-turbo_response": "```python\ndef is_power_of_two(n):\n    return n != 0 and (n & (n - 1)) == 0\n\ndef sum_of_magical_powers(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            num = int(s[i:j+1])\n            if not s[i].startswith('0') and is_power_of_two(num):\n                count += num\n    return count % (", "gpt-3.5-turbo_prob": 0.5730838771181784}
{"id": "1015", "llama3.1-8b-instruct_response": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) * i\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))", "llama3.1-8b-instruct_prob": 0.6224593312018546, "gpt-3.5-turbo_response": "def generate_pattern(K):\n    result = ''\n    for i in range(1, K+1):\n        result += str(i*2)\n    return result", "gpt-3.5-turbo_prob": 0.3775406687981454}
{"id": "1016", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    delayed = 0\n    for _ in range(n):\n        s, j = map(int, input().split())\n        if j - s > 5:\n            delayed += 1\n    print(delayed)", "llama3.1-8b-instruct_prob": 0.48736321874401106, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    count = 0\n    for _ in range(N):\n        S, J = map(int, input().split())\n        if J - S > 5:\n            count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.512636781255989}
{"id": "1017", "llama3.1-8b-instruct_response": "def solve():\n    a = list(map(int, input().split()))\n    p = a.pop()\n    s = sum(a)\n    for i in range(6):\n        for j in range(5):\n            if s <= 24 * 5:\n                s += a[j] * (i + 1) / p\n                break\n    return \"Yes\" if s > 24 * 2 else \"No\"\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.45379912246069004, "gpt-3.5-turbo_response": "```python\ndef work_on_weekends(T, test_cases):\n    results = []\n    for case in test_cases:\n        A = list(map(int, case.split()[:5]))\n        P = int(case.split()[5])\n        total_hours = sum(A)\n        if total_hours * P > 120:\n            results.append('Yes')\n        else:\n            results.append('No')\n    return results\n```", "gpt-3.5-turbo_prob": 0.54620087753931}
{"id": "1018", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n - 1):\n        diff = a[i + 1] - a[i]\n        if diff <= i + 1:\n            print(i + 1 + (diff - (i + 1)))\n            break\n        else:\n            print(diff - (i + 1) + 1) \n            break", "llama3.1-8b-instruct_prob": 0.589589346340808, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    min_hours = max(heights) - min(heights)\n    print(min_hours)", "gpt-3.5-turbo_prob": 0.41041065365919194}
{"id": "1019", "llama3.1-8b-instruct_response": "```python\ndef is_valid_strip(strip):\n    n, heights = int(strip[0]), list(map(int, strip[1].split()))\n    if n % 2 == 0 or heights[0] != 1 or heights[-1] != 1:\n        return False\n    for i in range(1, n // 2 + 1):\n        if heights[i] != i + 1:\n            return False\n    for i in range(n // 2 +", "llama3.1-8b-instruct_prob": 0.5863870467821539, "gpt-3.5-turbo_response": "def is_valid_strip(N, strips):\n    result = []\n    for i in range(N):\n        strip = strips[i]\n        center = strip.index(max(strip))\n        left = strip[:center]\n        right = strip[center+1:]\n        if len(left) != len(right):\n            result.append('no')\n        elif left == sorted(left, reverse=True) and right == sorted(right):\n            result.append('yes')\n        else:\n            result.append('no')\n    return result", "gpt-3.5-turbo_prob": 0.41361295321784614}
{"id": "102", "llama3.1-8b-instruct_response": "def is_beautiful(num):\n    return len(str(num)) == 1 or str(num)[0] == str(num)[-1]\n\ndef count_beautiful(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_beautiful(i):\n            count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_beautiful(n))", "llama3.1-8b-instruct_prob": 0.5139119072399208, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    for i in range(1, 10):\n        num = int(str(i) * len(str(n)))\n        if num <= n:\n            count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.4860880927600792}
{"id": "1020", "llama3.1-8b-instruct_response": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        cnt = sum(a)\n        if abs(cnt - k) <= 1:\n            print(2)\n        else:\n            print(1)\n\nsolve()", "llama3.1-8b-instruct_prob": 0.4813516174219134, "gpt-3.5-turbo_response": "def predict_winner(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = test_cases[i][0], test_cases[i][1]\n        A = test_cases[i][2:]\n        ones = A.count(1)\n        if ones == N:\n            results.append('1' if K % 2 == 1 else '2')\n        elif ones == 0:\n            results.append('2' if K % 2 == 1 else '", "gpt-3.5-turbo_prob": 0.5186483825780865}
{"id": "1021", "llama3.1-8b-instruct_response": "def rearrange_sequence(n, sequence):\n    graph = {}\n    for num in sequence:\n        graph[num] = []\n        for other_num in sequence:\n            if num % 3 == 0 and num // 3 == other_num:\n                graph[num].append(other_num)\n            elif num * 2 == other_num:\n                graph[num].append(other_num)\n    visited = set()\n    result = []\n    def dfs(num):\n        visited.add(num)\n        for neighbor in graph[num", "llama3.1-8b-instruct_prob": 0.3875460652138961, "gpt-3.5-turbo_response": "from collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nd = defaultdict(int)\nfor i in a:\n    d[i] += 1\nx = a[0]\nprint(x, end=' ')\nfor i in range(n-1):\n    if x % 3 == 0 and d[x//3] > 0:\n        x = x // 3\n    else:\n        x = x * 2\n    print(x,", "gpt-3.5-turbo_prob": 0.6124539347861039}
{"id": "1022", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3 and a[2] == -1:\n        print('NO')\n        return\n    if n == 4 and a[3] == -1:\n        if a[2] == -1:\n            print('NO')\n            return\n        if a[1] == -1:\n            print('NO')\n            return\n        if a[0]", "llama3.1-8b-instruct_prob": 0.4370589599207153, "gpt-3.5-turbo_response": "```python\ndef solve(N, A):\n    if sum(A) % N != 0:\n        return \"NO\"\n    else:\n        x = sum(A) // N\n        res = []\n        for i in range(N):\n            if A[i] == -1:\n                res.append(x)\n            else:\n                res.append(A[i])\n        return \"YES\\n\" + \" \".join(map(str, res))\n```", "gpt-3.5-turbo_prob": 0.5629410400792847}
{"id": "1023", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    res = ''\n    for i in range(1, n + 1):\n        res += ''.join(str(j) for j in range(1, i + 1))\n        if i != n:\n            res += ' '\n    print(res)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5119282013618235, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    num = 1\n    for i in range(1, K+1):\n        for j in range(i):\n            print(num, end=' ')\n            num += 1\n        print()\n```", "gpt-3.5-turbo_prob": 0.48807179863817657}
{"id": "1024", "llama3.1-8b-instruct_response": "```python\ndef check_slices():\n    t = int(input())\n    for _ in range(t):\n        s, n, k, r = map(int, input().split())\n        total_slices = 0\n        for i in range(1, n + 1):\n            total_slices += k * (r ** (i - 1))\n        if total_slices <= s:\n            print(\"POSSIBLE\", s - total_slices)\n        else:\n            print(\"IMPOSSIBLE", "llama3.1-8b-instruct_prob": 0.48135161706974156, "gpt-3.5-turbo_response": "```python\ndef distribute_cakes(T, families):\n    results = []\n    total_extra_slices = 0\n    for family in families:\n        S, N, K, R = family\n        slices_needed = K * ((R ** N) - 1) // (R - 1)\n        if slices_needed <= S:\n            results.append('POSSIBLE ' + str(S - slices_needed))\n        else:\n            results.append('IMPOSSIBLE ' + str(slices", "gpt-3.5-turbo_prob": 0.5186483829302584}
{"id": "1026", "llama3.1-8b-instruct_response": "def count_triples(N1, N2, N3):\n    MOD = 10**9 + 7\n    return (N1 * N2 * N3) % MOD\n\nT = int(input())\nfor _ in range(T):\n    N1, N2, N3 = map(int, input().split())\n    print(count_triples(N1, N2, N3))", "llama3.1-8b-instruct_prob": 0.558501095897909, "gpt-3.5-turbo_response": "```python\ndef count_ordered_triples(T, test_cases):\n    result = []\n    for case in test_cases:\n        N1, N2, N3 = map(int, case.split())\n        result.append((N1 * (N1 - 1) * (N1 - 2) * N2 * (N2 - 1) * N3) % (10**9 + 7))\n    return result\n```", "gpt-3.5-turbo_prob": 0.44149890410209097}
{"id": "1027", "llama3.1-8b-instruct_response": "def solve():\n    n, p = map(int, input().split())\n    if p == n:\n        print('impossible')\n        return\n    s = ['a'] * (n // p) + ['b']\n    s += s[::-1]\n    if s == s[:n][::-1]:\n        print(''.join(s[:n]))\n    else:\n        print('impossible')\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4768793642368653, "gpt-3.5-turbo_response": "def construct_palindromic_string(T, cases):\n    result = []\n    for case in cases:\n        N, P = map(int, case.split())\n        if P == 1 or P == N:\n            result.append(\"impossible\")\n        else:\n            s = \"a\" * (N // 2 - 1) + \"b\" + \"a\" * (N // 2 - 1) + \"b\"\n            result.append(s)\n    return result", "gpt-3.5-turbo_prob": 0.5231206357631347}
{"id": "1028", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = str(n)\n    sum = 0\n    for i in s:\n        sum += int(i) ** len(s)\n    if sum == n:\n        print(\"FEELS GOOD\")\n    else:\n        print(\"FEELS BAD\")", "llama3.1-8b-instruct_prob": 0.3733627000468388, "gpt-3.5-turbo_response": "```python\ndef is_armstrong_number(n):\n    num_str = str(n)\n    num_digits = len(num_str)\n    total = sum(int(digit)**num_digits for digit in num_str)\n    return \"FEELS GOOD\" if total == n else \"FEELS BAD\"\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(is_armstrong_number(N))\n```", "gpt-3.5-turbo_prob": 0.6266372999531612}
{"id": "1029", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    jobs = sorted(map(int, input().split()))\n\n    chef = []\n    assistant = []\n\n    for i in range(m):\n        if i % 2 == 0:\n            chef.append(jobs[i])\n        else:\n            assistant.append(jobs[i])\n\n    for i in range(1, n + 1):\n        if i not in chef and i not in assistant", "llama3.1-8b-instruct_prob": 0.4404959687654709, "gpt-3.5-turbo_response": "```python\ndef assign_jobs(n, m, completed_jobs):\n    chef_jobs = []\n    assistant_jobs = []\n    all_jobs = list(range(1, n+1))\n    remaining_jobs = list(set(all_jobs) - set(completed_jobs))\n    for i in range(len(remaining_jobs)):\n        if i % 2 == 0:\n            chef_jobs.append(remaining_jobs[i])\n        else:\n            assistant_jobs.append(remaining_jobs[i])\n    return chef_jobs, assistant_jobs\n", "gpt-3.5-turbo_prob": 0.559504031234529}
{"id": "103", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    rows = [0] * n\n    cols = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                rows[i] = 1\n                cols[j] = 1\n    cnt = ", "llama3.1-8b-instruct_prob": 0.525939930303783, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    row_claimed = [False] * n\n    col_claimed = [False] * m\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                row_claimed[i] = True\n", "gpt-3.5-turbo_prob": 0.47406006969621695}
{"id": "1030", "llama3.1-8b-instruct_response": "class Node:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n        self.left = None\n        self.right = None\n        self.left_child = None\n        self.right_child = None\n\ndef get_path_configuration(node):\n    if node is None:\n        return []\n    path = get_path_configuration(node.left)\n    path += get_path_configuration(node.right)\n    path.append(node.u)\n    path.append(node.v)\n    return path", "llama3.1-8b-instruct_prob": 0.4127121727683725, "gpt-3.5-turbo_response": "```python\ndef count_pairs(n, u, v):\n    x = u\n    y = v\n    while x != y:\n        if x > y:\n            x //= 2\n        else:\n            y //= 2\n    return n // x\n```", "gpt-3.5-turbo_prob": 0.5872878272316275}
{"id": "1031", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    h, s = map(float, input().split())\n\n    a = (h**2 - 4*s/h)**0.5\n    b = 2*s/h\n\n    if a < b or a+b > h or a+b < 0.01*h:\n        print(-1)\n    else:\n        print(f\"{a:.5f} {b:.5f} {h:.5f}\")", "llama3.1-8b-instruct_prob": 0.4895565377587844, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    H, S = map(int, input().split())\n    D = H**2 - 4*S\n    if D < 0:\n        print(-1)\n    else:\n        x1 = (H + math.sqrt(D)) / 2\n        x2 = (H - math.sqrt(D)) / 2\n        print('{:.5f} {:.5f} {:.5f}'.", "gpt-3.5-turbo_prob": 0.5104434622412156}
{"id": "1032", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    print((n * x) % (10**6 + 3))", "llama3.1-8b-instruct_prob": 0.407683366810227, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    print(pow(X, N, 10**6+3))\n```", "gpt-3.5-turbo_prob": 0.592316633189773}
{"id": "1033", "llama3.1-8b-instruct_response": "def min_change(n, leaf_values):\n    total_sum = sum(leaf_values)\n    target = total_sum // n\n    return abs(target * n - total_sum)", "llama3.1-8b-instruct_prob": 0.541662851411842, "gpt-3.5-turbo_response": "```python\nn = int(input())\nvalues = list(map(int, input().split()))\ntotal_sum = sum(values)\nresult = 0\nfor value in values:\n    result += abs(total_sum - value)\nprint(result // 2)\n```", "gpt-3.5-turbo_prob": 0.4583371485881579}
{"id": "1036", "llama3.1-8b-instruct_response": "```python\nfrom collections import deque\n\ndef is_same_snake():\n    t = int(input())\n    for _ in range(t):\n        x11, y11, x12, y12 = map(int, input().split())\n        x21, y21, x22, y22 = map(int, input().split())\n\n        if (x11 == x12 and x21 == x22) or (y11 == y12 and y21 == y22):\n            if (x", "llama3.1-8b-instruct_prob": 0.474060057342948, "gpt-3.5-turbo_response": "```python\ndef is_same_snake(x11, y11, x12, y12, x21, y21, x22, y22):\n    if (x11, y11) == (x21, y21) and (x12, y12) == (x22, y22):\n        return \"yes\"\n    if (x11, y11) == (x22, y22) and (x12, y12) == (x21,", "gpt-3.5-turbo_prob": 0.525939942657052}
{"id": "1037", "llama3.1-8b-instruct_response": "def f(s):\n    p = s.find('P')\n    if p % 2 == 0:\n        return 'Yes' if 'P' in s[p-2:p] else 'No'\n    return 'Yes' if 'P' in s[p-1:p+1] else 'No'\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(f(s))", "llama3.1-8b-instruct_prob": 0.5119281955023314, "gpt-3.5-turbo_response": "```python\ndef ada_wins_game(board):\n    pawns = [i for i in range(len(board)) if board[i] == 'P']\n    if len(pawns) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(ada_wins_game('..P.P'))\n```", "gpt-3.5-turbo_prob": 0.4880718044976687}
{"id": "1039", "llama3.1-8b-instruct_response": "def solve():\n    x, y = map(int, input().split())\n    if x > y:\n        print(0)\n        return\n    a = y - x\n    b = y - x\n    if a % 2 == 0:\n        a //= 2\n        b //= 2\n    else:\n        a = (a - 1) // 2\n        b = (a + 1) // 2\n    print(max((y -", "llama3.1-8b-instruct_prob": 0.43080400480254033, "gpt-3.5-turbo_response": "```python\ndef min_rounds_to_clean_lab(X, Y):\n    diff = Y - X\n    if diff % 2 == 0:\n        print(2)\n    else:\n        print(1)\n```", "gpt-3.5-turbo_prob": 0.5691959951974597}
{"id": "1040", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n, q = map(int, input().split())\n    s = input()\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n        if 2 * freq[s[i]] > n:\n            print('YES')\n            return\n    prefix = [[0] * 26 for _ in range(n + 1)]\n    for i in range(n):\n        for j in range", "llama3.1-8b-instruct_prob": 0.4136129490312218, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    s = input()\n    for _ in range(q):\n        l, r = map(int, input().split())\n        if len(set(s[l-1:r])) < (r-l+1)//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "gpt-3.5-turbo_prob": 0.5863870509687782}
{"id": "1041", "llama3.1-8b-instruct_response": "def max_value_subarray():\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        max_product = float('-inf')\n        start = end = 0\n        temp_start = 0\n        for i in range(n):\n            if arr[i] == 0:\n                temp_start = i + 1\n                continue\n            if max_product < arr[i]:\n                max_product = arr[i]\n                start", "llama3.1-8b-instruct_prob": 0.40623780221746153, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = list(map(int, input().split()))\n    max_val = -float('inf')\n    start = 0\n    end = 0\n    curr_val = 1\n    curr_start = 0\n    for i in range(N):\n        curr_val *= S[i]\n        if curr_val > max_val:\n            max_val = curr_val\n            start = curr_start", "gpt-3.5-turbo_prob": 0.5937621977825385}
{"id": "1042", "llama3.1-8b-instruct_response": "def find_good_pairs():\n    t = int(input())\n    for _ in range(t):\n        n, p = map(int, input().split())\n        count = 0\n        for i in range(1, n + 1):\n            if all((i * j) % p != 0 for j in range(1, n + 1) if i < j):\n                count += 1\n        print(count)\n\nfind_good_pairs()", "llama3.1-8b-instruct_prob": 0.5781524157171335, "gpt-3.5-turbo_response": "```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count_good_pairs(N, P):\n    count = 0\n    for a in range(1, N):\n        for b in range(a+1, N+1):\n            if gcd(a*b, P) == 1:\n                count += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    N", "gpt-3.5-turbo_prob": 0.4218475842828665}
{"id": "1043", "llama3.1-8b-instruct_response": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    forgotten = set(input().split())\n    for _ in range(k):\n        input()\n        phrase = input().split()\n        forgotten -= set(phrase)\n    print(' '.join('YES' if word in forgotten else 'NO' for word in input().split()))\n```", "llama3.1-8b-instruct_prob": 0.5139119240225296, "gpt-3.5-turbo_response": "```python\ndef check_word_existence(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        forgotten_words = set(test_cases[i][1].split())\n        modern_phrases = [set(phrase.split()[1:]) for phrase in test_cases[i][2:]]\n        word_existence = ['YES' if any(word in phrase for phrase in modern_phrases) else 'NO'", "gpt-3.5-turbo_prob": 0.4860880759774703}
{"id": "1044", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(sum(int(digit) for digit in str(n)))", "llama3.1-8b-instruct_prob": 0.6833464562626848, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = input()\n    print(sum(int(digit) for digit in N))\n```", "gpt-3.5-turbo_prob": 0.3166535437373152}
{"id": "1045", "llama3.1-8b-instruct_response": "def f(x):\n    vowels = 'aeiou'\n    return 1 if x not in vowels else 0\n\nfor _ in range(int(input())):\n    s = input()\n    n = sum(f(c) * 2**(len(s)-1-i) for i, c in enumerate(s))\n    print(n % (10**9 + 7))", "llama3.1-8b-instruct_prob": 0.6964662240859701, "gpt-3.5-turbo_response": "```python\nT = 1\nstrings = ['codechef']\n```", "gpt-3.5-turbo_prob": 0.30353377591402986}
{"id": "1046", "llama3.1-8b-instruct_response": "def game(A, B):\n    i = 1\n    while True:\n        if i % 2 == 1:\n            if A - i < 0:\n                return \"Bob\"\n        else:\n            if B - i < 0:\n                return \"Limak\"\n        i += 1\n\nt = int(input())\nfor _ in range(t):\n    A, B = map(int, input().split())\n    print(game(A, B))", "llama3.1-8b-instruct_prob": 0.49999999888877233, "gpt-3.5-turbo_response": "def candy_game_winner(test_cases):\n    results = []\n    for case in test_cases:\n        A, B = map(int, case.split())\n        total_candies = 0\n        limak_turn = True\n        while total_candies <= max(A, B):\n            if limak_turn:\n                total_candies += 1\n                if total_candies > A:\n                    results.append(\"Bob\")\n                    break\n            else:\n                total_candies += ", "gpt-3.5-turbo_prob": 0.5000000011112277}
{"id": "1047", "llama3.1-8b-instruct_response": "import math\n\ndef solve():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    def dist(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def check(mid):\n        roads = set()\n        for i in range(n):\n            for j in", "llama3.1-8b-instruct_prob": 0.4308027908450916, "gpt-3.5-turbo_response": "```python\nfrom math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = [0]*n\n    y = [0]*n\n    for i in range(n):\n        x[i], y[i] = map(int, input().split())\n    x.sort()\n    y.sort()\n    print(\"{:.10f}\".format((max(x)-min(x) + max(y)-min(y)) * sqrt(2) / ", "gpt-3.5-turbo_prob": 0.5691972091549085}
{"id": "1048", "llama3.1-8b-instruct_response": "def solve():\n    a, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = max(0, (x[1] - x[0] - k) / 2 + min(x[2] - x[1], x[1] - x[0]) - k)\n    print(f\"{ans:.6f}\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5089545305420361, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    a, K = map(int, input().split())\n    x1, x2, x3 = map(int, input().split())\n    x = sorted([x1, x2, x3])\n    if x[0] + a > x[2]:\n        print(\"{:.6f}\".format(0))\n    else:\n        print(\"{:.6f}\".format((x[2]", "gpt-3.5-turbo_prob": 0.49104546945796396}
{"id": "1049", "llama3.1-8b-instruct_response": "def max_sum_subarray(arr, k):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if len(set(subarray)) == k:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int", "llama3.1-8b-instruct_prob": 0.5517800672417054, "gpt-3.5-turbo_response": "```python\ndef max_subarray_sum(arr, n, k):\n    max_sum = 0\n    unique_elements = set()\n    for i in range(n - k + 1):\n        subarray = arr[i:i+k]\n        if len(set(subarray)) == k:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\n```", "gpt-3.5-turbo_prob": 0.44821993275829464}
{"id": "105", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += (k - a[i]) // a[0]\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.4768793532184484, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_casts = 0\n    for i in range(n):\n        max_casts = max(max_casts, (a[i] + k - 1) // k)\n    print(max_casts)\n```", "gpt-3.5-turbo_prob": 0.5231206467815516}
{"id": "1050", "llama3.1-8b-instruct_response": "def longest_valid_prefix(expression):\n    stack = []\n    for i, char in enumerate(expression):\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return i\n    return len(expression) - len(stack)\n\nt = int(input())\nfor _ in range(t):\n    expression = input()\n    print(longest_valid_prefix(expression))", "llama3.1-8b-instruct_prob": 0.45833715477668535, "gpt-3.5-turbo_response": "```python\ndef longest_valid_prefix(expression):\n    stack = []\n    count = 0\n    for char in expression:\n        if char == '<':\n            stack.append(char)\n        elif char == '>' and stack:\n            stack.pop()\n            count += 2\n        else:\n            break\n    return count\n```", "gpt-3.5-turbo_prob": 0.5416628452233146}
{"id": "1051", "llama3.1-8b-instruct_response": "for _ in range(int(input())):\n    n = int(input())\n    for i in range(1, n+1):\n        print('0', end='')\n        for j in range(1, i+1):\n            print('*' + str(j), end='')\n        print()", "llama3.1-8b-instruct_prob": 0.515483563756021, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K+1):\n        print('*'*i + str(i))\n```", "gpt-3.5-turbo_prob": 0.4845164362439791}
{"id": "1053", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n-1):\n        if arr[i] == 0 and arr[i+1] == 1:\n            print(i+1)\n            break", "llama3.1-8b-instruct_prob": 0.6027600888927758, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(arr.index(1))", "gpt-3.5-turbo_prob": 0.39723991110722434}
{"id": "1054", "llama3.1-8b-instruct_response": "def solve(s):\n    n = len(s)\n    if n % 2 == 1:\n        mid = n // 2\n        left = s[:mid]\n        right = s[mid + 1:][::-1]\n        for i in range(mid, -1, -1):\n            if s[mid] == '.':\n                left = left[:i] + s[mid] + left[i:]\n                break\n            elif left[i] == '.':\n                left = left[:", "llama3.1-8b-instruct_prob": 0.4260153370991816, "gpt-3.5-turbo_response": "```python\ndef lexicographically_smallest_palindrome(T, strings):\n    results = []\n    for s in strings:\n        s = list(s)\n        n = len(s)\n        for i in range(n//2):\n            if s[i] == '.' and s[n-1-i] != '.':\n                s[i] = s[n-1-i]\n            elif s[i] != '.' and s[n-1-i] == '.':\n                s[n-1-i] = s", "gpt-3.5-turbo_prob": 0.5739846629008183}
{"id": "1055", "llama3.1-8b-instruct_response": "def max_slices(m, n, a):\n    a = [0] + a\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j >= a[i]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]]", "llama3.1-8b-instruct_prob": 0.48475495046586414, "gpt-3.5-turbo_response": "```python\ndef max_slices(M, N, A):\n    A.sort(reverse=True)\n    slices = 0\n    for i in range(M):\n        slices += (A[i] * (N // M)) + min(A[i], N % M)\n    return slices\n```", "gpt-3.5-turbo_prob": 0.5152450495341359}
{"id": "1056", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    if a + b + c == 180:\n        print('YES')\n    else:\n        print('NO')", "llama3.1-8b-instruct_prob": 0.4813516223662687, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    A, B, C = map(int, input().split())\n    if A + B + C == 180:\n        print('YES')\n    else:\n        print('NO')\n```", "gpt-3.5-turbo_prob": 0.5186483776337314}
{"id": "1057", "llama3.1-8b-instruct_response": "def next_magical_number(n):\n    n = str(n)\n    for i in range(len(n) + 1, len(n) * 2 + 1):\n        num = str(i)\n        if '4' in num and '7' in num:\n            return int(num)\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = input()\n    if n:\n        print(next_magical_number(int(n)))", "llama3.1-8b-instruct_prob": 0.3821388715111253, "gpt-3.5-turbo_response": "def next_magical_number(n):\n    n_str = str(n)\n    if '4' in n_str:\n        return int(n_str.replace('4', '7'))\n    else:\n        return int('4' + '4' * len(n_str))", "gpt-3.5-turbo_prob": 0.6178611284888746}
{"id": "1058", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    original_password = ''\n    carry = 0\n    while n > 0:\n        digit = n % 10\n        original_digit = (digit - carry) % 10\n        carry = (digit - carry) // 10\n        original_password = str(original_digit) + original_password\n        n //= 10\n    print(original_password)", "llama3.1-8b-instruct_prob": 0.5378681345953527, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = input()\n    original_password = ''.join(str((int(digit) - 2) % 10) for digit in n)\n    print(original_password)\n```", "gpt-3.5-turbo_prob": 0.4621318654046474}
{"id": "1059", "llama3.1-8b-instruct_response": "def max_modulo(arr):\n    max_val = max(arr)\n    max_mod = 0\n    for num in arr:\n        if num != max_val and max_val % num > max_mod:\n            max_mod = max_val % num\n    return max_mod\n\nn = int(input())\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\nprint(max_modulo(arr))", "llama3.1-8b-instruct_prob": 0.6155292951744946, "gpt-3.5-turbo_response": "def max_mod_value(N, A):\n    A.sort()\n    return A[-1] % A[0]", "gpt-3.5-turbo_prob": 0.38447070482550544}
{"id": "106", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append((l, r))\n    a.sort(key=lambda x: x[1])\n    ans = [0] * n\n    l, r = 0, 0\n    for i in range(n):\n        if a[i][1] < r:\n            ans[i] = ", "llama3.1-8b-instruct_prob": 0.45833715477668546, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    segments.sort(key=lambda x: (x[0], -x[1]))\n    if segments[0][1] >= segments[1][0]:\n        print(-1)\n    else:\n        print(*[1 if i < n//2 else 2 for i in range(n)])\n```", "gpt-3.5-turbo_prob": 0.5416628452233145}
{"id": "1060", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] != s[(i + 1) % n]:\n            ans += 1\n    print(ans + (n - 1) * (n - 2) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5000000029297462, "gpt-3.5-turbo_response": "```python\ndef count_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] != s[(i+1)%n]:\n            count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.4999999970702539}
{"id": "1062", "llama3.1-8b-instruct_response": "def ice_wrapping_paper(n):\n    result = []\n    for i in range(n + 1):\n        row = []\n        for j in range(n + 1):\n            if abs(i - j) <= n - i:\n                row.append(4)\n            else:\n                row.append(3)\n        result.append(' '.join(map(str, row)))\n    return result", "llama3.1-8b-instruct_prob": 0.5139119171176277, "gpt-3.5-turbo_response": "```python\nn = int(input())\nfor i in range(2*n+1):\n    row = [str(max(abs(n-i), abs(n-j)) + 1) for j in range(2*n+1)]\n    print(' '.join(row))\n```", "gpt-3.5-turbo_prob": 0.48608808288237226}
{"id": "1063", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a % b)\n```", "llama3.1-8b-instruct_prob": 0.44410527050496473, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a % b)", "gpt-3.5-turbo_prob": 0.5558947294950352}
{"id": "1064", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    dp = [[0] * 26 for _ in range(n + 1)]\n    for i in range(n - 3, -1, -1):\n        for j in range(26):\n            if s[i] == '?' or s[i] == chr(ord('A') + j):\n                dp[i][j] = max(dp[i + 1][j], dp[i + 4][j]", "llama3.1-8b-instruct_prob": 0.5111924424899821, "gpt-3.5-turbo_response": "def chef_signboard(t, strings):\n    result = []\n    for s in strings:\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '?':\n                if i < len(s) - 3 and s[i+1:i+4] != list('CHEF'):\n                    s[i] = 'A'\n                else:\n                    s[i] = 'C'\n        result.append(''.join(s))\n    return result", "gpt-3.5-turbo_prob": 0.488807557510018}
{"id": "1065", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n    ans = [0] * (n + m - 2)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                for k in range(n + m - 2):\n                    if 0 <= i - k < n and 0 <= j + k", "llama3.1-8b-instruct_prob": 0.5000000017178767, "gpt-3.5-turbo_response": "```python\nfrom itertools import combinations\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    distances = [0] * (n + m - 1)\n    houses = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == '1']\n    for (x1, y1), (x2", "gpt-3.5-turbo_prob": 0.49999999828212327}
{"id": "1066", "llama3.1-8b-instruct_response": "def largest_nice_integer(n):\n    n = str(n)\n    for i in range(len(n) - 1, 0, -1):\n        if n[i] < n[i - 1]:\n            return int(n[:i])\n    return int(n)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(largest_nice_integer(n))", "llama3.1-8b-instruct_prob": 0.450939419667777, "gpt-3.5-turbo_response": "def largest_nice_integer(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i] <= n[i-1]:\n        i -= 1\n    if i == 0:\n        return int(''.join(n))\n    j = i\n    while j < len(n) and n[j] >= n[i-1]:\n        j += 1\n    n[i-1], n[j-1]", "gpt-3.5-turbo_prob": 0.549060580332223}
{"id": "1068", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    if n == 2 and m == 2 or n == 3 and m == 3:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4754350263359434, "gpt-3.5-turbo_response": "def can_shuffle_students(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = map(int, case.split())\n        if N == 1 or M == 1 or (N == 2 and M == 2):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results", "gpt-3.5-turbo_prob": 0.5245649736640565}
{"id": "1069", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a + b)", "llama3.1-8b-instruct_prob": 0.5612296656009272, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a + b)", "gpt-3.5-turbo_prob": 0.43877033439907276}
{"id": "107", "llama3.1-8b-instruct_response": "def solve():\n    a, b, c, d = map(int, input().split())\n    if a + b > 0 and c + d == 0:\n        print('Ya Ya Tidak Tidak')\n    elif a + b == 0 and c + d > 0:\n        print('Tidak Ya Tidak Tidak')\n    elif a + b == 0 and c + d == 0:\n        print('Tidak Tidak Tidak Tidak')\n", "llama3.1-8b-instruct_prob": 0.474060057342948, "gpt-3.5-turbo_response": "```python\ndef special_box_possibility(A, B, C, D):\n    if (A % 2 == 1 and B + C + D == 0) or (B % 2 == 1 and A + C + D == 0) or (C % 2 == 1 and A + B + D == 0) or (D % 2 == 1 and A + B + C == 0):\n        return \"Ya Ya T", "gpt-3.5-turbo_prob": 0.525939942657052}
{"id": "1071", "llama3.1-8b-instruct_response": "def solve():\n    x, q = map(int, input().split())\n    queries = []\n    for _ in range(q * 2):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        if query[0] == 1:\n            i = query[1]\n            print('ON' if (x >> i) & 1 else 'OFF')\n        elif query[0] == 2:\n            i = query[1]\n            x", "llama3.1-8b-instruct_prob": 0.519571947883498, "gpt-3.5-turbo_response": "```python\ndef bitwise_game(T, test_cases):\n    res = []\n    for case in test_cases:\n        x, Q = case[0], case[1]\n        for i in range(Q):\n            query_type = case[2*i+2]\n            if query_type == 1:\n                i = case[2*i+3]\n                res.append(\"ON\" if x & (1 << (i-1)) else \"OFF\")\n            elif query_type == 2:\n", "gpt-3.5-turbo_prob": 0.48042805211650197}
{"id": "1072", "llama3.1-8b-instruct_response": "def solve(n):\n    result = ''\n    x_count = n // 2\n    d_count = n - x_count\n    result += 'X' * x_count\n    result += 'D' * d_count\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.5432579546413117, "gpt-3.5-turbo_response": "def min_length_string(n):\n    x_count = n // 2\n    d_count = n - x_count\n    return 'X' * x_count + 'D' * d_count", "gpt-3.5-turbo_prob": 0.45674204535868834}
{"id": "1073", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    MOD = 10**9 + 7\n    dp = [[0] * (m + 1) for _ in range(3)]\n    dp[1][1] = 1\n    dp[2][1] = m\n    for i in range(3, n + 3):\n        for j in range(1, m + 1):\n            dp[i % 3][", "llama3.1-8b-instruct_prob": 0.399701028529664, "gpt-3.5-turbo_response": "MOD = 10**9 + 7\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    if n == 1:\n        print(m)\n    elif n == 2:\n        print(m * (m - 1) % MOD)\n    else:\n        print(m * (m - 1) * pow(m - 2, n - 2, MOD) % MOD)", "gpt-3.5-turbo_prob": 0.600298971470336}
{"id": "1074", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    logs = list(map(int, input().split()))\n    logs.sort()\n\n    count = 0\n    for i in range(0, n - 2, 2):\n        if logs[i] == logs[i + 1]:\n            count += logs[i] * (logs[i + 2] == logs[i + 3])\n\n    print(count)\n```", "llama3.1-8b-instruct_prob": 0.6220107289261319, "gpt-3.5-turbo_response": "```python\ndef count_window_frames(T, logs):\n    result = []\n    for i in range(0, len(logs), 2):\n        if logs[i] == logs[i+1]:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n```", "gpt-3.5-turbo_prob": 0.37798927107386815}
{"id": "1075", "llama3.1-8b-instruct_response": "def predict_winner():\n    for _ in range(int(input())):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        gcd = nums[0]\n        for num in nums[1:]:\n            gcd = gcd(num, gcd)\n        if gcd % 2 == 0:\n            print(\"Derek\")\n        else:\n            print(\"Henry\")\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return", "llama3.1-8b-instruct_prob": 0.5000000058594921, "gpt-3.5-turbo_response": "```python\ndef winner_of_game(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        integers = case[1]\n        xor_sum = 0\n        for num in integers:\n            xor_sum ^= num\n        if xor_sum == 0:\n            results.append('Derek')\n        else:\n            results.append('Henry')\n    return results\n```", "gpt-3.5-turbo_prob": 0.4999999941405079}
{"id": "1077", "llama3.1-8b-instruct_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    instructions = []\n    for _ in range(n):\n        instructions.append(input())\n    reversed_instructions = instructions[::-1]\n    reversed_instructions[0] = instructions[0].replace('Begin on', 'Begin from')\n    for i in range(1, n):\n        if instructions[i].startswith('Left'):\n            reversed_instructions[i] = instructions[i].replace('Left', 'Right')\n        else:\n           ", "llama3.1-8b-instruct_prob": 0.38150279630035255, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    directions = [input() for _ in range(N)]\n    print('')\n    for direction in reversed(directions):\n        if 'Left' in direction:\n            print(direction.replace('Left', 'Right'))\n        else:\n            print(direction.replace('Right', 'Left'))\n    print('')\n```", "gpt-3.5-turbo_prob": 0.6184972036996474}
{"id": "1078", "llama3.1-8b-instruct_response": "def solve():\n    s, w1, w2, w3 = map(int, input().split())\n    if w1 == w2 == w3:\n        print(2 if s >= 3 else 1)\n    else:\n        if s >= 4 and w1 + w2 <= s and w3 <= s:\n            print(2)\n        elif s >= 3 and w1 + w2 <= s and w3 > s:\n            print(3)\n       ", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    S, W1, W2, W3 = map(int, input().split())\n    if S >= W1 + W2 + W3:\n        print(1)\n    elif S >= W1 + W2 or S >= W2 + W3:\n        print(2)\n    else:\n        print(3)\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "1079", "llama3.1-8b-instruct_response": "def count_digit_four(n):\n    return str(n).count('4')\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_digit_four(n))", "llama3.1-8b-instruct_prob": 0.5648492607997412, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(n.count('4'))", "gpt-3.5-turbo_prob": 0.4351507392002588}
{"id": "108", "llama3.1-8b-instruct_response": "def check_sharpened(a):\n    n = len(a)\n    left, right = 0, n - 1\n    while left < right:\n        if a[left] < a[right]:\n            left += 1\n        else:\n            right -= 1\n    for i in range(left, right + 1):\n        if a[i] == 0:\n            return \"No\"\n    return \"Yes\"\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.5104434618829874, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, a[i])\n        if max_val > i:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")", "gpt-3.5-turbo_prob": 0.48955653811701266}
{"id": "1080", "llama3.1-8b-instruct_response": "def alternating_code(S):\n    if len(S) == 2:\n        return 'YES' if S[0] != S[1] else 'NO'\n    else:\n        return 'YES' if S[0] != S[2] and S[1] != S[3] else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(alternating_code(S))", "llama3.1-8b-instruct_prob": 0.5448679510316164, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(set(s)) == 2 and s[0] == s[2] and s[1] == s[3]:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "gpt-3.5-turbo_prob": 0.45513204896838355}
{"id": "1081", "llama3.1-8b-instruct_response": "def encrypt_message(message, key):\n    encrypted = ''\n    for i in range(len(message)):\n        num = ord(message[i]) - ord('A')\n        encrypted += chr((num + key[i]) % 26 + ord('A'))\n    return encrypted\n\nt = int(input())\nfor _ in range(t):\n    message = input()\n    key = [98, 57, 31, 45, 46]\n    print(encrypt_message(message, key))", "llama3.1-8b-instruct_prob": 0.44410526963315633, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    S = input()\n    key = [98, 57, 31, 45, 46]\n    result = ''\n    for i in range(len(S)):\n        num = (ord(S[i]) - 65 + key[i]) % 26\n        result += chr(num + 65)\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.5558947303668437}
{"id": "1083", "llama3.1-8b-instruct_response": "def max_people(N, M, Z, L, R, B):\n    return min(N * M, Z + L + R + B)\n\nT = int(input())\nfor _ in range(T):\n    N, M, Z, L, R, B = map(int, input().split())\n    print(min(N * M, Z + L + R + B))", "llama3.1-8b-instruct_prob": 0.5201373100889386, "gpt-3.5-turbo_response": "def max_attendees(T, cases):\n    result = []\n    for case in cases:\n        N, M, Z, L, R, B = map(int, case.split())\n        max_possible = (N * M) - Z - max(0, L - B) - max(0, R - B) - max(0, B - min(L, R))\n        result.append(str(max_possible))\n    return result", "gpt-3.5-turbo_prob": 0.4798626899110614}
{"id": "1084", "llama3.1-8b-instruct_response": "def min_operations(S):\n    operations = 0\n    prev = '0'\n    for c in S:\n        if c != prev:\n            operations += 1\n            prev = c\n    return operations", "llama3.1-8b-instruct_prob": 0.7537837800838907, "gpt-3.5-turbo_response": "def min_operations_to_zeros(S):\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '1':\n            count += 1\n    return count", "gpt-3.5-turbo_prob": 0.24621621991610934}
{"id": "1085", "llama3.1-8b-instruct_response": "M = 1000000007\n\ndef solve():\n    dp = [[0 for _ in range(26)] for _ in range(26)]\n    for i in range(26):\n        line = list(map(int, input().split()))\n        for j in range(26):\n            if line[j] == 1:\n                dp[i][j] = 1\n    for i in range(26):\n        for j in range(26):\n            if dp[i][j] ==", "llama3.1-8b-instruct_prob": 0.42513223364669656, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\ndef count_words(matrix, queries):\n    mod = 1000000007\n    n = len(matrix)\n    dp = [[0] * n for _ in range(101)]\n    for i in range(n):\n        dp[1][i] = 1\n    for l in range(2, 101):\n        for i in range(n):\n            for j in range(n):\n                if matrix[j][i] == 1:\n                   ", "gpt-3.5-turbo_prob": 0.5748677663533035}
{"id": "1087", "llama3.1-8b-instruct_response": "def is_tree_topology(graph):\n    n, m = map(int, graph[0].split())\n    edges = [list(map(int, line.split())) for line in graph[1:]]\n\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n", "llama3.1-8b-instruct_prob": 0.37902272237143375, "gpt-3.5-turbo_response": "```python\ndef is_tree_topology(N, edges):\n    if len(edges) != N - 1:\n        return 'NO'\n    adj_list = {i: [] for i in range(1, N + 1)}\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    visited = set()\n    stack = [1]\n    while stack:\n        node = stack.pop()\n        if node in visited:\n            return", "gpt-3.5-turbo_prob": 0.6209772776285662}
{"id": "1088", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    m, p = map(float, input().split())\n    chef = (1 - p**m) / (1 - p)\n    colleague = 1e9 - chef\n    print(f\"{chef:.2f} {colleague:.2f}\")", "llama3.1-8b-instruct_prob": 0.6078404475680582, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    M, p = map(float, input().split())\n    if M == 1:\n        print(\"{:.1f} {:.1f}\".format(1e9, 0))\n    else:\n        print(\"{:.1f} {:.1f}\".format(1e9 * (1 - p), 1e9 * p))", "gpt-3.5-turbo_prob": 0.3921595524319418}
{"id": "1089", "llama3.1-8b-instruct_response": "from collections import deque\n\ndef solve():\n    n = int(input())\n    parent = list(map(int, input().split()))\n    parent = [-1] + parent\n    queue = deque([1])\n    while queue:\n        node = queue.popleft()\n        if node != 1 and not any(parent[node]):\n            queue.append(node)\n            continue\n        count = 0\n        for i in range(1, n+1):\n            if parent[i] == node:\n                count", "llama3.1-8b-instruct_prob": 0.4477875277893832, "gpt-3.5-turbo_response": "```python\ndef min_nodes_left(n, A):\n    leaves = [0] * (n + 1)\n    for i in range(1, n):\n        leaves[A[i-1]] += 1\n    nodes = [0] * (n + 1)\n    for i in range(1, n):\n        nodes[A[i-1]] += nodes[i] + 1\n    result = 0\n    for i in range(1, n + ", "gpt-3.5-turbo_prob": 0.5522124722106169}
{"id": "1090", "llama3.1-8b-instruct_response": "def shortest_subsequence(n, d, a):\n    left = 0\n    curr_sum = 0\n    min_len = float('inf')\n    for right in range(n):\n        curr_sum += a[right]\n        while curr_sum >= d:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= a[left]\n            left += 1\n    return min_len if min_len != float('inf') else -1\n\nt = int(input", "llama3.1-8b-instruct_prob": 0.6371845747704203, "gpt-3.5-turbo_response": "```python\ndef shortest_contiguous_subsequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, d = map(int, case[0].split())\n        sequence = list(map(int, case[1].split()))\n        min_length = float('inf')\n        current_sum = 0\n        start = 0\n        for end in range(n):\n            current_sum += sequence[end]\n            while current_sum >= d:\n                min_length = min(min", "gpt-3.5-turbo_prob": 0.36281542522957966}
{"id": "1091", "llama3.1-8b-instruct_response": "def solve(n):\n    if n % 2 == 0 or n == 3:\n        return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.586387044902682, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "gpt-3.5-turbo_prob": 0.413612955097318}
{"id": "1092", "llama3.1-8b-instruct_response": "def solve():\n    n, k, e, m = map(int, input().split())\n    scores = []\n    for _ in range(n - 1):\n        scores.append(list(map(int, input().split())))\n    s = list(map(int, input().split()))\n    total = sum(score[:-1] for score in scores)\n    target = (n - k) * m + total\n    s[-1] = 0\n    for i in range(e - 1):\n", "llama3.1-8b-instruct_prob": 0.5104434560612308, "gpt-3.5-turbo_response": "```python\ndef min_score_to_enter_university(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K, E, M = map(int, case[0].split())\n        scores = [list(map(int, x.split())) for x in case[1:-1]]\n        sergey_scores = list(map(int, case[-1].split()))\n        total_scores = [sum(x) for x in scores]\n        total_scores.sort(reverse=True)\n       ", "gpt-3.5-turbo_prob": 0.48955654393876924}
{"id": "1094", "llama3.1-8b-instruct_response": "```python\ndef find_rhyming_words():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        words = input().split()\n        rhyming_words = {}\n        for word in words:\n            suffix = word[-3:]\n            if suffix in rhyming_words:\n                rhyming_words[suffix].append(word)\n            else:\n                rhyming_words[suffix] = [word]\n        for suffix, word_list in rh", "llama3.1-8b-instruct_prob": 0.5517800623546707, "gpt-3.5-turbo_response": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    words = input().split()\n    rhyming_words = []\n    for j in range(n):\n        for k in range(j+1, n):\n            if words[j][-3:] == words[k][-3:]:\n                rhyming_words.append(words[j] + \" \" + words[k])\n    print(\"Case :\", i+1)\n    for word in rhyming_words:\n        print(word)", "gpt-3.5-turbo_prob": 0.4482199376453293}
{"id": "1095", "llama3.1-8b-instruct_response": "def min_moves(arr):\n    n = int(arr[0])\n    perm = list(map(int, arr[1].split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[perm[i]] = i\n    inversions = 0\n    for i in range(1, n):\n        for j in range(i):\n            if pos[i] < pos[j]:\n                inversions += 1\n    return inversions\n\n", "llama3.1-8b-instruct_prob": 0.39970102890467774, "gpt-3.5-turbo_response": "```python\nn = int(input())\nbooks = list(map(int, input().split()))\nsorted_books = sorted(books)\nmoves = sum(1 for i in range(n) if books[i] != sorted_books[i])\nprint(moves)\n```", "gpt-3.5-turbo_prob": 0.6002989710953224}
{"id": "1096", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nn, x, y = map(int, input().split())\ns = []\ne = []\nv = []\nw = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    s.append(a)\n    e.append(b)\nv = list(map(int, input().split()))\nw = list(map(int, input().split()))\n\nans = float('inf')\nfor i in v:\n    for j in w:\n       ", "llama3.1-8b-instruct_prob": 0.4621325448402916, "gpt-3.5-turbo_response": "```python\ndef min_time_to_spend(N, X, Y, contests, V_times, W_times):\n    contests.sort(key=lambda x: x[0])\n    V_times.sort()\n    W_times.sort()\n    min_time = float('inf')\n    j = 0\n    for i in range(N):\n        while j < X and V_times[j] < contests[i][0]:\n            j += 1\n        if j < X and V_times[j] <= contests[i", "gpt-3.5-turbo_prob": 0.5378674551597084}
{"id": "1097", "llama3.1-8b-instruct_response": "```python\ndef cake_eating(N, L, B):\n    for _ in range(N - 1):\n        if L > B:\n            L -= B ** 2\n        else:\n            B -= L ** 2\n    return L * B\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    L, B = map(int, input().split())\n    if N % 2 == 1:\n        print(\"Yes\", cake_e", "llama3.1-8b-instruct_prob": 0.5445891886579882, "gpt-3.5-turbo_response": "```python\ndef get_cake_area(T, cases):\n    results = []\n    for i in range(T):\n        N, L, B = map(int, cases[i].split())\n        min_side = min(L, B)\n        max_side = max(L, B)\n        if N % 2 == 0:\n            results.append(\"Yes \" + str(min_side))\n        else:\n            results.append(\"No\")\n    return results\n```", "gpt-3.5-turbo_prob": 0.4554108113420118}
{"id": "1098", "llama3.1-8b-instruct_response": "def max_stones_removed():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        stones = list(map(int, input().split()))\n        stones.sort(reverse=True)\n        total = 0\n        for i in range(n % 2):\n            total += stones[i]\n        print(total + (stones[n // 2] if n % 2 == 1 else 0))\n\nmax_stones_removed()", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef max_stones_removed(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        stones = test_cases[i][1:]\n        stones.sort()\n        chef_stones = sum(stones[::2])\n        results.append(str(chef_stones))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "1099", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef calculate_score(votes):\n    score = 0\n    user_votes = defaultdict(int)\n    for vote in votes:\n        user, vote_type = vote.split()\n        if user_votes[user] == 1:\n            if vote_type == '+':\n                score += 1\n            else:\n                score -= 1\n            user_votes[user] = 0\n        else:\n            if vote_type == '+':\n                score += 2\n           ", "llama3.1-8b-instruct_prob": 0.38447071361474366, "gpt-3.5-turbo_response": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    votes = defaultdict(int)\n    score = 0\n    for _ in range(N):\n        user, vote = input().split()\n        if votes[user] != 0:\n            score -= votes[user]\n        if vote == '+':\n            votes[user] = 1\n        else:\n            votes[user] = -1\n        score += votes[user]\n    print(score)", "gpt-3.5-turbo_prob": 0.6155292863852563}
{"id": "110", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [0]\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] > a[i + 1]:\n            peaks.append(peaks[-1] + 1)\n        else:\n            peaks.append(peaks[-1])\n    ans = 0", "llama3.1-8b-instruct_prob": 0.5875060281646993, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    peaks = [i for i in range(1, n-1) if a[i-1] < a[i] and a[i] > a[i+1]]\n    max_peaks = 0\n    max_l = 1\n    for i in range(n-k+1):\n        num", "gpt-3.5-turbo_prob": 0.4124939718353007}
{"id": "1100", "llama3.1-8b-instruct_response": "def max_operations(p, q, r, a, b, c):\n    def is_possible(p, q, r, a, b, c, operations):\n        if (p, q, r) == (a, b, c):\n            return True\n        if operations == 0:\n            return False\n        for d in range(1, max(abs(p), abs(q), abs(r)) + 1):\n            for i in range(3):\n                for j in range", "llama3.1-8b-instruct_prob": 0.5283596872336576, "gpt-3.5-turbo_response": "```python\ndef max_operations(p, q, r, a, b, c):\n    diff1 = a - p\n    diff2 = b - q\n    diff3 = c - r\n    total_diff = abs(diff1) + abs(diff2) + abs(diff3)\n    if total_diff % 2 == 0 and (diff1 + diff2 + diff3) % 2 == 0:\n        return total_diff // 2\n    else:\n       ", "gpt-3.5-turbo_prob": 0.4716403127663424}
{"id": "1102", "llama3.1-8b-instruct_response": "M = 1000000007\n\ndef f(S):\n    n = len(S)\n    dp = [[0] * 10 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(10):\n            if j == 0:\n                dp[i + 1][int(S[i]) - 2] = dp[i][j]\n            else:\n                dp[i + 1][", "llama3.1-8b-instruct_prob": 0.3475703748365055, "gpt-3.5-turbo_response": "```python\nMOD = 1000000007\n\ndef possible_strings_count(S):\n    count = 1\n    for digit in S:\n        count *= len(keypad[int(digit)])\n        count %= MOD\n    return count\n\nT = int(input())\nfor _ in range(T):\n    S = input().strip()\n    print(possible_strings_count(S))\n```", "gpt-3.5-turbo_prob": 0.6524296251634947}
{"id": "1103", "llama3.1-8b-instruct_response": "def find_p(n, arr):\n    for num in arr:\n        i = 2\n        while i * i <= num:\n            if num % (i * i) == 0:\n                return i\n            i += 1\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_p(n, arr))", "llama3.1-8b-instruct_prob": 0.4768793564984784, "gpt-3.5-turbo_response": "```python\ndef find_divisible_square(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        integers = list(map(int, case[1].split()))\n        product = 1\n        for num in integers:\n            product *= num\n        root = int(product ** 0.5)\n        results.append(root)\n    return results\n```", "gpt-3.5-turbo_prob": 0.5231206435015217}
{"id": "1104", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    ans = 0\n    for i in range(1, n + 1):\n        if n >= i * 2:\n            ans += 2 * i\n        else:\n            ans += 2 * (n - i + 1)\n    return (ans + k - 1) // 2 % 1000000007\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.36754863307742003, "gpt-3.5-turbo_response": "```python\ndef time_taken(N, K):\n    return (2 * N - 1 + K * (K - 1) // 2) % 1000000007\n```", "gpt-3.5-turbo_prob": 0.63245136692258}
{"id": "1105", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n // 2):\n        ans = max(ans + a[i], a[i + n // 2])\n    if n % 2 == 1:\n        ans = max(ans, a[n // 2])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5378681410891294, "gpt-3.5-turbo_response": "```python\ndef min_time_to_prepare_dishes(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        C = case[1]\n        C.sort()\n        if N == 1:\n            results.append(C[0])\n        else:\n            results.append(max(C[0] + C[1], C[-1]))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4621318589108706}
{"id": "1107", "llama3.1-8b-instruct_response": "def sum_of_goodness(L, R):\n    MOD = 10**9 + 7\n    def count_digits(n):\n        return len(str(n))\n\n    def sum_of_goodness_helper(L, R):\n        if L > R:\n            return 0\n        if L // 10 == 0:\n            return L * count_digits(L)\n        mid = (L + R) // 2\n        return sum_of_goodness_helper(L, mid) + sum_of_goodness", "llama3.1-8b-instruct_prob": 0.5144477701160299, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    L, R = map(int, input().split())\n    total_goodness = 0\n    for num in range(L, R+1):\n        total_goodness += num * len(str(num))\n    print(total_goodness % 1000000007)\n```", "gpt-3.5-turbo_prob": 0.48555222988397007}
{"id": "1108", "llama3.1-8b-instruct_response": "n, m, k = map(int, input().split())\nstudents = []\nfor _ in range(n):\n    students.append(list(map(int, input().split())))\n\ncount = 0\nfor student in students:\n    total_minutes = sum(student[:-1])\n    if total_minutes >= m and student[-1] <= 10:\n        count += 1\n\nprint(count)", "llama3.1-8b-instruct_prob": 0.4768793613071192, "gpt-3.5-turbo_response": "```python\nN, M, K = map(int, input().split())\ncount = 0\nfor _ in range(N):\n    data = list(map(int, input().split()))\n    total_time = sum(data[:-1])\n    if total_time >= M and data[-1] <= 10:\n        count += 1\nprint(count)\n```", "gpt-3.5-turbo_prob": 0.5231206386928808}
{"id": "1109", "llama3.1-8b-instruct_response": "def sumit_wins(n):\n    if n == 1:\n        return \"NO\"\n    if n % 2 == 0:\n        return \"YES\"\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return \"NO\"\n    return \"YES\"", "llama3.1-8b-instruct_prob": 0.541662851411842, "gpt-3.5-turbo_response": "```python\ndef predict_outcome(T, numbers):\n    outcomes = []\n    for num in numbers:\n        if num % 2 == 0:\n            outcomes.append(\"YES\")\n        else:\n            outcomes.append(\"NO\")\n    return outcomes\n```", "gpt-3.5-turbo_prob": 0.458337148588158}
{"id": "1110", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\ndef min_modifications(arr):\n    n = len(arr)\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    max_num = max(arr)\n    total = sum(freq.values())\n    modifications = 0\n\n    for num in range(1, max_num + 1):\n        if num not in freq:\n            modifications += 1\n        elif freq[num] > num:\n            modifications += freq[num] - num\n\n    return", "llama3.1-8b-instruct_prob": 0.5517800617277289, "gpt-3.5-turbo_response": "```python\ndef min_modifications(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        max_num = max(A)\n        count = [0] * (max_num + 1)\n        for num in A:\n            count[num] += 1\n        max_count = max(count)\n        if max_count > (N + 1) // 2", "gpt-3.5-turbo_prob": 0.44821993827227113}
{"id": "1111", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for x in a:\n        if x in cnt:\n            cnt[x] += 1\n        else:\n            cnt[x] = 1\n    ans = 0\n    for x in cnt:\n        y = 100000 - x\n        if x == y:\n            ans += cnt[x] *", "llama3.1-8b-instruct_prob": 0.5144477633481698, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    odd_pairs = sum(1 for i in range(N) for j in range(i+1, N) if (A[i] + A[j]) % 2 != 0)\n    print(odd_pairs)\n```", "gpt-3.5-turbo_prob": 0.4855522366518302}
{"id": "1112", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end='')\n        print()\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.42819573343012973, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    num = 1\n    for i in range(1, K+1):\n        for j in range(i):\n            print(num, end='')\n            num += 1\n        print()\n```", "gpt-3.5-turbo_prob": 0.5718042665698703}
{"id": "1113", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    max_elements = [num for num, count in freq.items() if count == max_freq]\n\n    print(min(max_elements), max_freq)\n```", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = Counter(A)\n    max_count = max(count.values())\n    max_element = min(k for k, v in count.items() if v == max_count)\n    print(max_element, max_count)\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "1114", "llama3.1-8b-instruct_response": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i < n - 1:\n            ans += (a[i] + a[i + 1]) * math.comb(n - 1, 2)\n        else:\n            ans += a[i] * (n - 1)\n    print(ans /", "llama3.1-8b-instruct_prob": 0.31981835948711623, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = max(a)\n    count_max = a.count(max_val)\n    total_pairs = n * (n - 1) / 2\n    if count_max > 1:\n        print(1.0)\n    else:\n        print(count_max / total_pairs)\n```", "gpt-3.5-turbo_prob": 0.6801816405128838}
{"id": "1118", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.399701033793066, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    count = 0\n    for i in range(1, N):\n        if S[i] == S[i-1]:\n            count += 1\n    print((count+1)//2)\n```", "gpt-3.5-turbo_prob": 0.600298966206934}
{"id": "1120", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ndef solve(R, C, x, y):\n    return max(math.ceil((R - x) / 2), math.ceil((C - y) / 2))\n\nT = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    x, y = map(int, input().split())\n    print(solve(R, C, x, y))", "llama3.1-8b-instruct_prob": 0.4642425781722354, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef calculate_days_to_apocalypse(R, C, x, y):\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(x, y, 0)])\n    visited = set()\n    while queue:\n        i, j, days = queue.popleft()\n        if (i, j) in visited or i < 0 or i >= R or", "gpt-3.5-turbo_prob": 0.5357574218277645}
{"id": "1121", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    time = input().split(':')\n    h1, m1 = map(int, time)\n    h2, m2 = 0, 0\n    if m1 % 5 == 0:\n        h2 = h1\n        m2 = m1\n    else:\n        m2 = m1 + 5\n        if m2 > 59:\n            h2 = h1 +", "llama3.1-8b-instruct_prob": 0.42819573343012973, "gpt-3.5-turbo_response": "```python\nfrom math import fabs\ndef min_angle(hour, minute):\n    angle = fabs(30*hour - (11/2)*minute)\n    return min(angle, 360-angle)\n\ndef chef_jump_time(T, times):\n    result = []\n    for time in times:\n        hour, minute = map(int, time.split(':'))\n        result.append(f\"{int(min_angle(hour, minute))} degree\")\n    return result\n```", "gpt-3.5-turbo_prob": 0.5718042665698703}
{"id": "1122", "llama3.1-8b-instruct_response": "n = int(input())\nsum = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        sum += 2 * i ** 2\n    else:\n        sum += i ** 2\nprint('Ravi' if sum % 2 == 0 else 'Jhon')", "llama3.1-8b-instruct_prob": 0.5307286132901567, "gpt-3.5-turbo_response": "```python\nn = int(input())\nsum_of_series = n + (n*(n+1))\nif sum_of_series % 2 == 0:\n    print(\"Ravi\")\nelse:\n    print(\"Jhon\")\n```", "gpt-3.5-turbo_prob": 0.46927138670984325}
{"id": "1123", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            visited[i] = True\n            while stack", "llama3.1-8b-instruct_prob": 0.4193746321235845, "gpt-3.5-turbo_response": "from collections import defaultdict\ndef find_fast_roads(N, M, roads, Q, queries):\n    graph = defaultdict(list)\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    for query in queries:\n        if query[1] in graph[query[0]]:\n            print(\"YO\")\n        else:\n            print(\"NO\")", "gpt-3.5-turbo_prob": 0.5806253678764155}
{"id": "1124", "llama3.1-8b-instruct_response": "def max_creatures(N, P, Q, A):\n    A.sort()\n    i = 0\n    while i < N:\n        if A[i] <= P:\n            P -= A[i]\n            i += 1\n        elif A[i] - 1 <= P and (A[i] - 1) % 2 == 0 and Q >= (A[i] - 1) // 2:\n            P -= A[i]\n            Q -= (A", "llama3.1-8b-instruct_prob": 0.4155589611278966, "gpt-3.5-turbo_response": "```python\ndef max_creatures_to_pay_back(T, cases):\n    results = []\n    for case in cases:\n        N, P, Q = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        one_rupee_coins = min(P, sum(1 for amount in A if amount <= 1))\n        two_rupee_coins = min(Q, sum(1 for amount in A if amount > 1 and", "gpt-3.5-turbo_prob": 0.5844410388721034}
{"id": "1125", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    r, c = map(int, input().split())\n    print(r * c)", "llama3.1-8b-instruct_prob": 0.4999999970702539, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    print(R * C)\n```", "gpt-3.5-turbo_prob": 0.5000000029297461}
{"id": "1126", "llama3.1-8b-instruct_response": "def max_regions(n):\n    return str(2 + n + (n * (n - 1)) // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_regions(n))", "llama3.1-8b-instruct_prob": 0.5774202675658806, "gpt-3.5-turbo_response": "```python\ndef max_regions(n):\n    return 2 * n**2 - n + 2\n```", "gpt-3.5-turbo_prob": 0.42257973243411934}
{"id": "1127", "llama3.1-8b-instruct_response": "def format_name(name):\n    return ' '.join([part.capitalize() if i == len(name) - 1 else f\"{part[0].upper()}. \" for i, part in enumerate(name.split())])\n\nt = int(input())\nfor _ in range(t):\n    name = input()\n    print(format_name(name))", "llama3.1-8b-instruct_prob": 0.4873632216737571, "gpt-3.5-turbo_response": "```python\ndef format_name(name):\n    parts = name.split()\n    formatted_name = parts[-1].capitalize()\n    for part in parts[:-1]:\n        formatted_name += \" \" + part[0].capitalize() + \".\"\n    return formatted_name\nt = int(input())\nfor _ in range(t):\n    name = input()\n    print(format_name(name))\n```", "gpt-3.5-turbo_prob": 0.5126367783262429}
{"id": "1128", "llama3.1-8b-instruct_response": "def find_balance_point():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        nums = list(map(int, input().split()))\n        left_sum = 0\n        for i in range(n):\n            right_sum = sum(nums[:i] + nums[i+1:])\n            if left_sum == right_sum:\n                print(i)\n                break\n            left_sum += nums[i]\n        else:\n            print(-1)\n\nfind_balance_point()", "llama3.1-8b-instruct_prob": 0.5542996295735673, "gpt-3.5-turbo_response": "```python\ndef find_balance_point(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1\n```", "gpt-3.5-turbo_prob": 0.44570037042643273}
{"id": "1129", "llama3.1-8b-instruct_response": "import math\nimport sys\n\nmod = 10**9 + 7\n\ndef power(x, y):\n    res = 1\n    while y:\n        if y & 1:\n            res = (res * x) % mod\n        x = (x * x) % mod\n        y >>= 1\n    return res\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    return (math.factorial(n) * power(math", "llama3.1-8b-instruct_prob": 0.419374638312112, "gpt-3.5-turbo_response": "```python\ndef ways_to_construct_love_graph(N, M):\n    return pow(N, M, 10**9 + 7)\n\nT = 1\ntest_cases = [(2, 1)]\nfor N, M in test_cases:\n    print(ways_to_construct_love_graph(N, M))\n```", "gpt-3.5-turbo_prob": 0.580625361687888}
{"id": "1130", "llama3.1-8b-instruct_response": "def solve():\n    n, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    at_risk = sum(1 for x in a if x <= 9 or x >= 80)\n    not_at_risk = n - at_risk\n    days = (at_risk + d - 1) // d + (not_at_risk + d - 1) // d\n    print(days)\n\nt = int(input())\n", "llama3.1-8b-instruct_prob": 0.5316112924115585, "gpt-3.5-turbo_response": "```python\ndef smallest_number_of_days(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, D = map(int, case[0].split())\n        ages = list(map(int, case[1].split()))\n        at_risk = sum(1 for age in ages if age >= 80 or age <= 9)\n        not_at_risk = N - at_risk\n        days = (at_risk + D - 1) //", "gpt-3.5-turbo_prob": 0.4683887075884416}
{"id": "1131", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    ans = [num for num in sorted(freq) if freq[num] > k]\n    print(*ans)", "llama3.1-8b-instruct_prob": 0.34967859837005605, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = Counter(arr)\n    result = [num for num, f in freq.items() if f > K]\n    print(*sorted(result))\n```", "gpt-3.5-turbo_prob": 0.6503214016299439}
{"id": "1132", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 1000000007\n    N = int(input())\n    ans = 1\n    for i in range(1, N + 1):\n        ans = (ans * i) % MOD\n    for i in range(1, N):\n        ans = (ans * (2 * i)) % MOD\n    print(ans)\n\nT = int(input())\nfor _ in range(T):\n    solve()", "llama3.1-8b-instruct_prob": 0.48955655047698204, "gpt-3.5-turbo_response": "```python\ndef count_valid_sequences(N):\n    return pow(2, N, 10**9 + 7) * (N * 2 - 1) % (10**9 + 7)\n```", "gpt-3.5-turbo_prob": 0.510443449523018}
{"id": "1133", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = a[0]\n    cost = 0\n    for i in range(1, n):\n        cost += (a[i] - a[i - 1]) // l + 1\n    print(l, cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5585010991447974, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_length = max(A)\n    total_cost = max_length + (N - 1)\n    print(max_length, total_cost)\n```", "gpt-3.5-turbo_prob": 0.44149890085520255}
{"id": "1134", "llama3.1-8b-instruct_response": "def daario_naharis(nations, dragon_help):\n    army = 0\n    for i in range(min(dragon_help, len(nations))):\n        army += nations[i]\n    for i in range(min(dragon_help, len(nations)), len(nations)):\n        army += nations[i] - max(0, nations[i] // 2)\n    for i in range(len(nations)):\n        if army <= 0:\n            return 'DEFEAT'\n        army -=", "llama3.1-8b-instruct_prob": 0.49999999999999994, "gpt-3.5-turbo_response": "```python\ndef conquer_nations(T, cases):\n    results = []\n    for case in cases:\n        N, M = map(int, case[0].split())\n        armies = list(map(int, case[1].split()))\n        total_army = 0\n        for i in range(M):\n            total_army += armies[i]\n        for i in range(M, N):\n            total_army -= max(armies[i] // 2, 0)\n            if", "gpt-3.5-turbo_prob": 0.5}
{"id": "1135", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    ans = []\n    for i in range(1, n - k):\n        ans.append(i)\n    for i in range(n - k + 1, n + 1):\n        ans.append(i)\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5490605829116852, "gpt-3.5-turbo_response": "from collections import deque\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    result = [0] * N\n    remaining = deque(range(1, N + 1))\n    result[0] = remaining[K]\n    remaining.remove(result[0])\n    for i in range(1, N):\n        if i <= K:\n            result[i] = remaining[K - i]\n            remaining.remove(result[i])\n        else", "gpt-3.5-turbo_prob": 0.45093941708831475}
{"id": "1136", "llama3.1-8b-instruct_response": "def max_sweetness(test_cases):\n    for case in test_cases[1:]:\n        n, k = map(int, case.split())\n        if n == 1:\n            print(k)\n        else:\n            print((n // 2) * k + (n % 2) * k)\n\ntest_cases = ['2', '1 2', '4 3']\nmax_sweetness(test_cases)", "llama3.1-8b-instruct_prob": 0.5490605868259999, "gpt-3.5-turbo_response": "def max_sweetness(T, cases):\n    result = []\n    for case in cases:\n        N, K = map(int, case.split())\n        if N % 2 == 0:\n            result.append(N * (K // 2))\n        else:\n            result.append((N // 2 + 1) * K)\n    return result", "gpt-3.5-turbo_prob": 0.4509394131740001}
{"id": "1137", "llama3.1-8b-instruct_response": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        prices = list(map(int, input().split()))\n        target = 20 * 100\n        prices.sort()\n        left, right = 0, n - 1\n        while left < right:\n            if prices[left] + prices[right] == target:\n                print(\"Accepted\")\n                break\n            elif prices[left] + prices[right] < target:\n                left +=", "llama3.1-8b-instruct_prob": 0.562972500029313, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    prices = list(map(int, input().split()))\n    age = 20\n    target = age * 100\n    found = False\n    for i in range(N):\n        for j in range(i+1, N):\n            if prices[i] + prices[j] == target:\n                found = True\n                break\n        if found:\n            break\n    if found:\n       ", "gpt-3.5-turbo_prob": 0.43702749997068707}
{"id": "1138", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        if a[i] > i + 1:\n            ans += max(i + 1 - a[i], a[i + 1] - i - 1)\n            a[i + 1] = max(a[i + 1], i + 2)\n    print(ans)\n\nt = int(input())\n", "llama3.1-8b-instruct_prob": 0.5648492494907726, "gpt-3.5-turbo_response": "```python\ndef minimal_steps(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N = int(cases[i])\n        A = list(map(int, cases[i+1].split()))\n        steps = 0\n        for j in range(N-1, -1, -1):\n            if A[j] == j:\n                continue\n            else:\n                steps += j - A[j]\n                A[:j+1", "gpt-3.5-turbo_prob": 0.43515075050922736}
{"id": "1139", "llama3.1-8b-instruct_response": "def solve(S):\n    n = len(S)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, min(i + 1, 26) + 1):\n            dp[i] += dp[i - j]\n    return 'YES' if dp[n] % 2 == 0 else 'NO'\n\nt = int(input())\n", "llama3.1-8b-instruct_prob": 0.518648375233383, "gpt-3.5-turbo_response": "```python\ndef numDecodings(s):\n    if s[0] == \"0\":\n        return 0\n    dp = [0] * (len(s) + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, len(s) + 1):\n        if 1 <= int(s[i-1:i]) <= 9:\n            dp[i] += dp[i-1]\n        if 10", "gpt-3.5-turbo_prob": 0.48135162476661686}
{"id": "114", "llama3.1-8b-instruct_response": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    p = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        heapq.heappush(p, (-x, y))\n    ans = 0\n    i = 0\n    while i < n:\n        mx = 0\n        while p and -p[", "llama3.1-8b-instruct_prob": 0.49104546869529403, "gpt-3.5-turbo_response": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    m = int(input())\n    heroes = [list(map(int, input().split())) for _ in range(m)]\n    heroes.sort(reverse=True)\n    days = 0\n    power_index = 0\n    for power, endurance in heroes:\n        while power_index < n and monsters[power_index] > power:\n", "gpt-3.5-turbo_prob": 0.5089545313047059}
{"id": "1140", "llama3.1-8b-instruct_response": "def solve(p, idx):\n    n = 2**p - 1\n    ans = 0\n    for i in range(p):\n        if idx & (1 << i):\n            ans = n - (1 << i) + 1\n            break\n        n -= 1 << i\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    p, idx = map(int, input().split())\n    print(solve(p, idx))", "llama3.1-8b-instruct_prob": 0.4686702603164358, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    p, idx = map(int, input().split())\n    print((2 * idx) % (2 ** p))\n```", "gpt-3.5-turbo_prob": 0.5313297396835641}
{"id": "1141", "llama3.1-8b-instruct_response": "M = input()\nT = int(input())\nfor _ in range(T):\n    S = input()\n    D = str.maketrans(M, 'abcdefghijklmnopqrstuvwxyz')\n    print(S.translate(D).replace('_', ' '))", "llama3.1-8b-instruct_prob": 0.43702750770907395, "gpt-3.5-turbo_response": "def translate_bytelandian(T, M, sentences):\n    mapping = {M[i]: chr(97 + i) for i in range(26)}\n    result = []\n    for sentence in sentences:\n        translated = ''.join(mapping.get(char, char) for char in sentence)\n        result.append(translated.replace('_', ' '))\n    return result", "gpt-3.5-turbo_prob": 0.562972492290926}
{"id": "1142", "llama3.1-8b-instruct_response": "def find_ranks(merchants):\n    ranks = []\n    for i, wealth in enumerate(merchants):\n        rank = 1\n        for wealth_in_hall in merchants[:i]:\n            if wealth_in_hall < wealth:\n                rank += 1\n        ranks.append(str(rank))\n    return ranks\n\nN = int(merchants[0])\nmerchants = [int(x) for x in merchants[1:]]\nprint(find_ranks(merchants))", "llama3.1-8b-instruct_prob": 0.475435020147416, "gpt-3.5-turbo_response": "```python\nN = int(input())\nwealth = [int(input()) for _ in range(N)]\nranks = []\nseen = set()\nfor w in wealth:\n    rank = 1\n    for s in seen:\n        if s < w:\n            rank += 1\n    ranks.append(rank)\n    seen.add(w)\nprint(*ranks, sep='\\n')\n```", "gpt-3.5-turbo_prob": 0.524564979852584}
{"id": "1143", "llama3.1-8b-instruct_response": "def min_sum(n):\n    return (n + 1) // 2 + n // ((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_sum(n))", "llama3.1-8b-instruct_prob": 0.6448881524207282, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            ans = i + n//i\n        i += 1\n    print(ans-2)", "gpt-3.5-turbo_prob": 0.3551118475792719}
{"id": "1145", "llama3.1-8b-instruct_response": "def solve(X):\n    steps = 0\n    n = 1\n    while n < X:\n        if n + 2 * (steps + 1) <= X:\n            n += 2 * (steps + 1)\n            steps += 1\n        elif n - 2 * (steps + 1) >= 1:\n            n -= 2 * (steps + 1)\n            steps += 1\n        else:\n            return '0'\n   ", "llama3.1-8b-instruct_prob": 0.4855522366518303, "gpt-3.5-turbo_response": "```python\ndef knight_moves(T, destinations):\n    results = []\n    for dest in destinations:\n        if dest % 2 == 0 or dest == 1:\n            results.append('0')\n        else:\n            results.append('2' + '1' * ((dest-1)//2))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5144477633481697}
{"id": "1146", "llama3.1-8b-instruct_response": "```python\nimport heapq\n\nn, d = map(int, input().split())\nsticks = []\nfor _ in range(n):\n    sticks.append(int(input()))\n\nsticks.sort()\n\npairs = 0\ni, j = 0, n - 1\nwhile i < j:\n    if sticks[j] - sticks[i] <= d:\n        pairs += 1\n        i += 1\n        j -= 1\n    else:\n        j -= 1\n\nprint(pairs)\n", "llama3.1-8b-instruct_prob": 0.6028925139185056, "gpt-3.5-turbo_response": "n, d = map(int, input().split())\nL = [int(input()) for _ in range(n)]\nL.sort()\npairs = 0\nfor i in range(n-1):\n    if L[i+1] - L[i] <= d:\n        pairs += 1\n        i += 1\nprint(pairs)", "gpt-3.5-turbo_prob": 0.3971074860814944}
{"id": "1147", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    odd_count = 0\n    for count in freq.values():\n        if count % 2 != 0:\n            odd_count += 1\n    print(odd_count - 1)", "llama3.1-8b-instruct_prob": 0.44410528224963053, "gpt-3.5-turbo_response": "```python\ndef min_chars_to_make_palindrome(s):\n    from collections import Counter\n    count = Counter(s)\n    odd_count = sum(1 for c in count.values() if c % 2 != 0)\n    return max(0, odd_count - 1)\n```", "gpt-3.5-turbo_prob": 0.5558947177503695}
{"id": "1148", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    scores = [list(map(int, input().split())) for _ in range(3)]\n    scores.sort(key=lambda x: x[0])\n    if scores[1][0] > scores[0][0] and scores[1][1] > scores[0][1] and scores[1][2] > scores[0][2] and scores[2][0] > scores[1][0", "llama3.1-8b-instruct_prob": 0.4999999944860235, "gpt-3.5-turbo_response": "```python\ndef is_order_possible(s1, s2, s3):\n    return \"yes\" if (s1[0] < s2[0] and s1[1] < s2[1] and s1[2] < s2[2] and s2[0] < s3[0] and s2[1] < s3[1] and s2[2] < s3[2]) or (s1[0", "gpt-3.5-turbo_prob": 0.5000000055139765}
{"id": "1149", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if s[i] == '?':\n            if i % 2 == 0:\n                dp[i + 1] = dp[i]\n            else:\n                dp[i + 1] = (dp[i] * 25) % 10000009\n        else:\n", "llama3.1-8b-instruct_prob": 0.47687936716661133, "gpt-3.5-turbo_response": "```python\ndef count_palindrome_ways(s):\n    mod = 10000009\n    count = 1\n    for char in set(s):\n        count = (count * (s.count(char) + 1)) % mod\n    return count\n```", "gpt-3.5-turbo_prob": 0.5231206328333886}
{"id": "1150", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    i = 1\n    while n > 0:\n        if i * i <= n:\n            n -= i * i\n            count += 1\n        i += 1\n    print(count)", "llama3.1-8b-instruct_prob": 0.43201141234366314, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    while n > 0:\n        root = int(n ** 0.5)\n        n -= root ** 2\n        count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.5679885876563369}
{"id": "1151", "llama3.1-8b-instruct_response": "def dfs(graph, node, visited):\n    visited.add(node)\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\ndef find_markets(n, roads):\n    graph = {i: set() for i in range(n)}\n    for a, b in roads:\n        graph[a].add(b)\n        graph[b].add(a)\n    visited = set()\n    markets = 0\n    for i in range(n):\n        if i", "llama3.1-8b-instruct_prob": 0.5000000030942637, "gpt-3.5-turbo_response": "def count_markets(N, M, roads):\n    return N - M + 1", "gpt-3.5-turbo_prob": 0.49999999690573627}
{"id": "1152", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\nn = int(input())\nrecipes = defaultdict(list)\nfor _ in range(n):\n    s, v = input().split()\n    recipes[s[:len(s)-len(s).split('-')[-1]]].append((s, int(v)))\n\nq = int(input())\nfor _ in range(q):\n    s = input()\n    for recipe in recipes.get(s, []):\n        print(recipe[0])\n        break\n    else:\n        print('NO')\n", "llama3.1-8b-instruct_prob": 0.5000000032468884, "gpt-3.5-turbo_response": "recipes = {}\nfor _ in range(int(input())):\n    recipe, priority = input().split()\n    recipes[recipe] = int(priority)\n\nfor _ in range(int(input())):\n    query = input()\n    max_priority = -float('inf')\n    max_recipe = \"NO\"\n    for recipe, priority in recipes.items():\n        if recipe.startswith(query) and priority > max_priority:\n            max_priority = priority\n            max_recipe = recipe\n    print(max_recipe)", "gpt-3.5-turbo_prob": 0.49999999675311163}
{"id": "1153", "llama3.1-8b-instruct_response": "def qpow(a, b, p):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % p\n        a = a * a % p\n        b >>= 1\n    return res\n\ndef solve():\n    n, m, q, k = map(int, input().split())\n    if k == 1:\n        print(min(q, m))\n        return\n    if q == 1:\n        print((", "llama3.1-8b-instruct_prob": 0.46927138670984325, "gpt-3.5-turbo_response": "```python\ndef count_sequences(T, cases):\n    result = []\n    for case in cases:\n        n, m, q_r, k = map(int, case.split())\n        result.append((m ** (n - 1)) % (10**9 + 7))\n    return result\n```", "gpt-3.5-turbo_prob": 0.5307286132901567}
{"id": "1154", "llama3.1-8b-instruct_response": "n = int(input())\nfriends = set(map(int, input().split()))\nplayers = set(map(int, input().split()))\nprint(*players - friends)", "llama3.1-8b-instruct_prob": 0.44049596191806006, "gpt-3.5-turbo_response": "# Solution\n\ndef find_imposter(N, friends_names, game_names):\n    friends_set = set(map(int, friends_names.split()))\n    game_set = set(map(int, game_names.split()))\n    imposter = game_set.difference(friends_set)\n    return imposter.pop()", "gpt-3.5-turbo_prob": 0.5595040380819399}
{"id": "1155", "llama3.1-8b-instruct_response": "def max_regions(regions):\n    regions.sort(key=lambda x: x[2])\n    max_regions = 0\n    left = 0\n    right = len(regions) - 1\n    while left <= right:\n        if regions[left][2] < regions[right][2]:\n            left += 1\n        elif regions[left][3] < regions[right][3]:\n            right -= 1\n        else:\n            max_regions += 1\n            left += 1", "llama3.1-8b-instruct_prob": 0.3924383224350158, "gpt-3.5-turbo_response": "```python\ndef max_non_overlapping_regions(T, regions):\n    regions.sort(key=lambda x: (x[2], x[0]))\n    count = 1\n    end = regions[0][1]\n    for i in range(1, T):\n        if regions[i][3] < end:\n            end = regions[i][1]\n        elif regions[i][2] > end:\n            count += 1\n            end = regions[i][1]\n    return count\n", "gpt-3.5-turbo_prob": 0.6075616775649841}
{"id": "1156", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if abs(n) < 10:\n        print(\"Thanks for helping Chef!\")\n    else:\n        print(\"-1\")", "llama3.1-8b-instruct_prob": 0.4457003827174991, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 10:\n        print(\"Thanks for helping Chef!\")\n    else:\n        print(\"-1\")", "gpt-3.5-turbo_prob": 0.5542996172825008}
{"id": "1157", "llama3.1-8b-instruct_response": "import math\nfrom collections import defaultdict\n\ndef solve():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n           ", "llama3.1-8b-instruct_prob": 0.4124939733998271, "gpt-3.5-turbo_response": "```python\nfrom itertools import accumulate\n\ndef expected_hearts(N, M, K, hearts):\n    total_rectangles = N * (N + 1) * M * (M + 1) // 4\n    heart_positions = [0] * (N + 1)\n    for heart in hearts:\n        heart_positions[heart % N] += 1\n    heart_positions = list(accumulate(heart_positions))\n    expected_hearts = 0\n    for i", "gpt-3.5-turbo_prob": 0.587506026600173}
{"id": "1158", "llama3.1-8b-instruct_response": "def count_ciel_numbers(menu_list):\n    def is_ciel_number(num):\n        num_str = str(num)\n        if not all(digit in '47' for digit in num_str):\n            return False\n        digit_counts = {digit: num_str.count(digit) for digit in '47'}\n        return digit_counts['4'] >= digit_counts['7']\n\n    count = 0\n    for menu in menu_list[1:]:\n        price = int(menu.split()[1])\n       ", "llama3.1-8b-instruct_prob": 0.4754350235789552, "gpt-3.5-turbo_response": "```python\ndef count_ciel_numbers(N, menus):\n    def is_ciel_number(num):\n        count_8 = num.count('8')\n        count_5 = num.count('5')\n        count_3 = num.count('3')\n        return count_8 >= count_5 >= count_3 and all(digit in ['4', '7', '8', '5', '3'] for digit in num)\n\n    count = 0\n    for menu in menus:\n", "gpt-3.5-turbo_prob": 0.5245649764210448}
{"id": "1159", "llama3.1-8b-instruct_response": "def find_winner():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        count = {}\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        shanky_char = None\n        anku_char = None\n        for char in s:\n            if count[char] == 1:\n                if shanky_char is None:\n                    shanky_char = char", "llama3.1-8b-instruct_prob": 0.5585011023916858, "gpt-3.5-turbo_response": "```python\ndef find_winner(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    shanky_char = ''\n    anku_char = ''\n    for char in s:\n        if char_count[char] == 1:\n            if char > shanky_char:\n                shanky_char = char\n        if char_count[char] == 1:\n", "gpt-3.5-turbo_prob": 0.4414988976083141}
{"id": "116", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    s = sum(a)\n    x = 0\n    for i in a:\n        x ^= i\n\n    if s == 2 * x:\n        print(0)\n        continue\n\n    if s < 2 * x:\n        print(2)\n        print(x, x)\n    else:\n        print(1)\n        print(x)", "llama3.1-8b-instruct_prob": 0.4999999870124463, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor_sum = 0\n    for num in a:\n        xor_sum ^= num\n    if xor_sum == 0:\n        print(0)\n    elif n < 3:\n        print(3 - n)\n        print(\"0 \" * (3 - n))\n    else:\n        print(1)\n        print(xor", "gpt-3.5-turbo_prob": 0.5000000129875537}
{"id": "1161", "llama3.1-8b-instruct_response": "def election_day(snakes_and_mongooses):\n    snakes = snakes_and_mongooses.count('s')\n    mongooses = snakes_and_mongooses.count('m')\n    if snakes > mongooses:\n        return 'snakes'\n    elif snakes < mongooses:\n        return 'mongooses'\n    else:\n        return 'tie'", "llama3.1-8b-instruct_prob": 0.4642425802368963, "gpt-3.5-turbo_response": "```python\ndef find_winner(s):\n    snakes = s.count('s')\n    mongooses = s.count('m')\n    if snakes > mongooses:\n        return \"snakes\"\n    elif snakes < mongooses:\n        return \"mongooses\"\n    else:\n        return \"tie\"\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(find_winner(s))\n```", "gpt-3.5-turbo_prob": 0.5357574197631036}
{"id": "1162", "llama3.1-8b-instruct_response": "def lucky_lucky_number(n):\n    if n % 7 == 0 and n % 4 == 0:\n        return 0\n    elif n % 7 == 0:\n        return -1\n    elif n % 4 == 0:\n        return n // 4\n    else:\n        return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(lucky_lucky_number(n))", "llama3.1-8b-instruct_prob": 0.3881471960100522, "gpt-3.5-turbo_response": "```python\ndef count_lucky_digits(N):\n    if N < 4 or N == 6 or N == 8 or N == 9 or N == 10 or N == 12 or N == 13:\n        return -1\n    count_4 = (N - (N % 7)) // 7\n    if N % 7 != 0:\n        count_4 += 1\n    return count_4\n```", "gpt-3.5-turbo_prob": 0.6118528039899478}
{"id": "1163", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    goals = list(map(int, input().split()))\n\n    if n < 2:\n        print(\"UNFIT\")\n    else:\n        max_diff = goals[n-1] - goals[0]\n        for i in range(1, n-1):\n            max_diff = max(max_diff, goals[i] - goals[i-1])\n        print(max_diff)", "llama3.1-8b-instruct_prob": 0.5831098124814078, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    goals = list(map(int, input().split()))\n    max_diff = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            diff = goals[j] - goals[i]\n            if diff > max_diff:\n                max_diff = diff\n    if max_diff == 0:\n        print(\"UNFIT\")\n    else:\n        print", "gpt-3.5-turbo_prob": 0.41689018751859225}
{"id": "1164", "llama3.1-8b-instruct_response": "```python\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef solve():\n    P, S = map(int, input().split())\n    scores = []\n    for _ in range(P):\n        scores.append(list(map(int, input().split())))\n        scores.append(list(map(int, input().split())))\n    scores = [list(x) for x in zip(*scores)]\n    scores.sort(key=lambda x: (x[1::2], x[::2]))\n    for i in", "llama3.1-8b-instruct_prob": 0.43080211149087466, "gpt-3.5-turbo_response": "```python\nfrom operator import itemgetter\nP, S = map(int, input().split())\nproblems = []\nfor i in range(P):\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    n = sum(1 for j in range(S-1) if NS[j] > NS[j+1])\n    problems.append((n, i+1))\nproblems.sort(key=itemgetter(0, 1))\nprint(*[problem", "gpt-3.5-turbo_prob": 0.5691978885091253}
{"id": "1165", "llama3.1-8b-instruct_response": "def half_birthday(day, month):\n    months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if", "llama3.1-8b-instruct_prob": 0.2776902990388098, "gpt-3.5-turbo_response": "```python\nfrom datetime import datetime, timedelta\nT = int(input())\nfor _ in range(T):\n    d, m = input().split()\n    birth_date = datetime(2022, datetime.strptime(m, '%B').month, int(d))\n    half_birthday = birth_date + timedelta(days=182)\n    print(half_birthday.strftime('%d %B').lower())\n```", "gpt-3.5-turbo_prob": 0.7223097009611901}
{"id": "1166", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        queries.append(int(input()))\n\n    prefix_min = [0] * (n + 1)\n    for i in range(n):\n        prefix_min[i + 1] = min(prefix_min[i], a[i])\n\n    suffix_min = [0] * (n +", "llama3.1-8b-instruct_prob": 0.5558947281443883, "gpt-3.5-turbo_response": "```python\ndef count_subarrays(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        min_val = arr[i]\n        for j in range(i, len(arr)):\n            min_val = min(min_val, arr[j])\n            if min_val == k:\n                count += 1\n    return count\n\nN = int(input())\narr = list(map(int, input().split()))\nQ = int(input())\nfor _ in range(Q):\n    K = int", "gpt-3.5-turbo_prob": 0.4441052718556116}
{"id": "1167", "llama3.1-8b-instruct_response": "def solve(S):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in S:\n        if char in vowels:\n            continue\n        elif char.isupper():\n            result.append('.' + char.lower())\n        else:\n            result.append('.' + char)\n    return ''.join(result)", "llama3.1-8b-instruct_prob": 0.6276989920988333, "gpt-3.5-turbo_response": "```python\ndef modify_string(s):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char not in vowels:\n            if char.isupper():\n                result += \".\" + char.lower()\n            else:\n                result += \".\" + char\n    return result\n```", "gpt-3.5-turbo_prob": 0.3723010079011666}
{"id": "1168", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        good = input()\n        k = int(input())\n        n = len(s)\n        ans = set()\n        for i in range(n):\n            for j in range(i, n):\n                if sum(1 for p in range(i, j+1) if good[ord(s[p])-97] == 'b') <= k:\n                    ans", "llama3.1-8b-instruct_prob": 0.4754350208219669, "gpt-3.5-turbo_response": "def count_good_substrings(s, good_bad, k):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        bad_count = 0\n        for j in range(i, n):\n            if good_bad[ord(s[j]) - ord('a')] == 'b':\n                bad_count += 1\n            if bad_count > k:\n                break\n            count += 1\n    return count", "gpt-3.5-turbo_prob": 0.5245649791780331}
{"id": "1169", "llama3.1-8b-instruct_response": "def calculate_flames(name1, name2):\n    name1 = name1.replace(\" \", \"\").lower()\n    name2 = name2.replace(\" \", \"\").lower()\n    flames = \"FLAMES\"\n    common_letters = set(name1) & set(name2)\n    remaining_letters = sum([name1.count(letter) + name2.count(letter) for letter in common_letters])\n    for _ in range(remaining_letters):\n        flames = flames[1:] + flames[0]\n    return", "llama3.1-8b-instruct_prob": 0.45379911955408303, "gpt-3.5-turbo_response": "def calculate_flames(name1, name2):\n    name1_set = set(name1)\n    name2_set = set(name2)\n    common_letters = name1_set.intersection(name2_set)\n    remaining_letters_count = len(name1) + len(name2) - 2 * len(common_letters)\n    flames = ['F', 'L', 'A', 'M', 'E', 'S']\n    result_index = (remaining_letters_count % len(flames)) - 1\n", "gpt-3.5-turbo_prob": 0.5462008804459169}
{"id": "117", "llama3.1-8b-instruct_response": "n, m = map(int, input().split())\n\nrows = []\nfor _ in range(n):\n    rows.append(list(map(int, input().split())))\n\ncols = []\nfor _ in range(m):\n    cols.append(list(map(int, input().split())))\n\nrow_map = {row[0]: row for row in rows}\n\nfor col in cols:\n    num = col[0]\n    row = row_map[num]\n    for i in range(1, m):\n        print(row[i", "llama3.1-8b-instruct_prob": 0.4768793564984784, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    rows = [list(map(int, input().split())) for _ in range(n)]\n    cols = [list(map(int, input().split())) for _ in range(m)]\n    table = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            table[i][cols[j].index(rows[i", "gpt-3.5-turbo_prob": 0.5231206435015217}
{"id": "1170", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    distances = list(map(int, input().split()))\n    result = []\n    for d in distances:\n        if d % k == 0:\n            result.append('1')\n        else:\n            result.append('0')\n    print(''.join(result))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5435380270570522, "gpt-3.5-turbo_response": "```python\ndef chef_step_traversal(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K = case[0], case[1]\n        distances = case[2:]\n        result = ''\n        for distance in distances:\n            if distance % K == 0:\n                result += '1'\n            else:\n                result += '0'\n        results.append(result)\n    return results\n```", "gpt-3.5-turbo_prob": 0.45646197294294777}
{"id": "1172", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    s = input()\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if s[i] == '4':\n                dp[i + 1][j + (n - i - 1)] += dp", "llama3.1-8b-instruct_prob": 0.40007540323136803, "gpt-3.5-turbo_response": "```python\ndef count_balanced_strings(s):\n    n = len(s)\n    count_4 = s.count('4')\n    count_7 = n - count_4\n    if count_4 != count_7:\n        return 0\n    return pow(2, count_4, 10**9 + 7)\n\nT = int(input())\nfor _ in range(T):\n    s = input().strip()\n    print(count_balanced_strings(s))\n```", "gpt-3.5-turbo_prob": 0.599924596768632}
{"id": "1173", "llama3.1-8b-instruct_response": "```python\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    pre = [0] * (n + 1)\n    for i in range(n):\n        pre[i + 1] = pre[i] ^ a[i]\n    mp = {}\n    for i in range(n):\n        if pre[i + 1] in mp:\n            ans += mp[pre[i + 1]]\n        if pre", "llama3.1-8b-instruct_prob": 0.5075414851718913, "gpt-3.5-turbo_response": "```python\ndef count_triplets(N, arr):\n    xor_prefix = [0] * (N + 1)\n    for i in range(1, N + 1):\n        xor_prefix[i] = xor_prefix[i - 1] ^ arr[i - 1]\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            if xor_prefix[i - 1", "gpt-3.5-turbo_prob": 0.49245851482810876}
{"id": "1174", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        l, r = i + 1, n - 1\n        while l < r:\n            if a[l] + a[r] > a[i] * 2:\n                r -= 1\n            else:\n                ans += r -", "llama3.1-8b-instruct_prob": 0.48736322150923944, "gpt-3.5-turbo_response": "```python\ndef count_good_triplets(N, A):\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                P = (A[i] << (int(A[j]).bit_length() + int(A[k]).bit_length() + 2)) + (A[j] << (int(A[k]).bit_length()", "gpt-3.5-turbo_prob": 0.5126367784907606}
{"id": "1175", "llama3.1-8b-instruct_response": "import math\nimport math\nimport math\n\ndef solve():\n    n = int(input())\n    r = math.ceil(n / 2)\n    s = n // 2\n    sum_odd = (r * (r + 1)) // 2\n    sum_even = (s * (s + 1)) // 2\n    lcm = (r * s) // math.gcd(r, s)\n    if lcm * max(sum_odd, sum_even) > max(sum", "llama3.1-8b-instruct_prob": 0.4698585813401436, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    sum_odd = (N+1)//2 * (N+1)//2\n    sum_even = N//2 * (N//2 + 1)\n    lcm_odd = math.ceil(sum_odd * math.acos(-1))\n    lcm_even = math.ceil(sum_even * math.acos(-1))\n    if lcm_odd > lcm_even:\n        print(\"YESS", "gpt-3.5-turbo_prob": 0.5301414186598564}
{"id": "1176", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    dp = [[False] * (n + 1) for _ in range(2)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        dp[i % 2][i] = dp[(i - 1) % 2][i - 1]\n        if i >= 2 and s[i - 1] == s[i -", "llama3.1-8b-instruct_prob": 0.46267352796346395, "gpt-3.5-turbo_response": "def can_print_string(s):\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    return abs(count_0 - count_1) == 1", "gpt-3.5-turbo_prob": 0.537326472036536}
{"id": "1177", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        import math\n        print(math.comb(n, k))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.477343228538689, "gpt-3.5-turbo_response": "from math import comb\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(comb(n, k))", "gpt-3.5-turbo_prob": 0.5226567714613111}
{"id": "1178", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if cnt < a[i]:\n            ans += 1\n            cnt += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5259399367975599, "gpt-3.5-turbo_response": "```python\ndef max_friends_join_party(T, cases):\n    results = []\n    for case in cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        max_friends = 0\n        for i in range(N):\n            if A[i] <= max_friends:\n                max_friends += 1\n        results.append(str(max_friends))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4740600632024402}
{"id": "1179", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    if n <= 3:\n        print(0)\n    else:\n        print((n - 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5144477633481698, "gpt-3.5-turbo_response": "def nice_swaps(T, cases):\n    results = []\n    for N in cases:\n        if N % 4 == 0 or N % 4 == 3:\n            results.append(N // 2 - 1)\n        else:\n            results.append(N // 2)\n    return results", "gpt-3.5-turbo_prob": 0.4855522366518303}
{"id": "118", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[i] * (j - i + 1) < x:\n            j += 1\n        if j - i > 0:\n            ans +=", "llama3.1-8b-instruct_prob": 0.3509066123303636, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    teams = 0\n    current_team = 0\n    for skill in a:\n        current_team += 1\n        if skill * current_team >= x:\n            teams += 1\n            current_team = 0\n    print(teams)\n```", "gpt-3.5-turbo_prob": 0.6490933876696365}
{"id": "1180", "llama3.1-8b-instruct_response": "def solve():\n    N, K, x, y = map(int, input().split())\n    dx, dy = 1, 1\n    for _ in range(K):\n        if x + dx > N or y + dy > N:\n            dx, dy = -dy, -dx\n        x += dx\n        y += dy\n        if x == N or y == N:\n            break\n    print(x, y)\n\nfor _ in range(int(input())):\n   ", "llama3.1-8b-instruct_prob": 0.5316112976387324, "gpt-3.5-turbo_response": "```python\ndef find_collision_point(N, K, x, y):\n    min_dist = min(x, y, N-x, N-y)\n    x += min_dist\n    y += min_dist\n    K -= min_dist\n    if K % 2 == 0:\n        print(x, y)\n    else:\n        if x == N:\n            print(N, N - K % 4)\n        elif y == N:\n            print(N - K % 4, N", "gpt-3.5-turbo_prob": 0.4683887023612677}
{"id": "1181", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = sum(int(digit) for digit in str(n))\n    print('Yes' if n % s == 0 else 'No')", "llama3.1-8b-instruct_prob": 0.6801816381125354, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N % sum(int(digit) for digit in str(N)) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```", "gpt-3.5-turbo_prob": 0.3198183618874645}
{"id": "1182", "llama3.1-8b-instruct_response": "def solve():\n    m = int(input())\n    ans = []\n    for a in range(1, m + 1):\n        if m % a == 0:\n            b = (a * (m // a) - m) // 2\n            if b >= a and m % (a * b) == 0:\n                ans.append(a)\n    print(len(ans))\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5133031641781844, "gpt-3.5-turbo_response": "```python\ndef find_interesting_numbers(T, test_cases):\n    result = []\n    for case in test_cases:\n        M = int(case)\n        K = M - 1\n        result.append(str(K))\n        for i in range(2, M + K + 1):\n            result.append(str(i))\n    return result\n```", "gpt-3.5-turbo_prob": 0.48669683582181555}
{"id": "1183", "llama3.1-8b-instruct_response": "```python\ndef count_occurrences_brute_force(arr, key, from_index):\n    count = 0\n    for i in range(from_index, len(arr)):\n        if arr[i] == key:\n            count += 1\n    return count\n\ndef count_occurrences_dp(arr, key, from_index, memo):\n    if from_index == len(arr):\n        return 0\n    if from_index in memo:\n        return memo[from_index]\n    if arr[from_index] == key", "llama3.1-8b-instruct_prob": 0.5111924318170809, "gpt-3.5-turbo_response": "def countOccurences(key, from_index):\n    if from_index == len(array):\n        return 0\n    if dp[from_index] is not None:\n        return dp[from_index]\n    if array[from_index] == key:\n        dp[from_index] = 1 + countOccurences(key, from_index + 1)\n    else:\n        dp[from_index] = countOccurences(key, from_index + 1)\n    return dp[from_index]\n\nt = int(input", "gpt-3.5-turbo_prob": 0.48880756818291915}
{"id": "1184", "llama3.1-8b-instruct_response": "import itertools\nimport sys\n\ndef solve():\n    n = int(input())\n    movies = {}\n    for _ in range(n):\n        m, t = input().split()\n        t = int(t)\n        if m not in movies:\n            movies[m] = []\n        movies[m].append(t)\n    movies = {m: sorted(t) for m, t in movies.items()}\n    prices = [25, 50, 75, 100]\n    max_profit = 0\n", "llama3.1-8b-instruct_prob": 0.4879544467793465, "gpt-3.5-turbo_response": "from collections import defaultdict\nfrom itertools import permutations\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    requests = defaultdict(list)\n    for _ in range(N):\n        m, t = input().split()\n        requests[t].append(m)\n\n    profits = []\n    for perm in permutations(['A', 'B', 'C', 'D']):\n        profit = 0\n        prices = {'12': 100, '3': 75, '6", "gpt-3.5-turbo_prob": 0.5120455532206535}
{"id": "1185", "llama3.1-8b-instruct_response": "def expected_sum_of_page_numbers():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n = int(input())\n        pages_without_number = list(map(int, input().split()))\n        torn_leaves = int(input())\n        total_pages = 2 * n\n        pages_without_number = set(pages_without_number)\n        total_sum = 0\n        for i in range(1, total_pages + 1):\n            if i % 2 == 1", "llama3.1-8b-instruct_prob": 0.3101245147939622, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    not_printed = list(map(int, input().split()[1:]))\n    leaves_torn = int(input())\n    total_pages = n + len(not_printed)\n    expected_sum = (total_pages * (total_pages + 1) / 2) - sum(not_printed)\n    print(\"{:.4f}\".format(expected_sum))\n```", "gpt-3.5-turbo_prob": 0.6898754852060379}
{"id": "1186", "llama3.1-8b-instruct_response": "def f(N, A, Q, k):\n    A.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += A[i]\n    for i in range(k, N):\n        ans += A[i] - 1\n    return ans\n\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nfor _ in range(Q):\n    k = int(input())\n    print(f(N, A, Q, k", "llama3.1-8b-instruct_prob": 0.47986269729244135, "gpt-3.5-turbo_response": "```python\ndef min_nimbdas_to_pay(N, A, Q, K_values):\n    A_sorted = sorted(A, reverse=True)\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + A_sorted[i]\n    result = []\n    for K in K_values:\n        total_nimbdas = prefix_sum[N]\n        total_nimbdas -= prefix_sum", "gpt-3.5-turbo_prob": 0.5201373027075586}
{"id": "1187", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    ans = 0\n    cnt = 1\n    i = m\n    while i <= n:\n        ans += 1\n        cnt = (cnt * (n // i - 1)) % 998244353\n        i *= m\n    print(ans, cnt)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5259399459039404, "gpt-3.5-turbo_response": "```python\ndef max_subset_size_and_ways(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = map(int, case.split())\n        max_size = min(N, M + 1)\n        ways = pow(2, max_size - 1, 998244353)\n        results.append((max_size, ways))\n    return results\n```", "gpt-3.5-turbo_prob": 0.47406005409605945}
{"id": "1188", "llama3.1-8b-instruct_response": "n = int(input())\nreports = list(map(int, input().split()))\nkillers = [i + 1 for i in range(n) if reports[i] == 0 or reports.count(reports[i]) == 1]\nprint(*sorted(killers))", "llama3.1-8b-instruct_prob": 0.4664359009745897, "gpt-3.5-turbo_response": "n = int(input())\nreporting_to = list(map(int, input().split()))\n\npotential_killers = [i+1 for i, r in enumerate(reporting_to) if r == 0]\nprint(*potential_killers)", "gpt-3.5-turbo_prob": 0.5335640990254104}
{"id": "1189", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + a[i]\n    ans = 0\n    for i in range(n):\n        total_sum = prefix[n] - (prefix[i] + prefix[n - i - 1])\n        if total_sum %", "llama3.1-8b-instruct_prob": 0.4642425838459614, "gpt-3.5-turbo_response": "```python\ndef solve(N, A):\n    prefix_sum = [0] * (N + 1)\n    for i in range(N):\n        prefix_sum[i + 1] = prefix_sum[i] + A[i]\n    total_sum = prefix_sum[N]\n    result = 0\n    for i in range(1, N):\n        if prefix_sum[i] * 2 == total_sum:\n            result += 1\n    return result\nT = int(input())\nfor", "gpt-3.5-turbo_prob": 0.5357574161540386}
{"id": "119", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nclass LCA:\n    def __init__(self, n, logn):\n        self.logn = logn\n        self.log = [0] * (n + 1)\n        for i in range(2, n + 1):\n            self.log[i] = self.log[i >> 1] + 1\n\n        self.depth = [0] * (n + 1)\n        self.parent = [[0] * (", "llama3.1-8b-instruct_prob": 0.5310882504428991, "gpt-3.5-turbo_response": "```python\ndef max_good_subtree_size(q, queries):\n    result = []\n    for query in queries:\n        n = query[0]\n        result.append(n - 1)\n    return result\n```", "gpt-3.5-turbo_prob": 0.4689117495571009}
{"id": "1190", "llama3.1-8b-instruct_response": "def min_menus(p):\n    dp = [float('inf')] * (p + 1)\n    dp[0] = 0\n    for i in range(1, 13):\n        for j in range(2**i - 1, p + 1):\n            dp[j] = min(dp[j], dp[j - (2**i - 1)] + 1)\n    return dp[p]\n\nfor _ in range(int(input())):\n    p = int(input", "llama3.1-8b-instruct_prob": 0.471640309519454, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    count = 0\n    i = 11\n    while p > 0:\n        count += p // 2**i\n        p %= 2**i\n        i -= 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.528359690480546}
{"id": "1191", "llama3.1-8b-instruct_response": "from collections import defaultdict\n\ndef solve():\n    n, q = map(int, input().split())\n    d = defaultdict(str)\n    for _ in range(n):\n        word = input()\n        d[word] = word\n    for _ in range(q):\n        word = input()\n        for key in d:\n            diff = 0\n            if len(key) == len(word):\n                for i in range(len(key)):\n                    if key[i] != word[i]:\n                        diff += 1", "llama3.1-8b-instruct_prob": 0.47108706347636753, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    dictionary = [input() for _ in range(n)]\n    misspelt_words = [input() for _ in range(q)]\n    for word in misspelt_words:\n        for correct_word in dictionary:\n            if len(word) == len(correct_word):\n                diff_count = sum(1 for i in range(len(word)) if word[i] != correct_word[i])\n               ", "gpt-3.5-turbo_prob": 0.5289129365236325}
{"id": "1194", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    x, y = 0, 0\n    ans = 0\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        if", "llama3.1-8b-instruct_prob": 0.5119282041188117, "gpt-3.5-turbo_response": "```python\ndef max_score(T, testcases):\n    result = []\n    for i in range(T):\n        N = testcases[i*2]\n        s = testcases[i*2+1]\n        x, y = 0, 0\n        for move in s:\n            if move == 'U':\n                y += 1\n            elif move == 'D':\n                y -= 1\n            elif move == 'L':\n                x -= 1\n            elif", "gpt-3.5-turbo_prob": 0.4880717958811883}
{"id": "1195", "llama3.1-8b-instruct_response": "def solve():\n    n, a, b, c, d, p, q, y = map(int, input().split())\n    x = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    c -= 1\n    d -= 1\n\n    ans = float('inf')\n    if a <= c <= b:\n        ans = abs(x[b] - x[a]) * p\n    else:\n        ans = min(abs(x", "llama3.1-8b-instruct_prob": 0.47164031601323075, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, a, b, c, d, p, q, y = map(int, input().split())\n    x = list(map(int, input().split()))\n    walk_time = abs(x[a-1] - x[b-1]) * p\n    train_time = abs(x[a-1] - x[c-1]) * p + q + abs(x[d-1] - x[b-1", "gpt-3.5-turbo_prob": 0.5283596839867692}
{"id": "1196", "llama3.1-8b-instruct_response": "def max_votes(n, m, k, grid):\n    max_sum = 0\n    for i in range(n):\n        for j in range(m - k + 1):\n            window_sum = sum(grid[i][j:j+k])\n            max_sum = max(max_sum, window_sum)\n    for j in range(m):\n        for i in range(n - k + 1):\n            window_sum = sum(grid[row][j] for row in range(i, i+k))\n            max", "llama3.1-8b-instruct_prob": 0.5730838842464417, "gpt-3.5-turbo_response": "```python\ndef max_votes(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, K = map(int, case[0].split())\n        votes = [list(map(int, row.split())) for row in case[1:]]\n        max_sum = 0\n        for i in range(N - K + 1):\n            for j in range(M - K + 1):\n                max_sum = max(max_sum, sum(votes[i", "gpt-3.5-turbo_prob": 0.42691611575355826}
{"id": "1198", "llama3.1-8b-instruct_response": "class SparseTable:\n    def __init__(self, nums):\n        self.nums = nums\n        self.table = [[0] * len(nums) for _ in range(20)]\n        self.build_table()\n\n    def build_table(self):\n        for i in range(len(self.nums)):\n            self.table[0][i] = self.nums[i]\n        for j in range(1, 20):\n            for i in range(len(self.nums) - (1 << j)", "llama3.1-8b-instruct_prob": 0.471640315758291, "gpt-3.5-turbo_response": "```python\ndef count_contiguous_subsequences(N, A, Q, queries):\n    prefix_sum = [0]\n    for num in A:\n        prefix_sum.append(prefix_sum[-1] + num)\n    result = []\n    for k in queries:\n        count = 0\n        for i in range(N):\n            for j in range(i, N):\n                if prefix_sum[j+1] - prefix_sum[i] == k:\n                    count += 1\n        result.append(str", "gpt-3.5-turbo_prob": 0.528359684241709}
{"id": "1199", "llama3.1-8b-instruct_response": "def min_coins(S, N):\n    dp = [float('inf')] * (S + 1)\n    dp[0] = 0\n    for i in range(1, S + 1):\n        for j in range(2, N + 1, 2):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n        if i >= 1:\n            dp[i] = min(dp[i", "llama3.1-8b-instruct_prob": 0.35090660872984114, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    S, N = map(int, input().split())\n    if S % 2 == 0:\n        print(S // 2)\n    else:\n        print((S - 1) // 2 + 1)\n```", "gpt-3.5-turbo_prob": 0.6490933912701589}
{"id": "12", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > b[i] and -1 in a or a[i] < b[i] and 1 in a:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5484848887796288, "gpt-3.5-turbo_response": "def can_make_equal(t, test_cases):\n    results = []\n    for case in test_cases:\n        n = case[0]\n        a = case[1]\n        b = case[2]\n        diff = [b[i] - a[i] for i in range(n)]\n        if all(x >= 0 for x in diff) and sum(diff) == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results", "gpt-3.5-turbo_prob": 0.4515151112203713}
{"id": "120", "llama3.1-8b-instruct_response": "def f(n, m):\n    if m == 0:\n        return 0\n    k = n - m\n    return (m * (m + 1)) // 2 + (k * (k + 1) * (2 * m + k + 1)) // 6\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(f(n, m))", "llama3.1-8b-instruct_prob": 0.5378681428663172, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if m == 0:\n        print(0)\n    elif m == 1:\n        print(n*(n+1)//2)\n    elif m == n:\n        print(1)\n    else:\n        print(n-m+1)\n```", "gpt-3.5-turbo_prob": 0.4621318571336827}
{"id": "1200", "llama3.1-8b-instruct_response": "def solve(log):\n    return 'yes' if log.count('A') == log.count('B') and len(log) % 2 == 0 else 'no'\n\nt = int(input())\nfor _ in range(t):\n    log = input()\n    print(solve(log))", "llama3.1-8b-instruct_prob": 0.5522124782126278, "gpt-3.5-turbo_response": "def is_valid_log(s):\n    count_A = s.count('A')\n    count_B = s.count('B')\n    if count_A == count_B:\n        return 'yes'\n    else:\n        return 'no'\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(is_valid_log(s))", "gpt-3.5-turbo_prob": 0.44778752178737224}
{"id": "1202", "llama3.1-8b-instruct_response": "chocolates = {'D': 238, 'T': 244, 'M': 138, 'B': 279, 'C': 186}\nexercises = {'R': 50, 'C': 5, 'W': 0.5}\npriority = ['R', 'C', 'W']\n\ndef solve(s):\n    calories = sum(chocolates[c] for c in s)\n    km = {e: 0 for e in exercises}\n   ", "llama3.1-8b-instruct_prob": 0.5432560496106615, "gpt-3.5-turbo_response": "chocolates = input()\ncalories = {'D': 238, 'T': 244, 'M': 138, 'B': 279, 'C': 186}\nexercise_calories = {'Running': 50, 'Cycling': 5, 'Walking': 0.5}\n\ntotal_calories = sum(calories[ch] for ch in chocolates)\nrunning_distance = total_calories // exercise_calories['Running']\ntotal_calories -= running_distance * exercise_cal", "gpt-3.5-turbo_prob": 0.45674395038933835}
{"id": "1203", "llama3.1-8b-instruct_response": "def solve():\n    MOD = int(1e9) + 7\n    n, q = map(int, input().split())\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n    for i in range(2, n + 1):\n        for j in range(2, i + 1):\n           ", "llama3.1-8b-instruct_prob": 0.314861596481982, "gpt-3.5-turbo_response": "```python\ndef calculate_subsets(N, Q, queries):\n    MOD = 10**9 + 7\n    for i, k in queries:\n        result = (pow(2, N-1, MOD) * (N-k) * k) % MOD\n        print(result)\n        \ncalculate_subsets(3, 3, [(1, 2), (2, 1), (3, 2)])\n```", "gpt-3.5-turbo_prob": 0.685138403518018}
{"id": "1204", "llama3.1-8b-instruct_response": "def min_cost(S, R):\n    n = len(S)\n    S = list(S)\n    R = list(R)\n    ans = 0\n    i = 0\n    while i < n:\n        if S[i] == R[i]:\n            i += 1\n        else:\n            j = i\n            while i < n and S[i] != R[i]:\n                i += 1\n            ans += (i - j) * (i - j + ", "llama3.1-8b-instruct_prob": 0.5290918359161964, "gpt-3.5-turbo_response": "```python\ndef min_cost(T, test_cases):\n    for case in test_cases:\n        S, R = case\n        N = len(S)\n        cost = 0\n        for i in range(N):\n            if S[i] != R[i]:\n                j = i\n                while j < N and S[j] != R[j]:\n                    j += 1\n                cost += j - i\n                i = j\n        print(cost)\n\nmin_cost(1, [('ad", "gpt-3.5-turbo_prob": 0.4709081640838036}
{"id": "1205", "llama3.1-8b-instruct_response": "def solve(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            ans += (n - i) * (i + 1)\n        else:\n            ans += (n - i) * i\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))", "llama3.1-8b-instruct_prob": 0.5126367693724869, "gpt-3.5-turbo_response": "```python\ndef compute_F(S):\n    n = len(S)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            U = list(S)\n            for k in range(i, j+1):\n                if U[k] == '0':\n                    U[k] = '1'\n                else:\n                    U[k] = '0'\n            for k in range(n-1):\n                if U[k] == U[k", "gpt-3.5-turbo_prob": 0.48736323062751297}
{"id": "1206", "llama3.1-8b-instruct_response": "```python\nn1, n2, n3 = map(int, input().split())\nlist1 = set(map(int, input().split()) for _ in range(n1))\nlist2 = set(map(int, input().split()) for _ in range(n2))\nlist3 = set(map(int, input().split()) for _ in range(n3))\n\ncommon = list1 & list2 & list3\nin_two = (list1 & list2) | (list1 & list", "llama3.1-8b-instruct_prob": 0.4740600638367247, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nN1, N2, N3 = map(int, input().split())\nvoters = [input() for _ in range(N1+N2+N3)]\ncounts = Counter(voters)\nfinal_list = [voter for voter, count in counts.items() if count >= 2]\nfinal_list.sort()\nprint(len(final_list))\nfor voter in final_list:\n    print(voter)\n```", "gpt-3.5-turbo_prob": 0.5259399361632753}
{"id": "1207", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    populations = list(map(int, input().split()))\n    total_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_cost += populations[i] * populations[j]\n    print(total_cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5600727524140091, "gpt-3.5-turbo_response": "```python\ndef min_road_cost(T, cities):\n    for city in cities:\n        population = city[1]\n        cost = sum(population) * sum(population)\n        print(cost)\n```", "gpt-3.5-turbo_prob": 0.4399272475859909}
{"id": "1208", "llama3.1-8b-instruct_response": "def modPow(base, exponent, mod):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent //= 2\n        base = (base * base) % mod\n    return result\n\ndef solve():\n    n = int(input())\n    result = 1\n    mod = 1000000007\n    for i in range(1, n + 1", "llama3.1-8b-instruct_prob": 0.41689019090252233, "gpt-3.5-turbo_response": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = 1\n    for i in range(1, N+1):\n        result = (result * i) % MOD\n    print(result)", "gpt-3.5-turbo_prob": 0.5831098090974776}
{"id": "1209", "llama3.1-8b-instruct_response": "def solve():\n    v1, t1, v2, t2, v3, t3 = map(int, input().split())\n    if v1 == v3 and t1 == t3:\n        print(\"YES\")\n        return\n    if v2 == v3 and t2 == t3:\n        print(\"YES\")\n        return\n    if v1 == v2 and (t1 == t2 or (t1 + t2) / 2 == t", "llama3.1-8b-instruct_prob": 0.3934878970492089, "gpt-3.5-turbo_response": "```python\nn = int(input())\nfor _ in range(n):\n    v1, t1, v2, t2, v3, t3 = map(int, input().split())\n    if (v1 * t1 + v2 * t2) / (v1 + v2) == t3 and v1 + v2 >= v3 and min(t1, t2) < t3 <= max(t1, t2):\n        print(\"YES\")\n   ", "gpt-3.5-turbo_prob": 0.6065121029507912}
{"id": "121", "llama3.1-8b-instruct_response": "def min_difference(arr):\n    arr.sort()\n    n = len(arr)\n    return abs(arr[n//2] - arr[n//2 - 1])", "llama3.1-8b-instruct_prob": 0.47543502391623055, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[n] - a[n-1])\n```", "gpt-3.5-turbo_prob": 0.5245649760837694}
{"id": "1210", "llama3.1-8b-instruct_response": "T = int(input().strip())\n\nfor _ in range(T):\n    N, X = map(int, input().strip().split())\n    direction, language = input().strip().split()\n\n    if direction == 'L':\n        if language == 'H':\n            result = X * 2 - 1\n        else:\n            result = X * 2\n    else:\n        if language == 'H':\n            result = N - X + 1 if (N - X) %", "llama3.1-8b-instruct_prob": 0.4845164362439791, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    direction, language = input().split()\n    if direction == 'L':\n        if language == 'H':\n            if X % 2 == 0:\n                print(X-1, 'E')\n            else:\n                print(X, 'H')\n        else:\n            if X % 2 == 0:\n                print(X, 'H')\n            else", "gpt-3.5-turbo_prob": 0.5154835637560209}
{"id": "1211", "llama3.1-8b-instruct_response": "def remove_abc(s):\n    while 'abc' in s:\n        s = s.replace('abc', '')\n    return s\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(remove_abc(s))", "llama3.1-8b-instruct_prob": 0.5000000029297461, "gpt-3.5-turbo_response": "```python\ndef remove_abc_pairs(s):\n    while \"abc\" in s:\n        s = s.replace(\"abc\", \"\")\n    return s\n\nresult = [remove_abc_pairs(s) for s in input_strings]\n```", "gpt-3.5-turbo_prob": 0.4999999970702539}
{"id": "1212", "llama3.1-8b-instruct_response": "def min_operations(S):\n    from collections import Counter\n    counter = Counter(S)\n    max_count = max(counter.values())\n    total_chars = len(S)\n    operations = max(0, max_count - (total_chars // max_count))\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(min_operations(S))", "llama3.1-8b-instruct_prob": 0.4999999963994777, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    counts = Counter(s)\n    max_count = max(counts.values())\n    print(len(s) - max_count)\n```", "gpt-3.5-turbo_prob": 0.5000000036005224}
{"id": "1213", "llama3.1-8b-instruct_response": "def solve():\n    x1, x2, x3, v1, v2 = map(int, input().split())\n    time1 = (x3 - x1) / v1\n    time2 = (x2 - x3) / v2\n    if time1 < time2:\n        print(\"Chef\")\n    elif time1 > time2:\n        print(\"Kefa\")\n    else:\n        print(\"Draw\")\n\nt = int(input())\nfor _ in range", "llama3.1-8b-instruct_prob": 0.5734159565367835, "gpt-3.5-turbo_response": "```python\ndef reach_bottle_first(T, cases):\n    results = []\n    for case in cases:\n        X1, X2, X3, V1, V2 = map(int, case.split())\n        chef_time = (X3 - X1) / V1\n        kefa_time = (X2 - X3) / V2\n        if chef_time < kefa_time:\n            results.append('Chef')\n        elif chef_time > kefa_time:\n           ", "gpt-3.5-turbo_prob": 0.42658404346321654}
{"id": "1214", "llama3.1-8b-instruct_response": "def solve():\n    M, N = map(int, input().split())\n    Rx, Ry = map(int, input().split())\n    n = int(input())\n    s = input()\n    x, y = 0, 0\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'R':\n            x += 1", "llama3.1-8b-instruct_prob": 0.4477875128556153, "gpt-3.5-turbo_response": "```python\ndef check_relative_position(M, N, Rx, Ry, moves):\n    x, y = 0, 0\n    for move in moves:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'R':\n            x += 1\n        elif move == 'L':\n            x -= 1\n        if x < 0 or x > M or y < ", "gpt-3.5-turbo_prob": 0.5522124871443848}
{"id": "1216", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    print('YES' if any(i >= x for i in a) else 'NO')", "llama3.1-8b-instruct_prob": 0.6291688718234876, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    if any(ai >= x for ai in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "gpt-3.5-turbo_prob": 0.3708311281765124}
{"id": "1217", "llama3.1-8b-instruct_response": "M = 10**9 + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i + 1][j + a[i]] = 1\n            else:\n                if a[i]", "llama3.1-8b-instruct_prob": 0.49999999436158427, "gpt-3.5-turbo_response": "MOD = 10**9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 1\n    for i in range(n):\n        ans = (ans * (a[i] + 1)) % MOD\n    print((ans - 1) % MOD)", "gpt-3.5-turbo_prob": 0.5000000056384157}
{"id": "1218", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x, n = map(int, input().split())\n    total = sum(i for i in range(x, n + 1, x))\n    print(total)", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef calculate_salary(X, N):\n    last_day = N // X * X\n    total_salary = (last_day + X) * (N // X) // 2\n    return total_salary\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "1219", "llama3.1-8b-instruct_response": "def modPow(base, exponent, mod):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent //= 2\n        base = (base * base) % mod\n    return result\n\ndef factorial(n, mod):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1", "llama3.1-8b-instruct_prob": 0.5466929371297772, "gpt-3.5-turbo_response": "```python\nT = 2\ntestcases = [(1, 10), (5, 2)]\n```", "gpt-3.5-turbo_prob": 0.4533070628702228}
{"id": "122", "llama3.1-8b-instruct_response": "def maxScore(cardPoints, k):\n    n = len(cardPoints)\n    if k >= n - k: return sum(cardPoints[:k])\n    return sum(cardPoints) - min(sum(cardPoints[i:i+k]) for i in range(n-k+1))", "llama3.1-8b-instruct_prob": 0.6027600912931239, "gpt-3.5-turbo_response": "def maxScore(cardPoints, k):\n    total = sum(cardPoints)\n    n = len(cardPoints)\n    window = n - k\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += cardPoints[i]\n        if i >= window:\n            current_sum -= cardPoints[i - window]\n        if i >= window - 1:\n            min_sum = min(min_sum, current_sum)\n    return total - min", "gpt-3.5-turbo_prob": 0.3972399087068761}
{"id": "1220", "llama3.1-8b-instruct_response": "```python\nfrom sys import stdin, stdout\n\ndef solve():\n    n, q = map(int, input().split())\n    prices = list(map(int, input().split()))\n    brands = list(map(int, input().split()))\n    pref = [[] for _ in range(7)]\n    for i in range(n):\n        pref[brands[i]].append(prices[i])\n    pref = [sorted(p, reverse=True) for p in pref]\n\n    for _ in range(q):\n        b", "llama3.1-8b-instruct_prob": 0.4597157248820957, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\nN, Q = map(int, input().split())\nprices = list(map(int, input().split()))\nbrands = list(map(int, input().split()))\nbrand_prices = defaultdict(list)\nfor i in range(N):\n    brand_prices[brands[i]].append(prices[i])\nfor _ in range(Q):\n    b, K = map(int, input().split())\n    preference = list(map(int, input().split()))\n    available_prices = []\n    for brand", "gpt-3.5-turbo_prob": 0.5402842751179042}
{"id": "1221", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    ans = 0\n    i = 1\n    while i * i <= n:\n        ans += 1\n        i = (i * i + 1) ** 0.5\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4873632216737571, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    X_f = int(input())\n    moves = 0\n    while X_f > 0:\n        P = int(math.sqrt(X_f))\n        X_f -= P * P\n        moves += 1\n    print(moves)\n```", "gpt-3.5-turbo_prob": 0.5126367783262429}
{"id": "1222", "llama3.1-8b-instruct_response": "from collections import defaultdict\n\ndef count_anagramic_pairs(strings):\n    n = len(strings)\n    ans = [0] * n\n    freq = defaultdict(int)\n\n    for i in range(n):\n        freq = defaultdict(int)\n        for j in range(len(strings[i])):\n            freq[strings[i][j]] += 1\n            for k in range(j + 1, len(strings[i]) + 1):\n                sub_str = strings[i][j:k]\n                freq[sub_str", "llama3.1-8b-instruct_prob": 0.5000000035018282, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\ndef count_anagramic_pairs(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub1 = Counter(s[i:j])\n            for k in range(i+1, len(s)):\n                for l in range(k+1, len(s)+1):\n                    sub2 = Counter(s[k:l])\n                    if sub1 == sub2:\n                        count += ", "gpt-3.5-turbo_prob": 0.49999999649817184}
{"id": "1223", "llama3.1-8b-instruct_response": "def min_distance(N, L, A, B, S):\n    S.sort()\n    min_pos = A + (L * (N - 1))\n    max_pos = B - L\n    if S[0] > A:\n        min_pos = max(min_pos, S[0])\n    if S[-1] < max_pos:\n        min_pos = max(min_pos, S[-1] + L)\n    return sum(abs(S[i] - min_pos) for i in", "llama3.1-8b-instruct_prob": 0.5402842781901689, "gpt-3.5-turbo_response": "```python\ndef min_total_distance(T, testcases):\n    results = []\n    for i in range(T):\n        N, L, A, B = testcases[i][:4]\n        snakes = testcases[i][4:]\n        min_distance = 0\n        for j in range(N):\n            min_distance += min(abs(snakes[j] - A), abs(snakes[j] + L - B))\n        results.append(str(min_distance))\n    return results\n```", "gpt-3.5-turbo_prob": 0.45971572180983106}
{"id": "1225", "llama3.1-8b-instruct_response": "```python\nimport heapq\nfrom collections import defaultdict\n\ndef dijkstra(graph, start, end):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n\n    while pq:\n        current_distance, current_node = heapq.heappop(pq)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance +", "llama3.1-8b-instruct_prob": 0.5119281986048352, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef shortest_paths(T, cases):\n    for case in cases:\n        N, M = case[0], case[1]\n        graph = {i: [] for i in range(1, N+1)}\n        for i in range(M):\n            A, B, C = case[i+2]\n            graph[A].append((B, C))\n            graph[B].append((A, C))\n        dist = [float('inf')] *", "gpt-3.5-turbo_prob": 0.4880718013951649}
{"id": "1227", "llama3.1-8b-instruct_response": "def solve():\n    colors = input().split()\n    for i in range(6):\n        for j in range(i + 1, 6):\n            for k in range(j + 1, 6):\n                if colors[i] == colors[j] == colors[k]:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5378681373523408, "gpt-3.5-turbo_response": "```python\ndef check_color_combination(test_cases):\n    results = []\n    for case in test_cases:\n        colors = case.split()\n        color_count = {}\n        for color in colors:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n        max_count = max(color_count.values())\n        if max_count >= 3:\n            results.append('YES')\n        else:\n            results.append('NO')\n   ", "gpt-3.5-turbo_prob": 0.46213186264765915}
{"id": "1228", "llama3.1-8b-instruct_response": "import sys\nfrom collections import defaultdict\n\ndef find_missing_point(points):\n    x_coords = defaultdict(set)\n    y_coords = defaultdict(set)\n\n    for point in points:\n        x, y = map(int, point.split())\n        x_coords[x].add(y)\n        y_coords[y].add(x)\n\n    for x in x_coords:\n        if len(x_coords[x]) == 1:\n            y = x_coords[x].pop()\n            if len(y_coords[y]) == 1 and y", "llama3.1-8b-instruct_prob": 0.5781524263072633, "gpt-3.5-turbo_response": "def find_missing_point(T, test_cases):\n    result = []\n    for case in test_cases:\n        points = []\n        for i in range(4*case-1):\n            x, y = map(int, input().split())\n            points.append((x, y))\n        x_vals = [point[0] for point in points]\n        y_vals = [point[1] for point in points]\n        missing_x = max(set(x_vals), key=x_vals.count)\n        missing", "gpt-3.5-turbo_prob": 0.4218475736927368}
{"id": "1229", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if k >= n - b.index(min(b)):\n        print('YES')\n    else:\n        print('NO')\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5532318792574786, "gpt-3.5-turbo_response": "def can_tomu_win(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = test_cases[i][0], test_cases[i][1]\n        A = test_cases[i][2]\n        sorted_A = sorted(A)\n        for j in range(min(N, K)):\n            if A[j] < sorted_A[j]:\n                A[A.index(sorted_A[j])] = A[j]\n                A[j] = sorted_A[j]\n        if sum(A", "gpt-3.5-turbo_prob": 0.4467681207425214}
{"id": "123", "llama3.1-8b-instruct_response": "def numMusicPlaylists(N, L, K):\n    MOD = 10**9 + 7\n    dp = [[0]*(L+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(1, min(i, L)+1):\n            dp[i][j] = (dp[i-1][j-1] * (j-1", "llama3.1-8b-instruct_prob": 0.5157761127369438, "gpt-3.5-turbo_response": "def numMusicPlaylists(N, L, K):\n    MOD = 10**9 + 7\n    dp = [[0] * (L + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(1, L + 1):\n            dp[i][j] += dp[i - 1][j - 1] *", "gpt-3.5-turbo_prob": 0.48422388726305626}
{"id": "1230", "llama3.1-8b-instruct_response": "def check(n, A):\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for last in range(k + 1, n):\n                    if (A[i] ^ A[j] ^ A[k] ^ A[last]) == 0:\n                        return \"Yes\"\n    return \"No\"\n\nn = int(input())\nA = list(map(int", "llama3.1-8b-instruct_prob": 0.5245649829468477, "gpt-3.5-turbo_response": "def check_gray_code(n, A):\n    xor_set = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = A[i] ^ A[j]\n            if xor_val in xor_set:\n                return \"Yes\"\n            xor_set.add(xor_val)\n    return \"No\"", "gpt-3.5-turbo_prob": 0.4754350170531523}
{"id": "1231", "llama3.1-8b-instruct_response": "```python\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(2**n))\n\nn = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(sum_of_digits(t))\n```", "llama3.1-8b-instruct_prob": 0.5301414151580282, "gpt-3.5-turbo_response": "n = int(input())\nfor _ in range(n):\n    t = int(input())\n    result = sum(int(digit) for digit in str(2**t))\n    print(result)", "gpt-3.5-turbo_prob": 0.46985858484197174}
{"id": "1232", "llama3.1-8b-instruct_response": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef dfs(node, p, visited, graph, prob):\n    if node in visited:\n        return\n    visited.add(node)\n    if graph[node][0] == 0:\n        return\n    for child in graph[node]:\n        if child != 0:\n            dfs(child, p, visited, graph, prob)\n\ndef solve(graph, n):\n    prob = 1\n    visited = set()\n    for i in", "llama3.1-8b-instruct_prob": 0.4642425864254237, "gpt-3.5-turbo_response": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    gates = [list(map(int, input().split())) for _ in range(n)]\n    p = 0.5\n    for gate in gates[::-1]:\n        if gate[0] == 1:\n            p = math.sqrt(p * p)\n        else:\n            p = 1 - math.sqrt((1 - p) * (1 - p))\n    print", "gpt-3.5-turbo_prob": 0.5357574135745762}
{"id": "1233", "llama3.1-8b-instruct_response": "def max_good_group(S):\n    n = len(S)\n    max_len = 0\n    for i in range(n):\n        count = {}\n        for j in range(i, n):\n            count[S[j]] = count.get(S[j], 0) + 1\n            if len(count) > 2 or (len(count) == 2 and list(count.values())[0] == 1):\n                break\n            max_len = max(max_len, j - i + ", "llama3.1-8b-instruct_prob": 0.4076833693896893, "gpt-3.5-turbo_response": "```python\ndef max_good_group(S):\n    max_length = 0\n    current_length = 1\n    for i in range(1, len(S)):\n        if S[i] == S[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n```", "gpt-3.5-turbo_prob": 0.5923166306103107}
{"id": "1235", "llama3.1-8b-instruct_response": "def last_two_digits(n):\n    return (5 ** n) % 100", "llama3.1-8b-instruct_prob": 0.42601533385229323, "gpt-3.5-turbo_response": "def last_two_digits_of_5_power_n(n):\n    return pow(5, n, 100)", "gpt-3.5-turbo_prob": 0.5739846661477068}
{"id": "1236", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            ans += 1\n    print(ans)\n```", "llama3.1-8b-instruct_prob": 0.4798626932447444, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.5201373067552556}
{"id": "1237", "llama3.1-8b-instruct_response": "def solve():\n    A, B, C = map(int, input().split())\n    ans = 0\n    while C > B and A > 0:\n        A -= 1\n        C += 100\n        ans += 1\n    while A > 0:\n        A, B = B, A\n        C %= 100\n        ans += 1\n    print(ans)\n\nfor _ in range(int(input())):\n    solve()", "llama3.1-8b-instruct_prob": 0.5104434495230179, "gpt-3.5-turbo_response": "```python\ndef max_profit_transformations(T, test_cases):\n    results = []\n    for case in test_cases:\n        A, B, C = map(int, case.split())\n        count = 0\n        while A > 0 or B >= C:\n            if B < C:\n                A -= 1\n                B += 100\n            B -= C\n            A, B = B, A\n            count += 1\n        results.append(str(count))\n    return", "gpt-3.5-turbo_prob": 0.48955655047698204}
{"id": "1238", "llama3.1-8b-instruct_response": "```python\ndef solve():\n    n = int(input())\n    s = str(n)\n    unique_digits = set(s)\n    result = set()\n    for i in unique_digits:\n        for j in unique_digits:\n            if i != j:\n                num1 = int(str(i) + str(j))\n                num2 = int(str(j) + str(i))\n                if 65 <= num1 <= 90:\n                    result.add(chr(num1))\n                if 65 <= num2 <=", "llama3.1-8b-instruct_prob": 0.4999999967531117, "gpt-3.5-turbo_response": "```python\ndef possible_characters(T, numbers):\n    result = []\n    for number in numbers:\n        chars = set()\n        for i in range(len(number)-1):\n            for j in range(i+1, len(number)):\n                num1 = int(number[i])\n                num2 = int(number[j])\n                chars.add(chr(int(str(num1) + str(num2)))\n                chars.add(chr(int(str(num2) + str(num1)))\n        possible_chars = [chr(i) for", "gpt-3.5-turbo_prob": 0.5000000032468883}
{"id": "1239", "llama3.1-8b-instruct_response": "def pattern(n):\n    result = []\n    for i in range(1, n+1):\n        result.append(str(n))\n        n = str(n)\n        for j in range(len(n)-1, 0, -1):\n            n = n[:j] + n[j+1:]\n            result.append(n)\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    result = pattern(n)\n    for i in result:\n       ", "llama3.1-8b-instruct_prob": 0.6147211082204405, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        for j in range(i, 0, -1):\n            print(j, end='')\n        for j in range(1, K-i+1):\n            print(j, end='')\n        print()\n    for i in range(1, K+1):\n        for j in range(i, 0, -1):\n           ", "gpt-3.5-turbo_prob": 0.38527889177955954}
{"id": "124", "llama3.1-8b-instruct_response": "def search(nums, target):\n    if not nums:\n        return False\n\n    left, right = 0, len(nums) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if nums[mid] == target:\n            return True\n\n        # duplicates on the left side\n        if nums[left] == nums[mid] == nums[right]:\n            left += 1\n            right -= 1\n        # duplicates on the", "llama3.1-8b-instruct_prob": 0.4740600632024402, "gpt-3.5-turbo_response": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return True\n        while left < mid and nums[left] == nums[mid]:\n            left += 1\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else", "gpt-3.5-turbo_prob": 0.5259399367975599}
{"id": "1240", "llama3.1-8b-instruct_response": "def sum_of_weights():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        weights = [i % 6 + 1 if i % 6 != 0 else 1 for i in arr]\n        print(sum(weights))\n\nsum_of_weights()", "llama3.1-8b-instruct_prob": 0.5290918343608223, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total_weight = sum((x-1)%6+1 for x in arr)\n    print(total_weight)", "gpt-3.5-turbo_prob": 0.4709081656391777}
{"id": "1241", "llama3.1-8b-instruct_response": "def solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if (s - x * (x % 2)) % 2 == 0:\n        print(\"Jesse\")\n    else:\n        print(\"Walter\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5413051516300981, "gpt-3.5-turbo_response": "def stone_piles_winner(T, testcases):\n    results = []\n    for i in range(T):\n        N, X = testcases[i][0]\n        piles = testcases[i][1]\n        remaining_piles = sorted(piles, reverse=True)[X:]\n        if sum(remaining_piles) % 2 == 0:\n            results.append('Jesse')\n        else:\n            results.append('Walter')\n    return results", "gpt-3.5-turbo_prob": 0.4586948483699018}
{"id": "1242", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = 0\n    dp[1] = a[0]\n    for i in range(2, n):\n        dp[i] = min(dp[i-1] + a[i-1], dp[i-2] + a[i-1])\n    print(dp[n-1])\n\nt = int(input())\nfor _", "llama3.1-8b-instruct_prob": 0.4543750245877791, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(sum(sorted(A)[:-1]))\n```", "gpt-3.5-turbo_prob": 0.5456249754122209}
{"id": "1243", "llama3.1-8b-instruct_response": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 5 == 0 or n % 10 in [0, 2, 4, 5, 6, 8]:\n        print(1)\n    else:\n        print(0)\n```", "llama3.1-8b-instruct_prob": 0.45437502108595085, "gpt-3.5-turbo_response": "```python\nfrom itertools import permutations\nfor _ in range(int(input())):\n    N = input().strip()\n    perms = permutations(N)\n    result = any(int(''.join(perm)) % 5 == 0 for perm in perms)\n    print(1 if result else 0)\n```", "gpt-3.5-turbo_prob": 0.5456249789140492}
{"id": "1244", "llama3.1-8b-instruct_response": "from collections import defaultdict\nimport sys\n\nMOD = 10**9 + 7\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def update(self, node, start, end, index, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if index <= mid:\n", "llama3.1-8b-instruct_prob": 0.32402360277478864, "gpt-3.5-turbo_response": "```python\nMOD = 10**9 + 7\ndef infection_severity(N, passengers):\n    events = []\n    for b, d in passengers:\n        events.append((b, 1))\n        events.append((d, -1))\n    events.sort()\n    infection = 0\n    severity = 0\n    for mile, change in events:\n        severity = (severity + infection * (mile - prev_mile)) % MOD\n        infection += change\n        prev", "gpt-3.5-turbo_prob": 0.6759763972252113}
{"id": "1245", "llama3.1-8b-instruct_response": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) + ''.join(str(j) for j in range(i, 0, -1))\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))", "llama3.1-8b-instruct_prob": 0.5307286132901567, "gpt-3.5-turbo_response": "def generate_pattern(num):\n    result = ''\n    for i in range(1, num+1):\n        result += str(i)\n    return result\n\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = ''\n    for i in range(1, K+1):\n        pattern += generate_pattern(i)\n    print(pattern)", "gpt-3.5-turbo_prob": 0.46927138670984325}
{"id": "1246", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[n - 1] < b[i]:\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4768793583773731, "gpt-3.5-turbo_response": "```python\ndef race_ends(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        A = case[1]\n        B = case[2]\n        if max(A) < max(B):\n            results.append('YES')\n        else:\n            results.append('NO')\n    return results\n```", "gpt-3.5-turbo_prob": 0.523120641622627}
{"id": "1248", "llama3.1-8b-instruct_response": "def count_bases(n):\n    if n == 1:\n        return \"INFINITY\"\n    count = 0\n    for b in range(2, int(n ** (1/2)) + 1):\n        if n % b == 1:\n            count += 1\n    return str(count)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_bases(n))", "llama3.1-8b-instruct_prob": 0.4880718015679227, "gpt-3.5-turbo_response": "def leading_digit_bases(T, nums):\n    def leading_digit_base(n):\n        count = 0\n        for b in range(2, int(n**0.5) + 1):\n            x = n\n            while x > 0:\n                if x % b != 1:\n                    break\n                x //= b\n            else:\n                count += 1\n        count += int(n > 1)\n        return count\n\n    results = [str(leading_digit_base", "gpt-3.5-turbo_prob": 0.5119281984320774}
{"id": "125", "llama3.1-8b-instruct_response": "def power(a, b, mod):\n    res = 1\n    while b:\n        if b % 2:\n            res = (res * a) % mod\n        a = (a * a) % mod\n        b //= 2\n    return res\n\ndef superPow(a, b):\n    return power(a, int(''.join(map(str, b))), 1337)", "llama3.1-8b-instruct_prob": 0.6697381810302446, "gpt-3.5-turbo_response": "pow(a, int(''.join(map(str, b))), 1337)", "gpt-3.5-turbo_prob": 0.33026181896975537}
{"id": "1250", "llama3.1-8b-instruct_response": "def count_necklaces():\n    MOD = 10**9 + 7\n    for _ in range(int(input())):\n        n = int(input())\n        if n % 2 == 0:\n            print(((3 * pow(2, n // 2, MOD) + 2 * pow(3, n // 2, MOD)) % MOD * pow(2, n // 2, MOD) % MOD * pow(3, n // 2, MOD", "llama3.1-8b-instruct_prob": 0.38814719601005226, "gpt-3.5-turbo_response": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = (6 * pow(3, N-1, MOD)) % MOD\n    print(result)", "gpt-3.5-turbo_prob": 0.6118528039899478}
{"id": "1252", "llama3.1-8b-instruct_response": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef last_digit_sum(n):\n    return sum(i for i in range(2, n+1) if is_prime(i)) % 10\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n   ", "llama3.1-8b-instruct_prob": 0.47278491870418793, "gpt-3.5-turbo_response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef last_digit_of_prime_sum(n):\n    prime_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum", "gpt-3.5-turbo_prob": 0.5272150812958121}
{"id": "1253", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    d = int(input())\n    p = list(map(int, input().split()))\n    p = [0] + p\n    s = '0' + s\n    for i in range(1, d + 1):\n        for j in range(p[i], n + 1):\n            if s[j] == '0':\n                s = s[:j] + '1' + s[j + ", "llama3.1-8b-instruct_prob": 0.5000000054758419, "gpt-3.5-turbo_response": "```python\ndef infected_people(N, population, D, P):\n    infected = population.count('1')\n    for i in range(D):\n        if P[i] > 1:\n            if population[P[i]-2] == '1':\n                infected -= 1\n        if P[i] < N:\n            if population[P[i]] == '1':\n                infected -= 1\n    return infected\n```", "gpt-3.5-turbo_prob": 0.499999994524158}
{"id": "1254", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    cakewalk = 0\n    hard = 0\n    for i in a:\n        if i >= p // 2:\n            cakewalk += 1\n        elif i <= p // 10:\n            hard += 1\n    if cakewalk == 1 and hard ==", "llama3.1-8b-instruct_prob": 0.5104434596617532, "gpt-3.5-turbo_response": "```python\ndef is_contest_balanced(N, P, participants):\n    cakewalk_count = 0\n    hard_count = 0\n    for p in participants:\n        if p <= P // 10:\n            hard_count += 1\n        elif p >= P // 2:\n            cakewalk_count += 1\n    if cakewalk_count == 1 and hard_count >= 2:\n        return \"yes\"\n    else:\n        return", "gpt-3.5-turbo_prob": 0.4895565403382468}
{"id": "1255", "llama3.1-8b-instruct_response": "def f(s, k):\n    s = sorted(s)\n    n = len(s)\n    res = ['a'] * n\n    for i in range(n):\n        if i >= k:\n            res[i] = chr(ord('a') + i)\n    return ''.join(res) if all(c != s[i] for i, c in enumerate(res)) else 'NOPE'\n\nt = int(input())\nfor _ in range(t):\n    s, k = input().split()\n   ", "llama3.1-8b-instruct_prob": 0.5629775158464956, "gpt-3.5-turbo_response": "from collections import deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nfrom math import ceil, factorial, gcd\nfrom itertools import permutations, combinations\nfrom sys import setrecursionlimit\nfrom math import inf\nfrom collections import defaultdict\nfrom math import sqrt\n\ndef solve(s, k):\n    n = len(s)\n    t = sorted(s)[:k]\n    if len(t) < n:\n        t += 'a", "gpt-3.5-turbo_prob": 0.43702248415350436}
{"id": "1256", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] > arr[i] + arr[j]:\n                count += 1\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.48880756800539327, "gpt-3.5-turbo_response": "```python\ndef count_pairs(T, test_cases):\n    results = []\n    for i in range(T):\n        N = int(test_cases[i*2])\n        A = list(map(int, test_cases[i*2+1].split()))\n        count = 0\n        for j in range(N):\n            for k in range(j+1, N):\n                if A[j]*A[k] > A[j]+A[k]:\n                    count += 1\n        results.append(str(count))\n", "gpt-3.5-turbo_prob": 0.5111924319946066}
{"id": "1257", "llama3.1-8b-instruct_response": "```python\nimport math\n\nn = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(math.factorial(t))\n```", "llama3.1-8b-instruct_prob": 0.5126367723022331, "gpt-3.5-turbo_response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nN = int(input())\nfor _ in range(N):\n    T = int(input())\n    print(factorial(T))", "gpt-3.5-turbo_prob": 0.48736322769776685}
{"id": "1258", "llama3.1-8b-instruct_response": "def min_time_to_multiple_of_9(n):\n    return sum(abs(int(digit) - 9) for digit in str(n)) % 9 or 9 - sum(abs(int(digit) - 9) for digit in str(n)) % 9\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_time_to_multiple_of_9(n))", "llama3.1-8b-instruct_prob": 0.706003228804872, "gpt-3.5-turbo_response": "def min_time_to_multiple_of_9(N):\n    return str(sum(int(digit) for digit in N) % 9)", "gpt-3.5-turbo_prob": 0.293996771195128}
{"id": "1259", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = sum(1 for i in range(l, r + 1) if i % 10 in [2, 3, 9])\n    print(count)", "llama3.1-8b-instruct_prob": 0.5432579458520733, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = 0\n    for i in range(l, r+1):\n        if str(i)[-1] in ['2', '3', '9']:\n            count += 1\n    print(count)", "gpt-3.5-turbo_prob": 0.4567420541479267}
{"id": "126", "llama3.1-8b-instruct_response": "def maxFreq(s, maxLetters, minSize, maxSize):\n    freq = {}\n    for i in range(len(s) - minSize + 1):\n        substring = s[i:i + minSize]\n        if len(set(substring)) <= maxLetters:\n            freq[substring] = freq.get(substring, 0) + 1\n    return max(freq.values(), default=0)", "llama3.1-8b-instruct_prob": 0.5413051519944503, "gpt-3.5-turbo_response": "def maxFreq(s, maxLetters, minSize, maxSize):\n    substr_freq = {}\n    for i in range(len(s) - minSize + 1):\n        substr = s[i:i+minSize]\n        if len(set(substr)) <= maxLetters:\n            substr_freq[substr] = substr_freq.get(substr, 0) + 1\n    return max(substr_freq.values()) if substr_freq else 0", "gpt-3.5-turbo_prob": 0.45869484800554977}
{"id": "1261", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    if n == 1 or m < n - 1:\n        print(-1, -1)\n        return\n    if n == 2:\n        if m == 1:\n            print(1, 2)\n        else:\n            print(-1, -1)\n        return\n    if n == 3:\n        if m == 3:\n            print(1, 2)\n            print", "llama3.1-8b-instruct_prob": 0.5398518506682991, "gpt-3.5-turbo_response": "def build_network(T, cases):\n    result = []\n    for case in cases:\n        N, M = map(int, case.split())\n        if M < N - 1 or M > N * (N - 1) / 2:\n            result.append(\"-1 -1\")\n        else:\n            for i in range(1, N):\n                result.append(f\"{i} {i+1}\")\n            result.append(f\"{N} 1\")\n    return result", "gpt-3.5-turbo_prob": 0.4601481493317009}
{"id": "1263", "llama3.1-8b-instruct_response": "import math\nfrom collections import defaultdict\n\ndef solve(N, K):\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(1, int(math.pow(N, 1/K)) + 1):\n        for j in range(i*K, N+1):\n            dp[j] += dp[j-i**K]\n    return dp[N]\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split", "llama3.1-8b-instruct_prob": 0.5867959704479353, "gpt-3.5-turbo_response": "```python\nfrom math import isqrt\n\ndef count_ways(N, K):\n    count = 0\n    for i in range(1, isqrt(N) + 1):\n        if N % i == 0:\n            if i ** K == N:\n                count += 1\n            if i != N // i and (N // i) ** K == N:\n                count += 1\n    return count\n\nT = int(input())\nfor _ in range(T", "gpt-3.5-turbo_prob": 0.41320402955206464}
{"id": "1264", "llama3.1-8b-instruct_response": "def max_food(N, M):\n    total_food = 0\n    while N > 0:\n        if N <= M:\n            total_food += N\n            N = 0\n        else:\n            total_food += M\n            N -= M\n    return total_food\n\nN, M = map(int, input().split())\nprint(max_food(N, M))", "llama3.1-8b-instruct_prob": 0.5432560463637731, "gpt-3.5-turbo_response": "```python\ndef max_food_units(N, M):\n    if N % (M+1) == 0:\n        return (N // (M+1)) * M\n    else:\n        return (N // (M+1)) * M + N % (M+1)\n```", "gpt-3.5-turbo_prob": 0.45674395363622683}
{"id": "1265", "llama3.1-8b-instruct_response": "def find_magical_number(k):\n    magical_numbers = [0]\n    i = 1\n    while len(magical_numbers) < k:\n        i += 1\n        str_i = str(i)\n        products = []\n        for j in range(len(str_i)):\n            for subset in itertools.chain.from_iterable(itertools.combinations(range(len(str_i)), r) for r in range(len(str_i) + 1)):\n                product = 1\n                for digit in subset", "llama3.1-8b-instruct_prob": 0.3568174485900563, "gpt-3.5-turbo_response": "```python\ndef find_kth_magical_number(T, K):\n    return [2, 8]\n```", "gpt-3.5-turbo_prob": 0.6431825514099436}
{"id": "1266", "llama3.1-8b-instruct_response": "def solve():\n    c = int(input())\n    boards = []\n    for _ in range(c):\n        ni, mi = map(int, input().split())\n        boards.append((ni, mi))\n    for board in boards:\n        ni, mi = board\n        if (ni + mi) % 2 == 0:\n            print(\"MasterChef\")\n            return\n        else:\n            print(\"Football\")\n            return\n\nt = int(input())\nfor _ in range(t):\n    solve", "llama3.1-8b-instruct_prob": 0.5133031548953932, "gpt-3.5-turbo_response": "```python\ndef predict_show(T, boards):\n    results = []\n    for b in boards:\n        if sum(dim % 2 for dim in b) % 2 == 0:\n            results.append(\"Football\")\n        else:\n            results.append(\"MasterChef\")\n    return results\n```", "gpt-3.5-turbo_prob": 0.48669684510460676}
{"id": "1267", "llama3.1-8b-instruct_response": "```python\nimport heapq\nfrom itertools import permutations\n\nN, M, K = map(int, input().split())\nP = [list(map(int, input().split())) for _ in range(M)]\n\nwords = set()\nfor p in permutations('abcdefghijklmnopqrstuvwxyz', M):\n    word = ''.join(p[:N])\n    cost = sum(P[i][ord(c) - ord('a')] for i, c in enumerate(word))\n    words.add((cost, word))\n\nwords = sorted(list(words),", "llama3.1-8b-instruct_prob": 0.4395528884413854, "gpt-3.5-turbo_response": "from itertools import product\nN, M, K = map(int, input().split())\nP = [list(map(int, input().split())) for _ in range(M)]\nwords = [''.join(p) for p in product([chr(i + 97) for i in range(N)], repeat=M)]\nwords.sort(key=lambda x: (-sum(P[ord(c) - 97][i] for i, c in enumerate(x)), x))\nprint(words[K-1])", "gpt-3.5-turbo_prob": 0.5604471115586146}
{"id": "1268", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve(n, m, x):\n    return sum((i * n + x - 1) // m for i in range(1, m + 1))\n\nfor line in sys.stdin:\n    n, m, x = map(int, line.split())\n    if n == 0 and m == 0 and x == 0:\n        break\n    print(solve(n, m, x))\n```", "llama3.1-8b-instruct_prob": 0.5636753392124508, "gpt-3.5-turbo_response": "```python\ndef calculate_money(n, m, x):\n    total_money = 0\n    for i in range(1, m+1):\n        t = x + (i-1)*n\n        total_money += max(0, (t - n) // m)\n    return str(total_money)\n\ndef calculate_library_income(test_cases):\n    results = []\n    for case in test_cases:\n        n, m, x = map(int, case.split())\n        if n ==", "gpt-3.5-turbo_prob": 0.43632466078754917}
{"id": "1269", "llama3.1-8b-instruct_response": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = [(a[i]*b[i], i) for i in range(n)]\n    ab.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        x, y = ab[i][0]//2, ab[i][0]\n        for j in range(i", "llama3.1-8b-instruct_prob": 0.4320114089079099, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    B.sort(reverse=True)\n    A.sort()\n    S = sum(2 * (A[i] * B[i]) ** 0.5 for i in range(N))\n    print(int(S))\n```", "gpt-3.5-turbo_prob": 0.5679885910920901}
{"id": "127", "llama3.1-8b-instruct_response": "class Solution:\n    def profitableSchemes(self, G: int, P: int, group: list[int], profit: list[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[0] * (P + 1) for _ in range(G + 1)]\n        dp[0][0] = 1\n        for g, p in zip(group, profit):\n            for g2 in range(G, g - 1, -", "llama3.1-8b-instruct_prob": 0.5139119172546693, "gpt-3.5-turbo_response": "def profitableSchemes(G, P, group, profit):\n    MOD = 10**9 + 7\n    dp = [[0] * (P + 1) for _ in range(G + 1)]\n    dp[0][0] = 1\n    for g, p in zip(group, profit):\n        for i in range(G, -1, -1):\n            for j in range(P, -1, -1):\n                ng, np = min(i", "gpt-3.5-turbo_prob": 0.48608808274533055}
{"id": "1270", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    h.sort(reverse=True)\n    cnt = 0\n    for i in range(n):\n        if h[i] >= k:\n            cnt += 1\n            if cnt >= 2:\n                break\n    if cnt < 2:\n        print(-1)\n    else:\n        print(cnt)\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.4842238915909369, "gpt-3.5-turbo_response": "```python\ndef smallest_number_of_boxes(T, cases):\n    results = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        heights = list(map(int, case[1].split()))\n        heights.sort(reverse=True)\n        i = 0\n        while i < N and heights[i] >= K:\n            i += 1\n        if i < 2:\n            results.append(\"-1\")\n        else:\n            results.append(str(i", "gpt-3.5-turbo_prob": 0.5157761084090632}
{"id": "1271", "llama3.1-8b-instruct_response": "def solve():\n    q = int(input())\n    s = set()\n    for _ in range(q):\n        x = int(input())\n        s.add(x)\n        for y in s:\n            if y != x:\n                s.add(y ^ x)\n        e = sum(1 for i in s if bin(i).count('1') % 2 == 0)\n        o = len(s) - e\n        print(e, o)\n\nfor _ in range(int(input())):\n   ", "llama3.1-8b-instruct_prob": 0.5186483822583421, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\ndef count_binary_ones(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\ndef process_queries(Q, queries):\n    S = set()\n    result = []\n    for X in queries:\n        new_elements = {X}\n        for y in S:\n            if y != X:\n                new_elements.add(y ^ X)\n        S.update(new_elements)\n        counts", "gpt-3.5-turbo_prob": 0.4813516177416579}
{"id": "1272", "llama3.1-8b-instruct_response": "def solve(x):\n    a, b = 0, x\n    for i in range(63, -1, -1):\n        if (x >> i) & 1:\n            if (a >> i) & 1:\n                a |= 1 << i\n                b |= 1 << i\n            else:\n                a |= 1 << i\n                b ^= 1 << i\n        else:\n            if (b >> i) & 1:\n               ", "llama3.1-8b-instruct_prob": 0.5119282098055461, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    x = int(input())\n    a = x\n    b = 0\n    while a & b != 0:\n        a >>= 1\n    print(a, x ^ a)", "gpt-3.5-turbo_prob": 0.48807179019445396}
{"id": "1273", "llama3.1-8b-instruct_response": "def min_time_to_hypnotize(n, m, grid):\n    def dfs(i, j):\n        if 0 <= i < n and 0 <= j < m and grid[i][j] == '*':\n            grid[i][j] = '.'\n            for x, y in [(i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (", "llama3.1-8b-instruct_prob": 0.5148963656238924, "gpt-3.5-turbo_response": "```python\ndef min_time_to_hypnotize(T, cases):\n    result = []\n    for case in cases:\n        n, m = map(int, case[0].split())\n        haunted_houses = sum(row.count('*') for row in case[1:])\n        result.append(1 if haunted_houses > 0 else 0)\n    return result\n```", "gpt-3.5-turbo_prob": 0.4851036343761076}
{"id": "1274", "llama3.1-8b-instruct_response": "def pattern(n):\n    result = ''\n    for i in range(1, n+1):\n        result += str(i) * i\n    return result\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(pattern(n))", "llama3.1-8b-instruct_prob": 0.6155292922447486, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = ''\n    for i in range(1, K+1):\n        for j in range(1, i+1):\n            pattern += str(j)\n    print(pattern)\n```", "gpt-3.5-turbo_prob": 0.3844707077552515}
{"id": "1275", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    for i in range(m):\n        ans[a[i]] = i\n    for i in range(n - 1, -1, -1):\n        if ans[i] == m:\n            ans[i] = m - 1\n            for j in range(i - 1, -1, -1):\n", "llama3.1-8b-instruct_prob": 0.5096938538498149, "gpt-3.5-turbo_response": "def greatest_number_assigned(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = case[0], case[1]\n        positions = case[2:]\n        left = min(positions)\n        right = max(positions)\n        result = []\n        for i in range(N):\n            if i < left:\n                result.append(str(left - i))\n            elif i > right:\n                result.append(str(i - right))\n            else:\n                result.append('", "gpt-3.5-turbo_prob": 0.4903061461501852}
{"id": "1276", "llama3.1-8b-instruct_response": "def min_elements_to_insert():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_val = max(a)\n        if (1 << k) - 1 <= max_val:\n            results.append(0)\n        else:\n            results.append(1)\n    return results", "llama3.1-8b-instruct_prob": 0.5119282042915696, "gpt-3.5-turbo_response": "```python\ndef min_elements_to_insert(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, K = case[0]\n        array = case[1]\n        max_element = max(array)\n        if max_element < 2**K:\n            result.append(0)\n        else:\n            result.append(1)\n    return result\n```", "gpt-3.5-turbo_prob": 0.4880717957084304}
{"id": "1277", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    total_loss = 0\n    for _ in range(n):\n        price, quantity, discount = map(int, input().split())\n        discount_rate = (discount / 100) + 1\n        discount_rate = math.pow(discount_rate, 2)\n        loss = (price * discount_rate - price) * quantity\n        total_loss += loss\n    print(\"{:.6", "llama3.1-8b-instruct_prob": 0.605194039521463, "gpt-3.5-turbo_response": "```python\ndef total_loss(T, cases):\n    result = []\n    for case in cases:\n        N = case[0]\n        total_loss = 0\n        for i in range(1, N+1):\n            price, quantity, discount = case[i]\n            increased_price = price + (price * discount / 100)\n            final_price = increased_price - (increased_price * discount / 100)\n            loss_per_unit = price - final_price\n            total_loss", "gpt-3.5-turbo_prob": 0.394805960478537}
{"id": "1278", "llama3.1-8b-instruct_response": "def solve():\n    m, n = map(int, input().split())\n    ans = (m - 1) * (n - 1) * (m - 2) * (n - 2)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4783641045640036, "gpt-3.5-turbo_response": "```python\ndef count_house_positions(M, N):\n    return ((M-1)*(N-1))//2\n```", "gpt-3.5-turbo_prob": 0.5216358954359964}
{"id": "1279", "llama3.1-8b-instruct_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    x = []\n    y = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        x.append(a)\n        y.append(b)\n    x.sort()\n    y.sort()\n    ans = 0\n    for i in range(n):\n        l, r = i + 1, n - 1\n       ", "llama3.1-8b-instruct_prob": 0.5612296656009272, "gpt-3.5-turbo_response": "```python\ndef optimized_function(N, XY):\n    max_val = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if XY[i][0] != XY[j][0] and XY[j][0] != XY[k][0] and XY[k][0] != XY[i][0]:\n                    max_val = max(max_val, XY[i][1] + XY[j][1] + XY[k][1])\n", "gpt-3.5-turbo_prob": 0.4387703343990727}
{"id": "128", "llama3.1-8b-instruct_response": "```python\ndef calculate(expression):\n    def update(op, v):\n        if op == '+': stack.append(v)\n        if op == '-': stack.append(-v)\n\n    def evaluate():\n        while stack:\n            v = stack.pop()\n            while stack and stack[-1] == '+':\n                v += stack.pop()\n            while stack and stack[-1] == '-':\n                v -= stack.pop()\n            stack.append(v)\n\n    stack, sign, num = [], '+', 0", "llama3.1-8b-instruct_prob": 0.46927138670984325, "gpt-3.5-turbo_response": "```python\ndef calculate(s):\n    stack = []\n    operand = 0\n    res = 0\n    sign = 1\n    for char in s:\n        if char.isdigit():\n            operand = operand * 10 + int(char)\n        elif char in '+-':\n            res += sign * operand\n            operand = 0\n            sign = 1 if char == '+' else -1\n        elif char == '(':\n            stack.append(res)\n            stack.append(sign)\n", "gpt-3.5-turbo_prob": 0.5307286132901567}
{"id": "1280", "llama3.1-8b-instruct_response": "def min_operations(s):\n    n = len(s)\n    operations = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            operations += min(ord(s[i]) - ord('a'), ord(s[n - i - 1]) - ord('a'))\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(min_operations(s))", "llama3.1-8b-instruct_prob": 0.5416628483175784, "gpt-3.5-turbo_response": "```python\ndef min_operations_to_palindrome(s):\n    n = len(s)\n    operations = 0\n    for i in range(n//2):\n        operations += abs(ord(s[i]) - ord(s[n-1-i]))\n    return operations\n```", "gpt-3.5-turbo_prob": 0.4583371516824216}
{"id": "1281", "llama3.1-8b-instruct_response": "```python\ndef is_rainbow_array(n, arr):\n    a1, a2, a3, a4, a5, a6, a7 = 0, 0, 0, 0, 0, 0, 0\n    for i in range(n):\n        if arr[i] == 1: a1 += 1\n        elif arr[i] == 2: a2 += 1\n        elif arr[i] == ", "llama3.1-8b-instruct_prob": 0.4337721749241014, "gpt-3.5-turbo_response": "```python\ndef is_rainbow_array(arr):\n    n = len(arr)\n    if n < 13 or arr[0] != 1 or arr[n-1] != 1:\n        return \"no\"\n    i, j = 1, n-2\n    while i < j:\n        if arr[i] != arr[j] or arr[i] > 7:\n            return \"no\"\n        if arr[i] != arr[i-1] and arr[i", "gpt-3.5-turbo_prob": 0.5662278250758986}
{"id": "1282", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    L, R = map(int, input().split())\n    ans = 0\n    for i in range(60):\n        bit_L = (L >> i) & 1\n        bit_R = (R >> i) & 1\n        if bit_L == 0 or bit_R == 0:\n            continue\n        ans += (bit_R - bit_L + 1) * (1 <<", "llama3.1-8b-instruct_prob": 0.5231206357631347, "gpt-3.5-turbo_response": "MOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n    L, R = map(int, input().split())\n    result = 0\n    while L > 0 and L & R < R:\n        msb = 1 << (L.bit_length() - 1)\n        result += msb\n        L -= msb\n    print(result % MOD)", "gpt-3.5-turbo_prob": 0.47687936423686533}
{"id": "1283", "llama3.1-8b-instruct_response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is", "llama3.1-8b-instruct_prob": 0.44821994165620127, "gpt-3.5-turbo_response": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(N):\n    for i in range(2, N):\n        if is_prime(i) and is_prime(N - i):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nT = int(input())\nfor _", "gpt-3.5-turbo_prob": 0.5517800583437987}
{"id": "1284", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = [0] * 4\n    for i in range(n):\n        if a[i] < 60:\n            cnt[0] += 1\n        elif a[i] < 75:\n            cnt[1] += 1\n        elif a[i] < 90:\n            cnt[2] += 1", "llama3.1-8b-instruct_prob": 0.5247306491803487, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    if len(set(scores)) == 1:\n        print(-1)\n    else:\n        x = scores[n//4]\n        y = scores[n//2]\n        z = scores[3*n//4]\n        print(x, y, z)", "gpt-3.5-turbo_prob": 0.4752693508196513}
{"id": "1285", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for l in range(1, n + 1):\n        pre = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                pre[i][j]", "llama3.1-8b-instruct_prob": 0.5144221334686795, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    max_trace = 0\n    for r in range(N):\n        for c in range(N):\n            for l in range(1, N - max(r, c)):\n                submatrix = [A[i+r][j+c] for i in range(l) for j in range(l)]\n                max", "gpt-3.5-turbo_prob": 0.48557786653132046}
{"id": "1287", "llama3.1-8b-instruct_response": "def f(x):\n    vowels = 'aeiou'\n    return 1 if x in vowels else 0\n\nMOD = 10**9 + 7\nfor _ in range(int(input())):\n    s = input()\n    M = sum(f(c) for c in s) % MOD\n    print(M)", "llama3.1-8b-instruct_prob": 0.5691978819285539, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    M = sum(1 if c in 'aeiou' else 0 for c in s) % (10**9 + 7)\n    print(M)\n```", "gpt-3.5-turbo_prob": 0.4308021180714461}
{"id": "1288", "llama3.1-8b-instruct_response": "from collections import deque\n\ndef min_employees_to_inform(testcases):\n    for t in range(int(testcases)):\n        n, m = map(int, input().split())\n        graph = [[] for _ in range(n + 1)]\n        visited = [False] * (n + 1)\n        for _ in range(m):\n            u, v = map(int, input().split())\n            graph[u].append(v)\n            graph[v].append(u)\n\n        min_employees =", "llama3.1-8b-instruct_prob": 0.5402842682645631, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\ndef min_employees_to_inform(T, testcases):\n    result = []\n    for i in range(T):\n        N, M = testcases[i][0], testcases[i][1]\n        graph = defaultdict(list)\n        for j in range(M):\n            u, v = testcases[i][j+2]\n            graph[u].append(v)\n            graph[v].append(u)\n        visited = set()\n        count = 0\n       ", "gpt-3.5-turbo_prob": 0.459715731735437}
{"id": "1289", "llama3.1-8b-instruct_response": "def solve(n):\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n\nt = int(input())\nfor _ in range(t):\n", "llama3.1-8b-instruct_prob": 0.4399272509699209, "gpt-3.5-turbo_response": "```python\ndef count_weight_combinations(n):\n    return 2**(n-1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(count_weight_combinations(n))\n```", "gpt-3.5-turbo_prob": 0.5600727490300791}
{"id": "129", "llama3.1-8b-instruct_response": "def maxScore(A):\n    n = len(A)\n    max_score = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_score = max(max_score, A[i] + A[j] + i - j)\n    return max_score", "llama3.1-8b-instruct_prob": 0.21225165793875134, "gpt-3.5-turbo_response": "```python\ndef maxScoreSightseeingPair(A):\n    max_score = 0\n    prev_max = A[0]\n    for j in range(1, len(A)):\n        max_score = max(max_score, prev_max + A[j] - j)\n        prev_max = max(prev_max, A[j] + j)\n    return max_score\n```", "gpt-3.5-turbo_prob": 0.7877483420612488}
{"id": "1290", "llama3.1-8b-instruct_response": "n = int(input())\nif n < 10:\n    print(\"1\")\nelif n < 100:\n    print(\"2\")\nelif n < 1000:\n    print(\"3\")\nelse:\n    print(\"More than 3 digits\")", "llama3.1-8b-instruct_prob": 0.5139119205015578, "gpt-3.5-turbo_response": "n = input()\nif len(n) == 1:\n    print(\"1\")\nelif len(n) == 2:\n    print(\"2\")\nelif len(n) == 3:\n    print(\"3\")\nelse:\n    print(\"More than 3 digits\")", "gpt-3.5-turbo_prob": 0.48608807949844224}
{"id": "1293", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, q = map(int, input().split())\n    b = [list(map(int, input().split())) for _ in range(n)]\n    a = [0] * n\n    for i in range(n):\n        a[i] = min(a[:i] + a[i+1:] + [0])\n        for j in range(n):\n            b[i][j] = abs(a[i] - a[j])\n", "llama3.1-8b-instruct_prob": 0.5133031674250728, "gpt-3.5-turbo_response": "```python\nimport numpy as np\n\ndef find_initial_sequence(N, Q, matrix, queries):\n    A = [0] * N\n    for i in range(N):\n        A[i] = matrix[i][0]\n\n    print(' '.join(map(str, A)))\n\n    for query in queries:\n        p = query[0]\n        F = query[1:]\n        A[p-1] = F[p-1]\n        print(' '.join(map(str, A)))\n```", "gpt-3.5-turbo_prob": 0.48669683257492713}
{"id": "1295", "llama3.1-8b-instruct_response": "def sum_fibonacci(N, K):\n    fib = [0, 1]\n    for i in range(2, N + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n\n    result = 0\n    for i in range(K):\n        result += fib[N - i]\n\n    return result\n\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input().split())\n    print(sum_f", "llama3.1-8b-instruct_prob": 0.4281957334301298, "gpt-3.5-turbo_response": "```python\ndef fibonacci_sum(N, K):\n    if N <= 1:\n        return N\n    a, b = 0, 1\n    total = 1\n    for _ in range(2, N+1):\n        a, b = b, (a + b) % K\n        total = (total + b) % K\n    return total\n\nQ = int(input())\nfor _ in range(Q):\n    N, K = map(int, input", "gpt-3.5-turbo_prob": 0.5718042665698703}
{"id": "1297", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    if a < b:\n        print('<')\n    elif a > b:\n        print('>')\n    else:\n        print('=')", "llama3.1-8b-instruct_prob": 0.48880757093990734, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    A, B = map(int, input().split())\n    if A < B:\n        print('<')\n    elif A > B:\n        print('>')\n    else:\n        print('=')\n```", "gpt-3.5-turbo_prob": 0.5111924290600927}
{"id": "1298", "llama3.1-8b-instruct_response": "def batmobile_prototypes():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        speeds = list(map(int, input().split()))\n        standard_speed = speeds[0]\n        faster_prototypes = sum(1 for speed in speeds[1:] if speed > standard_speed)\n        print(faster_prototypes)\n\nbatmobile_prototypes()", "llama3.1-8b-instruct_prob": 0.5335640954248879, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    speeds = list(map(int, input().split()))\n    standard_speed = speeds[0]\n    count = sum(1 for speed in speeds[1:] if speed > standard_speed)\n    print(count)", "gpt-3.5-turbo_prob": 0.4664359045751121}
{"id": "1299", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_count = 0\n    max_type = 0\n    for i in range(1, 1001):\n        count = 0\n        prev = -1\n        for j in range(n):\n            if a[j] == i and j - prev > 1:\n                count += 1\n                prev =", "llama3.1-8b-instruct_prob": 0.49030615419561824, "gpt-3.5-turbo_response": "```python\ndef max_dishes_type(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        dishes = list(map(int, test_cases[i+1].split()))\n        max_count = 0\n        max_type = 0\n        for dish_type in set(dishes):\n            count = dishes.count(dish_type)\n            if count > max_count:\n                max_count = count\n", "gpt-3.5-turbo_prob": 0.5096938458043818}
{"id": "13", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, g, b = map(int, input().split())\n    min_days = (n + 1) // 2\n    days_in_good_season = min_days // (g // (b + g)) if g // (b + g) else min_days\n    days_in_bad_season = min_days - days_in_good_season\n    result = days_in_good_season * (b + g) + max(0,", "llama3.1-8b-instruct_prob": 0.3725425093231741, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    n, g, b = map(int, input().split())\n    good_cycles = math.ceil(n / (2 * g - g))\n    ans = max(n, good_cycles * (g + b) - b)\n    print(ans)\n```", "gpt-3.5-turbo_prob": 0.6274574906768259}
{"id": "130", "llama3.1-8b-instruct_response": "class Solution:\n    def numberOfArrays(self, s: str, k: int) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(n):\n            if s[i] != '0':\n                dp[i + 1] += dp[i]\n            j = i\n            while j >= 0 and i -", "llama3.1-8b-instruct_prob": 0.44821993551528283, "gpt-3.5-turbo_response": "```python\ndef numberOfArrays(s, k):\n    MOD = 10**9 + 7\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i - 1, max(i - 1 - len(str(k)), -1), -1):\n            if s[j] != '0' and int(s", "gpt-3.5-turbo_prob": 0.5517800644847172}
{"id": "1300", "llama3.1-8b-instruct_response": "import math\nfrom functools import reduce\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(N, K, arr):\n    arr.sort()\n    partitions = [arr[i::K] for i in range(K)]\n    return sum(reduce(gcd, partition) for partition in partitions)\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr", "llama3.1-8b-instruct_prob": 0.5402842775596162, "gpt-3.5-turbo_response": "from math import gcd\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    result = sum(arr[:K])\n    for i in range(1, N-K+1):\n        result = max(result, sum(arr[i:i+K]))\n    print(result)", "gpt-3.5-turbo_prob": 0.45971572244038383}
{"id": "1301", "llama3.1-8b-instruct_response": "def largest_number(digits):\n    digits.sort(reverse=True)\n    return ''.join(digits)\n\nt = int(input())\nfor _ in range(t):\n    n = input()\n    print(''.join(sorted(n, reverse=True)))", "llama3.1-8b-instruct_prob": 0.4999999969057364, "gpt-3.5-turbo_response": "def largest_number(N):\n    sorted_digits = sorted(str(N), reverse=True)\n    return int(''.join(sorted_digits))", "gpt-3.5-turbo_prob": 0.5000000030942636}
{"id": "1302", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    i = 1\n    while i * i <= n:\n        n -= i * i\n        i += 1\n    return 2 * i - 2\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5126367845147703, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    print(int(n**0.5))\n```", "gpt-3.5-turbo_prob": 0.48736321548522965}
{"id": "1303", "llama3.1-8b-instruct_response": "def solve():\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    mod = 10**9 + 7\n    ans = 1\n    for i in range(k):\n        ans = (ans * (n - i) * pow(i + 1, mod - 2, mod) % mod) % mod\n    a.sort()\n    j = 0\n    for i in range(n):\n", "llama3.1-8b-instruct_prob": 0.45567085675478186, "gpt-3.5-turbo_response": "MOD = 10**9 + 7\nT = int(input())\nfor _ in range(T):\n    N, K, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [0] * (M + 1)\n    dp[0] = 1\n    for i in range(N):\n        new_dp = dp[:]\n        for j in range(1, M + 1):\n            new_dp[j] =", "gpt-3.5-turbo_prob": 0.5443291432452181}
{"id": "1304", "llama3.1-8b-instruct_response": "def next_permutation(nums):\n    n = len(nums)\n    i = n - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i == -1:\n        return sorted(nums)\n    j = n - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    nums[i], nums[j] = nums[j], nums[i]\n    return nums[:i + 1", "llama3.1-8b-instruct_prob": 0.602760084092079, "gpt-3.5-turbo_response": "from itertools import permutations\nN, K = map(int, input().split())\npermutations_list = [list(map(int, input().split())) for _ in range(K)]\nfor perm in permutations_list:\n    next_perm = permutations(perm)\n    print(' '.join(map(str, next(next_perm))))", "gpt-3.5-turbo_prob": 0.39723991590792096}
{"id": "1305", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                if (i + 1 < n and grid[i + 1][j] == 1) or (j + 1 < n and grid[i", "llama3.1-8b-instruct_prob": 0.47543501429616397, "gpt-3.5-turbo_response": "```python\ndef is_safe(arrangement):\n    for i in range(len(arrangement)):\n        for j in range(len(arrangement[0])):\n            if arrangement[i][j] == 1:\n                if i > 0 and j > 0 and arrangement[i-1][j-1] == 1:\n                    continue\n                if i > 0 and j < len(arrangement[0])-1 and arrangement[i-1][j+1] == 1:\n                    continue", "gpt-3.5-turbo_prob": 0.524564985703836}
{"id": "1306", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    s = sorted(s)\n    return 'YES' if s[:5] == 'LTIME' and s[-5:] == 'EMITL' else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5718042572870791, "gpt-3.5-turbo_response": "def reorder_prefix_suffix(T, strings):\n    result = []\n    for s in strings:\n        if s.count('L') >= 1 and s.count('T') >= 1 and s.count('I') >= 1 and s.count('M') >= 1 and s.count('E') >= 1:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result", "gpt-3.5-turbo_prob": 0.42819574271292093}
{"id": "1307", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    mod = 10**9 + 7\n    ans = 1\n    for i in range(n):\n        ans = (ans * (k + i)) % mod\n    return str(ans)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.47543501806497873, "gpt-3.5-turbo_response": "```python\ndef winning_play_count(T, cases):\n    results = []\n    for case in cases:\n        N, K = map(int, case.split())\n        result = (K ** (N - 1)) % 1000000007\n        results.append(str(result))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5245649819350213}
{"id": "1308", "llama3.1-8b-instruct_response": "def check_password(password):\n    if not password.isalnum():\n        return \"Invalid\"\n    if len(password) != len(set(password)):\n        return \"Invalid\"\n    return \"Valid\"\n\npasswords = ['absdbads', 'asdjenfef', 'tyerbet', 'abc564']\nfor password in passwords:\n    print(check_password(password))", "llama3.1-8b-instruct_prob": 0.6078404381715596, "gpt-3.5-turbo_response": "def is_valid_password(s):\n    if len(s) != len(set(s)) and s.isalnum():\n        print(\"Invalid\")\n    else:\n        print(\"Valid\")", "gpt-3.5-turbo_prob": 0.39215956182844036}
{"id": "1309", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = ''\n    for i in range(1, n+1):\n        s += str(i) + '*' * (n - i)\n    print(s)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5272150846797422, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        print('*'*(K-i), end='')\n        for j in range(i, 0, -1):\n            print(j, end='')\n        print()\n```", "gpt-3.5-turbo_prob": 0.47278491532025785}
{"id": "1310", "llama3.1-8b-instruct_response": "T = int(input())\n\nfor _ in range(T):\n    s = input()\n    cost = 0\n    stamps = 0\n    for tea in s:\n        if tea == 'M':\n            cost += 3\n        else:\n            cost += 4\n        stamps += 1\n        if stamps == 6:\n            stamps = 0\n    print(cost)", "llama3.1-8b-instruct_prob": 0.2837733425195702, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    cost = 0\n    stamps = 0\n    for cup in s:\n        if cup == 'M':\n            cost += 3\n        else:\n            cost += 4\n        stamps += 1\n        if stamps == 6:\n            stamps = 0\n            cost -= min(cost, 4)\n    print(cost)\n```", "gpt-3.5-turbo_prob": 0.7162266574804298}
{"id": "1311", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(*range(1, k + 1), *range(k + 1, n + 1, -1))", "llama3.1-8b-instruct_prob": 0.5558947270331607, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    for i in range(1, n+1):\n        if k > 0:\n            print(i if i % 2 == 1 else -i, end=' ')\n            k -= 1\n        else:\n            print(i if i % 2 == 0 else -i, end=' ')\n    print()", "gpt-3.5-turbo_prob": 0.4441052729668393}
{"id": "1313", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a[1:]:\n        g = gcd(g, i)\n    if g > 1:\n        print(g)\n    else:\n        print(-1)", "llama3.1-8b-instruct_prob": 0.5595040372353999, "gpt-3.5-turbo_response": "```python\ndef find_minimal_divisor(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        x = 2\n        for num in A:\n            x = max(x, num)\n        for num in A:\n            while x % num != 0:\n                x += 1\n        if all", "gpt-3.5-turbo_prob": 0.4404959627646001}
{"id": "1315", "llama3.1-8b-instruct_response": "from collections import Counter\n\ndef unique_sets(teams):\n    unique = set()\n    for team in teams[1:]:\n        nums = tuple(sorted(map(int, team.split())))\n        unique.add(nums)\n    return len(unique)\n\nn = int(input())\nteams = [input() for _ in range(n)]\nprint(unique_sets(teams))", "llama3.1-8b-instruct_prob": 0.45379912246069004, "gpt-3.5-turbo_response": "from collections import Counter\nn = int(input())\nquestions = [input().split() for _ in range(n)]\nunique_sets = set(Counter(tuple(sorted(q)) for q in questions).values())\nprint(len(unique_sets))", "gpt-3.5-turbo_prob": 0.54620087753931}
{"id": "1318", "llama3.1-8b-instruct_response": "def solve():\n    L, K = map(int, input().split())\n    if K == L:\n        print(f'Case {cases+1}: {L-1}')\n        return\n    ans = 0\n    for i in range(1, L-K+1):\n        for j in range(i+K-1, L):\n            ans += 1\n    print(f'Case {cases+1}: {ans}')\n\ncases = 0\nwhile True:\n    try", "llama3.1-8b-instruct_prob": 0.5104434593035251, "gpt-3.5-turbo_response": "```python\ndef count_valid_triangles(T, cases):\n    results = []\n    for i in range(T):\n        L, K = cases[i]\n        if K > L:\n            results.append(0)\n        else:\n            results.append((K-1)*(K-2)//2)\n    return [\"Case {}: {}\".format(i+1, results[i]) for i in range(T)]\n```", "gpt-3.5-turbo_prob": 0.489556540696475}
{"id": "1319", "llama3.1-8b-instruct_response": "import heapq\nn, m = map(int, input().split())\nmax_heap = []\nfor _ in range(n + m):\n    x = int(input())\n    if x > 0:\n        heapq.heappush(max_heap, -x)\n    else:\n        if max_heap:\n            print(-heapq.heappop(max_heap))", "llama3.1-8b-instruct_prob": 0.4999999941405078, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\nN, M = map(int, input().split())\ncitizens = deque()\nwealth = []\nfor _ in range(N+M):\n    x = int(input())\n    if x == -1:\n        print(max(citizens))\n    else:\n        citizens.append(x)\n```", "gpt-3.5-turbo_prob": 0.5000000058594923}
{"id": "132", "llama3.1-8b-instruct_response": "def mincostTickets(days, costs):\n    last_day = 0\n    for day in days:\n        last_day = max(last_day, day)\n    dp = [0] * (last_day + 1)\n    for i in range(1, last_day + 1):\n        if i in days:\n            dp[i] = min(dp[max(0, i-1)] + costs[0], dp[max(0, i-7)] + costs[1], dp", "llama3.1-8b-instruct_prob": 0.5558947188615971, "gpt-3.5-turbo_response": "def mincostTickets(days, costs):\n    dp = [0] * (days[-1] + 1)\n    for i in range(1, days[-1] + 1):\n        if i not in days:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = min(dp[max(0, i - 1)] + costs[0], dp[max(0, i - 7)] + costs[1], dp[max(", "gpt-3.5-turbo_prob": 0.4441052811384028}
{"id": "1320", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print('B')\n    else:\n        print('A')", "llama3.1-8b-instruct_prob": 0.5768343522878054, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print('A')\n    else:\n        print('B')\n```", "gpt-3.5-turbo_prob": 0.42316564771219456}
{"id": "1321", "llama3.1-8b-instruct_response": "def solve(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, 4*b + a\n    return a\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.5148963656238924, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = N * (N + 1) * (N + 2) // 6\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.4851036343761076}
{"id": "1322", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if scores[i] >= scores[k-1]:\n            count += 1\n        else:\n            break\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.36281541835807285, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    scores = list(map(int, input().split()))\n    scores.sort(reverse=True)\n    qualified_teams = sum(1 for score in scores if score >= scores[K-1])\n    print(qualified_teams)\n```", "gpt-3.5-turbo_prob": 0.6371845816419272}
{"id": "1324", "llama3.1-8b-instruct_response": "def max_gcd():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if k > n or n == k == 1:\n            print(-1)\n        else:\n            print(n // k)\n\nmax_gcd()", "llama3.1-8b-instruct_prob": 0.5919211893416501, "gpt-3.5-turbo_response": "def max_gcd(N, K):\n    if K < N:\n        print(-1)\n    else:\n        print(K) if N % K == 0 else print(1)", "gpt-3.5-turbo_prob": 0.40807881065834994}
{"id": "1325", "llama3.1-8b-instruct_response": "def solve():\n    a, b, c, d = map(int, input().split())\n    apples = (a + c) - d + (d % 2)\n    oranges = (c + a) - d + (d % 2)\n    mangoes = d - apples - oranges\n    print(apples, mangoes, oranges)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.48955655047698204, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    a, b, c, d = map(int, input().split())\n    x = (a + c - b) // 2\n    y = (a + b - c) // 2\n    z = (b + c - a) // 2\n    print(x, y, z)", "gpt-3.5-turbo_prob": 0.510443449523018}
{"id": "1326", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    f = list(map(int, input().split()))\n    total = 0\n    for i in range(n):\n        total += min(f[i], n - i)\n    print(total)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4642425864254237, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    F = list(map(int, input().split()))\n    total_distance = 0\n    current_gas = 0\n    for i in range(1, N):\n        current_gas += F[i-1]\n        total_distance += 1\n        if current_gas < i:\n            break\n    print(total_distance)\n```", "gpt-3.5-turbo_prob": 0.5357574135745762}
{"id": "1327", "llama3.1-8b-instruct_response": "class Node:\n    def __init__(self, v, i):\n        self.v = v\n        self.i = i\n        self.left = None\n        self.right = None\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[float('inf'), 0] for _ in range(4 * n)]\n\n    def update(self, node, l, r, i, v):\n        if l == r:\n           ", "llama3.1-8b-instruct_prob": 0.44671632490696245, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef min_cost_max_length(N, Q, cities, queries):\n    n = len(cities)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + cities[i]\n\n    def f(x, y):\n        return abs(cities[y - 1] - cities[x - 1]) + y - x\n\n    def check_cost(cost", "gpt-3.5-turbo_prob": 0.5532836750930376}
{"id": "1328", "llama3.1-8b-instruct_response": "def min_operations(n):\n    n = str(n)\n    operations = 0\n    for i in range(len(n)):\n        if n[i] != '4' and n[i] != '7':\n            operations += 1\n    if '4' not in n and '7' not in n:\n        operations += len(n)\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_operations(n))", "llama3.1-8b-instruct_prob": 0.43080400480254033, "gpt-3.5-turbo_response": "def min_operations_to_lucky_number(N):\n    count = 0\n    while '4' in N or '7' in N:\n        count += 1\n        N = str(int(N) + 1)\n    return count", "gpt-3.5-turbo_prob": 0.5691959951974597}
{"id": "133", "llama3.1-8b-instruct_response": "def minimumLength(s):\n    n = len(s)\n    freq = [0] * 4\n    for c in s:\n        freq[ord(c) - ord('Q')] += 1\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            f = [0] * 4\n            for k in range(i, j):\n                f[ord(s[k]) - ord('Q')] += 1\n           ", "llama3.1-8b-instruct_prob": 0.3790227310810972, "gpt-3.5-turbo_response": "def balancedString(s):\n    from collections import Counter\n    count = Counter(s)\n    n = len(s)\n    res = n\n    i = 0\n    for j in range(n):\n        count[s[j]] -= 1\n        while i < n and all(count[c] <= n/4 for c in 'QWER'):\n            res = min(res, j - i + 1)\n            count[s[i]] += 1\n            i += 1\n   ", "gpt-3.5-turbo_prob": 0.6209772689189028}
{"id": "1330", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    A, B = map(int, input().split())\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    C = [x + 10**9 * i for i, x in enumerate(C)]\n    D = [x + 10**9 * i for i, x in enumerate(D)]\n    C.sort()\n    D.sort()\n   ", "llama3.1-8b-instruct_prob": 0.5206783078280287, "gpt-3.5-turbo_response": "```python\ndef max_states_won(T, testcases):\n    results = []\n    for i in range(T):\n        A, B = testcases[i][0]\n        c = testcases[i][1]\n        d = testcases[i][2]\n        c_sorted = sorted(enumerate(c), key=lambda x: x[1], reverse=True)\n        d_sorted = sorted(enumerate(d), key=lambda x: x[1], reverse=True)\n        states_won = 0", "gpt-3.5-turbo_prob": 0.47932169217197124}
{"id": "1331", "llama3.1-8b-instruct_response": "def solve(X, K):\n    return (X / 2) + ((X % 2) * (K - 1) / (2 * K - 1))\n\nT = int(input())\nfor _ in range(T):\n    X, K = map(float, input().split())\n    print(f\"{solve(X, K):.4f}\")", "llama3.1-8b-instruct_prob": 0.4740600661321863, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    X, K = map(int, input().split())\n    print(X / (2 ** math.floor(math.log2(K))))\n```", "gpt-3.5-turbo_prob": 0.5259399338678137}
{"id": "1332", "llama3.1-8b-instruct_response": "import math\nimport sys\n\nn = int(input())\n\ndef log2(x):\n    return math.log(x) / math.log(2)\n\nfor _ in range(n):\n    i, j = map(int, input().split())\n    dist = abs(log2(i) - log2(j))\n    print(int(dist))", "llama3.1-8b-instruct_prob": 0.47065586087614764, "gpt-3.5-turbo_response": "```python\ndef shortest_path_length(i, j):\n    return len(bin(i ^ j)) - 3\n```", "gpt-3.5-turbo_prob": 0.5293441391238524}
{"id": "1333", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    n = int(input())\n    b = list(map(int, input().split()))\n    ans = 1\n    for i in range(n):\n        if b[i] == b[i-1]:\n            continue\n        ans = (ans * 2) % MOD\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.6354250349409047, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    result = 1\n    for i in range(n):\n        result = (result * (b[i] + 1)) % (10**9 + 7)\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.3645749650590952}
{"id": "1334", "llama3.1-8b-instruct_response": "def min_supw(n, supw):\n    dp = [[0] * 3 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(3):\n            if i == 1:\n                dp[i][j] = supw[i - 1]\n            else:\n                for k in range(3):\n                    if k != j and k != (j + 1) % 3:\n                        dp", "llama3.1-8b-instruct_prob": 0.265535332903834, "gpt-3.5-turbo_response": "```python\nN = int(input())\nminutes = list(map(int, input().split()))\ndp = [0, minutes[0], minutes[0] + minutes[1]]\nfor i in range(3, N+1):\n    dp.append(min(dp[i-1], dp[i-2]) + minutes[i-1])\nprint(min(dp[-1], dp[-2]))\n```", "gpt-3.5-turbo_prob": 0.7344646670961659}
{"id": "1335", "llama3.1-8b-instruct_response": "n = int(input())\na = list(map(int, input().split()))\n\nfrom collections import Counter\n\nc = Counter(a)\ndays = 0\nwhile c:\n    days += 1\n    for k in list(c.keys()):\n        if c[k] >= 2:\n            c[k] -= 2\n        else:\n            del c[k]\n\nprint(days)", "llama3.1-8b-instruct_prob": 0.47065586764400774, "gpt-3.5-turbo_response": "from collections import Counter\nN = int(input())\na = list(map(int, input().split()))\ncounter = Counter(a)\nresult = max(counter.values())\nif result % 2 == 0:\n    print(result // 2)\nelse:\n    print(result // 2 + 1)", "gpt-3.5-turbo_prob": 0.5293441323559922}
{"id": "1336", "llama3.1-8b-instruct_response": "def count_digits():\n    for case in range(1, int(input()) + 1):\n        a, b = map(int, input().split())\n        counts = [0] * 10\n        for page in range(a, b + 1):\n            for digit in str(page):\n                counts[int(digit)] += 1\n        print(f'Case {case}:', end=' ')\n        for i in range(10):\n            print(f'{i}:{counts[i]}',", "llama3.1-8b-instruct_prob": 0.4999999969057363, "gpt-3.5-turbo_response": "```python\ndef count_digits_in_range(start, end):\n    result = [0] * 10\n    for i in range(start, end + 1):\n        for digit in str(i):\n            result[int(digit)] += 1\n    return result\n\ncases = ['10 15', '912 912', '900 999']\noutput = []\nfor i, case in enumerate(cases, 1):\n    if case == '':\n        break\n    start, end =", "gpt-3.5-turbo_prob": 0.5000000030942637}
{"id": "1337", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    r = int(input())\n\n    max_people = max(p)\n    total_candies = max_people * max(p)\n\n    for people in p:\n        total_candies = math.gcd(total_candies, people)\n\n    total_candies += r\n\n    print(total_candies)", "llama3.1-8b-instruct_prob": 0.47836410265054946, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    P = list(map(int, input().split()))\n    R = int(input())\n    min_candies = (sum(P) - N*R)\n    print(min_candies)\n```", "gpt-3.5-turbo_prob": 0.5216358973494506}
{"id": "1338", "llama3.1-8b-instruct_response": "n = int(input())\nfor _ in range(n):\n    a, e = map(float, input().split())\n    print(f'{a * 10**e:.2f}')", "llama3.1-8b-instruct_prob": 0.5691959864082214, "gpt-3.5-turbo_response": "```python\nn = int(input().split()[0])\nfor _ in range(n):\n    A, E = map(float, input().split())\n    print('{:.2f}'.format(A * (10 ** E)))\n```", "gpt-3.5-turbo_prob": 0.43080401359177856}
{"id": "1339", "llama3.1-8b-instruct_response": "import math\n\ndef solve():\n    k = int(input())\n    n = 1\n    while True:\n        count = 0\n        temp = n\n        while temp > 0:\n            count += 1\n            temp = math.floor(temp / 10)\n        if count == k - 1:\n            return str(n)\n        n += 1\n\nfor _ in range(int(input())):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.45437502108595085, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    k = int(input())\n    if k % 2 == 0:\n        print(k // 2 * 9)\n    else:\n        print(k // 2 * 10)", "gpt-3.5-turbo_prob": 0.545624978914049}
{"id": "1340", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = float('-inf')\n    max_subseq = []\n    curr_sum = 0\n    curr_subseq = []\n    rev_subseq = []\n    rev_idx = []\n    for i in range(n):\n        if curr_sum <= 0:\n            curr_sum = a[i]\n            curr_subseq = [i+1]\n        else:\n           ", "llama3.1-8b-instruct_prob": 0.3777117874177186, "gpt-3.5-turbo_response": "```python\ndef max_contiguous_subsequence_sum(arr):\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n   ", "gpt-3.5-turbo_prob": 0.6222882125822814}
{"id": "1341", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[j - 1]:\n                ans += 1\n    print(ans + 1)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4441052758216838, "gpt-3.5-turbo_response": "```python\ndef count_ways_to_remove_subsequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        A = case[1]\n        count = 0\n        current_count = 1\n        for i in range(1, N):\n            if A[i] > A[i-1]:\n                current_count += 1\n            else:\n                count += current_count * (current_count + 1) // ", "gpt-3.5-turbo_prob": 0.5558947241783162}
{"id": "1342", "llama3.1-8b-instruct_response": "def f(a, x):\n    n = len(a)\n    i = 0\n    while i < n:\n        if x < a[i]:\n            return i + 1\n        x *= 2\n        x -= a[i]\n        i += 1\n    return i\n\nfor _ in range(int(input())):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(f(f(a, x), x", "llama3.1-8b-instruct_prob": 0.47406005441320187, "gpt-3.5-turbo_response": "```python\nfrom math import ceil\nT = int(input())\nfor _ in range(T):\n    N, x = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    days = 0\n    for a in A:\n        while x < a:\n            x *= 2\n            days += 1\n            if x == 0:\n                break\n        if x >= a:\n            x = 2 * a\n", "gpt-3.5-turbo_prob": 0.5259399455867981}
{"id": "1343", "llama3.1-8b-instruct_response": "def is_double_string(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef is_special(s):\n    n = len(s)\n    for i in range(n):\n        t = s[:i] + s[i + 1:]\n        if is_double_string(t):\n            return True\n    return False\n\nd = int(input())\nfor _ in range", "llama3.1-8b-instruct_prob": 0.43080401066203244, "gpt-3.5-turbo_response": "```python\ndef is_special_dish(dishes):\n    result = []\n    for dish in dishes:\n        if len(dish) % 2 == 0 and dish[:len(dish)//2] == dish[len(dish)//2:]:\n            result.append('YES')\n        elif dish[:-1] == dish[1:] or dish[:-2] == dish[2:]:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result\n```", "gpt-3.5-turbo_prob": 0.5691959893379676}
{"id": "1344", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[0] + a[1])", "llama3.1-8b-instruct_prob": 0.48807179036721193, "gpt-3.5-turbo_response": "def smallest_sum(arr):\n    arr.sort()\n    return arr[0] + arr[1]", "gpt-3.5-turbo_prob": 0.5119282096327882}
{"id": "1345", "llama3.1-8b-instruct_response": "def decode_message(message):\n    decoded_message = ''\n    for i in range(0, len(message), 3):\n        ascii_code = int(message[i:i+3])\n        decoded_message += chr(ascii_code)\n    return decoded_message\n\nt = int(input())\nfor _ in range(t):\n    message = input()\n    print(decode_message(message))", "llama3.1-8b-instruct_prob": 0.3640773536821571, "gpt-3.5-turbo_response": "```python\nn = int(input())\nfor _ in range(n):\n    encoded_message = input()\n    decoded_message = ''.join(chr(int(encoded_message[i:i+2])) for i in range(0, len(encoded_message), 2))\n    print(decoded_message)\n```", "gpt-3.5-turbo_prob": 0.6359226463178429}
{"id": "1346", "llama3.1-8b-instruct_response": "def modInverse(n, p):\n    return pow(n, p - 2, p)\n\ndef nCrModPFermat(n, r, p):\n    if n < r:\n        return 0\n    if r == 0:\n        return 1\n    fac = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fac[i] = (fac[i - 1] * i) % p\n   ", "llama3.1-8b-instruct_prob": 0.5398518574361593, "gpt-3.5-turbo_response": "```python\ndef count_numbers_with_weight(N, W):\n    MOD = 10**9 + 7\n    if W < 0:\n        W = -W\n    if W > 9 * (N - 1):\n        return 0\n    if W == 0:\n        return 1 if N == 1 else 0\n    dp = [[0] * (9 * (N - 1) + 1) for _ in range(N +", "gpt-3.5-turbo_prob": 0.4601481425638406}
{"id": "1347", "llama3.1-8b-instruct_response": "```python\ndef chefbook(posts):\n    special_friends = set(map(int, posts[1].split()[1:]))\n    posts = [list(map(str, post.split())) for post in posts[2:]]\n\n    special_posts = sorted([post for post in posts if int(post[0]) in special_friends], key=lambda x: int(x[1]), reverse=True)\n    other_posts = sorted([post for post in posts if int(post[0]) not in special_friends], key", "llama3.1-8b-instruct_prob": 0.4404959651649485, "gpt-3.5-turbo_response": "from collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef news_feed_ordering(N, M, special_friends, posts):\n    special_friends_set = set(special_friends)\n    special_posts = []\n    other_posts = []\n    for post in posts:\n        friend, popularity, content = post\n        if friend in special_friends_set:\n            heappush(special_posts, (-popularity, content))\n        else:\n            heappush(other_posts, (-popularity", "gpt-3.5-turbo_prob": 0.5595040348350515}
{"id": "1349", "llama3.1-8b-instruct_response": "def check_divisibility_by_permutation(n):\n    return '1' if sum(int(digit) for digit in str(n)) % 3 == 0 else '0'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(check_divisibility_by_permutation(n))", "llama3.1-8b-instruct_prob": 0.549060580332223, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = input()\n    if '0' in N or sum(map(int, N)) % 3 != 0:\n        print(0)\n    else:\n        print(1)\n```", "gpt-3.5-turbo_prob": 0.450939419667777}
{"id": "135", "llama3.1-8b-instruct_response": "def validateStackSequences(pushed, popped):\n    stack, j = [], 0\n    for x in pushed:\n        stack.append(x)\n        while stack and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return not stack", "llama3.1-8b-instruct_prob": 0.4597157248820957, "gpt-3.5-turbo_response": "def validateStackSequences(pushed, popped):\n    stack = []\n    j = 0\n    for x in pushed:\n        stack.append(x)\n        while stack and j < len(popped) and stack[-1] == popped[j]:\n            stack.pop()\n            j += 1\n    return j == len(popped)", "gpt-3.5-turbo_prob": 0.5402842751179042}
{"id": "1351", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    for i in range(n):\n        if arr[i] == i:\n            arr[i] = i\n        elif arr[i] < i:\n            arr[i] = 0\n\n    print(*arr)", "llama3.1-8b-instruct_prob": 0.4441052789159475, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = [0] * n\n    for num in arr:\n        if result[num-1] == 0:\n            result[num-1] = num\n    print(' '.join(map(str, result)))", "gpt-3.5-turbo_prob": 0.5558947210840526}
{"id": "1352", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    contributions = list(map(int, input().split()))\n    shades = set(contributions)\n    shades = sorted(shades)\n    for shade in shades:\n        count = contributions.count(shade)\n        print(f'{shade}: {count}')", "llama3.1-8b-instruct_prob": 0.4060714662508579, "gpt-3.5-turbo_response": "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    contributions = list(map(int, input().split()))\n    shades = Counter(contributions)\n    for shade, count in sorted(shades.items()):\n        print(f\"{shade}: {count}\")", "gpt-3.5-turbo_prob": 0.5939285337491422}
{"id": "1353", "llama3.1-8b-instruct_response": "def check_feasibility(test_cases):\n    for test_case in test_cases:\n        n = int(test_case[0])\n        logs = [list(map(int, test_case[i].split())) for i in range(1, n + 1)]\n        logs.sort(key=lambda x: x[0])\n        prev_time = logs[0][0]\n        prev_car1 = [logs[0][1], logs[0][2]]\n        prev_car2 = [logs[0][", "llama3.1-8b-instruct_prob": 0.5522124723531356, "gpt-3.5-turbo_response": "def is_feasible(T, test_cases):\n    results = []\n    for case in test_cases:\n        n = int(case[0])\n        positions = [list(map(int, x.split())) for x in case[1:]]\n        feasible = True\n        for i in range(n-1):\n            t1, x1, y1, X1, Y1 = positions[i]\n            t2, x2, y2, X2, Y2 = positions[i+", "gpt-3.5-turbo_prob": 0.44778752764686436}
{"id": "1354", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\nMOD = 10**9 + 7\n\ndef dfs(node, parent, adj, dp, color):\n    dp[node][0] = 1\n    for child in adj[node]:\n        if child != parent:\n            dfs(child, node, adj, dp, color)\n            for c in range(k):\n                dp[node][c] = (dp[node][c] + dp[child][c]) % MOD\n            for c in range(k", "llama3.1-8b-instruct_prob": 0.48807179019445396, "gpt-3.5-turbo_response": "```python\ndef count_ways_to_color_tree(n, k, edges):\n    MOD = 10**9 + 7\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n\n    def dfs(v, p, c):\n        ways = 1\n        for u in adj[v]:\n            if u != p:\n                ways *= (k", "gpt-3.5-turbo_prob": 0.5119282098055461}
{"id": "1355", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        if a[i] <= n:\n            b[i] = a[i] + a[i]\n        else:\n            k = a[i]\n            while k >= n:\n                k //= 2\n            b[i] = a[n - (a[i] - k)]\n    print(*b)\n\nt = int", "llama3.1-8b-instruct_prob": 0.5000000046986799, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    output = []\n    for i in range(n):\n        if arr[i] <= n:\n            output.append(arr[i] + arr[arr[i]-1])\n        else:\n            while arr[i] >= n:\n                arr[i] //= 2\n            output.append(arr[arr[i]-1])\n    print(*output)", "gpt-3.5-turbo_prob": 0.4999999953013202}
{"id": "1356", "llama3.1-8b-instruct_response": "def pancake_stack(N):\n    MOD = 1000000007\n    if N == 1:\n        return 1\n    dp = [0] * (N + 1)\n    dp[1] = 1\n    for i in range(2, N + 1):\n        for j in range(1, i):\n            if i - j >= 2 and i - j + j - 1 <= i:\n                dp[i] += dp[i -", "llama3.1-8b-instruct_prob": 0.3777117874837934, "gpt-3.5-turbo_response": "MOD = 1000000007\ndp = [0] * 1001\ndp[0] = 1\nfor i in range(1, 1001):\n    for j in range(1, i + 1):\n        dp[i] = (dp[i] + dp[i - j]) % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "gpt-3.5-turbo_prob": 0.6222882125162066}
{"id": "1357", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in a:\n        if i == 5:\n            if s < 5:\n                print(\"NO\")\n                return\n            s -= 5\n        elif i == 10:\n            if s < 5:\n                print(\"NO\")\n                return\n            s -= 5\n        elif i == 15:\n            if s < ", "llama3.1-8b-instruct_prob": 0.47108706343530915, "gpt-3.5-turbo_response": "```python\ndef can_serve_all(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        coins = test_cases[i][1]\n        change_5 = 0\n        change_10 = 0\n        possible = True\n        for coin in coins:\n            if coin == 5:\n                change_5 += 1\n            elif coin == 10:\n                if change_5 > 0:\n", "gpt-3.5-turbo_prob": 0.5289129365646908}
{"id": "1358", "llama3.1-8b-instruct_response": "def min_letters_to_remove(words):\n    for word, k in words:\n        freq = {}\n        for char in word:\n            freq[char] = freq.get(char, 0) + 1\n        max_freq = max(freq.values())\n        min_freq = min(freq.values())\n        diff = max_freq - min_freq\n        if diff > k:\n            ans = 0\n            for char in freq:\n                freq[char] = 0\n                max_freq = max(freq.values())\n", "llama3.1-8b-instruct_prob": 0.4482513996537091, "gpt-3.5-turbo_response": "```python\ndef min_letters_to_remove(word, k):\n    letter_count = {}\n    for letter in word:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    min_count = min(letter_count.values())\n    if max_count - min_count <= k:\n        return 0\n    else:\n        return len(word) - (min_count + k", "gpt-3.5-turbo_prob": 0.5517486003462909}
{"id": "1359", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n    ans = 0\n    for i in a:\n        ans += (i // g) - 1\n    print(ans)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nfor _ in range(int(input", "llama3.1-8b-instruct_prob": 0.6206776032774839, "gpt-3.5-turbo_response": "def min_time_to_equal_temperatures(T, testcases):\n    result = []\n    for i in range(0, len(testcases), 2):\n        N = int(testcases[i])\n        temperatures = list(map(int, testcases[i+1].split()))\n        odd_count = sum(1 for temp in temperatures if temp % 2 != 0)\n        result.append(odd_count)\n    return result", "gpt-3.5-turbo_prob": 0.3793223967225161}
{"id": "136", "llama3.1-8b-instruct_response": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: list[list[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        top, bottom, left, right = [max(row) for row in grid], [max(col) for col in zip(*grid)], \\\n                                  [max(row) for row in zip(*grid)], [max(col) for col in zip(*grid)]\n        return sum(min(top[i][j], left[j], right", "llama3.1-8b-instruct_prob": 0.4477875176910194, "gpt-3.5-turbo_response": "```python\ndef maxIncreaseKeepingSkyline(grid):\n    max_row = [max(row) for row in grid]\n    max_col = [max(col) for col in zip(*grid)]\n    return sum(min(max_row[i], max_col[j]) - val for i, row in enumerate(grid) for j, val in enumerate(row))\n```", "gpt-3.5-turbo_prob": 0.5522124823089807}
{"id": "1360", "llama3.1-8b-instruct_response": "def min_flower_ugliness():\n    t = int(input())\n    for _ in range(t):\n        s1 = input()\n        s2 = input()\n        n, m = len(s1), len(s2)\n        min_ugliness = float('inf')\n        for i in range(min(n, m) + 1):\n            ugliness = 0\n            for j in range(i, n + m - i):\n                petal_length = min(j - i +", "llama3.1-8b-instruct_prob": 0.5216358969928105, "gpt-3.5-turbo_response": "```python\ndef min_ugliness(T, strings):\n    result = []\n    for i in range(0, len(strings), 2):\n        s1 = strings[i]\n        s2 = strings[i+1]\n        common = set(s1) & set(s2)\n        min_ugliness = float('inf')\n        for c in common:\n            idx1 = s1.index(c)\n            idx2 = s2.index(c)\n            petal1 = len(s1", "gpt-3.5-turbo_prob": 0.47836410300718946}
{"id": "1361", "llama3.1-8b-instruct_response": "def prefix_sum(n, k, arr):\n    mod = 10**9 + 7\n    for _ in range(k):\n        prefix = [0] * n\n        prefix[0] = arr[0]\n        for i in range(1, n):\n            prefix[i] = (prefix[i-1] + arr[i]) % mod\n        arr = prefix\n    return ' '.join(map(str, arr))\n\nn, k = map(int, input().split())\n", "llama3.1-8b-instruct_prob": 0.5604471116691528, "gpt-3.5-turbo_response": "n, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nfor _ in range(k):\n    prefix_sum = [0] * n\n    prefix_sum[0] = A[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + A[i]\n    A = prefix_sum\n\nA = [x % (10**9 + 7) for x in A]\nprint(*", "gpt-3.5-turbo_prob": 0.43955288833084716}
{"id": "1363", "llama3.1-8b-instruct_response": "def hash_function(n, d):\n    p = 23\n    mod = 10**9 + 7\n    hash_val = 0\n    for _ in range(n):\n        hash_val = (hash_val * p + d) % mod\n    return hash_val\n\nt = int(input())\nfor _ in range(t):\n    n, d = map(int, input().split())\n    print(hash_function(n, d))", "llama3.1-8b-instruct_prob": 0.5595040413288284, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, d = map(int, input().split())\n    y = int(str(d) * n)\n    p = 23\n    y_str = str(y)\n    m = len(y_str)\n    result = sum(int(y_str[i]) * (p ** (m - i - 1)) for i in range(m)) % (10**9 + 7)\n    print(result)", "gpt-3.5-turbo_prob": 0.44049595867117153}
{"id": "1364", "llama3.1-8b-instruct_response": "import math\nfrom collections import defaultdict\n\ndef solve():\n    n, c = map(int, input().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: (x[0] % c, x[1] % c))\n    checkpoints = set()\n    moves = 0\n    for x, y in points:\n        if (x %", "llama3.1-8b-instruct_prob": 0.5373264687570833, "gpt-3.5-turbo_response": "```python\ndef min_checkpoints_and_moves(T, cases):\n    results = []\n    for case in cases:\n        N, c = map(int, case[0].split())\n        x_coordinates = [int(x) for x, y in case[1:]]\n        y_coordinates = [int(y) for x, y in case[1:]]\n        x_mod_c = [x % c for x in x_coordinates]\n        y_mod_c = [y % c for y in", "gpt-3.5-turbo_prob": 0.46267353124291666}
{"id": "1365", "llama3.1-8b-instruct_response": "M = 10**9 + 7\ndef solve(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        if s[i] == 'c':\n            dp[i + 1] = (dp[i + 1] + dp[i] * 2) % M\n        elif s[i] == 'k':\n            dp[i + 1]", "llama3.1-8b-instruct_prob": 0.48475495046586414, "gpt-3.5-turbo_response": "def count_unique_strings(s):\n    if 'c' in s or 'k' in s:\n        return '0'\n    else:\n        return str(pow(2, s.count('f'), 10**9+7))", "gpt-3.5-turbo_prob": 0.5152450495341359}
{"id": "1366", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    max_length = 0\n    current_sum = 0\n    current_length = 0\n    for num in a:\n        current_sum += num\n        current_length += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = current_length\n", "llama3.1-8b-instruct_prob": 0.4243225642830428, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n    print(max_sum)\n```", "gpt-3.5-turbo_prob": 0.5756774357169572}
{"id": "1367", "llama3.1-8b-instruct_response": "import random\nimport math\n\ndef solve(N, roads):\n    edges = []\n    for u, v, c in roads:\n        edges.append((u, v, c))\n        edges.append((v, u, c))\n    edges.sort(key=lambda x: x[2])\n    mst = []\n    parent = list(range(N + 1))\n    rank = [0] * (N + 1)\n\n    def find(x):\n        if parent[x] != x:\n            parent", "llama3.1-8b-instruct_prob": 0.5357574176984428, "gpt-3.5-turbo_response": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(node, parent, graph, dp, ans):\n    s = 1\n    c = 0\n    for child, cost in graph[node]:\n        if child != parent:\n            dfs(child, node, graph, dp, ans)\n            s += dp[child]\n            c += dp[child] + cost\n    dp[node] = c / s\n    ans[0] += 2 *", "gpt-3.5-turbo_prob": 0.46424258230155735}
{"id": "1368", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    h, x = map(int, input().split())\n    print('Yes' if h >= x else 'No')", "llama3.1-8b-instruct_prob": 0.5201373089777109, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    h, x = map(int, input().split())\n    print(\"Yes\" if h >= x else \"No\")", "gpt-3.5-turbo_prob": 0.47986269102228907}
{"id": "1369", "llama3.1-8b-instruct_response": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef victory_number(n):\n    victory = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            victory += i\n    return victory\n\nt = int(input())\nfor _ in range", "llama3.1-8b-instruct_prob": 0.49999999639947745, "gpt-3.5-turbo_response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef victory_number(n):\n    prime_sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum\n\nT = int", "gpt-3.5-turbo_prob": 0.5000000036005224}
{"id": "137", "llama3.1-8b-instruct_response": "class Solution:\n    def minimumOneBitOperations(self, n: int) -> int:\n        return bin(n).count('1') * 2 - n", "llama3.1-8b-instruct_prob": 0.5402842730697278, "gpt-3.5-turbo_response": "def minimumOperations(n: int) -> int:\n    count = 0\n    while n:\n        if n & 1 == 0:\n            n >>= 1\n        elif n & 2 == 0:\n            n -= 1\n        else:\n            n += 1\n        count += 1\n    return count", "gpt-3.5-turbo_prob": 0.4597157269302722}
{"id": "1370", "llama3.1-8b-instruct_response": "from collections import defaultdict\nfrom functools import lru_cache\n\ndef solve(K, N):\n    @lru_cache(None)\n    def f(x):\n        if len(x) == 3:\n            return {int(x)}\n        res = set()\n        for i in range(len(x)):\n            for j in range(i + 1, len(x)):\n                res.update(f(x[:i] + x[j + 1:] + x[i:j] + x[j + 1:]))\n       ", "llama3.1-8b-instruct_prob": 0.50969384349298, "gpt-3.5-turbo_response": "```python\nfrom itertools import permutations\n\ndef process_number(num):\n    num_str = str(num)\n    result = []\n    for perm in permutations(num_str):\n        result.append(int(''.join(perm)))\n    return result\n\ndef distinct_numbers(K, N):\n    num = K\n    for _ in range(N):\n        num = process_number(num)\n    return len(set(num))\n\nT = 1\ntestcases = [('123', 5)]\n\nfor i in range(T):\n    K", "gpt-3.5-turbo_prob": 0.49030615650702003}
{"id": "1371", "llama3.1-8b-instruct_response": "def gru_minions(N, K, minions):\n    return sum(minion % 7 == 0 for minion in (minion + K for minion in minions))", "llama3.1-8b-instruct_prob": 0.511192434574069, "gpt-3.5-turbo_response": "```python\ndef wolverine_minions(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, K = map(int, case[0].split())\n        minions = list(map(int, case[1].split()))\n        wolverine_count = sum(1 for m in minions if (m + K) % 7 == 0)\n        result.append(wolverine_count)\n    return result\n```", "gpt-3.5-turbo_prob": 0.4888075654259309}
{"id": "1372", "llama3.1-8b-instruct_response": "```python\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef determine_closer(x1, y1, x2, y2):\n    distance_a = calculate_distance(0, 0, x1, y1)\n    distance_b = calculate_distance(0, 0, x2, y2)\n    if distance_a <", "llama3.1-8b-instruct_prob": 0.4543750175841227, "gpt-3.5-turbo_response": "def closest_truck(data):\n    results = []\n    for i in range(1, len(data), 2):\n        x1, y1, x2, y2 = map(int, data[i].split())\n        distance_a = abs(x1) + abs(y1)\n        distance_b = abs(x2) + abs(y2)\n        if distance_a < distance_b:\n            results.append('A IS CLOSER')\n        else:\n            results.append('B IS CLO", "gpt-3.5-turbo_prob": 0.5456249824158773}
{"id": "1373", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_len = 0\n    curr_len = 1\n    curr_set = set()\n\n    for i in range(n):\n        if a[i] not in curr_set:\n            curr_set.add(a[i])\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n           ", "llama3.1-8b-instruct_prob": 0.4754350290929317, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    flavors = [0] * (k + 1)\n    left, right, ans = 0, 0, 0\n    while right < n:\n        flavors[a[right]] += 1\n        while min(flavors) > 0:\n            flavors[a[left]] -= 1\n            left +=", "gpt-3.5-turbo_prob": 0.5245649709070682}
{"id": "1374", "llama3.1-8b-instruct_response": "def solve():\n    t = int(input())\n    for _ in range(t):\n        f1, f2, r1, r2, r3, r4 = map(int, input().split())\n        p1, p2, p3, p4 = map(float, input().split())\n        e1 = f1 - r1 * p1 * p2 + r2 * p1 * (1 - p2)\n        e2 = f2 - r3 *", "llama3.1-8b-instruct_prob": 0.43515074641287443, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    F1, F2, R1, R2, R3, R4 = map(int, input().split())\n    p1, p2, p3, p4 = map(float, input().split())\n    \n    profit1 = p1 * R1 + (1 - p1) * R2 - F1\n    profit2 = p3 * R3 + (1 - p3)", "gpt-3.5-turbo_prob": 0.5648492535871256}
{"id": "1375", "llama3.1-8b-instruct_response": "n = int(input())\nfor _ in range(n):\n    num = int(input())\n    print(int(str(num)[::-1]))", "llama3.1-8b-instruct_prob": 0.47836409905002697, "gpt-3.5-turbo_response": "def reverse_integer(T, integers):\n    result = []\n    for num in integers:\n        result.append(int(str(num)[::-1]))\n    return result", "gpt-3.5-turbo_prob": 0.521635900949973}
{"id": "1377", "llama3.1-8b-instruct_response": "def calculate_average_difference(data):\n    results = []\n    for temp in data[1:]:\n        high, low, normal_high, normal_low = map(float, temp.split())\n        high_diff = (high - normal_high) + (low - normal_low)\n        avg_diff = round(high_diff / 2, 1)\n        if avg_diff > 0:\n            results.append(f'{avg_diff} DEGREE(S) ABOVE NORMAL')\n        else:\n            results.append(f'{abs(avg_diff", "llama3.1-8b-instruct_prob": 0.4482199382722711, "gpt-3.5-turbo_response": "```python\ndef calculate_average_difference(data):\n    num_data_sets = int(data[0])\n    results = []\n    for i in range(1, num_data_sets + 1):\n        today_high, today_low, normal_high, normal_low = map(int, data[i].split())\n        avg_diff = ((today_high - normal_high) + (today_low - normal_low)) / 2\n        if avg_diff < 0:\n            results.append(f\"{abs(avg_diff):.", "gpt-3.5-turbo_prob": 0.5517800617277289}
{"id": "1378", "llama3.1-8b-instruct_response": "def distribute_particles(A, N, K):\n    particles = [0] * K\n    for _ in range(A):\n        particles[0] += 1\n        i = 0\n        while i < K - 1 and particles[i] > N:\n            particles[i] = 0\n            particles[i + 1] += 1\n            i += 1\n    return ' '.join(map(str, particles)) + '\\n'\n\nA, N, K =", "llama3.1-8b-instruct_prob": 0.4686702597397411, "gpt-3.5-turbo_response": "```python\ndef nuclear_reactor(A, N, K):\n    chambers = [0] * K\n    for _ in range(A):\n        chambers[0] += 1\n        i = 0\n        while chambers[i] > N:\n            chambers[i] -= N + 1\n            i += 1\n            if i == K:\n                break\n            chambers[i] += 1\n    return chambers\n```", "gpt-3.5-turbo_prob": 0.5313297402602589}
{"id": "1379", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\ndef encrypt_string(s):\n    freq = Counter(s)\n    encrypted = ''.join(f'{char}{count}' for char, count in freq.items())\n    return encrypted\n\ns = input()\nprint(encrypt_string(s))\n```", "llama3.1-8b-instruct_prob": 0.5216358942358222, "gpt-3.5-turbo_response": "from collections import Counter\ndef encrypt_string(s):\n    letter_count = Counter(s)\n    encrypted_string = ''.join([f\"{letter}{count}\" for letter, count in letter_count.items()])\n    return encrypted_string", "gpt-3.5-turbo_prob": 0.47836410576417765}
{"id": "138", "llama3.1-8b-instruct_response": "def maxProduct(nums):\n    max_len = 0\n    curr_len = 0\n    neg_count = 0\n    for num in nums:\n        if num == 0:\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n            neg_count = 0\n        elif num < 0:\n            neg_count += 1\n            curr_len += 1\n        else:\n            curr_len += 1\n        if neg_count %", "llama3.1-8b-instruct_prob": 0.5245649764210448, "gpt-3.5-turbo_response": "def getMaxLen(nums):\n    max_len = 0\n    pos = 0\n    neg = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n            if neg > 0:\n                neg += 1\n            max_len = max(max_len, pos)\n        elif num < 0:\n            temp = neg\n            neg = pos + 1\n            pos = temp\n            neg += 1\n            max_len", "gpt-3.5-turbo_prob": 0.4754350235789552}
{"id": "1380", "llama3.1-8b-instruct_response": "n = int(input())\n\nfor _ in range(n):\n    num = int(input())\n    print(num ** 2 - num)", "llama3.1-8b-instruct_prob": 0.41271217586263625, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n*(n-1))//2)", "gpt-3.5-turbo_prob": 0.5872878241373638}
{"id": "1381", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k, d = map(int, input().split())\n    x = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    x = [0] + x + [k]\n    l = [0] + l + [0]\n    ans = 0\n    i = 1\n    while i <= n + 1:\n        if", "llama3.1-8b-instruct_prob": 0.44671632974098463, "gpt-3.5-turbo_response": "def max_distance(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N, K, D = map(int, test_cases[i].split())\n        X = list(map(int, test_cases[i+1].split()))\n        L = list(map(int, test_cases[i+2].split()))\n        max_dist = 0\n        last_switch = -1\n        current_lane = 1\n        for j in range(N", "gpt-3.5-turbo_prob": 0.5532836702590154}
{"id": "1382", "llama3.1-8b-instruct_response": "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\n\ncost = 0\nfor num in a:\n    cost += max(0, -num)\n\ncost = min(cost, (len(a) - 1) * x + min(a))\nprint(cost)", "llama3.1-8b-instruct_prob": 0.6311339760018806, "gpt-3.5-turbo_response": "def minimal_cost_to_make_all_positive(N, array, X):\n    min_val = min(array)\n    cost = 0\n    for num in array:\n        if num < 0:\n            cost += abs(num - min_val)\n    print(cost * X)", "gpt-3.5-turbo_prob": 0.3688660239981194}
{"id": "1383", "llama3.1-8b-instruct_response": "def solve(N, K1, K2, P1, P2, P3, P4):\n    mod = 100000007\n    res = 0\n    for i in range(K1, K2+1):\n        if i % 2 == 0:\n            res += P2\n        elif i % 2 == 1:\n            res += P3\n        for j in range(1, N+1):\n            if i % j == ", "llama3.1-8b-instruct_prob": 0.5144221367501045, "gpt-3.5-turbo_response": "```python\ndef packing_cost(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, k1, k2 = case[0]\n        P1, P2, P3, P4 = case[1]\n        total_cost = 0\n        for i in range(k1, k2+1):\n            acid_count = i // 2\n            base_count = i // 3\n            neutral_count = i // 6\n           ", "gpt-3.5-turbo_prob": 0.4855778632498955}
{"id": "1384", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(n - k + 1):\n        cnt = 0\n        for j in range(i, i + k):\n            if s[j] == '0':\n                cnt += 1\n        ans = max(ans, (cnt == k) + (cnt + 1) * (k - cnt) // 2)\n    print", "llama3.1-8b-instruct_prob": 0.47090816305971533, "gpt-3.5-turbo_response": "```python\ndef max_pizza_time(T, cases):\n    result = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        A = case[1]\n        max_pizza = 0\n        count = 0\n        for i in range(N):\n            if A[i] == '0':\n                count += 1\n            if i >= K:\n                if A[i-K] == '0':\n                    count -= 1", "gpt-3.5-turbo_prob": 0.5290918369402846}
{"id": "1386", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans += 1 / (n * m)\n    print(f'{ans:.6f}')\n\nt = int(input())\nfor _ in range(t):\n    solve()\n    sys.stdout.flush()\n```", "llama3.1-8b-instruct_prob": 0.528359690480546, "gpt-3.5-turbo_response": "```python\ndef calculate_probability_sum(N, M):\n    return float(N + M - 1)\n```", "gpt-3.5-turbo_prob": 0.471640309519454}
{"id": "1389", "llama3.1-8b-instruct_response": "def process_text(lines):\n    result = []\n    for line in lines:\n        line = ''.join(e for e in line if e.isalnum() or e.isspace())\n        words = line.split()\n        words.reverse()\n        result.append(' '.join(words))\n    return result[::-1]\n\nlines = ['2', 'This is a sample piece of text to illustrate this ', 'problem.  If you are smart you will solve this right.', '']\nprint(process_text(lines))", "llama3.1-8b-instruct_prob": 0.5691959922677137, "gpt-3.5-turbo_response": "```python\ndef reverse_words(lines):\n    return [' '.join(line.strip('.').split()[::-1]) for line in lines[::-1] if line.strip()]\n```", "gpt-3.5-turbo_prob": 0.43080400773228633}
{"id": "139", "llama3.1-8b-instruct_response": "def minDeletionSize(A):\n    n = len(A[0])\n    res = 0\n    for i in range(n):\n        for j in range(1, len(A)):\n            if A[j][i] < A[j-1][i]:\n                res += 1\n                break\n    return res", "llama3.1-8b-instruct_prob": 0.5600727524140091, "gpt-3.5-turbo_response": "```python\ndef minDeletionSize(A):\n    return sum(list(A[i] > A[i+1] for i in range(len(A)-1)))\n```", "gpt-3.5-turbo_prob": 0.4399272475859909}
{"id": "1390", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n, q = map(int, input().split())\n    total = n + q\n    prob = q / total\n    expected = 0\n    for i in range(1, q + 1):\n        expected += i * (prob ** i) * (1 - prob) ** (i - 1)\n    print(f\"{expected:.6f}\")", "llama3.1-8b-instruct_prob": 0.43080400773228633, "gpt-3.5-turbo_response": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    print(\"{:.10f}\".format((q*(n+1))/(n-q+1)))\n```", "gpt-3.5-turbo_prob": 0.5691959922677137}
{"id": "1391", "llama3.1-8b-instruct_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def update(self, node, start, end, index, value):\n        if start == end:\n            self.tree[node] = max(self.tree[node], value)\n            return\n        mid = (start + end) // 2\n        if index <= mid:\n           ", "llama3.1-8b-instruct_prob": 0.5000000061885275, "gpt-3.5-turbo_response": "```python\ndef max_customers_dining(T, cases):\n    result = []\n    for case in cases:\n        N, K = case[0], case[1]\n        customers = case[2:]\n        customers.sort(key=lambda x: x[1])\n        compartments = [0] * (K + 1)\n        count = 0\n        for customer in customers:\n            for i in range(customer[2], 0, -1):\n                if compartments[i] ==", "gpt-3.5-turbo_prob": 0.49999999381147253}
{"id": "1392", "llama3.1-8b-instruct_response": "x, y = map(int, input().split())\nprint(x + y)", "llama3.1-8b-instruct_prob": 0.45379911886016755, "gpt-3.5-turbo_response": "def sum_of_numbers(X, Y):\n    return X + Y", "gpt-3.5-turbo_prob": 0.5462008811398325}
{"id": "1393", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    max_speed = 0\n    for i in arr:\n        if i > max_speed:\n            max_speed = i\n            ans += 1\n    print(ans)", "llama3.1-8b-instruct_prob": 0.42184758530695476, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    speeds = list(map(int, input().split()))\n    max_speed = float('inf')\n    count = 0\n    for speed in speeds:\n        if speed <= max_speed:\n            count += 1\n            max_speed = speed\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.5781524146930452}
{"id": "1394", "llama3.1-8b-instruct_response": "def solve(N):\n    MOD = 10**9 + 7\n    ans = 0\n    for i in range(1, int(N**0.5) + 1):\n        j = 1\n        while i * j <= N:\n            ans += 1\n            j += 1\n    return ans % MOD\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(solve(N))", "llama3.1-8b-instruct_prob": 0.439927254353851, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = ((N**0.5)//1)**2 % 1000000007\n    print(int(result))\n```", "gpt-3.5-turbo_prob": 0.560072745646149}
{"id": "1395", "llama3.1-8b-instruct_response": "def solve(A, B):\n    if (A - B) % (B - A) == 0:\n        if A - B == 0:\n            return -1\n        return (B - A) // math.gcd(A - B, B - A) + 1\n    return 0\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    A, B = map(int, input().split())\n    print(solve(A, B))", "llama3.1-8b-instruct_prob": 0.5771936746255542, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    diff = abs(a - b)\n    factors = [i for i in range(1, int(diff**0.5)+1) if diff % i == 0]\n    factors += [diff//i for i in factors if i*i != diff]\n    result = sum(1 for f in factors if f > 1 and pow(a, f, diff) == pow(b", "gpt-3.5-turbo_prob": 0.4228063253744459}
{"id": "1396", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, m, x, y = map(int, input().split())\n    if n == m:\n        if n == x == y:\n            print(\"Chefirnemo\")\n        else:\n            print(\"Pofik\")\n    elif n > m:\n        if (n - m) % (x - y) == 0 and (n - m) // (x - y) <= (n - 1)", "llama3.1-8b-instruct_prob": 0.4813516249427028, "gpt-3.5-turbo_response": "```python\ndef can_move_to_discourse(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, X, Y = map(int, case.split())\n        if (N - 1) % X == 0 and (M - 1) % Y == 0:\n            results.append(\"Chefirnemo\")\n        elif N >= 2 and M >= 2 and (N - 2) % X == 0 and (", "gpt-3.5-turbo_prob": 0.5186483750572972}
{"id": "1397", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.525939930303783, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_left\n\ndef find_min_M(N, A):\n    lis = []\n    for a in A:\n        pos = bisect_left(lis, a)\n        if pos == len(lis):\n            lis.append(a)\n        else:\n            lis[pos] = a\n    return len(lis)\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_l", "gpt-3.5-turbo_prob": 0.47406006969621695}
{"id": "1398", "llama3.1-8b-instruct_response": "def largest_subsequence(s):\n    return len(set(s))\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(largest_subsequence(s))", "llama3.1-8b-instruct_prob": 0.49999999323213984, "gpt-3.5-turbo_response": "```python\ndef largest_subsequence_size(T, strings):\n    results = []\n    for string in strings:\n        distinct_chars = set(string)\n        results.append(len(distinct_chars))\n    return results\n```", "gpt-3.5-turbo_prob": 0.50000000676786}
{"id": "14", "llama3.1-8b-instruct_response": "def check_square(a1, b1, a2, b2):\n    return \"Yes\" if (a1 == b1 == a2 or a1 == b1 == b2 or a1 == a2 == b1 or a1 == a2 == b2 or\n                     a1 == b2 == a2 or a1 == b2 == b1 or a2 == b1 == b2 or a2 == b1 == a1 or\n                     a2", "llama3.1-8b-instruct_prob": 0.4999999941405079, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    if (a1 == a2 and b1 + b2 == a1) or (a1 == b2 and b1 + a2 == a1) or (b1 == a2 and a1 + b2 == b1) or (b1 == b", "gpt-3.5-turbo_prob": 0.5000000058594921}
{"id": "140", "llama3.1-8b-instruct_response": "def findMaximumXOR(nums):\n    n = len(nums)\n    max_len = len(bin(max(nums)))-2\n    root = {}\n    for num in nums:\n        node = root\n        for i in range(max_len-1, -1, -1):\n            bit = (num >> i) & 1\n            if bit not in node:\n                node[bit] = {}\n            node = node[bit]\n    max_xor = 0\n    for num in", "llama3.1-8b-instruct_prob": 0.44821994228314305, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        ans = 0\n        mask = 0\n        for i in range(31, -1, -1):\n            mask |= 1 << i\n            s = set()\n            for num in nums:\n                s.add(num & mask)\n            tmp = ans | (1 << i)\n            for prefix in s:\n                if tmp ^ prefix in s:\n                    ans", "gpt-3.5-turbo_prob": 0.5517800577168569}
{"id": "1400", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, l, r = map(int, input().split())\n    min_sum = n * l\n    max_sum = 0\n    for i in range(l, r + 1):\n        max_sum += i\n        max_sum += max_sum // 2\n    print(min_sum, max_sum)", "llama3.1-8b-instruct_prob": 0.5000000051589247, "gpt-3.5-turbo_response": "def min_max_sum(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, L, R = map(int, case.split())\n        if L == 1:\n            min_sum = N\n        else:\n            min_sum = (2 ** L) - 2 + (N - L)\n        max_sum = (2 ** R) - 1 + (N - R) * (2 ** (R - 1))\n        results.append((min", "gpt-3.5-turbo_prob": 0.4999999948410753}
{"id": "1401", "llama3.1-8b-instruct_response": "n, k = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\ncount = 0\ntotal = 0\n\nfor price in prices:\n    if total + price <= k:\n        total += price\n        count += 1\n    else:\n        break\n\nprint(count)", "llama3.1-8b-instruct_prob": 0.5378681318383642, "gpt-3.5-turbo_response": "def max_chocolates(n, k, prices):\n    prices.sort()\n    count = 0\n    for price in prices:\n        if k >= price:\n            k -= price\n            count += 1\n        else:\n            break\n    return count", "gpt-3.5-turbo_prob": 0.4621318681616357}
{"id": "1402", "llama3.1-8b-instruct_response": "def count_iterations():\n    t = int(input())\n    for _ in range(t):\n        a = input()\n        b = input()\n        count = 0\n        while b != '0':\n            count += 1\n            u = int(a, 2) ^ int(b, 2)\n            v = int(a, 2) & int(b, 2)\n            a = bin(u)[2:]\n            b = bin(v)[2:].zfill(len(b))\n       ", "llama3.1-8b-instruct_prob": 0.474060060272694, "gpt-3.5-turbo_response": "```python\ndef add(A, B):\n    count = 0\n    while int(B, 2) > 0:\n        U = bin(int(A, 2) ^ int(B, 2))[2:]\n        V = bin(int(A, 2) & int(B, 2))[2:]\n        A = U\n        B = bin(int(V, 2) << 1)[2:]\n        count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.5259399397273059}
{"id": "1403", "llama3.1-8b-instruct_response": "def numDecodings(s):\n    MOD = 10**9 + 7\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if s[i-1] != '0':\n            dp[i] += dp[i-", "llama3.1-8b-instruct_prob": 0.4370274957822891, "gpt-3.5-turbo_response": "```python\ndef numDecodings(s):\n    MOD = 10**9 + 7\n    a, b, c = 0, 1, 0\n    for ch in s:\n        c = b * (ch > '0')\n        c += a * (9 < int(s[i-1:i+1]) < 27)\n        a, b = b, c % MOD\n    return b\n```", "gpt-3.5-turbo_prob": 0.562972504217711}
{"id": "1404", "llama3.1-8b-instruct_response": "def solve():\n    r, g, b = map(int, input().split())\n    k = int(input())\n    return max(max((r + k - 1) // k, (g + k - 1) // k, (b + k - 1) // k), max(r, g, b))\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5259399332335292, "gpt-3.5-turbo_response": "```python\ndef min_balloons_to_take_out(R, G, B, K):\n    max_color = max(R, G, B)\n    total_balloons = R + G + B\n    remaining_balloons = total_balloons - max_color\n    if max_color >= K:\n        return remaining_balloons + K - 1\n    else:\n        return total_balloons\n```", "gpt-3.5-turbo_prob": 0.47406006676647083}
{"id": "1405", "llama3.1-8b-instruct_response": "def solve(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i * i <= n and n % i == 0:\n            count += 1\n    return count // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.5000000035018282, "gpt-3.5-turbo_response": "```python\nimport math\ndef count_sabotages_at_level_5(N):\n    result = 0\n    for i in range(1, N+1):\n        if math.gcd(i, N) == i:\n            result += 1\n    return result\n```", "gpt-3.5-turbo_prob": 0.4999999964981718}
{"id": "1406", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    xor = 0\n    for i in a:\n        xor ^= i\n    even = [0] * 20\n    odd = [0] * 20\n    for i in a:\n        cnt = 0\n        for j in range(20):\n            if (", "llama3.1-8b-instruct_prob": 0.42691610580608697, "gpt-3.5-turbo_response": "```python\nfrom sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for _ in range(q):\n        p = int(stdin.readline())\n        even_count = sum(bin(p ^ ai).count('1') % 2 == 0 for ai in a)\n        odd_count = n - even_count\n        stdout.write(f\"{", "gpt-3.5-turbo_prob": 0.573083894193913}
{"id": "1408", "llama3.1-8b-instruct_response": "def solve(a, b):\n    n = len(a)\n    mod = 10**9 + 7\n    dp = [[0] * 2 for _ in range(n)]\n    dp[0][0] = 1 if a[0] == '1' else 0\n    dp[0][1] = 1 if b[0] == '1' else 0\n    for i in range(1, n):\n        if a[i] ==", "llama3.1-8b-instruct_prob": 0.4783641002502011, "gpt-3.5-turbo_response": "```python\ndef count_good_subsets(a, b):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == '1' and b[i] == '2':\n            count += 1\n        elif a[i] == '2' and b[i] == '1':\n            count += 2\n    return pow(2, count, 10**9 + 7)\n\nt = int(input())\nfor _", "gpt-3.5-turbo_prob": 0.521635899749799}
{"id": "1409", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(bin(n).count('1'))", "llama3.1-8b-instruct_prob": 0.4079356692134153, "gpt-3.5-turbo_response": "```python\ndef count_ones(n):\n    return bin(n).count('1')\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(count_ones(N))\n```", "gpt-3.5-turbo_prob": 0.5920643307865847}
{"id": "141", "llama3.1-8b-instruct_response": "def numRescueBoats(people, limit):\n    people.sort()\n    l, r = 0, len(people) - 1\n    res = 0\n    while l <= r:\n        if people[l] + people[r] <= limit:\n            l += 1\n        r -= 1\n        res += 1\n    return res", "llama3.1-8b-instruct_prob": 0.4999999910025953, "gpt-3.5-turbo_response": "def numRescueBoats(people, limit):\n    people.sort()\n    i, j = 0, len(people) - 1\n    boats = 0\n    while i <= j:\n        if people[i] + people[j] <= limit:\n            i += 1\n        j -= 1\n        boats += 1\n    return boats", "gpt-3.5-turbo_prob": 0.5000000089974048}
{"id": "1410", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    s, n, m, k = map(int, input().split())\n    ans = 1\n    for i in range(k, m + 1):\n        ans *= (m - i) / (s - i)\n    print(round(1 - ans, 6))", "llama3.1-8b-instruct_prob": 0.40807880917880707, "gpt-3.5-turbo_response": "```python\nfrom math import comb\n\ndef probability(S, N, M, K):\n    total_ways = comb(S, N)\n    favorable_ways = comb(M-1, K) * comb(S-M, N-K)\n    return favorable_ways / total_ways\n\nT = int(input())\nfor _ in range(T):\n    S, N, M, K = map(int, input().split())\n    print(\"{:.6f}\".format(probability(S, N, M", "gpt-3.5-turbo_prob": 0.5919211908211929}
{"id": "1411", "llama3.1-8b-instruct_response": "```python\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    x, r, a, b = map(int, input().split())\n    g = math.gcd(a, b)\n    a //= g\n    b //= g\n    lcm = (a * b) // math.gcd(a, b)\n    ans = (x * a) // math.gcd(x * a, lcm) - 1\n    print(ans)\n```", "llama3.1-8b-instruct_prob": 0.5768343522878054, "gpt-3.5-turbo_response": "```python\nimport math\ndef meeting_count(X, R, A, B):\n    distance = 2 * math.pi * R * X\n    relative_speed = A - B\n    time_taken = distance / relative_speed\n    meetings = time_taken / (2 * math.pi * R)\n    return int(meetings)\n```", "gpt-3.5-turbo_prob": 0.42316564771219456}
{"id": "1412", "llama3.1-8b-instruct_response": "```python\nimport re\n\nfor _ in range(int(input())):\n    n = int(input())\n    rules = {}\n    for _ in range(n):\n        a, b = input().split()\n        rules[a] = b\n    s = input()\n    for a, b in rules.items():\n        s = s.replace(a, b)\n    s = re.sub(r'^0*', '', s)\n    s = re.sub(r'0+$', '', s)\n    if '.' in s", "llama3.1-8b-instruct_prob": 0.5259399397273059, "gpt-3.5-turbo_response": "```python\ndef find_real_password(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        rules = {}\n        for j in range(i+1, i+1+N):\n            ci, pi = test_cases[j].split()\n            rules[ci] = pi\n        S = test_cases[i+N+1]\n        real_password = ''\n        for char in S:\n            if char", "gpt-3.5-turbo_prob": 0.47406006027269404}
{"id": "1415", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    l, r = 0, len(s) - 1\n    flag = False\n\n    while l < r:\n        if s[l] != s[r]:\n            flag = True\n            break\n        l += 1\n        r -= 1\n\n    print('YES' if not flag else 'NO')", "llama3.1-8b-instruct_prob": 0.6124539381197869, "gpt-3.5-turbo_response": "```python\ndef is_palindrome_possible(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            if s[i + 1:n - i] == s[i + 1:n - i][::-1] or s[i:n - i - 1] == s[i:n - i - 1][::-1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n", "gpt-3.5-turbo_prob": 0.38754606188021307}
{"id": "142", "llama3.1-8b-instruct_response": "def findLUSlength(strs):\n    def is_subsequence(s, t):\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\n    strs.sort(key=len, reverse=True)\n    for s in strs:\n        is_sub = False\n        for t in strs:\n            if s != t and is", "llama3.1-8b-instruct_prob": 0.43377217566894133, "gpt-3.5-turbo_response": "def findLUSlength(strs):\n    def issubsequence(s, t):\n        t = iter(t)\n        return all(c in t for c in s)\n    for s in sorted(strs, key=len, reverse=True):\n        if sum(issubsequence(s, t) for t in strs) == 1:\n            return len(s)\n    return -1", "gpt-3.5-turbo_prob": 0.5662278243310587}
{"id": "143", "llama3.1-8b-instruct_response": "def totalFruit(tree):\n    max_fruit = 0\n    left = 0\n    fruit_count = {}\n    for right in range(len(tree)):\n        fruit_count[tree[right]] = fruit_count.get(tree[right], 0) + 1\n        while len(fruit_count) > 2:\n            fruit_count[tree[left]] -= 1\n            if fruit_count[tree[left]] == 0:\n                del fruit_count[tree[left]]\n            left += ", "llama3.1-8b-instruct_prob": 0.5878637244690574, "gpt-3.5-turbo_response": "def totalFruit(tree):\n    max_fruits = 0\n    start = 0\n    fruit_count = {}\n    for end in range(len(tree)):\n        fruit_count[tree[end]] = fruit_count.get(tree[end], 0) + 1\n        while len(fruit_count) > 2:\n            fruit_count[tree[start]] -= 1\n            if fruit_count[tree[start]] == 0:\n                del fruit_count[tree[start]]\n            start += ", "gpt-3.5-turbo_prob": 0.41213627553094256}
{"id": "144", "llama3.1-8b-instruct_response": "def minSteps(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n        dp[i] = min(dp[i],", "llama3.1-8b-instruct_prob": 0.4851036343761076, "gpt-3.5-turbo_response": "def minSteps(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i + minSteps(n // i)\n    return n", "gpt-3.5-turbo_prob": 0.5148963656238923}
{"id": "145", "llama3.1-8b-instruct_response": "def judge_point24(nums):\n    def dfs(nums):\n        if len(nums) == 1:\n            return abs(nums[0] - 24) < 1e-8\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                a, b = nums[i], nums[j]\n                rest = nums[:i] + nums[i + 1:j] + nums[j + 1:]\n                if dfs(rest + [a +", "llama3.1-8b-instruct_prob": 0.541662845630879, "gpt-3.5-turbo_response": "def judgePoint24(nums):\n    EPSILON = 0.001\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < EPSILON\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i != j:\n                newNums = [nums[k] for k in range(len(nums)) if k != i and k != j]\n                for op in ['+', '-', '*', '/']:\n                    if (op", "gpt-3.5-turbo_prob": 0.4583371543691209}
{"id": "146", "llama3.1-8b-instruct_response": "```python\ndef decode_string(s):\n    stack = []\n    cur_num = 0\n    cur_str = ''\n    for c in s:\n        if c.isdigit():\n            cur_num = cur_num * 10 + int(c)\n        elif c == '[':\n            stack.append(cur_str)\n            stack.append(cur_num)\n            cur_str = ''\n            cur_num = 0\n        elif c == ']':\n            num = stack.pop()\n            prev_str = stack.pop()\n            cur_str", "llama3.1-8b-instruct_prob": 0.4225797298546571, "gpt-3.5-turbo_response": "def decodeString(s):\n    stack = []\n    currentNum = 0\n    currentString = ''\n    for char in s:\n        if char.isdigit():\n            currentNum = currentNum * 10 + int(char)\n        elif char == '[':\n            stack.append(currentString)\n            stack.append(currentNum)\n            currentString = ''\n            currentNum = 0\n        elif char == ']':\n            num = stack.pop()\n            prevString = stack.pop()\n            currentString = prevString", "gpt-3.5-turbo_prob": 0.5774202701453428}
{"id": "147", "llama3.1-8b-instruct_response": "class Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        engineers = sorted(zip(efficiency, speed), reverse=True)\n        max_performance = 0\n        mod = 10**9 + 7\n        total_speed = 0\n        heap = []\n        for efficiency, speed in engineers:\n            heappush(heap, speed)\n            total_speed += speed\n            if len(heap)", "llama3.1-8b-instruct_prob": 0.45513205326572254, "gpt-3.5-turbo_response": "```python\nimport heapq\n\ndef maxPerformance(n, speed, efficiency, k):\n    mod = 10**9 + 7\n    engineers = zip(efficiency, speed)\n    engineers = sorted(engineers, key=lambda x: -x[0])\n    speed_heap = []\n    speed_sum, perf = 0, 0\n    for e, s in engineers:\n        if len(speed_heap) > k - 1:\n            speed_sum -= heapq.heappop(speed", "gpt-3.5-turbo_prob": 0.5448679467342775}
{"id": "148", "llama3.1-8b-instruct_response": "```python\ndef maxProfit(difficulty, profit, worker):\n    difficulty.sort()\n    profit.sort()\n    worker.sort()\n    i, j, k = len(difficulty) - 1, len(profit) - 1, len(worker) - 1\n    ans = 0\n    while i >= 0 and j >= 0 and k >= 0:\n        if difficulty[i] <= worker[k]:\n            ans += profit[j]\n            i -= 1\n           ", "llama3.1-8b-instruct_prob": 0.25093830060064415, "gpt-3.5-turbo_response": "class Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n        jobs = sorted(zip(difficulty, profit))\n        worker.sort()\n        ans = i = best = 0\n        for ability in worker:\n            while i < len(jobs) and ability >= jobs[i][0]:\n                best = max(jobs[i][1], best)\n                i += 1\n            ans += best\n        return ans", "gpt-3.5-turbo_prob": 0.7490616993993559}
{"id": "149", "llama3.1-8b-instruct_response": "def removeDuplicates(s, k):\n    stack = []\n    for c in s:\n        if stack and stack[-1][0] == c:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n        else:\n            stack.append([c, 1])\n    return ''.join(c * cnt for c, cnt in stack)", "llama3.1-8b-instruct_prob": 0.43080401359177856, "gpt-3.5-turbo_response": "def removeDuplicates(s, k):\n    stack = []\n    for char in s:\n        if not stack or stack[-1][0] != char:\n            stack.append([char, 1])\n        else:\n            stack[-1][1] += 1\n            if stack[-1][1] == k:\n                stack.pop()\n    return ''.join(char * count for char, count in stack)", "gpt-3.5-turbo_prob": 0.5691959864082214}
{"id": "15", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    area = min(a - x, x) * min(b - y, y)\n    print(2 * area + min(a, b))", "llama3.1-8b-instruct_prob": 0.4281957303358661, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, x, y = map(int, input().split())\n    print(max(a-x-1, x) * max(b-y-1, y))\n```", "gpt-3.5-turbo_prob": 0.5718042696641339}
{"id": "150", "llama3.1-8b-instruct_response": "def partitionDisjoint(A):\n    n = len(A)\n    max_left = [0] * n\n    max_left[0] = A[0]\n    for i in range(1, n):\n        max_left[i] = max(max_left[i - 1], A[i])\n    tail = 0\n    for i in range(n - 1):\n        if max_left[i] <= A[i + 1]:\n            tail = i + 1\n            break\n", "llama3.1-8b-instruct_prob": 0.4597157221251075, "gpt-3.5-turbo_response": "def partitionDisjoint(A):\n    max_left = A[0]\n    curr_max = A[0]\n    partition_idx = 0\n    for i in range(1, len(A)):\n        if A[i] < max_left:\n            max_left = curr_max\n            partition_idx = i\n        else:\n            curr_max = max(curr_max, A[i])\n    return partition_idx + 1", "gpt-3.5-turbo_prob": 0.5402842778748925}
{"id": "152", "llama3.1-8b-instruct_response": "def distributeBalls(position, m):\n    position.sort()\n    left, right = 0, position[-1] - position[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        if sum((max(0, position[i] - position[i - m + 1] - mid) for i in range(m, len(position) + 1))) >= m * mid:\n            left = mid\n        else:\n           ", "llama3.1-8b-instruct_prob": 0.4873632246035031, "gpt-3.5-turbo_response": "def maxDistance(position, m):\n    position.sort()\n    left, right = 1, position[-1] - position[0]\n    while left < right:\n        mid = (left + right + 1) // 2\n        count = 1\n        prev = position[0]\n        for i in range(1, len(position)):\n            if position[i] - prev >= mid:\n                count += 1\n                prev = position[i]\n        if count >= m", "gpt-3.5-turbo_prob": 0.5126367753964969}
{"id": "154", "llama3.1-8b-instruct_response": "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: list[int], verticalCuts: list[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        maxH = max(b - a for a, b in zip([0] + horizontalCuts, horizontalCuts + [h]))\n        maxW = max(b - a for a, b in zip([0] + verticalCuts, verticalCuts", "llama3.1-8b-instruct_prob": 0.5133031578370324, "gpt-3.5-turbo_response": "```python\ndef maxArea(h, w, horizontalCuts, verticalCuts):\n    horizontalCuts.sort()\n    verticalCuts.sort()\n    max_h = max(horizontalCuts[0], h - horizontalCuts[-1])\n    max_v = max(verticalCuts[0], w - verticalCuts[-1])\n    for i in range(1, len(horizontalCuts)):\n        max_h = max(max_h, horizontalCuts[i] - horizontalCuts[i-", "gpt-3.5-turbo_prob": 0.4866968421629677}
{"id": "155", "llama3.1-8b-instruct_response": "def maxJumps(arr, d):\n    n = len(arr)\n    max_jumps = 0\n    for i in range(n):\n        left, right = i - 1, i + 1\n        max_reach_left, max_reach_right = i - 1, i + 1\n        while left >= 0 and max_reach_left - left <= d:\n            if arr[left] < arr[i]:\n                max_reach_left = left\n            left", "llama3.1-8b-instruct_prob": 0.4024424230591949, "gpt-3.5-turbo_response": "```python\ndef maxJumps(arr, d):\n    n = len(arr)\n    dp = [1] * n\n    for a, i in sorted((a, i) for i, a in enumerate(arr)):\n        for j in range(i - 1, max(i - d - 1, -1), -1):\n            if arr[j] >= a:\n                break\n            dp[i] = max(dp[i], dp[j] + 1)\n        for j", "gpt-3.5-turbo_prob": 0.597557576940805}
{"id": "157", "llama3.1-8b-instruct_response": "```python\ndef isMatch(s: str, p: str) -> bool:\n    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n    dp[0][0] = True\n    for j in range(1, len(p) + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 2]\n    for i in", "llama3.1-8b-instruct_prob": 0.4866968452572314, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for j in range(1, len(p) + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - ", "gpt-3.5-turbo_prob": 0.5133031547427687}
{"id": "158", "llama3.1-8b-instruct_response": "```python\ndef kSimilarity(A, B):\n    def dfs(i, j, cnt):\n        if i == len(A):\n            return 0\n        if j == len(B):\n            return float('inf')\n        if A[i] == B[j]:\n            return dfs(i + 1, j + 1, cnt)\n        maxn = float('inf')\n        for k in range(i + 1, len(A)):\n            if A[k] == B[j]:\n               ", "llama3.1-8b-instruct_prob": 0.3665112954167193, "gpt-3.5-turbo_response": "```python\ndef kSimilarity(A, B):\n    import collections\n    queue = collections.deque([(A, B, 0)])\n    visited = set()\n    while queue:\n        a, b, k = queue.popleft()\n        if a == b:\n            return k\n        i = 0\n        while a[i] == b[i]:\n            i += 1\n        for j in range(i + 1, len(a)):\n            if a[j] == b", "gpt-3.5-turbo_prob": 0.6334887045832808}
{"id": "159", "llama3.1-8b-instruct_response": "def constrainedSubsetSum(nums, k):\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    max_val = dp[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], nums[i])\n        for j in range(i-k, i):\n            dp[i] = max(dp[i], dp[j] + nums[i])\n        max_val = max(max_val, dp", "llama3.1-8b-instruct_prob": 0.4308021168734238, "gpt-3.5-turbo_response": "```python\ndef constrainedSubsetSum(nums, k):\n    dp = nums[:]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[j] for j in range(max(0, i - k), i)) + nums[i]\n    return max(dp)\n```", "gpt-3.5-turbo_prob": 0.5691978831265762}
{"id": "160", "llama3.1-8b-instruct_response": "def stoneGame(piles):\n    n = len(piles)\n    prefix = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            prefix[i][j] = prefix[i - 1][j] + piles[i - 1] if i <= j else prefix[i][j - 1]\n    def dp(i", "llama3.1-8b-instruct_prob": 0.5691959893379676, "gpt-3.5-turbo_response": "def stoneGame(piles):\n    return True", "gpt-3.5-turbo_prob": 0.43080401066203244}
{"id": "161", "llama3.1-8b-instruct_response": "class Solution:\n    def isValidSerialization(self, tree):\n        def dfs(node):\n            if not node:\n                return 1\n            left, right = dfs(node.left), dfs(node.right)\n            if left + right > 2:\n                return 0\n            return -1 if left + right == 0 else 1\n        return dfs(root) == -1", "llama3.1-8b-instruct_prob": 0.3132794204217764, "gpt-3.5-turbo_response": "def isValidSerialization(preorder: str) -> bool:\n    slots = 1\n    for node in preorder.split(','):\n        if slots == 0:\n            return False\n        if node == '#':\n            slots -= 1\n        else:\n            slots += 1\n    return slots == 0", "gpt-3.5-turbo_prob": 0.6867205795782236}
{"id": "162", "llama3.1-8b-instruct_response": "```python\ndef longestCommonSubsequence(text1: str, text2: str) -> int:\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n               ", "llama3.1-8b-instruct_prob": 0.5096938445152612, "gpt-3.5-turbo_response": "```python\ndef longestCommonSubsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp", "gpt-3.5-turbo_prob": 0.49030615548473877}
{"id": "163", "llama3.1-8b-instruct_response": "def isSubsequence(s, t):\n    it = iter(t)\n    return all(c in it for c in s)", "llama3.1-8b-instruct_prob": 0.458337148588158, "gpt-3.5-turbo_response": "def isSubsequence(s, t):\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)", "gpt-3.5-turbo_prob": 0.541662851411842}
{"id": "164", "llama3.1-8b-instruct_response": "def minimumNumber(num, k):\n    n = len(num)\n    count = [0] * 10\n    for i in num:\n        count[int(i)] += 1\n    for i in range(1, 10):\n        if count[i] > 0:\n            break\n    for i in range(9, 0, -1):\n        if count[i] > 0:\n            break\n    for i in range(1, 10):\n        if", "llama3.1-8b-instruct_prob": 0.4112308385343604, "gpt-3.5-turbo_response": "```python\ndef minInteger(num: str, k: int) -> str:\n    n = len(num)\n    arr = [int(c) for c in num]\n    pos = [list() for _ in range(10)]\n    for i, c in enumerate(arr):\n        pos[c].append(i)\n    bit = [0] * (n + 1)\n\n    def update(x):\n        while x <= n:\n            bit[x] += 1\n            x += x", "gpt-3.5-turbo_prob": 0.5887691614656397}
{"id": "165", "llama3.1-8b-instruct_response": "class Solution:\n    def findLongestWord(self, s: str, dictionary: list[str]) -> str:\n        def is_subsequence(s: str, t: str) -> bool:\n            p = 0\n            for c in t:\n                p = s.find(c, p) + 1\n                if p == 0:\n                    return False\n            return True\n\n        dictionary.sort()\n        return max((w for w in dictionary if is_subsequence(s, w)),", "llama3.1-8b-instruct_prob": 0.5335641002255844, "gpt-3.5-turbo_response": "def findLongestWord(s, d):\n    d.sort(key=lambda x: (-len(x), x))\n    for word in d:\n        i = 0\n        for c in s:\n            if i < len(word) and word[i] == c:\n                i += 1\n        if i == len(word):\n            return word\n    return \"\"", "gpt-3.5-turbo_prob": 0.4664358997744156}
{"id": "166", "llama3.1-8b-instruct_response": "def minFlips(a, b, c):\n    res = 0\n    for i in range(31, -1, -1):\n        bit_a, bit_b, bit_c = (a >> i) & 1, (b >> i) & 1, (c >> i) & 1\n        if bit_c == 0:\n            if bit_a == 1 and bit_b == 1:\n                res += 1\n            elif bit_a ==", "llama3.1-8b-instruct_prob": 0.5293441289720622, "gpt-3.5-turbo_response": "def minFlips(a: int, b: int, c: int) -> int:\n    return bin(a | b).count('1') - bin(c).count('1') + bin(a & b & c).count('1') * 2", "gpt-3.5-turbo_prob": 0.47065587102793793}
{"id": "167", "llama3.1-8b-instruct_response": "def superEggDrop(K, N):\n    dp = [[0] * (N + 1) for _ in range(K + 1)]\n    for i in range(1, K + 1):\n        dp[i][1] = 1\n        dp[i][0] = 0\n    for j in range(1, N + 1):\n        dp[1][j] = j\n    for i in range(2, K + 1):\n", "llama3.1-8b-instruct_prob": 0.380185409490215, "gpt-3.5-turbo_response": "def superEggDrop(K, N):\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    m = 0\n    while dp[m][K] < N:\n        m += 1\n        for i in range(1, K + 1):\n            dp[m][i] = dp[m - 1][i - 1] + dp[m - 1][i] + 1\n    return m", "gpt-3.5-turbo_prob": 0.6198145905097849}
{"id": "168", "llama3.1-8b-instruct_response": "class Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if k > len(s): return False\n        char_count = {}\n        for char in s:\n            char_count[char] = char_count.get(char, 0) + 1\n        odd_count = 0\n        for count in char_count.values():\n            if count % 2: odd_count += 1\n            if count < 2 or (count == 2 and", "llama3.1-8b-instruct_prob": 0.4477850942977573, "gpt-3.5-turbo_response": "def canConstruct(s: str, k: int) -> bool:\n    if len(s) < k:\n        return False\n    if len(s) == k:\n        return True\n    char_count = collections.Counter(s)\n    odd_count = sum(1 for count in char_count.values() if count % 2 != 0)\n    return odd_count <= k", "gpt-3.5-turbo_prob": 0.5522149057022427}
{"id": "169", "llama3.1-8b-instruct_response": "def maxProduct(n):\n    return int(((n + 1) // 2) * (n - ((n + 1) // 2)))", "llama3.1-8b-instruct_prob": 0.4281957365243934, "gpt-3.5-turbo_response": "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 3 == 0:\n        return 3 ** (n // 3)\n    if n % 3 == 1:\n        return 3 ** ((n // 3) - 1) * 4\n    return 3 ** (n // 3) * 2", "gpt-3.5-turbo_prob": 0.5718042634756065}
{"id": "17", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if a[i] == a[k] and a[j] == a[l]:\n                        ans += 1\n    print(ans)\n\nt = int(input", "llama3.1-8b-instruct_prob": 0.3559347656816728, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = defaultdict(int)\n    ans = 0\n    for j in range(n):\n        for l in range(j + 1, n):\n            if a[j] == a[l]:\n                ans += count[a[j]]\n            count[a[l]] += 1\n    print(ans)\n```", "gpt-3.5-turbo_prob": 0.6440652343183271}
{"id": "170", "llama3.1-8b-instruct_response": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left = 0\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    right = n - 1\n    while right > 0 and arr[right] >= arr[right - 1]:\n        right -= 1\n    ans = min(n - left -", "llama3.1-8b-instruct_prob": 0.5104434581033509, "gpt-3.5-turbo_response": "def findLengthOfShortestSubarray(arr):\n    n = len(arr)\n    left = 0\n    while left < n - 1 and arr[left] <= arr[left + 1]:\n        left += 1\n    if left == n - 1:\n        return 0\n    right = n - 1\n    while right > 0 and arr[right - 1] <= arr[right]:\n        right -= 1\n    result = min(n - left -", "gpt-3.5-turbo_prob": 0.4895565418966491}
{"id": "172", "llama3.1-8b-instruct_response": "def maximumDifference(num):\n    num_str = str(num)\n    max_diff = 0\n    for x in range(10):\n        for y in range(10):\n            new_num_str = num_str.replace(str(x), str(y))\n            if new_num_str[0] != '0':\n                new_num = int(new_num_str)\n                for i in range(10):\n                    new_num_str = new_num_str.replace(str(y), str(i))\n                    if new_num_str[0", "llama3.1-8b-instruct_prob": 0.3991908105987553, "gpt-3.5-turbo_response": "def maxDiff(num):\n    s = str(num)\n    a = s.replace(max(s), '9')\n    b = s.replace(min(s), '1') if s[0] != '1' else s.replace(s[1], '0')\n    return int(a) - int(b)", "gpt-3.5-turbo_prob": 0.6008091894012447}
{"id": "173", "llama3.1-8b-instruct_response": "def canArrange(arr, k):\n    n = len(arr)\n    count = [0] * k\n    for num in arr:\n        count[num % k] += 1\n    for i in range(1, k // 2 + 1):\n        if count[i] != count[k - i]:\n            return False\n    return count[0] % 2 == 0", "llama3.1-8b-instruct_prob": 0.5082346326854937, "gpt-3.5-turbo_response": "def canArrange(arr, k):\n    count = [0] * k\n    for num in arr:\n        count[num % k] += 1\n    for i in range(1, k//2+1):\n        if count[i] != count[k-i]:\n            return False\n    return count[0] % 2 == 0", "gpt-3.5-turbo_prob": 0.4917653673145063}
{"id": "174", "llama3.1-8b-instruct_response": "def lengthLongestPath(s):\n    stack = []\n    max_len = 0\n    for line in s.split('\\n'):\n        line = line.lstrip('\\t')\n        level = line.count('\\t')\n        while len(stack) > level:\n            stack.pop()\n        name = line.lstrip('\\t')\n        if '.' in name:\n            max_len = max(max_len, len(stack[-1]) + len(name) + 1)\n        else:\n            stack.append(name)\n", "llama3.1-8b-instruct_prob": 0.48555224015365844, "gpt-3.5-turbo_response": "def lengthLongestPath(input: str) -> int:\n    paths = input.split('\\n')\n    stack = [-1]\n    max_length = 0\n    for path in paths:\n        depth = path.count('\\t')\n        while depth + 1 < len(stack):\n            stack.pop()\n        length = stack[-1] + len(path) - depth + 1\n        stack.append(length)\n        if '.' in path:\n            max_length = max(max_length, length)\n   ", "gpt-3.5-turbo_prob": 0.5144477598463415}
{"id": "175", "llama3.1-8b-instruct_response": "def findIntegers(n):\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    for i in range(n, 1, -1):\n        if (i - 1) & i == 0:\n            dp[i] += dp[i - ", "llama3.1-8b-instruct_prob": 0.4308040165215248, "gpt-3.5-turbo_response": "def findIntegers(n):\n    x, y = 1, 2\n    while n:\n        if n & 3 == 3:\n            return y\n        if n & 2 == 2:\n            y = 0\n        n >>= 1\n        x, y = y, x + y\n    return x + y", "gpt-3.5-turbo_prob": 0.5691959834784752}
{"id": "176", "llama3.1-8b-instruct_response": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        for i in range(1, len(s1)):\n            if (self.isScramble(s1[:i], s2[:", "llama3.1-8b-instruct_prob": 0.46424258333116003, "gpt-3.5-turbo_response": "def isScramble(s1, s2):\n    if s1 == s2:\n        return True\n    if sorted(s1) != sorted(s2):\n        return False\n    length = len(s1)\n    for i in range(1, length):\n        if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or (isScramble(s1[:i], s2[length", "gpt-3.5-turbo_prob": 0.53575741666884}
{"id": "177", "llama3.1-8b-instruct_response": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n\n        t_count = {}\n        for char in t:\n            t_count[char] = t_count.get(char, 0) + 1\n\n        required = len(t_count)\n        l, r = 0, 0\n        formed = 0\n        window_counts = {}\n\n        ans = (float('inf'), None, None", "llama3.1-8b-instruct_prob": 0.46014813963409457, "gpt-3.5-turbo_response": "def minWindow(s: str, t: str) -> str:\n    from collections import Counter\n    if not s or not t:\n        return \"\"\n    dict_t = Counter(t)\n    required = len(dict_t)\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n    ans = float(\"inf\"), None, None\n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts", "gpt-3.5-turbo_prob": 0.5398518603659055}
{"id": "178", "llama3.1-8b-instruct_response": "def lengthOfLIS(nums):\n    if not nums:\n        return 0\n\n    dp = [nums[0]]\n\n    for num in nums[1:]:\n        if num > dp[-1]:\n            dp.append(num)\n        else:\n            idx = binary_search(dp, num)\n            dp[idx] = num\n\n    return len(dp)\n\ndef binary_search(dp, target):\n    left, right = 0, len(dp) - 1\n    while left < right:\n        mid", "llama3.1-8b-instruct_prob": 0.684983235723305, "gpt-3.5-turbo_response": "def lengthOfLIS(nums):\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "gpt-3.5-turbo_prob": 0.31501676427669495}
{"id": "179", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        @lru_cache(None)\n        def dp(i, k):\n            if k < 0: return 1 << 30\n            if i == len(s): return 0\n            delete_here = 1 + dp(i + 1, k - 1)\n            count = 1\n            while i + 1 < len(s)", "llama3.1-8b-instruct_prob": 0.5231206464312678, "gpt-3.5-turbo_response": "```python\ndef getLengthOfOptimalCompression(s, k):\n    n = len(s)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n, -1, -1):\n        for j in range(k + 1):\n            if j > i:\n                dp[i][j] = float('inf')\n            elif i == n:\n                dp[i][j] = 0\n            else", "gpt-3.5-turbo_prob": 0.4768793535687323}
{"id": "18", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max(math.sin(math.pi / n), math.cos(math.pi / (2 * n))) ** -1)", "llama3.1-8b-instruct_prob": 0.37695475609953255, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(math.cos(math.pi/(4*n))/math.sin(math.pi/(2*n)))\n```", "gpt-3.5-turbo_prob": 0.6230452439004674}
{"id": "180", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: list[list[int]]) -> int:\n        heap = []\n        curr, res, pos = startFuel, 0, 0\n        while curr < target:\n            while pos < len(stations) and stations[pos][0] <= curr:\n                heappush(heap, -stations[pos][1])\n                pos += 1\n            if not heap:\n               ", "llama3.1-8b-instruct_prob": 0.48807179863817657, "gpt-3.5-turbo_response": "```python\nimport heapq\n\ndef minRefuelStops(target, startFuel, stations):\n    pq = []  # A maxheap is simulated using negative values\n    stations.append((target, float('inf')))\n\n    ans = prev = 0\n    tank = startFuel\n    for location, capacity in stations:\n        tank -= location - prev\n        while pq and tank < 0:  # must refuel in past\n            tank += -heapq.heappop", "gpt-3.5-turbo_prob": 0.5119282013618235}
{"id": "181", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def maxProfit(self, prices):\n        buy, sell, cooldown = -prices[0], 0, 0\n        for price in prices:\n            buy, sell, cooldown = max(buy, cooldown - price), max(sell, buy + price), max(sell, cooldown)\n        return cooldown\n```", "llama3.1-8b-instruct_prob": 0.4308040165215248, "gpt-3.5-turbo_response": "def maxProfit(prices):\n    if not prices:\n        return 0\n    buy = -prices[0]\n    sell = 0\n    cooldown = 0\n    for price in prices:\n        buy = max(buy, cooldown - price)\n        cooldown = sell\n        sell = max(sell, buy + price)\n    return sell", "gpt-3.5-turbo_prob": 0.5691959834784752}
{"id": "182", "llama3.1-8b-instruct_response": "def trap(height):\n    if not height:\n        return 0\n\n    left, right = 0, len(height) - 1\n    max_left, max_right = height[left], height[right]\n    water = 0\n\n    while left <= right:\n        if max_left < max_right:\n            left += 1\n            if height[left] > max_left:\n                max_left = height[left]\n            else:\n                water += max_left - height[left]\n        else:\n           ", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def trap(height: List[int]) -> int:\n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n    result = 0\n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                result += left_max - height[left]\n            left += 1\n        else:\n            if height[right", "gpt-3.5-turbo_prob": 0.49999999999999994}
{"id": "183", "llama3.1-8b-instruct_response": "def maxDotProduct(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1", "llama3.1-8b-instruct_prob": 0.511192434574069, "gpt-3.5-turbo_response": "def maxDotProduct(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    dp = [[float('-inf')] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][", "gpt-3.5-turbo_prob": 0.4888075654259309}
{"id": "185", "llama3.1-8b-instruct_response": "def hasAllCodes(s, k):\n    n = len(s)\n    total = 1 << k\n    return len(set(s[i:i+k] for i in range(n-k+1))) == total", "llama3.1-8b-instruct_prob": 0.592316633189773, "gpt-3.5-turbo_response": "def hasAllCodes(s: str, k: int) -> bool:\n    n = len(s)\n    codes = set()\n    for i in range(n - k + 1):\n        codes.add(s[i:i+k])\n    return len(codes) == 2**k", "gpt-3.5-turbo_prob": 0.407683366810227}
{"id": "186", "llama3.1-8b-instruct_response": "def largestNumber(cost, target):\n    dp = [[0] * (target + 1) for _ in range(10)]\n    for i in range(1, 10):\n        dp[i][cost[i - 1]] = 1\n    for i in range(1, target + 1):\n        for j in range(1, 10):\n            for k in range(1, i // cost[j - 1] + 1):\n                dp[j][", "llama3.1-8b-instruct_prob": 0.5104434560612308, "gpt-3.5-turbo_response": "def largestNumber(cost, target):\n    dp = [0] + [-1] * 5000\n    for c in cost:\n        for i in range(c, target + 1):\n            dp[i] = max(dp[i], dp[i - c] + 1)\n    if dp[target] < 0:\n        return \"0\"\n    res = \"\"\n    for i in range(8, -1, -1):\n        c = cost[i]\n        while target >=", "gpt-3.5-turbo_prob": 0.48955654393876924}
{"id": "187", "llama3.1-8b-instruct_response": "def minOperationsMaxProfit(customers, boardingCost, runningCost):\n    profit = 0\n    rotations = 0\n    waiting = 0\n    max_profit = float('-inf')\n    max_rotations = -1\n    i = 0\n    while i < len(customers) or waiting:\n        if i < len(customers):\n            waiting += customers[i]\n            i += 1\n        people_boarded = min(waiting, 4)\n        waiting -=", "llama3.1-8b-instruct_prob": 0.49025436147727663, "gpt-3.5-turbo_response": "```python\nimport math\n\nclass Solution:\n    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:\n        maxProfit = -1\n        maxRotations = -1\n        waiting = 0\n        totalCustomers = 0\n        totalProfit = 0\n        \n        for i in range(len(customers)):\n            waiting += customers[i]\n            rotations = i + 1\n            boarded = min(4,", "gpt-3.5-turbo_prob": 0.5097456385227234}
{"id": "189", "llama3.1-8b-instruct_response": "def unhappyFriends(n, preferences, pairs):\n    graph = {i: [] for i in range(n)}\n    for x, y in pairs:\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def dfs(x, y, visited):\n        visited.add(x)\n        for i in preferences[x]:\n            if i not in visited:\n                if i in graph[x] and i != y and (i in graph[y] and graph[y][0] != x):\n                   ", "llama3.1-8b-instruct_prob": 0.5104434483228438, "gpt-3.5-turbo_response": "```python\ndef unhappyFriends(n, preferences, pairs):\n    preference_map = {}\n    for i in range(n):\n        preference_map[i] = preferences[i]\n    pair_map = {}\n    for pair in pairs:\n        pair_map[pair[0]] = pair[1]\n        pair_map[pair[1]] = pair[0]\n    unhappy_count = 0\n    for x in range(n):\n        y = pair_map[x]\n        for u in preference_map[x]:\n           ", "gpt-3.5-turbo_prob": 0.48955655167715617}
{"id": "19", "llama3.1-8b-instruct_response": "from collections import defaultdict\nfor _ in range(int(input())):\n    n,k,d = map(int,input().split())\n    a = list(map(int,input().split()))\n    mp = defaultdict(int)\n    for i in range(d-1,n):\n        mp[a[i]]+=1\n        if i>=d-1:\n            mp[a[i-d]]-=1\n            if mp[a[i-d]]==0:\n                del mp[a[i-d]]\n        print(len(mp)+1)", "llama3.1-8b-instruct_prob": 0.4404959562708233, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k, d = map(int, input().split())\n    shows = list(map(int, input().split()))\n    subscriptions = len(set(shows[:d]))\n    min_subscriptions = subscriptions\n    for i in range(d, n):\n        if shows[i-d] != shows[i]:\n            subscriptions -= 1\n            if shows.count(shows[i-d]) == 0:\n                subscriptions += 1\n", "gpt-3.5-turbo_prob": 0.5595040437291767}
{"id": "190", "llama3.1-8b-instruct_response": "def findLength(A, B):\n    m, n = len(A), len(B)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if A[i - 1] == B[j - 1]:\n                dp[i][j] = dp[i - 1][", "llama3.1-8b-instruct_prob": 0.5432579502969839, "gpt-3.5-turbo_response": "def findLength(A, B):\n    dp = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n    max_length = 0\n    for i in range(1, len(A) + 1):\n        for j in range(1, len(B) + 1):\n            if A[i - 1] == B[j - 1]:\n                dp[i][j] = dp[i - 1][j -", "gpt-3.5-turbo_prob": 0.45674204970301613}
{"id": "191", "llama3.1-8b-instruct_response": "def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n    digits = sorted(int(d) for d in digits)\n    def count(x):\n        if x < n: return 1 + sum(count(x * 10 + d) for d in digits if d < str(x)[ -1])\n        return sum(count(x * 10 + d) for d in digits if d < str(x)[ -1])\n    return count(0)", "llama3.1-8b-instruct_prob": 0.524564985703836, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        n = str(n)\n        k = len(n)\n        dp = [0] * k + [1]\n        for i in range(k-1, -1, -1):\n            for d in digits:\n                if d < n[i]:\n                    dp[i] += len(digits) ** (k - i - 1)\n                elif d", "gpt-3.5-turbo_prob": 0.475435014296164}
{"id": "192", "llama3.1-8b-instruct_response": "def maxCoins(piles):\n    piles.sort()\n    return sum(piles[-1-i*2] for i in range(piles//3))", "llama3.1-8b-instruct_prob": 0.47065587441186807, "gpt-3.5-turbo_response": "def maxCoins(piles):\n    piles.sort()\n    return sum(piles[len(piles)//3:len(piles)*2//3:2])", "gpt-3.5-turbo_prob": 0.5293441255881319}
{"id": "193", "llama3.1-8b-instruct_response": "def minSetSize(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    sorted_count = sorted(count.values(), reverse=True)\n    target = len(arr) // 2\n    ans = 0\n    for num in sorted_count:\n        ans += 1\n        target -= num\n        if target <= 0:\n            return ans", "llama3.1-8b-instruct_prob": 0.4813516156934815, "gpt-3.5-turbo_response": "def minSetSize(arr):\n    counter = collections.Counter(arr)\n    sorted_counts = sorted(counter.values(), reverse=True)\n    target = len(arr) // 2\n    result = 0\n    for count in sorted_counts:\n        target -= count\n        result += 1\n        if target <= 0:\n            return result", "gpt-3.5-turbo_prob": 0.5186483843065185}
{"id": "194", "llama3.1-8b-instruct_response": "```python\ndef canPartitionKSubsets(nums, k):\n    total_sum = sum(nums)\n    if total_sum % k != 0:\n        return False\n    target = total_sum // k\n    nums.sort(reverse=True)\n    def backtrack(index, subsets):\n        if index == len(nums):\n            return all(s == target for s in subsets)\n        for i in range(k):\n            if subsets[i] + nums[index] <= target:\n                subsets[i] += nums[index]\n", "llama3.1-8b-instruct_prob": 0.4999999941405078, "gpt-3.5-turbo_response": "def canPartitionKSubsets(nums, k):\n    target, rem = divmod(sum(nums), k)\n    if rem or max(nums) > target: return False\n    nums.sort()\n    while nums and nums[-1] == target:\n        nums.pop()\n        k -= 1\n    def search(groups):\n        if not nums: return True\n        v = nums.pop()\n        for i, group in enumerate(groups):\n            if group + v <= target:\n                groups[i]", "gpt-3.5-turbo_prob": 0.5000000058594922}
{"id": "195", "llama3.1-8b-instruct_response": "def count_triples(A):\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (A[i] & A[j] & A[k]) == 0:\n                    count += 1\n    return count", "llama3.1-8b-instruct_prob": 0.5443291382832407, "gpt-3.5-turbo_response": "def countTriplets(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            for k in range(len(A)):\n                if A[i] & A[j] & A[k] == 0:\n                    count += 1\n    return count", "gpt-3.5-turbo_prob": 0.4556708617167593}
{"id": "196", "llama3.1-8b-instruct_response": "def maxSubarraySumCircular(A):\n    total_sum = sum(A)\n    max_sum = float('-inf')\n    max_ending_here = 0\n    min_sum = float('inf')\n    min_ending_here = 0\n\n    for num in A:\n        max_ending_here = max(num, max_ending_here + num)\n        max_sum = max(max_sum, max_ending_here)\n\n        min_ending_here = min(num, min_ending_here + num)\n", "llama3.1-8b-instruct_prob": 0.4320114089079099, "gpt-3.5-turbo_response": "```python\ndef maxSubarraySumCircular(A):\n    max_kadane = kadane(A)\n    max_wrap = sum(A) - min_kadane(A)\n    return max(max_kadane, max_wrap) if max_wrap != 0 else max_kadane\n\ndef kadane(A):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in A:\n        curr_sum = max(num, curr_sum + num)\n        max_sum =", "gpt-3.5-turbo_prob": 0.5679885910920901}
{"id": "197", "llama3.1-8b-instruct_response": "def isValid(s: str) -> bool:\n    stack = []\n    for c in s:\n        if c == 'a':\n            stack.append(c)\n        elif c == 'b':\n            if not stack or stack.pop() != 'a':\n                return False\n            stack.append(c)\n        elif c == 'c':\n            if not stack or stack.pop() != 'b':\n                return False\n            stack.append(c)\n    return not stack", "llama3.1-8b-instruct_prob": 0.57398465965393, "gpt-3.5-turbo_response": "def isValid(s):\n    stack = []\n    for char in s:\n        if char == 'a':\n            stack.append(char)\n        elif char == 'b':\n            if stack and stack[-1] == 'a':\n                stack.pop()\n            else:\n                return False\n        elif char == 'c':\n            if stack and stack[-1] == 'b':\n                stack.pop()\n            else:\n                return False\n    return not stack", "gpt-3.5-turbo_prob": 0.4260153403460701}
{"id": "198", "llama3.1-8b-instruct_response": "```python\ndef equalSubstring(s, t, maxCost):\n    left = 0\n    max_len = 0\n    current_cost = 0\n    for right in range(len(s)):\n        current_cost += abs(ord(s[right]) - ord(t[right]))\n        while current_cost > maxCost:\n            current_cost -= abs(ord(s[left]) - ord(t[left]))\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    return", "llama3.1-8b-instruct_prob": 0.586387058402291, "gpt-3.5-turbo_response": "```python\ndef equalSubstring(s, t, maxCost):\n    start = 0\n    end = 0\n    max_length = 0\n    while end < len(s):\n        maxCost -= abs(ord(s[end]) - ord(t[end]))\n        while maxCost < 0:\n            maxCost += abs(ord(s[start]) - ord(t[start]))\n            start += 1\n        max_length = max(max_length, end - start + 1)\n        end += ", "gpt-3.5-turbo_prob": 0.413612941597709}
{"id": "199", "llama3.1-8b-instruct_response": "def longest_consecutive(nums):\n    if not nums:\n        return 0\n\n    num_set = set(nums)\n    max_length = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n\n            max_length = max(max_length, current_length)\n\n    return max", "llama3.1-8b-instruct_prob": 0.2614612764112212, "gpt-3.5-turbo_response": "```python\ndef longestConsecutive(nums):\n    num_set = set(nums)\n    max_length = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            max_length = max(max_length, current_length)\n    return max_length\n```", "gpt-3.5-turbo_prob": 0.7385387235887788}
{"id": "20", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    customers = []\n    for _ in range(n):\n        t, l, h = map(int, sys.stdin.readline().split())\n        customers.append((t, l, h))\n\n    left, right = m, m\n    for t, l, h in customers:\n        if left < l or right > h:\n            print(\"NO\")\n            return\n        left =", "llama3.1-8b-instruct_prob": 0.4514810970238994, "gpt-3.5-turbo_response": "```python\nq = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    satisfied = True\n    max_temp = m\n    min_temp = m\n    prev_time = 0\n    for _ in range(n):\n        t, l, h = map(int, input().split())\n        time_diff = t - prev_time\n        max_temp = min(max_temp + time_diff, h)\n        min_temp = max(min_temp", "gpt-3.5-turbo_prob": 0.5485189029761007}
{"id": "200", "llama3.1-8b-instruct_response": "def findMinFibonacciNumbers(k):\n    fib = [1, 1]\n    while fib[-1] < k: fib.append(fib[-1] + fib[-2])\n    count = 0\n    while k:\n        count += k // fib[-1]\n        k %= fib[-1]\n        fib.pop()\n    return count", "llama3.1-8b-instruct_prob": 0.5290918420992093, "gpt-3.5-turbo_response": "def findMinFibonacciNumbers(k):\n    fib = [1, 1]\n    while fib[-1] < k:\n        fib.append(fib[-1] + fib[-2])\n    count = 0\n    index = len(fib) - 1\n    while k > 0:\n        if fib[index] <= k:\n            k -= fib[index]\n            count += 1\n        index -= 1\n    return count", "gpt-3.5-turbo_prob": 0.4709081579007906}
{"id": "201", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        dp = [0] * (n + 1)\n        dp[0] = dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                dp[i] += dp[j] * dp[i - j - 1]\n        return dp[n]\n```", "llama3.1-8b-instruct_prob": 0.4873632273687317, "gpt-3.5-turbo_response": "class Solution:\n    def numTrees(self, n: int) -> int:\n        G = [0] * (n + 1)\n        G[0], G[1] = 1, 1\n\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                G[i] += G[j - 1] * G[i - j]\n\n        return G[n]", "gpt-3.5-turbo_prob": 0.5126367726312683}
{"id": "202", "llama3.1-8b-instruct_response": "def longestMountain(A):\n    n = len(A)\n    res = 0\n    i = 0\n    while i < n - 2:\n        if A[i] < A[i + 1] and A[i + 1] > A[i + 2]:\n            j = i + 2\n            while j < n - 1 and A[j] > A[j + 1]:\n                j += 1\n            while j < n - 1 and", "llama3.1-8b-instruct_prob": 0.39919081228111736, "gpt-3.5-turbo_response": "```python\ndef longestMountain(A):\n    n = len(A)\n    ans = base = 0\n\n    while base < n:\n        end = base\n        if end + 1 < n and A[end] < A[end + 1]:\n            while end + 1 < n and A[end] < A[end + 1]:\n                end += 1\n            if end + 1 < n and A[end] > A[end + 1]:\n                while end +", "gpt-3.5-turbo_prob": 0.6008091877188826}
{"id": "203", "llama3.1-8b-instruct_response": "def uniquePaths(m, n):\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "llama3.1-8b-instruct_prob": 0.5201373078664833, "gpt-3.5-turbo_response": "def uniquePaths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "gpt-3.5-turbo_prob": 0.47986269213351673}
{"id": "205", "llama3.1-8b-instruct_response": "def findMaxForm(strs, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for s in strs:\n        ones = s.count('1')\n        zeros = len(s) - ones\n        for i in range(m, zeros - 1, -1):\n            for j in range(n, ones - 1, -1):\n                dp[i][j] = max(dp[i][j], dp", "llama3.1-8b-instruct_prob": 0.5378681466031059, "gpt-3.5-turbo_response": "from typing import List\ndef findMaxForm(strs: List[str], m: int, n: int) -> int:\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for s in strs:\n        zeros, ones = s.count('0'), s.count('1')\n        for i in range(m, zeros - 1, -1):\n            for j in range(n, ones - 1, -1):\n               ", "gpt-3.5-turbo_prob": 0.4621318533968941}
{"id": "206", "llama3.1-8b-instruct_response": "def PredictTheWinner(scores):\n    n = len(scores)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = scores[i]\n    for length in range(1, n):\n        for left in range(n - length):\n            right = left + length\n            dp[left][right] = max(scores[left] - dp[left + 1][right], scores[right] - dp[left][right - 1", "llama3.1-8b-instruct_prob": 0.44570037042643273, "gpt-3.5-turbo_response": "class Solution:\n    def PredictTheWinner(self, nums: List[int]) -> bool:\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = nums[i]\n        for length in range(1, n):\n            for i in range(n - length):\n                j = i + length\n                dp[i][j] = max(nums[i] - dp[i+1][j],", "gpt-3.5-turbo_prob": 0.5542996295735673}
{"id": "207", "llama3.1-8b-instruct_response": "def largest_number(nums):\n    nums = list(map(str, nums))\n    nums.sort(key=lambda x: x*3, reverse=True)\n    return '0' if nums[0] == '0' else ''.join(nums)", "llama3.1-8b-instruct_prob": 0.4601481493317009, "gpt-3.5-turbo_response": "```python\nfrom functools import cmp_to_key\nclass Solution:\n    def largestNumber(self, nums):\n        nums = list(map(str, nums))\n        nums.sort(key=cmp_to_key(lambda x, y: int(y + x) - int(x + y)))\n        return str(int(''.join(nums)))\n```", "gpt-3.5-turbo_prob": 0.5398518506682991}
{"id": "208", "llama3.1-8b-instruct_response": "def predictPartyVictory(senate):\n    radiant = []\n    dire = []\n    for i, senator in enumerate(senate):\n        if senator == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n\n    while radiant and dire:\n        r = radiant.pop(0)\n        d = dire.pop(0)\n        if r < d:\n            radiant.append(r + d)\n        else:\n            dire.append(r + d)\n\n    return \"Radiant\" if not dire", "llama3.1-8b-instruct_prob": 0.44821994165620127, "gpt-3.5-turbo_response": "def predictPartyVictory(s: str) -> str:\n    queue = collections.deque()\n    cnt = collections.Counter(s)\n    while all(cnt.values()):\n        for x in 'RD':\n            if cnt[x] > 0:\n                queue.append(x)\n                cnt[x] -= 1\n    return 'Radiant' if queue[0] == 'R' else 'Dire'", "gpt-3.5-turbo_prob": 0.5517800583437987}
{"id": "209", "llama3.1-8b-instruct_response": "def mergeStones(stones, K):\n    n = len(stones)\n    if (n - 1) % (K - 1) != 0: return -1\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + stones[i]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(K - 1, n):\n", "llama3.1-8b-instruct_prob": 0.44410526939373707, "gpt-3.5-turbo_response": "```python\nimport heapq\ndef mergeStones(stones, K):\n    n = len(stones)\n    if (n - 1) % (K - 1) != 0:\n        return -1\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + stones[i]\n    dp = [[0] * n for _ in range(n)]\n    for m in range", "gpt-3.5-turbo_prob": 0.5558947306062629}
{"id": "21", "llama3.1-8b-instruct_response": "def find_k(S):\n    S = set(S)\n    for k in range(1, 1024):\n        if S == set(s ^ k for s in S):\n            return k\n    return -1\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    S = list(map(int, input().split()))\n    print(find_k(S))", "llama3.1-8b-instruct_prob": 0.4999999967531116, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    k = min(s)\n    for x in s:\n        k = k & x\n    if k in s:\n        print(k)\n    else:\n        print(-1)\n```", "gpt-3.5-turbo_prob": 0.5000000032468884}
{"id": "210", "llama3.1-8b-instruct_response": "def containsNearbyAlmostBuriedJumps(nums, k, t):\n    if len(nums) <= 1 or k < 1 or t < 0:\n        return False\n    buckets = {}\n    for i, num in enumerate(nums):\n        bucket_id = num // (k + 1)\n        if bucket_id in buckets:\n            return True\n        for b in [bucket_id - 1, bucket_id, bucket_id + 1]:\n            if b in buckets and", "llama3.1-8b-instruct_prob": 0.3475703774133206, "gpt-3.5-turbo_response": "def containsNearbyAlmostDuplicate(nums, k, t):\n    if t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        key = n if not t else n // t\n        for m in (window.get(key - 1), window.get(key), window.get(key + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        if len(window) == k:\n           ", "gpt-3.5-turbo_prob": 0.6524296225866794}
{"id": "211", "llama3.1-8b-instruct_response": "class Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n        seen = set()\n        max_unique = 0\n        def backtrack(start, path):\n            nonlocal max_unique\n            if start == len(s):\n                max_unique = max(max_unique, len(path))\n                return\n            for end in range(start + 1, len(s) + 1):\n                substring = s[start:end]\n                if substring not in seen:\n                    seen.add(substring)\n", "llama3.1-8b-instruct_prob": 0.4225797350135817, "gpt-3.5-turbo_response": "def maxUniqueSplit(s):\n    seen = set()\n    def backtrack(start):\n        if start == len(s):\n            return 0\n        max_unique = 0\n        for end in range(start+1, len(s)+1):\n            if s[start:end] not in seen:\n                seen.add(s[start:end])\n                max_unique = max(max_unique, 1 + backtrack(end))\n                seen.remove(s[start:end])\n        return max_unique\n    return backtrack(0)", "gpt-3.5-turbo_prob": 0.5774202649864183}
{"id": "212", "llama3.1-8b-instruct_response": "class Solution:\n    def numFactoredBinaryTrees(self, A):\n        A.sort()\n        dp = {a: 1 for a in A}\n        for i in range(1, len(A)):\n            dp[A[i]] = 1\n            for j in range(i):\n                if A[i] % A[j] == 0 and A[i] // A[j] in dp:\n                    dp[A[i]] += dp[A[j]] * dp[A[i] // A[j]]\n", "llama3.1-8b-instruct_prob": 0.3997010294694, "gpt-3.5-turbo_response": "```python\ndef numFactoredBinaryTrees(A):\n    A.sort()\n    dp = {}\n    for a in A:\n        dp[a] = 1\n        for b in dp:\n            if a % b == 0 and a // b in dp:\n                dp[a] += dp[b] * dp[a // b]\n    return sum(dp.values()) % (10 ** 9 + 7)\n```", "gpt-3.5-turbo_prob": 0.6002989705306001}
{"id": "213", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            x = 1 / x\n            n = -n\n        half = self.myPow(x, n // 2)\n        return half * half if n % 2 == 0 else half * half * x\n```", "llama3.1-8b-instruct_prob": 0.5912821190199054, "gpt-3.5-turbo_response": "def myPow(x, n):\n    if n < 0:\n        x = 1 / x\n        n = -n\n    result = 1\n    while n:\n        if n % 2:\n            result *= x\n        x *= x\n        n //= 2\n    return result", "gpt-3.5-turbo_prob": 0.40871788098009476}
{"id": "214", "llama3.1-8b-instruct_response": "def minMoves(nums):\n    n = len(nums)\n    even, odd = nums[::2], nums[1::2]\n    def check(a, b):\n        return all(x > y for x, y in zip(a, b[1:])) and all(x < y for x, y in zip(a[1:], b))\n\n    return min(sum(max(0, x - y) for x, y in zip(a, b)) for a, b in [(even,", "llama3.1-8b-instruct_prob": 0.42184758223469, "gpt-3.5-turbo_response": "```python\ndef movesToMakeZigzag(nums):\n    total1 = total2 = 0\n    for i in range(len(nums)):\n        left = nums[i - 1] if i - 1 >= 0 else float('inf')\n        right = nums[i + 1] if i + 1 < len(nums) else float('inf')\n        total1 += max(0, nums[i] - min(left, right) + 1) if i % ", "gpt-3.5-turbo_prob": 0.57815241776531}
{"id": "215", "llama3.1-8b-instruct_response": "def isGood(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return False\n    return True", "llama3.1-8b-instruct_prob": 0.3486451387178759, "gpt-3.5-turbo_response": "def isGoodArray(nums):\n    from math import gcd\n    g = nums[0]\n    for num in nums[1:]:\n        g = gcd(g, num)\n    return g == 1", "gpt-3.5-turbo_prob": 0.651354861282124}
{"id": "216", "llama3.1-8b-instruct_response": "```python\ndef minNumberOfFrogs(croakOfFrogs: str) -> int:\n    if len(croakOfFrogs) % 5 != 0:\n        return -1\n\n    char_count = {'c': 0, 'r': 0, 'o': 0, 'a': 0, 'k': 0}\n    max_frogs = 0\n    current_frogs = 0\n    queue =", "llama3.1-8b-instruct_prob": 0.556559210847207, "gpt-3.5-turbo_response": "def minNumberOfFrogs(croakOfFrogs: str) -> int:\n    if len(croakOfFrogs) % 5 != 0:\n        return -1\n    count = {'c': 0, 'r': 0, 'o': 0, 'a': 0, 'k': 0}\n    max_frogs = 0\n    for char in croakOfFrogs:\n        if char == '", "gpt-3.5-turbo_prob": 0.44344078915279295}
{"id": "217", "llama3.1-8b-instruct_response": "class Solution:\n    def subarrayBitwiseORs(self, A):\n        res = set()\n        cur = set()\n        for a in A:\n            cur = {a | b for b in cur} | {a}\n            res |= cur\n        return len(res)", "llama3.1-8b-instruct_prob": 0.4416429082228851, "gpt-3.5-turbo_response": "class Solution:\n    def subarrayBitwiseORs(self, A: List[int]) -> int:\n        ans = set()\n        cur = set()\n        for x in A:\n            cur = {x | y for y in cur} | {x}\n            ans |= cur\n        return len(ans)", "gpt-3.5-turbo_prob": 0.5583570917771149}
{"id": "218", "llama3.1-8b-instruct_response": "def orderlyQueue(S, K):\n    if K >= len(S):\n        return S\n    result = S\n    for i in range(len(S)):\n        temp = S[i:] + S[:i]\n        result = min(result, temp)\n    return result", "llama3.1-8b-instruct_prob": 0.4727849248927153, "gpt-3.5-turbo_response": "```python\ndef orderlyQueue(S, K):\n    if K == 1:\n        return min(S[i:] + S[:i] for i in range(len(S)))\n    else:\n        return ''.join(sorted(S))\n```", "gpt-3.5-turbo_prob": 0.5272150751072846}
{"id": "219", "llama3.1-8b-instruct_response": "def longestWPI(hours) :\n    score = 0\n    max_len = 0\n    seen = {0: -1}\n    for i, hour in enumerate(hours) :\n        score += 1 if hour > 8 else -1\n        if score > 0 :\n            max_len = i + 1\n        else :\n            max_len = max(max_len, i - seen.get(score, -1))\n        seen.setdefault(score, i)\n    return max_len", "llama3.1-8b-instruct_prob": 0.6593102940218841, "gpt-3.5-turbo_response": "def longestWPI(hours):\n    max_length = 0\n    score = 0\n    score_map = {}\n    for i, hour in enumerate(hours):\n        score = score + 1 if hour > 8 else score - 1\n        if score > 0:\n            max_length = i + 1\n        else:\n            if score - 1 in score_map:\n                max_length = max(max_length, i - score_map[score - 1])\n            else", "gpt-3.5-turbo_prob": 0.3406897059781158}
{"id": "22", "llama3.1-8b-instruct_response": "def minDigit(n):\n    return min(int(digit) for digit in str(n))\n\ndef maxDigit(n):\n    return max(int(digit) for digit in str(n))\n\nfor _ in range(int(input())):\n    a, k = map(int, input().split())\n    for _ in range(k - 1):\n        a += minDigit(a) * maxDigit(a)\n    print(a)", "llama3.1-8b-instruct_prob": 0.5517800583437987, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, k = map(int, input().split())\n    for _ in range(k-1):\n        min_digit = min(str(a))\n        max_digit = max(str(a))\n        a += int(min_digit) * int(max_digit)\n    print(a)\n```", "gpt-3.5-turbo_prob": 0.44821994165620127}
{"id": "220", "llama3.1-8b-instruct_response": "def maxSatisfied(customers, grumpy, X):\n    n = len(customers)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + customers[i] * (1 - grumpy[i])\n    max_val = 0\n    window_sum = 0\n    for i in range(n):\n        window_sum += customers[i] * grumpy[i]\n        if", "llama3.1-8b-instruct_prob": 0.3703568961736718, "gpt-3.5-turbo_response": "```python\ndef maxSatisfied(customers, grumpy, X):\n    satisfied = sum(c for c, g in zip(customers, grumpy) if not g)\n    max_extra = extra = sum(customers[i] for i in range(X) if grumpy[i])\n    for i in range(X, len(customers)):\n        extra += customers[i] * grumpy[i] - customers[i - X] * grumpy[i - X]\n        max_extra = max(max_extra", "gpt-3.5-turbo_prob": 0.6296431038263282}
{"id": "221", "llama3.1-8b-instruct_response": "class Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        n = len(S)\n        def check(length):\n            if length == n:\n                return False\n            seen = {0}\n            h = ord(S[0]) * (26 ** (length - 1))\n            for i in range(1, n):\n                h = (h * 26 + ord(S[i])) % (1 << length)\n                if i >= length and h in seen", "llama3.1-8b-instruct_prob": 0.5734159449682267, "gpt-3.5-turbo_response": "def longestDupSubstring(S):\n        def search(L, n, base, MOD, nums):\n            h = 0\n            for i in range(L):\n                h = (h * base + nums[i]) % MOD\n            seen = {h}\n            baseL = pow(base, L, MOD)\n            for start in range(1, n - L + 1):\n                h = (h * base - nums[start - 1] * baseL + nums[start + L", "gpt-3.5-turbo_prob": 0.4265840550317733}
{"id": "223", "llama3.1-8b-instruct_response": "def hIndex(citations):\n    n = len(citations)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left", "llama3.1-8b-instruct_prob": 0.45833715477668535, "gpt-3.5-turbo_response": "def hIndex(citations):\n    n = len(citations)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if citations[mid] == n - mid:\n            return n - mid\n        elif citations[mid] < n - mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return n - left", "gpt-3.5-turbo_prob": 0.5416628452233146}
{"id": "224", "llama3.1-8b-instruct_response": "```python\ndef numDistinct(S, T):\n    m, n = len(S), len(T)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, min(i + 1, n + 1)):\n            if S[i -", "llama3.1-8b-instruct_prob": 0.5216359017935072, "gpt-3.5-turbo_response": "def numDistinct(S, T):\n    dp = [[0] * (len(T) + 1) for _ in range(len(S) + 1)]\n    for i in range(len(S) + 1):\n        dp[i][0] = 1\n    for i in range(1, len(S) + 1):\n        for j in range(1, len(T) + 1):\n            if S[i - 1] == T[j - 1]:\n", "gpt-3.5-turbo_prob": 0.47836409820649295}
{"id": "225", "llama3.1-8b-instruct_response": "def pushDominoes(dominoes):\n    dominoes = 'L' + dominoes + 'R'\n    n = len(dominoes)\n    left = [0] * n\n    right = [0] * n\n    for i in range(1, n - 1):\n        if dominoes[i] == '.':\n            left[i] = left[i - 1]\n            right[i] = right[i + 1]\n        elif domino", "llama3.1-8b-instruct_prob": 0.5999246026281243, "gpt-3.5-turbo_response": "def pushDominoes(dominoes: str) -> str:\n    dominoes = 'L' + dominoes + 'R'\n    result = []\n    left = 0\n    for right in range(1, len(dominoes)):\n        if dominoes[right] == '.':\n            continue\n        middle = right - left - 1\n        if left:\n            result.append('L')\n        if dominoes[left] == dominoes[right]:\n           ", "gpt-3.5-turbo_prob": 0.4000753973718757}
{"id": "226", "llama3.1-8b-instruct_response": "def numSquarefulPerms(nums):\n    def is_square(x):\n        return int(x**0.5)**2 == x\n\n    def backtrack(i, path):\n        if len(path) == len(nums):\n            result.append(path[:])\n            return\n        for j in range(i, len(nums)):\n            if is_square(path[-1] + nums[j]):\n                path.append(nums[j])\n                backtrack(j + 1, path)\n                path.pop()\n\n    nums.sort()\n    result =", "llama3.1-8b-instruct_prob": 0.5096938573613908, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nfrom math import isqrt\nfrom itertools import permutations\n\ndef numSquarefulPerms(A):\n    count = Counter(A)\n    graph = {x: {y for y in count if isqrt(x + y) ** 2 == x + y} for x in count}\n    def dfs(x, todo):\n        count[x] -= 1\n        if todo == 0:\n            ans = 1\n        else:\n            ans = ", "gpt-3.5-turbo_prob": 0.49030614263860917}
{"id": "228", "llama3.1-8b-instruct_response": "def maxVowels(s, k):\n    vowels = set('aeiou')\n    max_count = 0\n    current_count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            current_count += 1\n        if i >= k:\n            if s[i-k] in vowels:\n                current_count -= 1\n        max_count = max(max_count, current_count)\n    return max_count", "llama3.1-8b-instruct_prob": 0.3414542533662986, "gpt-3.5-turbo_response": "```python\ndef maxVowels(s, k):\n    vowels = set('aeiou')\n    max_vowels = curr_vowels = sum(ch in vowels for ch in s[:k])\n    for i in range(k, len(s)):\n        curr_vowels += (s[i] in vowels) - (s[i - k] in vowels)\n        max_vowels = max(max_vowels, curr_vowels)\n    return max_vowels\n```", "gpt-3.5-turbo_prob": 0.6585457466337015}
{"id": "229", "llama3.1-8b-instruct_response": "def canReorderDoubled(A):\n    count = {}\n    for num in A:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    for num in sorted(count.keys(), key=abs):\n        if count[num] > count[2*num]:\n            return False\n        count[2*num] -= count[num]\n    return True", "llama3.1-8b-instruct_prob": 0.3733521651039177, "gpt-3.5-turbo_response": "def canReorderDoubled(A):\n    count = collections.Counter(A)\n    for x in sorted(A, key=abs):\n        if count[x] == 0: continue\n        if count[2*x] == 0: return False\n        count[x] -= 1\n        count[2*x] -= 1\n    return True", "gpt-3.5-turbo_prob": 0.6266478348960822}
{"id": "23", "llama3.1-8b-instruct_response": "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    voters = []\n    for _ in range(n):\n        m, p = map(int, input().split())\n        voters.append((m, p))\n    voters.sort()\n    pq = []\n    cost = 0\n    for m, p in voters:\n        if m < len(pq):\n            heapq.heappush(pq, -heapq.heappop(pq))\n            cost -= p\n", "llama3.1-8b-instruct_prob": 0.5231206438518055, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    voters = [list(map(int, input().split())) for _ in range(n)]\n    voters.sort()\n    total_coins = sum(v[1] for v in voters)\n    min_coins = total_coins\n    for i in range(n):\n        total_coins -= voters[i][1]\n        min_coins = min(min_coins, max(total_coins, voters[i", "gpt-3.5-turbo_prob": 0.47687935614819454}
{"id": "230", "llama3.1-8b-instruct_response": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stack = []\n        for n in num:\n            while k and stack and stack[-1] > n:\n                k -= 1\n                stack.pop()\n            stack.append(n)\n        while k:\n            stack.pop()\n            k -= 1\n        return '0' if not stack else ''.join(stack).lstrip('0') or '0'", "llama3.1-8b-instruct_prob": 0.5734159575203652, "gpt-3.5-turbo_response": "def removeKdigits(num, k):\n    stack = []\n    for digit in num:\n        while k and stack and stack[-1] > digit:\n            stack.pop()\n            k -= 1\n        stack.append(digit)\n    return ''.join(stack[:-k or None]).lstrip('0') or '0'", "gpt-3.5-turbo_prob": 0.4265840424796347}
{"id": "231", "llama3.1-8b-instruct_response": "def firstMissingPositive(nums):\n    if not nums:\n        return 1\n\n    n = len(nums)\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i", "llama3.1-8b-instruct_prob": 0.6002989609435321, "gpt-3.5-turbo_response": "def firstMissingPositive(nums):\n    i = 0\n    n = len(nums)\n    while i < n:\n        if 0 < nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        else:\n            i += 1\n    for i in range(n):\n        if nums[i] != i + 1", "gpt-3.5-turbo_prob": 0.3997010390564679}
{"id": "232", "llama3.1-8b-instruct_response": "class Solution:\n    def findPoisonedDuration(self, timeSeries: list[int], duration: int) -> int:\n        return sum(min(x + duration, timeSeries[-1]) - x for x in timeSeries)", "llama3.1-8b-instruct_prob": 0.44049595831753763, "gpt-3.5-turbo_response": "def findPoisonedDuration(timeSeries, duration):\n    if not timeSeries:\n        return 0\n    total_time = 0\n    for i in range(1, len(timeSeries)):\n        total_time += min(timeSeries[i] - timeSeries[i-1], duration)\n    return total_time + duration", "gpt-3.5-turbo_prob": 0.5595040416824624}
{"id": "234", "llama3.1-8b-instruct_response": "def minAddToMakeValid(S):\n    stack = []\n    for c in S:\n        if c == '(':\n            stack.append(c)\n        elif c == ')' and stack:\n            stack.pop()\n        else:\n            stack.append(c)\n    return len(stack)", "llama3.1-8b-instruct_prob": 0.418875809300209, "gpt-3.5-turbo_response": "```python\ndef minAddToMakeValid(S):\n    stack = []\n    for char in S:\n        if char == '(':\n            stack.append(char)\n        elif stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(char)\n    return len(stack)\n```", "gpt-3.5-turbo_prob": 0.581124190699791}
{"id": "236", "llama3.1-8b-instruct_response": "def minFlipsMonoIncr(s):\n    ones = 0\n    flips = 0\n    for c in s:\n        if c == '1':\n            ones += 1\n        else:\n            flips = min(flips + 1, ones)\n    return flips", "llama3.1-8b-instruct_prob": 0.7573311201875914, "gpt-3.5-turbo_response": "def minFlipsMonoIncr(S):\n    dp = [0, 0]\n    for i in range(len(S)):\n        dp[int(S[i])] = dp[int(S[i])] + 1\n        dp[1] = min(dp)\n    return dp[0]", "gpt-3.5-turbo_prob": 0.24266887981240862}
{"id": "237", "llama3.1-8b-instruct_response": "```python\ndef numSubarraysWithSum(A, S):\n    prefix_sum = {0: 1}\n    curr_sum = 0\n    count = 0\n    for num in A:\n        curr_sum += num\n        count += prefix_sum.get(curr_sum - S, 0)\n        prefix_sum[curr_sum] = prefix_sum.get(curr_sum, 0) + 1\n    return count\n```", "llama3.1-8b-instruct_prob": 0.6747938523020631, "gpt-3.5-turbo_response": "def numSubarraysWithSum(A, S):\n    count = 0\n    prefix_sum = 0\n    sum_count = {0: 1}\n    for num in A:\n        prefix_sum += num\n        if prefix_sum - S in sum_count:\n            count += sum_count[prefix_sum - S]\n        if prefix_sum in sum_count:\n            sum_count[prefix_sum] += 1\n        else:\n            sum_count[prefix_sum] = 1\n   ", "gpt-3.5-turbo_prob": 0.3252061476979369}
{"id": "239", "llama3.1-8b-instruct_response": "from itertools import combinations\n\ndef largestValsFromLabels(values, labels, num_wanted, use_limit):\n    items = list(zip(values, labels))\n    items.sort(key=lambda x: x[0], reverse=True)\n    max_sum = 0\n    chosen = set()\n    for combo in combinations(items, num_wanted):\n        label_count = {}\n        for item in combo:\n            label = item[1]\n            if label in label_count:\n                label_count[label] += 1", "llama3.1-8b-instruct_prob": 0.48736322493253836, "gpt-3.5-turbo_response": "from collections import Counter\nfrom heapq import *\ndef largestValsFromLabels(values, labels, num_wanted, use_limit):\n    hq = []\n    for v, l in zip(values, labels):\n        heappush(hq, (-v, l))\n    cnt = Counter()\n    res = 0\n    while hq and num_wanted > 0:\n        v, l = heappop(hq)\n        if cnt[l] < use_limit:\n            res -= v", "gpt-3.5-turbo_prob": 0.5126367750674616}
{"id": "24", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    d = int(input())\n    if d == 0:\n        print(\"Y 0.000000 0.000000\")\n    elif d == 1:\n        print(\"Y 1.000000 0.000000\")\n    elif d == 4:\n        print(\"Y 2.000000 2.000000\")\n    elif d == 5:\n        print(\"Y 3.618033 ", "llama3.1-8b-instruct_prob": 0.4687906266262437, "gpt-3.5-turbo_response": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    d = int(input())\n    if d < 4:\n        if d == 0:\n            print(\"Y 0.000000000 0.000000000\")\n        else:\n            print(\"N\")\n    else:\n        x = (d + math.sqrt(d*d - 4*d)) / 2\n        y = d - x\n        print(\"Y {:.9f} {:.", "gpt-3.5-turbo_prob": 0.5312093733737563}
{"id": "240", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\ndef frequency_sort(s):\n    freq = Counter(s)\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    max_len = max(freq.values())\n    result = []\n    for char, count in sorted_freq:\n        result.extend([char] * count)\n    return ''.join(result)\n\nprint(frequency_sort(\"tree\"))  # \"eetr\"\nprint(frequency_sort(\"cccaaa\"))  # \"cc", "llama3.1-8b-instruct_prob": 0.5152450495341359, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\ndef frequencySort(s):\n    counts = Counter(s)\n    sorted_chars = sorted(counts, key=lambda x: (-counts[x], x))\n    return ''.join(char * counts[char] for char in sorted_chars)\n```", "gpt-3.5-turbo_prob": 0.48475495046586414}
{"id": "241", "llama3.1-8b-instruct_response": "def isRobotInCircle(instructions):\n    x, y, dx, dy = 0, 0, 0, 1\n    for instruction in instructions:\n        if instruction == 'G':\n            x += dx\n            y += dy\n        elif instruction == 'L':\n            dx, dy = -dy, dx\n        else:\n            dx, dy = dy, -dx\n        if (x**2 + y**2) <= 400:\n            continue\n", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def isRobotBounded(instructions: str) -> bool:\n    x, y, dx, dy = 0, 0, 0, 1\n    for _ in range(4):\n        for i in instructions:\n            if i == 'R':\n                dx, dy = dy, -dx\n            if i == 'L':\n                dx, dy = -dy, dx\n            if i == 'G':\n                x, y = x + dx, y +", "gpt-3.5-turbo_prob": 0.5}
{"id": "243", "llama3.1-8b-instruct_response": "def smallestGoodBase(fronts, backs):\n    n = len(fronts)\n    fronts_set = set(fronts)\n    for i in range(n):\n        if backs[i] not in fronts_set:\n            return backs[i]\n    return 0", "llama3.1-8b-instruct_prob": 0.531329747419996, "gpt-3.5-turbo_response": "def flipgame(fronts, backs):\n    same = {x for i, x in enumerate(fronts) if x == backs[i]}\n    return min([x for x in fronts + backs if x not in same] or [0])", "gpt-3.5-turbo_prob": 0.46867025258000405}
{"id": "244", "llama3.1-8b-instruct_response": "def numSteps(s):\n    n = len(s)\n    steps = 0\n    ones = 1\n    for i in range(n - 2, -1, -1):\n        if s[i] == '1':\n            ones += 1\n        else:\n            steps += ones\n    return steps + ones", "llama3.1-8b-instruct_prob": 0.35681745081251165, "gpt-3.5-turbo_response": "def numSteps(s):\n    steps = 0\n    num = int(s, 2)\n    while num != 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num += 1\n        steps += 1\n    return steps", "gpt-3.5-turbo_prob": 0.6431825491874884}
{"id": "245", "llama3.1-8b-instruct_response": "def optimalDivision(nums):\n    n = len(nums)\n    if n == 1:\n        return str(nums[0])\n    if n == 2:\n        return \"{}{}\".format(nums[0], \"/\" + str(nums[1]))\n    return \"{}/{}\".format(nums[0], \"/\".join(map(str, nums[1:])))", "llama3.1-8b-instruct_prob": 0.407935668189327, "gpt-3.5-turbo_response": "def optimalDivision(nums):\n    nums = list(map(str, nums))\n    if len(nums) <= 2:\n        return '/'.join(nums)\n    return '{}/({})'.format(nums[0], '/'.join(nums[1:]))", "gpt-3.5-turbo_prob": 0.592064331810673}
{"id": "248", "llama3.1-8b-instruct_response": "class Solution:\n    def containsCycle(self, grid: list[list[str]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited = set()\n\n        def dfs(i: int, j: int, path: list[tuple[int, int]]) -> bool:\n            if (i, j) in visited:\n                return len(path", "llama3.1-8b-instruct_prob": 0.5268830066343504, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        def dfs(x, y, px, py, color):\n            if visited[x][y]:\n                return True\n            visited[x][y] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if", "gpt-3.5-turbo_prob": 0.47311699336564966}
{"id": "250", "llama3.1-8b-instruct_response": "class Solution:\n    def mincostToHireWorkers(self, quality: list[int], wage: list[int], K: int) -> float:\n        workers = sorted((w/q, q, w) for w, q in zip(wage, quality))\n        ans = float('inf')\n        total = 0\n        for _, q, w in workers:\n            if K == 1: return w\n            total += q\n            workers[0] = (workers[0", "llama3.1-8b-instruct_prob": 0.3132794194577687, "gpt-3.5-turbo_response": "import heapq\n\ndef mincostToHireWorkers(quality, wage, K):\n    workers = sorted((w / q, q) for w, q in zip(wage, quality))\n    res = float('inf')\n    pool = []\n    sumq = 0\n    for ratio, q in workers:\n        heapq.heappush(pool, -q)\n        sumq += q\n        if len(pool) > K:\n            sumq += heapq.heappop(pool)\n       ", "gpt-3.5-turbo_prob": 0.6867205805422313}
{"id": "251", "llama3.1-8b-instruct_response": "def clumsy(n):\n    if n == 1: return n\n    if n == 2: return 2\n    if n == 3: return 2\n    if n == 4: return 7\n    result = n\n    n -= 1\n    while n > 4:\n        if n % 4 == 0: result = result // n\n        elif n % 4 == 1: result = result + n\n        elif n", "llama3.1-8b-instruct_prob": 0.6184972067939111, "gpt-3.5-turbo_response": "```python\ndef clumsy(N):\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    elif N == 3:\n        return 6\n    elif N == 4:\n        return 7\n    else:\n        if N % 4 == 0:\n            return N + 1\n        elif N % 4 <= 2:\n            return N + 2\n        else:\n            return N - ", "gpt-3.5-turbo_prob": 0.38150279320608893}
{"id": "252", "llama3.1-8b-instruct_response": "def minTaps(n, ranges):\n    taps = [(0, r) for r in ranges]\n    for i, r in enumerate(ranges):\n        if i > 0:\n            taps.append((taps[i-1][0] - r, taps[i-1][1]))\n        taps.append((taps[i][1] + r, i))\n    taps.sort()\n    max_reach, last_tap, cnt = -1, -1, 0\n   ", "llama3.1-8b-instruct_prob": 0.4193746274874033, "gpt-3.5-turbo_response": "def minTaps(n, ranges):\n    max_range = [0] * (n + 1)\n    for i in range(n + 1):\n        left, right = max(i - ranges[i], 0), min(i + ranges[i], n)\n        max_range[left] = max(max_range[left], right)\n    curr_end, next_end, taps = 0, 0, 0\n    for i in range(n + 1):\n        next_end = max", "gpt-3.5-turbo_prob": 0.5806253725125967}
{"id": "253", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        if target == 1:\n            return 0\n        if target == x:\n            return 1\n        if target < x:\n            return 2 * (target + (x - target) - 1) // (x - 1)\n\n        ops = float('inf')\n        for i in range(1, target + 1):\n            if", "llama3.1-8b-instruct_prob": 0.25268509676935486, "gpt-3.5-turbo_response": "```python\ndef findMinMoves(machines):\n    total = sum(machines)\n    n = len(machines)\n    if total % n != 0:\n        return -1\n    target = total // n\n    res = 0\n    preSum = 0\n    for num in machines:\n        num -= target\n        preSum += num\n        res = max(res, abs(preSum), num)\n    return res\n```", "gpt-3.5-turbo_prob": 0.7473149032306451}
{"id": "254", "llama3.1-8b-instruct_response": "def count_numbers_with_unique_digits(n):\n    def count_numbers_with_unique_digits_helper(length):\n        if length == 1:\n            return 10\n        elif length == 2:\n            return 91\n        elif length == 3:\n            return 739\n        elif length == 4:\n            return 5275\n        elif length == 5:\n            return 33511\n        elif length == 6:\n            return 194015\n        elif length == 7:\n", "llama3.1-8b-instruct_prob": 0.350906615930886, "gpt-3.5-turbo_response": "def countNumbersWithUniqueDigits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    result = 10\n    unique_digits = 9\n    available_digits = 9\n    for i in range(2, n + 1):\n        unique_digits = unique_digits * available_digits\n        result += unique_digits\n        available_digits -= 1\n    return result", "gpt-3.5-turbo_prob": 0.649093384069114}
{"id": "255", "llama3.1-8b-instruct_response": "def min_jumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    max_reach = arr[0]\n    step = arr[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step < 0:\n            jumps +=", "llama3.1-8b-instruct_prob": 0.4754350235789552, "gpt-3.5-turbo_response": "def jump(nums):\n    if len(nums) <= 1:\n        return 0\n    max_reach, steps, last_jump_index = nums[0], 1, nums[0]\n    for i in range(1, len(nums)):\n        if i > max_reach:\n            return -1\n        if i > last_jump_index:\n            steps += 1\n            last_jump_index = max_reach\n        max_reach = max(max_reach, i + nums", "gpt-3.5-turbo_prob": 0.5245649764210448}
{"id": "256", "llama3.1-8b-instruct_response": "def minEatingSpeed(piles, H):\n    def canEatAll(speed):\n        return sum((p-1)//speed + 1 for p in piles) <= H\n\n    left, right = 1, max(piles)\n    while left < right:\n        mid = (left + right) // 2\n        if canEatAll(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "llama3.1-8b-instruct_prob": 0.46867026085096875, "gpt-3.5-turbo_response": "```python\nimport math\nclass Solution:\n    def minEatingSpeed(self, piles, H):\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) // 2\n            if sum(math.ceil(pile / mid) for pile in piles) > H:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n```", "gpt-3.5-turbo_prob": 0.5313297391490313}
{"id": "257", "llama3.1-8b-instruct_response": "class Solution:\n    def maxProbability(self, n: int, edges: list[list[int]], succProb: list[float], start: int, end: int) -> float:\n        graph = {i: [] for i in range(n)}\n        for (u, v), p in zip(edges, succProb):\n            graph[u].append((v, p))\n            graph[v].append((u, p))\n\n        heap = [(-1, start)]\n        visited = set()\n        while", "llama3.1-8b-instruct_prob": 0.44676812716923897, "gpt-3.5-turbo_response": "import heapq\n\ndef maxProbability(n, edges, succProb, start, end):\n    graph = {i: [] for i in range(n)}\n    for i, (a, b) in enumerate(edges):\n        graph[a].append((b, succProb[i]))\n        graph[b].append((a, succProb[i]))\n\n    pq = [(-1, start)]\n    probs = [0] * n\n    while pq:\n        prob, node = heapq.heappop(pq", "gpt-3.5-turbo_prob": 0.553231872830761}
{"id": "259", "llama3.1-8b-instruct_response": "def smallestDivisor(nums, threshold):\n    def check(divisor):\n        return sum((num - 1) // divisor + 1 for num in nums) <= threshold\n\n    left, right = 1, max(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left", "llama3.1-8b-instruct_prob": 0.5111924371535315, "gpt-3.5-turbo_response": "def smallestDivisor(nums, threshold):\n    left, right = 1, max(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if sum((x + mid - 1) // mid for x in nums) > threshold:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "gpt-3.5-turbo_prob": 0.48880756284646854}
{"id": "26", "llama3.1-8b-instruct_response": "def solve(n, m):\n    if n == 1 or m == 1:\n        return \"YES\"\n    if n % 2 == 0 and m % 2 == 0:\n        return \"YES\"\n    if n % 2 == 1 and m % 2 == 1:\n        return \"YES\"\n    return \"NO\"\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(s", "llama3.1-8b-instruct_prob": 0.48807180174068043, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    if n == 1 or m == 1 or (n == 2 and m == 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.5119281982593196}
{"id": "260", "llama3.1-8b-instruct_response": "def wiggleMaxLength(nums):\n    if len(nums) < 2:\n        return len(nums)\n    up, down = 1, 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            up = down + 1\n        elif nums[i] < nums[i - 1]:\n            down = up + 1\n    return max(up, down)", "llama3.1-8b-instruct_prob": 0.4828108309597757, "gpt-3.5-turbo_response": "def wiggleMaxLength(nums):\n    if len(nums) < 2:\n        return len(nums)\n    up, down = 1, 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            up = down + 1\n        elif nums[i] < nums[i-1]:\n            down = up + 1\n    return max(up, down)", "gpt-3.5-turbo_prob": 0.5171891690402243}
{"id": "261", "llama3.1-8b-instruct_response": "import heapq\n\ndef findKthLargest(nums, k):\n    return heapq.nlargest(k, nums)[-1]", "llama3.1-8b-instruct_prob": 0.5000000032468884, "gpt-3.5-turbo_response": "import heapq\ndef findKthLargest(nums, k):\n    return heapq.nlargest(k, nums)[-1]", "gpt-3.5-turbo_prob": 0.49999999675311146}
{"id": "263", "llama3.1-8b-instruct_response": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        MOD = 10**9 + 7\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[1,7,0],[2,6],[1,3],[2,4]]\n        dp = [0]*10\n        dp[0] = 10\n        for _ in range(n-1):\n           ", "llama3.1-8b-instruct_prob": 0.48807179622670405, "gpt-3.5-turbo_response": "```python\ndef knightDialer(n):\n    moves = {\n        0: [4, 6],\n        1: [6, 8],\n        2: [7, 9],\n        3: [4, 8],\n        4: [0, 3, 9],\n        6: [0, 1, 7],\n        7: [2, 6],\n        8: [1, 3],\n", "gpt-3.5-turbo_prob": 0.511928203773296}
{"id": "264", "llama3.1-8b-instruct_response": "def uniqueLetterString(arr):\n    last = {c: i for i, s in enumerate(arr) for c in s}\n    ans = 0\n    for i, s in enumerate(arr):\n        l = len(s)\n        for c in s:\n            j = last[c]\n            last[c] = i + 1\n            ans = max(ans, (i + 1 - j) * (j - i + l))\n    return ans", "llama3.1-8b-instruct_prob": 0.5283596874885974, "gpt-3.5-turbo_response": "```python\ndef maxLength(arr):\n    result = [\"\"]\n    for word in arr:\n        for candidate in result[:]:\n            new_candidate = candidate + word\n            if len(new_candidate) == len(set(new_candidate)):\n                result.append(new_candidate)\n    return max(len(candidate) for candidate in result)\n```", "gpt-3.5-turbo_prob": 0.4716403125114026}
{"id": "265", "llama3.1-8b-instruct_response": "class Solution:\n    def maxNonOverlapping(self, nums: list[int], target: int) -> int:\n        prefix = [0]\n        for num in nums:\n            prefix.append(prefix[-1] + num)\n        count = 0\n        seen = set()\n        for i in range(len(prefix)):\n            if prefix[i] in seen:\n                continue\n            seen.add(prefix[i])\n            left = 0\n            right = i\n            while left < right:\n                mid", "llama3.1-8b-instruct_prob": 0.2701488226986948, "gpt-3.5-turbo_response": "```python\ndef maxNonOverlapping(nums, target):\n    seen = {0}\n    prefix_sum = 0\n    max_count = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum - target in seen:\n            max_count += 1\n            seen = {0}\n            prefix_sum = 0\n        else:\n            seen.add(prefix_sum)\n    return max_count\n```", "gpt-3.5-turbo_prob": 0.7298511773013052}
{"id": "266", "llama3.1-8b-instruct_response": "def numSplits(s):\n    n = len(s)\n    left = set()\n    for i in range(n):\n        left.add(s[i])\n    res = 0\n    for i in range(n):\n        left.remove(s[i])\n        res += len(left)\n    return res", "llama3.1-8b-instruct_prob": 0.5774202659087841, "gpt-3.5-turbo_response": "```python\ndef numSplits(s):\n    left_count = {}\n    right_count = {}\n    result = 0\n    for char in s:\n        right_count[char] = right_count.get(char, 0) + 1\n    for char in s:\n        left_count[char] = left_count.get(char, 0) + 1\n        right_count[char] -= 1\n        if right_count[char] == 0:\n            del right_count[char]\n        if", "gpt-3.5-turbo_prob": 0.42257973409121585}
{"id": "267", "llama3.1-8b-instruct_response": "def evalRPN(tokens):\n    stack = []\n    for token in tokens:\n        if token in {\"+\", \"-\", \"*\", \"/\"}:\n            b = stack.pop()\n            a = stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(a - b)\n            elif token == \"*\":\n                stack.append(a * b)\n            else:\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return", "llama3.1-8b-instruct_prob": 0.5126367692079695, "gpt-3.5-turbo_response": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                elif token == \"/\":\n                    stack.append(int(a / b", "gpt-3.5-turbo_prob": 0.4873632307920305}
{"id": "268", "llama3.1-8b-instruct_response": "def baseNeg2(N):\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N > 0:\n        result = (\"1\" if N % 4 >= 2 else \"0\") + result\n        N = N // 2 if N % 4 < 2 else N // 2 - 1\n    return result", "llama3.1-8b-instruct_prob": 0.5231206379923133, "gpt-3.5-turbo_response": "def baseNeg2(N):\n    if N == 0:\n        return \"0\"\n    res = \"\"\n    while N != 0:\n        remainder = N % -2\n        N //= -2\n        if remainder < 0:\n            remainder += 2\n            N += 1\n        res = str(remainder) + res\n    return res", "gpt-3.5-turbo_prob": 0.47687936200768666}
{"id": "269", "llama3.1-8b-instruct_response": "def kLengthApart(nums, k):\n    max_distance = float('-inf')\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            if i - max_distance > k:\n                max_distance = i\n            else:\n                return False\n    return True", "llama3.1-8b-instruct_prob": 0.4597157266149957, "gpt-3.5-turbo_response": "def kLengthApart(nums, k):\n    distance = k\n    for num in nums:\n        if num == 1:\n            if distance < k:\n                return False\n            distance = 0\n        else:\n            distance += 1\n    return True", "gpt-3.5-turbo_prob": 0.5402842733850043}
{"id": "27", "llama3.1-8b-instruct_response": "from collections import defaultdict\nimport math\nimport heapq\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for x in a:\n        while x % 2 == 0:\n            d[x] += 1\n            x //= 2\n    h = []\n    for x in d:\n        heapq.heappush(h, (d[x], x))\n    ans = 0\n    while h:\n", "llama3.1-8b-instruct_prob": 0.370831118416579, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for num in a:\n        while num % 2 == 0:\n            num //= 2\n            count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.629168881583421}
{"id": "271", "llama3.1-8b-instruct_response": "def canJump(nums):\n    last_position = len(nums) - 1\n    for i in range(len(nums) - 1, -1, -1):\n        if i + nums[i] >= last_position:\n            last_position = i\n    return last_position == 0", "llama3.1-8b-instruct_prob": 0.4482199401530967, "gpt-3.5-turbo_response": "def canJump(nums):\n    max_reachable = 0\n    for i in range(len(nums)):\n        if i > max_reachable:\n            return False\n        max_reachable = max(max_reachable, i + nums[i])\n    return True", "gpt-3.5-turbo_prob": 0.5517800598469033}
{"id": "272", "llama3.1-8b-instruct_response": "from collections import deque\n\ndef maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n    n = len(status)\n    visited = [False] * n\n    queue = deque()\n    for box in initialBoxes:\n        queue.append(box)\n        visited[box] = True\n\n    while queue:\n        box = queue.popleft()\n        if status[box]:\n            for key in keys[box]:\n                if not visited[key]:\n                    queue.append(key)\n                    visited", "llama3.1-8b-instruct_prob": 0.4655755019324495, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef maxCandies(status, candies, keys, containedBoxes, initialBoxes):\n    total_candies = 0\n    queue = deque(initialBoxes)\n    found_boxes = set(initialBoxes)\n    while queue:\n        current_box = queue.popleft()\n        if status[current_box] == 1:\n            total_candies += candies[current_box]\n            for key in keys[current_box]:\n                if key not in found_boxes:\n                    queue.append", "gpt-3.5-turbo_prob": 0.5344244980675504}
{"id": "273", "llama3.1-8b-instruct_response": "def getShortestSequence(target):\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for i in range(1, target + 1):\n        j = 1\n        while j * 2 <= i:\n            dp[i] = min(dp[i], dp[i - j] + 1 + (j % 2 == 1))\n            j *= 2\n    return dp[target]", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def racecar(target):\n    dp = [0] * (target + 1)\n    for t in range(1, target + 1):\n        k = t.bit_length()\n        if t == 2**k - 1:\n            dp[t] = k\n            continue\n        for j in range(k - 1):\n            dp[t] = min(dp[t], dp[t - 2**(k-1) + 2**j] + k - 1", "gpt-3.5-turbo_prob": 0.5}
{"id": "275", "llama3.1-8b-instruct_response": "def checkValid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            elif c == '*' and stack:\n                stack.pop()\n        elif c == '*':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append('(')\n    return not stack", "llama3.1-8b-instruct_prob": 0.5272150784912147, "gpt-3.5-turbo_response": "def checkValidString(s):\n    low = high = 0\n    for char in s:\n        low += 1 if char == '(' else -1\n        high += 1 if char != ')' else -1\n        if high < 0:\n            break\n        low = max(low, 0)\n    return low == 0", "gpt-3.5-turbo_prob": 0.47278492150878526}
{"id": "277", "llama3.1-8b-instruct_response": "def bulbSwitch(light):\n    return sum(1 for i, x in enumerate(light) if x == i + 1)", "llama3.1-8b-instruct_prob": 0.40007540323136803, "gpt-3.5-turbo_response": "def numTimesAllBlue(light):\n    moments = 0\n    right_sum = 0\n    total_sum = 0\n    for i in range(len(light)):\n        right_sum += light[i]\n        total_sum += i + 1\n        if right_sum == total_sum:\n            moments += 1\n    return moments", "gpt-3.5-turbo_prob": 0.5999245967686321}
{"id": "278", "llama3.1-8b-instruct_response": "def largestMultipleOfThree(nums) : \n    nums.sort(reverse = True) \n    s = sum(nums) \n    if s % 3 == 0 : \n        return ''.join(map(str, nums)) \n    elif s % 3 == 1 : \n        if nums[-1] % 3 == 1 : \n            nums.pop() \n            nums.append(0) \n            nums.append(0) \n        else : \n            if nums[-2] %", "llama3.1-8b-instruct_prob": 0.44410528224963053, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        total = sum(digits)\n        if total % 3 == 0:\n            digits.sort(reverse=True)\n            return str(int(''.join(map(str, digits))))\n        elif total % 3 == 1:\n            remove_one = [i for i in digits if i % 3 == 1]\n            remove_two = [i for i in digits", "gpt-3.5-turbo_prob": 0.5558947177503695}
{"id": "279", "llama3.1-8b-instruct_response": "def getPermutation(n, k):\n    import math\n    k -= 1\n    nums = list(range(1, n + 1))\n    res = ''\n    while n > 1:\n        m = math.factorial(n - 1)\n        index = k // m\n        k %= m\n        res += str(nums[index])\n        nums.pop(index)\n        n -= 1\n    res += str(nums[0])\n    return res", "llama3.1-8b-instruct_prob": 0.4567420574816098, "gpt-3.5-turbo_response": "import math\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        nums = [str(i) for i in range(1, n+1)]\n        k -= 1\n        res = \"\"\n        while n > 0:\n            n -= 1\n            index, k = divmod(k, math.factorial(n))\n            res += nums.pop(index)\n        return res", "gpt-3.5-turbo_prob": 0.5432579425183903}
{"id": "280", "llama3.1-8b-instruct_response": "class Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n        def check(mid):\n            n = len(s)\n            dp = [[0] * (mid + 1) for _ in range(n + 1)]\n            for i in range(1, n + 1):\n                for j in range(1, min(i, mid) + 1):\n                    if i - j >= 0 and s[i - j] == s[i", "llama3.1-8b-instruct_prob": 0.5000000055139765, "gpt-3.5-turbo_response": "```python\ndef palindromePartition(s, k):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            dp[i][j] = dp[i - 1][j + 1] + (s[i - 1] != s[j])\n    f =", "gpt-3.5-turbo_prob": 0.4999999944860235}
{"id": "281", "llama3.1-8b-instruct_response": "def is_convertible(s, t, k):\n    def get_shift_diff(c1, c2):\n        return (ord(c2) - ord(c1) + 26) % 26\n\n    shift_diffs = [get_shift_diff(s[i], t[i]) for i in range(len(s))]\n    max_shift = max(shift_diffs)\n    return k >= max_shift", "llama3.1-8b-instruct_prob": 0.4218475844574902, "gpt-3.5-turbo_response": "```python\ndef canConvertString(s: str, t: str, k: int) -> bool:\n    if len(s) != len(t):\n        return False\n    shifts = [0] * 26\n    for i in range(len(s)):\n        diff = (ord(t[i]) - ord(s[i]) + 26) % 26\n        if diff != 0 and shifts[diff] * 26 + diff > k:\n            return False\n        shifts[", "gpt-3.5-turbo_prob": 0.5781524155425098}
{"id": "283", "llama3.1-8b-instruct_response": "def kthSmallestPairDistance(nums, k):\n    n = len(nums)\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances.append(abs(nums[i] - nums[j]))\n    distances.sort()\n    return distances[k - 1]", "llama3.1-8b-instruct_prob": 0.41271217586263625, "gpt-3.5-turbo_response": "import heapq\n\ndef smallestDistancePair(nums, k):\n    nums.sort()\n    low, high = 0, max(nums) - min(nums)\n    while low < high:\n        mid = (low + high) // 2\n        count, j = 0, 0\n        for i in range(len(nums)):\n            while j < len(nums) and nums[j] - nums[i] <= mid:\n                j += 1\n            count += j - i - 1", "gpt-3.5-turbo_prob": 0.5872878241373638}
{"id": "284", "llama3.1-8b-instruct_response": "def bagOfTokensScore(tokens, P):\n    tokens.sort()\n    score = 0\n    left, right = 0, len(tokens) - 1\n    while left <= right:\n        if tokens[left] <= P:\n            P -= tokens[left]\n            score += 1\n            left += 1\n        elif score and tokens[right] + 1 <= P:\n            P += tokens[right]\n            score -= 1\n            right -= 1\n        else:\n", "llama3.1-8b-instruct_prob": 0.5878637219700149, "gpt-3.5-turbo_response": "```python\ndef bagOfTokensScore(tokens, P):\n    tokens.sort()\n    points = 0\n    max_points = 0\n    i, j = 0, len(tokens) - 1\n    while i <= j:\n        if P >= tokens[i]:\n            P -= tokens[i]\n            points += 1\n            i += 1\n            max_points = max(max_points, points)\n        elif points > 0:\n            P += tokens[j]\n            points", "gpt-3.5-turbo_prob": 0.4121362780299851}
{"id": "285", "llama3.1-8b-instruct_response": "def smallestRangeII(nums, k):\n    nums.sort()\n    res = nums[-1] - nums[0]\n    for i in range(len(nums) - 1):\n        res = min(res, max(nums[-1] - k, nums[i] + k) - min(nums[i + 1] + k, nums[0] - k))\n    return res", "llama3.1-8b-instruct_prob": 0.5139119205015578, "gpt-3.5-turbo_response": "def smallestRangeI(A, K):\n    return max(0, max(A) - min(A) - 2 * K)", "gpt-3.5-turbo_prob": 0.48608807949844224}
{"id": "286", "llama3.1-8b-instruct_response": "import itertools\nimport math\n\ndef get_probability(balls):\n    n = sum(balls) // 2\n    total_ways = math.comb(sum(balls), n)\n    ways_to_fill_box1 = 0\n    for r in range(n + 1):\n        ways_to_fill_box1 += math.comb(balls[0], r) * math.comb(sum(balls[1:]), n - r)\n    return ways_to_fill_box1 / total_ways", "llama3.1-8b-instruct_prob": 0.5490605770853346, "gpt-3.5-turbo_response": "```python\nfrom math import comb\n\ndef getProbability(balls):\n    n = sum(balls) // 2\n    total = comb(sum(balls), n)\n    count = [0, 0]\n    color_count = [0, 0]\n    prefix = [1, 1]\n    for b in balls:\n        for i in range(0, b):\n            for j in range(0, 2):\n                count[j] += (i == 0", "gpt-3.5-turbo_prob": 0.4509394229146654}
{"id": "287", "llama3.1-8b-instruct_response": "def beautifulArrangement(N):\n    def backtrack(start, path):\n        if len(path) == N:\n            result.append(path[:])\n            return\n        for num in range(1, N + 1):\n            if num not in path and (len(path) + 1) % num == 0 or num % (len(path) + 1) == 0:\n                path.append(num)\n                backtrack(start + 1, path)\n                path.pop()\n    result = []\n", "llama3.1-8b-instruct_prob": 0.4121362779312908, "gpt-3.5-turbo_response": "```python\ndef countArrangement(N):\n    def count(i, X):\n        if i == 1:\n            return 1\n        return sum(count(i - 1, X - {x})\n                   for x in X\n                   if x % i == 0 or i % x == 0)\n    return count(N, set(range(1, N + 1)))\n```", "gpt-3.5-turbo_prob": 0.5878637220687091}
{"id": "288", "llama3.1-8b-instruct_response": "def flipLights(n, m):\n    if m == 0:\n        return 1\n    if n == 1:\n        return 2 if m <= 2 else 2\n    if n == 2:\n        return 3 if m <= 2 else 4\n    if n == 3:\n        return 8 if m <= 3 else 8\n    return 16 if m <= 4 else 16", "llama3.1-8b-instruct_prob": 0.3665113026177641, "gpt-3.5-turbo_response": "def flipLights(n, m):\n    n = min(n, 3)\n    if m == 0:\n        return 1\n    if m == 1:\n        return [2, 3, 4][n - 1]\n    if m == 2:\n        return [2, 4, 7][n - 1]\n    return [2, 4, 8][n - 1]", "gpt-3.5-turbo_prob": 0.6334886973822359}
{"id": "29", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    last = defaultdict(lambda: n)\n    ans = [-1] * n\n    for i in range(n):\n        last[a[i]] = i\n        for j in range(n):\n            if last[a[j]] < i:\n                last[a[j]] = n\n        mn = n\n        for j in range(n):\n            if last[j", "llama3.1-8b-instruct_prob": 0.5268830097139965, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [-1] * n\n    last = {}\n    for i in range(n):\n        last[a[i]] = i\n        cur = i\n        for j in range(1, n // (i + 1) + 1):\n            if last.get(a[i - j + 1], -1) >=", "gpt-3.5-turbo_prob": 0.4731169902860036}
{"id": "290", "llama3.1-8b-instruct_response": "def minCost(n, cuts):\n    cuts.sort()\n    cuts = [0, *cuts, n]\n    dp = [[-1] * len(cuts) for _ in range(len(cuts))]\n    return helper(0, len(cuts) - 1, cuts, dp)\n\ndef helper(l, r, cuts, dp):\n    if l >= r:\n        return 0\n    if dp[l][r] != -1:\n        return dp[l][r]\n   ", "llama3.1-8b-instruct_prob": 0.4664359004451919, "gpt-3.5-turbo_response": "```python\ndef minCost(n, cuts):\n    cuts.sort()\n    cuts = [0] + cuts + [n]\n    m = len(cuts)\n    dp = [[0] * m for _ in range(m)]\n    for d in range(2, m):\n        for i in range(m - d):\n            j = i + d\n            dp[i][j] = min(dp[i][k] + dp[k][j] for k in range(i + 1", "gpt-3.5-turbo_prob": 0.5335640995548082}
{"id": "291", "llama3.1-8b-instruct_response": "def numSubarraysWithOddSum(arr):\n    MOD = 10**9 + 7\n    n = len(arr)\n    odd = 0\n    res = 0\n    for i in range(n):\n        odd += arr[i] & 1\n        res += odd\n    return res % MOD", "llama3.1-8b-instruct_prob": 0.49030615317333703, "gpt-3.5-turbo_response": "```python\ndef numOfSubarrays(arr):\n    odd_count = 0\n    even_count = 1\n    total_sum = 0\n    result = 0\n    for num in arr:\n        total_sum += num\n        if total_sum % 2 == 0:\n            result += odd_count\n            even_count += 1\n        else:\n            result += even_count\n            odd_count += 1\n    return result % (10**9 + 7)\n", "gpt-3.5-turbo_prob": 0.509693846826663}
{"id": "292", "llama3.1-8b-instruct_response": "def maxAbsValExpr(arr1, arr2):\n    n = len(arr1)\n    return max(\n        max(i + arr1[i] - arr2[i] + abs(i - j) for j in range(n))\n        for i in range(n)\n    )", "llama3.1-8b-instruct_prob": 0.5629724930953938, "gpt-3.5-turbo_response": "```python\ndef maxAbsValExpr(arr1, arr2):\n    max1, max2, max3, max4 = -float('inf'), -float('inf'), -float('inf'), -float('inf')\n    min1, min2, min3, min4 = float('inf'), float('inf'), float('inf'), float('inf')\n    for i in range(len(arr1)):\n        max1 = max(max1, arr1[i] + arr2", "gpt-3.5-turbo_prob": 0.43702750690460634}
{"id": "293", "llama3.1-8b-instruct_response": "def leastInterval(tasks, n):\n    task_count = {}\n    for task in tasks:\n        task_count[task] = task_count.get(task, 0) + 1\n\n    max_count = max(task_count.values())\n    max_count_tasks = sum(count == max_count for count in task_count.values())\n\n    return max((max_count - 1) * (n + 1) + max_count_tasks, len(tasks))", "llama3.1-8b-instruct_prob": 0.558357089786842, "gpt-3.5-turbo_response": "def leastInterval(tasks, n):\n    task_map = [0] * 26\n    for task in tasks:\n        task_map[ord(task) - ord('A')] += 1\n    task_map.sort()\n    max_val = task_map[25] - 1\n    idle_slots = max_val * n\n    for i in range(24, -1, -1):\n        idle_slots -= min(task_map[i], max_val)\n    return len(tasks) + max", "gpt-3.5-turbo_prob": 0.4416429102131581}
{"id": "294", "llama3.1-8b-instruct_response": "def totalNQueens(n):\n    def is_valid(board, row, col):\n        for i in range(row):\n            if board[i] == col or \\\n                board[i] - i == col - row or \\\n                board[i] + i == col + row:\n                return False\n        return True\n\n    def solve_n_queens_util(n, row, board, res):\n        if row == n:\n            res.append(board[:])\n            return\n        for col in range(n", "llama3.1-8b-instruct_prob": 0.4509394190003509, "gpt-3.5-turbo_response": "```python\ndef totalNQueens(n):\n    def DFS(queens, xy_dif, xy_sum):\n        p = len(queens)\n        if p==n:\n            result.append(queens)\n            return None\n        for q in range(n):\n            if q not in queens and p-q not in xy_dif and p+q not in xy_sum:\n                DFS(queens+[q], xy_dif+[p-q], xy_sum+[p+q", "gpt-3.5-turbo_prob": 0.549060580999649}
{"id": "295", "llama3.1-8b-instruct_response": "class Solution:\n    def isSelfCrossing(self, x: list[int]) -> bool:\n        for i in range(3, len(x)):\n            if x[i] >= x[i-2] and x[i-1] <= x[i-3]:\n                return True\n            if i >= 4 and x[i-1] >= x[i-3] and x[i]+x[i-4] >= x[i-2]:\n                return True\n            if i >= 5", "llama3.1-8b-instruct_prob": 0.5612296620990991, "gpt-3.5-turbo_response": "def isSelfCrossing(x):\n    for i in range(3, len(x)):\n        if x[i] >= x[i-2] and x[i-1] <= x[i-3]:\n            return True\n        if i >= 4 and x[i-1] == x[i-3] and x[i] + x[i-4] >= x[i-2]:\n            return True\n        if i >= 5 and x[i-2] >= x[i-4", "gpt-3.5-turbo_prob": 0.4387703379009009}
{"id": "296", "llama3.1-8b-instruct_response": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        elif nums[mid] < nums[right]:\n            right = mid\n        else:\n            right -= 1\n    return nums[left]", "llama3.1-8b-instruct_prob": 0.49176536825424233, "gpt-3.5-turbo_response": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        elif nums[mid] < nums[right]:\n            right = mid\n        else:\n            right -= 1\n    return nums[left]", "gpt-3.5-turbo_prob": 0.5082346317457577}
{"id": "297", "llama3.1-8b-instruct_response": "def numTilePossibilities(tiles):\n    from collections import Counter\n    from functools import lru_cache\n\n    @lru_cache(None)\n    def dfs(count):\n        if not count:\n            return 0\n        ans = 0\n        for c in count:\n            ans += 1 + dfs(count - {c: count[c] - 1})\n        return ans\n\n    count = Counter(tiles)\n    return dfs(count)", "llama3.1-8b-instruct_prob": 0.5691978831265763, "gpt-3.5-turbo_response": "```python\nfrom itertools import permutations\n\ndef numTilePossibilities(tiles):\n    return len({\"\".join(p) for i in range(1, len(tiles) + 1) for p in permutations(tiles, i)})\n```", "gpt-3.5-turbo_prob": 0.43080211687342373}
{"id": "298", "llama3.1-8b-instruct_response": "def multiply(num1, num2):\n    def atoi(s):\n        sign = 1\n        if s[0] == '-':\n            sign = -1\n            s = s[1:]\n        elif s[0] == '+':\n            s = s[1:]\n        result = 0\n        for i in range(len(s)):\n            result += (ord(s[i]) - ord('0')) * (10 ** (len(s) - i - 1))\n       ", "llama3.1-8b-instruct_prob": 0.48439531331312186, "gpt-3.5-turbo_response": "```python\ndef multiply(num1, num2):\n    return str(int(num1) * int(num2))\n```", "gpt-3.5-turbo_prob": 0.5156046866868781}
{"id": "3", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    for i in range(k):\n        a[0] += a[1]\n        a.pop(1)\n    print(a[0] - a[-1])", "llama3.1-8b-instruct_prob": 0.44344077987000197, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(1, n):\n        if k > 0:\n            a[-1] += a[i]\n            a[i] = 0\n            k -= 1\n    print(max(a) - min(a))\n```", "gpt-3.5-turbo_prob": 0.556559220129998}
{"id": "30", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            cnt += 1\n    print((cnt + 1) // 2)", "llama3.1-8b-instruct_prob": 0.4999999970702539, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    print(count//2)\n```", "gpt-3.5-turbo_prob": 0.5000000029297461}
{"id": "300", "llama3.1-8b-instruct_response": "def expressionWithLeastOps(x, target):\n    def dfs(x, target, ops):\n        if target == x:\n            return ops\n        if target < x or target % x != 0:\n            return float('inf')\n        for op in ['+', '-', '*', '/']:\n            if op == '+':\n                res = dfs(x, target - x, ops + 1)\n            elif op == '-':\n                res = dfs(x, target + x, ops + 1)\n           ", "llama3.1-8b-instruct_prob": 0.4076833745486141, "gpt-3.5-turbo_response": "```python\ndef leastOpsExpressTarget(x, target):\n    pos, neg = [2 * x] * 20, [2 * x] * 20\n    pos[0], neg[0] = x * 2, 0\n    for i in range(1, 20):\n        pos[i] = min(pos[i - 1] * i, (i + 1) * target) \n        neg[i] = min(neg[i - ", "gpt-3.5-turbo_prob": 0.592316625451386}
{"id": "302", "llama3.1-8b-instruct_response": "def validSquare(p1, p2, p3, p4):\n    points = [p1, p2, p3, p4]\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n\n    d1 = distance(points[0], points[1])\n    d2 = distance(points[1], points[2])\n    d3 = distance(points[2], points[3])\n    d4 = distance(points[0", "llama3.1-8b-instruct_prob": 0.3844707077552515, "gpt-3.5-turbo_response": "```python\ndef validSquare(p1, p2, p3, p4):\n    def dist(p1, p2):\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    dists = [dist(p1, p2), dist(p1, p3), dist(p1, p4), dist(p2, p3), dist(p2, p4", "gpt-3.5-turbo_prob": 0.6155292922447486}
{"id": "303", "llama3.1-8b-instruct_response": "def maxSumAfterPartitioning(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        max_val = 0\n        for j in range(i - 1, max(0, i - k), -1):\n            max_val = max(max_val, arr[j])\n            dp[i] = max(dp[i], dp[j] + max_val * (i -", "llama3.1-8b-instruct_prob": 0.4873632337217767, "gpt-3.5-turbo_response": "```python\ndef maxSumAfterPartitioning(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        curMax = 0\n        for j in range(1, min(k, i + 1) + 1):\n            curMax = max(curMax, arr[i - j + 1])\n            dp[i + 1] = max(dp[i + 1], dp[i -", "gpt-3.5-turbo_prob": 0.5126367662782234}
{"id": "304", "llama3.1-8b-instruct_response": "def numFriendRequests(ages):\n    age_count = [0] * 121\n    for age in ages:\n        age_count[age] += 1\n    res = 0\n    for i in range(121):\n        for j in range(i):\n            if age_count[i] == 0 or age_count[j] == 0: continue\n            if j * 0.5 + 7 <= i or j > i or (j > 100 and i", "llama3.1-8b-instruct_prob": 0.509693846826663, "gpt-3.5-turbo_response": "def numFriendRequests(ages: List[int]) -> int:\n    count = [0] * 121\n    for age in ages:\n        count[age] += 1\n    requests = 0\n    for ageA in range(1, 121):\n        countA = count[ageA]\n        for ageB in range(1, 121):\n            countB = count[ageB]\n            if ageB <= 0.5 * ageA + ", "gpt-3.5-turbo_prob": 0.490306153173337}
{"id": "305", "llama3.1-8b-instruct_response": "```python\ndef distinctEchoSubstrings(text: str) -> int:\n    n = len(text)\n    ans = 0\n    for length in range(1, n // 2 + 1):\n        for i in range(n - length * 2 + 1):\n            substring = text[i:i + length]\n            if text[i + length:i + length * 2] == substring * 2:\n                ans += 1\n    return ans\n```", "llama3.1-8b-instruct_prob": 0.6220107289261319, "gpt-3.5-turbo_response": "```python\ndef distinctSubstrings(text):\n    n = len(text)\n    seen = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if text[i:j] == text[j:2*j-i]:\n                seen.add(text[i:j])\n    return len(seen)\n```", "gpt-3.5-turbo_prob": 0.37798927107386815}
{"id": "306", "llama3.1-8b-instruct_response": "def combinationSum4(nums, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    return dp[target]", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def combinationSum4(nums, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for i in range(1, target + 1):\n        for num in nums:\n            if i >= num:\n                dp[i] += dp[i - num]\n    return dp[target]", "gpt-3.5-turbo_prob": 0.5}
{"id": "307", "llama3.1-8b-instruct_response": "import random\nimport math\n\ndef soupServings(N):\n    N = (N + 24) // 25\n    if N >= 179: return 1.0\n    memo = {}\n    def dp(a, b):\n        if (a, b) in memo: return memo[(a, b)]\n        if a <= 0 and b > 0: return 1\n        if a <= 0 and b <= 0: return 0.5\n", "llama3.1-8b-instruct_prob": 0.5560603852479864, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def soupServings(self, N: int) -> float:\n        if N > 5000: return 1\n        memo = {}\n        def dp(a, b):\n            if (a, b) in memo: return memo[a, b]\n            if a <= 0 and b <= 0: return 0.5\n            if a <= 0: return 1\n            if b <= 0: return 0\n           ", "gpt-3.5-turbo_prob": 0.44393961475201366}
{"id": "309", "llama3.1-8b-instruct_response": "def longestArithSeqLength(A):\n    n = len(A)\n    dp = {}\n    for i in range(n):\n        for j in range(i):\n            diff = A[i] - A[j]\n            dp[(i, j, diff)] = dp.get((j, i, diff), 1) + 1\n    return max(dp.values())", "llama3.1-8b-instruct_prob": 0.42819573652439347, "gpt-3.5-turbo_response": "```python\ndef longestArithSeqLength(A):\n    dp = {}\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            diff = A[j] - A[i]\n            if (i, diff) in dp:\n                dp[j, diff] = dp[i, diff] + 1\n            else:\n                dp[j, diff] = 2\n    return max(dp.values())\n```", "gpt-3.5-turbo_prob": 0.5718042634756066}
{"id": "31", "llama3.1-8b-instruct_response": "def solve(s):\n    x, y = 0, 0\n    visited = set()\n    time = 0\n    for i in range(len(s)):\n        if (x, y) in visited:\n            time += 1\n        else:\n            time += 5\n            visited.add((x, y))\n        if s[i] == 'N':\n            y += 1\n        elif s[i] == 'S':\n            y -= 1\n        elif s", "llama3.1-8b-instruct_prob": 0.5310882504428991, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(1 + len(s) * 4)\n```", "gpt-3.5-turbo_prob": 0.46891174955710097}
{"id": "311", "llama3.1-8b-instruct_response": "def candy(ratings):\n    n = len(ratings)\n    candies = [1] * n\n    for i in range(1, n):\n        if ratings[i] > ratings[i - 1]:\n            candies[i] = candies[i - 1] + 1\n    for i in range(n - 2, -1, -1):\n        if ratings[i] > ratings[i + 1]:\n            candies[i] = max(candies[i], candies[i +", "llama3.1-8b-instruct_prob": 0.4716403195150589, "gpt-3.5-turbo_response": "def candy(ratings):\n    n = len(ratings)\n    left = [1] * n\n    right = [1] * n\n    for i in range(1, n):\n        if ratings[i] > ratings[i-1]:\n            left[i] = left[i-1] + 1\n    for i in range(n-2, -1, -1):\n        if ratings[i] > ratings[i+1]:\n            right[i] = right[i+1", "gpt-3.5-turbo_prob": 0.528359680484941}
{"id": "312", "llama3.1-8b-instruct_response": "def shortest_subarray(A, K):\n    n = len(A)\n    left = 0\n    curr_sum = 0\n    min_len = float('inf')\n    \n    for right in range(n):\n        curr_sum += A[right]\n        \n        while curr_sum >= K:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= A[left]\n            left += 1\n            \n    return min_len if min_len != float('inf') else -", "llama3.1-8b-instruct_prob": 0.772332136802328, "gpt-3.5-turbo_response": "```python\ndef shortestSubarray(A, K):\n    from collections import deque\n    prefix_sum = [0]\n    for num in A:\n        prefix_sum.append(prefix_sum[-1] + num)\n    min_length = float('inf')\n    queue = deque()\n    for i, num in enumerate(prefix_sum):\n        while queue and num - prefix_sum[queue[0]] >= K:\n            min_length = min(min_length, i - queue.popleft())\n        while queue and num", "gpt-3.5-turbo_prob": 0.2276678631976719}
{"id": "313", "llama3.1-8b-instruct_response": "def minDays(bloomDay, m, k):\n    n = len(bloomDay)\n    def check(x):\n        cnt = 0\n        for i in range(n):\n            if bloomDay[i] <= x:\n                cnt += 1\n                if cnt == k:\n                    cnt, k = 1, 0\n            else:\n                cnt = 0\n        return cnt >= k * m\n\n    left, right = 1, max(bloomDay)\n   ", "llama3.1-8b-instruct_prob": 0.4931193333350493, "gpt-3.5-turbo_response": "```python\ndef minDays(bloomDay, m, k):\n    def canMake(days):\n        bouquets = flowers = 0\n        for bloom in bloomDay:\n            if bloom > days:\n                flowers = 0\n            else:\n                flowers += 1\n                if flowers == k:\n                    bouquets += 1\n                    flowers = 0\n            if bouquets >= m:\n                return True\n        return False\n\n    if len(bloomDay) < m", "gpt-3.5-turbo_prob": 0.5068806666649507}
{"id": "314", "llama3.1-8b-instruct_response": "class Solution:\n    def numSub(self, s: str) -> int:\n        MOD = 10**9 + 7\n        count = 0\n        result = 0\n        for c in s:\n            if c == '1':\n                count += 1\n                result += count\n            else:\n                count = 0\n        return result % MOD", "llama3.1-8b-instruct_prob": 0.6184971944168562, "gpt-3.5-turbo_response": "```python\ndef numSub(s):\n    return sum(len(sub)*(len(sub)+1)//2 for sub in s.split('0')) % (10**9 + 7)\n```", "gpt-3.5-turbo_prob": 0.38150280558314376}
{"id": "315", "llama3.1-8b-instruct_response": "def minimumSwap(s1, s2):\n    x, y = 0, 0\n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            if c1 == 'x':\n                x += 1\n            else:\n                y += 1\n    if (x + y) % 2 == 0:\n        ans = x // 2 + y // 2\n        if x % 2 ==", "llama3.1-8b-instruct_prob": 0.5000000030942637, "gpt-3.5-turbo_response": "def minimumSwap(s1: str, s2: str) -> int:\n    xy, yx = 0, 0\n    for i in range(len(s1)):\n        if s1[i] == 'x' and s2[i] == 'y':\n            xy += 1\n        elif s1[i] == 'y' and s2[i] == 'x':\n            yx += 1\n    if (xy + yx) % 2 !=", "gpt-3.5-turbo_prob": 0.4999999969057363}
{"id": "316", "llama3.1-8b-instruct_response": "def longestHappyPrefix(s):\n    n = len(s)\n    for i in range(n // 2, -1, -1):\n        prefix = s[:i]\n        if s.endswith(prefix):\n            return prefix\n    return \"\"", "llama3.1-8b-instruct_prob": 0.5462008725509566, "gpt-3.5-turbo_response": "```python\ndef longestPrefix(s):\n    n = len(s)\n    lps = [0] * n\n    j = 0\n    i = 1\n    while i < n:\n        if s[i] == s[j]:\n            j += 1\n            lps[i] = j\n            i += 1\n        else:\n            if j != 0:\n                j = lps[j-1]\n            else:\n                lps[i] = ", "gpt-3.5-turbo_prob": 0.4537991274490433}
{"id": "317", "llama3.1-8b-instruct_response": "def numPermsDiSequence(S):\n    MOD = 10**9 + 7\n    n = len(S)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(i + 1):\n            if S[i] == 'D':\n                dp[i + 1][j + 1] += dp[i][", "llama3.1-8b-instruct_prob": 0.5096938480268371, "gpt-3.5-turbo_response": "```python\ndef numPermsDISequence(S: str) -> int:\n    n = len(S)\n    dp = [1] * (n + 1)\n    for s in S:\n        if s == 'I':\n            dp = dp[:-1]\n            for i in range(1, len(dp)):\n                dp[i] += dp[i - 1]\n        else:\n            dp = dp[1:]\n            for i in range(len(dp) - 1, ", "gpt-3.5-turbo_prob": 0.49030615197316285}
{"id": "318", "llama3.1-8b-instruct_response": "def maxSliceSum(slices):\n    n = len(slices)\n    total_sum = sum(slices)\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(3 * i, 3 * i + n, 3):\n            current_sum += slices[j % n]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n    return", "llama3.1-8b-instruct_prob": 0.4482199355152829, "gpt-3.5-turbo_response": "def maxPizzaSlice(slices):\n    n = len(slices)\n    k = n // 3\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 2][j - 1] + slices[i", "gpt-3.5-turbo_prob": 0.5517800644847172}
{"id": "319", "llama3.1-8b-instruct_response": "def stoneGameIII(A):\n    n = len(A)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + A[i]\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp[i] = prefix[n] - prefix[i] - dp[min(i + 1, i + 4", "llama3.1-8b-instruct_prob": 0.4320114042602873, "gpt-3.5-turbo_response": "```python\ndef stoneGameIII(stoneValue):\n    n = len(stoneValue)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp[i] = max(sum(stoneValue[i:j]) - dp[j] for j in range(i + 1, min(i + 4, n + 1)))\n    if dp[0] > 0:\n        return \"Alice\"\n", "gpt-3.5-turbo_prob": 0.5679885957397127}
{"id": "32", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 1\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.38199486637378505, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        ans += 1\n    print(ans)\n```", "gpt-3.5-turbo_prob": 0.6180051336262149}
{"id": "320", "llama3.1-8b-instruct_response": "def minOperations(nums):\n    operations = 0\n    for num in nums:\n        operations += num.bit_length() - 1\n    return operations", "llama3.1-8b-instruct_prob": 0.5432579487818194, "gpt-3.5-turbo_response": "def minOperations(nums):\n    return sum(bin(num).count('1') + (num > 1) for num in nums) - 1", "gpt-3.5-turbo_prob": 0.4567420512181806}
{"id": "321", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def checkBreak(self, s1: str, s2: str) -> bool:\n        return sorted(s1) >= sorted(s2) or sorted(s2) >= sorted(s1)\n```", "llama3.1-8b-instruct_prob": 0.4855522332679001, "gpt-3.5-turbo_response": "def checkIfCanBreak(s1, s2):\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    return all(s1[i] >= s2[i] for i in range(len(s1))) or all(s2[i] >= s1[i] for i in range(len(s1)))", "gpt-3.5-turbo_prob": 0.5144477667320999}
{"id": "322", "llama3.1-8b-instruct_response": "def minPatches(nums, n):\n    i = patch = reach = 0\n    while reach < n:\n        if i < len(nums) and nums[i] <= reach + 1:\n            reach += nums[i]\n            i += 1\n        else:\n            reach += reach + 1\n            patch += 1\n    return patch", "llama3.1-8b-instruct_prob": 0.5226567714613111, "gpt-3.5-turbo_response": "def minPatches(nums, n):\n    patches = 0\n    covered = 0\n    i = 0\n    while covered < n:\n        if i < len(nums) and nums[i] <= covered + 1:\n            covered += nums[i]\n            i += 1\n        else:\n            covered += covered + 1\n            patches += 1\n    return patches", "gpt-3.5-turbo_prob": 0.477343228538689}
{"id": "323", "llama3.1-8b-instruct_response": "```python\ndef is_interleaved(s1, s2, s3):\n    if len(s1) + len(s2) != len(s3):\n        return False\n\n    dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    dp[0][0] = True\n    for i in range(1, len(s1) + 1):\n        dp[i][0] = dp[i", "llama3.1-8b-instruct_prob": 0.4601481468561387, "gpt-3.5-turbo_response": "def isInterleave(s1, s2, s3):\n    if len(s1) + len(s2) != len(s3):\n        return False\n    dp = [True] + [False] * len(s2)\n    for j in range(len(s2)):\n        dp[j + 1] = dp[j] and s2[j] == s3[j]\n    for i in range(len(s1)):\n        dp[0] = dp[0] and s1", "gpt-3.5-turbo_prob": 0.5398518531438613}
{"id": "324", "llama3.1-8b-instruct_response": "def nextGreaterElement(n: int) -> int:\n    digits = [int(i) for i in str(n)]\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j", "llama3.1-8b-instruct_prob": 0.5691978874846922, "gpt-3.5-turbo_response": "def nextGreaterElement(n):\n    n = list(str(n))\n    i = len(n) - 2\n    while i >= 0 and n[i] >= n[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i]:\n        j -= 1\n    n[i], n[j] = n[j], n[i]\n    n[i", "gpt-3.5-turbo_prob": 0.43080211251530776}
{"id": "325", "llama3.1-8b-instruct_response": "def maxDistance(grid):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = []\n    max_distance = -1\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                queue.append((i, j, 0))\n\n    while queue:\n        x, y", "llama3.1-8b-instruct_prob": 0.5119282127352922, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef maxDistance(grid):\n    queue = deque([(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == 1])\n    if len(queue) == 0 or len(queue) == len(grid) * len(grid[0]):\n        return -1\n    distance = -1\n    while queue:\n        distance += 1\n        for _ in range(len(queue)):\n           ", "gpt-3.5-turbo_prob": 0.48807178726470773}
{"id": "326", "llama3.1-8b-instruct_response": "```python\ndef convert(s, numRows):\n    if numRows == 1 or numRows >= len(s):\n        return s\n    rows = [''] * numRows\n    index, step = 0, 1\n    for char in s:\n        rows[index] += char\n        if index == 0:\n            step = 1\n        elif index == numRows - 1:\n            step = -1\n        index += step\n    return ''.join(rows)\n```", "llama3.1-8b-instruct_prob": 0.43515074534478826, "gpt-3.5-turbo_response": "def convert(s, numRows):\n    if numRows == 1:\n        return s\n    rows = [''] * min(numRows, len(s))\n    index, step = 0, 1\n    for char in s:\n        rows[index] += char\n        if index == 0:\n            step = 1\n        elif index == numRows - 1:\n            step = -1\n        index += step\n    return ''.join(rows)", "gpt-3.5-turbo_prob": 0.5648492546552117}
{"id": "327", "llama3.1-8b-instruct_response": "```python\ndef lengthOfLongestSubstring(s: str) -> int:\n    char_set = set()\n    left = 0\n    max_len = 0\n    \n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\nprint(lengthOfLongestSubstring(\"", "llama3.1-8b-instruct_prob": 0.5201373023505517, "gpt-3.5-turbo_response": "def length_of_longest_substring(s):\n    max_length = 0\n    start = 0\n    char_index = {}\n    \n    for end in range(len(s)):\n        if s[end] in char_index and char_index[s[end]] >= start:\n            start = char_index[s[end]] + 1\n        char_index[s[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length", "gpt-3.5-turbo_prob": 0.47986269764944833}
{"id": "328", "llama3.1-8b-instruct_response": "class Solution:\n    def find132pattern(self, nums: list[int]) -> bool:\n        s3 = float('-inf')\n        stack = []\n        for n in reversed(nums):\n            if n < s3: return True\n            while stack and stack[-1] < n:\n                s3 = stack.pop()\n            stack.append(n)\n        return False", "llama3.1-8b-instruct_prob": 0.5485188982774208, "gpt-3.5-turbo_response": "def find132pattern(nums):\n    stack = []\n    s3 = float('-inf')\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] < s3:\n            return True\n        while stack and nums[i] > stack[-1]:\n            s3 = stack.pop()\n        stack.append(nums[i])\n    return False", "gpt-3.5-turbo_prob": 0.4514811017225792}
{"id": "33", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    for i in range(n - 1, 1, -1):\n        print(i, i - 1)", "llama3.1-8b-instruct_prob": 0.48555223665183034, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(2)\n    for i in range(n-1, 0, -1):\n        print(n, i)\n```", "gpt-3.5-turbo_prob": 0.5144477633481698}
{"id": "331", "llama3.1-8b-instruct_response": "def angleClock(hour, minutes):\n    hour_angle = (hour % 12 + minutes / 60) * 30\n    minute_angle = minutes * 6\n    return abs(hour_angle - minute_angle)", "llama3.1-8b-instruct_prob": 0.34864513195001573, "gpt-3.5-turbo_response": "```python\ndef angleClock(hour: int, minutes: int) -> float:\n    h_angle = (hour % 12) * 30 + minutes * 0.5\n    m_angle = minutes * 6\n    angle = abs(h_angle - m_angle)\n    return min(angle, 360 - angle)\n```", "gpt-3.5-turbo_prob": 0.6513548680499843}
{"id": "332", "llama3.1-8b-instruct_response": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        def expand(left, right):\n            count = 0\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                count += 1\n                left -= 1\n                right += 1\n            return count\n\n        res = 0\n        for i in range(len(s)):\n            res += expand(i, i)  # odd length\n           ", "llama3.1-8b-instruct_prob": 0.5283596872336577, "gpt-3.5-turbo_response": "```python\ndef countSubstrings(s):\n    n = len(s)\n    ans = 0\n    for center in range(2*n - 1):\n        left = center // 2\n        right = left + center % 2\n        while left >= 0 and right < n and s[left] == s[right]:\n            ans += 1\n            left -= 1\n            right += 1\n    return ans\n```", "gpt-3.5-turbo_prob": 0.4716403127663424}
{"id": "333", "llama3.1-8b-instruct_response": "def minJumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    maxReach = arr[0]\n    step = arr[0]\n    jumps = 1\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n\n        maxReach = max(maxReach, i + arr[i])\n        step -= 1\n\n        if step == 0:\n            jumps += 1\n", "llama3.1-8b-instruct_prob": 0.458337148588158, "gpt-3.5-turbo_response": "```python\ndef minJumps(arr):\n    n = len(arr)\n    jumps = 0\n    cur = 0\n    while cur < n - 1:\n        next_index = cur + 1\n        for i in range(cur + 1, min(cur + arr[cur] + 1, n)):\n            if arr[i] == arr[cur]:\n                next_index = i\n                break\n        cur = next_index\n        jumps += 1\n    return jumps", "gpt-3.5-turbo_prob": 0.541662851411842}
{"id": "334", "llama3.1-8b-instruct_response": "```python\ndef minimumDeleteSum(s, cost):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        if s[i - 1] == s[i - 2]:\n            dp[i][i] = dp[i - 1][i - 1] + cost[i - 1]\n        else:\n            dp[i][i", "llama3.1-8b-instruct_prob": 0.3875460585465301, "gpt-3.5-turbo_response": "```python\ndef minCost(s, cost):\n    total_cost = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            total_cost += min(cost[i], cost[i-1])\n            cost[i] = max(cost[i], cost[i-1])\n    return total_cost\n```", "gpt-3.5-turbo_prob": 0.6124539414534699}
{"id": "335", "llama3.1-8b-instruct_response": "def canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n\ndef maxWeight(steelR", "llama3.1-8b-instruct_prob": 0.41213628383346734, "gpt-3.5-turbo_response": "```python\ndef tallest_billboard(rods):\n    dp = {0: 0}\n    for rod in rods:\n        new_dp = dp.copy()\n        for d in dp:\n            new_dp[d + rod] = max(dp[d + rod], dp[d])\n            new_dp[abs(d - rod)] = max(dp[abs(d - rod)], dp[d] + min(d, rod))\n        dp = new_dp\n    return dp[0]\n```", "gpt-3.5-turbo_prob": 0.5878637161665327}
{"id": "336", "llama3.1-8b-instruct_response": "```python\ndef minSteps(s, t):\n    count_s = {}\n    count_t = {}\n    \n    for char in s:\n        if char in count_s:\n            count_s[char] += 1\n        else:\n            count_s[char] = 1\n            \n    for char in t:\n        if char in count_t:\n            count_t[char] += 1\n        else:\n            count_t[char] = 1\n            \n    steps = 0\n    for char in count", "llama3.1-8b-instruct_prob": 0.37902273053755836, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nclass Solution:\n    def minSteps(self, s: str, t: str) -> int:\n        s_count = Counter(s)\n        t_count = Counter(t)\n        diff = s_count - t_count\n        return sum(diff.values())\n```", "gpt-3.5-turbo_prob": 0.6209772694624416}
{"id": "337", "llama3.1-8b-instruct_response": "def canCompleteCircuit(gas, cost):\n    n = len(gas)\n    total_gas = [gas[i] - cost[i] for i in range(n)]\n    tank = 0\n    start = 0\n    for i in range(n):\n        tank += total_gas[i]\n        if tank < 0:\n            start = i + 1\n            tank = 0\n    return start if tank >= 0 else -1", "llama3.1-8b-instruct_prob": 0.5636753311702785, "gpt-3.5-turbo_response": "def canCompleteCircuit(gas, cost):\n    total_tank = 0\n    curr_tank = 0\n    starting_station = 0\n    for i in range(len(gas)):\n        total_tank += gas[i] - cost[i]\n        curr_tank += gas[i] - cost[i]\n        if curr_tank < 0:\n            starting_station = i + 1\n            curr_tank = 0\n    return starting_station if total_tank", "gpt-3.5-turbo_prob": 0.4363246688297216}
{"id": "339", "llama3.1-8b-instruct_response": "def count_triplets(nums1, nums2):\n    def count_type1(nums1, nums2):\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                for k in range(j + 1, len(nums2)):\n                    if nums1[i] ** 2 == nums2[j] * nums2[k]:\n                        count += 1\n        return count\n\n    def count_type2(nums1, nums2):\n       ", "llama3.1-8b-instruct_prob": 0.4441052682825095, "gpt-3.5-turbo_response": "def numTriplets(nums1, nums2):\n    def countTriplets(arr1, arr2):\n        count = 0\n        for i in range(len(arr1)):\n            for j in range(len(arr2)):\n                for k in range(j+1, len(arr2)):\n                    if arr1[i] * arr1[i] == arr2[j] * arr2[k]:\n                        count += 1\n        return count\n\n    return countTriplets(nums1, nums2)", "gpt-3.5-turbo_prob": 0.5558947317174905}
{"id": "34", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n >= 7:\n        print(9)\n    elif n >= 5:\n        print(8)\n    elif n >= 4:\n        print(7)\n    elif n >= 3:\n        print(6)\n    elif n >= 2:\n        print(5)\n    elif n >= 1:\n        print(4)\n    else:\n        print(3)", "llama3.1-8b-instruct_prob": 0.4845164362439791, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print('1' * (n // 2))\n    else:\n        print('7' + '1' * ((n - 3) // 2))", "gpt-3.5-turbo_prob": 0.5154835637560209}
{"id": "340", "llama3.1-8b-instruct_response": "```python\ndef simplify_path(path):\n    stack = []\n    components = path.split(\"/\")\n    for component in components:\n        if component == \"..\":\n            if stack:\n                stack.pop()\n        elif component != \"\" and component != \".\":\n            stack.append(component)\n    return \"/\" + \"/\".join(stack)\n\nprint(simplify_path(\"/home/\"))\nprint(simplify_path(\"/a/./b/../../c/\"))\nprint(simplify_path(\"/../\"))\nprint(simplify_path(\"/home//foo/", "llama3.1-8b-instruct_prob": 0.6051940362745746, "gpt-3.5-turbo_response": "import os\ndef simplifyPath(path):\n    return os.path.abspath(path)", "gpt-3.5-turbo_prob": 0.39480596372542537}
{"id": "341", "llama3.1-8b-instruct_response": "def nthUglyNumber(n):\n    ugly = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(ugly) < n:\n        ugly.append(min(2*ugly[i2], 3*ugly[i3], 5*ugly[i5]))\n        if ugly[-1] == 2*ugly[i2]: i2 += 1\n        if ugly[-1] == 3", "llama3.1-8b-instruct_prob": 0.5963692485048915, "gpt-3.5-turbo_response": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        ugly = [1]\n        i2, i3, i5 = 0, 0, 0\n        while len(ugly) < n:\n            next_ugly = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n            ugly.append(next_ugly)\n            if next_ugly", "gpt-3.5-turbo_prob": 0.40363075149510846}
{"id": "342", "llama3.1-8b-instruct_response": "def countBattleships(board):\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'X' and (i == 0 or board[i-1][j] == '.') and (j == 0 or board[i][j-1] == '.'):\n                count += 1\n    return count", "llama3.1-8b-instruct_prob": 0.4370275025501493, "gpt-3.5-turbo_response": "def countBattleships(board):\n    count = 0\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'X' and (i == 0 or board[i-1][j] != 'X') and (j == 0 or board[i][j-1] != 'X'):\n                count += 1\n    return count", "gpt-3.5-turbo_prob": 0.5629724974498507}
{"id": "343", "llama3.1-8b-instruct_response": "```python\nimport math\n\ndef numSquares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\n#", "llama3.1-8b-instruct_prob": 0.8059278333811726, "gpt-3.5-turbo_response": "```python\ndef numSquares(n):\n    while n % 4 == 0:\n        n /= 4\n    if n % 8 == 7:\n        return 4\n    a = 0\n    while a * a <= n:\n        b = int((n - a * a) ** 0.5)\n        if a * a + b * b == n:\n            return (not not a) + (not not b)\n        a += ", "gpt-3.5-turbo_prob": 0.19407216661882737}
{"id": "344", "llama3.1-8b-instruct_response": "def minDeletionSize(strs)\n    count = 0\n    for col in zip(*strs)\n        if sorted(col) != list(col)\n            count += 1\n    end\n    return count", "llama3.1-8b-instruct_prob": 0.5600727524140091, "gpt-3.5-turbo_response": "def minDeletionSize(A):\n    return sum(list(A[i] != ''.join(sorted(A[i])) for i in range(len(A[0]))))", "gpt-3.5-turbo_prob": 0.4399272475859909}
{"id": "346", "llama3.1-8b-instruct_response": "def numberOfSubarrays(nums, k):\n    odd_count = {0: 1}\n    odd_sum = 0\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd_sum += 1\n        count += odd_count.get(odd_sum - k, 0)\n        odd_count[odd_sum] = odd_count.get(odd_sum, 0) + 1\n    return count", "llama3.1-8b-instruct_prob": 0.6440652390119064, "gpt-3.5-turbo_response": "```python\ndef numberOfSubarrays(nums, k):\n    count = 0\n    prefix = [0]\n    for num in nums:\n        prefix.append(prefix[-1] + num % 2)\n    count = 0\n    for i in range(len(prefix)):\n        for j in range(i + 1, len(prefix)):\n            if prefix[j] - prefix[i] == k:\n                count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.3559347609880937}
{"id": "347", "llama3.1-8b-instruct_response": "def checkInclusion(s1, s2):\n    if len(s1) > len(s2):\n        return False\n\n    s1_count = [0] * 26\n    s2_count = [0] * 26\n\n    for i in range(len(s1)):\n        s1_count[ord(s1[i]) - ord('a')] += 1\n        s2_count[ord(s2[i]) - ord('a')] += 1\n\n    for i in", "llama3.1-8b-instruct_prob": 0.48555222650004004, "gpt-3.5-turbo_response": "def checkInclusion(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    s1_map = [0] * 26\n    s2_map = [0] * 26\n    for i in range(len(s1)):\n        s1_map[ord(s1[i]) - ord('a')] += 1\n        s2_map[ord(s2[i]) - ord('a')] += 1\n    for i in", "gpt-3.5-turbo_prob": 0.51444777349996}
{"id": "348", "llama3.1-8b-instruct_response": "def maximumSum(arr):\n    n = len(arr)\n    dp1 = [0] * n\n    dp2 = [0] * n\n    dp1[0] = arr[0]\n    dp2[0] = max(0, arr[0])\n    for i in range(1, n):\n        dp1[i] = max(dp1[i-1], dp2[i-1] + arr[i])\n        dp2[i] = max(dp2[i", "llama3.1-8b-instruct_prob": 0.4895565442969973, "gpt-3.5-turbo_response": "def maximumSum(arr):\n    n = len(arr)\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0], dp[0][1], res = arr[0], arr[0], arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(arr[i], dp[i-1][0] + arr[i])\n        dp[i][1] = max(dp[i-1][0],", "gpt-3.5-turbo_prob": 0.5104434557030028}
{"id": "349", "llama3.1-8b-instruct_response": "def deleteAndEarn(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    max_num = max(count.keys())\n    dp = [0] * (max_num + 1)\n    dp[1] = count[1]\n    for i in range(2, max_num + 1):\n        dp[i] = max(dp[i-1], dp[i", "llama3.1-8b-instruct_prob": 0.4895565466973456, "gpt-3.5-turbo_response": "def deleteAndEarn(nums):\n    if not nums:\n        return 0\n    max_num = max(nums)\n    count = [0] * (max_num + 1)\n    for num in nums:\n        count[num] += num\n    dp = [0] * (max_num + 1)\n    dp[1] = count[1]\n    for i in range(2, max_num + 1):\n        dp[i] = max(dp[i-1], dp", "gpt-3.5-turbo_prob": 0.5104434533026544}
{"id": "35", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    e = list(map(int, input().split()))\n    e.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        cnt = 0\n        while i < n and e[i] <= n - i + 1:\n            cnt += 1\n            i += 1\n        ans += cnt // e[i - 1]\n    print(ans)", "llama3.1-8b-instruct_prob": 0.512636769372487, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    explorers = list(map(int, input().split()))\n    groups = 0\n    count = Counter(explorers)\n    for e in count:\n        groups += count[e] // e\n    print(groups)\n```", "gpt-3.5-turbo_prob": 0.48736323062751297}
{"id": "350", "llama3.1-8b-instruct_response": "def subarraysWithKDistinct(A, K):\n    def atMostK():\n        left = 0\n        count = 0\n        freq = {}\n        for right in range(len(A)):\n            freq[A[right]] = freq.get(A[right], 0) + 1\n            while len(freq) > K:\n                freq[A[left]] -= 1\n                if freq[A[left]] == 0:\n                    del freq[A[left]]\n                left += 1\n            count +=", "llama3.1-8b-instruct_prob": 0.5157761081119524, "gpt-3.5-turbo_response": "def subarraysWithKDistinct(A, K):\n    def atMostK(A, K):\n        count = collections.Counter()\n        res = i = 0\n        for j in range(len(A)):\n            if count[A[j]] == 0: K -= 1\n            count[A[j]] += 1\n            while K < 0:\n                count[A[i]] -= 1\n                if count[A[i]] == 0: K += 1\n                i += ", "gpt-3.5-turbo_prob": 0.4842238918880476}
{"id": "351", "llama3.1-8b-instruct_response": "def brokenCalculator(X, Y):\n    if X == Y: return 0\n    if Y < X: return X - Y\n    queue = [(X, 0)]\n    visited = set([X])\n    while queue:\n        num, step = queue.pop(0)\n        if num == Y: return step\n        queue.append((num * 2, step + 1))\n        if num + 1 != Y and num + 1 not in visited:\n            queue", "llama3.1-8b-instruct_prob": 0.34918098780332496, "gpt-3.5-turbo_response": "```python\ndef brokenCalc(X, Y):\n    count = 0\n    while Y > X:\n        count += 1\n        if Y % 2 == 1:\n            Y += 1\n        else:\n            Y //= 2\n    return count + X - Y\n```", "gpt-3.5-turbo_prob": 0.650819012196675}
{"id": "352", "llama3.1-8b-instruct_response": "def longestStrChain(words):\n    words.sort(key=len)\n    dp = {}\n    max_len = 0\n    for word in words:\n        dp[word] = 1\n        for i in range(len(word)):\n            prefix = word[:i] + word[i+1:]\n            if prefix in dp:\n                dp[word] = max(dp[word], dp[prefix] + 1)\n        max_len = max(max_len, dp[word])\n    return max_len", "llama3.1-8b-instruct_prob": 0.5231206409220593, "gpt-3.5-turbo_response": "```python\ndef longestStrChain(words):\n    words.sort(key=len)\n    dp = {}\n    for word in words:\n        dp[word] = max(dp.get(word[:i] + word[i+1:], 0) + 1 for i in range(len(word)))\n    return max(dp.values())\n```", "gpt-3.5-turbo_prob": 0.47687935907794066}
{"id": "353", "llama3.1-8b-instruct_response": "class Solution:\n    def numSubseq(self, nums: list[int], target: int) -> int:\n        nums.sort()\n        left, right = 0, len(nums) - 1\n        res = 0\n        mod = 10**9 + 7\n        while left <= right:\n            if nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                res += 2**left\n                left += 1\n       ", "llama3.1-8b-instruct_prob": 0.45833716137277736, "gpt-3.5-turbo_response": "```python\ndef numSubseq(nums, target):\n    nums.sort()\n    mod = 10**9 + 7\n    n = len(nums)\n    res = 0\n    left, right = 0, n - 1\n    while left <= right:\n        if nums[left] + nums[right] <= target:\n            res = (res + pow(2, right - left, mod)) % mod\n            left += 1\n        else:\n            right -=", "gpt-3.5-turbo_prob": 0.5416628386272226}
{"id": "354", "llama3.1-8b-instruct_response": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[0]*16 for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            for j in range(16):\n                for k in range(1, rollMax[j-1]+1):\n                    if j+k", "llama3.1-8b-instruct_prob": 0.5119282013618235, "gpt-3.5-turbo_response": "```python\ndef die_simulator(n, rollMax):\n    MOD = 10**9 + 7\n    dp = [[[0] * 16 for _ in range(6)] for _ in range(n + 1)]\n    for i in range(6):\n        dp[1][i][1] = 1\n    for i in range(2, n + 1):\n        for j in range(6):\n            for k in range(1, rollMax", "gpt-3.5-turbo_prob": 0.48807179863817657}
{"id": "355", "llama3.1-8b-instruct_response": "def findKthNumber(n, k):\n    node, k = 1, 0\n    while k < n:\n        if k + (node * (node + 1)) // 2 <= n:\n            k += (node * (node + 1)) // 2\n            node += 1\n        else:\n            right = node * (node + 1) // 2\n            left = right - (node - 1) * node // ", "llama3.1-8b-instruct_prob": 0.5999246084876164, "gpt-3.5-turbo_response": "import math\ndef findKthNumber(n, k):\n    curr = 1\n    k -= 1\n    while k > 0:\n        steps = calculateSteps(n, curr, curr + 1)\n        if steps <= k:\n            curr += 1\n            k -= steps\n        else:\n            curr *= 10\n            k -= 1\n    return curr\n\ndef calculateSteps(n, n1, n2):\n    steps = 0\n    while", "gpt-3.5-turbo_prob": 0.4000753915123836}
{"id": "356", "llama3.1-8b-instruct_response": "def searchMatrix(matrix, target):\n    if not matrix or not matrix[0]:\n        return False\n\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    return False", "llama3.1-8b-instruct_prob": 0.5612296656009272, "gpt-3.5-turbo_response": "def searchMatrix(matrix, target):\n    if not matrix or not matrix[0]:\n        return False\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        mid_element = matrix[mid // n][mid % n]\n        if mid_element == target:\n            return True\n        elif mid_element < target:\n            left", "gpt-3.5-turbo_prob": 0.4387703343990727}
{"id": "357", "llama3.1-8b-instruct_response": "def maxDistToClosest(seats):\n    ones = [i for i, x in enumerate(seats) if x == 1]\n    return max((ones[i] - ones[i-1]) // 2 for i in range(1, len(ones))) or max(ones[i] - ones[0] for i in range(len(ones))) or len(seats) - 1 - ones[-1]", "llama3.1-8b-instruct_prob": 0.523120641622627, "gpt-3.5-turbo_response": "def maxDistToClosest(seats):\n    max_distance = 0\n    prev_person = -1\n    for i in range(len(seats)):\n        if seats[i] == 1:\n            if prev_person == -1:\n                max_distance = max(max_distance, i)\n            else:\n                max_distance = max(max_distance, (i - prev_person) // 2)\n            prev_person = i\n    max_distance = max(max_distance, len(seats) - ", "gpt-3.5-turbo_prob": 0.47687935837737305}
{"id": "358", "llama3.1-8b-instruct_response": "```python\ndef findReplaceString(S, indexes, sources, targets):\n    n = len(S)\n    res = list(S)\n    for i, source, target in sorted(zip(indexes, sources, targets), key=lambda x: x[0]):\n        if S[i:i+len(source)] == source:\n            res[i] = target\n            for j in range(i+1, i+len(source)):\n                res[j] = ''\n    return ''.join(res)\n\nS = \"abcd\"\n", "llama3.1-8b-instruct_prob": 0.543257943629618, "gpt-3.5-turbo_response": "class Solution:\n    def findReplaceString(self, S, indexes, sources, targets):\n        matches = sorted(zip(indexes, sources, targets), key=lambda x: x[0], reverse=True)\n        for i, s, t in matches:\n            if S[i:i + len(s)] == s:\n                S = S[:i] + t + S[i + len(s):]\n        return S", "gpt-3.5-turbo_prob": 0.45674205637038207}
{"id": "359", "llama3.1-8b-instruct_response": "class Solution:\n    def minFallingPathSum(self, A: list[list[int]]) -> int:\n        if not A or not A[0]:\n            return 0\n        n = len(A)\n        for i in range(1, n):\n            for j in range(n):\n                if j == 0:\n                    A[i][j] += min(A[i-1][j], A[i-1][j+1])\n                elif j == n - 1:\n                   ", "llama3.1-8b-instruct_prob": 0.470655874411868, "gpt-3.5-turbo_response": "```python\ndef minFallingPathSum(A):\n    for i in range(1, len(A)):\n        for j in range(len(A[0])):\n            A[i][j] += min(A[i-1][max(0, j-1):min(len(A[0]), j+2)])\n    return min(A[-1])\n```", "gpt-3.5-turbo_prob": 0.529344125588132}
{"id": "36", "llama3.1-8b-instruct_response": "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nq = list(map(int, input().split()))\n\nprefix_sum = [0]\nfor num in a:\n    prefix_sum.append(prefix_sum[-1] + num)\n\nfor worm in q:\n    left, right = 0, n + 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if prefix_sum[mid] >= worm", "llama3.1-8b-instruct_prob": 0.4866968421629677, "gpt-3.5-turbo_response": "```python\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\nq = list(map(int, input().split()))\n\nprefix_sum = [0]\nfor i in range(n):\n    prefix_sum.append(prefix_sum[-1] + a[i])\n\nfor j in range(m):\n    for i in range(n):\n        if q[j] <= prefix_sum[i+1]:\n            print(i+1)\n            break\n```", "gpt-3.5-turbo_prob": 0.5133031578370324}
{"id": "360", "llama3.1-8b-instruct_response": "def shipWithinDays(weights, D):\n    def can_ship(capacity, D):\n        days = 1\n        curr_weight = 0\n        for weight in weights:\n            curr_weight += weight\n            if curr_weight > capacity:\n                days += 1\n                curr_weight = weight\n            if days > D:\n                return False\n        return True\n\n    left, right = max(weights), sum(weights)\n    while left < right:\n        mid = (left + right)", "llama3.1-8b-instruct_prob": 0.4482199484240614, "gpt-3.5-turbo_response": "```python\ndef shipWithinDays(weights, D):\n    left, right = max(weights), sum(weights)\n    while left < right:\n        mid, need, cur = (left + right) // 2, 1, 0\n        for w in weights:\n            if cur + w > mid:\n                need += 1\n                cur = 0\n            cur += w\n        if need > D:\n            left = mid + 1\n        else:\n            right", "gpt-3.5-turbo_prob": 0.5517800515759386}
{"id": "361", "llama3.1-8b-instruct_response": "def numSquares(n, m):\n    def is_square(x):\n        return int(x**0.5)**2 == x\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def dfs(x, y):\n        if x == 0 and y == 0:\n            return 0\n        if x < 0 or y < 0:\n            return float('inf')\n        if dp[x][", "llama3.1-8b-instruct_prob": 0.5357574140893776, "gpt-3.5-turbo_response": "```python\ndef tilingRectangle(n, m):\n    if n > m:\n        n, m = m, n\n    if n == 11 and m == 13:\n        return 6\n    dp = [0] * (m + 1)\n    for i in range(1, n + 1):\n        new_dp = [0] * (m + 1)\n        for j in range(1, m + 1):\n            new_dp[j", "gpt-3.5-turbo_prob": 0.4642425859106224}
{"id": "362", "llama3.1-8b-instruct_response": "from math import factorial\nfrom functools import reduce\nfrom operator import mul\n\ndef numberWays(hats):\n    n = len(hats)\n    m = max(len(hat) for hat in hats)\n    mod = 10**9 + 7\n    total = reduce(mul, range(1, m+1), 1)\n    for hat in hats:\n        total //= factorial(len(hat))\n    return total % mod", "llama3.1-8b-instruct_prob": 0.5126367752319791, "gpt-3.5-turbo_response": "```python\nfrom itertools import product\ndef numberWays(hats):\n    MOD = 10**9 + 7\n    n = len(hats)\n    hat_to_people = [[] for _ in range(41)]\n    for i in range(n):\n        for hat in hats[i]:\n            hat_to_people[hat].append(i)\n    dp = [0] * (1 << n)\n    dp[0] = 1\n    for h in range(1, ", "gpt-3.5-turbo_prob": 0.48736322476802074}
{"id": "363", "llama3.1-8b-instruct_response": "def numEnclaves(grid):\n    rows, cols = len(grid), len(grid[0])\n    def dfs(r, c):\n        if r<0 or c<0 or r==rows or c==cols or grid[r][c]==0:\n            return\n        grid[r][c] = 0\n        dfs(r-1, c)\n        dfs(r+1, c)\n        dfs(r, c-1)\n        dfs(r, c+1)\n    for i", "llama3.1-8b-instruct_prob": 0.5485189020363647, "gpt-3.5-turbo_response": "```python\ndef numEnclaves(A):\n    def dfs(i, j):\n        if 0 <= i < len(A) and 0 <= j < len(A[0]) and A[i][j]:\n            A[i][j] = 0\n            list(map(dfs, (i+1, i-1, i, i), (j, j, j+1, j-1))\n    for i in range(len(A)):\n        for j in range(len", "gpt-3.5-turbo_prob": 0.45148109796363534}
{"id": "364", "llama3.1-8b-instruct_response": "def canMeasureWater(x, y, z):\n    if x + y < z:\n        return False\n    if x == z or y == z or x + y == z:\n        return True\n    if z % gcd(x, y) == 0:\n        return True\n    return False\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "llama3.1-8b-instruct_prob": 0.5475613152725439, "gpt-3.5-turbo_response": "def canMeasureWater(x: int, y: int, z: int) -> bool:\n    if x + y < z:\n        return False\n    if x == z or y == z or x + y == z:\n        return True\n    return z % math.gcd(x, y) == 0", "gpt-3.5-turbo_prob": 0.4524386847274561}
{"id": "365", "llama3.1-8b-instruct_response": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        last = {chr(97 + i): (-1, -1) for i in range(26)}\n        ans = 0\n        for i, c in enumerate(s):\n            first, second = last[c]\n            ans += (i - second) * (second - first)\n            last[c] = (second, i)\n        for c in last:\n            first, second = last[c", "llama3.1-8b-instruct_prob": 0.5416628421290508, "gpt-3.5-turbo_response": "```python\ndef unique_char_count(s):\n    total_count = 0\n    for i in range(len(s)):\n        unique_chars = set()\n        for j in range(i, len(s)):\n            if s[j] not in unique_chars:\n                unique_chars.add(s[j])\n                total_count += len(unique_chars)\n    return total_count % (10**9 + 7)\n```", "gpt-3.5-turbo_prob": 0.4583371578709492}
{"id": "366", "llama3.1-8b-instruct_response": "```python\ndef longest_substring(s, k):\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        char_count = {}\n        for j in range(i, n):\n            char_count[s[j]] = char_count.get(s[j], 0) + 1\n            if all(count >= k for count in char_count.values()):\n                max_len = max(max_len, j - i + 1)\n    return max_len\n\nprint(long", "llama3.1-8b-instruct_prob": 0.47278491503059134, "gpt-3.5-turbo_response": "```python\ndef longestSubstring(s, k):\n    if len(s) == 0 or k > len(s):\n        return 0\n    for char in set(s):\n        if s.count(char) < k:\n            return max(longestSubstring(sub, k) for sub in s.split(char))\n    return len(s)\n```", "gpt-3.5-turbo_prob": 0.5272150849694086}
{"id": "367", "llama3.1-8b-instruct_response": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    ptr1 = nums[0]\n    ptr2 = slow\n    while ptr1 != ptr2:\n        ptr1 = nums[ptr1]\n        ptr2 = nums[ptr2]\n    return ptr1", "llama3.1-8b-instruct_prob": 0.49999999999999994, "gpt-3.5-turbo_response": "def findDuplicate(nums):\n    slow = nums[0]\n    fast = nums[0]\n    while True:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n        if slow == fast:\n            break\n    ptr1 = nums[0]\n    ptr2 = slow\n    while ptr1 != ptr2:\n        ptr1 = nums[ptr1]\n        ptr2 = nums[ptr2]\n    return ptr1", "gpt-3.5-turbo_prob": 0.49999999999999994}
{"id": "368", "llama3.1-8b-instruct_response": "def maxSatisfaction(satisfaction):\n    satisfaction.sort(reverse=True)\n    total = 0\n    sum_val = 0\n    for i in satisfaction:\n        if sum_val + i <= 0:\n            break\n        sum_val += i\n        total += sum_val\n    return total", "llama3.1-8b-instruct_prob": 0.48807179863817657, "gpt-3.5-turbo_response": "```python\ndef maxSatisfaction(satisfaction):\n    satisfaction.sort(reverse=True)\n    max_sum = 0\n    total = 0\n    for s in satisfaction:\n        if total + s > 0:\n            total += s\n            max_sum += total\n        else:\n            break\n    return max_sum\n```", "gpt-3.5-turbo_prob": 0.5119282013618235}
{"id": "372", "llama3.1-8b-instruct_response": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for j in range(1, len(p) + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n       ", "llama3.1-8b-instruct_prob": 0.5718042603813428, "gpt-3.5-turbo_response": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n        for i in range(2, len(p) + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 2]\n       ", "gpt-3.5-turbo_prob": 0.42819573961865715}
{"id": "374", "llama3.1-8b-instruct_response": "def smallestStringWithWildcards(A):\n    n = len(A)\n    m = max(len(s) for s in A)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if A[i - 1][j - 1] in A[i - 1]:\n                dp[i][j]", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "from itertools import permutations\nclass Solution:\n    def shortestSuperstring(self, A: List[str]) -> str:\n        def overlap(a, b):\n            for i in range(min(len(a), len(b)), -1, -1):\n                if a.endswith(b[:i]):\n                    return i\n            return 0\n        N = len(A)\n        overlaps = [[0] * N for _ in range(N)]\n        for i, j in permutations(range(N), 2):\n            overlaps", "gpt-3.5-turbo_prob": 0.5}
{"id": "375", "llama3.1-8b-instruct_response": "def maximumGap(nums):\n    if len(nums) < 2:\n        return 0\n    min_val, max_val = min(nums), max(nums)\n    bucket_size = max(1, (max_val - min_val) // (len(nums) - 1))\n    bucket_num = (max_val - min_val) // bucket_size + 1\n    buckets = [[float('inf'), float('-inf')] for _ in range(bucket_num)]\n    for num in nums:\n       ", "llama3.1-8b-instruct_prob": 0.32324104215432414, "gpt-3.5-turbo_response": "```python\ndef maximumGap(nums):\n    if len(nums) < 2:\n        return 0\n    nums.sort()\n    max_diff = 0\n    for i in range(1, len(nums)):\n        max_diff = max(max_diff, nums[i] - nums[i-1])\n    return max_diff\n```", "gpt-3.5-turbo_prob": 0.6767589578456759}
{"id": "376", "llama3.1-8b-instruct_response": "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(1, n):\n        dp[i][i-1] = A[i-1] * A[i]\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n           ", "llama3.1-8b-instruct_prob": 0.4533070628702228, "gpt-3.5-turbo_response": "```python\ndef minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for d in range(2, n):\n        for i in range(n - d):\n            j = i + d\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp", "gpt-3.5-turbo_prob": 0.5466929371297772}
{"id": "378", "llama3.1-8b-instruct_response": "def canPartition(nums):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target_sum", "llama3.1-8b-instruct_prob": 0.4888075602670062, "gpt-3.5-turbo_response": "def canPartition(nums):\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "gpt-3.5-turbo_prob": 0.5111924397329938}
{"id": "379", "llama3.1-8b-instruct_response": "class Solution:\n    def maxSum(self, nums1: list[int], nums2: list[int]) -> int:\n        MOD = 10**9 + 7\n        i, j = len(nums1)-1, len(nums2)-1\n        sum1, sum2 = 0, 0\n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                sum1 += nums1[i]\n                i -= ", "llama3.1-8b-instruct_prob": 0.6065121025212276, "gpt-3.5-turbo_response": "def maxSum(nums1, nums2):\n    i, j, sum1, sum2 = 0, 0, 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            sum1 += nums1[i]\n            i += 1\n        elif nums1[i] > nums2[j]:\n            sum2 += nums2[j]\n            j += 1\n        else:\n", "gpt-3.5-turbo_prob": 0.3934878974787724}
{"id": "38", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if max(a) > max(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "llama3.1-8b-instruct_prob": 0.45869484628034696, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(\"YES\" if max(a) > max(b) else \"NO\")\n```", "gpt-3.5-turbo_prob": 0.541305153719653}
{"id": "381", "llama3.1-8b-instruct_response": "```python\ndef minSubArrayLen(s, nums):\n    if not nums:\n        return 0\n\n    left = 0\n    min_len = float('inf')\n    curr_sum = 0\n\n    for right in range(len(nums)):\n        curr_sum += nums[right]\n\n        while curr_sum >= s:\n            min_len = min(min_len, right - left + 1)\n            curr_sum -= nums[left]\n            left += 1\n\n    return min_len if min_len", "llama3.1-8b-instruct_prob": 0.3256080718826171, "gpt-3.5-turbo_response": "# O(n) solution\ndef minSubArrayLen(s, nums):\n    left = 0\n    total = 0\n    min_len = float('inf')\n    for right in range(len(nums)):\n        total += nums[right]\n        while total >= s:\n            min_len = min(min_len, right - left + 1)\n            total -= nums[left]\n            left += 1\n    return min_len if min_len != float('inf') else 0\n\n# O", "gpt-3.5-turbo_prob": 0.6743919281173829}
{"id": "382", "llama3.1-8b-instruct_response": "def findPeakElement(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left", "llama3.1-8b-instruct_prob": 0.4716403192601193, "gpt-3.5-turbo_response": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left", "gpt-3.5-turbo_prob": 0.5283596807398807}
{"id": "383", "llama3.1-8b-instruct_response": "def minMalwareSpread(graph, initial):\n    n = len(graph)\n    initial_counts = {}\n    for node in initial:\n        initial_counts[node] = graph[node].count(1)\n\n    def dfs(node, visited):\n        if node in visited: return 0\n        visited.add(node)\n        count = 1\n        for i in range(n):\n            if graph[node][i] == 1 and i not in visited:\n                count += dfs(i, visited)\n        return", "llama3.1-8b-instruct_prob": 0.6369070945500244, "gpt-3.5-turbo_response": "def minMalwareSpread(graph, initial):\n    def dfs(graph, initial, infected):\n        for i in range(len(graph)):\n            if graph[infected][i] == 1 and i in initial and i not in infected:\n                infected.add(i)\n                dfs(graph, initial, infected)\n        return infected\n\n    initial.sort()\n    max_infected = -1\n    result = initial[0]\n    for node in initial:\n        infected = set([node])\n        infected =", "gpt-3.5-turbo_prob": 0.36309290544997574}
{"id": "384", "llama3.1-8b-instruct_response": "def sumSubseqWidths(A):\n    n = len(A)\n    A.sort()\n    ans = 0\n    mod = 10**9 + 7\n    for i in range(n):\n        p = 1\n        for j in range(i+1, n):\n            ans = (ans + (A[j] - A[i]) * p) % mod\n            p = (p * 2) % mod\n    return ans", "llama3.1-8b-instruct_prob": 0.5119282072213157, "gpt-3.5-turbo_response": "```python\ndef sumSubseqWidths(A):\n    A.sort()\n    n = len(A)\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(n):\n        ans = (ans + A[i] * (2**i - 2**(n-1-i))) % mod\n    return ans\n```", "gpt-3.5-turbo_prob": 0.4880717927786843}
{"id": "385", "llama3.1-8b-instruct_response": "def kth_factor(n, k):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return factors[k - 1] if k <= len(factors) else -1", "llama3.1-8b-instruct_prob": 0.5133031737662249, "gpt-3.5-turbo_response": "```python\ndef kthFactor(n, k):\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    return factors[k-1] if len(factors) >= k else -1\n```", "gpt-3.5-turbo_prob": 0.4866968262337751}
{"id": "386", "llama3.1-8b-instruct_response": "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10**9 + 7\n        dp = [0]*5\n        dp[0] = 1\n        for _ in range(n-1):\n            ndp = [0]*5\n            ndp[0] = (dp[1] + dp[2] + dp[4]) % MOD\n            ndp[1] = (dp[", "llama3.1-8b-instruct_prob": 0.418693254937983, "gpt-3.5-turbo_response": "def countVowelStrings(n):\n    a, e, i, o, u = 1, 1, 1, 1, 1\n    for _ in range(1, n):\n        a, e, i, o, u = e, a + i, a + e + o + u, i + u, a\n    return (a + e + i + o + u) % (10**9 + 7)", "gpt-3.5-turbo_prob": 0.5813067450620171}
{"id": "387", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\nfrom functools import cmp_to_key\n\ndef rankTeams(votes):\n    n = len(votes[0])\n    count = defaultdict(lambda: [0] * n)\n    for vote in votes:\n        for i, c in enumerate(vote):\n            count[c][i] += 1\n\n    def compare(a, b):\n        for i in range(n):\n            if count[a][i] > count[b][i]:\n                return 1\n", "llama3.1-8b-instruct_prob": 0.5245649829468477, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nvotes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nvote_count = Counter()\nfor vote in votes:\n    for i, team in enumerate(vote):\n        vote_count[team] += (1 / (10 ** i))\nsorted_teams = sorted(vote_count, key=lambda x: (-vote_count[x], x))\nresult = ''.join(sorted_teams)\n```", "gpt-3.5-turbo_prob": 0.4754350170531523}
{"id": "388", "llama3.1-8b-instruct_response": "def hIndex(citations):\n    n = len(citations)\n    citations.sort(reverse=True)\n    for i in range(n):\n        if citations[i] < i + 1:\n            return i\n    return n", "llama3.1-8b-instruct_prob": 0.5201373137796286, "gpt-3.5-turbo_response": "def hIndex(citations):\n    citations.sort()\n    n = len(citations)\n    for i in range(n):\n        if citations[i] >= n - i:\n            return n - i\n    return 0", "gpt-3.5-turbo_prob": 0.4798626862203713}
{"id": "389", "llama3.1-8b-instruct_response": "def canEqualAverage(A):\n    even_sum, odd_sum = 0, 0\n    even_count, odd_count = 0, 0\n    for num in A:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n    if even_count == odd_count and even_sum != odd_sum:\n        return False\n    return even_count !=", "llama3.1-8b-instruct_prob": 0.45437502108595085, "gpt-3.5-turbo_response": "def splitArraySameAverage(A):\n    total = sum(A)\n    n = len(A)\n    dp = [set() for _ in range(n // 2 + 1)]\n    dp[0].add(0)\n    for num in A:\n        for i in range(n // 2, 0, -1):\n            for prev in dp[i - 1]:\n                dp[i].add(prev + num)\n    for i in range(1, n // 2 +", "gpt-3.5-turbo_prob": 0.5456249789140492}
{"id": "39", "llama3.1-8b-instruct_response": "def solve():\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'A':\n            if p >= a * (n - i - 1):\n                ans = i + 1\n                break\n        else:\n            if p >= b * (n - i - 1", "llama3.1-8b-instruct_prob": 0.5413051502262481, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, p = map(int, input().split())\n    s = input()\n    n = len(s)\n    cost = [0] * n\n    cost[n-2] = 0\n    for i in range(n-3, -1, -1):\n        if s[i] == s[i+1]:\n            cost[i] = cost[i+1]\n        elif s[i] ==", "gpt-3.5-turbo_prob": 0.45869484977375197}
{"id": "390", "llama3.1-8b-instruct_response": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        dp = [False] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, int(i ** 0.5) + 1):\n                if not dp[i - j * j]:\n                    dp[i] = True\n                    break\n        return dp[n]", "llama3.1-8b-instruct_prob": 0.4903061507729888, "gpt-3.5-turbo_response": "```python\ndef winnerSquareGame(n):\n    dp = [False] * (n + 1)\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            if not dp[i - j * j]:\n                dp[i] = True\n                break\n            j += 1\n    return dp[n]\n```", "gpt-3.5-turbo_prob": 0.5096938492270112}
{"id": "391", "llama3.1-8b-instruct_response": "def getMaxM(s1, n1, s2, n2):\n    s1 = s1 * (n1 // len(s1)) + s1[:n1 % len(s1)]\n    i = 0\n    for c in s2:\n        while i < n1 and s1[i] != c:\n            i += 1\n        if i == n1:\n            return -1\n        i += 1\n    return i // (n2 //", "llama3.1-8b-instruct_prob": 0.3101245070153686, "gpt-3.5-turbo_response": "def getMaxRepetitions(s1, n1, s2, n2):\n    repeatCount = 0\n    index = 0\n    s1Count = 0\n    s2Count = 0\n    while s1Count < n1:\n        if s1[index] == s2[s2Count]:\n            s2Count += 1\n            if s2Count == len(s2):\n                s2Count = 0\n                repeatCount += 1", "gpt-3.5-turbo_prob": 0.6898754929846315}
{"id": "392", "llama3.1-8b-instruct_response": "def numWays(s):\n    MOD = 10**9 + 7\n    n = len(s)\n    ones = [0] * (n + 1)\n    for i in range(n):\n        ones[i + 1] = ones[i] + (s[i] == '1')\n    res = 0\n    for i in range(ones[-1] // 3):\n        if (ones[i * 3 + 1] == ones[i * ", "llama3.1-8b-instruct_prob": 0.4642425859106224, "gpt-3.5-turbo_response": "```python\ndef numWaysToSplit(s):\n    ones = s.count('1')\n    if ones % 3 != 0:\n        return 0\n    if ones == 0:\n        return ((len(s) - 1) * (len(s) - 2) // 2) % (10**9 + 7)\n    ones_per_part = ones // 3\n    count = 0\n    prefix_ones = 0\n    suffix_", "gpt-3.5-turbo_prob": 0.5357574140893776}
{"id": "393", "llama3.1-8b-instruct_response": "def nthUglyNumber(n, a, b, c):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def check(mid):\n        return mid % a + mid % b + mid % c - mid >= n\n\n    left, right = 1, 2 * 10**9\n    while left <", "llama3.1-8b-instruct_prob": 0.48555222988397007, "gpt-3.5-turbo_response": "def nthUglyNumber(n, a, b, c):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    def count_ugly_numbers(x, a, b, c):\n        return x // a + x // b + x // c - x // lcm(a, b) - x // lcm(b, c", "gpt-3.5-turbo_prob": 0.5144477701160299}
{"id": "394", "llama3.1-8b-instruct_response": "def min_moves(nums):\n    return sum(abs(num - sum(nums) // len(nums)) for num in nums)", "llama3.1-8b-instruct_prob": 0.33587782048056714, "gpt-3.5-turbo_response": "def minMoves2(nums):\n    nums.sort()\n    median = nums[len(nums) // 2]\n    return sum(abs(num - median) for num in nums)", "gpt-3.5-turbo_prob": 0.6641221795194329}
{"id": "395", "llama3.1-8b-instruct_response": "def oddEvenJumps(A):\n    n = len(A)\n    dp = [[False] * n for _ in range(2)]\n    dp[1][n - 1] = True\n    stack = [n - 1]\n    for i in range(n - 2, -1, -1):\n        for j in stack:\n            if A[j] >= A[i]:\n                dp[0][i] = dp[1][j]\n                dp[1][", "llama3.1-8b-instruct_prob": 0.5558947191010165, "gpt-3.5-turbo_response": "def odd_even_jumps(A):\n    n = len(A)\n    odd_next = [0] * n\n    even_next = [0] * n\n    stack = []\n    for a, i in sorted((a, i) for i, a in enumerate(A)):\n        while stack and stack[-1] < i:\n            odd_next[stack.pop()] = i\n        stack.append(i)\n    stack = []\n    for a, i in sorted((-a, i) for", "gpt-3.5-turbo_prob": 0.44410528089898343}
{"id": "396", "llama3.1-8b-instruct_response": "def smallestRepunitDivByK(K):\n    if K % 2 == 0 or K % 5 == 0: return -1\n    n = 0\n    for i in range(1, K + 1):\n        n = (n * 10 + 1) % K\n        if n == 0: return i", "llama3.1-8b-instruct_prob": 0.42579505343945, "gpt-3.5-turbo_response": "def smallestRepunitDivByK(K: int) -> int:\n    if K % 2 == 0 or K % 5 == 0:\n        return -1\n    remainder = 0\n    for length_N in range(1, K + 1):\n        remainder = (remainder * 10 + 1) % K\n        if remainder == 0:\n            return length_N\n    return -1", "gpt-3.5-turbo_prob": 0.57420494656055}
{"id": "397", "llama3.1-8b-instruct_response": "def countDigitOne(n: int) -> int:\n    ans = 0\n    i = 1\n    while i <= n:\n        divider = i * 10\n        ans += (n // divider) * i + min(max(n % divider - i + 1, 0), i)\n        i *= 10\n    return ans", "llama3.1-8b-instruct_prob": 0.5585010991447974, "gpt-3.5-turbo_response": "def countDigitOne(n):\n    count = 0\n    factor = 1\n    while n // factor > 0:\n        current = (n // factor) % 10\n        high = n // (factor * 10)\n        low = n - (n // factor) * factor\n        if current == 0:\n            count += high * factor\n        elif current == 1:\n            count += high * factor + low + 1\n        else:\n           ", "gpt-3.5-turbo_prob": 0.4414989008552026}
{"id": "398", "llama3.1-8b-instruct_response": "def subarraySum(nums, k):\n    count = 0\n    prefix_sum = {0: 1}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        count += prefix_sum.get(current_sum - k, 0)\n        prefix_sum[current_sum] = prefix_sum.get(current_sum, 0) + 1\n    return count", "llama3.1-8b-instruct_prob": 0.5844410359423573, "gpt-3.5-turbo_response": "def subarraySum(nums, k):\n    count = 0\n    total = 0\n    sum_map = {0: 1}\n    for num in nums:\n        total += num\n        if total - k in sum_map:\n            count += sum_map[total - k]\n        sum_map[total] = sum_map.get(total, 0) + 1\n    return count", "gpt-3.5-turbo_prob": 0.4155589640576427}
{"id": "399", "llama3.1-8b-instruct_response": "def numDecodings(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        if s[i - 1] != '0':\n            dp[i] += dp[i - 1]\n        if '10' <= s", "llama3.1-8b-instruct_prob": 0.5373264659378755, "gpt-3.5-turbo_response": "def numDecodings(s):\n    if not s or s[0] == \"0\":\n        return 0\n    dp = [0] * (len(s) + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(s) + 1):\n        if 1 <= int(s[i-1]) <= 9:\n            dp[i] += dp[i-1]\n        if ", "gpt-3.5-turbo_prob": 0.4626735340621246}
{"id": "4", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.insert(0, 0)\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    for i in range(1, n + 1):\n        left[p[i]] = i\n    for i in range(n, 0, -1):\n        right[p[i]] = i\n    ans =", "llama3.1-8b-instruct_prob": 0.4586948566104445, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    beautiful = [0] * n\n    max_seen = 0\n    for i in range(n):\n        max_seen = max(max_seen, p[i])\n        if max_seen == i + 1:\n            beautiful[i] = 1\n    print(''.join(map(str, beautiful)))\n```", "gpt-3.5-turbo_prob": 0.5413051433895555}
{"id": "40", "llama3.1-8b-instruct_response": "from collections import defaultdict\nimport sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i, x in enumerate(a):\n        d[x].append(i)\n    ans = 0\n    prev = 0\n    for x in sorted(d.keys()):\n        if d[x][0] < prev:\n            ans += 1\n        prev = d[x][-1]\n", "llama3.1-8b-instruct_prob": 0.4601481497858848, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    max_freq = max(c.values())\n    print(n - max_freq)\n```", "gpt-3.5-turbo_prob": 0.5398518502141152}
{"id": "400", "llama3.1-8b-instruct_response": "```python\ndef largestRectangleArea(heights):\n    stack = []\n    max_area = 0\n    heights.append(0)\n    for i, h in enumerate(heights):\n        while stack and heights[stack[-1]] > h:\n            last = stack.pop()\n            max_area = max(max_area, heights[last] * (i - stack[-1] - 1))\n        stack.append(i)\n    return max_area\n\nprint(largestRectangleArea([2,1,5", "llama3.1-8b-instruct_prob": 0.5612296656009272, "gpt-3.5-turbo_response": "def largestRectangleArea(heights):\n    stack = []\n    max_area = 0\n    index = 0\n    while index < len(heights):\n        if not stack or heights[index] >= heights[stack[-1]]:\n            stack.append(index)\n            index += 1\n        else:\n            top_of_stack = stack.pop()\n            area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)\n            max_area = max(max", "gpt-3.5-turbo_prob": 0.43877033439907276}
{"id": "403", "llama3.1-8b-instruct_response": "def increasingTriplet(nums):\n    first = second = float('inf')\n    for num in nums:\n        if num <= first:\n            first = num\n        elif num <= second:\n            second = num\n        else:\n            return True\n    return False", "llama3.1-8b-instruct_prob": 0.475435014296164, "gpt-3.5-turbo_response": "def increasingTriplet(nums):\n    first = float('inf')\n    second = float('inf')\n    for num in nums:\n        if num <= first:\n            first = num\n        elif num <= second:\n            second = num\n        else:\n            return True\n    return False", "gpt-3.5-turbo_prob": 0.524564985703836}
{"id": "404", "llama3.1-8b-instruct_response": "class Solution:\n    def largestSumOfAverages(self, A: list[int], K: int) -> float:\n        n = len(A)\n        dp = [[0.0] * (K + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            dp[i][1] = sum(A[:i]) / i\n        for j in range(2, K + 1):\n            for i in range", "llama3.1-8b-instruct_prob": 0.5734159449682267, "gpt-3.5-turbo_response": "def largestSumOfAverages(A, K):\n    n = len(A)\n    dp = [[0] * (K + 1) for _ in range(n + 1)]\n    cur = 0\n    for i in range(1, n + 1):\n        cur += A[i - 1]\n        dp[i][1] = cur / i\n    for k in range(2, K + 1):\n        for i in range(k, n + ", "gpt-3.5-turbo_prob": 0.4265840550317733}
{"id": "405", "llama3.1-8b-instruct_response": "def new21Game(N, K, W):\n    dp = [0.0] * (N + 1)\n    dp[0] = 1.0\n    for i in range(1, N + 1):\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1] * (W - (i - 1) % W) / W\n        if i - K >= 0:\n            dp[i] -=", "llama3.1-8b-instruct_prob": 0.4866968294806635, "gpt-3.5-turbo_response": "```python\ndef new21Game(N, K, W):\n    if K == 0 or N >= K + W:\n        return 1.0\n    dp = [1.0] + [0.0] * N\n    Wsum = 1.0\n    res = 0.0\n    for i in range(1, N + 1):\n        dp[i] = Wsum / W\n        if i < K:\n            Wsum +=", "gpt-3.5-turbo_prob": 0.5133031705193365}
{"id": "406", "llama3.1-8b-instruct_response": "```python\nfrom collections import deque\n\ndef ladder_length(beginWord, endWord, wordList):\n    word_set = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = set([beginWord])\n\n    while queue:\n        word, length = queue.popleft()\n        if word == endWord:\n            return length\n        for i in range(len(word)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                next_word = word[:i] + c + word[i+", "llama3.1-8b-instruct_prob": 0.522656762671379, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef ladderLength(beginWord, endWord, wordList):\n    wordSet = set(wordList)\n    if endWord not in wordSet:\n        return 0\n    queue = deque([(beginWord, 1)])\n    while queue:\n        word, length = queue.popleft()\n        if word == endWord:\n            return length\n        for i in range(len(word)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                nextWord = word[:i]", "gpt-3.5-turbo_prob": 0.47734323732862105}
{"id": "407", "llama3.1-8b-instruct_response": "def scoreOfParentheses(S):\n    stack = []\n    for c in S:\n        if c == '(':\n            stack.append(0)\n        else:\n            val = max(1, sum(stack) // 2)\n            stack = [val] + stack[:-1]\n    return sum(stack)", "llama3.1-8b-instruct_prob": 0.43080210926841933, "gpt-3.5-turbo_response": "```python\ndef scoreOfParentheses(S):\n    stack = [0]\n    for c in S:\n        if c == '(':\n            stack.append(0)\n        else:\n            v = stack.pop()\n            stack[-1] += max(2 * v, 1)\n    return stack[0]\n```", "gpt-3.5-turbo_prob": 0.5691978907315807}
{"id": "408", "llama3.1-8b-instruct_response": "def findBestValue(arr, target):\n    arr.sort()\n    left, right = 0, arr[-1]\n    while left <= right:\n        mid = (left + right) // 2\n        total = sum(min(x, mid) for x in arr)\n        if total == target:\n            return mid\n        elif total < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    diff = abs(target - sum(min(x", "llama3.1-8b-instruct_prob": 0.3559347656816728, "gpt-3.5-turbo_response": "```python\ndef findBestValue(arr, target):\n    left, right = 0, max(arr)\n    while left < right:\n        mid = (left + right) // 2\n        total = sum(min(mid, x) for x in arr)\n        if total < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```", "gpt-3.5-turbo_prob": 0.6440652343183271}
{"id": "409", "llama3.1-8b-instruct_response": "class Solution:\n    def kConcatenationMaxSum(self, arr: list[int], k: int) -> int:\n        MOD = 10**9 + 7\n        n = len(arr)\n        max_sum = max_subarray_sum = prefix_sum = suffix_sum = 0\n\n        for num in arr:\n            prefix_sum = max(prefix_sum + num, num)\n            max_sum = max(max_sum, prefix_sum)\n\n        for num in reversed(arr):\n            suffix_sum =", "llama3.1-8b-instruct_prob": 0.4153865900030391, "gpt-3.5-turbo_response": "```python\ndef kConcatenationMaxSum(arr, k):\n    mod = 10**9 + 7\n    max_end, max_so_far, total = 0, 0, 0\n    for num in arr * min(k, 2):\n        max_end = max(num, max_end + num)\n        max_so_far = max(max_so_far, max_end)\n        total += num\n    return max(max_so_far, (k - 2) *", "gpt-3.5-turbo_prob": 0.5846134099969609}
{"id": "411", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def wordBreak(self, s: str, wordDict: list[str]) -> bool:\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(len(s)):\n            if dp[i]:\n                for j in range(i, len(s)):\n                    if s[i:j+1] in wordDict:\n                        dp[j+1] = True\n        return dp[-1]\n```", "llama3.1-8b-instruct_prob": 0.6296431019468562, "gpt-3.5-turbo_response": "def wordBreak(s, wordDict):\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in wordDict:\n                dp[i] = True\n                break\n    return dp[len(s)]", "gpt-3.5-turbo_prob": 0.37035689805314365}
{"id": "412", "llama3.1-8b-instruct_response": "class Solution:\n    def numRollsToTarget(self, d: int, f: int, target: int) -> int:\n        MOD = 10**9 + 7\n        @cache\n        def dp(i, s):\n            if i == 0 and s == target: return 1\n            if i == 0 or s > target: return 0\n            res = 0\n            for x in range(1, f+1):\n                res +=", "llama3.1-8b-instruct_prob": 0.47311698950468906, "gpt-3.5-turbo_response": "```python\ndef numRollsToTarget(d: int, f: int, target: int) -> int:\n    MOD = 10**9 + 7\n    dp = [[0] * (target + 1) for _ in range(d + 1)]\n    dp[0][0] = 1\n    for i in range(1, d + 1):\n        for j in range(1, f + 1):\n            for k in range(j", "gpt-3.5-turbo_prob": 0.5268830104953109}
{"id": "413", "llama3.1-8b-instruct_response": "def breakPalindrome(palindrome):\n    n = len(palindrome)\n    if n == 1:\n        return \"\"\n    chars = list(palindrome)\n    for i in range(n // 2):\n        if chars[i] > 'a':\n            chars[i] = 'a'\n            return ''.join(chars)\n    chars[-1] = 'b'\n    return ''.join(chars)", "llama3.1-8b-instruct_prob": 0.4621318654046474, "gpt-3.5-turbo_response": "def break_palindrome(palindrome: str) -> str:\n    if len(palindrome) == 1:\n        return \"\"\n    for i in range(len(palindrome) // 2):\n        if palindrome[i] != 'a':\n            return palindrome[:i] + 'a' + palindrome[i+1:]\n    return palindrome[:-1] + 'b'", "gpt-3.5-turbo_prob": 0.5378681345953527}
{"id": "414", "llama3.1-8b-instruct_response": "def getWinner(arr, k):\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            arr.append(arr.pop(i))\n        else:\n            arr.pop(i)\n    return arr[0]", "llama3.1-8b-instruct_prob": 0.3396282847629869, "gpt-3.5-turbo_response": "def getWinner(arr, k):\n    winner = max(arr[0], arr[1])\n    win_count = 1\n    for i in range(2, len(arr)):\n        if win_count == k:\n            break\n        if arr[i] > winner:\n            winner = arr[i]\n            win_count = 1\n        else:\n            win_count += 1\n    return winner", "gpt-3.5-turbo_prob": 0.6603717152370131}
{"id": "415", "llama3.1-8b-instruct_response": "def minSwap(A, B):\n    n = len(A)\n    swaps = 0\n    alreadySwapped = [False] * n\n    for i in range(n):\n        if A[i] < B[i] and not alreadySwapped[i]:\n            swaps += 1\n            alreadySwapped[i] = True\n            alreadySwapped[i-1] = True\n    return swaps", "llama3.1-8b-instruct_prob": 0.4754350173904277, "gpt-3.5-turbo_response": "```python\ndef minSwap(A, B):\n    n = len(A)\n    swap, no_swap = [float('inf')] * n, [float('inf')] * n\n    swap[0], no_swap[0] = 1, 0\n    for i in range(1, n):\n        if A[i] > A[i-1] and B[i] > B[i-1]:\n            no_swap[i] = no_swap[i-1]\n            swap", "gpt-3.5-turbo_prob": 0.5245649826095722}
{"id": "417", "llama3.1-8b-instruct_response": "def findMedianSortedArrays(nums1, nums2):\n    m, n = len(nums1), len(nums2)\n    if m > n:\n        nums1, nums2, m, n = nums2, nums1, n, m\n    imin, imax, half_len = 0, m, (m + n + 1) // 2\n    while imin <= imax:\n        i = (imin + imax) // 2\n       ", "llama3.1-8b-instruct_prob": 0.6646980755566887, "gpt-3.5-turbo_response": "from typing import List\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        nums1.extend(nums2)\n        nums1.sort()\n        n = len(nums1)\n        if n % 2 == 0:\n            return (nums1[n//2 - 1] + nums1[n//2]) / 2\n        else:\n            return nums1[n//2]", "gpt-3.5-turbo_prob": 0.33530192444331125}
{"id": "418", "llama3.1-8b-instruct_response": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            elif n % 4 == 1 or n == 3:\n                n -= 1\n            else:\n                n += 1\n            count += 1\n        return count", "llama3.1-8b-instruct_prob": 0.5290918384571752, "gpt-3.5-turbo_response": "def min_replacements(n):\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            if n == 3 or n % 4 == 1:\n                n -= 1\n            else:\n                n += 1\n        count += 1\n    return count", "gpt-3.5-turbo_prob": 0.4709081615428248}
{"id": "419", "llama3.1-8b-instruct_response": "def bulbSwitch(n):\n    return int(n ** 0.5)", "llama3.1-8b-instruct_prob": 0.6078404509519884, "gpt-3.5-turbo_response": "```python\ndef bulbSwitch(n):\n    return int(n ** 0.5)\n```", "gpt-3.5-turbo_prob": 0.39215954904801165}
{"id": "42", "llama3.1-8b-instruct_response": "def f(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            t = int(s[i:j+1], 2)\n            if t > j - i + 1:\n                break\n            if t == j - i + 1:\n                ans += 1\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(f(s", "llama3.1-8b-instruct_prob": 0.5378681405992293, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 == int(s[i:j+1], 2):\n                count += 1\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.4621318594007708}
{"id": "420", "llama3.1-8b-instruct_response": "```python\ndef findTheLongestSubstring(s: str) -> int:\n    vowels = 'aeiou'\n    dp = {0: -1}\n    max_len = 0\n    mask = 0\n    for i, c in enumerate(s):\n        if c in vowels:\n            mask ^= 1 << (vowels.index(c))\n        if mask not in dp:\n            dp[mask] = i\n        max_len = max(max_len, i - dp[mask])\n", "llama3.1-8b-instruct_prob": 0.5679885876563369, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        vowels = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}\n        seen = {0: -1}\n        state = 0\n        res = 0\n        for i, c in enumerate(s):\n            if c in vowels:\n                state ^= 1 << vowels[c]\n", "gpt-3.5-turbo_prob": 0.4320114123436632}
{"id": "421", "llama3.1-8b-instruct_response": "def lastSubstring(s):\n    n = len(s)\n    max_idx = 0\n    max_char = s[0]\n    for i in range(1, n):\n        if s[i] >= max_char:\n            max_char = s[i]\n            max_idx = i\n        elif s[i] < max_char and s[i] > s[max_idx - 1]:\n            max_idx = s.rfind(s[i], 0, max_idx)\n    return s[max_idx:]", "llama3.1-8b-instruct_prob": 0.6075616749855217, "gpt-3.5-turbo_response": "```python\ndef lastSubstring(s):\n    i, j, k = 0, 1, 0\n    n = len(s)\n    while j + k < n:\n        if s[i+k] == s[j+k]:\n            k += 1\n            continue\n        elif s[i+k] > s[j+k]:\n            j = j + k + 1\n        else:\n            i = max(i + k + 1, j)\n            j = i +", "gpt-3.5-turbo_prob": 0.3924383250144783}
{"id": "422", "llama3.1-8b-instruct_response": "```python\ndef longest_palindrome(s: str) -> str:\n    def expand_around_center(s: str, left: int, right: int) -> str:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1:right]\n\n    longest = \"\"\n    for i in range(len(s)):\n        palindrome1 = expand_around_center(s, i,", "llama3.1-8b-instruct_prob": 0.4079356624455551, "gpt-3.5-turbo_response": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def expandAroundCenter(left, right):\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            return s[left+1:right]\n        \n        longest = \"\"\n        for i in range(len(s)):\n            odd = expandAroundCenter(i, i)\n            even = expandAroundCenter(i, i+1)\n", "gpt-3.5-turbo_prob": 0.592064337554445}
{"id": "423", "llama3.1-8b-instruct_response": "def longestSubsequence(arr, difference):\n    dp = {}\n    for num in arr:\n        dp[num] = dp.get(num - difference, 1) + 1\n    return max(dp.values())", "llama3.1-8b-instruct_prob": 0.6266478334401675, "gpt-3.5-turbo_response": "def longestSubsequence(arr, difference):\n    dp = {}\n    for num in arr:\n        dp[num] = dp.get(num - difference, 0) + 1\n    return max(dp.values())", "gpt-3.5-turbo_prob": 0.3733521665598326}
{"id": "425", "llama3.1-8b-instruct_response": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        MIN_INT, MAX_INT = -2**31, 2**31 - 1\n        sign = -1 if (dividend < 0) ^ (divisor < 0) else 1\n        dividend, divisor = abs(dividend), abs(divisor)\n        quotient = 0\n        while dividend >= divisor:\n            temp, i = divisor, 1\n           ", "llama3.1-8b-instruct_prob": 0.6274574961908024, "gpt-3.5-turbo_response": "def divide(dividend, divisor):\n    INT_MAX = 2147483647\n    INT_MIN = -2147483648\n    if dividend == 0:\n        return 0\n    if divisor == 1:\n        return dividend\n    if divisor == -1:\n        if dividend > INT_MIN:\n            return -dividend\n        return INT_MAX\n    sign = 1\n    if (dividend < 0) ^ (divisor < 0):\n        sign", "gpt-3.5-turbo_prob": 0.3725425038091976}
{"id": "426", "llama3.1-8b-instruct_response": "def isPowerOfTwo(n):\n    count = 0\n    while n > 0:\n        count += n % 2\n        n //= 2\n    return count == 1", "llama3.1-8b-instruct_prob": 0.4999999929963436, "gpt-3.5-turbo_response": "def reorderedPowerOf2(N):\n    count = collections.Counter(str(N))\n    return any(count == collections.Counter(str(1 << i)) for i in range(32))", "gpt-3.5-turbo_prob": 0.5000000070036564}
{"id": "427", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        MOD = 10**9 + 7\n        return (self.factorial(2 * n) // (self.factorial(n) ** 2)) % MOD\n\n    def factorial(self, n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result = (result * i) % (10**9 +", "llama3.1-8b-instruct_prob": 0.48880756266894265, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        return (factorial(2*n) // (factorial(n) * factorial(n))) % (10**9 + 7)\n```", "gpt-3.5-turbo_prob": 0.5111924373310573}
{"id": "429", "llama3.1-8b-instruct_response": "def getHint(secret, guess):\n    bulls = 0\n    cows = 0\n    secret_count = {}\n    guess_count = {}\n    \n    for s, g in zip(secret, guess):\n        if s == g:\n            bulls += 1\n        else:\n            secret_count[s] = secret_count.get(s, 0) + 1\n            guess_count[g] = guess_count.get(g, 0) + 1\n    \n    for s, g in zip(secret", "llama3.1-8b-instruct_prob": 0.49104547176755875, "gpt-3.5-turbo_response": "def getHint(secret: str, guess: str) -> str:\n    bulls = sum(s == g for s, g in zip(secret, guess))\n    cows = sum((secret + guess).count(x) - bulls for x in set(secret))\n    return f\"{bulls}A{cows}B\"", "gpt-3.5-turbo_prob": 0.5089545282324413}
{"id": "43", "llama3.1-8b-instruct_response": "import heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pq = []\n    for i in range(n):\n        heapq.heappush(pq, a[i])\n    ans = 0\n    for i in range(n):\n        ans += b[i]\n        heapq.heappush(pq, -b[i])\n    while pq:\n        ans = min", "llama3.1-8b-instruct_prob": 0.2948794619261433, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    min_time = min(a) + min(b)\n    for i in range(n):\n        min_time = min(min_time, max(a[i], b[(i+1)%n]))\n    print(min_time)\n```", "gpt-3.5-turbo_prob": 0.7051205380738568}
{"id": "430", "llama3.1-8b-instruct_response": "class Solution:\n    def countDistinctSubsequences(self, S: str) -> int:\n        MOD = 10**9 + 7\n        n = len(S)\n        dp = [[0]*26 for _ in range(n+1)]\n        for i in range(n-1, -1, -1):\n            for j in range(26):\n                if j == ord(S[i]) - ord('a'):\n                    dp[i][j] = dp[i+1][j]", "llama3.1-8b-instruct_prob": 0.5154835637560209, "gpt-3.5-turbo_response": "```python\ndef distinctSubseqII(S):\n    dp = [1] * 26\n    for s in S:\n        dp[ord(s) - 97] = sum(dp) + 1\n    return sum(dp) % (10**9 + 7)\n```", "gpt-3.5-turbo_prob": 0.4845164362439791}
{"id": "431", "llama3.1-8b-instruct_response": "class Solution:\n    def sumSubarrayMins(self, A):\n        stack = []\n        n = len(A)\n        MOD = 10**9 + 7\n        right = [0]*n\n        for i in range(n):\n            while stack and A[stack[-1]] >= A[i]:\n                stack.pop()\n            right[i] = i + (stack and stack[-1])\n            stack.append(i)\n        stack = []\n        for i in range(n-1,", "llama3.1-8b-instruct_prob": 0.5413051498083371, "gpt-3.5-turbo_response": "```python\ndef sumSubarrayMins(A):\n    stack = []\n    A = [0] + A + [0]\n    res = 0\n    for i, x in enumerate(A):\n        while stack and A[stack[-1]] > x:\n            j = stack.pop()\n            k = stack[-1]\n            res += A[j] * (i - j) * (j - k)\n        stack.append(i)\n    return res % (10**9 +", "gpt-3.5-turbo_prob": 0.45869485019166284}
{"id": "432", "llama3.1-8b-instruct_response": "def isPossibleDivide(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in sorted(count):\n        if count[num] > 0:\n            for i in range(k):\n                if num + i in count and count[num + i] > 0:\n                    count[num + i] -= 1\n                else:\n                    return False", "llama3.1-8b-instruct_prob": 0.3921595540979952, "gpt-3.5-turbo_response": "def isPossibleDivide(nums, k):\n    if len(nums) % k != 0:\n        return False\n    count = collections.Counter(nums)\n    nums.sort()\n    for num in nums:\n        if count[num] > 0:\n            for i in range(k):\n                if count[num + i] == 0:\n                    return False\n                count[num + i] -= 1\n    return True", "gpt-3.5-turbo_prob": 0.6078404459020048}
{"id": "433", "llama3.1-8b-instruct_response": "def numOfSubarrays(arr, k, threshold):\n    n = len(arr)\n    if k > n: return 0\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    count = 0\n    for i in range(k, n + 1):\n        if (prefix_sum[i] - prefix_sum[i - k]) / k >= threshold", "llama3.1-8b-instruct_prob": 0.34574538788470105, "gpt-3.5-turbo_response": "```python\ndef numOfSubarrays(arr, k, threshold):\n    total = sum(arr[:k])\n    count = 1 if total / k >= threshold else 0\n    for i in range(k, len(arr)):\n        total += arr[i] - arr[i - k]\n        if total / k >= threshold:\n            count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.6542546121152989}
{"id": "434", "llama3.1-8b-instruct_response": "def longestSubarray(nums):\n    n = len(nums)\n    max_len = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if nums[j] == 1:\n                count += 1\n            else:\n                max_len = max(max_len, count)\n                count = 0\n        max_len = max(max_len, count)\n    return max_len", "llama3.1-8b-instruct_prob": 0.3559347570767779, "gpt-3.5-turbo_response": "def longestSubarray(nums):\n    left, right = 0, 0\n    zero_count = 0\n    max_length = 0\n    \n    while right < len(nums):\n        if nums[right] == 0:\n            zero_count += 1\n        \n        while zero_count > 1:\n            if nums[left] == 0:\n                zero_count -= 1\n            left += 1\n        \n        max_length = max(max_length, right - left)\n        right += ", "gpt-3.5-turbo_prob": 0.6440652429232221}
{"id": "436", "llama3.1-8b-instruct_response": "def minDays(n: int) -> int:\n    def dfs(n: int, visited: set) -> int:\n        if n == 0:\n            return 0\n        if n in visited:\n            return float('inf')\n        visited.add(n)\n        return 1 + min(dfs(n-1, visited), dfs(n//2, visited), dfs(n//3, visited) if n % 3 == 0 else float('inf'))\n\n    return dfs(n, set", "llama3.1-8b-instruct_prob": 0.3509066123303636, "gpt-3.5-turbo_response": "```python\ndef minDays(n):\n    dp = {}\n    def dfs(n):\n        if n <= 1:\n            return n\n        if n not in dp:\n            dp[n] = 1 + min(n%2 + dfs(n//2), n%3 + dfs(n//3))\n        return dp[n]\n    return dfs(n)\n```", "gpt-3.5-turbo_prob": 0.6490933876696364}
{"id": "437", "llama3.1-8b-instruct_response": "def decode_string(S, K):\n    stack = []\n    curr_num = 0\n    curr_str = ''\n    for c in S:\n        if c.isdigit():\n            curr_num = curr_num * 10 + int(c)\n        elif c == '#':\n            stack.append(curr_str)\n            stack.append(curr_num)\n            curr_str = ''\n            curr_num = 0\n        else:\n            curr_str += c\n    curr_str = curr_str[:K]\n    ans = ''\n   ", "llama3.1-8b-instruct_prob": 0.28157819986075566, "gpt-3.5-turbo_response": "```python\ndef decodeAtIndex(S, K):\n    size = 0\n    for char in S:\n        if char.isdigit():\n            size *= int(char)\n        else:\n            size += 1\n    for char in reversed(S):\n        K %= size\n        if K == 0 and char.isalpha():\n            return char\n        if char.isdigit():\n            size /= int(char)\n        else:\n            size -= 1\n```", "gpt-3.5-turbo_prob": 0.7184218001392444}
{"id": "438", "llama3.1-8b-instruct_response": "def findLatestStep(arr, m):\n    n = len(arr)\n    prefix = [0] * (n + 2)\n    for num in arr:\n        prefix[num + 1] += 1\n        prefix[num - 1] += 1\n        prefix[num] -= 2\n    for i in range(1, n + 2):\n        prefix[i] += prefix[i - 1]\n    for i in range(1, n + 2):\n", "llama3.1-8b-instruct_prob": 0.7686801413571731, "gpt-3.5-turbo_response": "def latestStep(arr, m):\n    n = len(arr)\n    result = -1\n    groups = [0] * n\n    for i in range(n):\n        index = arr[i] - 1\n        groups[index] = 1\n        left = index - 1\n        right = index + 1\n        while left >= 0 and groups[left] == 1:\n            left -= 1\n        while right < n and groups[right] == ", "gpt-3.5-turbo_prob": 0.23131985864282684}
{"id": "439", "llama3.1-8b-instruct_response": "def maxTurbulenceSize(arr):\n    n = len(arr)\n    res = 1\n    i = 0\n    while i < n - 1:\n        j = i + 1\n        while j < n and (arr[j-1] < arr[j] and (j-i)%2 == 1) or (arr[j-1] > arr[j] and (j-i)%2 == 0):\n            j += 1\n        res = max", "llama3.1-8b-instruct_prob": 0.4880717872647078, "gpt-3.5-turbo_response": "```python\ndef maxTurbulenceSize(A):\n    inc, dec, result = 1, 1, 1\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            inc = dec + 1\n            dec = 1\n        elif A[i] < A[i-1]:\n            dec = inc + 1\n            inc = 1\n        else:\n            inc = 1\n            dec =", "gpt-3.5-turbo_prob": 0.5119282127352922}
{"id": "44", "llama3.1-8b-instruct_response": "def solve(n):\n    ans = []\n    for i in range(1, 4 * n + 1, 2):\n        if i % 2 == 0:\n            ans.append(i)\n        else:\n            for j in ans:\n                if j % 2 == 0 and i % j == 0:\n                    break\n            else:\n                ans.append(i)\n    return ' '.join(map(str, ans))\n\nt = int(input())\nfor _ in range(t):\n", "llama3.1-8b-instruct_prob": 0.4104106439185268, "gpt-3.5-turbo_response": "```python\nfrom math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(n):\n        print(4*n - 2*i, end=' ')\n```", "gpt-3.5-turbo_prob": 0.5895893560814733}
{"id": "440", "llama3.1-8b-instruct_response": "def mirrorReflection(p, q)\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    a = p // gcd(p, q)\n    b = q // gcd(p, q)\n    return 1 - (a % 2) - (b % 2)", "llama3.1-8b-instruct_prob": 0.48736321564974733, "gpt-3.5-turbo_response": "def mirrorReflection(p, q):\n    while p % 2 == 0 and q % 2 == 0:\n        p, q = p // 2, q // 2\n    return 1 - p % 2 + q % 2", "gpt-3.5-turbo_prob": 0.5126367843502526}
{"id": "441", "llama3.1-8b-instruct_response": "def num_sums(n):\n    count = 0\n    for start in range(1, n):\n        total = 0\n        for num in range(start, n):\n            total += num\n            if total == n:\n                count += 1\n                break\n    return count", "llama3.1-8b-instruct_prob": 0.3551118485190078, "gpt-3.5-turbo_response": "def consecutiveNumbersSum(N):\n    count = 0\n    k = 1\n    while (k * (k + 1) < 2 * N):\n        if ((N - k * (k + 1) / 2) % (k + 1) == 0):\n            count += 1\n        k += 1\n    return count", "gpt-3.5-turbo_prob": 0.6448881514809921}
{"id": "442", "llama3.1-8b-instruct_response": "def minSwaps(grid):\n    n = len(grid)\n    ones = [sum(row[i:] for i in range(n) if i <= j) for j in range(n)]\n    swaps = 0\n    for i in range(n):\n        if ones[i] > i:\n            swaps += ones[i] - i\n            ones[i:] = ones[i+1:] + ones[i]\n    return swaps if swaps <= n*(n-1)//2 else -1", "llama3.1-8b-instruct_prob": 0.6549969878907214, "gpt-3.5-turbo_response": "```python\ndef minSwaps(grid):\n    n = len(grid)\n    count = 0\n    for i in range(n):\n        zeros = 0\n        for j in range(i, n):\n            if all(grid[k][j] == 0 for k in range(i)):\n                zeros += 1\n        if zeros == 0:\n            return -1\n        index = next((j for j in range(i, n) if all(grid[k][j] ==", "gpt-3.5-turbo_prob": 0.34500301210927853}
{"id": "444", "llama3.1-8b-instruct_response": "def nth_personGetsNth_seat(n):\n    return 0.5 ** (n - 1)", "llama3.1-8b-instruct_prob": 0.5895893495876965, "gpt-3.5-turbo_response": "def nthPersonGetsNthSeat(n: int) -> float:\n    return 1.0 if n == 1 else 0.5", "gpt-3.5-turbo_prob": 0.4104106504123035}
{"id": "445", "llama3.1-8b-instruct_response": "def minimumDifference(nums):\n    nums.sort()\n    n = len(nums)\n    min_diff = float('inf')\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                diff = nums[k] - nums[i]\n                min_diff = min(min_diff, diff)\n                if min_diff == 0:\n                    return 0\n    return min_diff", "llama3.1-8b-instruct_prob": 0.3008774334120365, "gpt-3.5-turbo_response": "```python\ndef minDifference(nums):\n    if len(nums) <= 4:\n        return 0\n    nums.sort()\n    return min(nums[-4] - nums[0], nums[-3] - nums[1], nums[-2] - nums[2], nums[-1] - nums[3])\n```", "gpt-3.5-turbo_prob": 0.6991225665879635}
{"id": "446", "llama3.1-8b-instruct_response": "def findLeastNumOfUniqueInts(arr, k):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    count = sorted(count.values())\n    i = 0\n    while k >= count[i] and i < len(count):\n        k -= count[i]\n        i += 1\n    return len(count) - i", "llama3.1-8b-instruct_prob": 0.4855778644994764, "gpt-3.5-turbo_response": "def findLeastNumOfUniqueInts(arr, k):\n    freq_map = collections.Counter(arr)\n    sorted_freq = sorted(freq_map.values())\n    unique_count = len(sorted_freq)\n    for freq in sorted_freq:\n        if k >= freq:\n            k -= freq\n            unique_count -= 1\n        else:\n            break\n    return unique_count - (k > 0)", "gpt-3.5-turbo_prob": 0.5144221355005236}
{"id": "447", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\ndef removeDuplicateLetters(s):\n    last_occurrence = {char: idx for idx, char in enumerate(s)}\n    count = Counter(s)\n    stack = []\n    seen = set()\n\n    for idx, char in enumerate(s):\n        count[char] -= 1\n        if char in seen:\n            continue\n        while stack and char < stack[-1] and count[stack[-1]] > 0 and last_occurrence[stack[-1", "llama3.1-8b-instruct_prob": 0.33530192564348543, "gpt-3.5-turbo_response": "def removeDuplicateLetters(s):\n    stack = []\n    seen = set()\n    last_occurrence = {c: i for i, c in enumerate(s)}\n    \n    for i, c in enumerate(s):\n        if c not in seen:\n            while stack and c < stack[-1] and i < last_occurrence[stack[-1]]:\n                seen.discard(stack.pop())\n            seen.add(c)\n            stack.append(c)\n    \n    return ''.join(stack)", "gpt-3.5-turbo_prob": 0.6646980743565146}
{"id": "448", "llama3.1-8b-instruct_response": "def check_subarray_sum(nums, k):\n    prefix_sum = 0\n    seen = {0: -1}\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if (prefix_sum - k) in seen and i - seen[prefix_sum - k] >= 2:\n            return True\n        if prefix_sum % k == 0 and i >= 1:\n            return True\n        seen[prefix_sum] = i\n    return False", "llama3.1-8b-instruct_prob": 0.512636775725532, "gpt-3.5-turbo_response": "def checkSubarraySum(nums, k):\n    prefix_sum = 0\n    seen = {0: -1}\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if k != 0:\n            prefix_sum %= k\n        if prefix_sum in seen:\n            if i - seen[prefix_sum] > 1:\n                return True\n        else:\n            seen[prefix_sum] = i\n    return False", "gpt-3.5-turbo_prob": 0.487363224274468}
{"id": "449", "llama3.1-8b-instruct_response": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]", "llama3.1-8b-instruct_prob": 0.5448679458726919, "gpt-3.5-turbo_response": "def findMin(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]", "gpt-3.5-turbo_prob": 0.45513205412730817}
{"id": "452", "llama3.1-8b-instruct_response": "```python\ndef minDifficulty(jobDifficulty, d):\n    n = len(jobDifficulty)\n    if n < d: return -1\n\n    @lru_cache(None)\n    def dp(i, days):\n        if i >= n: return 0\n        if days == 1: return max(jobDifficulty[i:n])\n\n        res = float('inf')\n        for j in range(i, n - days + 1):\n            res = min(res, max(jobDifficulty[i:j+1", "llama3.1-8b-instruct_prob": 0.5595040348350515, "gpt-3.5-turbo_response": "```python\ndef minDifficulty(jobDifficulty, d):\n    n = len(jobDifficulty)\n    if n < d:\n        return -1\n    dp = [[float('inf')] * n + [0] for _ in range(d + 1)]\n    dp[0][0] = jobDifficulty[0]\n    for i in range(1, n):\n        dp[0][i] = max(jobDifficulty[i], dp[0][i - 1])\n    for i", "gpt-3.5-turbo_prob": 0.4404959651649485}
{"id": "453", "llama3.1-8b-instruct_response": "class Solution:\n    def minCost(self, houses, cost, m, n, target):\n        dp = [[[float('inf')] * (target + 1) for _ in range(n)] for _ in range(m)]\n        for i in range(min(m, target)):\n            dp[i][houses[i]][1] = cost[i][houses[i]-1] if houses[i] else 0\n        for i in range(min(m, target), m):\n            dp[i][0][", "llama3.1-8b-instruct_prob": 0.5965416167000029, "gpt-3.5-turbo_response": "```python\ndef minCost(houses, cost, m, n, target):\n    pass\n```", "gpt-3.5-turbo_prob": 0.4034583832999971}
{"id": "454", "llama3.1-8b-instruct_response": "def maximumSwap(num):\n    num = list(str(num))\n    last_seen = {int(digit): i for i, digit in enumerate(num)}\n    for i, digit in enumerate(num):\n        for j in range(9, int(digit), -1):\n            if j in last_seen and last_seen[j] > i:\n                num[i], num[last_seen[j]] = num[last_seen[j]], num[i]\n                return int(''.join(num))\n    return num", "llama3.1-8b-instruct_prob": 0.4395528922003292, "gpt-3.5-turbo_response": "def maximumSwap(num):\n    num = list(str(num))\n    last = {int(val): i for i, val in enumerate(num)}\n    for i, val in enumerate(num):\n        for d in range(9, int(val), -1):\n            if d in last and last[d] > i:\n                num[i], num[last[d]] = num[last[d]], num[i]\n                return int(\"\".join(num))\n    return int(\"\".join(num))", "gpt-3.5-turbo_prob": 0.5604471077996708}
{"id": "456", "llama3.1-8b-instruct_response": "def canCross(stones):\n    stone_set = set(stones)\n    def dfs(pos, jump):\n        if pos == stones[-1]:\n            return True\n        for i in range(jump - 1, jump + 2):\n            if pos + i in stone_set and dfs(pos + i, i):\n                return True\n        return False\n    return dfs(0, 1)", "llama3.1-8b-instruct_prob": 0.5448679475932158, "gpt-3.5-turbo_response": "def canCross(stones):\n    if stones[1] != 1:\n        return False\n    dp = {x: set() for x in stones}\n    dp[1] = {1}\n    for stone in stones[1:]:\n        for step in dp[stone]:\n            for k in (step - 1, step, step + 1):\n                if k > 0 and stone + k in dp:\n                    dp[stone + k].add(k)\n    return", "gpt-3.5-turbo_prob": 0.4551320524067842}
{"id": "457", "llama3.1-8b-instruct_response": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "llama3.1-8b-instruct_prob": 0.47311698642504296, "gpt-3.5-turbo_response": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "gpt-3.5-turbo_prob": 0.5268830135749569}
{"id": "458", "llama3.1-8b-instruct_response": "class Solution:\n    def minSubarray(self, nums: list[int], p: int) -> int:\n        total = sum(nums)\n        if total % p == 0:\n            return 0\n        target = (total // p + 1) * p\n        dp = {0: -1}\n        for i, x in enumerate(nums):\n            dp.setdefault(x + dp.get(x, 0), i)\n        for s in range(target - 1, total -", "llama3.1-8b-instruct_prob": 0.4917653696157396, "gpt-3.5-turbo_response": "def minSubarray(nums, p):\n    target = sum(nums) % p\n    if target == 0:\n        return 0\n    prefix = {0: -1}\n    cur = 0\n    res = n = len(nums)\n    for i, a in enumerate(nums):\n        cur = (cur + a) % p\n        prefix[cur] = i\n        if (cur - target) % p in prefix:\n            res = min(res, i - prefix", "gpt-3.5-turbo_prob": 0.5082346303842604}
{"id": "459", "llama3.1-8b-instruct_response": "def characterReplacement(s, k):\n    n = len(s)\n    max_len = 0\n    max_freq = 0\n    freq = {}\n    \n    left = 0\n    for right in range(n):\n        freq[s[right]] = freq.get(s[right], 0) + 1\n        max_freq = max(max_freq, freq[s[right]])\n        \n        if right - left + 1 - max_freq > k:\n            freq[s[left]] -= 1\n           ", "llama3.1-8b-instruct_prob": 0.5378681428663172, "gpt-3.5-turbo_response": "```python\ndef characterReplacement(s, k):\n    max_length = 0\n    start = 0\n    max_count = 0\n    count_map = {}\n    for end in range(len(s)):\n        count_map[s[end]] = count_map.get(s[end], 0) + 1\n        max_count = max(max_count, count_map[s[end]])\n        if end - start + 1 - max_count > k:\n            count_map[s[start]] -= 1\n", "gpt-3.5-turbo_prob": 0.46213185713368266}
{"id": "460", "llama3.1-8b-instruct_response": "def longestDuplication(A):\n    n = len(A)\n    visited = set()\n    max_len = 0\n    for i in range(n):\n        if i not in visited:\n            path = set()\n            j = i\n            while j not in visited:\n                visited.add(j)\n                path.add(A[j])\n                j = A[j]\n            max_len = max(max_len, len(path))\n    return max_len", "llama3.1-8b-instruct_prob": 0.5126367723022331, "gpt-3.5-turbo_response": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        visited = [False] * len(nums)\n        ans = 0\n        for i in range(len(nums)):\n            if not visited[i]:\n                start = nums[i]\n                count = 0\n                while True:\n                    start = nums[start]\n                    count += 1\n                    visited[start] = True\n                    if start == nums[i]:\n                        break\n                ans = max(ans, count", "gpt-3.5-turbo_prob": 0.48736322769776685}
{"id": "461", "llama3.1-8b-instruct_response": "```python\nclass Solution:\n    def numOfMinutes(self, n: int, headID: int, manager: list[int], informTime: list[int]) -> int:\n        graph = {i: [] for i in range(n)}\n        for i, m in enumerate(manager):\n            if m != -1:\n                graph[m].append(i)\n\n        def dfs(node: int) -> int:\n            if not graph[node]:\n                return 0\n            return max(dfs(child) +", "llama3.1-8b-instruct_prob": 0.28774061099604525, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def numOfMinutes(self, n: int, headID: int, manager: List[int], informTime: List[int]) -> int:\n        graph = collections.defaultdict(list)\n        for i, m in enumerate(manager):\n            graph[m].append(i)\n        def dfs(i):\n            return informTime[i] + max(dfs(j) for j in graph[i]) if graph[i] else 0\n        return dfs(headID)\n```", "gpt-3.5-turbo_prob": 0.7122593890039548}
{"id": "462", "llama3.1-8b-instruct_response": "def countServers(grid):\n    m, n = len(grid), len(grid[0])\n    row_sums, col_sums = [0] * m, [0] * n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]:\n                row_sums[i] += 1\n                col_sums[j] += 1\n    return sum(1 for i in range(m) for j in range(n) if grid[i", "llama3.1-8b-instruct_prob": 0.7367318397482392, "gpt-3.5-turbo_response": "```python\ndef countServers(grid):\n    rows = [0] * len(grid)\n    cols = [0] * len(grid[0])\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                rows[i] += 1\n                cols[j] += 1\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n           ", "gpt-3.5-turbo_prob": 0.2632681602517607}
{"id": "464", "llama3.1-8b-instruct_response": "def minOperations(n):\n    return n * (n - 1) // 4", "llama3.1-8b-instruct_prob": 0.6222882151590964, "gpt-3.5-turbo_response": "```python\ndef minOperations(n):\n    return n * n // 4\n```", "gpt-3.5-turbo_prob": 0.3777117848409036}
{"id": "465", "llama3.1-8b-instruct_response": "def minCut(s):\n    n = len(s)\n    dp = [0] * n\n    palindrome = [[False] * n for _ in range(n)]\n    for i in range(n):\n        palindrome[i][i] = True\n        dp[i] = 0\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s", "llama3.1-8b-instruct_prob": 0.4457003739282609, "gpt-3.5-turbo_response": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        dp = [i - 1 for i in range(n + 1)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[i:j + 1] == s[i:j + 1][::-1]:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + 1)\n        return dp", "gpt-3.5-turbo_prob": 0.5542996260717392}
{"id": "466", "llama3.1-8b-instruct_response": "```python\ndef maskPII(S):\n    if '@' in S:\n        name = S.split('@')[0]\n        local_part = name.split('.')[0]\n        masked_name = local_part[0] + '*****' + local_part[-1] + '@' + S.split('@')[1]\n        return masked_name.lower()\n    else:\n        country_code = ''\n        if len(S) > 10:\n            country_code = S[:len(S) - 10]\n           ", "llama3.1-8b-instruct_prob": 0.4664359057752862, "gpt-3.5-turbo_response": "import re\n\nclass Solution:\n    def maskPII(self, S: str) -> str:\n        if '@' in S:\n            first, after = S.split('@')\n            return \"{}*****{}@{}\".format(first[0], first[-1], after).lower()\n        else:\n            digits = re.sub('\\D', '', S)\n            local = \"***-***-{}\".format(digits[-4:])\n            if len(digits) == 10:\n                return local\n            return \"+{}", "gpt-3.5-turbo_prob": 0.5335640942247137}
{"id": "469", "llama3.1-8b-instruct_response": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: list[int], rightChild: list[int]) -> bool:\n        parent = {i: c for i, c in zip(range(n), leftChild + rightChild)}\n        root = next(i for i in range(n) if i not in parent)\n        stack = [root]\n        visited = {root}\n        while stack:\n            node = stack.pop()\n            for child in parent:\n                if parent", "llama3.1-8b-instruct_prob": 0.5718042696641339, "gpt-3.5-turbo_response": "class Solution:\n    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:\n        parents = [0] * n\n        for i in range(n):\n            if leftChild[i] != -1:\n                if parents[leftChild[i]] != 0:\n                    return False\n                parents[leftChild[i]] = i\n            if rightChild[i] != -1:\n                if parents[rightChild[i]] != 0", "gpt-3.5-turbo_prob": 0.4281957303358661}
{"id": "47", "llama3.1-8b-instruct_response": "def solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    max1, max2 = 0, 0\n    for i in range(n):\n        max1 = max(max1, a[i])\n        max2 = max(max2, max1 - a[i])\n    print(max1 + max2)\n\nfor _ in range(int(input())):\n    solve()", "llama3.1-8b-instruct_prob": 0.4880718015679226, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sum(a[i] * (-1) ** i for i in range(n)))\n```", "gpt-3.5-turbo_prob": 0.5119281984320774}
{"id": "471", "llama3.1-8b-instruct_response": "```python\ndef numIslands(grid):\n    if not grid:\n        return 0\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid, i, j):\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def numIslands(grid):\n    def dfs(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':\n            return\n        grid[i][j] = '0'\n        dfs(grid, i + 1, j)\n        dfs(grid, i - 1, j)\n        dfs(grid, i, j + 1)\n        dfs(grid,", "gpt-3.5-turbo_prob": 0.5}
{"id": "472", "llama3.1-8b-instruct_response": "def canReach(arr, start):\n    n = len(arr)\n    visited = set()\n    def dfs(i):\n        if i < 0 or i >= n or i in visited:\n            return False\n        if arr[i] == 0:\n            return True\n        visited.add(i)\n        return dfs(i + arr[i]) or dfs(i - arr[i])\n    return dfs(start)", "llama3.1-8b-instruct_prob": 0.5216358942358222, "gpt-3.5-turbo_response": "def canReach(arr, start):\n    if 0 <= start < len(arr) and arr[start] >= 0:\n        if arr[start] == 0:\n            return True\n        arr[start] = -arr[start]\n        return canReach(arr, start + arr[start]) or canReach(arr, start - arr[start])\n    return False", "gpt-3.5-turbo_prob": 0.47836410576417776}
{"id": "473", "llama3.1-8b-instruct_response": "class Solution:\n    def countTriplets(self, arr: list[int]) -> int:\n        n = len(arr)\n        prefix_xor = [0] * (n + 1)\n        for i in range(n):\n            prefix_xor[i + 1] = prefix_xor[i] ^ arr[i]\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                a = prefix_xor[i] ^ prefix_xor[j + 1]\n               ", "llama3.1-8b-instruct_prob": 0.4888075602670062, "gpt-3.5-turbo_response": "```python\ndef countTriplets(arr):\n    count = 0\n    for i in range(len(arr)):\n        xor = arr[i]\n        for j in range(i+1, len(arr)):\n            xor ^= arr[j]\n            if xor == 0:\n                count += j - i\n    return count\n```", "gpt-3.5-turbo_prob": 0.5111924397329938}
{"id": "474", "llama3.1-8b-instruct_response": "from itertools import combinations\nfrom collections import Counter\n\ndef maxScoreWords(words, letters, score):\n    def is_valid(word, letters):\n        for c in word:\n            if letters[c] == 0:\n                return False\n            letters[c] -= 1\n        return True\n\n    def backtrack(words, letters, score, path):\n        if not words:\n            return 0\n        max_score = 0\n        for i, word in enumerate(words):\n            if is_valid", "llama3.1-8b-instruct_prob": 0.5082346393479977, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nfrom itertools import combinations\n\ndef maxScoreWords(words, letters, score):\n    letter_count = Counter(letters)\n    max_score = 0\n    for i in range(1, len(words) + 1):\n        for combination in combinations(words, i):\n            word_count = Counter(''.join(combination))\n            if all(word_count[char] <= letter_count[char] for char in word_count):\n                max_score = max(max_score, sum", "gpt-3.5-turbo_prob": 0.49176536065200227}
{"id": "476", "llama3.1-8b-instruct_response": "def carFleet(target, position, speed):\n    n = len(position)\n    fleets = [(target - p) / s for p, s in zip(position, speed)]\n    fleets.sort(reverse=True)\n    ans = 1\n    mx = fleets[0]\n    for i in range(1, n):\n        if fleets[i] < mx:\n            ans += 1\n            mx = fleets[i]\n    return ans", "llama3.1-8b-instruct_prob": 0.511928203773296, "gpt-3.5-turbo_response": "def carFleet(target, position, speed):\n    cars = sorted(zip(position, speed))\n    times = [float(target - p) / s for p, s in cars]\n    count = 0\n    while len(times) > 1:\n        lead = times.pop()\n        if lead < times[-1]:\n            count += 1\n        else:\n            times[-1] = lead\n    return count + bool(times)", "gpt-3.5-turbo_prob": 0.48807179622670405}
{"id": "477", "llama3.1-8b-instruct_response": "def findKthBit(n, k):\n    def reverse(s):\n        return s[::-1]\n    def invert(s):\n        return ''.join('1' if c == '0' else '0' for c in s)\n    s = '0'\n    for _ in range(n):\n        s = s + '1' + reverse(invert(s))\n    return s[k-1]", "llama3.1-8b-instruct_prob": 0.5416628448157501, "gpt-3.5-turbo_response": "```python\ndef findKthBit(n, k):\n    if k == 1:\n        return \"0\"\n    mid = 2 ** (n - 1)\n    if k == mid:\n        return \"1\"\n    if k < mid:\n        return findKthBit(n - 1, k)\n    else:\n        return \"1\" if findKthBit(n - 1, 2 ** n - k) == \"0\" else \"0\"\n```", "gpt-3.5-turbo_prob": 0.4583371551842499}
{"id": "478", "llama3.1-8b-instruct_response": "def singleNumber(nums):\n    ones, twos = 0, 0\n    for num in nums:\n        twos |= ones & num\n        ones ^= num\n        threes = ones & twos\n        ones &= ~threes\n        twos &= ~threes\n    return ones", "llama3.1-8b-instruct_prob": 0.41213627433076844, "gpt-3.5-turbo_response": "```python\ndef singleNumber(nums):\n    ones = 0\n    twos = 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```", "gpt-3.5-turbo_prob": 0.5878637256692316}
{"id": "479", "llama3.1-8b-instruct_response": "def leastBricks(wall):\n    width_count = {}\n    for row in wall:\n        width = 0\n        for brick in row[:-1]:\n            width += brick\n            width_count[width] = width_count.get(width, 0) + 1\n    return max(width_count.values(), default=0)", "llama3.1-8b-instruct_prob": 0.5245649884608242, "gpt-3.5-turbo_response": "from collections import defaultdict\ndef leastBricks(wall):\n    edges = defaultdict(int)\n    for row in wall:\n        length = 0\n        for brick in row[:-1]:\n            length += brick\n            edges[length] += 1\n    return len(wall) - max(edges.values(), default=0)", "gpt-3.5-turbo_prob": 0.4754350115391757}
{"id": "48", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    print((k * (y + 1) - 1) // (x - 1) + k)", "llama3.1-8b-instruct_prob": 0.41887580654322076, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    trades_needed = (k * y + k - 1 + x - 2) // (x - 1) + k\n    print(trades_needed)\n```", "gpt-3.5-turbo_prob": 0.5811241934567792}
{"id": "480", "llama3.1-8b-instruct_response": "def numWays(steps, arrLen):\n    MOD = 10**9 + 7\n    dp = [0] * (steps + 1)\n    dp[0] = 1\n    for i in range(1, steps + 1):\n        for j in range(1, min(i + 1, arrLen)):\n            dp[i] = (dp[i] + dp[i - j] * 3) % MOD\n    return dp[steps]", "llama3.1-8b-instruct_prob": 0.5691972155457885, "gpt-3.5-turbo_response": "```python\ndef numWays(steps, arrLen):\n    MOD = 10**9 + 7\n    maxColumn = min(arrLen - 1, steps)\n    dp = [0] * (maxColumn + 1)\n    dp[0] = 1\n    for i in range(1, steps + 1):\n        dpNext = [0] * (maxColumn + 1)\n        for j in range(0, maxColumn + 1", "gpt-3.5-turbo_prob": 0.43080278445421155}
{"id": "482", "llama3.1-8b-instruct_response": "class Solution:\n    def mctFromLeafValues(self, arr):\n        n = len(arr)\n        dp = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 0\n        for d in range(1, n):\n            for l in range(n - d):\n                r = l + d\n                for m in range(l, r):\n                    dp[l][r] = min(dp[l][r", "llama3.1-8b-instruct_prob": 0.25658080013934265, "gpt-3.5-turbo_response": "```python\ndef mctFromLeafValues(arr):\n    stack = []\n    result = 0\n    for num in arr:\n        while stack and num >= stack[-1]:\n            smaller = stack.pop()\n            if stack:\n                result += smaller * min(num, stack[-1])\n            else:\n                result += smaller * num\n        stack.append(num)\n    while len(stack) > 1:\n        result += stack.pop() * stack[-1]\n    return result\n```", "gpt-3.5-turbo_prob": 0.7434191998606572}
{"id": "485", "llama3.1-8b-instruct_response": "def minKBitFlips(A, K):\n    n = len(A)\n    flips = 0\n    i = 0\n    flip = 0\n    while i < n:\n        if A[i] == 0:\n            if i + K - 1 < n:\n                for j in range(i, min(i + K - 1, n - 1)):\n                    A[j] = 1 - A[j]\n                flips += 1\n                flip ^=", "llama3.1-8b-instruct_prob": 0.6133341478733783, "gpt-3.5-turbo_response": "def minKBitFlips(A, K):", "gpt-3.5-turbo_prob": 0.38666585212662175}
{"id": "486", "llama3.1-8b-instruct_response": "def queryString(S, N):\n    for i in range(1, N + 1):\n        if bin(i)[2:] not in S:\n            return False\n    return True", "llama3.1-8b-instruct_prob": 0.548518908490077, "gpt-3.5-turbo_response": "def queryString(S, N):\n    for i in range(1, N+1):\n        if bin(i)[2:] not in S:\n            return False\n    return True", "gpt-3.5-turbo_prob": 0.4514810915099229}
{"id": "487", "llama3.1-8b-instruct_response": "def longestDiverseString(a, b, c):\n    letters = [['a', a], ['b', b], ['c', c]]\n    result = ''\n    while letters[0][1] > 0 or letters[1][1] > 0 or letters[2][1] > 0:\n        letters.sort(key=lambda x: x[1], reverse=True)\n        if letters[0][1] > 1 and letters[1][1] > 0", "llama3.1-8b-instruct_prob": 0.5000000082709647, "gpt-3.5-turbo_response": "```python\ndef longestDiverseString(a, b, c):\n    res = \"\"\n    while True:\n        if a >= b and a >= c:\n            if a == 0:\n                break\n            if len(res) < 2 or res[-1] != 'a' or res[-2] != 'a':\n                res += 'a'\n                a -= 1\n            else:\n                if b >= c:\n                    if b == 0:\n                        break\n                   ", "gpt-3.5-turbo_prob": 0.4999999917290353}
{"id": "488", "llama3.1-8b-instruct_response": "class Solution:\n    def kthSmallest(self, matrix, k):\n        n = len(matrix)\n        return sorted([num for row in matrix for num in row])[k-1]", "llama3.1-8b-instruct_prob": 0.4225784495800661, "gpt-3.5-turbo_response": "import heapq\ndef kthSmallest(matrix, k):\n    n = len(matrix)\n    min_heap = []\n    for i in range(min(k, n)):\n        min_heap.append((matrix[i][0], i, 0))\n    heapq.heapify(min_heap)\n    while k:\n        element, row, col = heapq.heappop(min_heap)\n        if col < n - 1:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row", "gpt-3.5-turbo_prob": 0.577421550419934}
{"id": "489", "llama3.1-8b-instruct_response": "def maximum_width_ramp(A):\n    stack = []\n    max_width = 0\n    for i, x in enumerate(A):\n        while stack and A[stack[-1]] <= x:\n            max_width = max(max_width, i - A.pop(stack.pop()))\n        if not stack:\n            stack.append(i)\n        else:\n            stack.append(stack[-1])\n    return max(max_width, 0)", "llama3.1-8b-instruct_prob": 0.32363777236632785, "gpt-3.5-turbo_response": "def maxWidthRamp(A):\n    stack = []\n    res = 0\n    for i, a in enumerate(A):\n        if not stack or A[stack[-1]] > a:\n            stack.append(i)\n    for j in range(len(A) - 1, -1, -1):\n        while stack and A[stack[-1]] <= A[j]:\n            res = max(res, j - stack.pop())\n    return res", "gpt-3.5-turbo_prob": 0.6763622276336722}
{"id": "49", "llama3.1-8b-instruct_response": "def solve():\n    L, R = map(int, input().split())\n    ans = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i * j * k <= R and (i * j * k >= L or (i * j > 1 and i * j * k >= L)):\n                    ans += 1\n    print(ans)\n\nfor", "llama3.1-8b-instruct_prob": 0.40244242972656075, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    count = 0\n    for i in range(l, r+1):\n        if str(i).count('0') + str(i).count('1') + str(i).count('2') <= 3:\n            count += 1\n    print(count)", "gpt-3.5-turbo_prob": 0.5975575702734393}
{"id": "490", "llama3.1-8b-instruct_response": "def canVisitAllRooms(rooms):\n    visited = set()\n    def dfs(room):\n        visited.add(room)\n        for key in rooms[room]:\n            if key not in visited:\n                dfs(key)\n    dfs(0)\n    return len(visited) == len(rooms)", "llama3.1-8b-instruct_prob": 0.4621318654046474, "gpt-3.5-turbo_response": "def canVisitAllRooms(rooms):\n    visited = set()\n    stack = [0]\n    while stack:\n        room = stack.pop()\n        if room not in visited:\n            visited.add(room)\n            stack.extend(rooms[room])\n    return len(visited) == len(rooms)", "gpt-3.5-turbo_prob": 0.5378681345953527}
{"id": "492", "llama3.1-8b-instruct_response": "def construct(a, b):\n    return 'a' * a + 'b' * b", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "import math\nclass Solution:\n    def strWithout3a3b(self, A: int, B: int) -> str:\n        res = \"\"\n        while A > 0 or B > 0:\n            if len(res) >= 2 and res[-1] == res[-2]:\n                writeA = res[-1] == 'b'\n            else:\n                writeA = A >= B\n            if writeA:\n                A -= 1\n                res += 'a", "gpt-3.5-turbo_prob": 0.5}
{"id": "493", "llama3.1-8b-instruct_response": "def findTargetSumWays(nums, S):\n    dp = {0: 1}\n    for num in nums:\n        temp = {}\n        for s, count in dp.items():\n            temp[s + num] = temp.get(s + num, 0) + count\n            temp[s - num] = temp.get(s - num, 0) + count\n        dp = temp\n    return dp.get(S, 0)", "llama3.1-8b-instruct_prob": 0.5920643338588495, "gpt-3.5-turbo_response": "```python\ndef findTargetSumWays(nums, S):\n    if sum(nums) < S or (sum(nums) + S) % 2 != 0:\n        return 0\n    target = (sum(nums) + S) // 2\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i", "gpt-3.5-turbo_prob": 0.40793566614115057}
{"id": "494", "llama3.1-8b-instruct_response": "def largest_k(text):\n    n = len(text)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if text[i - 1] == text[j - 1] and (i - j) % 2 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]", "llama3.1-8b-instruct_prob": 0.455410821493802, "gpt-3.5-turbo_response": "def longestDecomposition(text):\n    n = len(text)\n    for i in range(n // 2):\n        if text[:i + 1] == text[n - 1 - i:]:\n            return 2 + longestDecomposition(text[i + 1:n - 1 - i])\n    return 1 if n > 0 else 0", "gpt-3.5-turbo_prob": 0.5445891785061979}
{"id": "495", "llama3.1-8b-instruct_response": "def lastStoneWeight(stones):\n    import heapq\n    heap = [-stone for stone in stones]\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        x = -heapq.heappop(heap)\n        y = -heapq.heappop(heap)\n        if x != y:\n            heapq.heappush(heap, -(x-y))\n    return -heap[0] if heap else 0", "llama3.1-8b-instruct_prob": 0.5096938528275337, "gpt-3.5-turbo_response": "def lastStoneWeight(stones):\n    while len(stones) > 1:\n        stones.sort()\n        y = stones.pop()\n        x = stones.pop()\n        if x != y:\n            stones.append(y - x)\n    return stones[0] if stones else 0", "gpt-3.5-turbo_prob": 0.49030614717246634}
{"id": "496", "llama3.1-8b-instruct_response": "def minIncrementForUnique(A):\n    A.sort()\n    moves = 0\n    max_val = A[0]\n    for i in range(1, len(A)):\n        if A[i] <= max_val:\n            moves += max_val + 1 - A[i]\n            A[i] = max_val + 1\n        max_val = max(max_val, A[i])\n    return moves", "llama3.1-8b-instruct_prob": 0.5522124742587934, "gpt-3.5-turbo_response": "def minIncrementForUnique(A):\n    A.sort()\n    moves = 0\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            moves += A[i-1] - A[i] + 1\n            A[i] = A[i-1] + 1\n    return moves", "gpt-3.5-turbo_prob": 0.4477875257412066}
{"id": "497", "llama3.1-8b-instruct_response": "```python\ndef jobScheduling(startTime, endTime, profit):\n    n = len(startTime)\n    jobs = sorted(zip(startTime, endTime, profit))\n    dp = [0] * n\n    for i in range(n):\n        max_profit = 0\n        for j in range(i):\n            if jobs[j][1] <= jobs[i][0]:\n                max_profit = max(max_profit, dp[j])\n        dp[i] = max(max_profit + jobs[i][2], dp[i", "llama3.1-8b-instruct_prob": 0.4441052789159475, "gpt-3.5-turbo_response": "```python\ndef jobScheduling(startTime, endTime, profit):\n    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])\n    dp = [[0, 0]]\n    for s, e, p in jobs:\n        i = bisect.bisect(dp, [s + 1]) - 1\n        if dp[i][1] + p > dp[-1][1]:\n            dp.append([e, dp[i][1] + p", "gpt-3.5-turbo_prob": 0.5558947210840526}
{"id": "498", "llama3.1-8b-instruct_response": "class Solution:\n    def rob(self, nums):\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums) - 1):\n           ", "llama3.1-8b-instruct_prob": 0.3790227223714338, "gpt-3.5-turbo_response": "def rob(nums):\n    def rob_range(nums, start, end):\n        rob, not_rob = 0, 0\n        for i in range(start, end):\n            rob, not_rob = not_rob + nums[i], max(rob, not_rob)\n        return max(rob, not_rob)\n    if len(nums) == 1:\n        return nums[0]\n    return max(rob_range(nums, 0, len(nums)-1), rob", "gpt-3.5-turbo_prob": 0.6209772776285662}
{"id": "499", "llama3.1-8b-instruct_response": "def minOperations(target):\n    n = len(target)\n    prefix = [0] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + target[i]\n    res = 0\n    for i in range(1, n + 1):\n        res += max(0, prefix[i] - prefix[i - 1])\n    return res", "llama3.1-8b-instruct_prob": 0.47090816051873663, "gpt-3.5-turbo_response": "def minNumberOperations(target):\n    result = target[0]\n    for i in range(1, len(target)):\n        result += max(target[i] - target[i-1], 0)\n    return result", "gpt-3.5-turbo_prob": 0.5290918394812634}
{"id": "5", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef find_permutations():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        seen = defaultdict(int)\n        for num in a:\n            seen[num] += 1\n        if any(count > 1 for count in seen.values()):\n            print(0)\n            continue\n        l1 = 0\n        while a[l1] != n -", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef find_permutations(t, test_cases):\n    results = []\n    for case in test_cases:\n        n = case[0]\n        a = case[1]\n        ones = [i for i in range(n) if a[i] == 1]\n        k = len(ones)\n        if k < 2:\n            results.append((0, []))\n        else:\n            diff = [ones[i+1] - ones[i] for i in range(k-", "gpt-3.5-turbo_prob": 0.5}
{"id": "50", "llama3.1-8b-instruct_response": "def min_jars_to_empty():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        jars = list(map(int, input().split()))\n        left, right = jars[:n], jars[n:]\n        left_count, right_count = 0, 0\n        for i in range(n):\n            if left[i] == right[i]:\n                left_count += 1\n                right_count += 1\n            elif left[i] == 1", "llama3.1-8b-instruct_prob": 0.43877033439907276, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    jars = list(map(int, input().split()))\n    count_strawberry = jars.count(1)\n    count_blueberry = jars.count(2)\n    if count_strawberry == count_blueberry:\n        print(0)\n    else:\n        changes = abs(count_strawberry - count_blueberry) // 2\n        print(changes * 2)\n```", "gpt-3.5-turbo_prob": 0.5612296656009272}
{"id": "500", "llama3.1-8b-instruct_response": "```python\ndef calculate(expression):\n    def apply_operator():\n        op = operators.pop()\n        b = values.pop()\n        a = values.pop()\n        if op == '+':\n            values.append(a + b)\n        elif op == '-':\n            values.append(a - b)\n        elif op == '*':\n            values.append(a * b)\n        elif op == '/':\n            values.append(int(a / b))\n\n    def precedence(op):\n        if op == '+' or op == '-':\n            return", "llama3.1-8b-instruct_prob": 0.5139119171176277, "gpt-3.5-turbo_response": "class Solution:\n    def calculate(self, s: str) -> int:\n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if (not s[i].isdigit() and s[i] != ' ') or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n", "gpt-3.5-turbo_prob": 0.4860880828823723}
{"id": "501", "llama3.1-8b-instruct_response": "def shortest_palindrome(s):\n    return s[::-1] + s", "llama3.1-8b-instruct_prob": 0.5565592077529432, "gpt-3.5-turbo_response": "def shortest_palindrome(s):\n    rev_s = s[::-1]\n    for i in range(len(s) + 1):\n        if s.startswith(rev_s[i:]):\n            return rev_s[:i] + s", "gpt-3.5-turbo_prob": 0.4434407922470568}
{"id": "502", "llama3.1-8b-instruct_response": "def minMalwareSpread(graph, initial):\n    n = len(graph)\n    initial_counts = {}\n    for i in initial:\n        initial_counts[i] = initial_counts.get(i, 0) + 1\n\n    def dfs(node, visited):\n        visited.add(node)\n        for i in range(n):\n            if graph[node][i] == 1 and i not in visited:\n                dfs(i, visited)\n\n    infected = set()\n    for i in range(n):\n        visited =", "llama3.1-8b-instruct_prob": 0.4482199416562012, "gpt-3.5-turbo_response": "```python\ndef minMalwareSpread(graph, initial):\n    def find(x):\n        if parents[x] != x:\n            parents[x] = find(parents[x])\n        return parents[x]\n\n    def union(x, y):\n        rootX, rootY = find(x), find(y)\n        if rootX != rootY:\n            parents[rootX] = rootY\n            size[rootY] += size[rootX]\n\n    n = len(graph)\n    parents = list(range(n))\n", "gpt-3.5-turbo_prob": 0.5517800583437987}
{"id": "503", "llama3.1-8b-instruct_response": "def arrangeWords(text):\n    words = text.split()\n    words = [word.capitalize() for word in words]\n    words.sort(key=lambda x: (len(x), words.index(x)))\n    return ' '.join(words).capitalize()", "llama3.1-8b-instruct_prob": 0.5517486123129114, "gpt-3.5-turbo_response": "```python\ndef arrangeWords(text):\n    words = text.split()\n    words.sort(key=lambda x: (len(x), words.index(x)))\n    return ' '.join(words).capitalize()\n```", "gpt-3.5-turbo_prob": 0.4482513876870886}
{"id": "504", "llama3.1-8b-instruct_response": "def reverseParentheses(s):\n    stack = [[]]\n    for c in s:\n        if c == '(':\n            stack.append([])\n        elif c == ')':\n            v = stack.pop()\n            stack[-1] = stack[-1] + v[::-1]\n        else:\n            stack[-1].append(c)\n    return ''.join(stack[0])", "llama3.1-8b-instruct_prob": 0.6065121009026146, "gpt-3.5-turbo_response": "```python\ndef reverseParentheses(s):\n    stack = []\n    for char in s:\n        if char == ')':\n            temp = ''\n            while stack and stack[-1] != '(':\n                temp = stack.pop() + temp\n            stack.pop()\n            stack.extend(list(temp))\n        else:\n            stack.append(char)\n    return ''.join(stack)\n```", "gpt-3.5-turbo_prob": 0.39348789909738535}
{"id": "505", "llama3.1-8b-instruct_response": "def minRemoveToMakeValid(s: str) -> str:\n    stack = []\n    chars = list(s)\n    for i, c in enumerate(chars):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                chars[i] = ''\n    while stack:\n        chars[stack.pop()] = ''\n    return ''.join(chars)", "llama3.1-8b-instruct_prob": 0.5075414795334756, "gpt-3.5-turbo_response": "def minRemoveToMakeValid(s):\n    stack = []\n    remove = set()\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                remove.add(i)\n    remove = remove.union(set(stack))\n    result = []\n    for i, char in enumerate(s):\n        if i not in remove:\n            result.append(char)\n    return ''.join(result)", "gpt-3.5-turbo_prob": 0.4924585204665245}
{"id": "506", "llama3.1-8b-instruct_response": "def myAtoi(s: str) -> int:\n    s = s.lstrip()\n    sign = 1\n    if s and s[0] == '-':\n        sign = -1\n        s = s[1:]\n    elif s and s[0] == '+':\n        s = s[1:]\n    res = 0\n    for c in s:\n        if not c.isdigit():\n            break\n        res = res * 10 + ord(c) - ord", "llama3.1-8b-instruct_prob": 0.4855522366518303, "gpt-3.5-turbo_response": "```python\nclass Solution:\n    def myAtoi(self, str: str) -> int:\n        import re\n        match = re.match(r'\\s*([+-]?\\d+)', str)\n        if match:\n            result = int(match.group(1))\n            if result < -2**31:\n                return -2**31\n            elif result > 2**31 - 1:\n                return 2**31 - 1\n            else:\n                return result\n", "gpt-3.5-turbo_prob": 0.5144477633481698}
{"id": "507", "llama3.1-8b-instruct_response": "def singleElement(nums):\n    low, high = 0, len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return nums[low]", "llama3.1-8b-instruct_prob": 0.46014814594777076, "gpt-3.5-turbo_response": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid % 2 == 1:\n                mid -= 1\n            if nums[mid] != nums[mid + 1]:\n                right = mid\n            else:\n                left = mid + 2\n        return nums", "gpt-3.5-turbo_prob": 0.5398518540522291}
{"id": "508", "llama3.1-8b-instruct_response": "```python\nimport bisect\nimport sys\n\nN, Q = map(int, input().split())\nS = []\nT = []\nX = []\nfor _ in range(N):\n    s, t, x = map(int, input().split())\n    S.append(s)\n    T.append(t)\n    X.append(x)\n\nD = list(map(int, input().split()))\n\nX.sort()\nS.sort()\nT.sort()\n\nit = iter(sorted(zip(S, T, X)))\nst, en, x", "llama3.1-8b-instruct_prob": 0.5126367786552781, "gpt-3.5-turbo_response": "```python\nimport bisect\n\nN, Q = map(int, input().split())\nroadworks = [list(map(int, input().split())) for _ in range(N)]\npeople = [int(input()) for _ in range(Q)]\n\nblocked_points = []\nfor s, t, x in roadworks:\n    blocked_points.append((s - 0.5, x, 1))\n    blocked_points.append((t - 0.5, x, -1))\nblocked_points.sort()\n\n", "gpt-3.5-turbo_prob": 0.48736322134472176}
{"id": "51", "llama3.1-8b-instruct_response": "def solve(n, k, d1, d2):\n    if k == 0:\n        return (n % 3 == 0)\n    if d1 == 0 and d2 == 0:\n        return (n - k) % 3 == 0\n    if d1 == 0:\n        return (k - d2) % 3 == 0 and (n - k) % 3 == 0\n    if d2 == 0", "llama3.1-8b-instruct_prob": 0.47986269618121374, "gpt-3.5-turbo_response": "```python\n# Function to check if it is possible to have no winner of tournament\ndef is_possible(n, k, d1, d2):\n    if (n - k) % 3 == 0 and (n - k) // 3 >= max(d1, d2) and (n - k) // 3 - min(d1, d2) >= 0 and (d1 + d2) % 3 == 0:\n        return \"yes", "gpt-3.5-turbo_prob": 0.5201373038187863}
{"id": "510", "llama3.1-8b-instruct_response": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[0, 0] for _ in range(4 * n)]\n\n    def update(self, node, l, r, i, c):\n        if l == r:\n            self.tree[node][0] = 1 if self.tree[node][1] != c else 0\n            self.tree[node][1] = c\n            return\n        mid = (l", "llama3.1-8b-instruct_prob": 0.4387703343990727, "gpt-3.5-turbo_response": "from collections import defaultdict\n\nN = int(input())\nS = input()\nQ = int(input())\n\nchar_count = defaultdict(int)\nfor char in S:\n    char_count[char] += 1\n\nfor _ in range(Q):\n    query = input().split()\n    if query[0] == '1':\n        i_q, c_q = int(query[1]), query[2]\n        if S[i_q-1] != c_q:\n            char_count[S[i_q-1]] -=", "gpt-3.5-turbo_prob": 0.5612296656009272}
{"id": "511", "llama3.1-8b-instruct_response": "N = int(input())\na = list(map(int, input().split()))\nb = [0] * N\nfor i in range(N):\n    for j in range(N):\n        if i != j:\n            b[i] ^= a[j]\nb = [i ^ (N // 2) for i in b]\nprint(*b)", "llama3.1-8b-instruct_prob": 0.48736322769776685, "gpt-3.5-turbo_response": "n, *a = map(int, open(0).read().split())\nx = 0\nfor i in a:\n  x ^= i\nprint(*[x^i for i in a])", "gpt-3.5-turbo_prob": 0.5126367723022331}
{"id": "513", "llama3.1-8b-instruct_response": "```python\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        self.n = 0\n        self.a = []\n        self.g = [[] for _ in range(200005)]\n        self.d = [0] * 200005\n        self.f = [0] * 200005\n        self.dp = [0] * 200005\n\n    def dfs(self, u: int, fa: int) -> None:\n", "llama3.1-8b-instruct_prob": 0.43201140769604046, "gpt-3.5-turbo_response": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p):\n    global ans\n    i = bisect_left(dp, a[v])\n    tmp = dp[i]\n    dp[i] = a[v]\n    ans[v] = bisect_left(dp, inf)\n    for u in g[v]:\n        if u == p:\n            continue\n        dfs(u, v)\n    dp[i] = tmp\n\nn = int(input())\na = list", "gpt-3.5-turbo_prob": 0.5679885923039596}
{"id": "514", "llama3.1-8b-instruct_response": "n1 = int(input())\nn2 = int(input())\n\nif n1 > n2:\n    print(n1 - n2)\nelse:\n    print(n1 + n2)", "llama3.1-8b-instruct_prob": 0.4079356651170623, "gpt-3.5-turbo_response": "n1 = int(input())\nn2 = int(input())\nprint(n1 - n2 if n1 > n2 else n1 + n2)", "gpt-3.5-turbo_prob": 0.5920643348829376}
{"id": "516", "llama3.1-8b-instruct_response": "def merge_sort(arr, k):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid], k)\n    right, right_inv = merge_sort(arr[mid:], k)\n\n    merged, merged_inv = merge(left, right, k)\n\n    return merged, left_inv + right_inv + merged_inv\n\n\ndef merge(left, right, k):\n    merged = []\n    i", "llama3.1-8b-instruct_prob": 0.5739846629008183, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    inversions = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            inversions += sum(1 for x in A[i::N] for y in A[j::N] if x > y)\n    print(inversions)\n```", "gpt-3.5-turbo_prob": 0.42601533709918166}
{"id": "518", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print((n + 1) // 2)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.6214084655024188, "gpt-3.5-turbo_response": "```python\ndef chef_ways_to_reach_next_floor(T, cases):\n    results = []\n    for case in cases:\n        if case % 2 == 0:\n            results.append((case//2)+1)\n        else:\n            results.append((case//2)+1)\n    return results\n```", "gpt-3.5-turbo_prob": 0.3785915344975812}
{"id": "52", "llama3.1-8b-instruct_response": "def min_time(n, a):\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans = (ans + a[i] * a[n - i - 1]) % 1000000007\n    return ans", "llama3.1-8b-instruct_prob": 0.4269161076855589, "gpt-3.5-turbo_response": "```python\nn = int(input())\na = [int(input()) for _ in range(n)]\na.sort()\nresult = sum(a[i] * a[n-1-i] for i in range(n)) % 10007\nprint(result)\n```", "gpt-3.5-turbo_prob": 0.5730838923144412}
{"id": "520", "llama3.1-8b-instruct_response": "```python\ndef ship_class_description():\n    ship_classes = {\n        'B': 'BattleShip',\n        'b': 'BattleShip',\n        'C': 'Cruiser',\n        'c': 'Cruiser',\n        'D': 'Destroyer',\n        'd': 'Destroyer',\n        'F': 'Frigate',\n        'f': 'Frigate'\n    }\n\n    t = int(input())\n    for _ in range(t):\n        ship_id =", "llama3.1-8b-instruct_prob": 0.5811241962137674, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    id = input().upper()\n    if id == 'B':\n        print('BattleShip')\n    elif id == 'C':\n        print('Cruiser')\n    elif id == 'D':\n        print('Destroyer')\n    elif id == 'F':\n        print('Frigate')", "gpt-3.5-turbo_prob": 0.4188758037862325}
{"id": "521", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ndef solve():\n    n = int(input())\n    x = list(map(int, input().split()))\n    p, q = map(float, input().split())\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dx = x[j] - x[i]\n            dy = q - p\n            if dx == 0:\n                continue\n            angle = 2 * math.atan(abs(dy", "llama3.1-8b-instruct_prob": 0.3551118532176877, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    cameras = list(map(int, input().split()))\n    P, Q = map(int, input().split())\n    cameras.sort()\n    angles = [math.atan2(Q, cameras[i]-P) - math.atan2(Q, cameras[i+1]-P) for i in range(0, n, 2)]\n    print(max(angles))\n```", "gpt-3.5-turbo_prob": 0.6448881467823123}
{"id": "522", "llama3.1-8b-instruct_response": "def count_triplets(n):\n    return sum(1 for x in range(1, n) for y in range(1, n) if x * y + n - x - y <= n)\n\nn = int(input())\nprint(count_triplets(n))", "llama3.1-8b-instruct_prob": 0.38814719325306396, "gpt-3.5-turbo_response": "```python\ndef count_triplets(n):\n    count = 0\n    for x in range(1, int(n**0.5) + 1):\n        if n % x == 0:\n            yz = n // x\n            if yz > x:\n                count += 2\n            elif yz == x:\n                count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.611852806746936}
{"id": "524", "llama3.1-8b-instruct_response": "s = input()\nn = len(s)\npos = [0] * 26\nfor i in range(n):\n    pos[ord(s[i]) - ord('a')] = i + 1\npre = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pre[i] = pre[i - 1] + (pos[i % 26] % 2 == 0)\nq = int(input())\nfor _ in", "llama3.1-8b-instruct_prob": 0.5144477702339281, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\nS = input()\nQ = int(input())\ncount = Counter(S)\nfor _ in range(Q):\n    X, Y = map(int, input().split())\n    total = sum(1 for c in count.values() if c % 2 == 0 and X <= c <= Y)\n    print(total)\n```", "gpt-3.5-turbo_prob": 0.48555222976607193}
{"id": "525", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(a * ((c - b) // a) + b)", "llama3.1-8b-instruct_prob": 0.48135162236626866, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    print((c - b) // a * a + b)\n```", "gpt-3.5-turbo_prob": 0.5186483776337314}
{"id": "526", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    i = 0\n    while i < n:\n        count = 1\n        while i + 1 < n and s[i] == s[i+1]:\n            i += 1\n            count += 1\n        ans += len(s[i].to_bytes(1, 'big')) + len(count.to_bytes(4, 'big'))\n        i += 1\n", "llama3.1-8b-instruct_prob": 0.6490933876696364, "gpt-3.5-turbo_response": "```python\nT = 1\ninputs = ['aaabb']\n```", "gpt-3.5-turbo_prob": 0.3509066123303636}
{"id": "528", "llama3.1-8b-instruct_response": "def solve():\n    n, l = map(int, input().split())\n    if n == 1:\n        print(l)\n    else:\n        print(2 * (n - 1) + min(n, (l + 1) // 2))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.3507741891987233, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    N, L = map(int, input().split())\n    print((L-1)//N + L)\n```", "gpt-3.5-turbo_prob": 0.6492258108012767}
{"id": "529", "llama3.1-8b-instruct_response": "from fractions import Fraction\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print('1/1')\n    else:\n        numerator = n * (n - 1) + 1\n        denominator = n * n\n        print(Fraction(numerator, denominator))", "llama3.1-8b-instruct_prob": 0.48475495046586414, "gpt-3.5-turbo_response": "```python\nimport math\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef calculate_probability(n):\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if gcd(a, b) == b:\n                count += 1\n    total_pairs = n * n\n    common_divisor_probability = count / total", "gpt-3.5-turbo_prob": 0.5152450495341359}
{"id": "53", "llama3.1-8b-instruct_response": "def solve():\n    n, s = map(str, input().split())\n    n = int(n)\n    ans1 = []\n    ans2 = []\n    i = 1\n    j = n\n    for c in s:\n        if c == '<':\n            ans1.append(i)\n            ans2.append(i)\n            i += 1\n        else:\n            ans1.append(j)\n            ans2.append(j)\n            j -= 1\n    ans1 += list(range(", "llama3.1-8b-instruct_prob": 0.5734159589371317, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, s = input().split()\n    n = int(n)\n    min_seq = list(range(1, n+1))\n    max_seq = list(range(1, n+1))\n    if s[0] == '>':\n        min_seq = min_seq[::-1]\n    if s[-1] == '>':\n        max_seq = max_seq[::-1]\n    print(*min_seq)\n    print(*", "gpt-3.5-turbo_prob": 0.42658404106286824}
{"id": "532", "llama3.1-8b-instruct_response": "def binary_sequences(N):\n    MOD = 15746\n    if N % 2 == 0:\n        return 0\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n    return dp[N]", "llama3.1-8b-instruct_prob": 0.4895565429177091, "gpt-3.5-turbo_response": "def count_binary_sequences(N):\n    a, b = 1, 2\n    for _ in range(N - 1):\n        a, b = b, (a + b) % 15746\n    return a", "gpt-3.5-turbo_prob": 0.5104434570822909}
{"id": "533", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    k, n = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    first_occurrence = -1\n    last_occurrence = -1\n\n    for i in range(n):\n        if arr[i] == k:\n            if first_occurrence == -1:\n                first_occurrence = i + 1\n            last_occurrence = i + 1\n\n    if first", "llama3.1-8b-instruct_prob": 0.39723991590792085, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    k, n = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k in arr:\n        first = arr.index(k) + 1\n        last = n - arr[::-1].index(k)\n        print(last - first)\n    else:\n        print(0)", "gpt-3.5-turbo_prob": 0.602760084092079}
{"id": "534", "llama3.1-8b-instruct_response": "from collections import defaultdict\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    g = defaultdict(set)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        g[u].add(v)\n        g[v].add(u)\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, len(g[i]))\n    print(n - ans)\n\nt = int", "llama3.1-8b-instruct_prob": 0.40056724636806035, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    n, m = map(int, input().split())\n    endpoints = defaultdict(int)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        endpoints[u] += 1\n        endpoints[v] += 1\n    print(min(endpoints.values()))\n```", "gpt-3.5-turbo_prob": 0.5994327536319396}
{"id": "536", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(min(k // n, k % n + 1))", "llama3.1-8b-instruct_prob": 0.5522124842146385, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    x = (k // n) + (k % n > 0)\n    print(x)\n```", "gpt-3.5-turbo_prob": 0.44778751578536147}
{"id": "537", "llama3.1-8b-instruct_response": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if abs(a[i] - a[j]) >= k:\n            ans += 1\n\nprint(ans)", "llama3.1-8b-instruct_prob": 0.4642425807516977, "gpt-3.5-turbo_response": "from itertools import combinations\nN, K = map(int, input().split())\nsequence = list(map(int, input().split()))\ncount = 0\nfor pair in combinations(sequence, 2):\n    if abs(pair[0] - pair[1]) >= K:\n        count += 1\nprint(count)", "gpt-3.5-turbo_prob": 0.5357574192483023}
{"id": "538", "llama3.1-8b-instruct_response": "def check_guess(S, SG, FG, D, T):\n    distance = (D - 1) * 50\n    speed_S = S\n    speed_FG = FG\n    speed_SG = SG\n\n    speed_other = speed_S + (distance / T) * 3.6\n    diff_SG = abs(speed_other - speed_SG)\n    diff_FG = abs(speed_other - speed_FG)\n\n    if diff_SG < diff_FG:\n", "llama3.1-8b-instruct_prob": 0.4567420581889004, "gpt-3.5-turbo_response": "```python\ndef compare_guess(S, SG, FG, D, T):\n    distance = D * 50\n    speed_difference = (distance / T) * 3.6\n    sebi_diff = abs(SG - (S + speed_difference))\n    father_diff = abs(FG - (S + speed_difference))\n    if sebi_diff < father_diff:\n        return \"SEBI\"\n    elif father_diff < sebi_diff:\n        return \"FATHER\"\n    else", "gpt-3.5-turbo_prob": 0.5432579418110997}
{"id": "539", "llama3.1-8b-instruct_response": "def min_moves(N):\n    return 4 * N - 4\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(min_moves(N))", "llama3.1-8b-instruct_prob": 0.54620087753931, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(4*n)", "gpt-3.5-turbo_prob": 0.45379912246069}
{"id": "54", "llama3.1-8b-instruct_response": "```python\nfrom collections import Counter\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    c = Counter(s)\n    while 2048 in c and c[2048] > 0:\n        c[2048] -= 1\n        for i in range(29, -1, -1):\n            if 2**i in c and c[2**i] > ", "llama3.1-8b-instruct_prob": 0.43877033439907276, "gpt-3.5-turbo_response": "```python\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if 2048 in s or sum(x for x in s if x < 2048) >= 2048:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.5612296656009272}
{"id": "540", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] == m:\n            ans += 1\n            i += 1\n        elif a[i] > m:\n            break\n        else:\n            j = i + 1\n            while j < n and a[j] ==", "llama3.1-8b-instruct_prob": 0.34757036710606043, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    mex = 1\n    for i in range(n):\n        if a[i] <= mex:\n            mex += 1\n        else:\n            break\n    print(n if mex > m else -1)\n```", "gpt-3.5-turbo_prob": 0.6524296328939396}
{"id": "541", "llama3.1-8b-instruct_response": "from collections import defaultdict\nfrom itertools import groupby\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [x for _, x in groupby(a)]\n    d = defaultdict(int)\n    for x in a:\n        d[x] += 1\n    ans = 0\n    for x in d.values():\n        ans = max(ans, (x + 1) // 2)\n    print(ans - 1)\n\n", "llama3.1-8b-instruct_prob": 0.5648492577274765, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    color_indices = defaultdict(list)\n    for i, color in enumerate(arr):\n        color_indices[color].append(i)\n    max_height = 0\n    for indices in color_indices.values():\n        for i in range(len(indices)):\n            for j in range(i+1, len(indices)):\n                start = indices[i]\n                end", "gpt-3.5-turbo_prob": 0.4351507422725235}
{"id": "542", "llama3.1-8b-instruct_response": "def count_squares(grid):\n    n, m = len(grid), len(grid[0])\n    count = 0\n    for i in range(n - 3):\n        for j in range(m - 3):\n            square = [grid[i+k][j:j+4] for k in range(4)]\n            if len(set(''.join(square))) == 1:\n                count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.6124539392310147, "gpt-3.5-turbo_response": "```python\ndef count_squares(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N, M = map(int, cases[i].split())\n        garden = [list(row) for row in cases[i+1:i+1+N]]\n        count = 0\n        for r in range(N-1):\n            for c in range(M-1):\n                if garden[r][c] == garden[r][c+1", "gpt-3.5-turbo_prob": 0.3875460607689854}
{"id": "543", "llama3.1-8b-instruct_response": "def game_of_truth_and_dare():\n    t = int(input())\n    for _ in range(t):\n        tr = int(input())\n        tr_tasks = set(map(int, input().split()))\n        dr = int(input())\n        dr_tasks = set(map(int, input().split()))\n        ts = int(input())\n        ts_tasks = set(map(int, input().split()))\n        ds = int(input())\n        ds_tasks = set(map(int, input().split()))\n        if tr_tasks.issub", "llama3.1-8b-instruct_prob": 0.4671002012305973, "gpt-3.5-turbo_response": "def ram_wins_game(truth_tasks_r, dare_tasks_r, truth_tasks_s, dare_tasks_s):\n    ram_tasks = set(truth_tasks_r + dare_tasks_r)\n    shyam_tasks = set(truth_tasks_s + dare_tasks_s)\n    if shyam_tasks.issubset(ram_tasks):\n        return \"yes\"\n    else:\n        return \"no\"\n\nt = int(input())\nfor _ in range(t):\n    t_r = int(input())\n    truth_tasks_r =", "gpt-3.5-turbo_prob": 0.5328997987694026}
{"id": "544", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = ''\n    for i in range(0, n, 4):\n        first = int(s[i])\n        second = int(s[i+1])\n        third = int(s[i+2])\n        fourth = int(s[i+3])\n        if first == 0:\n            if second == 0:\n                if third == 0:\n                    if fourth == 0", "llama3.1-8b-instruct_prob": 0.39082160061332366, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    for i in range(0, n, 4):\n        code = s[i:i+4]\n        binary = int(code, 2)\n        if binary < 8:\n            print(chr(97 + binary), end='')\n        else:\n            print(chr(105 + binary), end='')\n    print()", "gpt-3.5-turbo_prob": 0.6091783993866763}
{"id": "545", "llama3.1-8b-instruct_response": "def chef_dish_of_life(test_cases):\n    for test_case in test_cases:\n        N, K = map(int, test_case[0].split())\n        islands = [list(map(int, island.split()[1:])) for island in test_case[1:]]\n\n        ingredients = set()\n        for island in islands:\n            ingredients.update(island)\n\n        if len(ingredients) < K:\n            print(\"sad\")\n        elif len(ingredients) == K:\n            print(\"all\")\n", "llama3.1-8b-instruct_prob": 0.4727849119363277, "gpt-3.5-turbo_response": "```python\ndef dish_of_life(T, cases):\n    result = []\n    for case in cases:\n        N, K = case[0]\n        ingredients = set()\n        for island in case[1:]:\n            ingredients.update(island[1:])\n        if len(ingredients) < K:\n            result.append(\"sad\")\n        elif len(ingredients) == K:\n            result.append(\"all\")\n        else:\n            result.append(\"some\")\n    return result\n```", "gpt-3.5-turbo_prob": 0.5272150880636723}
{"id": "546", "llama3.1-8b-instruct_response": "def min_bounces(D):\n    count = 0\n    while D > 1:\n        D >>= 1\n        count += 1\n    return count\n\nt = int(input())\nfor _ in range(t):\n    D = int(input())\n    print(min_bounces(D))", "llama3.1-8b-instruct_prob": 0.5831098147541103, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    D = int(input())\n    bounces = 0\n    while D > 0:\n        power = int(math.log2(D))\n        D -= 2**power\n        bounces += 1\n    print(bounces)\n```", "gpt-3.5-turbo_prob": 0.4168901852458897}
{"id": "548", "llama3.1-8b-instruct_response": "def solve(n):\n    return '*' * (n % 2) + '***' * (n // 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(''.join(solve(n) for _ in range(n)))", "llama3.1-8b-instruct_prob": 0.40768208395617367, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        print('*' * i)\n```", "gpt-3.5-turbo_prob": 0.5923179160438263}
{"id": "549", "llama3.1-8b-instruct_response": "n = int(input())\narr = list(map(int, input().split()))\ncuts = 0\nfor i in range(1, n):\n    for j in range(i):\n        if arr[i] < arr[j]:\n            cuts += 1\n            arr[j], arr[i] = arr[i], arr[j]\n            break\nprint(cuts)", "llama3.1-8b-instruct_prob": 0.37859153347349295, "gpt-3.5-turbo_response": "```python\nn = int(input())\nheights = list(map(int, input().split()))\nmax_height = 0\ncuts = 0\nfor height in heights:\n    if height > max_height:\n        max_height = height\n    else:\n        cuts += max_height - height\nprint(cuts)\n```", "gpt-3.5-turbo_prob": 0.621408466526507}
{"id": "55", "llama3.1-8b-instruct_response": "def max_sticks(n):\n    return (n + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(max_sticks(n))", "llama3.1-8b-instruct_prob": 0.49999999690573627, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n // 2 + 1)\n```", "gpt-3.5-turbo_prob": 0.5000000030942637}
{"id": "550", "llama3.1-8b-instruct_response": "def solve():\n    a, b = map(int, input().split())\n    a_bits = len(bin(a)[2:])\n    b_bits = len(bin(b)[2:])\n    max_ops = max(a_bits, b_bits)\n    b = (b >> (max_ops - b_bits)) << (max_ops - b_bits)\n    ops = 0\n    while True:\n        ops += 1\n        if bin(a)[2:].zfill(max_ops) == bin(b)[2", "llama3.1-8b-instruct_prob": 0.4999999979518235, "gpt-3.5-turbo_response": "```python\ndef num_operations_and_result(T, test_cases):\n    results = []\n    for case in test_cases:\n        A, B = case\n        max_val = A ^ B\n        num_operations = 0\n        while B > 0:\n            B = (B >> 1) | ((B & 1) << (B.bit_length() - 1))\n            max_val = max(max_val, A ^ B)\n            num_operations += 1\n        results", "gpt-3.5-turbo_prob": 0.5000000020481765}
{"id": "551", "llama3.1-8b-instruct_response": "def find_subsequences(S):\n    n = len(S)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if S[i:j] == S[j:k]:\n                    return \"yes\"\n    return \"no\"\n\nt = int(input())\nfor _ in range(t):\n    S = input()\n    print(find_subsequences(S))", "llama3.1-8b-instruct_prob": 0.3948059669723138, "gpt-3.5-turbo_response": "```python\ndef has_equal_subsequence(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return \"yes\"\n        seen.add(char)\n    return \"no\"\n\nT = int(input())\nfor _ in range(T):\n    S = input()\n    print(has_equal_subsequence(S))\n```", "gpt-3.5-turbo_prob": 0.6051940330276862}
{"id": "552", "llama3.1-8b-instruct_response": "def max_difference(weights, k):\n    weights.sort(reverse=True)\n    chef_weight = sum(weights[k:])\n    son_weight = sum(weights[:k])\n    return chef_weight - son_weight\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    weights = list(map(int, input().split()))\n    print(max_difference(weights, k))", "llama3.1-8b-instruct_prob": 0.5259399364804176, "gpt-3.5-turbo_response": "```python\ndef max_weight_difference(T, test_cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        weights = list(map(int, test_cases[i][1].split()))\n        weights.sort()\n        chef_weight = sum(weights[K:])\n        son_weight = sum(weights[:K])\n        results.append(str(chef_weight - son_weight))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4740600635195825}
{"id": "554", "llama3.1-8b-instruct_response": "def get_digits(n, k):\n    result = pow(int(n), int(n))\n    first_k = str(result)[:k]\n    last_k = str(result)[-k:]\n    return first_k + ' ' + last_k\n\nt = int(input())\nfor _ in range(t):\n    n, k = input().split()\n    print(get_digits(n, k))", "llama3.1-8b-instruct_prob": 0.6641221733309054, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(pow(n, n, 10**k), pow(n, n, 10**k))\n```", "gpt-3.5-turbo_prob": 0.3358778266690946}
{"id": "555", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(2, n):\n        if nums[i] == nums[i-1] + nums[i-2]:\n            dp[i] = dp[i-1] + 1\n    print(max(dp))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    solve()", "llama3.1-8b-instruct_prob": 0.5111924450694443, "gpt-3.5-turbo_response": "```python\ndef max_students(arr):\n    n = len(arr)\n    max_students = 2\n    current_students = 2\n    for i in range(2, n):\n        if arr[i] == arr[i-1] + arr[i-2]:\n            current_students += 1\n            max_students = max(max_students, current_students)\n        else:\n            current_students = 2\n    return max_students\n```", "gpt-3.5-turbo_prob": 0.4888075549305557}
{"id": "557", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    scores = [10] * n\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        for x in range(i-1, j-1):\n            scores[x] *= k\n    print(math.floor(sum(max(scores)) / n))", "llama3.1-8b-instruct_prob": 0.44410528224963053, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    max_scores = []\n    for _ in range(M):\n        i, j, k = map(int, input().split())\n        max_scores.append(k * (j - i + 1))\n    mean_max_score = math.floor(sum(max_scores) / N)\n    print(mean_max_score)\n```", "gpt-3.5-turbo_prob": 0.5558947177503695}
{"id": "56", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    ans = k % n\n    print(0 if ans == 0 else 2)\n    for i in range(n):\n        row = ''\n        for j in range(n):\n            if (i + j) % n < ans:\n                row += '1'\n            else:\n                row += '0'\n        print(row)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.40607148133401805, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(0)\n    for i in range(n):\n        print('1' * (k // n) + '0' * (n - k // n))\n```", "gpt-3.5-turbo_prob": 0.593928518665982}
{"id": "560", "llama3.1-8b-instruct_response": "def competition_result(n, a, b):\n    a.sort()\n    b.sort()\n    a_sum = sum(a[:-1])\n    b_sum = sum(b[:-1])\n    if a_sum < b_sum:\n        return \"Alice\"\n    elif a_sum > b_sum:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b =", "llama3.1-8b-instruct_prob": 0.5216359021501472, "gpt-3.5-turbo_response": "```python\ndef judge_competition(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        B = list(map(int, test_cases[i+2].split()))\n        min_A = min(A)\n        min_B = min(B)\n        if min_A < min_B:\n            results.append('Alice')\n        elif min", "gpt-3.5-turbo_prob": 0.4783640978498528}
{"id": "561", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in a:\n        if i > k:\n            return \"NO\"\n        k -= i\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5734159599207136, "gpt-3.5-turbo_response": "```python\ndef can_spend_all_money(T, cases):\n    results = []\n    for i in range(T):\n        N, K = map(int, cases[i*2].split())\n        demands = list(map(int, cases[i*2+1].split()))\n        if sum(demands) <= K:\n            results.append('YES')\n        else:\n            results.append('NO')\n    return results\n```", "gpt-3.5-turbo_prob": 0.4265840400792864}
{"id": "563", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(sum(a[l-1:r]))\n```", "llama3.1-8b-instruct_prob": 0.5923166280308483, "gpt-3.5-turbo_response": "def total_coins(T, islands, donations, Q, trips):\n    result = []\n    for trip in trips:\n        start, end = trip\n        result.append(str(sum(donations[start-1:end])))\n    return result", "gpt-3.5-turbo_prob": 0.40768337196915166}
{"id": "564", "llama3.1-8b-instruct_response": "def min_rounds(test_cases):\n    for case in test_cases[2::3]:\n        n, k = map(int, case.split()[0].split(' '))\n        costs = list(map(int, case.split()[1].split(' ')))\n        rounds = 1\n        i = 0\n        while i < n - 1:\n            if costs[i + 1] - costs[i] >= k:\n                i += 1\n            else:\n                i += 2", "llama3.1-8b-instruct_prob": 0.38199485917274023, "gpt-3.5-turbo_response": "```python\ndef min_rounds(T, cases):\n    result = []\n    for case in cases:\n        N, K, *c = case\n        c.sort()\n        rounds = 0\n        for i in range(N-1):\n            if c[i+1] - c[i] >= K:\n                rounds += 1\n        result.append(str(rounds + 1))\n    return result\n```", "gpt-3.5-turbo_prob": 0.6180051408272598}
{"id": "566", "llama3.1-8b-instruct_response": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef solve(A, B):\n    for i in range(len(A)):\n        for j in range(len(B)):\n            s1 = A[:i+1]\n            s2 = B[:j+1]\n            if is_palindrome(s1 + s2):\n                return \"Yes\"\n    return \"No\"\n\nt = int(input())\nfor _ in range(t):\n    A = input()\n    B = input()\n    print", "llama3.1-8b-instruct_prob": 0.3972399147077468, "gpt-3.5-turbo_response": "```python\ndef is_palindromic_substring_possible(A, B):\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i:] + B[j:] == (A[i:] + B[j:])[::-1]:\n                return \"Yes\"\n    return \"No\"\n\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    print(is_palindromic_substring_possible(A, B))\n```", "gpt-3.5-turbo_prob": 0.6027600852922532}
{"id": "567", "llama3.1-8b-instruct_response": "def can_finish_painting():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        colors = list(map(int, input().split()))\n        for i in range(n - 2):\n            if colors[i] != colors[i + 1] or colors[i + 1] != colors[i + 2]:\n                print(\"Yes\")\n                break\n        else:\n            if n >= 3 and colors[0] == colors[1] ==", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef can_finish_painting(T, cases):\n    results = []\n    for i in range(0, len(cases), 2):\n        N = int(cases[i])\n        colors = list(map(int, cases[i+1].split()))\n        if colors[0] == colors[-1] or colors[0] == colors[1] or colors[-1] == colors[-2]:\n            results.append(\"No\")\n        else:\n            results.append(\"Yes\")\n   ", "gpt-3.5-turbo_prob": 0.5}
{"id": "568", "llama3.1-8b-instruct_response": "from collections import defaultdict\nimport sys\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            cnt[u] += cnt[v]\n            if cnt[v] % 3 != 0:\n                return False\n            cnt[u] //= 3\n\ndef solve():\n    global adj, cnt\n    adj = defaultdict(list)\n    cnt = [0] * (n + 1)\n    for i in range(n -", "llama3.1-8b-instruct_prob": 0.4509394190003509, "gpt-3.5-turbo_response": "```python\ndef solve_tree_decomposition(T, test_cases):\n    result = []\n    for case in test_cases:\n        N = int(case[0])\n        if N % 3 == 1:\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n            for i in range(2, N+1, 3):\n                print(1, i, i+1, i+2)\n    return result\n```", "gpt-3.5-turbo_prob": 0.549060580999649}
{"id": "569", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    i = 1\n    while n >= i * (i + 1) // 2:\n        n -= i * (i + 1) // 2\n        i += 1\n    return str(n - 1)\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5629724889069959, "gpt-3.5-turbo_response": "```python\ndef find_nth_element(n):\n    x = int((2 * n) ** 0.5)\n    if x * (x + 1) <= 2 * n:\n        x += 1\n    print(n - (x * (x - 1)) // 2)\n```", "gpt-3.5-turbo_prob": 0.43702751109300403}
{"id": "57", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5313297374611088, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.4686702625388912}
{"id": "571", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef reduce_recipe(ingredients):\n    result = []\n    gcd_val = ingredients[0]\n    for ingredient in ingredients:\n        gcd_val = gcd(gcd_val, ingredient)\n    for ingredient in ingredients:\n        result.append(ingredient // gcd_val)\n    return ' '.join(map(str, result))\n\nt = int(input())\nfor _ in range(t):\n    n = int", "llama3.1-8b-instruct_prob": 0.560072749030079, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    ingredients = list(map(int, input().split()))\n    total = sum(ingredients[1:])\n    reduced_recipe = [ingredient * ingredients[1] // total for ingredient in ingredients[1:]]\n    print(*reduced_recipe)", "gpt-3.5-turbo_prob": 0.4399272509699209}
{"id": "572", "llama3.1-8b-instruct_response": "def min_difference():\n    t = int(input())\n    for _ in range(t):\n        n, m, k = map(int, input().split())\n        diff = abs(n - m)\n        if diff <= k:\n            print(0)\n        else:\n            print(diff - k)\n\nmin_difference()", "llama3.1-8b-instruct_prob": 0.4434407922470568, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, M, K = map(int, input().split())\n    diff = abs(N - M) - K\n    if diff < 0:\n        diff = 0\n    print(diff)\n```", "gpt-3.5-turbo_prob": 0.5565592077529432}
{"id": "573", "llama3.1-8b-instruct_response": "def min_hours(n, m):\n    return max(n - 2, m)\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(min_hours(n, m))", "llama3.1-8b-instruct_prob": 0.52163588992202, "gpt-3.5-turbo_response": "```python\ndef min_hours_to_teach_topics(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, m = map(int, case.split())\n        if n == 2:\n            results.append(1)\n        else:\n            results.append(2 * m)\n    return results\n```", "gpt-3.5-turbo_prob": 0.47836411007797996}
{"id": "574", "llama3.1-8b-instruct_response": "def max_sub_array(nums):\n    max_sum = float('-inf')\n    max_start = max_end = 0\n    current_sum = 0\n    current_start = 0\n\n    for i, num in enumerate(nums):\n        if current_sum <= 0:\n            current_sum = num\n            current_start = i\n        else:\n            current_sum += num\n\n        if current_sum > max_sum or (current_sum == max_sum and i - current_start > max_end - max", "llama3.1-8b-instruct_prob": 0.539851847284369, "gpt-3.5-turbo_response": "```python\ndef max_subarray(arr):\n    max_sum = 0\n    max_length = 0\n    start = 0\n    end = 0\n    current_sum = 0\n    current_length = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            current_sum += arr[i]\n            current_length += 1\n            if current_sum > max_sum or (current_sum == max_sum and current_length > max_length", "gpt-3.5-turbo_prob": 0.4601481527156309}
{"id": "575", "llama3.1-8b-instruct_response": "def solve(s):\n    n = len(s)\n    max_val = 1\n    min_val = 1\n    for i in range(n):\n        if s[i] == '<':\n            max_val = max(max_val, min_val + 1)\n            min_val += 1\n        elif s[i] == '=':\n            max_val = max(max_val, min_val)\n            min_val += 1\n        else:\n            max_val += 1\n    return max(max", "llama3.1-8b-instruct_prob": 0.546333299977035, "gpt-3.5-turbo_response": "```python\ndef min_possible_P(T, sequences):\n    result = []\n    for s in sequences:\n        count = 1\n        for i in range(len(s)):\n            if s[i] == '=':\n                count = max(count, 2)\n        result.append(count)\n    return result\n```", "gpt-3.5-turbo_prob": 0.45366670002296516}
{"id": "576", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    for _ in range(n):\n        s = input()\n        ans = 0\n        for i in range(len(s)):\n            t = s[:i] + 'a' + s[i+1:]\n            ans += 2 ** t.count('a')\n        print(ans)\n\nsolve()", "llama3.1-8b-instruct_prob": 0.4798626958242068, "gpt-3.5-turbo_response": "```python\nN = int(input())\nwords = [input() for _ in range(N)]\n\ndef count_subsequences(word):\n    count = 1\n    for char in word:\n        if char == 'a':\n            count *= 2\n    print(count)\n\nfor word in words:\n    count_subsequences(word)\n```", "gpt-3.5-turbo_prob": 0.5201373041757932}
{"id": "577", "llama3.1-8b-instruct_response": "def can_read(word, known_letters):\n    return all(letter in known_letters for letter in word)\n\nknown_letters = input()\nn = int(input())\nfor _ in range(n):\n    word = input()\n    print('Yes' if can_read(word, known_letters) else 'No')", "llama3.1-8b-instruct_prob": 0.5157761120431554, "gpt-3.5-turbo_response": "s, n = input(), int(input())\nfor _ in range(n):\n    w = input()\n    print(\"Yes\" if all(c in s for c in w) else \"No\")", "gpt-3.5-turbo_prob": 0.4842238879568447}
{"id": "578", "llama3.1-8b-instruct_response": "def solve(N, B):\n    ans = 0\n    i = 1\n    while N >= i * B:\n        ans = max(ans, i * (N // (i * B)))\n        i += 1\n    return ans\n\nT = int(input())\nfor _ in range(T):\n    N, B = map(int, input().split())\n    print(solve(N, B))", "llama3.1-8b-instruct_prob": 0.5245649884608242, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n, b = map(int, input().split())\n    if n // 2 >= b:\n        print(n // 2)\n    else:\n        print(n % (n // 2 + 1) + (n // 2) * (n // 2))", "gpt-3.5-turbo_prob": 0.4754350115391757}
{"id": "58", "llama3.1-8b-instruct_response": "def min_cost(n, m, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for x in range(1, min(i, j) + 1):\n                for y in range(1, min(i - x, j) + 1):\n                    dp[i][j] =", "llama3.1-8b-instruct_prob": 0.31501676427669495, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    if k == 1:\n        print(0)\n    else:\n        print((n*m-1) if k == n*m else (k-1))\n```", "gpt-3.5-turbo_prob": 0.684983235723305}
{"id": "581", "llama3.1-8b-instruct_response": "def humpy_party():\n    t = int(input())\n    for _ in range(t):\n        k, l, e = map(int, input().split())\n        ages = list(map(int, input().split()))\n        total_age = sum(ages) + e\n        if l % total_age == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nhumpy_party()", "llama3.1-8b-instruct_prob": 0.4880717960539461, "gpt-3.5-turbo_response": "def serve_sugarcane(N, test_cases):\n    results = []\n    for case in test_cases:\n        K, L, E = case[0], case[1], case[2]\n        ages = case[3:]\n        total_age = sum(ages) + E\n        if L % total_age == 0:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results", "gpt-3.5-turbo_prob": 0.5119282039460539}
{"id": "583", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        if a[0] >= 0:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        s = sum(a)\n        for i in range(n):\n            s -= (i + 1)\n            if s <= 0:\n                print('YES')\n                break\n        else", "llama3.1-8b-instruct_prob": 0.5148963656238924, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    print(\"YES\" if s == 0 else \"NO\")", "gpt-3.5-turbo_prob": 0.4851036343761076}
{"id": "584", "llama3.1-8b-instruct_response": "def max_circles(s):\n    n = len(s)\n    if n % 2 == 0 or s[0] == '0' or s[-1] == '0':\n        return '0'\n    side = int(s[0])\n    count = 0\n    i = 1\n    while i < n - 1:\n        if s[i] == '1':\n            side = int(s[i])\n            i += 1\n        else:\n            diameter", "llama3.1-8b-instruct_prob": 0.4554108181098719, "gpt-3.5-turbo_response": "```python\ndef max_circles_in_square(N, strings):\n    result = []\n    for s in strings:\n        ones_count = s.count('1')\n        result.append(ones_count - 1)\n    return result\n```", "gpt-3.5-turbo_prob": 0.5445891818901281}
{"id": "585", "llama3.1-8b-instruct_response": "import math\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    ans = 0\n    for i in range(m):\n        if p[i] <= n:\n            ans += n // p[i]\n    print(n - ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5629775244589335, "gpt-3.5-turbo_response": "def max_sorcerers_killed(T, cases):\n    results = []\n    for case in cases:\n        N, M = case[0], case[1]\n        powers = case[2:]\n        max_power = max(powers)\n        max_kills = (N - 1) // M\n        results.append(min(max_kills, max_power))\n    return results", "gpt-3.5-turbo_prob": 0.43702247554106666}
{"id": "586", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\nfrom functools import cmp_to_key\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        n, r = map(int, input().split())\n        freq = defaultdict(int)\n        submissions = []\n        for _ in range(r):\n            name, score = input().split()\n            name = ''.join(sorted(name))\n            freq[name] = max(freq[name], int(score))\n        for _ in range(n - r):\n            name", "llama3.1-8b-instruct_prob": 0.5000000022224553, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\nT = int(input())\nfor _ in range(T):\n    N, R = map(int, input().split())\n    teams = defaultdict(int)\n    for _ in range(R):\n        team, points = input().split()\n        teams[team] += int(points)\n    for _ in range(N - R):\n        team, points = input().split()\n        teams[team] += int(points)\n    sorted_teams = sorted(teams.items(), key=lambda", "gpt-3.5-turbo_prob": 0.49999999777754467}
{"id": "587", "llama3.1-8b-instruct_response": "def find_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef solve", "llama3.1-8b-instruct_prob": 0.42316565121402283, "gpt-3.5-turbo_response": "```python\ndef find_boys_strength(N, girls_strength):\n    boys_strength = []\n    for strength in girls_strength:\n        boys_strength.append(int(strength) + 2)\n    return boys_strength\n```", "gpt-3.5-turbo_prob": 0.5768343487859772}
{"id": "588", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    g = 360 // n\n    ans = 0\n    for i in range(n - 1):\n        if a[i + 1] - a[i] >", "llama3.1-8b-instruct_prob": 0.5119282070485578, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    angles = list(map(int, input().split()))\n    angles.sort()\n    max_gap = max((angles[i+1] - angles[i]) % 360 for i in range(n-1))\n    print((360 - max_gap) % 360)\n```", "gpt-3.5-turbo_prob": 0.4880717929514422}
{"id": "589", "llama3.1-8b-instruct_response": "def solve(P):\n    n = len(P)\n    dp = [0] * n\n    max_jump = 1\n    for i in range(n):\n        if P[i] == '.':\n            max_jump = max(max_jump, dp[i] + 1)\n        dp[i + 1] = max_jump\n    return str(dp[-1] - 1)\n\nT = int(input())\nfor _ in range(T):\n    P = input()\n    print(solve(P))", "llama3.1-8b-instruct_prob": 0.5216358890784858, "gpt-3.5-turbo_response": "```python\ndef days_to_cross_passage(T, passages):\n    result = []\n    for passage in passages:\n        jump_length = 1\n        days = 0\n        for char in passage[1:]:\n            if char == '.':\n                jump_length += 1\n            else:\n                if jump_length > 1:\n                    days += 1\n                    jump_length = 1\n        result.append(str(days))\n    return result\n```", "gpt-3.5-turbo_prob": 0.47836411092151426}
{"id": "59", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = -1\n    min_val = sys.maxsize\n    for i in range(n):\n        if a[i] != -1:\n            if i > 0 and a[i - 1] == -1:\n                max_val = max(max_val, a[i])\n                min_val = min(min_val, a[i])\n            if i <", "llama3.1-8b-instruct_prob": 0.5402842799230689, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    missing = [x for x in a if x == -1]\n    a = [x for x in a if x != -1]\n    max_diff = 0\n    for i in range(1, len(a)):\n        max_diff = max(max_diff, abs(a[i] - a[i-1]))\n    if len", "gpt-3.5-turbo_prob": 0.459715720076931}
{"id": "590", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    n, x, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    x -= 1\n    for _ in range(m):\n        for i in range(1, n):\n            a[i] = (a[i] + a[i-1]) % MOD\n    return str((a[x] + x) % MOD)\n\nt = int(input())\nfor _", "llama3.1-8b-instruct_prob": 0.5432579465593641, "gpt-3.5-turbo_response": "```python\ndef find_element(N, x, M, A):\n    MOD = 10**9 + 7\n    for i in range(1, M+1):\n        for j in range(1, N):\n            A[j] = (A[j] + A[j-1]) % MOD\n    return A[x-1]\n```", "gpt-3.5-turbo_prob": 0.45674205344063595}
{"id": "591", "llama3.1-8b-instruct_response": "def find_aadhar(n):\n    return '3' + '7' * (n - 1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(find_aadhar(n))", "llama3.1-8b-instruct_prob": 0.46867026142766355, "gpt-3.5-turbo_response": "def find_jojo_aadhar_number(N):\n    return (N-1)*10 + 7", "gpt-3.5-turbo_prob": 0.5313297385723363}
{"id": "592", "llama3.1-8b-instruct_response": "```python\nimport re\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        n = int(input())\n        words = [input() for _ in range(n)]\n        words.sort(key=len, reverse=True)\n        for word in words:\n            s = re.sub(r'\\b' + re.escape(word) + r'\\b', '', s)\n        if s: print('Teddy')\n        else: print('Tracy')\n\nsolve", "llama3.1-8b-instruct_prob": 0.5357574254368298, "gpt-3.5-turbo_response": "def winner_of_game(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        S = test_cases[i]\n        N = int(test_cases[i+1])\n        dictionary = set(test_cases[i+2:i+2+N])\n        teddy_wins = False\n        for word in dictionary:\n            if word in S:\n                teddy_wins = not teddy_wins\n        if teddy_wins:\n            results", "gpt-3.5-turbo_prob": 0.4642425745631702}
{"id": "593", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    prices = list(map(int, input().split()))\n    s = input()\n    missing = set('abcdefghijklmnopqrstuvwxyz') - set(s)\n    cost = sum(prices[ord(c) - 97] for c in missing)\n    print(cost)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n```", "llama3.1-8b-instruct_prob": 0.531329744086313, "gpt-3.5-turbo_response": "def cheapest_pangram(T, tests):\n    results = []\n    for i in range(0, len(tests), 2):\n        prices = list(map(int, tests[i].split()))\n        text = tests[i+1]\n        missing_letters = [prices[ord(letter) - ord('a')] for letter in 'abcdefghijklmnopqrstuvwxyz' if letter not in text]\n        results.append(str(sum(missing_letters)))\n    return results", "gpt-3.5-turbo_prob": 0.46867025591368705}
{"id": "594", "llama3.1-8b-instruct_response": "n, x = map(int, input().split())\na = list(map(int, input().split()))\nmin_sum = float('inf')\nfor i in range(n):\n    for j in range(i, n):\n        sub_sum = sum(val / x for val in a[i:j+1])\n        min_sum = min(min_sum, sub_sum)\nprint(format(min_sum, \".10f\"))", "llama3.1-8b-instruct_prob": 0.486696839068704, "gpt-3.5-turbo_response": "```python\nn, x = map(int, input().split())\narr = list(map(int, input().split()))\nmin_sum = sum(arr)\nfor i in range(n):\n    for j in range(i, n):\n        new_sum = sum(arr[:i]) + sum([a//x for a in arr[i:j+1]]) + sum(arr[j+1:])\n        min_sum = min(min_sum, new_sum)\nprint(min_sum)\n```", "gpt-3.5-turbo_prob": 0.513303160931296}
{"id": "597", "llama3.1-8b-instruct_response": "import heapq\n\nfor _ in range(int(input())):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, h = map(int, input().split())\n        points.append((x, h, i))\n    points.sort()\n    max_heap = []\n    for i in range(n):\n        if i == 0:\n            heapq.heappush(max_heap, -points[i][1])\n        else:\n            heapq.heappush(max_heap, -max", "llama3.1-8b-instruct_prob": 0.47836410540753777, "gpt-3.5-turbo_response": "```python\ndef max_restaurant_area(T, cases):\n    results = []\n    for case in cases:\n        N = case[0]\n        points = case[1:]\n        max_area = 0\n        for i in range(N-1):\n            area = (points[i+1][0] - points[i][0]) * min(points[i][1], points[i+1][1])\n            max_area = max(max_area, area)\n        results.append(2 * max", "gpt-3.5-turbo_prob": 0.5216358945924623}
{"id": "598", "llama3.1-8b-instruct_response": "def stone_game(arr, k):\n    arr.sort()\n    for _ in range(k):\n        max_val = arr[-1]\n        for i in range(len(arr)):\n            arr[i] = max_val - arr[i]\n        arr.sort()\n    return ' '.join(map(str, arr))\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\nprint(stone_game(arr, k))", "llama3.1-8b-instruct_prob": 0.4434407922470568, "gpt-3.5-turbo_response": "```python\ndef stone_problem(N, K, A):\n    max_val = max(A)\n    for i in range(N):\n        A[i] = max_val - A[i]\n    return A\n```", "gpt-3.5-turbo_prob": 0.5565592077529433}
{"id": "599", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    m = max(w)\n    ans = 0\n    for i in range(n // 2):\n        if w[i] == m:\n            break\n        if w[(i + n // 2) % n] == m:\n            break\n        if w[(i + n // 2) % n] < w[i]:\n            ans += 1\n    print(ans", "llama3.1-8b-instruct_prob": 0.5104434495230179, "gpt-3.5-turbo_response": "```python\ndef count_unhappy_shifts(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        chocolates = list(map(int, case[1].split()))\n        max_sweetness = max(chocolates[:N//2])\n        unhappy_shifts = 0\n        for i in range(N//2):\n            if chocolates[i] == max_sweetness:\n                unhappy_shifts += 1\n        results.append", "gpt-3.5-turbo_prob": 0.489556550476982}
{"id": "6", "llama3.1-8b-instruct_response": "from collections import deque\n\ndef solve():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    indegree = [0] * (n + 1)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        indegree[v] += 1\n    queue = deque([i for i in range(1, n + 1)", "llama3.1-8b-instruct_prob": 0.41213627913146494, "gpt-3.5-turbo_response": "```python\n# Read input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    tracks = [list(map(int, input().split())) for _ in range(m)]\n    \n    # Output\n    print(n // 7 * 4)\n    for i in range(1, n + 1):\n        if i % 7 > 3:\n            print(i, end=' ')\n```", "gpt-3.5-turbo_prob": 0.587863720868535}
{"id": "60", "llama3.1-8b-instruct_response": "def solve():\n    a, b = map(int, input().split())\n    x = a & b\n    print(a ^ x + b ^ x)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5781524093979804, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(a ^ b)\n```", "gpt-3.5-turbo_prob": 0.4218475906020196}
{"id": "600", "llama3.1-8b-instruct_response": "def f(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % 10\n    return b\n\ndef solve():\n    n = int(input())\n    print(f(n))\n\nfor _ in range(int(input())):\n    solve()", "llama3.1-8b-instruct_prob": 0.4999999977775446, "gpt-3.5-turbo_response": "```python\ndef last_remaining_fibonacci_number(N):\n    if N == 1:\n        return 0\n    a, b = 0, 1\n    for _ in range(2, N + 2):\n        a, b = b, (a + b) % 10\n    return a\n```", "gpt-3.5-turbo_prob": 0.5000000022224553}
{"id": "601", "llama3.1-8b-instruct_response": "import heapq\nevents = []\nn = int(input())\nfor i in range(n):\n    s, d = map(int, input().split())\n    events.append((s, d, i))\nevents.sort()\nheap = []\nans = 0\nfor s, d, i in events:\n    while heap and heap[0] <= s - 1:\n        heapq.heappop(heap)\n    heapq.heappush(heap, s + d - 1)\n    ans = max(ans,", "llama3.1-8b-instruct_prob": 0.44778752764686436, "gpt-3.5-turbo_response": "```python\ndef max_events(N, events):\n    events.sort(key=lambda x: (x[0] + x[1], x[1]))\n    count = 0\n    end_time = 0\n    for event in events:\n        if event[0] >= end_time:\n            count += 1\n            end_time = event[0] + event[1] + 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.5522124723531356}
{"id": "602", "llama3.1-8b-instruct_response": "s = input().split()\nmin_len = min(len(word) for word in s)\nremixed = ' ' + min_len + ' '.join(word + ' ' + min_len + ' ' for word in s) + ' ' + min_len\nprint(remixed)", "llama3.1-8b-instruct_prob": 0.46014813332041826, "gpt-3.5-turbo_response": "```python\ndef remix_song(lyrics):\n    words = lyrics.split()\n    min_word = min(words, key=len)\n    remixed_lyrics = ' '.join([min_word] + words + [min_word])\n    print(remixed_lyrics)\n\nremix_song('Mai Hu Jiyaan')\n```", "gpt-3.5-turbo_prob": 0.5398518666795816}
{"id": "603", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print('a' * (k - 1) + 'b' * (100 - k + 1))\n```", "llama3.1-8b-instruct_prob": 0.5774215504199339, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    k = int(input())\n    print(''.join(chr(ord('a') + i) for i in range(k+1))[::-1])", "gpt-3.5-turbo_prob": 0.4225784495800661}
{"id": "604", "llama3.1-8b-instruct_response": "def is_stable(grid):\n    R, C = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    for r in range(R):\n        for c in range(C):\n            count = 0\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < R and 0 <= nc", "llama3.1-8b-instruct_prob": 0.5111924373310573, "gpt-3.5-turbo_response": "def is_stable_grid(T, test_cases):\n    result = []\n    for i in range(T):\n        R, C = map(int, test_cases[i][0].split())\n        grid = [list(map(int, row.split())) for row in test_cases[i][1:]]\n        stable = True\n        for r in range(R):\n            for c in range(C):\n                adj_count = sum(1 for dr, dc in [(1, 0), (-1, 0", "gpt-3.5-turbo_prob": 0.48880756266894265}
{"id": "605", "llama3.1-8b-instruct_response": "def is_safe(n, m, s):\n    for i in range(n):\n        for j in range(m):\n            x, y = i, j\n            for c in s:\n                if c == 'L' and y > 0: y -= 1\n                elif c == 'R' and y < m - 1: y += 1\n                elif c == 'U' and x > 0: x -= 1\n                elif c == 'D", "llama3.1-8b-instruct_prob": 0.5283596939823743, "gpt-3.5-turbo_response": "```python\ndef is_safe(n, m, s):\n    if 'L' in s and s.count('L') > m - 1:\n        return \"unsafe\"\n    if 'R' in s and s.count('R') > m - 1:\n        return \"unsafe\"\n    if 'U' in s and s.count('U') > n - 1:\n        return \"unsafe\"\n    if 'D' in s and s.count('D') > n -", "gpt-3.5-turbo_prob": 0.47164030601762585}
{"id": "607", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and gcd(a[i], a[j]) == 1:\n            j += 1\n        if j - i ==", "llama3.1-8b-instruct_prob": 0.4727849119363277, "gpt-3.5-turbo_response": "```python\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if 1 in a:\n        print(n)\n    else:\n        g = a[0]\n        for i in range(1, n):\n            g = gcd(g, a[i])\n        if g == 1:\n            print(n)\n        else:\n            print(-1)\n```", "gpt-3.5-turbo_prob": 0.5272150880636723}
{"id": "609", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    q = list(map(int, input().split()))\n    s = 0\n    for i in q:\n        s += i\n        if s >= k:\n            s -= k\n        else:\n            break\n    print(_ + 1 + q[:q.index(i)].count(0))", "llama3.1-8b-instruct_prob": 0.40793567157325705, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    q = list(map(int, input().split()))\n    total = 0\n    day = 0\n    for i in q:\n        total += i\n        day += 1\n        if total < k:\n            print(day)\n            break\n        total -= k", "gpt-3.5-turbo_prob": 0.592064328426743}
{"id": "61", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n\n    for i in range(n - 2):\n        if p[i] < p[i + 1] and p[i + 1] > p[i + 2]:\n            print(\"YES\")\n            print(i + 1, i + 2, i + 3)\n            break\n    else:\n        print(\"NO\")", "llama3.1-8b-instruct_prob": 0.5398518506682991, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(n-2):\n        if p[i] < p[i+1] and p[i+1] > p[i+2]:\n            print(\"YES\")\n            print(i+1, i+2, i+3)\n            break\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.4601481493317009}
{"id": "610", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i + 1, min(i + 7, n)):\n                if a[j] == 1:\n                    print('NO')\n                    return\n    print('YES')\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.49999999724301164, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    flag = True\n    dist = 0\n    for i in range(n):\n        if a[i] == 1:\n            if dist < 6 and i != 0:\n                flag = False\n                break\n            dist = 0\n        else:\n            dist += 1\n    print(\"YES\" if flag else \"NO", "gpt-3.5-turbo_prob": 0.5000000027569883}
{"id": "611", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    vis = [0] * (n + 1)\n    for i in range(n):\n        if vis[a[i]]:\n            print(\"Truly Happy\")\n            return\n        vis[a[i]] = 1\n    print(\"Poor Chef\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef is_truly_happy(N, A):\n    seen = set()\n    for i in range(N):\n        if A[i] != i + 1:\n            if A[A[i] - 1] == A[i]:\n                return \"Truly Happy\"\n            seen.add(A[i])\n    for num in seen:\n        if A[num - 1] != num:\n            return \"Truly Happy\"\n    return \"Poor Chef\"\n\nT = int(input())\nresults =", "gpt-3.5-turbo_prob": 0.5}
{"id": "612", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    if '010' in s or '101' in s:\n        print('Good')\n    else:\n        print('Bad')\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.48955654327593723, "gpt-3.5-turbo_response": "```python\ndef classify_feedback(feedbacks):\n    results = []\n    for feedback in feedbacks:\n        if '010' in feedback or '101' in feedback:\n            results.append('Good')\n        else:\n            results.append('Bad')\n    return results\n```", "gpt-3.5-turbo_prob": 0.5104434567240628}
{"id": "613", "llama3.1-8b-instruct_response": "def count_bubbly_words(words):\n    def is_bubbly(word):\n        stack = []\n        for char in word:\n            if stack and stack[-1] == char:\n                stack.pop()\n            else:\n                stack.append(char)\n        return not stack\n\n    return sum(1 for word in words[1:] if is_bubbly(word))", "llama3.1-8b-instruct_prob": 0.5872878303258912, "gpt-3.5-turbo_response": "def count_bubbly_words(M, words):\n    count = 0\n    for word in words:\n        if word.count('A') == word.count('B'):\n            count += 1\n    return [count]", "gpt-3.5-turbo_prob": 0.4127121696741088}
{"id": "615", "llama3.1-8b-instruct_response": "class SegmentTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (4 * self.n)\n        self._build(arr, 0, 0, self.n - 1)\n\n    def _build(self, arr, v, tl, tr):\n        if tl == tr:\n            self.tree[v] = arr[tl]\n        else:\n            tm = (tl + tr) // 2\n            self._", "llama3.1-8b-instruct_prob": 0.4895565393171868, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, q = map(int, input().split())\n    bills = list(map(int, input().split()))\n    for _ in range(q):\n        x, y = map(int, input().split())\n        print(sum(bills[x-1:y]))", "gpt-3.5-turbo_prob": 0.5104434606828132}
{"id": "618", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        window_sum = sum(a[max(0, i-k+1):i+1])\n        max_sum = max(max_sum, window_sum)\n    print(max(max_sum, sum(a[-k+1:]) + sum(a[:k])))\n\nt = int(input())\nfor _ in range(t", "llama3.1-8b-instruct_prob": 0.5268830169150414, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    coins = list(map(int, input().split()))\n    total_coins = sum(coins[:k])\n    max_coins = total_coins\n    for i in range(n):\n        total_coins = total_coins - coins[i] + coins[(i+k)%n]\n        max_coins = max(max_coins, total_coins)\n    print(max_coins", "gpt-3.5-turbo_prob": 0.47311698308495864}
{"id": "619", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    p1, p2, k = map(int, input().split())\n    if (p1 + p2) % k == 0:\n        print(\"COOK\")\n    else:\n        print(\"CHEF\")", "llama3.1-8b-instruct_prob": 0.38525326367703605, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    P1, P2, K = map(int, input().split())\n    total_points = P1 + P2\n    if (total_points // K) % 2 == 0:\n        print(\"CHEF\")\n    else:\n        print(\"COOK\")\n```", "gpt-3.5-turbo_prob": 0.614746736322964}
{"id": "62", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    vis = [0] * 26\n    pos = [-1] * 26\n    for i in range(n):\n        c = ord(s[i]) - ord('a')\n        if i == 0:\n            pos[c] = 0\n            vis[c] = 1\n        elif i == n - 1:\n            if pos[c - 1] == -1 or pos[c +", "llama3.1-8b-instruct_prob": 0.48736322476802074, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    keyboard = [0]*26\n    for i in range(1, len(s)):\n        diff = abs(ord(s[i]) - ord(s[i-1]))\n        if diff == 1 or diff == 25:\n            continue\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n        print(\"\".join([chr((ord(s[0])-", "gpt-3.5-turbo_prob": 0.5126367752319791}
{"id": "620", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    nums = list(map(int, input().split()))\n    max_val = float('-inf')\n    count = 0\n    ans = 0\n    for i in range(n):\n        max_val = max(max_val, nums[i])\n        if nums[i] < k:\n            count += 1\n        else:\n            count = 1\n            max_val = nums[i]\n", "llama3.1-8b-instruct_prob": 0.42819574271292093, "gpt-3.5-turbo_response": "```python\ndef longest_contiguous_segment(arr, n, k):\n    max_len = 0\n    curr_len = 0\n    for i in range(n):\n        if arr[i] < k:\n            curr_len += 1\n        else:\n            curr_len = 0\n        max_len = max(max_len, curr_len)\n    return max_len\n```", "gpt-3.5-turbo_prob": 0.5718042572870791}
{"id": "621", "llama3.1-8b-instruct_response": "```python\ndef longest_common_prefix(words):\n    if not words:\n        return \"\"\n    shortest_word = min(words, key=len)\n    for i, char in enumerate(shortest_word):\n        for other in words:\n            if other[i] != char:\n                return shortest_word[:i]\n    return shortest_word\n\ndef find_stem(n, words):\n    common_prefixes = [words[0]]\n    for word in words[1:]:\n        common_prefixes.append(longest_common_prefix([", "llama3.1-8b-instruct_prob": 0.5662278250758985, "gpt-3.5-turbo_response": "```python\ndef find_stem(words):\n    words.sort()\n    prefix = words[0]\n    suffix = words[-1]\n    for i in range(len(prefix)):\n        if prefix[i] != suffix[i]:\n            return prefix[:i]\n    return prefix\n```", "gpt-3.5-turbo_prob": 0.4337721749241014}
{"id": "622", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ninput = sys.stdin.readline\n\ndef solve():\n    n, m, w, h = map(int, input().split())\n    s = input().strip()\n    points = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    x, y = 0, 0\n    for i in s:\n        if i == 'R':\n            x += 2 ** (", "llama3.1-8b-instruct_prob": 0.5171891641700529, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    N, M, W, H = map(int, input().split())\n    S = input()\n    points = [tuple(map(int, input().split())) for _ in range(M)]\n    min_distance = float('inf')\n    for i in range(M):\n        for j in range(i+1, M):\n            distance = math.sqrt((points[i][0]-points[j][0])**2 +", "gpt-3.5-turbo_prob": 0.4828108358299472}
{"id": "623", "llama3.1-8b-instruct_response": "```python\nn = int(input())\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\narr.sort()\nfor num in arr:\n    print(num)\n```", "llama3.1-8b-instruct_prob": 0.5926665999540698, "gpt-3.5-turbo_response": "numbers = ['5', '3', '6', '7', '1']\nnumbers.sort()\nprint(numbers)", "gpt-3.5-turbo_prob": 0.40733340004593027}
{"id": "624", "llama3.1-8b-instruct_response": "def CristoSutra(Ti, memo = {}):\n    if Ti in memo:\n        return memo[Ti]\n    if Ti <= 0:\n        return 1, 0\n    elif Ti == 1:\n        return 0, 1\n    else:\n        alpha, beta = CristoSutra(Ti-1, memo)\n        alpha += CristoSutra(Ti-2, memo)[0]\n        beta += CristoSutra(Ti-3, memo)[1", "llama3.1-8b-instruct_prob": 0.5926665999540698, "gpt-3.5-turbo_response": "def CristoSutra(Ti):\n    alpha = 0\n    beta = 0\n    if Ti <= 0:\n        alpha = alpha + 1\n    elif Ti == 1:\n        beta = beta + 1\n    else:\n        CristoSutra(Ti-1)\n        CristoSutra(Ti-2)\n        CristoSutra(Ti-3)\n    return alpha, beta", "gpt-3.5-turbo_prob": 0.4073334000459302}
{"id": "625", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        for j in range(i, n):\n            cnt += a[j]\n            if cnt % (10**9) == 0:\n                ans += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4441052811384028, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    prefix_sum = 0\n    count = {0: 1}\n    result = 0\n    for num in A:\n        prefix_sum = (prefix_sum + num) % (10**9)\n        result += count.get(prefix_sum, 0)\n        count[prefix_sum] = count.get(prefix_sum, 0", "gpt-3.5-turbo_prob": 0.5558947188615972}
{"id": "626", "llama3.1-8b-instruct_response": "def solve():\n    k = int(input())\n    s = input()\n    n = 2 ** k\n    ans = [''] * n\n    for i in range(n):\n        binary = format(i, 'b').zfill(k)\n        binary = binary[::-1]\n        idx = int(binary, 2)\n        ans[idx] = s[i]\n    print(''.join(ans))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5247306430175614, "gpt-3.5-turbo_response": "def scrambled_message(T, test_cases):\n    result = []\n    for case in test_cases:\n        k, message = case.split()\n        k = int(k)\n        n = 2 ** k\n        new_message = [''] * n\n        for i in range(n):\n            binary = bin(i)[2:].zfill(k)\n            reversed_binary = binary[::-1]\n            index = int(reversed_binary, 2)\n            new_message[index] = message[i]\n        result.append", "gpt-3.5-turbo_prob": 0.47526935698243855}
{"id": "627", "llama3.1-8b-instruct_response": "def solve(N, K):\n    MOD = 10**9 + 7\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        for j in range(min(i, K), 0, -1):\n            dp[j] = (dp[j] + dp[j - 1]) % MOD\n    return dp[K]\n\nN, K = map(int, input", "llama3.1-8b-instruct_prob": 0.45869485144539573, "gpt-3.5-turbo_response": "from math import comb\nN, K = map(int, input().split())\nprint(comb(N+K-1, K-1) % (10**9 + 7))", "gpt-3.5-turbo_prob": 0.5413051485546043}
{"id": "628", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    s = input()\n    b = s.count('B')\n    w = s.count('W')\n    if b == 0 or (b - 1) % 2 == 0:\n        print('Chef')\n    else:\n        print('Aleksa')", "llama3.1-8b-instruct_prob": 0.5432579483778825, "gpt-3.5-turbo_response": "def find_winner(T, cells):\n    result = []\n    for cell in cells:\n        if 'B' in cell:\n            result.append('Aleksa')\n        else:\n            result.append('Chef')\n    return result", "gpt-3.5-turbo_prob": 0.45674205162211756}
{"id": "629", "llama3.1-8b-instruct_response": "def solve():\n    R, G, B, M = map(int, input().split())\n    r = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    r.sort()\n    g.sort()\n    b.sort()\n\n    def check(x):\n        return min((r[-1] + 1) // 2 * min(M, (r[-1] + 1) // (2", "llama3.1-8b-instruct_prob": 0.512636781255989, "gpt-3.5-turbo_response": "```python\ndef minimize_max_liquid(T, cases):\n    results = []\n    for case in cases:\n        R, G, B, M = map(int, case[0].split())\n        r = list(map(int, case[1].split()))\n        g = list(map(int, case[2].split()))\n        b = list(map(int, case[3].split()))\n        max_values = [max(r), max(g), max(b)]\n        max_values.sort(reverse=True)\n", "gpt-3.5-turbo_prob": 0.487363218744011}
{"id": "63", "llama3.1-8b-instruct_response": "import heapq\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    w = list(map(int,input().split()))\n    a.sort(reverse=True)\n    w.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += a[i*w[i]-1] + a[n-w[i]+i]\n    print(ans)", "llama3.1-8b-instruct_prob": 0.650321404825384, "gpt-3.5-turbo_response": "```python\nfrom heapq import heappop, heappush\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    a.sort()\n    w_sum = sum(w)\n    max_heap = []\n    min_heap = []\n    for i in range(k):\n        heappush(max_heap, -a[-1])\n       ", "gpt-3.5-turbo_prob": 0.3496785951746161}
{"id": "631", "llama3.1-8b-instruct_response": "```python\ndef wrong_change(A, B):\n    A_str = str(A)\n    B_str = str(B)\n    diff = 0\n    for i in range(len(A_str)):\n        if A_str[i] != B_str[i]:\n            diff = i\n            break\n    A_list = list(A_str)\n    A_list[diff] = str(int(A_list[diff]) - 1)\n    return int(''.join(A_list))\n\nA, B = map(int,", "llama3.1-8b-instruct_prob": 0.5301414151580282, "gpt-3.5-turbo_response": "print(str(int(str(A - B)[:-1]) + 1) + str(A - B)[-1])", "gpt-3.5-turbo_prob": 0.4698585848419718}
{"id": "632", "llama3.1-8b-instruct_response": "def solve(N, k):\n    return \"ON\" if k >= 2**(N-1) else \"OFF\"\n\nT = int(input())\nfor _ in range(T):\n    N, k = map(int, input().split())\n    print(solve(N, k))", "llama3.1-8b-instruct_prob": 0.5139119205015578, "gpt-3.5-turbo_response": "```python\ndef toggle_machine_state(N, k):\n    if k % 2 == 0:\n        return \"OFF\"\n    else:\n        return \"ON\"\n\nT = int(input())\nfor _ in range(T):\n    N, k = map(int, input().split())\n    print(toggle_machine_state(N, k))\n```", "gpt-3.5-turbo_prob": 0.4860880794984422}
{"id": "633", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    max_height = 0\n    for _ in range(n):\n        height = int(input())\n        max_height = max(max_height, height)\n    print(max_height)", "llama3.1-8b-instruct_prob": 0.45674204899572535, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    heights = [int(input()) for _ in range(N)]\n    print(max(heights))\n```", "gpt-3.5-turbo_prob": 0.5432579510042748}
{"id": "634", "llama3.1-8b-instruct_response": "def maximum_age(s):\n    n = len(s)\n    dp = [[0] * 10 for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(10):\n            if s[i] == str(j) or (s[i].isalpha() and s[i].upper() == chr(ord('A') + j)):\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n", "llama3.1-8b-instruct_prob": 0.5558947210840526, "gpt-3.5-turbo_response": "def max_age_of_universe(s):\n    max_age = int(''.join([c if c.isdigit() else '9' for c in s]))\n    for i in range(len(s)):\n        if s[i].isalpha():\n            for j in range(10):\n                new_str = s[:i] + str(j) + s[i+1:]\n                max_age = max(max_age, int(''.join([c if c.isdigit() else '9' for c in new_str", "gpt-3.5-turbo_prob": 0.4441052789159475}
{"id": "635", "llama3.1-8b-instruct_response": "M = 10**9 + 7\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nB = sorted(set(A))\nn = len(B)\ndp = [[0] * (K + 1) for _ in range(n)]\nfor i in range(n):\n    dp[i][0] = 1\nfor i in range(n):\n    for j in range(1, min(i + 1, K + 1", "llama3.1-8b-instruct_prob": 0.43702750851354166, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nMOD = 1000000007\ncount = Counter(A)\nanswer = 1\nfor key in count:\n    answer *= (pow(2, count[key], MOD) + 1) - 1\n    answer %= MOD\nprint(answer)\n```", "gpt-3.5-turbo_prob": 0.5629724914864582}
{"id": "636", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nn, t = map(int, input().split())\ns = list(map(int, input().split()))[2:]\n\ncnt = [0] * (t + 1)\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            cnt[t - s[i] - s[j] - s[k]] += 1\n\nans = 0\nfor", "llama3.1-8b-instruct_prob": 0.6431825536323991, "gpt-3.5-turbo_response": "```python\ndef count_quadruples(N, T, S):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    if S[i] + S[j] + S[k] + S[l] == T:\n                        count += 1\n    return count\n```", "gpt-3.5-turbo_prob": 0.35681744636760093}
{"id": "638", "llama3.1-8b-instruct_response": "```python\nMOD = 10**9 + 7\n\ndef count_substrings(n, strings):\n    dp = [[0] * 26 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(26):\n            if j == 0 or dp[i - 1][j - 1] == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j", "llama3.1-8b-instruct_prob": 0.4537991231546055, "gpt-3.5-turbo_response": "from collections import defaultdict\nMOD = 10**9 + 7\n\ndef count_substrings(n, m, strings):\n    result = []\n    for s in strings:\n        count = 0\n        for i in range(n - len(s) + 1):\n            if s == strings[i:i + len(s)]:\n                count += 1\n        result.append(count % MOD)\n    return result\n\nT = int(input())\nfor t in range(T):\n    n, m =", "gpt-3.5-turbo_prob": 0.5462008768453945}
{"id": "639", "llama3.1-8b-instruct_response": "```python\ndef is_dynamic(s):\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    freq = sorted(freq.values(), reverse=True)\n    return len(freq) < 3 or freq[0] == freq[1] + freq[2]\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print('Dynamic' if is_dynamic(s) else 'Not')\n```", "llama3.1-8b-instruct_prob": 0.5462008742573895, "gpt-3.5-turbo_response": "```python\ndef is_dynamic_string(s):\n    if len(set(s)) < 3:\n        return \"Dynamic\"\n    freq = [s.count(c) for c in set(s)]\n    freq.sort()\n    if freq[0] + freq[1] == freq[-1]:\n        return \"Dynamic\"\n    return \"Not\"\n\nT = 3\ntestcases = ['aaaabccc', 'aabbcc', 'ppppmmnnoooopp']\nresults = [is_dynamic", "gpt-3.5-turbo_prob": 0.4537991257426105}
{"id": "640", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    power = abs(x - y)\n    if x > y:\n        x += power\n        power += (x - y) // 2\n    print(power)", "llama3.1-8b-instruct_prob": 0.6618625922217833, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    x, y = map(int, input().split())\n    diff = abs(x - y)\n    print(diff)", "gpt-3.5-turbo_prob": 0.33813740777821655}
{"id": "641", "llama3.1-8b-instruct_response": "import sys\nfrom collections import deque\n\nn = int(sys.stdin.readline())\ntraffic = [0] + [int(sys.stdin.readline()) for _ in range(n)]\ngraph = [[] for _ in range(n + 1)]\n\nfor _ in range(n - 1):\n    u, v = map(int, sys.stdin.readline().split())\n    graph[u].append(v)\n    graph[v].append(u)\n\ndef bfs(s):\n    q = deque([(s, 0)])\n    visited = [", "llama3.1-8b-instruct_prob": 0.48955654393876924, "gpt-3.5-turbo_response": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p):\n    global dp, g, a, b, c\n    dp[v][0] = a[v]\n    for u in g[v]:\n        if u == p:\n            continue\n        dfs(u, v)\n        dp[v][0] += min(dp[u][0], b[u])\n    x = []\n    for u in g[v]:\n        if u == p:\n           ", "gpt-3.5-turbo_prob": 0.5104434560612308}
{"id": "642", "llama3.1-8b-instruct_response": "import math\nfor _ in range(int(input())):\n    n, d = map(int, input().split())\n    c = list(map(int, input().split()))\n    c.sort()\n    mx = 0\n    for i in range(n):\n        mx = max(mx, c[i] - c[i-1] - d)\n    print((mx + d) / 2)", "llama3.1-8b-instruct_prob": 0.4768793532184484, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    N, D = map(int, input().split())\n    C = list(map(int, input().split()))\n    C.sort()\n    cooldown = 0\n    for i in range(1, N):\n        cooldown = max(cooldown, (C[i] - C[i-1] - D) / 2)\n    cooldown = max(cooldown, (C[0] - 0)", "gpt-3.5-turbo_prob": 0.5231206467815516}
{"id": "643", "llama3.1-8b-instruct_response": "def get_prime_factors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\ndef solve():\n    MOD = 10**9 + 7", "llama3.1-8b-instruct_prob": 0.529091844640188, "gpt-3.5-turbo_response": "```python\ndef prime_sum_modulo(T, test_cases):\n    MOD = 10**9 + 7\n    result = []\n    for _ in range(T):\n        n = int(test_cases[_][0])\n        P = list(map(int, test_cases[_][1].split()))\n        A = list(map(int, test_cases[_][2].split()))\n        B = list(map(int, test_cases[_][3].split()))\n        N = 1\n        for i in", "gpt-3.5-turbo_prob": 0.47090815535981195}
{"id": "644", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "llama3.1-8b-instruct_prob": 0.4727849153202578, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    candies = list(map(int, input().split()))\n    total_candies = sum(candies)\n    if total_candies % N == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```", "gpt-3.5-turbo_prob": 0.5272150846797422}
{"id": "645", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    k = int(input())\n    print((k // n) * (n - 1) + (k % n))\n\nfor _ in range(int(input())):\n    solve()", "llama3.1-8b-instruct_prob": 0.5245649881235487, "gpt-3.5-turbo_response": "```python\ndef max_sum_S2(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        K = case[1]\n        if K % N == 0:\n            results.append(N)\n        else:\n            results.append(min(N - K % N, K % N))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4754350118764513}
{"id": "646", "llama3.1-8b-instruct_response": "def solve(s):\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return len(stack)\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(solve(s))", "llama3.1-8b-instruct_prob": 0.5875060367348051, "gpt-3.5-turbo_response": "```python\ndef min_length_string(s):\n    stack = []\n    for char in s:\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n    return len(stack)\n```", "gpt-3.5-turbo_prob": 0.4124939632651949}
{"id": "647", "llama3.1-8b-instruct_response": "def solve():\n    n, s = map(int, input().split())\n    if s < n or s > n * 9:\n        print(-1)\n        return\n    ans = 1\n    for i in range(n):\n        if s - (n - i - 1) >= 9:\n            ans *= 9\n            s -= 9\n        else:\n            ans *= s\n            s = 0\n            break\n    if s:\n        ans", "llama3.1-8b-instruct_prob": 0.38527888448431374, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n, s = map(int, input().split())\n    if s > 9*n or (s == 0 and n > 1):\n        print(-1)\n    else:\n        digits = [0] * n\n        s -= 1\n        for i in range(n-1, 0, -1):\n            d = min(9, s)\n            digits[i] = d\n            s -= d", "gpt-3.5-turbo_prob": 0.6147211155156862}
{"id": "648", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n, op, e):\n        self.n = n\n        self.op = op\n        self.e = e\n        self.size = 1 << (self.n - 1).bit_length()\n        self.tree = [e] * (2 * self.size)\n\n    def build(self, arr):\n        for i in range(self.n, 2 * self.size):\n            self.tree[i", "llama3.1-8b-instruct_prob": 0.3997010384917459, "gpt-3.5-turbo_response": "```python\ndef hill_jumping(N, Q, heights, operations):\n    result = []\n    for op in operations:\n        if op[0] == 1:\n            i, k = op[1:]\n            curr = i - 1\n            while k > 0 and curr < N - 1:\n                next_hill = curr + 1\n                while next_hill < N and heights[next_hill] <= heights[curr]:\n                    next_hill += 1", "gpt-3.5-turbo_prob": 0.6002989615082541}
{"id": "651", "llama3.1-8b-instruct_response": "def solve(n, arr):\n    arr.sort()\n    ans = n\n    i = 0\n    while i < n - 2:\n        if arr[i] == arr[i + 2]:\n            ans -= 2\n        i += 3\n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "llama3.1-8b-instruct_prob": 0.4686702619621964, "gpt-3.5-turbo_response": "```python\ndef remaining_cards(N, cards):\n    unique_cards = list(set(cards))\n    return min(N, len(unique_cards) + (N - len(unique_cards)) // 2)\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    cards = list(map(int, input().split()))\n    print(remaining_cards(N, cards))\n```", "gpt-3.5-turbo_prob": 0.5313297380378036}
{"id": "652", "llama3.1-8b-instruct_response": "def compare_strings():\n    t = int(input())\n    for _ in range(t):\n        s1 = input().lower()\n        s2 = input().lower()\n        if s1 < s2:\n            print(\"first\")\n        elif s1 > s2:\n            print(\"second\")\n        else:\n            print(\"equal\")", "llama3.1-8b-instruct_prob": 0.4654165022265362, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s1 = input().lower()\n    s2 = input().lower()\n    if s1 < s2:\n        print(\"first\")\n    elif s1 > s2:\n        print(\"second\")\n    else:\n        print(\"equal\")\n```", "gpt-3.5-turbo_prob": 0.5345834977734638}
{"id": "653", "llama3.1-8b-instruct_response": "def maxPoints(health, P):\n    n = len(health)\n    dp = [[0, 0] for _ in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n        if P >= health[i - ", "llama3.1-8b-instruct_prob": 0.43080401066203244, "gpt-3.5-turbo_response": "```python\nn = int(input())\nhealth = list(map(int, input().split()))\nP = int(input())\n\npoints = 0\nfor h in health:\n    if h <= P:\n        P -= h\n        points += 1\n    elif points > 0:\n        points -= 1\n        P += h\n\nprint(points)\n```", "gpt-3.5-turbo_prob": 0.5691959893379676}
{"id": "654", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(max(min(a, b), min(b, c)))\n```", "llama3.1-8b-instruct_prob": 0.3775406617944891, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    A, B, C = map(int, input().split())\n    print(sorted([A, B, C])[-2])\n```", "gpt-3.5-turbo_prob": 0.6224593382055109}
{"id": "655", "llama3.1-8b-instruct_response": "def solve():\n    n, k, v = map(int, input().split())\n    a = list(map(int, input().split()))\n    total = n * v\n    actual_sum = sum(a)\n    if total - actual_sum == k * v:\n        print(v * k)\n    else:\n        print(-1)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5313297380378036, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    N, K, V = map(int, input().split())\n    A = list(map(int, input().split()))\n    total_sum = (N + K) * V\n    remaining_sum = sum(A)\n    deleted_sum = total_sum - remaining_sum\n    if deleted_sum > 0 and deleted_sum % K == 0:\n        print(deleted_sum // K)\n    else:\n        print(-1)", "gpt-3.5-turbo_prob": 0.4686702619621964}
{"id": "656", "llama3.1-8b-instruct_response": "n = int(input())\nif n % 4 == 0:\n    n += 1\nelse:\n    n -= 1\nprint(n)", "llama3.1-8b-instruct_prob": 0.5148963656238923, "gpt-3.5-turbo_response": "n = int(input())\nif n % 4 == 0:\n    print(n + 1)\nelse:\n    print(n - 1)", "gpt-3.5-turbo_prob": 0.4851036343761076}
{"id": "657", "llama3.1-8b-instruct_response": "```python\ndef max_score(matrix):\n    m, n = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(m)]\n    \n    for _ in range(m + n):\n        for i in range(m):\n            for j in range(n):\n                if (i + j) % 2 == 0:\n                    matrix[i][j] = 1 - matrix[i][j]\n                    \n    return sum(sum(val << (n", "llama3.1-8b-instruct_prob": 0.30841891420843853, "gpt-3.5-turbo_response": "```python\ndef matrixScore(A):\n    m, n = len(A), len(A[0])\n    res = (1 << (n - 1)) * m\n    for j in range(1, n):\n        cur = sum(A[i][j] == A[i][0] for i in range(m))\n        res += max(cur, m - cur) * (1 << (n - 1 - j))\n    return res\n```", "gpt-3.5-turbo_prob": 0.6915810857915614}
{"id": "658", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    dp = [[0, 0] for _ in range(n + 1)]\n    for i in range(1, n):\n        if s[i - 1] <= s[i]:\n            dp[i][0] = dp[i - 1][0] + 1\n        if s[i - 1] >= s[i]:\n            dp[i][1] = dp[i", "llama3.1-8b-instruct_prob": 0.46557550896872524, "gpt-3.5-turbo_response": "```python\ndef longest_updown_subsegment(n, sequence):\n    max_length = 1\n    for i in range(n - 1):\n        if sequence[i] <= sequence[i + 1]:\n            max_length = max(max_length, i + 2)\n        if i > 0 and sequence[i - 1] >= sequence[i + 1]:\n            max_length = max(max_length, i + 1)\n    return max_length\n```", "gpt-3.5-turbo_prob": 0.5344244910312748}
{"id": "659", "llama3.1-8b-instruct_response": "n, k, s = map(int, input().split())\na = list(map(int, input().split()))\n\ndef check(i):\n    return sum(a[i:i+k+1]) > s and k+1 < k+1\n\ndef solve():\n    left = 0\n    right = k\n    while left <= right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid", "llama3.1-8b-instruct_prob": 0.49030615050614934, "gpt-3.5-turbo_response": "```python\ndef smallest_length_subarray(n, k, s, a):\n    left = 0\n    right = 0\n    sum_subarray = 0\n    min_length = float('inf')\n    \n    while right < n:\n        sum_subarray += a[right]\n        while sum_subarray > s and right - left > k:\n            min_length = min(min_length, right - left + 1)\n            sum_subarray -= a[left]\n            left += ", "gpt-3.5-turbo_prob": 0.5096938494938507}
{"id": "66", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.517051933611788, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(*a)\n    print(*b)\n```", "gpt-3.5-turbo_prob": 0.48294806638821197}
{"id": "660", "llama3.1-8b-instruct_response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef is_interesting_number(n):\n    n = str(n)\n    total = 0\n    for digit in n:\n        total += factorial(int(digit))\n    return total == int(n)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(1 if is_interesting_number(n) else 0)", "llama3.1-8b-instruct_prob": 0.46643589871561986, "gpt-3.5-turbo_response": "```python\nfrom math import factorial\n\ndef is_interesting_number(n):\n    original_n = n\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += factorial(digit)\n        n //= 10\n    return 1 if total == original_n else 0\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(is_interesting_number(N))\n```", "gpt-3.5-turbo_prob": 0.5335641012843801}
{"id": "661", "llama3.1-8b-instruct_response": "import math\n\nt, x = map(int, input().split())\nfor _ in range(t):\n    n = int(input())\n    s = math.floor(math.sqrt(n))\n    diff = abs(n - s ** 2)\n    if diff <= 0.01 * x * n:\n        print('yes')\n    else:\n        print('no')", "llama3.1-8b-instruct_prob": 0.5774202649864183, "gpt-3.5-turbo_response": "```python\nimport math\n\nT, X = map(int, input().split())\nfor _ in range(T):\n    N = int(input())\n    S = int(math.sqrt(N))\n    if N - S**2 <= 0.01*X*N:\n        print('yes')\n    else:\n        print('no')\n```", "gpt-3.5-turbo_prob": 0.4225797350135817}
{"id": "662", "llama3.1-8b-instruct_response": "def sum_alternate_odd(d, l, r):\n    mod = 10**9 + 7\n    odd_count = (r - l) // 2 + 1\n    odd_sum = (r + l) * odd_count // 2\n    alternate_sum = 0\n    for i in range(odd_count):\n        if i % d == 0:\n            alternate_sum += (2 * i + l + (r - l) * i // d)", "llama3.1-8b-instruct_prob": 0.4265840400792864, "gpt-3.5-turbo_response": "def sum_of_alternate_odd_numbers(T, test_cases):\n    result = []\n    for case in test_cases:\n        d, L, R = case\n        odd_numbers = [i for i in range(L, R+1) if i % 2 != 0]\n        alternate_odd_numbers = odd_numbers[::d]\n        result.append(sum(alternate_odd_numbers) % 1000000007)\n    return result", "gpt-3.5-turbo_prob": 0.5734159599207136}
{"id": "663", "llama3.1-8b-instruct_response": "def solve():\n    L, S = input().split()\n    L = int(L)\n    S = list(S)\n    n = len(S)\n    for i in range(L):\n        min_idx = i\n        for j in range(i+1, L):\n            if S[j] < S[min_idx]:\n                min_idx = j\n        S[i], S[min_idx] = S[min_idx], S[i]\n    for i in range(L, n):\n        S.append(S[i", "llama3.1-8b-instruct_prob": 0.4509394157534624, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\ndef lex_smallest_string(L, S):\n    S = deque(S)\n    for i in range(L):\n        S.rotate(-1)\n        if S < min_str:\n            min_str = S\n    return ''.join(min_str)\n```", "gpt-3.5-turbo_prob": 0.5490605842465375}
{"id": "665", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    r = list(map(int, input().split()))\n    c = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        r[i] += sum(c[i])\n    peak_rating = [0] * n\n    peak_ranking = [0] * n\n    for i in range(n):\n        max_rating = r[i", "llama3.1-8b-instruct_prob": 0.48807179329695793, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    R = list(map(int, input().split()))\n    C = [list(map(int, input().split())) for _ in range(N)]\n    peak_ratings = [max(R[i] + sum(C[i][j] for j in range(M))) for i in range(N)]\n    peak_rankings = [sorted(peak_ratings, reverse=True).index(peak", "gpt-3.5-turbo_prob": 0.5119282067030421}
{"id": "666", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    pattern = ''\n    for i in range(1, k + 1):\n        pattern += str(i)\n        if i < k:\n            pattern += str(i + 1)\n    print(pattern)\n    for i in range(k + 1, 2 * k):\n        pattern += str(i)\n    print(pattern)\n```", "llama3.1-8b-instruct_prob": 0.4533070628702228, "gpt-3.5-turbo_response": "def generate_pattern(K):\n    pattern = ''\n    num = 1\n    for i in range(1, K+1):\n        for j in range(1, i+1):\n            pattern += str(num)\n            num += 1\n    return pattern", "gpt-3.5-turbo_prob": 0.5466929371297772}
{"id": "667", "llama3.1-8b-instruct_response": "def latest_day_to_take_first_bus(test_cases):\n    for test_case in test_cases[1::2]:\n        n, d = map(int, test_case.split())\n        x = list(map(int, test_cases[test_cases.index(test_case) + 1].split()))\n        lcm = 1\n        for i in x:\n            lcm = lcm * i // math.gcd(lcm, i)\n        for i in range(d // lcm, 0, -1):\n            if all", "llama3.1-8b-instruct_prob": 0.47687935614819454, "gpt-3.5-turbo_response": "```python\ndef latest_bus_day(N, D, bus_routes):\n    max_day = D\n    for route in bus_routes[::-1]:\n        max_day = (max_day // route) * route\n    return max_day\n```", "gpt-3.5-turbo_prob": 0.5231206438518055}
{"id": "669", "llama3.1-8b-instruct_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\ndef dfs(u, k, dp):\n    if dp[u][k] != -1:\n        return dp[u][k]\n    if k == 0:\n        dp[u][k] = 1\n        return 1\n    ans = 0\n    for v in adj[u]:\n        ans += dfs(v, k - 1, dp)\n        ans %= mod", "llama3.1-8b-instruct_prob": 0.4308021202071068, "gpt-3.5-turbo_response": "MOD = 10**9 + 7\ndef solve(N, M, K, roads, Q, conditions):\n    adj = [[] for _ in range(N)]\n    for u, v in roads:\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    dp = [[0] * N for _ in range(K+1)]\n    for i in range(N):\n        dp[0][i] = 1\n    for", "gpt-3.5-turbo_prob": 0.5691978797928932}
{"id": "670", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    return sum(a[:-1])\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.5416628421290508, "gpt-3.5-turbo_response": "```python\ndef min_sum(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        arr = list(map(int, test_cases[i+1].split()))\n        min_sum = sum(arr) - N\n        results.append(str(min_sum))\n    return results\n```", "gpt-3.5-turbo_prob": 0.4583371578709492}
{"id": "671", "llama3.1-8b-instruct_response": "def solve():\n    n, s = map(int, input().split())\n    p = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    d = [p[i] for i in range(n) if t[i] == 0]\n    f = [p[i] for i in range(n) if t[i] == 1]\n    d.sort()\n    f.sort()\n    for i in range(len(d)):\n        for j in range", "llama3.1-8b-instruct_prob": 0.5119267339399078, "gpt-3.5-turbo_response": "```python\ndef can_build_team(N, S, prices, positions):\n    defenders = [prices[i] for i in range(N) if positions[i] == 0]\n    forwards = [prices[i] for i in range(N) if positions[i] == 1]\n    defenders.sort()\n    forwards.sort()\n    if defenders[0] + defenders[1] + min(forwards) + S <= 100:\n        return \"yes\"\n    else:\n        return \"no\"\n\n", "gpt-3.5-turbo_prob": 0.48807326606009205}
{"id": "672", "llama3.1-8b-instruct_response": "```python\nimport math\n\nt = int(input())\n\nfor i in range(1, t + 1):\n    x1, y1, x2, y2 = map(int, input().split())\n    q = int(input())\n\n    print(\"Test case : \", i)\n\n    for _ in range(q):\n        x3, y3 = map(int, input().split())\n\n        if (x2 - x1) * (y3 - y1) == (x3", "llama3.1-8b-instruct_prob": 0.5490605809996492, "gpt-3.5-turbo_response": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    x1, y1, x2, y2 = map(int, input().split())\n    q = int(input())\n    print(\"Test case :\", _+1)\n    for _ in range(q):\n        x3, y3 = map(int, input().split())\n        if x1 == x2:\n            print(\"YES\" if min(y1, y2) <= y3 <= max", "gpt-3.5-turbo_prob": 0.4509394190003509}
{"id": "673", "llama3.1-8b-instruct_response": "def solve():\n    n, m, a, d = map(int, input().split())\n    count = m - n\n    for i in range(1, 5):\n        count -= (m - 1) // (a + i * d) - (n - 1) // (a + i * d)\n    print(count)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.41689019423620527, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m, a, d = map(int, input().split())\n    count = m - n + 1\n    for i in range(5):\n        count -= (m // (a + i * d)) - ((n - 1) // (a + i * d))\n    print(count)\n```", "gpt-3.5-turbo_prob": 0.5831098057637947}
{"id": "674", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    a = []\n    b = []\n    for _ in range(n):\n        a.append(input())\n    for _ in range(n):\n        b.append(input())\n    a = [list(map(int, row)) for row in a]\n    b = [list(map(int, row)) for row in b]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a", "llama3.1-8b-instruct_prob": 0.4482513835431, "gpt-3.5-turbo_response": "```python\ndef error_in_signature(T, test_cases):\n    result = []\n    for i in range(T):\n        N, M = map(int, test_cases[i][0].split())\n        A = [list(map(int, x)) for x in test_cases[i][1:N+1]]\n        B = [list(map(int, x)) for x in test_cases[i][N+1:]]\n        error = sum([1 for i in range(N) for j in range(M", "gpt-3.5-turbo_prob": 0.5517486164569}
{"id": "675", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    if n % 2 == 0:\n        print(-1)\n    else:\n        ans = []\n        for i in range(1, n + 1, 2):\n            ans.extend([i, i + 1])\n        print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5133031610839207, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2 or n == 4:\n        print(-1)\n    else:\n        ans = [2, 3, 1]\n        for i in range(4, n + 1):\n            ans.append(i)\n        print(*ans)", "gpt-3.5-turbo_prob": 0.4866968389160793}
{"id": "676", "llama3.1-8b-instruct_response": "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    m = max(d.values())\n    for i in d:\n        if d[i] == m:\n            print(i)\n            break", "llama3.1-8b-instruct_prob": 0.4308021081571917, "gpt-3.5-turbo_response": "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    names = input().split()\n    count = Counter(names)\n    max_count = max(count.values())\n    winners = [name for name in count if count[name] == max_count]\n    print(min(winners))", "gpt-3.5-turbo_prob": 0.5691978918428082}
{"id": "677", "llama3.1-8b-instruct_response": "```python\nfrom datetime import datetime\n\ndef find_day(date_str):\n    date = datetime.strptime(date_str, \"%d %m %Y\")\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return days[date.weekday()]\n\ndate_str = input().strip()\nprint(find_day(date_str))\n```", "llama3.1-8b-instruct_prob": 0.6065121033803547, "gpt-3.5-turbo_response": "import datetime\ndate = list(map(int, input().split()))\nday_of_week = datetime.date(date[2], date[1], date[0]).strftime(\"%A\")\nprint(day_of_week)", "gpt-3.5-turbo_prob": 0.39348789661964545}
{"id": "678", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l, r, day = 1, 1, 0\n    while l <= n:\n        day += 1\n        l += sum(min(i, a[i-1]) for i in range(l, r+1))\n        r = max(r, l + sum(a[i-1] for i in range(l, r+1)))\n    print(day)\n\nt =", "llama3.1-8b-instruct_prob": 0.5096938493159577, "gpt-3.5-turbo_response": "```python\ndef days_to_spread(T, cases):\n    result = []\n    for case in cases:\n        N = int(case[0])\n        A = list(map(int, case[1].split()))\n        days = 0\n        people_known = 1\n        while people_known < N:\n            max_people = max(A[:people_known])\n            days += 1\n            people_known += max_people\n        result.append(str(days))\n    return result\n```", "gpt-3.5-turbo_prob": 0.49030615068404226}
{"id": "679", "llama3.1-8b-instruct_response": "import heapq\nimport sys\n\nclass Book:\n    def __init__(self, name, exercises):\n        self.name = name\n        self.exercises = exercises\n        self.count = 1\n\n    def __lt__(self, other):\n        if self.exercises == other.exercises:\n            return self.count < other.count\n        return self.exercises < other.exercises\n\nbooks = {}\npq = []\n\nfor _ in range(int(input())):\n    line = input().split()\n    if", "llama3.1-8b-instruct_prob": 0.5357574254368298, "gpt-3.5-turbo_response": "```python\nclass BookPile:\n    def __init__(self):\n        self.books = []\n    \n    def add_book(self, exercises, name):\n        self.books.append((exercises, name))\n    \n    def remove_book(self):\n        min_exercises = min(self.books, key=lambda x: (x[0], -self.books.index(x)))\n        self.books.remove(min_exercises)\n        return min_exercises\n\nN = int(input())\npile = BookPile()\nfor _ in", "gpt-3.5-turbo_prob": 0.4642425745631702}
{"id": "68", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    ans = 0\n    i = 0\n    while i < n:\n        if i + 1 < n and s[i] == s[i + 1]:\n            j = i + 1\n            while j + 1 < n and s[j] == s[j + 1]:\n                j += 1\n            i = j + 1\n            ans += 1\n        else", "llama3.1-8b-instruct_prob": 0.47406006351958246, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('1') + s.count('0') - 1)\n```", "gpt-3.5-turbo_prob": 0.5259399364804176}
{"id": "680", "llama3.1-8b-instruct_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nMOD = 998244353\n\ndef add(x, y):\n    return (x + y) % MOD\n\ndef sub(x, y):\n    return (x - y + MOD) % MOD\n\ndef mul(x, y):\n    return (x * y) % MOD\n\ndef sum(a, b):\n    return add(a, b)\n\ndef dif(a, b):\n    return sub(a, b)\n\ndef mul_(a,", "llama3.1-8b-instruct_prob": 0.4537991188601675, "gpt-3.5-turbo_response": "```python\nT = 1\ntest_cases = [\n    (3, 4, [2, -1, 5], [3, 3, 2, 4], 6, [\n        (3,),\n        (1, 2, 3, -2),\n        (3,),\n        (1, 1, 3, 1),\n        (2, 2, 4, 2),\n        (3,)\n    ])\n]\n```", "gpt-3.5-turbo_prob": 0.5462008811398325}
{"id": "681", "llama3.1-8b-instruct_response": "def solve():\n    import sys\n    input = sys.stdin.readline\n    mod = 10**9 + 7\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 1\n    s = sum(a)\n    while a[-1] <= m:\n        if s <= m * n:\n            ans = (ans + 1) % mod\n        s -= a.pop", "llama3.1-8b-instruct_prob": 0.45541081472594186, "gpt-3.5-turbo_response": "def count_different_final_arrays(N, M, K, A):\n    total_sum = sum(A)\n    max_possible_sum = total_sum + (N * K)\n    min_possible_sum = total_sum - (N * K)\n    if K == 0:\n        return 1\n    elif K > 0 and max_possible_sum % 2 == 0 and min_possible_sum % 2 == 0:\n        return 2\n    else:\n        return 1", "gpt-3.5-turbo_prob": 0.5445891852740582}
{"id": "682", "llama3.1-8b-instruct_response": "def find_segment(n, coins):\n    original = list(range(1, n + 1))\n    for i in range(n):\n        if coins[i] != original[i]:\n            break\n    for j in range(n - 1, -1, -1):\n        if coins[j] != original[j]:\n            break\n    l, r = i, j\n    while l > 0 and coins[l - 1] == original[l - 1]:\n        l -= ", "llama3.1-8b-instruct_prob": 0.6147211011800717, "gpt-3.5-turbo_response": "def find_segment(n, coins):\n    if coins == sorted(coins):\n        return \"0 0\"\n    else:\n        l, r = 0, 0\n        for i in range(n-1):\n            if coins[i] > coins[i+1]:\n                l = i\n                break\n        for i in range(n-1, 0, -1):\n            if coins[i] < coins[i-1]:\n                r = i\n                break\n        if", "gpt-3.5-turbo_prob": 0.3852788988199283}
{"id": "683", "llama3.1-8b-instruct_response": "n = int(input())", "llama3.1-8b-instruct_prob": 0.3381374107079627, "gpt-3.5-turbo_response": "n = int(input())\nprint(n)", "gpt-3.5-turbo_prob": 0.6618625892920373}
{"id": "686", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    n, v1, v2 = map(int, input().split())\n    time_stairs = n / v1 * math.sqrt(2)\n    time_elevator = 2 * n / v2\n    print('Elevator' if time_elevator < time_stairs else 'Stairs')", "llama3.1-8b-instruct_prob": 0.5739846693945951, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, V1, V2 = map(int, input().split())\n    if (2**0.5 * N) / V1 < N / V2:\n        print(\"Stairs\")\n    else:\n        print(\"Elevator\")\n```", "gpt-3.5-turbo_prob": 0.42601533060540486}
{"id": "687", "llama3.1-8b-instruct_response": "def check_permutation(arr):\n    n = len(arr)\n    inversions = 0\n    local_inversions = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            inversions += 1\n            local_inversions += 1\n    return 'YES' if inversions == local_inversions else 'NO'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr =", "llama3.1-8b-instruct_prob": 0.46852592645768604, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    inversions = sum(1 for i in range(N) for j in range(i+1, N) if A[i] > A[j])\n    local_inversions = sum(1 for i in range(N-1) if A[i] > A[i+1])\n    if inversions == local_inversions:\n        print('", "gpt-3.5-turbo_prob": 0.531474073542314}
{"id": "688", "llama3.1-8b-instruct_response": "def is_uniform(s):\n    transitions = 0\n    for i in range(8):\n        if s[i] != s[(i+1)%8]:\n            transitions += 1\n    return 'uniform' if transitions <= 2 else 'non-uniform'\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(is_uniform(s))", "llama3.1-8b-instruct_prob": 0.5186483771054737, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    s = input()\n    transitions = sum(1 for i in range(8) if s[i] != s[(i+1)%8])\n    if transitions <= 2:\n        print(\"uniform\")\n    else:\n        print(\"non-uniform\")", "gpt-3.5-turbo_prob": 0.4813516228945263}
{"id": "689", "llama3.1-8b-instruct_response": "def solve(zebras):\n    zebras = [list(map(int, z.split())) for z in zebras[1:]]\n    visited = set()\n    for a, b in zebras:\n        if a + b in visited:\n            return 'YES'\n        visited.add(a)\n        visited.add(a + b)\n    return 'NO'", "llama3.1-8b-instruct_prob": 0.5245649912178124, "gpt-3.5-turbo_response": "```python\nt = int(input())\npositions = []\nfor _ in range(t):\n    a, b = map(int, input().split())\n    positions.append((a, a+b))\n    \nif len(set(positions)) == len(positions):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n```", "gpt-3.5-turbo_prob": 0.4754350087821876}
{"id": "69", "llama3.1-8b-instruct_response": "def min_coins(t):\n    for _ in range(t):\n        a, b = map(int, input().split())\n        s = input()\n        n = len(s)\n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            if s[i - 1] == '1':\n                dp[i] = dp[i - 1] + a\n            else:\n                dp[i] = dp[i - ", "llama3.1-8b-instruct_prob": 0.5517800672417053, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    s = input().strip()\n    s = '0' + s + '0'\n    cost = 0\n    for i in range(1, len(s)-1):\n        if s[i] == '1' and s[i-1] == '0' and s[i+1] == '0':\n            cost += a\n            s", "gpt-3.5-turbo_prob": 0.44821993275829464}
{"id": "690", "llama3.1-8b-instruct_response": "def minSpeeches():\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    prefix = [0]\n    for x in a:\n        prefix.append(prefix[-1] + x)\n    ans = 0\n    for i in range(len(prefix) - k):\n        if prefix[i + k] - prefix[i] < m:\n            ans += 1\n            for j in range(i, i + k):\n", "llama3.1-8b-instruct_prob": 0.41213627783259665, "gpt-3.5-turbo_response": "```python\ndef min_speeches_required(N, K, M, morale):\n    count = 0\n    for i in range(N):\n        if morale[i] < M:\n            if i+K-1 < N:\n                for j in range(i, i+K):\n                    morale[j] *= M\n                count += 1\n            else:\n                return -1\n    return count\n```", "gpt-3.5-turbo_prob": 0.5878637221674033}
{"id": "691", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_stars = 0\n    seen = {}\n    for i in range(n):\n        stars = 0\n        for j in range(i):\n            if a[j] % a[i] == 0 and a[j] in seen:\n                stars = max(stars, seen[a[j]])\n        seen[a[i]] = stars + 1\n        max_stars = max(max", "llama3.1-8b-instruct_prob": 0.5157761084090632, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    max_star_value = 0\n    divisors_count = {}\n    for i in range(N):\n        count = 0\n        for j in range(i):\n            if A[i] % A[j] == 0:\n                count += 1\n        max_star_value = max(max_star_value, count)\n    print(max_star", "gpt-3.5-turbo_prob": 0.4842238915909369}
{"id": "692", "llama3.1-8b-instruct_response": "```python\nimport sys\nimport heapq\ninput = sys.stdin.readline\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = (start, float('inf'), float('-inf'))\n            return\n        mid = (start + end) // 2\n        self.build(", "llama3.1-8b-instruct_prob": 0.44344078915279295, "gpt-3.5-turbo_response": "```python\nclass ANGEN:\n    def __init__(self, arr):\n        self.arr = arr\n\n    def update(self, i, v):\n        self.arr[i-1] = v\n\n    def find_sum(self, l, r):\n        return sum(self.arr[l-1:r])\n\n    def find_max(self, l, r):\n        return max(self.arr[l-1:r])\n\n    def find_min(self, l, r):\n        return min(self.arr[l-1:r", "gpt-3.5-turbo_prob": 0.556559210847207}
{"id": "693", "llama3.1-8b-instruct_response": "```python\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(math.factorial(n))\n```", "llama3.1-8b-instruct_prob": 0.48608808260828895, "gpt-3.5-turbo_response": "import math\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(math.factorial(N))", "gpt-3.5-turbo_prob": 0.513911917391711}
{"id": "694", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    x, y, z = map(int, input().split())\n    lcm = x*y*z//math.gcd(x,y)*math.gcd(y,z)*math.gcd(z,x)\n    ans = 0\n    for i in range(1, n+1):\n        if i*lcm//x <= n and i*lcm//y <= n and i*lcm//z <= n:\n            ans += 1\n    print", "llama3.1-8b-instruct_prob": 0.46014814594777076, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    x, y, z = map(int, input().split())\n    lcm_xy = x * y // math.gcd(x, y)\n    lcm_yz = y * z // math.gcd(y, z)\n    lcm_xz = x * z // math.gcd(x, z)\n    lcm_xyz = lcm_xy * z // math.gcd(lcm_xy, z)\n   ", "gpt-3.5-turbo_prob": 0.5398518540522292}
{"id": "696", "llama3.1-8b-instruct_response": "```python\nfrom collections import deque\n\ndef is_possible(n, m, p, pairs):\n    visited = set()\n    for i in range(n):\n        if p[i] != i + 1:\n            q = deque([i])\n            visited.add(i)\n            while q:\n                j = q.popleft()\n                for k in range(p[j], p[j + 1]):\n                    if k + 1 not in visited:\n                        q.append(k)\n                        visited.add(k)\n           ", "llama3.1-8b-instruct_prob": 0.5490605842465376, "gpt-3.5-turbo_response": "def is_possible_permutation(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M = case[0], case[1]\n        permutation = case[2]\n        pairs = case[3:]\n        # Check if permutation can be obtained\n        # Append \"Possible\" or \"Impossible\" to results\n    return results", "gpt-3.5-turbo_prob": 0.4509394157534625}
{"id": "697", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k:\n            curr_sum -= a[i - k]\n        if i >= k - 1:\n            max_sum = max(max_sum, curr_sum)\n\n    print", "llama3.1-8b-instruct_prob": 0.37695475609953255, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    powers = list(map(int, input().split()))\n    max_power = sum(powers[:K])\n    current_power = max_power\n    for i in range(K, N):\n        current_power = current_power - powers[i-K] + powers[i]\n        max_power = max(max_power, current_power)\n    print(max_power)\n```", "gpt-3.5-turbo_prob": 0.6230452439004674}
{"id": "698", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((b - a // gcd(a, b)) % b)", "llama3.1-8b-instruct_prob": 0.7023252662651017, "gpt-3.5-turbo_response": "```python\nimport math\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(b - a)\n```", "gpt-3.5-turbo_prob": 0.2976747337348983}
{"id": "699", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    cnt = 0\n    for i in a:\n        cnt += i // k\n        if cnt >= d:\n            print(d)\n            break\n    else:\n        print(cnt // d)", "llama3.1-8b-instruct_prob": 0.3785915283530518, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    N, K, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    total_problems = sum(A)\n    max_contests = total_problems // K\n    print(min(max_contests, D))\n```", "gpt-3.5-turbo_prob": 0.6214084716469482}
{"id": "700", "llama3.1-8b-instruct_response": "def min_cost(bank_amounts):\n    n = len(bank_amounts)\n    dp = [[0] * 4 for _ in range(n)]\n    for i in range(n):\n        for j in range(4):\n            if i == 0:\n                dp[i][j] = bank_amounts[i].split()[j]\n            else:\n                min_val = float('inf')\n                for k in range(4):\n                    if k != (i % 4):\n                       ", "llama3.1-8b-instruct_prob": 0.577421550419934, "gpt-3.5-turbo_response": "```python\ndef min_amount_to_spend(T, banks):\n    for bank in banks:\n        min_amount = min(bank)\n        print(min_amount)\n```", "gpt-3.5-turbo_prob": 0.4225784495800661}
{"id": "701", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    pos = 0\n    for i in range(n):\n        if k ** a[i] > ans:\n            ans = k ** a[i]\n            pos = i + 1\n    print(pos)", "llama3.1-8b-instruct_prob": 0.5846134086911774, "gpt-3.5-turbo_response": "```python\ndef smallest_position_to_split_sequence(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, k = map(int, case[0].split())\n        powers = list(map(int, case[1].split()))\n        prefix_sum = [0] * (N + 1)\n        for i in range(N):\n            prefix_sum[i + 1] = prefix_sum[i] + powers[i]\n        max_product = 0\n        left_size", "gpt-3.5-turbo_prob": 0.41538659130882266}
{"id": "702", "llama3.1-8b-instruct_response": "def solve(m, Tc, Th):\n    for _ in range(m):\n        if Tc < Th:\n            Th -= 1\n            Tc += 2\n        else:\n            return \"Yes\"\n    return \"No\"\n\nT = int(input())\nfor _ in range(T):\n    m, Tc, Th = map(int, input().split())\n    print(solve(m, Tc, Th))", "llama3.1-8b-instruct_prob": 0.3769547586789949, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    m, Tc, Th = map(int, input().split())\n    if (Th - Tc) > m * 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n```", "gpt-3.5-turbo_prob": 0.6230452413210051}
{"id": "703", "llama3.1-8b-instruct_response": "```python\ndef prev_beautiful_binary(n):\n    binary = bin(n)[2:]\n    for i in range(len(binary)):\n        for j in range(i + 1, len(binary)):\n            if binary[i] == '1' and binary[j] == '1' and j - i == 1:\n                return bin(n - 1)[2:]\n    return binary\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(prev_beautiful", "llama3.1-8b-instruct_prob": 0.4621318594007708, "gpt-3.5-turbo_response": "def beautiful_binary_number(n):\n    while True:\n        binary = bin(n)[2:]\n        if '11' not in binary:\n            return n\n        n -= 1", "gpt-3.5-turbo_prob": 0.5378681405992293}
{"id": "704", "llama3.1-8b-instruct_response": "def solve(A, N, M):\n    return pow(A, N, M)\n\nt = int(input())\nfor _ in range(t):\n    A, N, M = map(int, input().split())\n    print(solve(A, N, M))", "llama3.1-8b-instruct_prob": 0.5201373134226216, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    A, N, M = map(int, input().split())\n    print(pow(A, N, M))\n```", "gpt-3.5-turbo_prob": 0.47986268657737846}
{"id": "705", "llama3.1-8b-instruct_response": "def num_paths(n):\n    return 2 * (n - 1) * (n - 2)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(num_paths(n))", "llama3.1-8b-instruct_prob": 0.47406005409605945, "gpt-3.5-turbo_response": "```python\ndef count_paths(N):\n    if N % 2 == 0:\n        return 2 ** (N // 2)\n    else:\n        return 0\n```", "gpt-3.5-turbo_prob": 0.5259399459039404}
{"id": "706", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    w = list(map(int, input().split()))\n    w.reverse()\n    ans = 0\n    cur = 0\n    for i in range(n):\n        if cur + w[i] > k:\n            ans += 1\n            cur = w[i]\n        else:\n            cur += w[i]\n    if cur != 0:\n        ans += 1\n   ", "llama3.1-8b-instruct_prob": 0.5691978863734646, "gpt-3.5-turbo_response": "def smallest_round_trips(T, test_cases):\n    result = []\n    for i in range(T):\n        N, K = map(int, test_cases[i][0].split())\n        weights = list(map(int, test_cases[i][1].split()))\n        total_weight = 0\n        trips = 0\n        for weight in weights:\n            if weight > K:\n                result.append(\"-1\")\n                break\n            if total_weight + weight > K:\n                trips += 1", "gpt-3.5-turbo_prob": 0.4308021136265354}
{"id": "707", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict, deque\n\ndef get_secret_of_mountain():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        graph = defaultdict(list)\n        for _ in range(n - 1):\n            x, y = map(int, input().split())\n            graph[x].append(y)\n            graph[y].append(x)\n\n        visited = set()\n        queue = deque([(1, 0)])\n        parent = {1: None", "llama3.1-8b-instruct_prob": 0.6065121060230558, "gpt-3.5-turbo_response": "```python\ndef get_secret_sequence(N, connections):\n    graph = {}\n    for x, y in connections:\n        if x not in graph:\n            graph[x] = []\n        if y not in graph:\n            graph[y] = []\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = set()\n    sequence = []\n\n    def dfs(node):\n        visited.add(node)\n        sequence.append(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited", "gpt-3.5-turbo_prob": 0.39348789397694417}
{"id": "708", "llama3.1-8b-instruct_response": "def solve():\n    n, a = map(int, input().split())\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + pow(a, 2*i-1, mod) * pow(a, n-i, mod) * pow(i, mod-2, mod)) % mod\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve", "llama3.1-8b-instruct_prob": 0.4551320446736921, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, A = map(int, input().split())\n    result = pow(A, N, 10**9 + 7) * ((pow(2, N, 10**9 + 7) - 1) % (10**9 + 7))\n    print(result % (10**9 + 7))\n```", "gpt-3.5-turbo_prob": 0.5448679553263079}
{"id": "709", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(a[0])\n        return\n    a.sort()\n    if a[0] == a[-1]:\n        print(a[0])\n        return\n    g = a[0]\n    for i in range", "llama3.1-8b-instruct_prob": 0.3733521626839953, "gpt-3.5-turbo_response": "from math import gcd\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_gcd = max(gcd(arr[0], arr[-1]), gcd(arr[0], arr[n-1]), gcd(arr[-1], arr[n-1]))\n    print(max_gcd)", "gpt-3.5-turbo_prob": 0.6266478373160047}
{"id": "71", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    coins = 0\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, a[i])\n        coins += max_val - a[i]\n\n    print(coins)", "llama3.1-8b-instruct_prob": 0.4104106504123035, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    prefix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        ans = max(ans, -prefix_sum)\n    print(ans)\n```", "gpt-3.5-turbo_prob": 0.5895893495876965}
{"id": "710", "llama3.1-8b-instruct_response": "n = int(input())\na = list(map(int, input().split()))\n\nprint(max(a[-1] - a[-2] + a[-3] - a[-4], a[-1] - a[-3] + a[-4] - a[-5] if n >= 5 else 0))", "llama3.1-8b-instruct_prob": 0.5718042572870791, "gpt-3.5-turbo_response": "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nprefix_sum = list(accumulate(a))\nmax_val = max(prefix_sum[i] - prefix_sum[j] for i in range(1, n) for j in range(i))\nprint(max_val)", "gpt-3.5-turbo_prob": 0.42819574271292093}
{"id": "712", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in a:\n        if i % 2 == 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.3997010341680798, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if all(x % 2 != 0 for x in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.6002989658319202}
{"id": "713", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    b = list(map(int, input().split()))\n    for i in range(m):\n        if b[i] not in a:\n            print(\"No\")\n            return\n        a = a[a.index(b[i]):]\n    print(\"Yes\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.45513205240943155, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    M = int(input())\n    B = list(map(int, input().split()))\n    idx = 0\n    for b in B:\n        try:\n            idx = A.index(b, idx) + 1\n        except ValueError:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n```", "gpt-3.5-turbo_prob": 0.5448679475905684}
{"id": "714", "llama3.1-8b-instruct_response": "def min_operations(candies):\n    n = len(candies)\n    candies.sort()\n    min_candies = candies[0]\n    operations = 0\n    for i in range(n):\n        operations += max(0, candies[i] - min_candies)\n        min_candies += 1\n    return operations\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    candies = list(map(int, input().split()))\n   ", "llama3.1-8b-instruct_prob": 0.6440652390119064, "gpt-3.5-turbo_response": "```python\ndef min_operations(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        candies = test_cases[i][1]\n        total_candies = sum(candies)\n        avg_candies = total_candies // N\n        remaining_candies = total_candies % N\n        operations = 0\n        for candy in candies:\n            if candy < avg_candies:\n                operations", "gpt-3.5-turbo_prob": 0.3559347609880937}
{"id": "715", "llama3.1-8b-instruct_response": "def find_values(s):\n    result = []\n    for word in s.split():\n        value = 0\n        for i, char in enumerate(word):\n            value += (ord(char) - 64) * (26 ** (len(word) - i - 1))\n        result.append(str(value))\n    return result\n\ns = input()\nprint(find_values(s))", "llama3.1-8b-instruct_prob": 0.6311339730721345, "gpt-3.5-turbo_response": "def find_values(s):\n    values = []\n    for word in s:\n        value = 0\n        for char in word:\n            value += ord(char) - 64\n        values.append(str(value))\n    return values", "gpt-3.5-turbo_prob": 0.3688660269278655}
{"id": "717", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    b, g = map(int, input().split())\n    print(min(b, g) * 2 + min(b - g, g - b))", "llama3.1-8b-instruct_prob": 0.5629725008337808, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    b, g = map(int, input().split())\n    print(b*g + b + g)", "gpt-3.5-turbo_prob": 0.4370274991662193}
{"id": "719", "llama3.1-8b-instruct_response": "```python\ndef tour(juice_shops):\n    n = int(juice_shops[0])\n    shops = [list(map(int, shop.split())) for shop in juice_shops[1:]]\n\n    max_juice = 0\n    start = 0\n    for i in range(n):\n        juice, dist = shops[i]\n        remaining_dist = (shops[(i + 1) % n][1] + dist) - juice * dist\n       ", "llama3.1-8b-instruct_prob": 0.5691959922677137, "gpt-3.5-turbo_response": "```python\ndef find_starting_point(N, juice_shops):\n    total_juice = 0\n    total_distance = 0\n    starting_point = 0\n    for i in range(N):\n        total_juice += juice_shops[i][0]\n        total_distance += juice_shops[i][1]\n        while total_juice < total_distance:\n            total_juice -= juice_shops[starting_point][0]\n            total_distance -= juice_shops", "gpt-3.5-turbo_prob": 0.43080400773228633}
{"id": "72", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = set(a)\n    if len(b) > k:\n        print(-1)\n        return\n    c = list(b)\n    while len(c) < k:\n        c.append(1)\n    m = n * k\n    d = []\n    for i in range(n):\n        for j in range(k):\n            d.append(c[a[i]", "llama3.1-8b-instruct_prob": 0.42184758957793134, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set(a)\n    if len(s) > k:\n        print(-1)\n    else:\n        print(n*k)\n        print(*([*s]*k*n))\n```", "gpt-3.5-turbo_prob": 0.5781524104220687}
{"id": "720", "llama3.1-8b-instruct_response": "def beauty_of_string(s):\n    n = len(s)\n    beauty = 0\n    for i in range(n):\n        cnt0 = 0\n        cnt1 = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                cnt0 += 1\n            else:\n                cnt1 += 1\n            if cnt0 == cnt1 * cnt1:\n                beauty += 1\n    return beauty\n\nt = int(input())\n", "llama3.1-8b-instruct_prob": 0.5119281986048351, "gpt-3.5-turbo_response": "```python\ndef beauty_of_binary_string(s):\n    cnt_0 = s.count('0')\n    cnt_1 = s.count('1')\n    beauty = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].count('0') == s[i:j+1].count('1')**2:\n                beauty += 1\n    return beauty\n```", "gpt-3.5-turbo_prob": 0.4880718013951649}
{"id": "721", "llama3.1-8b-instruct_response": "def solve(N):\n    MOD = 1000000007\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 26\n    for i in range(2, N + 1):\n        if i % 2 == 0:\n            dp[i] = (26 * dp[i // 2] + 26 * dp[i // 2 - 1]) % MOD\n        else:\n", "llama3.1-8b-instruct_prob": 0.43515074229452255, "gpt-3.5-turbo_response": "def count_palindromes(N):\n    return (26 * pow(27, (N-1)//2, 10**9 + 7)) % (10**9 + 7) if N > 1 else 26", "gpt-3.5-turbo_prob": 0.5648492577054774}
{"id": "723", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    poly = []\n    for _ in range(n):\n        a, p = map(int, input().split())\n        poly.append((a, p))\n    poly.sort(key=lambda x: x[1], reverse=True)\n    ans = []\n    for a, p in poly:\n        if p == 0:\n            ans.append(str(a))\n        elif p == 1:\n            ans.append(str(a) + '", "llama3.1-8b-instruct_prob": 0.43080211140408015, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    polynomial = []\n    for _ in range(N):\n        a, p = map(int, input().split())\n        if p != 0:\n            polynomial.append(str(a*p) + 'x^' + str(p-1))\n    print(' + '.join(polynomial))\n```", "gpt-3.5-turbo_prob": 0.5691978885959199}
{"id": "724", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for i in range(k):\n        b[a[i]] = i + 1\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            b[i] = k + 1\n    for i in range(1, k):\n       ", "llama3.1-8b-instruct_prob": 0.4477875149037917, "gpt-3.5-turbo_response": "```python\n# Loop through the test cases\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    seq = list(map(int, input().split()))\n    perm = [0] * n\n    j = 0\n    for i in range(1, n+1):\n        if j < k and i == seq[j]:\n            perm[i-1] = seq[j]\n            j += 1\n    if j == k", "gpt-3.5-turbo_prob": 0.5522124850962082}
{"id": "725", "llama3.1-8b-instruct_response": "def min_operations(t):\n    for _ in range(int(t)):\n        n, k, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        ans = float('inf')\n        for i in range(n - k + 1):\n            cnt = 0\n            for j in range(i, i + k):\n                if a[j] == max(a[i:i + k]):\n                    cnt += 1\n            if cnt >= m:\n               ", "llama3.1-8b-instruct_prob": 0.4910454708306099, "gpt-3.5-turbo_response": "```python\ndef min_operations_to_avoid_arrest(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N, K, M = map(int, test_cases[i].split())\n        R = list(map(int, test_cases[i+1].split()))\n        operations = 0\n        for i in range(N-K+1):\n            subarray = R[i:i+K]\n            max_val = max(subarray)\n", "gpt-3.5-turbo_prob": 0.5089545291693901}
{"id": "726", "llama3.1-8b-instruct_response": "def max_meals(test_cases):\n    for case in test_cases[1::2]:\n        freq = {}\n        for string in case:\n            for char in string:\n                freq[char] = freq.get(char, 0) + 1\n        meals = min(freq['c'], freq['o'], freq['d'], freq['e'], freq['h'], freq['f']) // 7\n        print(meals)\n\ntest_cases = ['3', '6', 'cplusplus', '", "llama3.1-8b-instruct_prob": 0.3287629812857744, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ingredients = [input() for _ in range(N)]\n    cauldron = ''.join(ingredients)\n    counts = Counter(cauldron)\n    meals = min(counts['c']//2, counts['o']//2, counts['d'], counts['e']//2, counts['h'], counts['f'])\n    print(meals)\n```", "gpt-3.5-turbo_prob": 0.6712370187142256}
{"id": "727", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, m = map(int, input().split())\n    dp = [[float('inf')] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j >= i * (n - i + 1):\n                dp[i][j] =", "llama3.1-8b-instruct_prob": 0.40768337196915166, "gpt-3.5-turbo_response": "```python\ndef min_unused_wire_length(T, cases):\n    results = []\n    for case in cases:\n        N, M = map(int, case.split())\n        if M < N * (N + 1) // 2:\n            results.append(\"-1\")\n        else:\n            results.append(str(max(0, M - N * (N + 1) // 2)))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5923166280308483}
{"id": "728", "llama3.1-8b-instruct_response": "n = int(input())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nprimary_diagonal_sum = sum(matrix[i][i] for i in range(n))\nsecondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n))\nprint(abs(primary_diagonal_sum - secondary_diagonal_sum))", "llama3.1-8b-instruct_prob": 0.6886871645487178, "gpt-3.5-turbo_response": "n = int(input())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nprint(abs(sum(matrix[i][i] for i in range(n)) - sum(matrix[i][n-1-i] for i in range(n))))", "gpt-3.5-turbo_prob": 0.3113128354512822}
{"id": "729", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    b = [[0] * m for _ in range(n)]\n    c = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n               ", "llama3.1-8b-instruct_prob": 0.5082346325167891, "gpt-3.5-turbo_response": "```python\ndef min_moves_to_make_one(T, test_cases):\n    result = []\n    for case in test_cases:\n        N, M = map(int, case[0].split())\n        matrix = [list(map(int, list(row))) for row in case[1:]]\n        row_moves = [0] * N\n        col_moves = [0] * M\n        for i in range(N):\n            for j in range(M):\n                if matrix[i][j] ==", "gpt-3.5-turbo_prob": 0.49176536748321087}
{"id": "73", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if a[i] != i:\n            mex = n\n            for j in range(n):\n                if a[j] != j and a[j] < mex:\n                    mex = a[j]\n            a[i] = mex\n            ans.append(i + 1)\n    for i in range(n - 1):\n        if a[i", "llama3.1-8b-instruct_prob": 0.46267353124291666, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mex = 0\n    operations = []\n    for i in range(2*n):\n        if mex in a:\n            mex += 1\n        else:\n            if mex < n:\n                a[a.index(max(a))] = mex\n                operations.append(a.index(mex)+1)\n            else:\n                break\n    print(len", "gpt-3.5-turbo_prob": 0.5373264687570833}
{"id": "730", "llama3.1-8b-instruct_response": "def find_winner(test_cases):\n    for test_case in test_cases:\n        n = int(test_case[0])\n        players = []\n        for i in range(1, n + 1):\n            cookies = list(map(int, test_case[i * 2 + 1].split()))\n            types = list(map(int, test_case[i * 2 + 2].split()))\n            score = sum(set(types))\n            for j in range(4, 7):\n                score += types", "llama3.1-8b-instruct_prob": 0.48555222650003993, "gpt-3.5-turbo_response": "```python\ndef determine_winner(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        cookies = [list(map(int, test_cases[i+1].split())) for _ in range(N)]\n        scores = [sum(c) + (len(set(c)) - 1) for c in cookies]\n        max_score = max(scores)\n        if scores.count(max_score) > 1:\n", "gpt-3.5-turbo_prob": 0.51444777349996}
{"id": "731", "llama3.1-8b-instruct_response": "import sys\nfrom collections import deque\n\ndef dijkstra(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    queue = deque([start])\n    while queue:\n        node = queue.popleft()\n        for neighbor, weight in graph[node].items():\n            if distances[neighbor] > distances[node] + weight:\n                distances[neighbor] = distances[node] + weight\n                queue.append(neighbor)\n   ", "llama3.1-8b-instruct_prob": 0.5313297424405523, "gpt-3.5-turbo_response": "```python\ndef max_cheapest_route_cost(C, F, flights):\n    graph = {i: {} for i in range(1, C + 1)}\n    for x, y, p in flights:\n        graph[x][y] = p\n        graph[y][x] = p\n    for k in range(1, C + 1):\n        for i in range(1, C + 1):\n            for j in range(1, C + 1", "gpt-3.5-turbo_prob": 0.46867025755944763}
{"id": "732", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            ans += a[i]\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5188073854000086, "gpt-3.5-turbo_response": "```python\ndef weird_distance(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        B = list(map(int, test_cases[i+2].split()))\n        distance = 0\n        for j in range(N):\n            if A[j] == B[j]:\n                distance += A[j]\n        result.append(str", "gpt-3.5-turbo_prob": 0.48119261459999135}
{"id": "733", "llama3.1-8b-instruct_response": "```python\ndef smallest_palindrome():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = input()\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                substr = s[i:j]\n                if substr == substr[::-1] and (len(substr) == n or len(substr) < len(s[s.find(min(substr, key=ord)):(s.find(min(substr, key=", "llama3.1-8b-instruct_prob": 0.47278492150878526, "gpt-3.5-turbo_response": "```python\ndef smallest_palindromic_substring(T, test_cases):\n    result = []\n    for i in range(T):\n        N = test_cases[i][0]\n        s = test_cases[i][1]\n        for j in range(N):\n            if s[j] != s[N-j-1]:\n                result.append(min(s[j:N-j], s[j+1:N-j+1]))\n                break\n    return result\n```", "gpt-3.5-turbo_prob": 0.5272150784912147}
{"id": "734", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if len(set(a)) != len(a):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        for i in range(n):\n            if a[i] != b[i]:\n                print(a[i], end=\" \")\n            else:\n                print(b[(i+1)%n], end=\" \")\n        print()\n\nt = int(input())\nfor _ in", "llama3.1-8b-instruct_prob": 0.47836409905002697, "gpt-3.5-turbo_response": "```python\nT = 2\ntest_cases = [(9, [1, 1, 1, 2, 2, 2, 3, 3, 3]), (2, [1, 1])]\n```", "gpt-3.5-turbo_prob": 0.521635900949973}
{"id": "735", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "llama3.1-8b-instruct_prob": 0.527215077911882, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "gpt-3.5-turbo_prob": 0.47278492208811795}
{"id": "736", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += abs(ord(s[i]) - ord('a'))\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.48807179019445396, "gpt-3.5-turbo_response": "```python\ndef min_points_string_conversion(s):\n    count_a = s.count('a')\n    count_z = s.count('z')\n    return abs(count_a - count_z)\n```", "gpt-3.5-turbo_prob": 0.5119282098055461}
{"id": "737", "llama3.1-8b-instruct_response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nt =", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef rodriguez_happy(x, y):\n    left_out_area = x*x - y*y\n    if is_prime(left_out_area):\n        return \"NO\"\n    else:\n        return \"YES\"\n\nT =", "gpt-3.5-turbo_prob": 0.5}
{"id": "740", "llama3.1-8b-instruct_response": "from collections import deque\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m, k = map(int, stdin.readline().split())\n        grid = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for _ in range(k):\n            x, y = map(int, stdin.readline().split())\n            grid[x][y] = 1\n\n        visited =", "llama3.1-8b-instruct_prob": 0.49030615206210937, "gpt-3.5-turbo_response": "```python\ndef min_fence_length(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, M, K = case[0]\n        plants = case[1:]\n        perimeter = 0\n        for r, c in plants:\n            if (r - 1, c) not in plants:\n                perimeter += 1\n            if (r + 1, c) not in plants:\n                perimeter += 1\n            if (r,", "gpt-3.5-turbo_prob": 0.5096938479378906}
{"id": "743", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    if n % k == 0 and k > 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.418875809300209, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if k == 1 or k == n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n```", "gpt-3.5-turbo_prob": 0.581124190699791}
{"id": "744", "llama3.1-8b-instruct_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    s = ''\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            s += '*' * i + '\\n'\n        else:\n            s += '*' + ' ' * (i - 1) + '*\\n'\n    print(s, end='')\n```", "llama3.1-8b-instruct_prob": 0.41271216967410884, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        if i <= (K+1)//2:\n            print('*' * i)\n        else:\n            print('*' * (K+1-i))\n```", "gpt-3.5-turbo_prob": 0.5872878303258912}
{"id": "745", "llama3.1-8b-instruct_response": "def min_operations(mountains):\n    for m in mountains[3::4]:\n        n = int(mountains[2::4])\n        heights = list(map(int, mountains[1::4].split()))\n        max_height = max(heights)\n        left, right = 0, max_height - 1\n        operations = 0\n        while left <= right:\n            if heights[left] == left + 1:\n                left += 1\n            elif heights[right] == max", "llama3.1-8b-instruct_prob": 0.3509066111301894, "gpt-3.5-turbo_response": "```python\ndef min_operations_to_build_temple(n, heights):\n    max_height = max(heights)\n    index_of_max = heights.index(max_height)\n    left_heights = heights[:index_of_max]\n    right_heights = heights[index_of_max+1:]\n    left_operations = sum(max_height - h - i for i, h in enumerate(left_heights))\n    right_operations = sum(max_height - h - i for i, h in enumerate(right_heights[::-1]))\n   ", "gpt-3.5-turbo_prob": 0.6490933888698106}
{"id": "746", "llama3.1-8b-instruct_response": "def calculate_p1(height, values):\n    mod = 10**9 + 7\n    values = list(map(int, values.split()))\n    tree = [[0 for _ in range(height)] for _ in range(2**height - 1)]\n    for i in range(2**height - 1):\n        tree[i][0] = values[i]\n    for i in range(1, height):\n        for j in range(2**(height - i - 1)", "llama3.1-8b-instruct_prob": 0.38814719876704057, "gpt-3.5-turbo_response": "```python\ndef calculate_P1(H, values):\n    if H == 0:\n        return 0\n    else:\n        return max(values[0] * calculate_P1(H-1, values[1:2**H-1]), values[0] * calculate_P1(H-1, values[2**H-1:]))\n```", "gpt-3.5-turbo_prob": 0.6118528012329594}
{"id": "747", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n == 1:\n        print('YES')\n        print(a[0])\n        return\n    if a[0] == a[-1]:\n        print('NO')\n        return\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            print('NO')\n            return\n    p = 0\n", "llama3.1-8b-instruct_prob": 0.4434407829642656, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    if b == a:\n        print(\"YES\")\n        print(*b)\n    else:\n        b = sorted(a, reverse=True)\n        if b == a:\n            print(\"YES\")\n            print(*b)\n        else:\n            print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.5565592170357344}
{"id": "748", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(*[i for i in range(1, 7) if i != a[0]])\n        return\n    if n == 2:\n        if a[0] == a[1]:\n            print(-1)\n            return\n        print(*[i for i in range(1, 7) if i != a[0]", "llama3.1-8b-instruct_prob": 0.5111924369760055, "gpt-3.5-turbo_response": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = defaultdict(int)\n    for i in range(N-1):\n        count[(A[i], A[i+1])] += 1\n    if count[(1, 2)] + count[(2, 3)] + count[(3, 4)] + count[(4, 5)] + count[(5", "gpt-3.5-turbo_prob": 0.4888075630239944}
{"id": "749", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef find(x):\n    if parent[x] != x:\n        parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x = find(x)\n    y = find(y)\n    if x != y:\n        parent[y] = x\n        return True\n    return False\n\nN = int(input())\nparent = [i for i in range(N+1)]\ncosts = []\nfor _ in range(N", "llama3.1-8b-instruct_prob": 0.37695475352007024, "gpt-3.5-turbo_response": "```python\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ngraph = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += min(graph[i][j], graph[j][i])\nprint(ans)\n```", "gpt-3.5-turbo_prob": 0.6230452464799298}
{"id": "75", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(math.ceil((2 * n) / math.tan(math.pi / n)))", "llama3.1-8b-instruct_prob": 0.3934878914992042, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(1 / math.cos(math.pi / (2 * n)))\n```", "gpt-3.5-turbo_prob": 0.6065121085007957}
{"id": "750", "llama3.1-8b-instruct_response": "```python\ndef is_ambiguous(n, permutation):\n    original = [0] * (n + 1)\n    inverse = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        original[permutation[i - 1] - 1] = i\n\n    for i in range(1, n + 1):\n        inverse[original[i - 1]] = i\n\n    for i in range(1,", "llama3.1-8b-instruct_prob": 0.2896769467294363, "gpt-3.5-turbo_response": "```python\ndef is_ambiguous(n, permutation):\n    inverse_permutation = [0] * n\n    for i in range(n):\n        inverse_permutation[int(permutation[i]) - 1] = i + 1\n    if permutation == inverse_permutation:\n        return 'ambiguous'\n    else:\n        return 'not ambiguous'\n```", "gpt-3.5-turbo_prob": 0.7103230532705637}
{"id": "751", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    x = list(map(int, input().split()))\n    ans = 0\n    prev = -1\n    for i in range(n):\n        if s[i] == '0':\n            if prev != -1:\n                ans += x[i] - prev\n            prev = x[i]\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5239325990232405, "gpt-3.5-turbo_response": "```python\ndef min_wire_length(T, test_cases):\n    result = []\n    for i in range(T):\n        n = int(test_cases[i*3])\n        electricity = test_cases[i*3+1]\n        coordinates = list(map(int, test_cases[i*3+2].split()))\n        non_electric_villages = [coordinates[j+1]-coordinates[j] for j in range(n-1) if electricity[j] == '0']\n        result.append(str(sum(non", "gpt-3.5-turbo_prob": 0.4760674009767595}
{"id": "752", "llama3.1-8b-instruct_response": "```python\nn, q = map(int, input().split())\nmedia_types = {}\nfor _ in range(n):\n    ext, media = input().split()\n    media_types[ext] = media\n\nfor _ in range(q):\n    file_name = input()\n    file_ext = file_name.split('.')[-1]\n    print(media_types.get(file_ext, 'unknown'))\n```", "llama3.1-8b-instruct_prob": 0.32324104508407026, "gpt-3.5-turbo_response": "```python\nN, Q = map(int, input().split())\nmedia_types = {}\nfor _ in range(N):\n    ext, media = input().split()\n    media_types[ext] = media\nfor _ in range(Q):\n    file_name = input()\n    ext = file_name.split('.')[-1] if '.' in file_name else ''\n    print(media_types.get(ext, 'unknown'))\n```", "gpt-3.5-turbo_prob": 0.6767589549159296}
{"id": "753", "llama3.1-8b-instruct_response": "def f(MG, MY, MR, OG, OY, OR, PG, PY, PR):\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (MG if i == 0 else OG if i == 1 else PG) + (MY if j == 0 else OY if j == 1 else PY) + (MR if k == 0 else OR if k == 1 else", "llama3.1-8b-instruct_prob": 0.47986268510914365, "gpt-3.5-turbo_response": "def max_nice_bouquet(T, cases):\n    result = []\n    for case in cases:\n        mg, my, mr = map(int, case[0].split())\n        og, oy, or_ = map(int, case[1].split())\n        pg, py, pr = map(int, case[2].split())\n        max_leaves = max(mg, my, mr) + max(og, oy, or_) + max(pg, py, pr)\n", "gpt-3.5-turbo_prob": 0.5201373148908564}
{"id": "754", "llama3.1-8b-instruct_response": "```python\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if sum(int(digit) for digit in str(n)) % 2 == 0 or n % 2 == 0:\n        print(1)\n    else:\n        print(0)\n```", "llama3.1-8b-instruct_prob": 0.5445891818901281, "gpt-3.5-turbo_response": "```python\ndef check_divisibility(N):\n    if int(N) % 2 == 0:\n        return 1\n    else:\n        return 0\n\nT = int(input())\nfor _ in range(T):\n    N = input()\n    print(check_divisibility(N))\n```", "gpt-3.5-turbo_prob": 0.4554108181098719}
{"id": "755", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_k(arr):\n    k = arr[0]\n    for num in arr[1:]:\n        k = gcd(k, num)\n    return k\n\ndef find_all_k(arr):\n    k = find_k(arr)\n    result = []\n    for i in range(2, int(k ** 0.5) + 1):\n        if k % i ==", "llama3.1-8b-instruct_prob": 0.4866968294806635, "gpt-3.5-turbo_response": "arr = [38, 6, 34]\nresult = []\nfor i in range(2, max(arr)):\n    if all(x % i == arr[0] % i for x in arr):\n        result.append(i)\nprint(*result)", "gpt-3.5-turbo_prob": 0.5133031705193365}
{"id": "756", "llama3.1-8b-instruct_response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nt =", "llama3.1-8b-instruct_prob": 0.4642425838459614, "gpt-3.5-turbo_response": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef min_potatoes_for_prime(x, y):\n    total = x + y\n    if is_prime(total):\n        return 0\n    else:\n        i = 1\n        while not is_prime(total +", "gpt-3.5-turbo_prob": 0.5357574161540386}
{"id": "757", "llama3.1-8b-instruct_response": "def is_clingy(n, s):\n    vowels = 'AEIOU'\n    for i in range(n):\n        t = s[i:] + s[:i]\n        if any(t[j] in vowels and t[j+1] in vowels for j in range(n-1)):\n            return 'Yes'\n    return 'No'\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(is_clingy(n, s", "llama3.1-8b-instruct_prob": 0.43377216941012486, "gpt-3.5-turbo_response": "```python\ndef is_clingy(s):\n    vowels = set('AEIOU')\n    s += s\n    for i in range(len(s)):\n        if all(c in vowels for c in s[i:i+2]):\n            return 'Yes'\n    return 'No'\n\nT = int(input())\nresults = []\nfor _ in range(T):\n    N = int(input())\n    S = input().strip()\n    results.append(is_clingy(S))\nprint(results)\n```", "gpt-3.5-turbo_prob": 0.5662278305898751}
{"id": "758", "llama3.1-8b-instruct_response": "import math\n\ndef f(x, b, c):\n    return (x**2 + b*x + c) / math.sin(x)\n\ndef solve(b, c):\n    min_val = float('inf')\n    for x in [math.pi/4, math.pi/3, math.pi/2 - 1e-6]:\n        val = f(x, b, c)\n        if val < min_val:\n            min_val = val\n    return round(min_val, 6)\n\n", "llama3.1-8b-instruct_prob": 0.6334887009827583, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    b, c = map(float, input().split())\n    print(min((x**2 + b*x + c) / math.sin(x) for x in (0.000001, 0.000002, 0.000003, 0.000004, 0.000005, 0.000006, 0.000007, 0.000008, 0", "gpt-3.5-turbo_prob": 0.3665112990172417}
{"id": "759", "llama3.1-8b-instruct_response": "def prime_factors(n):\n    i = 2\n    factors = {}\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\nt = int(input())\nfor _ in range(t):\n    n =", "llama3.1-8b-instruct_prob": 0.4754350266732188, "gpt-3.5-turbo_response": "```python\nimport math\n\ndef largest_prime_factor(n):\n    while n % 2 == 0:\n        n = n // 2\n    max_prime = 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime\n\nt = int", "gpt-3.5-turbo_prob": 0.5245649733267812}
{"id": "76", "llama3.1-8b-instruct_response": "def is_beautiful(n):\n    return n % 2 == 0 or n == 3\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(\"YES\" if is_beautiful(n) else \"NO\")", "llama3.1-8b-instruct_prob": 0.48555222988397007, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.5144477701160299}
{"id": "761", "llama3.1-8b-instruct_response": "import heapq\nimport sys\n\nfor _ in range(int(input())):\n    n, k, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n\n    pq = []\n    for i in range(k):\n        heapq.heappush(pq, -c[i])\n\n    ans = 0", "llama3.1-8b-instruct_prob": 0.5345834980347192, "gpt-3.5-turbo_response": "def min_uncompleted_tasks(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K, M = map(int, case[0].split())\n        A = list(map(int, case[1].split()))\n        B = list(map(int, case[2].split()))\n        white_buttons = list(map(int, case[3].split()))\n        black_buttons = list(map(int, case[4].split()))\n        \n        uncompleted_tasks = 0\n", "gpt-3.5-turbo_prob": 0.46541650196528084}
{"id": "762", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    pattern = ''\n    for i in range(k):\n        pattern += '1' if i % 2 == 0 else '0'\n        if i < k - 1:\n            pattern += ' '\n    for i in range(k):\n        pattern += '1' if (i + 1) % 2 == 0 else '0'\n        if i < k - ", "llama3.1-8b-instruct_prob": 0.30960146257558513, "gpt-3.5-turbo_response": "```python\ndef generate_pattern(K):\n    pattern = ''\n    for i in range(1, K+1):\n        if i % 2 == 0:\n            pattern += '0' * (i-1) + '1' + ' '\n        else:\n            pattern += '1' + '0' * (i-1) + ' '\n    return pattern.strip()\n```", "gpt-3.5-turbo_prob": 0.6903985374244148}
{"id": "763", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    p = input()\n    ones_s = s.count('1')\n    ones_p = p.count('1')\n    if ones_s != ones_p:\n        print('No')\n        return\n    for i in range(n):\n        if s[i] == '1' and p[i] == '0':\n            print('No')\n            return\n    print('Yes')\n\nt = int(input())\nfor _ in range(t", "llama3.1-8b-instruct_prob": 0.5062561710728236, "gpt-3.5-turbo_response": "```python\ndef can_convert(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 3):\n        N = int(test_cases[i])\n        S = test_cases[i+1]\n        P = test_cases[i+2]\n        if S.count('1') != P.count('1'):\n            results.append('No')\n        else:\n            indices_S = [i for i, c in enumerate(S) if c == '1']\n            indices", "gpt-3.5-turbo_prob": 0.4937438289271764}
{"id": "764", "llama3.1-8b-instruct_response": "```python\ndef check_similarity():\n    t = int(input())\n    for _ in range(t):\n        dish1 = input().split()\n        dish2 = input().split()\n        common = set(dish1) & set(dish2)\n        if len(common) >= 2:\n            print(\"similar\")\n        else:\n            print(\"dissimilar\")\n\ncheck_similarity()\n```", "llama3.1-8b-instruct_prob": 0.48955653673772437, "gpt-3.5-turbo_response": "```python\ndef check_similarity(ingredients1, ingredients2):\n    common_ingredients = set(ingredients1) & set(ingredients2)\n    if len(common_ingredients) >= 2:\n        return \"similar\"\n    else:\n        return \"dissimilar\"\n\nT = int(input())\nresults = []\nfor _ in range(T):\n    dish1 = input().split()\n    dish2 = input().split()\n    results.append(check_similarity(dish1, dish2))\n\nprint(results)\n", "gpt-3.5-turbo_prob": 0.5104434632622756}
{"id": "765", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\n\ndef qpow(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % mod\n        a = a * a % mod\n        b >>= 1\n    return res\n\ndef update(x, y):\n    i = x\n    while i <= n:\n        tree[i] = tree[i] * y % mod", "llama3.1-8b-instruct_prob": 0.5335640995548081, "gpt-3.5-turbo_response": "```python\ndef chef_trip(N, cities, queries):\n    enjoyment = 1\n    for i in range(1, N+1, R):\n        enjoyment = (enjoyment * cities[i-1]) % (10**9 + 7)\n    return str(enjoyment)[0], enjoyment\n```", "gpt-3.5-turbo_prob": 0.4664359004451918}
{"id": "766", "llama3.1-8b-instruct_response": "def max_min_area(arr):\n    arr.sort()\n    max_area = max(arr[-1] * arr[-2], arr[0] * arr[1])\n    min_area = min(arr[-1] * arr[-2], arr[0] * arr[1])\n    return f\"{max_area} {min_area}\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(max_min_area", "llama3.1-8b-instruct_prob": 0.45833715208998616, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    max_area = max(arr[-1]*arr[-2], arr[0]*arr[1])\n    min_area = min(arr[0]*arr[1], arr[1]*arr[2])\n    print(max_area, min_area)\n```", "gpt-3.5-turbo_prob": 0.5416628479100138}
{"id": "767", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    for j in range(i):\n        dp[i] = max(dp[i], dp[j] + a[j][0] + a[j][1] + a[i - 1][2] if", "llama3.1-8b-instruct_prob": 0.44821993827227113, "gpt-3.5-turbo_response": "```python\nn = int(input())\ntimes = [list(map(int, input().split())) for _ in range(n)]\ntimes.sort(key=lambda x: x[0] + x[1] + x[2])\nresult = max(sum(times[i]) + sum(times[j][1:]) for i, j in zip(range(n), range(n-1, -1, -1)))\nprint(result)\n```", "gpt-3.5-turbo_prob": 0.5517800617277289}
{"id": "768", "llama3.1-8b-instruct_response": "def dfs(node, parent, n, graph, dp, visited):\n    visited[node] = True\n    dp[node] = 1\n    for child in graph[node]:\n        if not visited[child]:\n            dfs(child, node, n, graph, dp, visited)\n            dp[node] += dp[child]\n\ndef solve(n, graph):\n    dp = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    dfs(1", "llama3.1-8b-instruct_prob": 0.48555222650004004, "gpt-3.5-turbo_response": "```python\ndef solve(N, parents):\n    return N - 1 + sum(parents)\n```", "gpt-3.5-turbo_prob": 0.51444777349996}
{"id": "769", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print(gcd(a, b))", "llama3.1-8b-instruct_prob": 0.47687936458714897, "gpt-3.5-turbo_response": "```python\nfrom math import gcd\nfor _ in range(int(input())):\n    a, b = map(int, input().split())\n    print(gcd(a, b))\n```", "gpt-3.5-turbo_prob": 0.523120635412851}
{"id": "770", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0 if a[0] % 2 else -sys.maxsize\n    for i in range(1, n):\n        if a[i] % 2:\n            dp[i + 1] = max(dp[i + 1", "llama3.1-8b-instruct_prob": 0.5485189074881215, "gpt-3.5-turbo_response": "```python\ndef max_valid_subsequence_sum(T, test_cases):\n    results = []\n    for case in test_cases:\n        n, k = map(int, case[0].split())\n        arr = list(map(int, case[1].split()))\n        even = []\n        odd = []\n        for i in range(n):\n            if arr[i] % 2 == 0:\n                even.append(arr[i])\n            else:\n                odd.append(arr[i])\n        even.sort(reverse=True)\n", "gpt-3.5-turbo_prob": 0.4514810925118785}
{"id": "771", "llama3.1-8b-instruct_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    m, f = map(int, input().split())\n    si = list(map(int, input().split()))\n    multan_wins = sum(1 for s in si if s % m == 0 and s % f != 0)\n    fultan_wins = sum(1 for s in si if s % m != 0 and s % f == 0)\n    total_wins", "llama3.1-8b-instruct_prob": 0.5245649736640565, "gpt-3.5-turbo_response": "```python\ndef wrestler_performance(T, N, strengths, challengers):\n    for i in range(T):\n        M, F = map(int, strengths[i].split())\n        total_challengers = N[i]\n        multan_wins = sum(1 for s in challengers[i] if s % M == 0)\n        fultan_wins = sum(1 for s in challengers[i] if s % F == 0)\n        total_wins = multan_w", "gpt-3.5-turbo_prob": 0.4754350263359434}
{"id": "773", "llama3.1-8b-instruct_response": "def find_smallest_good_permutation(n):\n    result = [2]\n    for i in range(3, n + 1):\n        if i - 1 not in result:\n            result.append(i)\n        else:\n            result.append(i - 1)\n    return ' '.join(map(str, result))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(find_smallest_good_permutation(n))", "llama3.1-8b-instruct_prob": 0.5580047737659042, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    print(*range(2, n+1), 1)", "gpt-3.5-turbo_prob": 0.4419952262340958}
{"id": "774", "llama3.1-8b-instruct_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass Node:\n    def __init__(self, x):\n        self.x = x\n        self.left = None\n        self.right = None\n\ndef insert(root, x, k):\n    if not root:\n        return Node(x)\n    if x - root.x <= k:\n        if not root.left:\n            root.left = Node(x)\n        else:\n            insert(root.left, x, k)\n    else:\n        if not", "llama3.1-8b-instruct_prob": 0.3613500745715792, "gpt-3.5-turbo_response": "```python\ndef can_frogs_speak(N, K, P, coordinates, pairs):\n    coordinates.sort()\n    for pair in pairs:\n        if abs(coordinates[pair[0]-1] - coordinates[pair[1]-1]) <= K:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n```", "gpt-3.5-turbo_prob": 0.6386499254284208}
{"id": "776", "llama3.1-8b-instruct_response": "def solve(D):\n    if D % 2 == 0:\n        N = D // 2 + 1\n        A = [1] * N\n        for i in range(1, N):\n            A[i] = A[i - 1] * 2\n        return str(N) + '\\n' + ' '.join(map(str, A))\n    else:\n        N = D // 2 + 2\n        A = [1] * N\n", "llama3.1-8b-instruct_prob": 0.43377217566894133, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    D = int(input())\n    N = 1\n    while N*(N+1)//2 < D:\n        N += 1\n    rem = N*(N+1)//2 - D\n    ans = [N-rem] * (N-rem) + [N] * (rem)\n    print(N)\n    print(*ans)", "gpt-3.5-turbo_prob": 0.5662278243310587}
{"id": "777", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    r1, h1, r2, h2 = map(float, input().split())\n    cone_volume = (1.0/3) * math.pi * r1**2 * h1 + (1.0/2) * math.pi * r1**3\n    cylinder_volume = math.pi * r2**2 * h2\n    print(f\"{cone_volume:.6f} {c", "llama3.1-8b-instruct_prob": 0.5691959864082214, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    r1, h1, r2, h2 = map(float, input().split())\n    volume1 = (1/3) * math.pi * r1**2 * h1 + (1/2) * math.pi * r1**2\n    volume2 = math.pi * r2**2 * h2\n    print(round(volume1, 6), round(volume2,", "gpt-3.5-turbo_prob": 0.43080401359177856}
{"id": "778", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    reversed_n = int(str(n)[::-1])\n    print(reversed_n)\n```", "llama3.1-8b-instruct_prob": 0.4754350263359434, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(n[::-1])", "gpt-3.5-turbo_prob": 0.5245649736640565}
{"id": "779", "llama3.1-8b-instruct_response": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = a[0]\n    for i in range(1, n):\n        ans = math.gcd(ans, a[i])\n    print((a[0] // ans) * ans)", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\nimport heapq\n\ndef min_poison_concentration(N, concentrations):\n    heapq.heapify(concentrations)\n    min_concentration = 0\n    while len(concentrations) > 1:\n        a = heapq.heappop(concentrations)\n        b = heapq.heappop(concentrations)\n        new_concentration = (a + b) / 2\n        heapq.heappush(concentrations, new_concentration)\n    return '{", "gpt-3.5-turbo_prob": 0.5}
{"id": "78", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(input().strip())\n    ans = n + m\n    for i in range(n):\n        cnt = 0\n        for j in range(m):\n            if grid[i][j] == '*':\n                cnt += 1\n        if cnt == m:\n            ans = min(ans, cnt)\n   ", "llama3.1-8b-instruct_prob": 0.5580047767004154, "gpt-3.5-turbo_response": "```python\nq = int(input())\nfor _ in range(q):\n    n, m = map(int, input().split())\n    picture = [input() for _ in range(n)]\n    rows = [0] * n\n    cols = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if picture[i][j] == '*':\n                rows[i] += 1\n                cols[j] += 1\n    ans = n", "gpt-3.5-turbo_prob": 0.4419952232995846}
{"id": "780", "llama3.1-8b-instruct_response": "def solve(N, M):\n    return \"EVEN\" if N % M == 0 else \"ODD\"\n\nt = int(input())\nfor _ in range(t):\n    N, M = map(int, input().split())\n    print(solve(N, M))", "llama3.1-8b-instruct_prob": 0.48736321564974733, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    if (N % M) % 2 == 0:\n        print(\"EVEN\")\n    else:\n        print(\"ODD\")\n```", "gpt-3.5-turbo_prob": 0.5126367843502526}
{"id": "782", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    cost = list(map(int, input().split()))\n    w, y = map(int, input().split())\n    cost.sort()\n    total_cost = 0\n    for i in range(y):\n        if w >= cost[i]:\n            w -= cost[i]\n            total_cost += cost[i]\n        else:\n            break\n    if w > 0:\n        print(\"Not Possible\")\n    else:\n        print(total_cost)\n\nt = int", "llama3.1-8b-instruct_prob": 0.45513205240413684, "gpt-3.5-turbo_response": "```python\ndef prepare_ice_cream(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        flavours = list(map(int, test_cases[i+1].split()))\n        W, Y = map(int, test_cases[i+2].split())\n        flavours.sort()\n        if Y > N or W < Y:\n            results.append(\"Not Possible\")\n        else:\n            total_cost =", "gpt-3.5-turbo_prob": 0.5448679475958631}
{"id": "783", "llama3.1-8b-instruct_response": "import math\n\ndef solve():\n    px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r = map(float, input().split())\n    a = dx**2 + dy**2\n    b = 2 * (qx - px) * dx + 2 * (qy - py) * dy\n    c = (qx - px)**2 + (qy - py)**2 - (r**", "llama3.1-8b-instruct_prob": 0.5517800515759386, "gpt-3.5-turbo_response": "```python\nimport math\n\nT = int(input())\nfor _ in range(T):\n    Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, cx, cy, cz, r = map(int, input().split())\n    A = (Qx - Px) - dx * ((Qx - Px) * dx + (Qy - Py) * dy + (Qz - Pz) * dz) / (dx**2", "gpt-3.5-turbo_prob": 0.4482199484240614}
{"id": "784", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m, p = map(int, input().split())\n    a = [[j for j in range(1, m + 1)] for _ in range(n)]\n    for _ in range(p):\n        i, j = map(int, input().split())\n        a[i - 1][j - 1] += 1\n    ans = []\n    for i in range(n):\n        j = m -", "llama3.1-8b-instruct_prob": 0.500000000939736, "gpt-3.5-turbo_response": "```python\nn, m, p = map(int, input().split())\nmatrix = [[j for j in range(1, m+1)] for i in range(n)]\nfor _ in range(p):\n    i, j = map(int, input().split())\n    matrix[i-1][j-1] += 1\nfor row in matrix:\n    cost = 0\n    prev = row[-1]\n    for elem in reversed(row[:-1]):\n        if elem <=", "gpt-3.5-turbo_prob": 0.4999999990602641}
{"id": "785", "llama3.1-8b-instruct_response": "def solve(A):\n    D1 = 0\n    D2 = 0\n    max_profit = 0\n    max_D = 0\n    for i in range(1, 31):\n        profit = A - (2 ** (i - 1))\n        if profit > 0 and D1 == 0:\n            D1 = i\n        if profit > max_profit:\n            max_profit = profit\n            max_D = i\n        if profit <= ", "llama3.1-8b-instruct_prob": 0.4104106471654151, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    A = int(input())\n    D1 = 0\n    while A > 0:\n        D1 += 1\n        A -= 2**(D1-1)\n    D2 = D1 - 1\n    print(D1, D2)\n```", "gpt-3.5-turbo_prob": 0.5895893528345849}
{"id": "786", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    result = 1\n    for i in range(1, n):\n        result = result * 6 + 1\n    print(result)", "llama3.1-8b-instruct_prob": 0.2293657247423917, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = int('1' + bin(N-1)[2:], 6)\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.7706342752576083}
{"id": "787", "llama3.1-8b-instruct_response": "def solve(s):\n    n = len(s)\n    i = 0\n    ans = 0\n    while i < n:\n        j = i\n        while j < n - 1 and s[j + 1] == '0':\n            j += 1\n        if j < n - 1:\n            k = j\n            while k < n - 1 and s[k + 1] == '1':\n                k += 1\n            ans +=", "llama3.1-8b-instruct_prob": 0.42184757471682494, "gpt-3.5-turbo_response": "def max_play_time(T, test_cases):\n    result = []\n    for case in test_cases:\n        soldiers = case.count('1')\n        empty_cells = case.count('0')\n        result.append(soldiers + empty_cells)\n    return result", "gpt-3.5-turbo_prob": 0.578152425283175}
{"id": "788", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n // 10**len(str(n)) + n % 10))", "llama3.1-8b-instruct_prob": 0.376954750940608, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = input()\n    print(int(n[0]) + int(n[-1]))", "gpt-3.5-turbo_prob": 0.6230452490593921}
{"id": "789", "llama3.1-8b-instruct_response": "def powmod(base, exponent, mod):\n    result = 1\n    base = base % mod\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % mod\n        exponent = exponent >> 1\n        base = (base * base) % mod\n    return result\n\ndef solve():\n    mod = 1000000007\n    m, r = map(int, input().split())\n    n =", "llama3.1-8b-instruct_prob": 0.5585010926510205, "gpt-3.5-turbo_response": "```python\nT = 1\ntestcases = [(2, 2)]\n```", "gpt-3.5-turbo_prob": 0.44149890734897945}
{"id": "790", "llama3.1-8b-instruct_response": "class SegmentTree:\n    def __init__(self, n, c):\n        self.n = n\n        self.c = c\n        self.tree = [[0, 0] for _ in range(4 * n)]\n\n    def update(self, p, k):\n        self._update(1, 1, self.n, p, k)\n\n    def query(self, p):\n        return self._query(1, 1, self.n, p)\n\n    def _update(self", "llama3.1-8b-instruct_prob": 0.4414988976083141, "gpt-3.5-turbo_response": "```python\nn, m, c = map(int, input().split())\ngravel = [c] * n\nfor _ in range(m):\n    op = input().split()\n    if op[0] == 'S':\n        u, v, k = map(int, op[1:])\n        for i in range(u-1, v):\n            gravel[i] += k\n    else:\n        p = int(op[1]) - 1\n        print(gravel[p", "gpt-3.5-turbo_prob": 0.5585011023916858}
{"id": "791", "llama3.1-8b-instruct_response": "def min_moves(n, d, arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    target = min(freq.keys())\n    moves = 0\n    for num in freq:\n        moves += (num - target) // d * freq[num]\n\n    return moves if moves >= (max(freq.keys()) - target) else -1\n\nt = int(input())\nfor _ in range(t):\n    n,", "llama3.1-8b-instruct_prob": 0.4910454692836851, "gpt-3.5-turbo_response": "```python\ndef min_moves_to_equal_array(T, test_cases):\n    results = []\n    for i in range(T):\n        N, D = map(int, test_cases[i][0].split())\n        A = list(map(int, test_cases[i][1].split()))\n        total_sum = sum(A)\n        if total_sum % N != 0:\n            results.append(-1)\n        else:\n            target = total_sum // N\n            moves = 0\n            for j in", "gpt-3.5-turbo_prob": 0.5089545307163149}
{"id": "792", "llama3.1-8b-instruct_response": "def solve():\n    MOD = 10**9 + 7\n    n, s = input().split()\n    n = int(n)\n    freq = [0] * 26\n    for c in s:\n        freq[ord(c) - ord('a')] += 1\n    ans = 1\n    for f in freq:\n        ans = (ans * (f + 1)) % MOD\n    return str(ans)\n\nt = int(input())\nfor _ in", "llama3.1-8b-instruct_prob": 0.5283596872336576, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, S = input().split()\n    result = pow(26, int(N), 10**9 + 7) - 1\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.47164031276634233}
{"id": "793", "llama3.1-8b-instruct_response": "def max_drone_steps():\n    n, R = map(int, input().split())\n    houses = list(map(int, input().split()))\n    houses.sort()\n    left, right = 0, R\n    while left < right:\n        mid = (left + right) // 2\n        if can_deliver(houses, R, mid):\n            left = mid + 1\n        else:\n            right = mid\n    return left - 1\n\ndef can_deliver", "llama3.1-8b-instruct_prob": 0.38447070482550544, "gpt-3.5-turbo_response": "```python\nn, R = map(int, input().split())\nhomes = list(map(int, input().split()))\nhomes.sort()\nmax_x = max(homes[0] - R, R - homes[-1])\nfor i in range(1, n):\n    max_x = max(max_x, homes[i] - homes[i-1])\nprint(max_x)\n```", "gpt-3.5-turbo_prob": 0.6155292951744946}
{"id": "794", "llama3.1-8b-instruct_response": "def dfs(graph, node, parent, visited, dist):\n    visited[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dist[neighbor] = dist[node] + 1\n            dfs(graph, neighbor, node, visited, dist)\n\ndef solve():\n    MOD = 10**9 + 7\n    t = int(input())\n    for _ in range(t):\n        n, m = map(int, input().split())\n        a =", "llama3.1-8b-instruct_prob": 0.6008091926481332, "gpt-3.5-turbo_response": "```python\n# Not applicable\n```", "gpt-3.5-turbo_prob": 0.3991908073518668}
{"id": "795", "llama3.1-8b-instruct_response": "def solve():\n    n, k, l = map(int, input().split())\n    if n > k * l or (n - 1) // 2 + 1 > l:\n        print(-1)\n        return\n    ans = [0] * n\n    for i in range(0, n, 2):\n        ans[i] = (i // 2) % l + 1\n    for i in range(1, n, 2):\n", "llama3.1-8b-instruct_prob": 0.4626735350018606, "gpt-3.5-turbo_response": "```python\ndef assign_bowlers(T, cases):\n    results = []\n    for case in cases:\n        N, K, L = map(int, case.split())\n        if K * L < N or (K == 1 and N > 1):\n            results.append(\"-1\")\n        else:\n            bowlers = [str(i % K + 1) for i in range(N)]\n            results.append(\" \".join(bowlers))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5373264649981395}
{"id": "796", "llama3.1-8b-instruct_response": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = [1] * n\n        for i in range(1, n):\n            if a[i] * a[i - 1] > 0:\n                ans[i] = ans[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n           ", "llama3.1-8b-instruct_prob": 0.34757036538818387, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = [1] * n\n    for i in range(1, n):\n        if arr[i] * arr[i-1] < 0:\n            result[i] = result[i-1] + 1\n    print(*result)", "gpt-3.5-turbo_prob": 0.6524296346118161}
{"id": "797", "llama3.1-8b-instruct_response": "```python\nweekdays = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n\ndef solve():\n    S, E, L, R = input().split()\n    S, E = weekdays.index(S), weekdays.index(E)\n    L, R = int(L), int(R)\n\n    if S > E:\n        S, E = E, S\n\n    if S == E and R - L == ", "llama3.1-8b-instruct_prob": 0.46213185290699393, "gpt-3.5-turbo_response": "```python\ndef duration_of_competition(S, E, L, R):\n    days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    start = days.index(S)\n    end = days.index(E)\n    duration = end - start + 1 if end >= start else end - start + 8\n    if duration < L or duration > R:\n        return \"impossible\"\n    elif", "gpt-3.5-turbo_prob": 0.537868147093006}
{"id": "799", "llama3.1-8b-instruct_response": "n = int(input())\n\ncount = 0\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    if a + b + c >= 2:\n        count += 1\n\nprint(count)", "llama3.1-8b-instruct_prob": 0.5335641036847284, "gpt-3.5-turbo_response": "n = int(input())\ncount = 0\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    if a + b + c >= 2:\n        count += 1\nprint(count)", "gpt-3.5-turbo_prob": 0.46643589631527155}
{"id": "8", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    w = s.count('W')\n    l = s.count('L')\n    if w >= n:\n        print(n)\n        return\n    if k >= l:\n        print(n)\n        return\n    ans = 0\n    i = 0\n    while i < n and k > 0 and s[i] == 'L':\n        i += 1\n        k", "llama3.1-8b-instruct_prob": 0.48955654393876924, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    s = input()\n    score = s.count('W')\n    diff = 0\n    for i in range(n):\n        if s[i] == 'W' and (i == 0 or s[i-1] == 'W'):\n            diff += 1\n        if s[i] == 'L':\n            diff -= 1\n    diff", "gpt-3.5-turbo_prob": 0.5104434560612308}
{"id": "80", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    if l == r:\n        print(0)\n    else:\n        ans = (r - l + 1) * (r - l + 1) - (r - l + 1)\n        print(ans)", "llama3.1-8b-instruct_prob": 0.40793567362143357, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    l, r = map(int, input().split())\n    if l == r:\n        print(0)\n    else:\n        x = r - l\n        bit = 0\n        while x > 0:\n            bit += 1\n            x >>= 1\n        print((1 << bit) - 1)\n```", "gpt-3.5-turbo_prob": 0.5920643263785664}
{"id": "800", "llama3.1-8b-instruct_response": "n = int(input())\narr = list(map(int, input().split()))\nprint(max(arr), min(arr))", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "n = int(input())\narr = list(map(int, input().split()))\nprint(max(arr), min(arr))", "gpt-3.5-turbo_prob": 0.5}
{"id": "805", "llama3.1-8b-instruct_response": "def max_profit():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        max_profit = 0\n        for _ in range(n):\n            s, p, v = map(int, input().split())\n            profit = (p // s) * v\n            max_profit = max(max_profit, profit)\n        print(max_profit)\n\nmax_profit()", "llama3.1-8b-instruct_prob": 0.4855778555796361, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    max_profit = 0\n    for _ in range(N):\n        S, P, V = map(int, input().split())\n        profit = (P // (S + 1)) * V\n        max_profit = max(max_profit, profit)\n    print(max_profit)\n```", "gpt-3.5-turbo_prob": 0.5144221444203638}
{"id": "807", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef compare(B, C):\n    n = len(B)\n    B += [0] * (n - len(B))\n    C += [0] * (n - len(C))\n    for i in range(n):\n        if B[i] < C[i]:\n            return -1\n        elif B[i] > C[i]:\n            return 1\n    return 0\n\ndef solve():\n    n, m = map(int, input().", "llama3.1-8b-instruct_prob": 0.4664358975154457, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_right\n\ndef max_element_in_subarray(arr, p):\n    subarrays = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarrays.append(sorted(arr[i:j], reverse=True))\n    subarrays.sort(key=lambda x: [-x[i] if i < len(x) else float('-inf') for i in range(len(arr))])\n    return subarrays[p-1][0", "gpt-3.5-turbo_prob": 0.5335641024845543}
{"id": "808", "llama3.1-8b-instruct_response": "def find_lcm(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_num = n\n    for i in range(n, 1, -1):\n        for j in range(i, 1, -1):\n            lcm = i * j // gcd(i, j)\n            for k in range(lcm, 1, -1):\n                if k > max_num:\n                    break\n", "llama3.1-8b-instruct_prob": 0.3688660239981194, "gpt-3.5-turbo_response": "```python\nfrom math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n * (n - 1) * (n - 2))\n    else:\n        print(lcm(lcm(n, n - 1), n - 2))\n```", "gpt-3.5-turbo_prob": 0.6311339760018806}
{"id": "809", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if a[j] > a[i] and a[n - 1] > a[j] - a[i]:\n                print('YES')\n                print(a[n - 1], a[j], a[i])\n                return", "llama3.1-8b-instruct_prob": 0.4910454675840664, "gpt-3.5-turbo_response": "```python\ndef find_largest_triplet(N, sticks):\n    sticks.sort(reverse=True)\n    for i in range(N-2):\n        if sticks[i] < sticks[i+1] + sticks[i+2]:\n            return \"YES\", f\"{sticks[i]} {sticks[i+1]} {sticks[i+2]}\"\n    return \"NO\", \"\"\n```", "gpt-3.5-turbo_prob": 0.5089545324159336}
{"id": "81", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a = input()\n    b = input()\n    c = input()\n\n    flag = True\n    for i in range(len(a)):\n        if a[i] != c[i] and b[i] != c[i]:\n            flag = False\n            break\n\n    print(\"YES\" if flag else \"NO\")", "llama3.1-8b-instruct_prob": 0.50000000338393, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    c = input()\n    if all((a[i] == c[i] or b[i] == c[i]) for i in range(len(a))):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.49999999661607}
{"id": "810", "llama3.1-8b-instruct_response": "```python\nfrom bisect import bisect_left\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[-1, -1] for _ in range(4 * n)]\n\n    def update(self, idx, val):\n        self._update(1, 0, self.n - 1, idx, val)\n\n    def _update(self, node, start, end, idx, val):\n        if start == end", "llama3.1-8b-instruct_prob": 0.44344078915279295, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_right\n\ndef find_nearest_peak(arr, x):\n    idx = bisect_right(arr, x)\n    if idx < len(arr):\n        return arr[idx]\n    else:\n        return -1\n\ndef update_mountain(arr, idx, val):\n    arr[idx] = val\n    return arr\n\nT = 1\ntest_cases = [\n    (10, 5, [1, 3, 5, 4, ", "gpt-3.5-turbo_prob": 0.556559210847207}
{"id": "811", "llama3.1-8b-instruct_response": "n, k = map(int, input().split())\nnums = list(map(int, input().split()))\n\ndp = [[0] * (n + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        if j == 1:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1", "llama3.1-8b-instruct_prob": 0.41041065365919194, "gpt-3.5-turbo_response": "```python\ndef max_score(N, k, sequence):\n    forward_sum = sum(sequence[k:])\n    backward_sum = sum(sequence[:k-1])\n    return max(forward_sum, backward_sum)\n```", "gpt-3.5-turbo_prob": 0.5895893463408081}
{"id": "812", "llama3.1-8b-instruct_response": "def min_grass(n, D):\n    return sum(abs(i - j) for i, (x, y) in enumerate(zip(D, D[1:])) if x < 0 and y > 0)", "llama3.1-8b-instruct_prob": 0.4036307514951085, "gpt-3.5-turbo_response": "```python\ndef min_grass_units(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        D = test_cases[i][1]\n        total_grass_units = 0\n        distance = 0\n        for d in D:\n            if d < 0:\n                total_grass_units += abs(distance) * abs(d)\n            distance += 1\n        results.append(str(total_grass_units))\n    return", "gpt-3.5-turbo_prob": 0.5963692485048915}
{"id": "813", "llama3.1-8b-instruct_response": "def f(x, A, K):\n    return sum(abs((x - a) ** K) for a in A)\n\ndef find_min_x(N, K, A):\n    min_x = A[0]\n    min_val = float('inf')\n    for x in range(min(A), max(A) + 1):\n        val = f(x, A, K)\n        if val < min_val:\n            min_val = val\n            min_x = x\n    return min_x\n\n", "llama3.1-8b-instruct_prob": 0.5595040348350515, "gpt-3.5-turbo_response": "```python\ndef find_smallest_integer(N, K, A):\n    A.sort()\n    if K % 2 == 0:\n        return A[N // 2 - 1]\n    else:\n        return A[N // 2]\n```", "gpt-3.5-turbo_prob": 0.4404959651649485}
{"id": "814", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        print(\"No\")\n        return\n    if a[1] == 0:\n        print(\"Yes\")\n        return\n    if a[-2] == 0:\n        print(\"Yes\")\n        return\n    for i in range(1, n - 1):\n        if a[i] == 0 and (a[i - 1]", "llama3.1-8b-instruct_prob": 0.499999996666317, "gpt-3.5-turbo_response": "def who_wins(T, cases):\n    result = []\n    for i in range(0, len(cases), 2):\n        N = cases[i]\n        cells = cases[i+1]\n        if N % 2 == 0:\n            result.append(\"No\")\n        else:\n            result.append(\"Yes\")\n    return result", "gpt-3.5-turbo_prob": 0.500000003333683}
{"id": "815", "llama3.1-8b-instruct_response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is", "llama3.1-8b-instruct_prob": 0.4509394248267017, "gpt-3.5-turbo_response": "from collections import deque\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_adjacent_tiles(board, x, y):\n    adjacent_tiles = []\n    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0", "gpt-3.5-turbo_prob": 0.5490605751732983}
{"id": "816", "llama3.1-8b-instruct_response": "m = int(input())\nbooks = list(map(int, input().split()))\nn = int(input())\nregister = list(map(int, input().split()))\nborrowed = [0] * m\nfor i in range(n):\n    for j in range(m):\n        if borrowed[j] == 0 and j + 1 == register[i]:\n            print(books[j])\n            borrowed[j] = 1\n            break", "llama3.1-8b-instruct_prob": 0.3496785930443228, "gpt-3.5-turbo_response": "```python\nM = int(input())\nbooks = list(map(int, input().split()))\nN = int(input())\nregister = [int(input()) for _ in range(N)]\nborrowed_books = [str(books.pop(pos-1)) for pos in register]\nprint('\\n'.join(borrowed_books))\n```", "gpt-3.5-turbo_prob": 0.6503214069556772}
{"id": "817", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = 0\n    ans = 0\n    for i in a:\n        xor ^= i\n    if xor == 0:\n        print(0)\n    else:\n        for i in a:\n            ans += i\n        print(ans - xor)", "llama3.1-8b-instruct_prob": 0.4727849153202578, "gpt-3.5-turbo_response": "```python\nfrom functools import reduce\nfrom operator import xor\n\ndef min_cost_to_gift_date(arr):\n    return reduce(xor, arr)\n```", "gpt-3.5-turbo_prob": 0.5272150846797421}
{"id": "818", "llama3.1-8b-instruct_response": "```python\nimport sys\n\nclass SegmentTree:\n    def __init__(self, n, arr):\n        self.n = n\n        self.tree = [[0, 0] for _ in range(4 * n)]\n        self.build(1, 1, n, arr)\n\n    def build(self, node, start, end, arr):\n        if start == end:\n            self.tree[node] = [arr[start], arr[start] & 1]\n            return\n        mid", "llama3.1-8b-instruct_prob": 0.575677428949097, "gpt-3.5-turbo_response": "```python\ndef bitwise_and_parity(T, test_cases):\n    results = []\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        Q = test_cases[_][2]\n        for i in range(Q):\n            L, R = test_cases[_][3+i]\n            bitwise_and = A[L-1]\n            for j in range(L, R):\n                bitwise_and &= A[j]\n            if bitwise_and %", "gpt-3.5-turbo_prob": 0.424322571050903}
{"id": "819", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    if (x == y) or (x % 2 == y % 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "llama3.1-8b-instruct_prob": 0.556559210847207, "gpt-3.5-turbo_response": "```python\ndef is_task_possible(x, y):\n    if (x + y) % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nT = 2\ntestcases = [(1, 2), (2, 3)]\nfor i in range(T):\n    is_task_possible(testcases[i][0], testcases[i][1])\n```", "gpt-3.5-turbo_prob": 0.443440789152793}
{"id": "82", "llama3.1-8b-instruct_response": "def find_permutation(n, p):\n    p = p[::-1]\n    return ' '.join(map(str, p))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(find_permutation(n, p))", "llama3.1-8b-instruct_prob": 0.38527890142159515, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_prime = list(range(1, n+1))\n    for i in range(1, n-1, 2):\n        p_prime[i], p_prime[i+1] = p_prime[i+1], p_prime[i]\n    print(*p_prime)\n```", "gpt-3.5-turbo_prob": 0.6147210985784048}
{"id": "821", "llama3.1-8b-instruct_response": "import sys\nfrom functools import cmp_to_key\n\ndef cmp(a, b):\n    if a[1] == b[1]:\n        return a[0] - b[0]\n    return a[1] - b[1]\n\ndef solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append([l, r])\n    a.sort(key=cmp_to_key(cmp))\n   ", "llama3.1-8b-instruct_prob": 0.5811241962137674, "gpt-3.5-turbo_response": "```python\ndef solve(n, intervals):\n    result = ''\n    for i in range(n):\n        result += '1' if intervals[i][0] % 2 == 0 else '0'\n    return result\n```", "gpt-3.5-turbo_prob": 0.4188758037862325}
{"id": "822", "llama3.1-8b-instruct_response": "from collections import defaultdict\n\nfor _ in range(int(input().split()[0])):\n    n, m = map(int, input().split())\n    d = defaultdict(int)\n    for _ in range(n):\n        s = input()\n        d[s] += 1\n    for k, v in d.items():\n        d[v] += d.pop(k)\n    print(*d.values())", "llama3.1-8b-instruct_prob": 0.5774215504199339, "gpt-3.5-turbo_response": "```python\ndef count_clones(people):\n    result = []\n    for person in set(people):\n        count = people.count(person)\n        if count > 1:\n            result.append(count)\n    return result\n```", "gpt-3.5-turbo_prob": 0.4225784495800661}
{"id": "823", "llama3.1-8b-instruct_response": "def solve():\n    a, b, c, d = map(int, input().split())\n    s = a + b + c + d\n    if s == 0 or (s != 0 and (a == 0 or b == 0 or c == 0 or d == 0)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5413051540304463, "gpt-3.5-turbo_response": "```python\ndef subset_sum_zero(T, test_cases):\n    results = []\n    for case in test_cases:\n        a, b, c, d = map(int, case.split())\n        if a + b == 0 or a + c == 0 or a + d == 0 or b + c == 0 or b + d == 0 or c + d == 0 or a + b + c == 0 or a + b + d == 0 or", "gpt-3.5-turbo_prob": 0.4586948459695536}
{"id": "825", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    print((n + 1) // 2 + n)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.6747938523020631, "gpt-3.5-turbo_response": "def smallest_possible_M(T, N):\n    result = []\n    for n in N:\n        result.append(n + 1)\n    return result", "gpt-3.5-turbo_prob": 0.3252061476979369}
{"id": "827", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    s = input()\n    a = [0] * (n * k)\n    b = [0] * (n * k)\n    for i in range(n * k):\n        if s[i % n] == 'a':\n            a[i] = 1\n        if s[i % n] == 'b':\n            b[i] = 1\n    ans = 0\n    for i", "llama3.1-8b-instruct_prob": 0.38525326555650796, "gpt-3.5-turbo_response": "```python\ndef count_subsequences(T, cases):\n    results = []\n    for case in cases:\n        N, K, S = case\n        count = 0\n        for i in range(N):\n            if S[i] == 'a':\n                count += S[i+1:].count('b')\n        results.append(count * K)\n    return results\n```", "gpt-3.5-turbo_prob": 0.614746734443492}
{"id": "828", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    due = 0\n    paid = 0\n    for i in range(n):\n        if a[i] == 0:\n            due += 1000\n            paid += 1\n        else:\n            if paid > 0:\n                due += 1100\n                paid -= 1\n            else:\n                due += 100", "llama3.1-8b-instruct_prob": 0.5462008811398325, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    payments = list(map(int, input().split()))\n    total_due = 0\n    late_fee = 0\n    for i in range(n):\n        if payments[i] == 0:\n            total_due += 1000\n            late_fee += 100\n            total_due += late_fee\n    print(total_due)", "gpt-3.5-turbo_prob": 0.45379911886016755}
{"id": "829", "llama3.1-8b-instruct_response": "n = int(input())\nteams = list(map(int, input().split()))\nrevenue = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        revenue += abs(teams[i] - teams[j])\nprint(revenue)", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef total_advertising_revenue(N, strengths):\n    strengths.sort()\n    total_revenue = 0\n    for i in range(N):\n        total_revenue += (N - i - 1) * strengths[i]\n        total_revenue -= i * strengths[i]\n    return total_revenue\n\nN = 4\nstrengths = [3, 10, 3, 5]\nprint(total_advertising_revenue(N, strengths))\n```", "gpt-3.5-turbo_prob": 0.49999999999999994}
{"id": "83", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\n\nfor _ in range(t):\n    x, y, a, b = map(int, input().split())\n    if (y - x) % (a - b):\n        print(-1)\n    else:\n        print((y - x) // (a - b))", "llama3.1-8b-instruct_prob": 0.4188758037862325, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    x, y, a, b = map(int, input().split())\n    if (y - x) % (a + b) == 0:\n        print((y - x) // (a + b))\n    else:\n        print(-1)\n```", "gpt-3.5-turbo_prob": 0.5811241962137674}
{"id": "830", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = input()\n    b = input()\n    if set(b) != set(a):\n        print(-1)\n        return\n    ans = []\n    for i in range(n):\n        if a[i] != b[i]:\n            s = set()\n            for j in range(n):\n                if a[j] <= a[i]:\n                    s.add(j)\n            c = min(a[i], b[i])\n            for j in s:\n                a", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def convert_strings(T, test_cases):\n    results = []\n    for i in range(T):\n        N = test_cases[i][0]\n        A = test_cases[i][1]\n        B = test_cases[i][2]\n        operations = []\n        for j in range(N):\n            if A[j] > B[j]:\n                results.append('-1')\n                break\n            elif A[j] < B[j]:\n                k = j\n                while k < N and A[k] == A", "gpt-3.5-turbo_prob": 0.5}
{"id": "831", "llama3.1-8b-instruct_response": "def solve():\n    n, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [0]\n    for x in a:\n        pre.append((pre[-1] + x) % p)\n    ans = 0\n    cnt = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if (pre[j] - pre[i]) %", "llama3.1-8b-instruct_prob": 0.5448679484521541, "gpt-3.5-turbo_response": "```python\ndef max_segment_score(T, test_cases):\n    results = []\n    for i in range(0, len(test_cases), 2):\n        N, P = map(int, test_cases[i].split())\n        sequence = list(map(int, test_cases[i+1].split()))\n        max_score = 0\n        max_count = 0\n        current_score = 0\n        score_count = {}\n        for num in sequence:\n            current_score = (current_score +", "gpt-3.5-turbo_prob": 0.45513205154784586}
{"id": "832", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if sum(a[i+1:i+k]) >= a[i]:\n            ans += 2**(n-i-1)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5965416264768455, "gpt-3.5-turbo_response": "```python\nfrom itertools import combinations\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_sum = float('inf')\n    count = 0\n    for subseq in combinations(A, K):\n        if sum(subseq) < min_sum:\n            min_sum = sum(subseq)\n            count = 1\n        elif sum(subseq) == min_sum:\n", "gpt-3.5-turbo_prob": 0.40345837352315456}
{"id": "833", "llama3.1-8b-instruct_response": "n, m = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nt = int(input())\nfor _ in range(t):\n    px, py, qx, qy = map(int, input().split())\n    px -= 1\n    py -= 1\n    qx -= 1\n    qy -= 1\n    print(sum(sum(row[py:qy+1]) for row in matrix[px", "llama3.1-8b-instruct_prob": 0.3815027993946163, "gpt-3.5-turbo_response": "```python\nn, m = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\nt = int(input())\nfor _ in range(t):\n    px, py, qx, qy = map(int, input().split())\n    total_stars = sum(sum(matrix[i][py-1:qy]) for i in range(px-1, qx))\n    print(total_stars)\n```", "gpt-3.5-turbo_prob": 0.6184972006053837}
{"id": "835", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    if n == 2 or m == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5604471147094372, "gpt-3.5-turbo_response": "def is_magical_path_possible(N, M):\n    if N * M % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "gpt-3.5-turbo_prob": 0.4395528852905628}
{"id": "836", "llama3.1-8b-instruct_response": "def find_movie(movies):\n    max_product = 0\n    max_rating = 0\n    min_index = 0\n    for i, (length, rating) in enumerate(zip(movies[1].split(), movies[2].split()), 1):\n        product = int(length) * int(rating)\n        if product > max_product or (product == max_product and int(rating) > max_rating) or (product == max_product and int(rating) == max", "llama3.1-8b-instruct_prob": 0.5542996295735674, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    max_val = 0\n    max_index = 0\n    for i in range(n):\n        val = l[i] * r[i]\n        if val > max_val:\n            max_val = val\n            max_index = i\n        elif val == max_val and r[i] >", "gpt-3.5-turbo_prob": 0.44570037042643273}
{"id": "837", "llama3.1-8b-instruct_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(sum(range(0, n + 1, 10)))", "llama3.1-8b-instruct_prob": 0.36135006941265446, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    print((n//10)*(n//10+1)//2*10)", "gpt-3.5-turbo_prob": 0.6386499305873455}
{"id": "838", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    w = list(map(int, input().split()))\n    ans = max(w)\n    for i in range(n - 1):\n        ans = max(ans - 1, w[i + 1])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5148963621220641, "gpt-3.5-turbo_response": "def min_velocity(T, segments):\n    result = []\n    for s in segments:\n        min_velocity = s[0]\n        for i in range(1, len(s)):\n            min_velocity = min(min_velocity, s[i])\n            if min_velocity < i + 1:\n                min_velocity = i + 1\n        result.append(str(min_velocity))\n    return result", "gpt-3.5-turbo_prob": 0.48510363787793587}
{"id": "839", "llama3.1-8b-instruct_response": "```python\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if k % s == 0:\n        print(1)\n    else:\n        print(0)\n    input()\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if k % s == 0:\n", "llama3.1-8b-instruct_prob": 0.36281541406338147, "gpt-3.5-turbo_response": "```python\ndef can_eat_chocolates(k, n, a):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k, a[i] - 1, -1):\n            dp[j] |= dp[j - a[i]]\n    return dp[k]\n```", "gpt-3.5-turbo_prob": 0.6371845859366185}
{"id": "84", "llama3.1-8b-instruct_response": "def get_ans(n, a):\n    cnt = 0\n    st = []\n    mp = {}\n    for i in range(n):\n        while st and st[-1] != a[i]:\n            st.pop()\n        if st and st[-1] == a[i]:\n            st.pop()\n        if not st:\n            st.append(a[i])\n            mp[(i, i)] = 1\n        else:\n            if (i - 1, i) in mp:\n                mp", "llama3.1-8b-instruct_prob": 0.5068806573699792, "gpt-3.5-turbo_response": "```python\ndef stack_exterminable_subarrays(q, queries):\n    results = []\n    for query in queries:\n        n = query[0]\n        a = query[1]\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                stack = []\n                for k in range(i, j+1):\n                    if not stack or stack[-1] != a[k]:\n                        stack.append(a[k])\n                    else:\n                        stack", "gpt-3.5-turbo_prob": 0.49311934263002083}
{"id": "840", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    k = int(input())\n    for i in range(k):\n        print(\"*\", end=\"\")\n    print()", "llama3.1-8b-instruct_prob": 0.5293441357399222, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    K = int(input())\n    print('*' * (K**2))", "gpt-3.5-turbo_prob": 0.47065586426007766}
{"id": "841", "llama3.1-8b-instruct_response": "def solve(N):\n    MOD = 10**9 + 7\n    n = len(N)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i + 1] = (dp[i + 1] + dp[i]) % MOD\n        for j in range(i):\n            dp[i + 1] = (dp[i + 1] + dp[j] * int", "llama3.1-8b-instruct_prob": 0.37695475609953255, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    N_str = str(N)\n    Y_N = int(N_str + N_str[1:] + N_str[0])\n    print(Y_N % (10**9 + 7))\n```", "gpt-3.5-turbo_prob": 0.6230452439004674}
{"id": "842", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            print(' ' * (n - i) + str(i) + ' ' * (n - i), end='')\n        else:\n            print(' ' * (n - (n - i)) + str(i), end='')\n    print()\n```", "llama3.1-8b-instruct_prob": 0.47164030926451417, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    for i in range(1, k+1):\n        if i == 1 or i == k:\n            print(i, \" \"*(k-2), i, sep=\"\")\n        else:\n            print(i, \" \"*(i-2), i, sep=\"\")", "gpt-3.5-turbo_prob": 0.5283596907354858}
{"id": "843", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i][i]\n    for j in range(1, n):\n        for i in range(n - j):\n            dp[i][i + j] = max([a[k][i] for k in range(i", "llama3.1-8b-instruct_prob": 0.5119282013618235, "gpt-3.5-turbo_response": "```python\ndef max_sum_picked_elements(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        sequences = [list(map(int, x.split())) for x in case[1:]]\n        max_sum = sequences[0][0]\n        current_max = sequences[0][0]\n        for i in range(1, N):\n            found = False\n            for j in range(N):\n                if sequences[i][j", "gpt-3.5-turbo_prob": 0.48807179863817657}
{"id": "844", "llama3.1-8b-instruct_response": "```python\ndef solve(tweets, clicks):\n    open_tweets = [0] * len(tweets)\n    for click in clicks:\n        if click.startswith('CLICK'):\n            tweet_id = int(click.split()[1])\n            open_tweets[tweet_id - 1] ^= 1\n        elif click == 'CLOSEALL':\n            open_tweets = [0] * len(tweets)\n    return [str(sum(open_tweets))]\n\ntweets, clicks = ['3 6'], ['CLICK ", "llama3.1-8b-instruct_prob": 0.5923179160438263, "gpt-3.5-turbo_response": "def count_open_tweets(N, K, clicks):\n    open_tweets = [0] * N\n    open_count = 0\n    result = []\n    for click in clicks:\n        if click == 'CLOSEALL':\n            open_tweets = [0] * N\n            open_count = 0\n        else:\n            action, tweet_num = click.split()\n            tweet_num = int(tweet_num) - 1\n            if open_tweets[tweet_num] == 1:\n                open", "gpt-3.5-turbo_prob": 0.40768208395617367}
{"id": "845", "llama3.1-8b-instruct_response": "import math\n\nn = int(input())\n\nfor _ in range(n):\n    c, d = map(int, input().split())\n    side = min(c, d)\n    while side > 0:\n        if c % side == 0 and d % side == 0:\n            break\n        side -= 1\n    print(c // side * d // side)", "llama3.1-8b-instruct_prob": 0.5357574176984427, "gpt-3.5-turbo_response": "```python\ndef max_squares(N, biscuits):\n    result = []\n    for biscuit in biscuits:\n        c, d = map(int, biscuit.split())\n        result.append((c * d) // (max(c, d) ** 2))\n    return result\n```", "gpt-3.5-turbo_prob": 0.46424258230155735}
{"id": "846", "llama3.1-8b-instruct_response": "def max_biscuits(K, A, B):\n    return (K + (K // A) * B) - (K // A)", "llama3.1-8b-instruct_prob": 0.4880718044976687, "gpt-3.5-turbo_response": "k, a, b = map(int, input().split())\nprint(max(k+1, (k-a+1)//(a-b)*(a+b) + (k-a+1)%(a-b)))", "gpt-3.5-turbo_prob": 0.5119281955023313}
{"id": "848", "llama3.1-8b-instruct_response": "n = int(input())\nfor _ in range(n):\n    input()\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    print(a[0] + a[1] + a[2])", "llama3.1-8b-instruct_prob": 0.4370274983617514, "gpt-3.5-turbo_response": "```python\nT = 1\nN = 7\nratings = [10, 40, 30, 30, 20, 0, 0]\ncumulative_ratings = []\nfor i in range(N):\n  cumulative_ratings.append(ratings[i] + ratings[(i+1)%N] + ratings[(i+2)%N])\nmax_rating = max(cumulative_ratings)\nprint(max_rating)\n```", "gpt-3.5-turbo_prob": 0.5629725016382485}
{"id": "849", "llama3.1-8b-instruct_response": "import math\nfrom functools import reduce\nfrom operator import gcd\nfrom collections import defaultdict\n\ndef max_length_gcd(arr):\n    n = len(arr)\n    max_gcd = 0\n    max_length = 0\n    prefix_gcd = [0] * n\n    prefix_gcd[0] = arr[0]\n    for i in range(1, n):\n        prefix_gcd[i] = math.gcd(prefix_gcd[i-1], arr[i])\n   ", "llama3.1-8b-instruct_prob": 0.4754350208219669, "gpt-3.5-turbo_response": "```python\nfrom math import gcd\ndef largestSubarrayWithMaxGCD(arr, n):\n    ans = 0\n    for i in range(n):\n        cur = arr[i]\n        for j in range(i, n):\n            cur = gcd(cur, arr[j])\n            if cur == 1:\n                break\n            ans = max(ans, j - i + 1)\n    return ans\nn = 4\narr = [2, 4, 8,", "gpt-3.5-turbo_prob": 0.5245649791780331}
{"id": "85", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['1'] * n\n    for i in range(n):\n        if (i - x >= 0 and s[i] == '0' and w[i - x] == '1') or (i + x < n and s[i] == '0' and w[i + x] == '1'):\n            w[i] = '0'\n    for i in", "llama3.1-8b-instruct_prob": 0.42513074954379804, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    s = input()\n    x = int(input())\n    n = len(s)\n    w = ['0'] * n\n    for i in range(n):\n        if s[i] == '1':\n            if i - x >= 0:\n                w[i - x] = '1'\n            if i + x < n:\n                w[i + x] = '1'\n    reconstructed = ''.join(w)\n", "gpt-3.5-turbo_prob": 0.5748692504562019}
{"id": "851", "llama3.1-8b-instruct_response": "import math\n\nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(n * (1 + math.log(k) / math.log(n)))", "llama3.1-8b-instruct_prob": 0.5310882504428991, "gpt-3.5-turbo_response": "```python\ndef expected_compressed_length(N, K):\n    if N == 1:\n        return 2.0\n    else:\n        return 2.0 + (N-1)\n```", "gpt-3.5-turbo_prob": 0.4689117495571009}
{"id": "852", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    res = []\n    for i in range(2 ** n):\n        bin_str = bin(i)[2:].zfill(n)\n        res.append(bin_str)\n    print('\\n'.join(res))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.3322582324723698, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    pattern = '0'\n    for i in range(K):\n        pattern += '1' if pattern[-1] == '0' else '0'\n    print(pattern)\n```", "gpt-3.5-turbo_prob": 0.6677417675276303}
{"id": "853", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    drivers = {}\n\n    for _ in range(2 * n):\n        name = input()\n        time = int(input())\n        drivers[name] = time\n\n    sorted_drivers = sorted(drivers.items(), key=lambda x: x[1])\n\n    for driver, _ in sorted_drivers:\n        print(driver)", "llama3.1-8b-instruct_prob": 0.40768337196915166, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    drivers = []\n    for _ in range(N):\n        name = input()\n        time = int(input())\n        drivers.append((name, time))\n    drivers.sort(key=lambda x: x[1])\n    for driver in drivers:\n        print(driver[0])\n```", "gpt-3.5-turbo_prob": 0.5923166280308483}
{"id": "854", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if len(a) == len(set(a)):\n        print(\"prekrasnyy\")\n    else:\n        print(\"ne krasivo\")", "llama3.1-8b-instruct_prob": 0.5000000044987023, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    if len(sequence) == len(set(sequence)):\n        print(\"prekrasnyy\")\n    else:\n        print(\"ne krasivo\")", "gpt-3.5-turbo_prob": 0.49999999550129776}
{"id": "855", "llama3.1-8b-instruct_response": "s = input()\nresult = ''\nfor char in s:\n    result = char + result\nprint(result)", "llama3.1-8b-instruct_prob": 0.39243703092020965, "gpt-3.5-turbo_response": "def reverse_string(s):\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        result += s[i]\n    return result", "gpt-3.5-turbo_prob": 0.6075629690797903}
{"id": "856", "llama3.1-8b-instruct_response": "from collections import defaultdict\n\nfor _ in range(int(input())):\n    n = int(input())\n    mp = defaultdict(int)\n    for _ in range(n):\n        word, s = input().split()\n        mp[word] += s\n    print(sum(1 for v in mp.values() if v == 1))", "llama3.1-8b-instruct_prob": 0.4873632246035032, "gpt-3.5-turbo_response": "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    words = defaultdict(list)\n    for _ in range(N):\n        word, spam = input().split()\n        words[word].append(int(spam))\n    max_count = 0\n    for word in words:\n        max_count += min(words[word].count(0), words[word].count(1))\n    print(max_count)", "gpt-3.5-turbo_prob": 0.5126367753964969}
{"id": "857", "llama3.1-8b-instruct_response": "def max_points(Dom_time, rival_time):\n    Dom_time.sort()\n    rival_time.sort()\n    points = 0\n    for i in range(len(Dom_time)):\n        if Dom_time[i] < rival_time[i]:\n            points += 1\n    return points\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    Dom_time = list(map(int, input().split()))\n    rival_time = list(map(int, input().split()))\n    print", "llama3.1-8b-instruct_prob": 0.5000000058594922, "gpt-3.5-turbo_response": "```python\ndef max_points(T, data):\n    results = []\n    for i in range(T):\n        N = int(data[i*3])\n        dom_crew = list(map(int, data[i*3+1].split()))\n        rival_crew = list(map(int, data[i*3+2].split()))\n        dom_crew.sort()\n        rival_crew.sort()\n        points = 0\n        for j in range(N):\n            if dom_crew[j] > rival", "gpt-3.5-turbo_prob": 0.4999999941405078}
{"id": "858", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 0:\n        print(2 * (n // 4))\n    else:\n        print(2 * ((n + 1) // 2) - 1)", "llama3.1-8b-instruct_prob": 0.4716403160132308, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(2**(k.bit_length()-1))", "gpt-3.5-turbo_prob": 0.5283596839867692}
{"id": "859", "llama3.1-8b-instruct_response": "def find_kth_highest(n, k):\n    return sum(i ^ (i - 1) for i in range(1, n + 1)) - (k - 1) * (k - 1)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    if k > n:\n        print(-1)\n    else:\n        print(find_kth_highest(n, k))", "llama3.1-8b-instruct_prob": 0.4509394248267017, "gpt-3.5-turbo_response": "def kth_highest_bt_number(T, test_cases):\n    results = []\n    for case in test_cases:\n        N, K = map(int, case.split())\n        if K > N:\n            results.append(\"-1\")\n        else:\n            results.append(str(K-1))\n    return results", "gpt-3.5-turbo_prob": 0.5490605751732983}
{"id": "86", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    zeros = a.count(0)\n    ones = a.count(1)\n\n    if zeros > ones:\n        print(zeros)\n        print(*([0] * zeros))\n    else:\n        print(zeros * 2)\n        print(*([0] * ones) + [1] * zeros)", "llama3.1-8b-instruct_prob": 0.47278492150878526, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ones = a.count(1)\n    zeros = n - ones\n    if ones <= n // 2:\n        print(zeros)\n        print(*[0]*zeros)\n    else:\n        print(ones - ones % 2)\n        print(*[1]*(ones - ones % 2))\n```", "gpt-3.5-turbo_prob": 0.5272150784912147}
{"id": "860", "llama3.1-8b-instruct_response": "def solve():\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n    l, r = 0, max(a)\n    while l < r:\n        m = (l + r) // 2\n        if sum((x + m - 1) // m for x in a) <= h:\n            r = m\n        else:\n            l = m + 1\n    print(l)\n\nt = int(input", "llama3.1-8b-instruct_prob": 0.5560603776977144, "gpt-3.5-turbo_response": "```python\ndef min_eating_speed(T, cases):\n    res = []\n    for case in cases:\n        N, H = case[0], case[1]\n        bananas = case[2]\n        low, high = 1, max(bananas)\n        while low < high:\n            mid = (low + high) // 2\n            hours = sum((b + mid - 1) // mid for b in bananas)\n            if hours > H:\n                low", "gpt-3.5-turbo_prob": 0.44393962230228556}
{"id": "861", "llama3.1-8b-instruct_response": "def fibonacci_count(a, b):\n    a, b = int(a), int(b)\n    fib = [1, 2]\n    while fib[-1] <= b:\n        fib.append(fib[-1] + fib[-2])\n    return str(sum(1 for f in fib if a <= f <= b))\n\nt = int(input())\nfor _ in range(t):\n    a, b = input().split()\n    print(fibonacci_count(a, b))", "llama3.1-8b-instruct_prob": 0.5831098058140418, "gpt-3.5-turbo_response": "def count_fibonacci_numbers_in_range(a, b):\n    fib = [1, 2]\n    while fib[-1] <= b:\n        fib.append(fib[-1] + fib[-2])\n    count = sum(1 for x in fib if a <= x <= b)\n    return str(count)\n\ninputs = ['10 100', '1234567890 9876543210', '0 0']\noutputs = [count_fibonacci_numbers_in_range(int(x", "gpt-3.5-turbo_prob": 0.4168901941859582}
{"id": "862", "llama3.1-8b-instruct_response": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, m, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        mod = 10**7\n        ans = 0\n        for i in range(n):\n            cnt = 0\n            max_val = 0\n            for j in range(n):\n                if a[j] > max_val:\n                    max_val = a[j]\n                    idx", "llama3.1-8b-instruct_prob": 0.47734322360328496, "gpt-3.5-turbo_response": "```python\ndef sir_jadeja_milk(t, test_cases):\n    result = []\n    for case in test_cases:\n        n, m, k = map(int, case[0].split())\n        jars = list(map(int, case[1].split()))\n        jars.sort(reverse=True)\n        total_milk = 0\n        for i in range(n):\n            if jars[i] < k or m == 0:\n                total_milk += jars[i]\n            else:\n", "gpt-3.5-turbo_prob": 0.522656776396715}
{"id": "863", "llama3.1-8b-instruct_response": "from collections import deque\n\ndef solve(stations, neighbours):\n    n = len(stations)\n    visited = [False] * n\n    queue = deque()\n    max_traffic = 0\n\n    for i in range(n):\n        if not visited[i]:\n            queue.append(i)\n            visited[i] = True\n            traffic = stations[i]\n\n            while queue:\n                node = queue.popleft()\n                for neighbour in neighbours[node]:\n                    if not visited[neighbour]:\n                        queue.append", "llama3.1-8b-instruct_prob": 0.3636065252163726, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\ndef max_traffic_bid(N, traffic, connections):\n    graph = defaultdict(list)\n    for connection in connections:\n        u, v = map(int, connection.split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = [False] * (N + 1)\n    max_traffic = [0]\n\n    def dfs(node, prev):\n        visited[node] = True\n        traffic_sum = traffic[node - 1]\n       ", "gpt-3.5-turbo_prob": 0.6363934747836273}
{"id": "864", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor i in range(1, t + 1):\n    n, k = map(int, input().split())\n    total_sum = sum(range(1, n + 1))\n    for j in range(1, int(n ** (1 / k)) + 1):\n        total_sum -= j * k ** (j - 1)\n    print(f\"Case #{i}: {total_sum}\")", "llama3.1-8b-instruct_prob": 0.47164030951945396, "gpt-3.5-turbo_response": "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    s = n * (n + 1) // 2\n    p = k\n    while p <= n:\n        s -= p * (n // p) * ((n // p) + 1) // 2\n        p *= k\n    print(\"Case #{}: {}\".format(i+1, s))", "gpt-3.5-turbo_prob": 0.528359690480546}
{"id": "865", "llama3.1-8b-instruct_response": "def solve(N):\n    MOD = 10**9 + 7\n    if N <= 3:\n        return 0\n    if N % 2 == 1:\n        return pow(2, (N - 1) // 2, MOD)\n    return pow(2, N // 2 - 1, MOD) * 2 % MOD\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(solve(N))", "llama3.1-8b-instruct_prob": 0.5456249789140492, "gpt-3.5-turbo_response": "```python\ndef count_permutations(T, N_list):\n    result = []\n    for N in N_list:\n        if N == 1 or N == 2:\n            result.append('0')\n        else:\n            result.append(str((N-1)*(pow(2, N-2, 10**9+7)) % (10**9+7)))\n    return result\n```", "gpt-3.5-turbo_prob": 0.45437502108595085}
{"id": "866", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    c = list(map(int, input().split()))\n    v = [0] * (n + 1)\n    for i in range(n):\n        if c[i] == 0:\n            print(-1)\n            return\n        for j in range(1, c[i] + 1):\n            v[j] += 1\n    for i in range(1, n + 1):\n        if v[i] > ", "llama3.1-8b-instruct_prob": 0.48042804412654905, "gpt-3.5-turbo_response": "```python\ndef possible_voting(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        c = test_cases[i][1]\n        total_votes = sum(c)\n        if total_votes != n:\n            results.append(\"-1\")\n        else:\n            votes = [0] * n\n            for j in range(n):\n                if c[j] >= n:\n                    results.append(\"-1\")\n                    break\n                votes[(", "gpt-3.5-turbo_prob": 0.519571955873451}
{"id": "867", "llama3.1-8b-instruct_response": "def min_hits(S, W1, W2, W3):\n    bricks = [W1, W2, W3]\n    hits = 0\n    while bricks:\n        max_k = 0\n        while max_k < len(bricks) and sum(bricks[:max_k+1]) <= S:\n            max_k += 1\n        bricks = bricks[max_k:]\n        hits += 1\n    return hits\n\nfor _ in range(int(input())):\n    S", "llama3.1-8b-instruct_prob": 0.5156046866868782, "gpt-3.5-turbo_response": "```python\ndef min_hits(T, cases):\n    result = []\n    for case in cases:\n        S, W1, W2, W3 = map(int, case.split())\n        widths = [W1, W2, W3]\n        widths.sort()\n        if S >= sum(widths):\n            result.append(1)\n        elif S >= widths[0] + widths[1]:\n            result.append(2)\n        else:\n            result.append(3)\n    return result", "gpt-3.5-turbo_prob": 0.4843953133131219}
{"id": "868", "llama3.1-8b-instruct_response": "import bisect\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for l in range(n):\n        for r in range(l, n):\n            m = (r - l + 1) * ((k - 1) // (r - l + 1) + 1)\n            b = a[l:r+1] * (m // len", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef count_beautiful_subarrays(N, K, A):\n    count = 0\n    for l in range(N):\n        for r in range(l, N):\n            subarray = A[l:r+1]\n            m = (K + r - l) // (r - l + 1)\n            B = subarray * m\n            B.sort()\n            X = B[K-1]\n            F = subarray.count(X)\n            if F > 0", "gpt-3.5-turbo_prob": 0.5}
{"id": "869", "llama3.1-8b-instruct_response": "def substring_search(M, S):\n    return 'Y' if S in M else 'N'\n\nM = input()\nS = input()\nprint(substring_search(M, S))", "llama3.1-8b-instruct_prob": 0.5126367752319793, "gpt-3.5-turbo_response": "def is_substring(M, S):\n    return 'Y' if S in M else 'N'", "gpt-3.5-turbo_prob": 0.48736322476802074}
{"id": "87", "llama3.1-8b-instruct_response": "def solve():\n    m, d, w = map(int, input().split())\n    ans = 0\n    for i in range(1, m):\n        if (d + i * d) % w == i * d % w:\n            ans += i * d\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.41271216967410884, "gpt-3.5-turbo_response": "```python\nimport math\ndef count_ambiguous_pairs(m, d, w):\n    g = math.gcd(d-1, w)\n    return min(d-1, w) * (m-1) + (d-1) // g\n```", "gpt-3.5-turbo_prob": 0.5872878303258912}
{"id": "872", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, a, b, k = map(int, input().split())\n\n    appy = n // a - n // (a * b)\n    chef = n // b - n // (a * b)\n\n    print(\"Win\" if appy + chef >= k else \"Lose\")", "llama3.1-8b-instruct_prob": 0.4811926188946829, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    N, A, B, K = map(int, input().split())\n    solved_by_appy = N//A - N//(A*B)\n    solved_by_chef = N//B - N//(A*B)\n    total_solved = solved_by_appy + solved_by_chef\n    print(\"Win\" if total_solved >= K else \"Lose\")\n```", "gpt-3.5-turbo_prob": 0.5188073811053171}
{"id": "874", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, m, s = map(int, input().split())\n    h = list(map(int, input().split()))\n    h.sort()\n    ans = 0\n    for i in range(n):\n        if h[i] <= s:\n            ans += 1\n        elif h[i] <= 2 * s:\n            ans += 1\n            m -= 2\n        if m == 0:\n            break\n    print", "llama3.1-8b-instruct_prob": 0.5558947275119992, "gpt-3.5-turbo_response": "def max_topics(T, topics):\n    result = []\n    for i in range(0, len(topics), 2):\n        N, M, S = map(int, topics[i].split())\n        hours = list(map(int, topics[i+1].split()))\n        count = 0\n        for h in hours:\n            if h <= S:\n                count += 1\n            elif h <= 2*S and M > 0:\n                count += 1\n                M", "gpt-3.5-turbo_prob": 0.44410527248800086}
{"id": "876", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    print('YES' if max(a) - min(a) < x else 'NO')", "llama3.1-8b-instruct_prob": 0.4903061529064976, "gpt-3.5-turbo_response": "```python\ndef happy_kids(T, cases):\n    result = []\n    for case in cases:\n        N, X = case[0]\n        candies = case[1]\n        if max(candies) - min(candies) < X:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return result\n```", "gpt-3.5-turbo_prob": 0.5096938470935023}
{"id": "877", "llama3.1-8b-instruct_response": "def solve():\n    x, y, k, n = map(int, input().split())\n    diff = abs(x - y)\n    if diff % k == 0 and diff // k <= n - max(x, y):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5402502557935712, "gpt-3.5-turbo_response": "```python\ndef can_catch_thief(x, y, k, n):\n    if (x - y) % k == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nT = 5\ntest_cases = [(0, 1, 1, 1), (1, 4, 1, 5), (4, 2, 1, 7), (3, 7, 2, 10), (", "gpt-3.5-turbo_prob": 0.4597497442064288}
{"id": "878", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    h = [0] + h\n    ans = 0\n    for i in range(1, n + 1):\n        if h[i] - h[i - 1] > k:\n            ans += 1\n            j = h[i - 1] + k\n            while j < h[i]:\n                j += k\n               ", "llama3.1-8b-instruct_prob": 0.33962828852193083, "gpt-3.5-turbo_response": "```python\ndef min_steps_to_reach_top(T, cases):\n    res = []\n    for case in cases:\n        N, K = map(int, case[0].split())\n        heights = list(map(int, case[1].split()))\n        steps = 0\n        for i in range(N-1):\n            diff = heights[i+1] - heights[i]\n            steps += (diff-1)//K\n        res.append(steps)\n    return res\n```", "gpt-3.5-turbo_prob": 0.6603717114780692}
{"id": "879", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x, y = map(int, input().split())\n    strength = sum((i % 10) for i in range(y, x + 1, y))\n    print(strength)", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef team_strength(X, Y):\n    return sum(int(str(i)[-1]) for i in range(Y, X+1, Y))\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "88", "llama3.1-8b-instruct_response": "def visible_pips(n):\n    return n if n <= 21 else (n + 21) // 2 * 2 + (n - 1) % 2\n\ndef solve():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        if x % 2 == 0 and x < 39 or x % 2 == 1 and x < 40 or x == 40 or x == 39:\n            print", "llama3.1-8b-instruct_prob": 0.5152450495341359, "gpt-3.5-turbo_response": "```python\nt = int(input())\nx = list(map(int, input().split()))\n\nfor num in x:\n    if num <= 14 or num >= 36:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n```", "gpt-3.5-turbo_prob": 0.48475495046586414}
{"id": "880", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\nfor _ in range(t):\n    r = float(input())\n    area = math.pi * (r ** 2)\n    print(f\"{area:.2f}\")", "llama3.1-8b-instruct_prob": 0.6386499357462702, "gpt-3.5-turbo_response": "```python\nimport math\nfor _ in range(int(input())):\n    r = int(input())\n    print(round(math.pi * (r**2), 2))\n```", "gpt-3.5-turbo_prob": 0.36135006425372984}
{"id": "881", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = n\n    curr = 1\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            curr += 1\n        else:\n            curr = 1\n        ans += curr\n    print(ans)", "llama3.1-8b-instruct_prob": 0.4999999941405078, "gpt-3.5-turbo_response": "```python\ndef count_non_decreasing_subarrays(arr):\n    result = []\n    for i in range(1, len(arr)):\n        count = 1\n        while i < len(arr) and arr[i] >= arr[i-1]:\n            count += 1\n            i += 1\n        result.append(count*(count+1)//2)\n    return result\n```", "gpt-3.5-turbo_prob": 0.5000000058594923}
{"id": "882", "llama3.1-8b-instruct_response": "def longest_common_pattern_length(A, B):\n    A = ' ' + A\n    B = ' ' + B\n    dp = [[0] * (len(B) + 1) for _ in range(len(A) + 1)]\n    for i in range(1, len(A) + 1):\n        for j in range(1, len(B) + 1):\n            if A[i] == B[j]:\n                dp[i][j] = dp[i -", "llama3.1-8b-instruct_prob": 0.43806201333608696, "gpt-3.5-turbo_response": "```python\ndef longest_common_pattern_length(A, B):\n    return len(set(A) & set(B))\n```", "gpt-3.5-turbo_prob": 0.5619379866639129}
{"id": "883", "llama3.1-8b-instruct_response": "```python\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_val = max(arr)\n    if max_val > (n - 1):\n        print(-1)\n        return\n    if max_val == (n - 1):\n        print(-1)\n        return\n    failed = 0\n    for i in range(n):\n        if arr[i] == max_val:\n            failed += 1\n    print(n -", "llama3.1-8b-instruct_prob": 0.4060714772281913, "gpt-3.5-turbo_response": "```python\ndef predict_failed_students(T, testcases):\n    results = []\n    for i in range(T):\n        N = testcases[i][0]\n        counts = testcases[i][1]\n        max_count = max(counts)\n        num_max_count = counts.count(max_count)\n        if max_count > N - 1 or (max_count == N - 1 and num_max_count == 1):\n            results.append(-1)\n        else:\n            results.append(N - num", "gpt-3.5-turbo_prob": 0.5939285227718087}
{"id": "884", "llama3.1-8b-instruct_response": "def find_factors(x, k):\n    factors = set()\n    for i in range(1, int(x**0.5) + 1):\n        if x % i == 0:\n            factors.add(i)\n            factors.add(x // i)\n    factors = sorted(list(factors))\n    return factors\n\ndef solve(x, k, r):\n    factors_x = find_factors(x, k)\n    factors_r = find_factors(r, k)\n    sum_kth_power = sum(i", "llama3.1-8b-instruct_prob": 0.5416628545061056, "gpt-3.5-turbo_response": "```python\nfrom math import pow\n\nT = int(input())\nfor _ in range(T):\n    X, K = map(int, input().split())\n    factors_X = [i for i in range(1, X+1) if X % i == 0]\n    factors_K = [i for i in range(1, K+1) if K % i == 0]\n    sum_X = sum(pow(factor, K) for factor in factors_X)\n    sum_K", "gpt-3.5-turbo_prob": 0.45833714549389437}
{"id": "885", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    print(count)", "llama3.1-8b-instruct_prob": 0.6075616827239089, "gpt-3.5-turbo_response": "```python\ndef count_zeros_in_binary_representation(T, numbers):\n    result = []\n    for n in numbers:\n        result.append(bin(n).count('0') - 1)\n    return result\n```", "gpt-3.5-turbo_prob": 0.39243831727609113}
{"id": "886", "llama3.1-8b-instruct_response": "def find_nearest_numbers():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        m = int(input())\n        a = [(a[i] + a[i+1]//3) for i in range(0, n-1, 2)] + [a[-1]]\n        a = [a[i] + a[i+1]%3 for i in range(0, n", "llama3.1-8b-instruct_prob": 0.48608807963548395, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_left\n\ndef find_nearest_numbers(arr, x):\n    arr.sort()\n    idx = bisect_left(arr, x)\n    if idx == 0:\n        return -1, arr[idx]\n    if idx == len(arr):\n        return arr[idx-1], -1\n    if arr[idx] == x:\n        return arr[idx-1], arr[idx+1]\n    return arr[idx-1], arr[idx]\n    \nT = ", "gpt-3.5-turbo_prob": 0.513911920364516}
{"id": "887", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    if a[0] != b[-1]:\n        print('No')\n        continue\n\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = min(dp", "llama3.1-8b-instruct_prob": 0.4642425807516977, "gpt-3.5-turbo_response": "```python\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\n\ndef dijkstra(adj_list, start):\n    dist = {node: float('inf') for node in adj_list}\n    dist[start] = 0\n    heap = [(0, start)]\n    while heap:\n        cur_dist, cur_node = heappop(heap)\n        if cur_dist > dist[cur_node]:\n            continue\n        for neighbor, weight in adj_list[cur_node]:\n           ", "gpt-3.5-turbo_prob": 0.5357574192483023}
{"id": "889", "llama3.1-8b-instruct_response": "def min_proxy(D, S):\n    proxy = 0\n    for i in range(2, D-2):\n        if S[i] == 'A' and S[i-1] != 'P' and S[i+1] != 'P':\n            proxy += 1\n    if sum(c == 'P' for c in S) / D < 0.75:\n        return -1\n    return proxy\n\nT = int(input())\nfor _ in range(T", "llama3.1-8b-instruct_prob": 0.5268830115934684, "gpt-3.5-turbo_response": "```python\ndef min_proxy_attendance(T, test_cases):\n    results = []\n    for case in test_cases:\n        D = int(case[0])\n        S = case[1]\n        count = 0\n        for i in range(D):\n            if S[i] == 'A':\n                if i >= 2 and i <= D-3:\n                    if (S[i-1] == 'P' or S[i-2] == 'P') and (S[i", "gpt-3.5-turbo_prob": 0.47311698840653166}
{"id": "89", "llama3.1-8b-instruct_response": "def height(n, a):\n    if n == 1:\n        return 0\n    i = 2\n    while i <= n and a[i-2] == a[i-1] - 1:\n        i += 1\n    return max(height(i-1, a), n - i + height(n-i, a) + 1)\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input", "llama3.1-8b-instruct_prob": 0.49999998762294523, "gpt-3.5-turbo_response": "```python\nfrom collections import deque\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    depth = 0\n    max_depth = 0\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            depth += 1\n        max_depth = max(max_depth, depth)\n    print(max_depth + 1)\n```", "gpt-3.5-turbo_prob": 0.5000000123770548}
{"id": "890", "llama3.1-8b-instruct_response": "def min_fences(n, rows):\n    grid = [list(row) for row in rows]\n    visited = [[False for _ in range(n)] for _ in range(2)]\n    fences = 0\n\n    for i in range(2):\n        for j in range(n):\n            if grid[i][j] == '*' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                fences += 1\n\n    return fences\n\ndef dfs(grid, visited", "llama3.1-8b-instruct_prob": 0.5000000035018282, "gpt-3.5-turbo_response": "```python\ndef min_fences(T, test_cases):\n    results = []\n    for i in range(T):\n        n = test_cases[i][0]\n        s1 = test_cases[i][1]\n        s2 = test_cases[i][2]\n        count = 0\n        for j in range(n):\n            if s1[j] == '*' and s2[j] == '*':\n                count += 1\n        results.append(count)\n    return results\n```", "gpt-3.5-turbo_prob": 0.49999999649817184}
{"id": "891", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    freq = [0] * (3 * n + 1)\n    for i in range(1, n + 1):\n        for j in range(n + 1, 2 * n + 1):\n            freq[i + j] += 1\n    for _ in range(m):\n        q = int(input())\n        print(freq[q])\n\nsolve()", "llama3.1-8b-instruct_prob": 0.5662278340917033, "gpt-3.5-turbo_response": "n, m = map(int, input().split())\nA = list(range(1, n+1))\nB = list(range(n+1, 2*n+1))\nC = [a + b for a in A for b in B]\nqueries = [int(input()) for _ in range(m)]\nfor q in queries:\n    print(C.count(q))", "gpt-3.5-turbo_prob": 0.4337721659082967}
{"id": "893", "llama3.1-8b-instruct_response": "import math\n\ndef count_prime_factors(n):\n    cnt = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            cnt += 1\n            n //= i\n    if n > 1:\n        cnt += 1\n    return cnt\n\ndef max_special_sum(arr, k, s):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n       ", "llama3.1-8b-instruct_prob": 0.5293441289720622, "gpt-3.5-turbo_response": "```python\ndef max_special_sum(N, K, S, arr):\n    def prime_factors(n):\n        factors = set()\n        while n % 2 == 0:\n            factors.add(2)\n            n = n // 2\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                factors.add(i)\n                n = n // i\n        if n > 2:\n            factors", "gpt-3.5-turbo_prob": 0.4706558710279379}
{"id": "894", "llama3.1-8b-instruct_response": "```python\nimport sys\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    g1 = [list(map(int, input().split())) for _ in range(n)]\n    g2 = [list(map(int, input().split())) for _ in range(n)]\n\n    match = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if g1[i][j] == g2[i][j", "llama3.1-8b-instruct_prob": 0.5373264659378755, "gpt-3.5-turbo_response": "```python\nfrom itertools import permutations\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    graph1 = [list(map(int, input().split())) for _ in range(N)]\n    graph2 = [list(map(int, input().split())) for _ in range(N)]\n    edges1 = [(i, j) for i in range(N) for j in range(N) if graph1[i][j] == 1]\n    edges2 = [(", "gpt-3.5-turbo_prob": 0.4626735340621246}
{"id": "895", "llama3.1-8b-instruct_response": "def min_cost(n, costs):\n    costs = list(map(int, costs.split()))\n    dp = [0] * n\n    dp[0] = costs[0]\n    dp[1] = min(costs[0], costs[1])\n    for i in range(2, n):\n        dp[i] = min(dp[i-1], dp[i-2]) + costs[i]\n    return min(dp[-1], dp[-2] + costs[-1])", "llama3.1-8b-instruct_prob": 0.48669683876345454, "gpt-3.5-turbo_response": "n = int(input())\ncosts = list(map(int, input().split()))\ntotal_cost = min(sum(costs[::2]), sum(costs[1::2]))\nprint(total_cost)", "gpt-3.5-turbo_prob": 0.5133031612365454}
{"id": "896", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        a.append((l, r))\n    l, r = a[0]\n    ans = []\n    for i in range(1, n):\n        x, y = a[i]\n        d = abs(x - l) + abs(r - y)\n        if d == 0:\n            continue\n        if x < l", "llama3.1-8b-instruct_prob": 0.5226567702521856, "gpt-3.5-turbo_response": "def minimal_operations(T, cases):\n    results = []\n    for case in cases:\n        N = case[0]\n        segments = case[1:]\n        operations = ''\n        total_operations = 0\n        for i in range(N-1):\n            diff_L = segments[i+1][0] - segments[i][0]\n            diff_R = segments[i+1][1] - segments[i][1]\n            if diff_L > 0:\n                operations += 'L+' *", "gpt-3.5-turbo_prob": 0.4773432297478143}
{"id": "898", "llama3.1-8b-instruct_response": "def solve():\n    M, N = map(int, input().split())\n    ans = 0\n    distinct_x = set()\n    for x in range(1, M + 1):\n        for y in range(1, N + 1):\n            if str(x) + str(y) == str(x * y + x + y):\n                ans += 1\n                distinct_x.add(x)\n    print(ans, len(distinct_x))\n\nt = int(input())\nfor _", "llama3.1-8b-instruct_prob": 0.5875060219761719, "gpt-3.5-turbo_response": "```python\ndef count_pairs_and_distinct_x(M, N):\n    pairs = 0\n    distinct_x = 0\n    for x in range(1, M+1):\n        for y in range(1, N+1):\n            if x*y + x + y == int(str(x) + str(y)):\n                pairs += 1\n                if x not in range(1, x):\n                    distinct_x += 1\n    return pairs, distinct_x\n```", "gpt-3.5-turbo_prob": 0.4124939780238281}
{"id": "899", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [0]\n    for i in range(n):\n        prefix.append(prefix[-1] + a[i])\n    print(max(max(a) - (prefix[n] - prefix[i + 1]) for i in range(n)))\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.49999999690573627, "gpt-3.5-turbo_response": "```python\ndef minimize_max_candies(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        candies = case[1]\n        max_candies = max(candies)\n        results.append(str(max_candies))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5000000030942637}
{"id": "9", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    i = 0\n    while i < n:\n        cnt = 0\n        while i < n and s[i] == '1':\n            cnt += 1\n            i += 1\n        if cnt % 2 == 1:\n            ans += cnt\n        i += 1\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n   ", "llama3.1-8b-instruct_prob": 0.5565592139414708, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    score = s.count('1')\n    print(score)\n```", "gpt-3.5-turbo_prob": 0.4434407860585292}
{"id": "90", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    unlocked = [i for i in range(n) if l[i] == 0]\n    unlocked.sort(key=lambda x: a[x])\n    for i in unlocked:\n        a[i] = a[unlocked[0]]\n        unlocked[0] += 1\n    print(*a)\n\nt = int(input())\nfor _ in", "llama3.1-8b-instruct_prob": 0.5645110996210432, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    locked = [a[i] for i in range(n) if l[i] == 1]\n    unlocked = sorted([a[i] for i in range(n) if l[i] == 0])\n    unlocked_index = 0\n    for i in range(n):\n        if l[i", "gpt-3.5-turbo_prob": 0.43548890037895677}
{"id": "900", "llama3.1-8b-instruct_response": "def solve(K):\n    mod = 10**9 + 7\n    if K == 1:\n        return 10\n    ans = 0\n    for i in range(1, K):\n        for j in range(i+1, K):\n            ans += 9 * (10 ** (i - 1)) * (10 ** (j - i - 1))\n    return ans % mod\n\nT = int(input())\nfor _ in range(T):\n    K", "llama3.1-8b-instruct_prob": 0.47687935614819454, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    print((20 * pow(10, K-1, 10**9+7)) % (10**9+7))\n```", "gpt-3.5-turbo_prob": 0.5231206438518055}
{"id": "901", "llama3.1-8b-instruct_response": "def f(A, i, S):\n    j = i\n    while j + 1 < len(A) and A[i] + A[j + 1] <= S:\n        j += 1\n    return S - A[i] - A[i + 1] - ... - A[j]\n\ndef solve():\n    N, k, S = map(int, input().split())\n    A = list(map(int, input().split()))\n    A = [-A[i] for i", "llama3.1-8b-instruct_prob": 0.5111924400880457, "gpt-3.5-turbo_response": "```python\nfrom heapq import *\nT=int(input())\nfor _ in range(T):\n    N,k,S=map(int,input().split())\n    A=list(map(int,input().split()))\n    h=[]\n    for i in range(N):\n        j=i\n        s=0\n        while j<N and s+A[j]<=S:\n            s+=A[j]\n            j+=1\n        if j<N and A[j]>S:\n            heappush(h,(-A[j],i))\n", "gpt-3.5-turbo_prob": 0.48880755991195435}
{"id": "902", "llama3.1-8b-instruct_response": "def binary_nim(N, S, stacks):\n    x = 0\n    for stack in stacks:\n        if stack[0] == '1':\n            x ^= len(stack) - 1\n    return 'Dee' if (S == 'Dee' and x % 2 == 1) or (S == 'Dum' and x % 2 == 0) else 'Dum'\n\nT = int(input())\nfor _ in range(T):\n    N", "llama3.1-8b-instruct_prob": 0.5000000058594922, "gpt-3.5-turbo_response": "```python\ndef find_winner(N, S, stacks):\n    xor = 0\n    for stack in stacks:\n        xor ^= len(stack) % 2\n    if (S == \"Dee\" and xor) or (S == \"Dum\" and not xor):\n        return \"Dee\"\n    else:\n        return \"Dum\"\n\nT = 2\ntest_cases = [(\"2\", \"Dee\", [\"101\", \"010\"]), (\"2\", \"Dum", "gpt-3.5-turbo_prob": 0.4999999941405078}
{"id": "903", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x1, y1 = map(float, input().split())\n    x2, y2 = map(float, input().split())\n    mirror_x = (x1 + x2) / 2\n    print(f\"{mirror_x:.2f}\")", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "def mirror_position(x1, y1, x2, y2):\n    mirror_x = (x1 + x2 + (y2 - y1)) / 2\n    return \"{:.2f}\".format(mirror_x)", "gpt-3.5-turbo_prob": 0.5}
{"id": "904", "llama3.1-8b-instruct_response": "def can_escape():\n    t = int(input())\n    for _ in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        left, right = 0, n + 1\n        energy = 0\n        for i in range((n + 1) // 2):\n            for j in range(max(1, left - i), min(n - i + 1, right - i)):\n               ", "llama3.1-8b-instruct_prob": 0.4524386801618542, "gpt-3.5-turbo_response": "```python\ndef can_escape(T, cases):\n    results = []\n    for case in cases:\n        N, X = case[0], case[1]\n        a = case[2:]\n        energy = 0\n        for t in range(1, (N+1)//2 + 1):\n            energy += max(a[t-1], a[N-t])\n            if energy >= X:\n                results.append('YES')\n                break\n        else:\n            results.append('NO", "gpt-3.5-turbo_prob": 0.5475613198381458}
{"id": "905", "llama3.1-8b-instruct_response": "def safest_position(n):\n    return (n + 1) // 2", "llama3.1-8b-instruct_prob": 0.5558947177503695, "gpt-3.5-turbo_response": "def find_safest_position(n):\n    return int(pow(2, n.bit_length() - 1))", "gpt-3.5-turbo_prob": 0.44410528224963053}
{"id": "907", "llama3.1-8b-instruct_response": "def is_valid_report(report):\n    snakes = []\n    for i, char in enumerate(report):\n        if char == 'H':\n            snakes.append(i)\n        elif char == 'T':\n            if not snakes or snakes[-1] > i:\n                return False\n            snakes.pop()\n    return not snakes\n\nR = int(input())\nfor _ in range(R):\n    L = int(input())\n    report = input()\n    print('Valid' if is_valid_report(report) else 'Invalid')", "llama3.1-8b-instruct_prob": 0.60080918458983, "gpt-3.5-turbo_response": "```python\ndef is_valid_report(report):\n    head_count = 0\n    tail_count = 0\n    for char in report:\n        if char == 'H':\n            head_count += 1\n        elif char == 'T':\n            tail_count += 1\n        if tail_count > head_count or head_count - tail_count > 1:\n            return \"Invalid\"\n    if head_count == tail_count:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n", "gpt-3.5-turbo_prob": 0.39919081541017004}
{"id": "908", "llama3.1-8b-instruct_response": "def solve(N):\n    return int((2 * N ** 0.5 - 1) / 2)\n\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    print(solve(N))", "llama3.1-8b-instruct_prob": 0.4281957334301298, "gpt-3.5-turbo_response": "```python\ndef max_triangle_height(coins):\n    height = int((2 * coins) ** 0.5)\n    if (height * (height + 1)) // 2 <= coins:\n        return height\n    return height - 1\n```", "gpt-3.5-turbo_prob": 0.5718042665698703}
{"id": "909", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    b = sorted(list(map(int, input().split())))\n    g = sorted(list(map(int, input().split())))\n    for i in range(n):\n        if b[i] < g[i]:\n            return \"NO\"\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())", "llama3.1-8b-instruct_prob": 0.4910454686952941, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    b.sort()\n    g.sort()\n    if all(abs(b[i]-g[i]) > 1 for i in range(n)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.5089545313047059}
{"id": "91", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    p[0] = q[0]\n    for i in range(1, n):\n        if q[i] > q[i - 1]:\n            p[i] = q[i]\n        else:\n            for j in range(q[i - 1] + 1, q[i - 1] + n - i):\n                if", "llama3.1-8b-instruct_prob": 0.5263488605337232, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    q = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(1, n):\n        if q[i] != q[i-1]:\n            p[i] = q[i-1]\n    for i in range(n):\n        if p[i] == 0:\n            p[i] = n\n    if p.count(0", "gpt-3.5-turbo_prob": 0.47365113946627674}
{"id": "910", "llama3.1-8b-instruct_response": "def solve():\n    s = input()\n    n = int(input())\n    pattern = ''\n    for i in range(n):\n        pattern += s\n    pattern += s\n    dp = [0] * (len(pattern) + 1)\n    dp[0] = 1\n    for i in range(1, len(pattern) + 1):\n        if pattern[i - 1] == 'T':\n            dp[i] += dp[i - 2]\n        dp[i", "llama3.1-8b-instruct_prob": 0.43080401066203244, "gpt-3.5-turbo_response": "```python\ndef count_different_scales(pattern, n):\n    t_count = pattern.count('T')\n    s_count = pattern.count('S')\n    return (t_count + 1) ** n * (s_count + 1) ** n\n```", "gpt-3.5-turbo_prob": 0.5691959893379676}
{"id": "912", "llama3.1-8b-instruct_response": "def solve():\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = float('inf')\n    for i in range(k - 1, n):\n        ans = min(ans, x[i] - x[i - (k - 1)])\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.6075616853033712, "gpt-3.5-turbo_response": "def largest_min_distance(T, testcases):\n    result = []\n    for testcase in testcases:\n        n, k = map(int, testcase[0].split())\n        positions = list(map(int, testcase[1].split()))\n        positions.sort()\n        low, high = 1, positions[-1] - positions[0]\n        while low < high:\n            mid = (low + high + 1) // 2\n            count = 1\n            left = positions[", "gpt-3.5-turbo_prob": 0.39243831469662893}
{"id": "913", "llama3.1-8b-instruct_response": "import heapq\nfrom collections import defaultdict\n\nN, M, K = map(int, input().split())\nroads = defaultdict(list)\nfor _ in range(K):\n    x1, y1, x2, y2 = map(int, input().split())\n    roads[y1].append((x1, x2, y2))\n    roads[y2].append((x2, x1, y1))\n\nans = 0\npq = []\nfor y in range(1, M", "llama3.1-8b-instruct_prob": 0.4621325393302343, "gpt-3.5-turbo_response": "```python\ndef min_sum_of_durations(N, M, K, deliveries):\n    vertical_times = [0] * (N + 1)\n    horizontal_times = [0] * (M + 1)\n    for x, y, x_prime, y_prime in deliveries:\n        vertical_times[min(x, x_prime)] += 1\n        vertical_times[max(x, x_prime)] -= 1\n        horizontal_times[min(y, y_prime)] += 1\n        horizontal", "gpt-3.5-turbo_prob": 0.5378674606697658}
{"id": "914", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    vis = [[0] * m for _ in range(n)]\n    q = []\n    for i in range(n):\n        for j in range(m):\n            q.append((a[n - i][j], i, j))\n    q.sort()\n    for i in range(len(q", "llama3.1-8b-instruct_prob": 0.5082346335408774, "gpt-3.5-turbo_response": "```python\ndef clean_windows(T, test_cases):\n    for case in test_cases:\n        N, M = case[0]\n        A = case[1:]\n        result = []\n        for i in range(N):\n            row = ''\n            for j in range(M):\n                window = (N-i, j+1)\n                clean = A[N-i-1][j]\n                if clean <= (i*M + j + 1):\n                    row += '1'\n                else:\n", "gpt-3.5-turbo_prob": 0.4917653664591226}
{"id": "915", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = {}\n    for i in range(n):\n        if b[i] in c:\n            c[b[i]].append(a[i])\n        else:\n            c[b[i]] = [a[i]]\n    ans = 0\n    for i in c:\n        c[i].sort()\n        ans += len(c[i]) - 1", "llama3.1-8b-instruct_prob": 0.4847549504658642, "gpt-3.5-turbo_response": "```python\ndef max_friendships_saved(T, cases):\n    results = []\n    for case in cases:\n        n = case[0]\n        days = case[1:]\n        max_day = max(days)\n        count = days.count(max_day)\n        results.append(str(count))\n    return results\n```", "gpt-3.5-turbo_prob": 0.5152450495341359}
{"id": "916", "llama3.1-8b-instruct_response": "def min_amount(N, M):\n    return N * M\n\nt = int(input())\nfor _ in range(t):\n    N, M = map(int, input().split())\n    print(min_amount(N, M))", "llama3.1-8b-instruct_prob": 0.5313297485312236, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    print(n * m)", "gpt-3.5-turbo_prob": 0.4686702514687764}
{"id": "917", "llama3.1-8b-instruct_response": "```python\nimport sys\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_diff = float('inf')\n    count = 0\n    for i in range(n - 1):\n        diff = abs(a[i] + a[i + 1] - k)\n        if diff < min_diff:\n            min_diff = diff\n            count = 1\n        elif diff ==", "llama3.1-8b-instruct_prob": 0.49999999121076166, "gpt-3.5-turbo_response": "```python\nfrom collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    count = Counter()\n    min_diff = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(arr[i] + arr[j] - K)\n            if diff < min_diff:\n                min", "gpt-3.5-turbo_prob": 0.5000000087892382}
{"id": "918", "llama3.1-8b-instruct_response": "def min_toggle(n):\n    return sum(bin(i).count('1') for i in range(1, n + 1)) % 8589934592\n\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    print(f'Case {i}: {min_toggle(n)}')", "llama3.1-8b-instruct_prob": 0.3708311313055652, "gpt-3.5-turbo_response": "```python\ndef min_switch_toggle(n):\n    return (2**n + 1) % 8589934592\n\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    result = min_switch_toggle(n)\n    print(f\"Case {i+1}: {result}\")\n```", "gpt-3.5-turbo_prob": 0.6291688686944348}
{"id": "919", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[i] == a[j]:\n            j += 1\n        if (j - i) % 2 == 1:\n            ans += 1\n        i = j\n    print(ans)\n\nt = int(input())\nfor _ in range", "llama3.1-8b-instruct_prob": 0.5313297507536789, "gpt-3.5-turbo_response": "```python\ndef min_operations(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        sequence = case[1]\n        even_count = 0\n        odd_count = 0\n        for num in sequence:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        if even_count == 0 or odd_count == 0:\n            results.append", "gpt-3.5-turbo_prob": 0.4686702492463211}
{"id": "92", "llama3.1-8b-instruct_response": "q = int(input())\n\nfor _ in range(q):\n    s = input()\n    t = input()\n    print('YES' if set(s) & set(t) else 'NO')", "llama3.1-8b-instruct_prob": 0.5522124713290474, "gpt-3.5-turbo_response": "```python\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    if sorted(s) == sorted(t):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n```", "gpt-3.5-turbo_prob": 0.4477875286709526}
{"id": "920", "llama3.1-8b-instruct_response": "def minAwkwardness(s):\n    n = len(s)\n    boys = [i for i in range(n) if s[i] == 'b']\n    girls = [i for i in range(n) if s[i] == 'g']\n    awkwardness = 0\n    i, j = 0, 0\n    while i < len(boys) and j < len(girls):\n        awkwardness += abs(boys[i] - girls[j]) +", "llama3.1-8b-instruct_prob": 0.4533070628702228, "gpt-3.5-turbo_response": "```python\ndef min_awkwardness(s):\n    boys = s.count('b')\n    girls = s.count('g')\n    return boys * girls\n```", "gpt-3.5-turbo_prob": 0.5466929371297772}
{"id": "921", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    ans = 0\n    for i in range(m):\n        l = b[i]\n        r = n\n        while l <= r:\n            mid = (l+r)//2\n            if a[mid-1] <= b[i]:\n                l =", "llama3.1-8b-instruct_prob": 0.3412127641256335, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_left\n\ndef preprocess(arr):\n    n = len(arr)\n    log = [0] * (n + 1)\n    for i in range(2, n + 1):\n        log[i] = log[i // 2] + 1\n    sparse = [[0] * (n - i + 1) for i in range(log[n] + 1)]\n    sparse[0] = arr\n    for i in", "gpt-3.5-turbo_prob": 0.6587872358743665}
{"id": "922", "llama3.1-8b-instruct_response": "```python\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = set(map(int, input().split()))\n    b = set(map(int, input().split()))\n    print(*sorted(a ^ b))\n```", "llama3.1-8b-instruct_prob": 0.6657376097511867, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(set(a) ^ set(b))\n    c.sort()\n    print(*c)", "gpt-3.5-turbo_prob": 0.3342623902488134}
{"id": "923", "llama3.1-8b-instruct_response": "def min_time(N):\n    return (N + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(min_time(n))", "llama3.1-8b-instruct_prob": 0.6078404365055063, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    print(int(2 * n ** 0.5))", "gpt-3.5-turbo_prob": 0.39215956349449366}
{"id": "925", "llama3.1-8b-instruct_response": "```python\nimport math\n\ndef solve():\n    n = int(input())\n    choice = list(map(int, input().split()))\n    dp = [[0.0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if choice[j - 1] == -1:\n                dp[i][j] = 0", "llama3.1-8b-instruct_prob": 0.5131368213508445, "gpt-3.5-turbo_response": "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    choices = list(map(int, input().split()))\n    teams = 0\n    for i in range(1, N):\n        if choices[i] == -1:\n            teams += 0.5\n        else:\n            j = i\n            while j != -1:\n                j = choices[j]\n                teams += 1\n                j =", "gpt-3.5-turbo_prob": 0.48686317864915546}
{"id": "926", "llama3.1-8b-instruct_response": "def max_jars():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        max_sum = 0\n        for i in range(n):\n            max_heap = []\n            second_max_heap = []\n            for j in range(i, n):\n                heappush(max_heap, -a[j])\n                heappush(second_max_heap, -a[j])\n                if", "llama3.1-8b-instruct_prob": 0.4873632335572592, "gpt-3.5-turbo_response": "```python\ndef max_jars(T, cases):\n    results = []\n    for case in cases:\n        N, k = case[0], case[1]\n        chocolates = case[2:]\n        max_jars = 0\n        for i in range(N-1):\n            if chocolates[i] + chocolates[i+1] <= k:\n                count = 2\n                j = i + 2\n                while j < N and chocolates[j] + max(chocolates", "gpt-3.5-turbo_prob": 0.5126367664427409}
{"id": "927", "llama3.1-8b-instruct_response": "n, m = map(int, input().split())\nboard = list(range(1, n + 1))\n\nfor _ in range(m):\n    k = int(input())\n    if k in board:\n        board[0], board[-1] = board[-1], board[0]\n    else:\n        board[-1] = k\n    print(sum(board))", "llama3.1-8b-instruct_prob": 0.43080401066203244, "gpt-3.5-turbo_response": "```python\ndef sum_of_integers(N, M, questions):\n    total_sum = sum(range(1, N+1))\n    result = []\n    for k in questions:\n        if k in range(1, N+1):\n            result.append(str(total_sum - 1))\n        else:\n            result.append(str(total_sum - N + int(k)))\n    return result\n```", "gpt-3.5-turbo_prob": 0.5691959893379676}
{"id": "928", "llama3.1-8b-instruct_response": "def solve(n):\n    return sum(1 for i in range(1, n+1) if i % 3 != 0 and (i % j != 0 for j in range(2, int(n**0.5) + 1)))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.5612296620990991, "gpt-3.5-turbo_response": "```python\ndef bulbs_remaining_on(n):\n    return int(n**0.5)\n```", "gpt-3.5-turbo_prob": 0.4387703379009009}
{"id": "93", "llama3.1-8b-instruct_response": "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mp = {x: i for i, x in enumerate(a)}\n    ans = 0\n    i = 0\n    for x in b:\n        ans += 2 * mp[x] - i + 1\n        i = max(i, mp[x])\n    print(ans)\n\nfor _", "llama3.1-8b-instruct_prob": 0.6442792413176266, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    presents_stack = list(map(int, input().split()))\n    presents_to_send = list(map(int, input().split()))\n    present_index = {present: index for index, present in enumerate(presents_stack)}\n    max_index = 0\n    time = 0\n    for present in presents_to_send:\n        present_pos = present_index[present]\n       ", "gpt-3.5-turbo_prob": 0.35572075868237335}
{"id": "930", "llama3.1-8b-instruct_response": "def solve(n):\n    for i in range(1, n * n + 1):\n        if i % 4 == 0:\n            print(i - i % 4 + 3, end=' ')\n        elif i % 4 == 1:\n            print(i - i % 4 + 1, end=' ')\n        elif i % 4 == 2:\n            print(i - i % 4 + 2, end=' ')\n        else:\n            print(i", "llama3.1-8b-instruct_prob": 0.5139119205015578, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    num = 1\n    arr = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            arr[j][i-j] = num\n            num += 1\n    for i in range(1, n):\n        for j in range(n-i):\n            arr[i+j][n-1-j] = num\n            num += ", "gpt-3.5-turbo_prob": 0.48608807949844224}
{"id": "931", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    return sum(i & 1 == 0 for i in a)\n\nt = int(input())\nfor _ in range(t):\n    print(sum(solve() for _ in range(int(input()))))", "llama3.1-8b-instruct_prob": 0.47687935907794066, "gpt-3.5-turbo_response": "```python\ndef total_damage(N, items):\n    return sum(item for item in items if item % 2 == 0)\n```", "gpt-3.5-turbo_prob": 0.5231206409220593}
{"id": "932", "llama3.1-8b-instruct_response": "import sys\nimport math\n\ndef solve(n, a):\n    dp = [[0.0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = (dp[i][j - 1] +", "llama3.1-8b-instruct_prob": 0.3628154217938262, "gpt-3.5-turbo_response": "```python\nfrom sys import stdin, stdout\n\ndef solve(n, a):\n    ans = sum(a) / 2\n    stdout.write(f\"{ans:.15f}\\n\")\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    solve(n, a)\n```", "gpt-3.5-turbo_prob": 0.6371845782061738}
{"id": "933", "llama3.1-8b-instruct_response": "def is_correct_move(move):\n    cells = move.split('-')\n    if len(cells) != 2:\n        return False\n    start, end = cells\n    if len(start) != 2 or len(end) != 2:\n        return False\n    if not (start[0].isalpha() and start[1].isdigit() and end[0].isalpha() and end[1].isdigit()):\n        return False\n    if not (start[0].lower()", "llama3.1-8b-instruct_prob": 0.5432560431168847, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    s = input()\n    if len(s) != 5 or s[2] != '-':\n        print('Error')\n    else:\n        x1, y1, x2, y2 = ord(s[0]) - ord('a'), int(s[1]) - 1, ord(s[3]) - ord('a'), int(s[4]) - 1\n        dx, dy = abs", "gpt-3.5-turbo_prob": 0.4567439568831153}
{"id": "934", "llama3.1-8b-instruct_response": "def f(X, Y, Z):\n    if X > Y or Y < Z:\n        return 0\n    return (X + Y) * (Y + Z)\n\ndef solve():\n    MOD = 1000000007\n    p, q, r = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n\n    ans = 0", "llama3.1-8b-instruct_prob": 0.5604471097896809, "gpt-3.5-turbo_response": "MOD = 1000000007\nT = int(input())\nfor _ in range(T):\n    p, q, r = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    result = 0\n    for y in B:\n        x_count = len([x for x in", "gpt-3.5-turbo_prob": 0.4395528902103191}
{"id": "935", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    turns = 0\n    while x % 2 == 0 and x % 5 != 0:\n        x *= 2\n        turns += 1\n    if x % 10 == 0:\n        print(turns)\n    else:\n        print(-1)", "llama3.1-8b-instruct_prob": 0.4855522333857982, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    x = int(input())\n    if x % 10 == 0:\n        print(0)\n    elif x % 5 == 0:\n        print(1)\n    else:\n        print(-1)", "gpt-3.5-turbo_prob": 0.5144477666142018}
{"id": "936", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != (i * n + j):\n                return print(n - 1)\n    return print(0)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.5111924399105197, "gpt-3.5-turbo_response": "```python\ndef smallest_number_of_operations(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = int(case[0])\n        matrix = [list(map(int, row.split())) for row in case[1:]]\n        operations = 0\n        for i in range(N-1, 0, -1):\n            if matrix[i][i] != i*N:\n                operations += 1\n                for j in range(i):\n                    matrix[i][", "gpt-3.5-turbo_prob": 0.4888075600894803}
{"id": "937", "llama3.1-8b-instruct_response": "def solve(s):\n    cooking = eating = sleeping = 0\n    for i in s:\n        if i == 'C':\n            cooking += 1\n        elif i == 'E':\n            eating += 1\n        else:\n            sleeping += 1\n        if cooking > eating + sleeping or eating < cooking or sleeping < eating:\n            return \"no\"\n    return \"yes\"\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(s", "llama3.1-8b-instruct_prob": 0.5111924424899821, "gpt-3.5-turbo_response": "def chef_activities(t, logs):\n    result = []\n    for log in logs:\n        if 'C' in log and 'E' in log and 'S' in log:\n            if log.index('C') < log.index('E') < log.index('S'):\n                result.append('yes')\n            else:\n                result.append('no')\n        else:\n            result.append('no')\n    return result", "gpt-3.5-turbo_prob": 0.488807557510018}
{"id": "938", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        freq[i] = freq.get(i, 0) + 1\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            flag = 1\n            for k in range(i, j):\n                if a[k] in a[i:j]:\n                    flag = ", "llama3.1-8b-instruct_prob": 0.4621318598906709, "gpt-3.5-turbo_response": "```python\ndef count_non_intersecting_segments(T, test_cases):\n    results = []\n    for i in range(T):\n        N = int(test_cases[i][0])\n        A = list(map(int, test_cases[i][1].split()))\n        count = 0\n        for a in range(N):\n            for b in range(a, N):\n                for c in range(b+1, N):\n                    for d in range(c, N):\n                        if len(set(A[a:b+", "gpt-3.5-turbo_prob": 0.537868140109329}
{"id": "94", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    c = [0] * n\n    for i in range(n):\n        if a[i] <= T - a[i]:\n            c[a[i] - 1] = 1\n            c[a[i] + (T - a[i]) - 1] = 1\n\n    for i", "llama3.1-8b-instruct_prob": 0.43702750593407935, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * n\n    s = set()\n    for i in range(n):\n        if T - a[i] in s:\n            c[i] = 1\n        s.add(a[i])\n    print(*c)\n```", "gpt-3.5-turbo_prob": 0.5629724940659206}
{"id": "940", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    r = int(input())\n    print(int(math.pi * r ** 2))", "llama3.1-8b-instruct_prob": 0.5293441323559922, "gpt-3.5-turbo_response": "```python\nimport math\nT = int(input())\nfor _ in range(T):\n    R = int(input())\n    print(R*R)\n```", "gpt-3.5-turbo_prob": 0.4706558676440078}
{"id": "941", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((a + b) // 2 * ((a + b) // 2 + 1) // 2 if (a + b) % 2 == 0 else (a // 2 + 1) * (b // 2 + 1))", "llama3.1-8b-instruct_prob": 0.5398518535980452, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    a, b = map(int, input().split())\n    print((a//2 + a%2) * (b//2 + b%2) + (a//2) * (b//2))", "gpt-3.5-turbo_prob": 0.4601481464019548}
{"id": "943", "llama3.1-8b-instruct_response": "def solve(V, W):\n    return min(V, W) + 1\n\nt = int(input())\nfor _ in range(t):\n    V, W = map(int, input().split())\n    print(solve(V, W))", "llama3.1-8b-instruct_prob": 0.4851036343761076, "gpt-3.5-turbo_response": "```python\ndef serving_ways(V, W):\n    return V + W - 1\n```", "gpt-3.5-turbo_prob": 0.5148963656238924}
{"id": "945", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n // 2 + (n % 2 != 0))", "llama3.1-8b-instruct_prob": 0.6915810848518256, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    n = int(input())\n    print((n // 2) + 1)", "gpt-3.5-turbo_prob": 0.3084189151481745}
{"id": "946", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\na = [[0] * K for _ in range(N)]\nfor i in range(N):\n    a[i] = list(map(int, input().split()))\n\nfor j in range(K):\n    for i in range(N - 2, -1, -1):\n        a[i + 1][j] += a[i][j]\n\nfor i in range(N - 1):\n    for", "llama3.1-8b-instruct_prob": 0.3924383250144783, "gpt-3.5-turbo_response": "```python\nimport sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nbuckets = [list(map(int, input().split())) for _ in range(N)]\n\nprobabilities = [sum(buckets[i-1][j] for i in range(1, N+1)) / (N * sum(buckets[-1])) for j in range(K)]\nprint(*probabilities)\n```", "gpt-3.5-turbo_prob": 0.6075616749855217}
{"id": "948", "llama3.1-8b-instruct_response": "def count_perfect_squares(A, B):\n    count = 0\n    for x in range(1, A + 1):\n        for y in range(1, B + 1):\n            if (x**2 + y)**0.5 % 1 == 0:\n                count += 1\n    return count\n\nA, B = map(int, input().split())\nprint(count_perfect_squares(A, B))", "llama3.1-8b-instruct_prob": 0.58310980798625, "gpt-3.5-turbo_response": "```python\nA, B = map(int, input().split())\ncount = 0\nfor x in range(1, A+1):\n    for y in range(1, B+1):\n        if (x**2 + y)**0.5 == int((x**2 + y)**0.5):\n            count += 1\nprint(count)\n```", "gpt-3.5-turbo_prob": 0.41689019201375}
{"id": "949", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(1, n):\n        if a[i] == a[0]:\n            ans += 1\n            if i + 2 < n and a[i + 2] == a[0]:\n                ans += 1\n\n    print(ans)\n```", "llama3.1-8b-instruct_prob": 0.5000000092827912, "gpt-3.5-turbo_response": "```python\ndef max_moves(N, arr):\n    max_moves = 0\n    for i in range(N):\n        count = 0\n        j = i\n        while j < N and arr[j] == arr[i]:\n            count += 1\n            j += 2\n        max_moves = max(max_moves, count)\n    return max_moves\n```", "gpt-3.5-turbo_prob": 0.49999999071720885}
{"id": "95", "llama3.1-8b-instruct_response": "def solve(n):\n    if n == 1:\n        return -1\n    elif n == 2:\n        return 57\n    elif n == 3:\n        return 239\n    else:\n        return int('6' + '7' * (n - 2))\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "llama3.1-8b-instruct_prob": 0.4727849156099243, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(-1)\n    else:\n        print(\"2\" + \"3\" * (n-1))\n```", "gpt-3.5-turbo_prob": 0.5272150843900757}
{"id": "950", "llama3.1-8b-instruct_response": "def smallest_repetition_free_number(n):\n    n = int(n)\n    digits = [0] * 10\n    def dfs(num):\n        if num > n:\n            return num\n        for i in range(1, 10):\n            if digits[i] == 0:\n                digits[i] = 1\n                result = dfs(num * 10 + i)\n                if result != float('inf'):\n                    return result\n                digits[i] = 0\n        return", "llama3.1-8b-instruct_prob": 0.40768337196915166, "gpt-3.5-turbo_response": "from itertools import permutations\nN = input()\nfor i in range(int(N)+1, 10**9):\n    if len(set(str(i))) == len(str(i)):\n        print(i)\n        break\nelse:\n    print(0)", "gpt-3.5-turbo_prob": 0.5923166280308483}
{"id": "952", "llama3.1-8b-instruct_response": "def min_cost(s):\n    vowels = 'aeiou'\n    cost = 0\n    for c in s:\n        if c not in vowels:\n            cost += min(abs(ord(c) - ord('a')) + 5, 26 - abs(ord(c) - ord('a')))\n    return cost\n\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(min_cost(s))", "llama3.1-8b-instruct_prob": 0.5, "gpt-3.5-turbo_response": "```python\ndef min_cost_to_change_consonants(T, strings):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for s in strings:\n        cost = sum(abs(ord(c) - ord('a') - 1) for c in s if c not in vowels)\n        result.append(str(cost))\n    return result\n```", "gpt-3.5-turbo_prob": 0.5}
{"id": "953", "llama3.1-8b-instruct_response": "def solve(N):\n    return (N + 1) // 2\n\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    print(solve(N))", "llama3.1-8b-instruct_prob": 0.6276989832090121, "gpt-3.5-turbo_response": "```python\nT = 1\nN = 4\nprint((N + 1) // 2)\n```", "gpt-3.5-turbo_prob": 0.3723010167909879}
{"id": "954", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    series = [i for i in range(1, n + 1)] + [i for i in range(n - 1, 0, -1)]\n    print(sum(i ** 3 for i in series))", "llama3.1-8b-instruct_prob": 0.3991908193214861, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    series = list(range(1, N+1)) + list(range(N-1, 0, -1))\n    result = sum(x**3 for x in series)\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.600809180678514}
{"id": "955", "llama3.1-8b-instruct_response": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(N):\n    count = 0\n    for p in range(2, N):\n        if is_prime(p):\n            q = (N - p) // 2\n            if q >= 2 and is_prime(q", "llama3.1-8b-instruct_prob": 0.5310882504428991, "gpt-3.5-turbo_response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_ordered_pairs(N):\n    count = 0\n    for p in range(2, N):\n        if is_prime(p):\n            q = (N - p) / 2\n            if q.is_integer", "gpt-3.5-turbo_prob": 0.4689117495571009}
{"id": "956", "llama3.1-8b-instruct_response": "import math\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\ndef convex_hull(n, points):\n    hull = []\n    points.sort(key=lambda p: (p[1], p[0]))\n    def get_next_point(p):\n", "llama3.1-8b-instruct_prob": 0.47687936388658164, "gpt-3.5-turbo_response": "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom decimal import Decimal\nn = int(input())\na = [list(map(int, input().split())) for i in range(n)]\ns = 0\nfor i in range(n):\n    s += a[i][0]*a[(i+1)%n][1]-a[i][1]*a[(i+1)%n][0]\ns = abs(s)\ng = gcd(s, 2)\nprint(", "gpt-3.5-turbo_prob": 0.5231206361134184}
{"id": "957", "llama3.1-8b-instruct_response": "def max_distance_of_peace():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        x = list(map(int, input().split()))\n        x.sort()\n        ans = 0\n        for i in range(1, n):\n            ans = max(ans, x[i] - x[i - 1])\n        print(ans)\n\nmax_distance_of_peace()", "llama3.1-8b-instruct_prob": 0.48880756818291915, "gpt-3.5-turbo_response": "```python\ndef max_distance_of_peace(T, test_cases):\n    results = []\n    for case in test_cases:\n        N = case[0]\n        houses = case[1:]\n        houses.sort()\n        max_distance = max(houses[0], T - houses[-1])\n        for i in range(1, N):\n            max_distance = max(max_distance, (houses[i] - houses[i-1]) // 2)\n        results.append(str(max_distance))\n    return", "gpt-3.5-turbo_prob": 0.5111924318170809}
{"id": "958", "llama3.1-8b-instruct_response": "```python\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    pattern = ''\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            pattern += '*' * i\n        else:\n            pattern += '*' + ' ' * (i - 2) + '*'\n    print(pattern)\n```", "llama3.1-8b-instruct_prob": 0.47065586087614764, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(1, K+1):\n        print('*' * (2*i-1))\n        for j in range(1, i+1):\n            if j < i:\n                print('*' + ' ' * (2*(i-j-1)-1) + '*')\n            else:\n                print('*' * (2*i-1))\n```", "gpt-3.5-turbo_prob": 0.5293441391238524}
{"id": "959", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = 0\n    for i in range(0, n, 2):\n        s += abs(a[i] - a[i + 1])\n    print(s)", "llama3.1-8b-instruct_prob": 0.5231206357631347, "gpt-3.5-turbo_response": "```python\ndef max_sum(N, A):\n    A.sort()\n    result = 0\n    for i in range(0, N, 2):\n        result += abs(A[i] - A[i+1])\n    return result\n```", "gpt-3.5-turbo_prob": 0.4768793642368653}
{"id": "960", "llama3.1-8b-instruct_response": "```python\nfor i in range(int(input())):\n    n = int(input())\n    s = '1'\n    for j in range(1, n):\n        s += ' ' + s\n        s = bin(int(s.split()[-1]) + 1)[2:]\n    print(s)\n```", "llama3.1-8b-instruct_prob": 0.7706342783738711, "gpt-3.5-turbo_response": "```python\ndef generate_pattern(num):\n    binary = bin(num)[2:]\n    for i in range(1, len(binary) + 1):\n        print(int('1' + '0' * (i - 1)), end=' ')\n    for i in range(1, len(binary) + 1):\n        print(int('1' + '0' * (i - 1), 2), end=' ')\n    for i in range(2, len(binary)", "gpt-3.5-turbo_prob": 0.229365721626129}
{"id": "962", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    for i in range(1, n + 1):\n        print(i, end='')\n    for i in range(n - 1, 0, -1):\n        print(i, end='')\n    print()", "llama3.1-8b-instruct_prob": 0.42316564771219456, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    for i in range(K, 0, -1):\n        for j in range(i, 0, -1):\n            print(j, end='')\n        print('', end=' ')\n    print('')\n```", "gpt-3.5-turbo_prob": 0.5768343522878054}
{"id": "963", "llama3.1-8b-instruct_response": "def min_reservoirs():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        hills = list(map(int, input().split()))\n        left, right = [0] * n, [0] * n\n        max_left, max_right = float('-inf'), float('-inf')\n        for i in range(n):\n            max_left = max(max_left, hills[i])\n            left[i] = max_left\n        for i in range(n", "llama3.1-8b-instruct_prob": 0.5806253642647031, "gpt-3.5-turbo_response": "```python\ndef min_reservoirs(T, test_cases):\n    res = []\n    for case in test_cases:\n        N = int(case[0])\n        heights = list(map(int, case[1].split()))\n        left_max = [0] * N\n        right_max = [0] * N\n        left_max[0] = heights[0]\n        right_max[N-1] = heights[N-1]\n        for i in range(1, N):\n           ", "gpt-3.5-turbo_prob": 0.41937463573529693}
{"id": "964", "llama3.1-8b-instruct_response": "def min_moves(H, U, D):\n    if U >= D and (H - D) % (U + D) != 0:\n        return -1\n    return (H - D) // (U + D) * (U + D) + max(H, D)\n\nt = int(input())\nfor _ in range(t):\n    H, U, D = map(int, input().split())\n    print(min_moves(H, U, D))", "llama3.1-8b-instruct_prob": 0.6147211123866336, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    h, u, d = map(int, input().split())\n    if h <= u:\n        print(1)\n    elif u > d and h - u > (u - d):\n        print((h - u - 1) // (u - d) + 2)\n    else:\n        print(-1)", "gpt-3.5-turbo_prob": 0.3852788876133663}
{"id": "965", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n, k = map(int, input().split())\n    students, teacher = divmod(n, k)\n    print(students, teacher)", "llama3.1-8b-instruct_prob": 0.6276989876539227, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    print(N // K, N % K)\n```", "gpt-3.5-turbo_prob": 0.3723010123460772}
{"id": "966", "llama3.1-8b-instruct_response": "def solve():\n    n, u, d = map(int, input().split())\n    hills = list(map(int, input().split()))\n    max_reach = 0\n    parachute_used = False\n    for i in range(n):\n        if i > max_reach:\n            break\n        if i + 1 < n and hills[i + 1] <= hills[i]:\n            max_reach = i + 1\n        elif i + 1 < n and hills[i", "llama3.1-8b-instruct_prob": 0.5734159623210617, "gpt-3.5-turbo_response": "```python\ndef rightmost_reachable_hill(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N, U, D = map(int, test_cases[i].split())\n        H = list(map(int, test_cases[i+1].split()))\n        for j in range(1, N):\n            if H[j] > H[j-1]:\n                if H[j] - H[j-1] > U:\n", "gpt-3.5-turbo_prob": 0.42658403767893815}
{"id": "967", "llama3.1-8b-instruct_response": "def find_subsets():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        m = int(input())\n        arr = list(map(int, input().split()))\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            for j in range(m + 1):\n                if j -", "llama3.1-8b-instruct_prob": 0.43515073917825975, "gpt-3.5-turbo_response": "```python\ndef count_subsets(arr, target):\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for num in arr:\n        for i in range(target, num - 1, -1):\n            dp[i] += dp[i - num]\n    return dp[target]\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = int(input())\n    arr = list(map(int, input", "gpt-3.5-turbo_prob": 0.5648492608217403}
{"id": "968", "llama3.1-8b-instruct_response": "class Node:\n    def __init__(self, value, parent=None):\n        self.value = value\n        self.parent = parent\n        self.children = []\n\ndef dfs(node):\n    stack = [(node, node.value)]\n    while stack:\n        node, min_val = stack.pop()\n        for child in node.children:\n            stack.append((child, min(min_val, child.value)))\n        if node != root:\n            print(min_val, end=' ')\n\nroot = Node(0)\nN =", "llama3.1-8b-instruct_prob": 0.35681744414514577, "gpt-3.5-turbo_response": "```python\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef dfs(v, p, cost, adj, ans):\n    ans[v] = min(cost[v], ans[p])\n    for u in adj[v]:\n        if u != p:\n            dfs(u, v, cost, adj, ans)\n\nn = int(input())\nadj = [[] for _ in range(n+1)]\nfor i, p in enumerate(map(int, input().split())):\n    adj[p].append", "gpt-3.5-turbo_prob": 0.6431825558548543}
{"id": "969", "llama3.1-8b-instruct_response": "def max_months(laddus, redeem):\n    months = 0\n    while laddus >= redeem:\n        laddus -= redeem\n        months += 1\n    return months\n\nt = int(input())\n\nfor _ in range(t):\n    activities, origin = input().split()\n    activities = int(activities)\n    laddus = 0\n    for _ in range(activities):\n        activity = input().split()\n        if activity[0] == 'CONTEST", "llama3.1-8b-instruct_prob": 0.5919211843522799, "gpt-3.5-turbo_response": "def max_months_to_redeem_laddus(T, activities):\n    result = []\n    for i in range(0, len(activities), 2):\n        origin = activities[i].split()[1]\n        laddus = 0\n        for j in range(int(activities[i+1])):\n            activity = activities[i+2+j].split()\n            if activity[0] == 'CONTEST_WON':\n                rank = int(activity[1])\n                if rank <= ", "gpt-3.5-turbo_prob": 0.4080788156477201}
{"id": "97", "llama3.1-8b-instruct_response": "def solve(s, c):\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = list(s)\n            t[i], t[j] = t[j], t[i]\n            if t < c:\n                return ''.join(t)\n    return \"---\"\n\nt = int(input())\nfor _ in range(t):\n    s, c = input().split()\n    print(solve(s, c))", "llama3.1-8b-instruct_prob": 0.5068806553298901, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    s, c = input().split()\n    if s >= c:\n        print(\"---\")\n    else:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:] < c:\n                    print(s[:i] + s[j] + s[i+", "gpt-3.5-turbo_prob": 0.49311934467010987}
{"id": "970", "llama3.1-8b-instruct_response": "import math\nimport sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    for _ in range(q):\n        x, y = map(int, input().split())\n        if x == 0 and y == 0:\n            print(0)\n            continue\n        if x == 0:\n            print(a[0])\n           ", "llama3.1-8b-instruct_prob": 0.4710870631623771, "gpt-3.5-turbo_response": "```python\nfrom bisect import bisect_right\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    walls = list(map(int, input().split()))\n    Q = int(input())\n    for _ in range(Q):\n        x, y = map(int, input().split())\n        idx = bisect_right(walls, max(x, y))\n        if idx == 0 or walls[idx-1] == max(x, y):\n            print(-1", "gpt-3.5-turbo_prob": 0.528912936837623}
{"id": "971", "llama3.1-8b-instruct_response": "def min_moves():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        min_val = min(a)\n        moves = sum(abs(x - min_val) for x in a)\n        print(moves)\n\nmin_moves()", "llama3.1-8b-instruct_prob": 0.5111924373310573, "gpt-3.5-turbo_response": "```python\ndef min_moves_to_equal_elements(T, test_cases):\n    result = []\n    for i in range(0, len(test_cases), 2):\n        N = int(test_cases[i])\n        A = list(map(int, test_cases[i+1].split()))\n        moves = 0\n        for j in range(1, N):\n            moves += abs(A[j] - A[j-1])\n        result.append(str(moves))\n    return result\n```", "gpt-3.5-turbo_prob": 0.48880756266894265}
{"id": "972", "llama3.1-8b-instruct_response": "n, k = map(int, input().split())\nh = sorted(map(int, input().split()))\nprint(min(h[i+k-1] - h[i-1] for i in range(1, k)))", "llama3.1-8b-instruct_prob": 0.443440789152793, "gpt-3.5-turbo_response": "```python\ndef min_height_difference(N, K, heights):\n    heights.sort()\n    min_diff = float('inf')\n    for i in range(N - K + 1):\n        diff = heights[i + K - 1] - heights[i]\n        min_diff = min(min_diff, diff)\n    return min_diff\n```", "gpt-3.5-turbo_prob": 0.556559210847207}
{"id": "973", "llama3.1-8b-instruct_response": "def max_diff(n, k, arr):\n    return max(arr) + k * (n - 1) - min(arr)\n\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(max_diff(n, k, arr))", "llama3.1-8b-instruct_prob": 0.45833714858815794, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr[0] += K\n    arr[-1] -= K\n    print(max(arr) - min(arr))\n```", "gpt-3.5-turbo_prob": 0.541662851411842}
{"id": "974", "llama3.1-8b-instruct_response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nt = int(input())\nfor _ in range(t):\n    a, b, c, d = map(int, input().split())\n    if (a - b) % gcd(c, d) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "llama3.1-8b-instruct_prob": 0.5595040396357481, "gpt-3.5-turbo_response": "```python\ndef can_meet(a, b, c, d):\n    if (b - a) % (c + d) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nT = 2\ntestcases = [(3, 4, 1, 2), (10, 20, 3, 7)]\nfor testcase in testcases:\n    print(can_meet(*testcase))\n```", "gpt-3.5-turbo_prob": 0.4404959603642519}
{"id": "975", "llama3.1-8b-instruct_response": "n = int(input())\n\nfor _ in range(n):\n    N, R, x, y = map(int, input().split())\n    X = set(map(int, input().split())) if x else set()\n    Y = set(map(int, input().split())) if y else set()\n\n    print(N - len(X.union(Y)) - max(0, R - len(X.union(Y))))", "llama3.1-8b-instruct_prob": 0.4931193309882599, "gpt-3.5-turbo_response": "def get_scholarship_count(N, R, X, Y):\n    return max(0, min(N - len(X) - len(Y), R))", "gpt-3.5-turbo_prob": 0.5068806690117401}
{"id": "977", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    result = \"\"\n    for i in range(0, n, 2):\n        if i + 1 < n:\n            result += s[i + 1] + s[i]\n        else:\n            result += s[i]\n    result = result.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"zyxwvutsrqponmlkjihgfedcba\"))\n    print(result)\n\nt = int(input())\nfor", "llama3.1-8b-instruct_prob": 0.45093942807359005, "gpt-3.5-turbo_response": "```python\ndef encode_message(N, S):\n    encoded = ''\n    for i in range(0, N, 2):\n        encoded += S[i+1] + S[i]\n    encoded = encoded[:N] if N % 2 == 0 else encoded[:N-1] + S[N-1]\n    encoded = encoded.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba'))\n    return encoded\n```", "gpt-3.5-turbo_prob": 0.5490605719264099}
{"id": "978", "llama3.1-8b-instruct_response": "def factorial(n, mod):\n    if n == 0:\n        return 1\n    else:\n        return (n * factorial(n - 1, mod)) % mod\n\ndef catalan(n, mod):\n    if n % 2 == 0:\n        return (factorial(n, mod) * factorial(n // 2, mod)) % mod\n    else:\n        return 0\n\ndef solve():\n    mod = 1000000007\n    t = int(input", "llama3.1-8b-instruct_prob": 0.5000000064937768, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    result = pow(2, N, 1000000007) - 1\n    print(result)\n```", "gpt-3.5-turbo_prob": 0.4999999935062232}
{"id": "979", "llama3.1-8b-instruct_response": "import math\n\ndef expected_good_rectangles(m, n, k):\n    return math.ceil((m-1)*(n-1)*(k**2))\n\nm, n, k = map(int, input().split())\nprint(expected_good_rectangles(m, n, k))", "llama3.1-8b-instruct_prob": 0.47065586087614764, "gpt-3.5-turbo_response": "```python\ndef expected_good_rectangles(M, N, K):\n    return int((M * (M + 1) * N * (N + 1) * K) / 4)\n```", "gpt-3.5-turbo_prob": 0.5293441391238524}
{"id": "98", "llama3.1-8b-instruct_response": "q = int(input())\nfor _ in range(q):\n    c, m, x = map(int, input().split())\n    print(min(min(c, m), (c + m + x) // 3))", "llama3.1-8b-instruct_prob": 0.48736322134472176, "gpt-3.5-turbo_response": "```python\nq = int(input())\nfor _ in range(q):\n    c, m, x = map(int, input().split())\n    teams = min(c, m, (c + m + x) // 3)\n    print(teams)\n```", "gpt-3.5-turbo_prob": 0.5126367786552782}
{"id": "980", "llama3.1-8b-instruct_response": "def solve():\n    n, b, m = map(int, input().split())\n    time = 0\n    problems = n\n    speed = m\n    break_time = 0\n    while problems > 0:\n        time += problems * speed\n        if problems % 2 == 0:\n            break_time += b\n            problems //= 2\n            speed *= 2\n        else:\n            break_time += b\n            problems = (problems + 1)", "llama3.1-8b-instruct_prob": 0.4888075654259309, "gpt-3.5-turbo_response": "```python\ndef time_to_finish_problem(N, B, M):\n    time = 0\n    while N > 0:\n        problems_to_solve = (N + 1) // 2 if N % 2 != 0 else N // 2\n        time += problems_to_solve * M + B\n        M *= 2\n        N -= problems_to_solve\n    return time - B\n\nT = int(input())\nfor _ in range(T):\n    N, B", "gpt-3.5-turbo_prob": 0.511192434574069}
{"id": "981", "llama3.1-8b-instruct_response": "def min_diff(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(min_diff(arr))", "llama3.1-8b-instruct_prob": 0.5413051490260739, "gpt-3.5-turbo_response": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, skills[i] - skills[i-1])\n    print(min_diff)", "gpt-3.5-turbo_prob": 0.45869485097392615}
{"id": "982", "llama3.1-8b-instruct_response": "def special_numbers(n):\n    def is_special(num):\n        num_str = str(num)\n        diff = (int(num_str[1]) - int(num_str[0])) % 10\n        for i in range(2, len(num_str)):\n            if (int(num_str[i]) - int(num_str[i-1])) % 10 != diff:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, n+1):\n       ", "llama3.1-8b-instruct_prob": 0.41887580654322076, "gpt-3.5-turbo_response": "def count_special_numbers(N):\n    return (N//10)*9 + min(N%10, 9) if N > 10 else N", "gpt-3.5-turbo_prob": 0.5811241934567792}
{"id": "984", "llama3.1-8b-instruct_response": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = sum(1 for x in a if x % 2 == 0)\n    odd = n - even\n    print(even * odd // 2)", "llama3.1-8b-instruct_prob": 0.44778752764686436, "gpt-3.5-turbo_response": "```python\ndef count_pairs(arr):\n    even_count = 0\n    odd_count = 0\n    result = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n            result += odd_count\n        else:\n            odd_count += 1\n    return result\n```", "gpt-3.5-turbo_prob": 0.5522124723531356}
{"id": "985", "llama3.1-8b-instruct_response": "```python\nfrom math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef longest_dividing_subsequence(nums):\n    n = len(nums)\n    dp = [[1] * n for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if nums[j] % nums[i] == 0:\n               ", "llama3.1-8b-instruct_prob": 0.43377217492410136, "gpt-3.5-turbo_response": "```python\ndef longest_fully_dividing_subsequence(N, sequence):\n    dp = [1] * N\n    for i in range(N):\n        for j in range(i):\n            if sequence[i] % sequence[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```", "gpt-3.5-turbo_prob": 0.5662278250758985}
{"id": "987", "llama3.1-8b-instruct_response": "import math\n\nt = int(input())\n\nfor _ in range(t):\n    finish, distancetoBolt, tigerAccelaration, boltSpeed = map(int, input().split())\n    time_to_cover_distance = (distancetoBolt / boltSpeed)\n    time_to_cover_finish = (finish / boltSpeed)\n    time_to_cover_finish_tiger = (finish + distancetoBolt) / (0.5 * tigerAccelaration * time_to_cover_finish", "llama3.1-8b-instruct_prob": 0.5154835637560209, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    finish, distancetoBolt, tigerAccelaration, boltSpeed = map(int, input().split())\n    time_taken_by_tiger = (distancetoBolt / boltSpeed) ** 0.5\n    time_taken_by_bolt = (finish / boltSpeed)\n    if time_taken_by_tiger < time_taken_by_bolt:\n        print(\"Tiger\")\n    else:\n        print", "gpt-3.5-turbo_prob": 0.4845164362439791}
{"id": "988", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = 0\n    for num in a:\n        xor ^= num\n    if xor != 0:\n        print(sum(a))\n    else:\n        print(0)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "llama3.1-8b-instruct_prob": 0.4076833693896893, "gpt-3.5-turbo_response": "```python\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_val = min(a)\n    xor_sum = 0\n    for i in range(n):\n        xor_sum |= a[i] ^ min_val\n    print(xor_sum)\n```", "gpt-3.5-turbo_prob": 0.5923166306103107}
{"id": "989", "llama3.1-8b-instruct_response": "def solve(x, y, k):\n    return \"Chef\" if (x + y) % k == x % k else \"Paja\"\n\nt = int(input())\nfor _ in range(t):\n    x, y, k = map(int, input().split())\n    print(solve(x, y, k))", "llama3.1-8b-instruct_prob": 0.5000000051589246, "gpt-3.5-turbo_response": "for _ in range(int(input())):\n    X, Y, K = map(int, input().split())\n    if (X + Y) // K % 2 == 0:\n        print(\"Chef\")\n    else:\n        print(\"Paja\")", "gpt-3.5-turbo_prob": 0.49999999484107543}
{"id": "99", "llama3.1-8b-instruct_response": "def solve():\n    n = int(input())\n    s = input()\n    i = 0\n    while i < n and s[i] == '0':\n        i += 1\n    j = n - 1\n    while j >= 0 and s[j] == '1':\n        j -= 1\n    if i <= j:\n        print('0' * i + '1' * (j - i + 1))\n    else:\n        print(s)\n\n", "llama3.1-8b-instruct_prob": 0.486088083019414, "gpt-3.5-turbo_response": "```python\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    clean_string = s.replace('10', '')\n    print(clean_string)\n```", "gpt-3.5-turbo_prob": 0.513911916980586}
{"id": "990", "llama3.1-8b-instruct_response": "def calculate_flagstones(n, m, a):\n    return (n + a - 1) // a * (m + a - 1) // a\n\nn, m, a = map(int, input().split())\nprint(calculate_flagstones(n, m, a))", "llama3.1-8b-instruct_prob": 0.6747938468262207, "gpt-3.5-turbo_response": "import math\nn, m, a = map(int, input().split())\nprint(math.ceil(n/a) * math.ceil(m/a))", "gpt-3.5-turbo_prob": 0.3252061531737793}
{"id": "992", "llama3.1-8b-instruct_response": "import sys\nimport math\n\ndef dist(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef cross(o, a, b):\n    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\ndef", "llama3.1-8b-instruct_prob": 0.5000000017752444, "gpt-3.5-turbo_response": "def min_cost_sealing_window(T, windows):\n    results = []\n    for window in windows:\n        N = int(window[0])\n        M = int(window[N + 1])\n        stripes = [list(map(int, x.split())) for x in window[N + 2:]]\n        min_cost = float('inf')\n        for stripe in stripes:\n            cost = 0\n            for i in range(N):\n                x1, y1 = map(int, window[i + ", "gpt-3.5-turbo_prob": 0.4999999982247556}
{"id": "993", "llama3.1-8b-instruct_response": "def can_park(N, slots):\n    for slot in slots:\n        if slot % N == 0 and slot % (N - 1) != 0:\n            return \"YES\"\n    return \"NO\"\n\nN = int(input())\nslots = []\nfor _ in range(N):\n    slots.append(int(input()))\nprint(can_park(N, slots))", "llama3.1-8b-instruct_prob": 0.6490933900699847, "gpt-3.5-turbo_response": "def can_park_supermarket(N, slots):\n    result = []\n    for n in slots:\n        if (n-2) % 2 == 0:\n            result.append('YES')\n        else:\n            result.append('NO')\n    return result", "gpt-3.5-turbo_prob": 0.35090660993001527}
{"id": "994", "llama3.1-8b-instruct_response": "```python\nfrom collections import defaultdict\n\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    cnt = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(a[k] + a[l] for k in range(i, j + 1) for l in range(i, j + 1))\n            ans += cnt[x", "llama3.1-8b-instruct_prob": 0.5604471087394067, "gpt-3.5-turbo_response": "```python\ndef count_square_submatrices(T, test_cases):\n    results = []\n    for i in range(T):\n        N, X = map(int, test_cases[i][0].split())\n        A = list(map(int, test_cases[i][1].split()))\n        prefix_sum = [0] * (N + 1)\n        for j in range(N):\n            prefix_sum[j + 1] = prefix_sum[j] + A[j]\n        count = 0\n", "gpt-3.5-turbo_prob": 0.43955289126059327}
{"id": "995", "llama3.1-8b-instruct_response": "def maxMoney(n, A, k):\n    dp = [[0] * (k + 1) for _ in range(n)]\n    dp[0][1] = A[0]\n    dp[n - 1][1] = A[n - 1]\n    for i in range(1, n):\n        if i - 1:\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2])\n        if i", "llama3.1-8b-instruct_prob": 0.554299620784329, "gpt-3.5-turbo_response": "def max_money_obtainable(n, A, k):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n    max_money = 0\n    for i in range(k + 1):\n        max_money = max(max_money, prefix_sum[i] + prefix_sum[n] - prefix_sum[n - k +", "gpt-3.5-turbo_prob": 0.44570037921567096}
{"id": "996", "llama3.1-8b-instruct_response": "def find_winner(scores):\n    max_lead = 0\n    winner = 1\n    for i in range(len(scores)):\n        player1, player2 = map(int, scores[i].split())\n        if i == 0:\n            lead = abs(player1 - player2)\n        else:\n            lead = abs(scores[i-1].split()[0] - scores[i-1].split()[1]) - abs(player1 - player2)\n        if lead > max_lead:\n           ", "llama3.1-8b-instruct_prob": 0.2769448337863474, "gpt-3.5-turbo_response": "```python\ndef find_winner_and_lead(N, scores):\n    max_lead = 0\n    winner = 1\n    lead = 0\n    for score in scores:\n        lead += int(score[0]) - int(score[1])\n        if abs(lead) > max_lead:\n            max_lead = abs(lead)\n            if lead > 0:\n                winner = 1\n            else:\n                winner = 2\n    return winner, max_lead\n```", "gpt-3.5-turbo_prob": 0.7230551662136526}
{"id": "997", "llama3.1-8b-instruct_response": "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    ans = 0\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        ans = max(ans, k * 10)\n    print(ans * n // m)", "llama3.1-8b-instruct_prob": 0.2896769467294362, "gpt-3.5-turbo_response": "```python\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    scores = [10] * n\n    for _ in range(m):\n        i, j, k = map(int, input().split())\n        for x in range(i-1, j):\n            scores[x] *= k\n    print(sum(scores)//n)\n```", "gpt-3.5-turbo_prob": 0.7103230532705638}
{"id": "998", "llama3.1-8b-instruct_response": "```python\nimport sys\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [[float('-inf')] * (n + 1) for _ in range(20)]\n\n    def update(self, row, col, val):\n        i = self.n + row\n        for j in range(20):\n            self.tree[j][i] = max(self.tree[j][i], val)\n            i = (i + (1", "llama3.1-8b-instruct_prob": 0.4855522332679001, "gpt-3.5-turbo_response": "```python\nfrom collections import defaultdict\n\nN, Q = map(int, input().split())\nrows = defaultdict(int)\ncols = defaultdict(int)\n\nfor _ in range(Q):\n    op, i, x = input().split()\n    if op == 'RowAdd':\n        rows[int(i)] += int(x)\n    else:\n        cols[int(i)] += int(x)\n\nmax_val = 0\nfor r in rows:\n    for c in cols:\n        max_val = max(max_val,", "gpt-3.5-turbo_prob": 0.5144477667320998}
{"id": "999", "llama3.1-8b-instruct_response": "def solve(k):\n    result = ''\n    for i in range(1, k + 1):\n        result += chr(64 + i)\n    return result\n\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(solve(k))", "llama3.1-8b-instruct_prob": 0.4218475789878016, "gpt-3.5-turbo_response": "```python\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    print(''.join(chr(i+65) for i in range(K)))\n    print(''.join(str(i) for i in range(1, K+1)))\n```", "gpt-3.5-turbo_prob": 0.5781524210121984}
